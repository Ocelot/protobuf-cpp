// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_shared_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_shared_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTAClientHardwareSpecsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAClientHardwareSpecs> {
} _CDOTAClientHardwareSpecs_default_instance_;
class CDOTASaveGame_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_Player> {
} _CDOTASaveGame_Player_default_instance_;
class CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_SaveInstance_PlayerPositions> {
} _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_;
class CDOTASaveGame_SaveInstanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame_SaveInstance> {
} _CDOTASaveGame_SaveInstance_default_instance_;
class CDOTASaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTASaveGame> {
} _CDOTASaveGame_default_instance_;

namespace protobuf_dota_5fshared_5fenums_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[28];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, logical_processors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, cpu_cycles_per_second_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, total_physical_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, is_64_bit_os_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, upload_measurement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAClientHardwareSpecs, prefer_not_host_),
  2,
  0,
  1,
  3,
  5,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_Player, hero_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance_PlayerPositions, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team1_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, team2_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, player_positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame_SaveInstance, save_time_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASaveGame, save_instances_),
  0,
  1,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 11, sizeof(CDOTAClientHardwareSpecs)},
  { 17, 25, sizeof(CDOTASaveGame_Player)},
  { 28, 35, sizeof(CDOTASaveGame_SaveInstance_PlayerPositions)},
  { 37, 48, sizeof(CDOTASaveGame_SaveInstance)},
  { 54, 63, sizeof(CDOTASaveGame)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAClientHardwareSpecs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTASaveGame_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTASaveGame_SaveInstance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTASaveGame_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_shared_enums.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTAClientHardwareSpecs_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTASaveGame_Player_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTASaveGame_SaveInstance_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDOTASaveGame_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CDOTAClientHardwareSpecs_default_instance_.DefaultConstruct();
  _CDOTASaveGame_Player_default_instance_.DefaultConstruct();
  _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_.DefaultConstruct();
  _CDOTASaveGame_SaveInstance_default_instance_.DefaultConstruct();
  _CDOTASaveGame_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027dota_shared_enums.proto\022\nproto.dota\"\277\001"
      "\n\030CDOTAClientHardwareSpecs\022\032\n\022logical_pr"
      "ocessors\030\001 \001(\r\022\035\n\025cpu_cycles_per_second\030"
      "\002 \001(\006\022\035\n\025total_physical_memory\030\003 \001(\006\022\024\n\014"
      "is_64_bit_os\030\004 \001(\010\022\032\n\022upload_measurement"
      "\030\005 \001(\004\022\027\n\017prefer_not_host\030\006 \001(\010\"\372\003\n\rCDOT"
      "ASaveGame\022\020\n\010match_id\030\005 \001(\004\022\021\n\tsave_time"
      "\030\002 \001(\r\0221\n\007players\030\003 \003(\0132 .proto.dota.CDO"
      "TASaveGame.Player\022>\n\016save_instances\030\004 \003("
      "\0132&.proto.dota.CDOTASaveGame.SaveInstanc"
      "e\032d\n\006Player\022>\n\004team\030\001 \001(\0162\030.proto.dota.D"
      "OTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004n"
      "ame\030\002 \001(\t\022\014\n\004hero\030\003 \001(\t\032\352\001\n\014SaveInstance"
      "\022\021\n\tgame_time\030\002 \001(\r\022\023\n\013team1_score\030\003 \001(\r"
      "\022\023\n\013team2_score\030\004 \001(\r\022P\n\020player_position"
      "s\030\005 \003(\01326.proto.dota.CDOTASaveGame.SaveI"
      "nstance.PlayerPositions\022\017\n\007save_id\030\006 \001(\r"
      "\022\021\n\tsave_time\030\007 \001(\r\032\'\n\017PlayerPositions\022\t"
      "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002*\300\004\n\rDOTA_GameMode\022\026"
      "\n\022DOTA_GAMEMODE_NONE\020\000\022\024\n\020DOTA_GAMEMODE_"
      "AP\020\001\022\024\n\020DOTA_GAMEMODE_CM\020\002\022\024\n\020DOTA_GAMEM"
      "ODE_RD\020\003\022\024\n\020DOTA_GAMEMODE_SD\020\004\022\024\n\020DOTA_G"
      "AMEMODE_AR\020\005\022\027\n\023DOTA_GAMEMODE_INTRO\020\006\022\024\n"
      "\020DOTA_GAMEMODE_HW\020\007\022\034\n\030DOTA_GAMEMODE_REV"
      "ERSE_CM\020\010\022\026\n\022DOTA_GAMEMODE_XMAS\020\t\022\032\n\026DOT"
      "A_GAMEMODE_TUTORIAL\020\n\022\024\n\020DOTA_GAMEMODE_M"
      "O\020\013\022\024\n\020DOTA_GAMEMODE_LP\020\014\022\027\n\023DOTA_GAMEMO"
      "DE_POOL1\020\r\022\024\n\020DOTA_GAMEMODE_FH\020\016\022\030\n\024DOTA"
      "_GAMEMODE_CUSTOM\020\017\022\024\n\020DOTA_GAMEMODE_CD\020\020"
      "\022\024\n\020DOTA_GAMEMODE_BD\020\021\022\037\n\033DOTA_GAMEMODE_"
      "ABILITY_DRAFT\020\022\022\027\n\023DOTA_GAMEMODE_EVENT\020\023"
      "\022\026\n\022DOTA_GAMEMODE_ARDM\020\024\022\030\n\024DOTA_GAMEMOD"
      "E_1V1MID\020\025\022\033\n\027DOTA_GAMEMODE_ALL_DRAFT\020\026*"
      "\354\003\n\016DOTA_GameState\022\035\n\031DOTA_GAMERULES_STA"
      "TE_INIT\020\000\0221\n-DOTA_GAMERULES_STATE_WAIT_F"
      "OR_PLAYERS_TO_LOAD\020\001\022\'\n#DOTA_GAMERULES_S"
      "TATE_HERO_SELECTION\020\002\022&\n\"DOTA_GAMERULES_"
      "STATE_STRATEGY_TIME\020\003\022!\n\035DOTA_GAMERULES_"
      "STATE_PRE_GAME\020\004\022)\n%DOTA_GAMERULES_STATE"
      "_GAME_IN_PROGRESS\020\005\022\"\n\036DOTA_GAMERULES_ST"
      "ATE_POST_GAME\020\006\022#\n\037DOTA_GAMERULES_STATE_"
      "DISCONNECT\020\007\022&\n\"DOTA_GAMERULES_STATE_TEA"
      "M_SHOWCASE\020\010\022*\n&DOTA_GAMERULES_STATE_CUS"
      "TOM_GAME_SETUP\020\t\022-\n)DOTA_GAMERULES_STATE"
      "_WAIT_FOR_MAP_TO_LOAD\020\n\022\035\n\031DOTA_GAMERULE"
      "S_STATE_LAST\020\013*\266\001\n\014DOTA_GC_TEAM\022\032\n\026DOTA_"
      "GC_TEAM_GOOD_GUYS\020\000\022\031\n\025DOTA_GC_TEAM_BAD_"
      "GUYS\020\001\022\034\n\030DOTA_GC_TEAM_BROADCASTER\020\002\022\032\n\026"
      "DOTA_GC_TEAM_SPECTATOR\020\003\022\034\n\030DOTA_GC_TEAM"
      "_PLAYER_POOL\020\004\022\027\n\023DOTA_GC_TEAM_NOTEAM\020\005*"
      "\306\004\n\006EEvent\022\021\n\rEVENT_ID_NONE\020\000\022\025\n\021EVENT_I"
      "D_DIRETIDE\020\001\022\034\n\030EVENT_ID_SPRING_FESTIVAL"
      "\020\002\022\033\n\027EVENT_ID_FROSTIVUS_2013\020\003\022\034\n\030EVENT"
      "_ID_COMPENDIUM_2014\020\004\022\032\n\026EVENT_ID_NEXON_"
      "PC_BANG\020\005\022\032\n\026EVENT_ID_PWRD_DAC_2015\020\006\022\033\n"
      "\027EVENT_ID_NEW_BLOOM_2015\020\007\022\037\n\033EVENT_ID_I"
      "NTERNATIONAL_2015\020\010\022\034\n\030EVENT_ID_FALL_MAJ"
      "OR_2015\020\t\022\026\n\022EVENT_ID_ORACLE_PA\020\n\022$\n EVE"
      "NT_ID_NEW_BLOOM_2015_PREBEAST\020\013\022\026\n\022EVENT"
      "_ID_FROSTIVUS\020\014\022\036\n\032EVENT_ID_WINTER_MAJOR"
      "_2016\020\r\022\037\n\033EVENT_ID_INTERNATIONAL_2016\020\016"
      "\022\034\n\030EVENT_ID_FALL_MAJOR_2016\020\017\022\036\n\032EVENT_"
      "ID_WINTER_MAJOR_2017\020\020\022\033\n\027EVENT_ID_NEW_B"
      "LOOM_2017\020\021\022\037\n\033EVENT_ID_INTERNATIONAL_20"
      "17\020\022\022\022\n\016EVENT_ID_COUNT\020\023*\250\002\n\022DOTALeaverS"
      "tatus_t\022\024\n\020DOTA_LEAVER_NONE\020\000\022\034\n\030DOTA_LE"
      "AVER_DISCONNECTED\020\001\022%\n!DOTA_LEAVER_DISCO"
      "NNECTED_TOO_LONG\020\002\022\031\n\025DOTA_LEAVER_ABANDO"
      "NED\020\003\022\023\n\017DOTA_LEAVER_AFK\020\004\022\037\n\033DOTA_LEAVE"
      "R_NEVER_CONNECTED\020\005\022(\n$DOTA_LEAVER_NEVER"
      "_CONNECTED_TOO_LONG\020\006\022\"\n\036DOTA_LEAVER_FAI"
      "LED_TO_READY_UP\020\007\022\030\n\024DOTA_LEAVER_DECLINE"
      "D\020\010*\236\002\n\025DOTAConnectionState_t\022!\n\035DOTA_CO"
      "NNECTION_STATE_UNKNOWN\020\000\022+\n\'DOTA_CONNECT"
      "ION_STATE_NOT_YET_CONNECTED\020\001\022#\n\037DOTA_CO"
      "NNECTION_STATE_CONNECTED\020\002\022&\n\"DOTA_CONNE"
      "CTION_STATE_DISCONNECTED\020\003\022#\n\037DOTA_CONNE"
      "CTION_STATE_ABANDONED\020\004\022!\n\035DOTA_CONNECTI"
      "ON_STATE_LOADING\020\005\022 \n\034DOTA_CONNECTION_ST"
      "ATE_FAILED\020\006*v\n\rFantasy_Roles\022\032\n\026FANTASY"
      "_ROLE_UNDEFINED\020\000\022\025\n\021FANTASY_ROLE_CORE\020\001"
      "\022\030\n\024FANTASY_ROLE_SUPPORT\020\002\022\030\n\024FANTASY_RO"
      "LE_OFFLANE\020\003*\212\001\n\022Fantasy_Team_Slots\022\025\n\021F"
      "ANTASY_SLOT_NONE\020\000\022\025\n\021FANTASY_SLOT_CORE\020"
      "\001\022\030\n\024FANTASY_SLOT_SUPPORT\020\002\022\024\n\020FANTASY_S"
      "LOT_ANY\020\003\022\026\n\022FANTASY_SLOT_BENCH\020\004*\335\002\n\026Fa"
      "ntasy_Selection_Mode\022\035\n\031FANTASY_SELECTIO"
      "N_INVALID\020\000\022\034\n\030FANTASY_SELECTION_LOCKED\020"
      "\001\022\035\n\031FANTASY_SELECTION_SHUFFLE\020\002\022\037\n\033FANT"
      "ASY_SELECTION_FREE_PICK\020\003\022\033\n\027FANTASY_SEL"
      "ECTION_ENDED\020\004\022 \n\034FANTASY_SELECTION_PRE_"
      "SEASON\020\005\022\037\n\033FANTASY_SELECTION_PRE_DRAFT\020"
      "\006\022\036\n\032FANTASY_SELECTION_DRAFTING\020\007\022$\n FAN"
      "TASY_SELECTION_REGULAR_SEASON\020\010\022 \n\034FANTA"
      "SY_SELECTION_CARD_BASED\020\t*\234\005\n\025DOTAChatCh"
      "annelType_t\022\034\n\030DOTAChannelType_Regional\020"
      "\000\022\032\n\026DOTAChannelType_Custom\020\001\022\031\n\025DOTACha"
      "nnelType_Party\020\002\022\031\n\025DOTAChannelType_Lobb"
      "y\020\003\022\030\n\024DOTAChannelType_Team\020\004\022\031\n\025DOTACha"
      "nnelType_Guild\020\005\022\033\n\027DOTAChannelType_Fant"
      "asy\020\006\022\033\n\027DOTAChannelType_Whisper\020\007\022\033\n\027DO"
      "TAChannelType_Console\020\010\022\027\n\023DOTAChannelTy"
      "pe_Tab\020\t\022\033\n\027DOTAChannelType_Invalid\020\n\022\033\n"
      "\027DOTAChannelType_GameAll\020\013\022\036\n\032DOTAChanne"
      "lType_GameAllies\020\014\022!\n\035DOTAChannelType_Ga"
      "meSpectator\020\r\022\030\n\024DOTAChannelType_Cafe\020\017\022"
      "\036\n\032DOTAChannelType_CustomGame\020\020\022\033\n\027DOTAC"
      "hannelType_Private\020\021\022\034\n\030DOTAChannelType_"
      "PostGame\020\022\022\035\n\031DOTAChannelType_BattleCup\020"
      "\023\022!\n\035DOTAChannelType_HLTVSpectator\020\024\022\036\n\032"
      "DOTAChannelType_GameEvents\020\025\022\032\n\026DOTAChan"
      "nelType_Trivia\020\026*\204\002\n\024EProfileCardSlotTyp"
      "e\022 \n\034k_EProfileCardSlotType_Empty\020\000\022\037\n\033k"
      "_EProfileCardSlotType_Stat\020\001\022!\n\035k_EProfi"
      "leCardSlotType_Trophy\020\002\022\037\n\033k_EProfileCar"
      "dSlotType_Item\020\003\022\037\n\033k_EProfileCardSlotTy"
      "pe_Hero\020\004\022#\n\037k_EProfileCardSlotType_Emot"
      "icon\020\005\022\037\n\033k_EProfileCardSlotType_Team\020\006*"
      "\225\001\n\027EMatchGroupServerStatus\022 \n\034k_EMatchG"
      "roupServerStatus_OK\020\000\0221\n-k_EMatchGroupSe"
      "rverStatus_LimitedAvailability\020\001\022%\n!k_EM"
      "atchGroupServerStatus_Offline\020\002*O\n\014DOTA_"
      "CM_PICK\022\022\n\016DOTA_CM_RANDOM\020\000\022\025\n\021DOTA_CM_G"
      "OOD_GUYS\020\001\022\024\n\020DOTA_CM_BAD_GUYS\020\002*\213\001\n\026DOT"
      "ALowPriorityBanType\022!\n\035DOTA_LOW_PRIORITY"
      "_BAN_ABANDON\020\000\022!\n\035DOTA_LOW_PRIORITY_BAN_"
      "REPORTS\020\001\022+\n\'DOTA_LOW_PRIORITY_BAN_SECON"
      "DARY_ABANDON\020\002*}\n\023DOTALobbyReadyState\022\"\n"
      "\036DOTALobbyReadyState_UNDECLARED\020\000\022 \n\034DOT"
      "ALobbyReadyState_ACCEPTED\020\001\022 \n\034DOTALobby"
      "ReadyState_DECLINED\020\002*D\n\017DOTAGameVersion"
      "\022\030\n\024GAME_VERSION_CURRENT\020\000\022\027\n\023GAME_VERSI"
      "ON_STABLE\020\001*\322\003\n\023DOTAJoinLobbyResult\022\034\n\030D"
      "OTA_JOIN_RESULT_SUCCESS\020\000\022$\n DOTA_JOIN_R"
      "ESULT_ALREADY_IN_GAME\020\001\022\"\n\036DOTA_JOIN_RES"
      "ULT_INVALID_LOBBY\020\002\022\'\n#DOTA_JOIN_RESULT_"
      "INCORRECT_PASSWORD\020\003\022\"\n\036DOTA_JOIN_RESULT"
      "_ACCESS_DENIED\020\004\022\"\n\036DOTA_JOIN_RESULT_GEN"
      "ERIC_ERROR\020\005\022&\n\"DOTA_JOIN_RESULT_INCORRE"
      "CT_VERSION\020\006\022\"\n\036DOTA_JOIN_RESULT_IN_TEAM"
      "_PARTY\020\007\022#\n\037DOTA_JOIN_RESULT_NO_LOBBY_FO"
      "UND\020\010\022\037\n\033DOTA_JOIN_RESULT_LOBBY_FULL\020\t\0222"
      "\n.DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT"
      "_VERSION\020\n\022\034\n\030DOTA_JOIN_RESULT_TIMEOUT\020\013"
      "*^\n\025SelectionPriorityType\022\r\n\tUNDEFINED\020\000"
      "\022\013\n\007RADIANT\020\001\022\010\n\004DIRE\020\002\022\016\n\nFIRST_PICK\020\003\022"
      "\017\n\013SECOND_PICK\020\004*b\n\rDOTAMatchVote\022\031\n\025DOT"
      "AMatchVote_INVALID\020\000\022\032\n\026DOTAMatchVote_PO"
      "SITIVE\020\001\022\032\n\026DOTAMatchVote_NEGATIVE\020\002*\203\002\n"
      "\027DOTA_LobbyMemberXPBonus\022#\n\037DOTA_LobbyMe"
      "mberXPBonus_DEFAULT\020\000\022*\n&DOTA_LobbyMembe"
      "rXPBonus_BATTLE_BOOSTER\020\001\022\'\n#DOTA_LobbyM"
      "emberXPBonus_SHARE_BONUS\020\002\022!\n\035DOTA_Lobby"
      "MemberXPBonus_PARTY\020\003\022\'\n#DOTA_LobbyMembe"
      "rXPBonus_RECRUITMENT\020\004\022\"\n\036DOTA_LobbyMemb"
      "erXPBonus_PCBANG\020\005*x\n\023DOTALobbyVisibilit"
      "y\022\036\n\032DOTALobbyVisibility_Public\020\000\022\037\n\033DOT"
      "ALobbyVisibility_Friends\020\001\022 \n\034DOTALobbyV"
      "isibility_Unlisted\020\002*\347\002\n\022EDOTAPlayerMMRT"
      "ype\022 \n\034k_EDOTAPlayerMMRType_Invalid\020\000\022&\n"
      "\"k_EDOTAPlayerMMRType_GeneralHidden\020\001\022#\n"
      "\037k_EDOTAPlayerMMRType_SoloHidden\020\002\022+\n\'k_"
      "EDOTAPlayerMMRType_GeneralCompetitive\020\003\022"
      "(\n$k_EDOTAPlayerMMRType_SoloCompetitive\020"
      "\004\022.\n*k_EDOTAPlayerMMRType_1v1Competitive"
      "_UNUSED\020\005\022.\n*k_EDOTAPlayerMMRType_Genera"
      "lSeasonalRanked\020\006\022+\n\'k_EDOTAPlayerMMRTyp"
      "e_SoloSeasonalRanked\020\007*\207\002\n\tMatchType\022\025\n\021"
      "MATCH_TYPE_CASUAL\020\000\022\030\n\024MATCH_TYPE_COOP_B"
      "OTS\020\001\022\032\n\026MATCH_TYPE_TEAM_RANKED\020\002\022 \n\034MAT"
      "CH_TYPE_LEGACY_SOLO_QUEUE\020\003\022\032\n\026MATCH_TYP"
      "E_COMPETITIVE\020\004\022\036\n\032MATCH_TYPE_WEEKEND_TO"
      "URNEY\020\005\022\031\n\025MATCH_TYPE_CASUAL_1V1\020\006\022\024\n\020MA"
      "TCH_TYPE_EVENT\020\007\022\036\n\032MATCH_TYPE_SEASONAL_"
      "RANKED\020\010*\204\002\n\021DOTABotDifficulty\022\032\n\026BOT_DI"
      "FFICULTY_PASSIVE\020\000\022\027\n\023BOT_DIFFICULTY_EAS"
      "Y\020\001\022\031\n\025BOT_DIFFICULTY_MEDIUM\020\002\022\027\n\023BOT_DI"
      "FFICULTY_HARD\020\003\022\031\n\025BOT_DIFFICULTY_UNFAIR"
      "\020\004\022\032\n\026BOT_DIFFICULTY_INVALID\020\005\022\031\n\025BOT_DI"
      "FFICULTY_EXTRA1\020\006\022\031\n\025BOT_DIFFICULTY_EXTR"
      "A2\020\007\022\031\n\025BOT_DIFFICULTY_EXTRA3\020\010*\223\006\n\rDOTA"
      "_BOT_MODE\022\026\n\022DOTA_BOT_MODE_NONE\020\000\022\030\n\024DOT"
      "A_BOT_MODE_LANING\020\001\022\030\n\024DOTA_BOT_MODE_ATT"
      "ACK\020\002\022\026\n\022DOTA_BOT_MODE_ROAM\020\003\022\031\n\025DOTA_BO"
      "T_MODE_RETREAT\020\004\022\035\n\031DOTA_BOT_MODE_SECRET"
      "_SHOP\020\005\022\033\n\027DOTA_BOT_MODE_SIDE_SHOP\020\006\022\026\n\022"
      "DOTA_BOT_MODE_RUNE\020\007\022 \n\034DOTA_BOT_MODE_PU"
      "SH_TOWER_TOP\020\010\022 \n\034DOTA_BOT_MODE_PUSH_TOW"
      "ER_MID\020\t\022 \n\034DOTA_BOT_MODE_PUSH_TOWER_BOT"
      "\020\n\022\"\n\036DOTA_BOT_MODE_DEFEND_TOWER_TOP\020\013\022\""
      "\n\036DOTA_BOT_MODE_DEFEND_TOWER_MID\020\014\022\"\n\036DO"
      "TA_BOT_MODE_DEFEND_TOWER_BOT\020\r\022\032\n\026DOTA_B"
      "OT_MODE_ASSEMBLE\020\016\022&\n\"DOTA_BOT_MODE_ASSE"
      "MBLE_WITH_HUMANS\020\017\022\033\n\027DOTA_BOT_MODE_TEAM"
      "_ROAM\020\020\022\026\n\022DOTA_BOT_MODE_FARM\020\021\022\035\n\031DOTA_"
      "BOT_MODE_DEFEND_ALLY\020\022\022#\n\037DOTA_BOT_MODE_"
      "EVASIVE_MANEUVERS\020\023\022\030\n\024DOTA_BOT_MODE_ROS"
      "HAN\020\024\022\026\n\022DOTA_BOT_MODE_ITEM\020\025\022\026\n\022DOTA_BO"
      "T_MODE_WARD\020\026\022\033\n\027DOTA_BOT_MODE_COMPANION"
      "\020\027\022\037\n\033DOTA_BOT_MODE_TUTORIAL_BOSS\020\030\022\030\n\024D"
      "OTA_BOT_MODE_MINION\020\031*\363\001\n\016MatchLanguages"
      "\022\032\n\026MATCH_LANGUAGE_INVALID\020\000\022\032\n\026MATCH_LA"
      "NGUAGE_ENGLISH\020\001\022\032\n\026MATCH_LANGUAGE_RUSSI"
      "AN\020\002\022\032\n\026MATCH_LANGUAGE_CHINESE\020\003\022\031\n\025MATC"
      "H_LANGUAGE_KOREAN\020\004\022\032\n\026MATCH_LANGUAGE_SP"
      "ANISH\020\005\022\035\n\031MATCH_LANGUAGE_PORTUGUESE\020\006\022\033"
      "\n\027MATCH_LANGUAGE_ENGLISH2\020\007*\330\002\n\032ETourney"
      "QueueDeadlineState\022\'\n#k_ETourneyQueueDea"
      "dlineState_Normal\020\000\022\'\n#k_ETourneyQueueDe"
      "adlineState_Missed\020\001\022*\n&k_ETourneyQueueD"
      "eadlineState_ExpiredOK\020\002\022+\n\'k_ETourneyQu"
      "eueDeadlineState_SeekingBye\020\003\0222\n.k_ETour"
      "neyQueueDeadlineState_EligibleForRefund\020"
      "\004\022,\n\037k_ETourneyQueueDeadlineState_NA\020\377\377\377"
      "\377\377\377\377\377\377\001\022-\n)k_ETourneyQueueDeadlineState_"
      "ExpiringSoon\020e*\307\002\n\rEMatchOutcome\022\033\n\027k_EM"
      "atchOutcome_Unknown\020\000\022\036\n\032k_EMatchOutcome"
      "_RadVictory\020\002\022\037\n\033k_EMatchOutcome_DireVic"
      "tory\020\003\0223\n/k_EMatchOutcome_NotScored_Poor"
      "NetworkConditions\020@\022$\n k_EMatchOutcome_N"
      "otScored_Leaver\020A\022)\n%k_EMatchOutcome_Not"
      "Scored_ServerCrash\020B\022*\n&k_EMatchOutcome_"
      "NotScored_NeverStarted\020C\022&\n\"k_EMatchOutc"
      "ome_NotScored_Canceled\020DB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8951);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_shared_enums.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fshared_5fenums_2eproto

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[0];
}
bool DOTA_GameMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[1];
}
bool DOTA_GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[2];
}
bool DOTA_GC_TEAM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEvent_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[3];
}
bool EEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[4];
}
bool DOTALeaverStatus_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[5];
}
bool DOTAConnectionState_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[6];
}
bool Fantasy_Roles_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[7];
}
bool Fantasy_Team_Slots_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[8];
}
bool Fantasy_Selection_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[9];
}
bool DOTAChatChannelType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[10];
}
bool EProfileCardSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[11];
}
bool EMatchGroupServerStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[12];
}
bool DOTA_CM_PICK_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[13];
}
bool DOTALowPriorityBanType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[14];
}
bool DOTALobbyReadyState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[15];
}
bool DOTAGameVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[16];
}
bool DOTAJoinLobbyResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SelectionPriorityType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[17];
}
bool SelectionPriorityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[18];
}
bool DOTAMatchVote_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[19];
}
bool DOTA_LobbyMemberXPBonus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[20];
}
bool DOTALobbyVisibility_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[21];
}
bool EDOTAPlayerMMRType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchType_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[22];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[23];
}
bool DOTABotDifficulty_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[24];
}
bool DOTA_BOT_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[25];
}
bool MatchLanguages_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[26];
}
bool ETourneyQueueDeadlineState_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_enum_descriptors[27];
}
bool EMatchOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAClientHardwareSpecs::kLogicalProcessorsFieldNumber;
const int CDOTAClientHardwareSpecs::kCpuCyclesPerSecondFieldNumber;
const int CDOTAClientHardwareSpecs::kTotalPhysicalMemoryFieldNumber;
const int CDOTAClientHardwareSpecs::kIs64BitOsFieldNumber;
const int CDOTAClientHardwareSpecs::kUploadMeasurementFieldNumber;
const int CDOTAClientHardwareSpecs::kPreferNotHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAClientHardwareSpecs)
}
CDOTAClientHardwareSpecs::CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cpu_cycles_per_second_, &from.cpu_cycles_per_second_,
    reinterpret_cast<char*>(&upload_measurement_) -
    reinterpret_cast<char*>(&cpu_cycles_per_second_) + sizeof(upload_measurement_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAClientHardwareSpecs)
}

void CDOTAClientHardwareSpecs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cpu_cycles_per_second_, 0, reinterpret_cast<char*>(&upload_measurement_) -
    reinterpret_cast<char*>(&cpu_cycles_per_second_) + sizeof(upload_measurement_));
}

CDOTAClientHardwareSpecs::~CDOTAClientHardwareSpecs() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAClientHardwareSpecs)
  SharedDtor();
}

void CDOTAClientHardwareSpecs::SharedDtor() {
}

void CDOTAClientHardwareSpecs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAClientHardwareSpecs::descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAClientHardwareSpecs& CDOTAClientHardwareSpecs::default_instance() {
  protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAClientHardwareSpecs* CDOTAClientHardwareSpecs::New(::google::protobuf::Arena* arena) const {
  CDOTAClientHardwareSpecs* n = new CDOTAClientHardwareSpecs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAClientHardwareSpecs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAClientHardwareSpecs)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&cpu_cycles_per_second_, 0, reinterpret_cast<char*>(&upload_measurement_) -
      reinterpret_cast<char*>(&cpu_cycles_per_second_) + sizeof(upload_measurement_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAClientHardwareSpecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAClientHardwareSpecs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 logical_processors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_logical_processors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logical_processors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 cpu_cycles_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cpu_cycles_per_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &cpu_cycles_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 total_physical_memory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_total_physical_memory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &total_physical_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_64_bit_os = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_64_bit_os();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_64_bit_os_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 upload_measurement = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_upload_measurement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upload_measurement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prefer_not_host = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_prefer_not_host();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefer_not_host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAClientHardwareSpecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAClientHardwareSpecs)
  return false;
#undef DO_
}

void CDOTAClientHardwareSpecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAClientHardwareSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_processors = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->logical_processors(), output);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->cpu_cycles_per_second(), output);
  }

  // optional fixed64 total_physical_memory = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->total_physical_memory(), output);
  }

  // optional bool is_64_bit_os = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_64_bit_os(), output);
  }

  // optional uint64 upload_measurement = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->upload_measurement(), output);
  }

  // optional bool prefer_not_host = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->prefer_not_host(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAClientHardwareSpecs)
}

::google::protobuf::uint8* CDOTAClientHardwareSpecs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAClientHardwareSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_processors = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->logical_processors(), target);
  }

  // optional fixed64 cpu_cycles_per_second = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->cpu_cycles_per_second(), target);
  }

  // optional fixed64 total_physical_memory = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->total_physical_memory(), target);
  }

  // optional bool is_64_bit_os = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_64_bit_os(), target);
  }

  // optional uint64 upload_measurement = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->upload_measurement(), target);
  }

  // optional bool prefer_not_host = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->prefer_not_host(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAClientHardwareSpecs)
  return target;
}

size_t CDOTAClientHardwareSpecs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAClientHardwareSpecs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 cpu_cycles_per_second = 2;
    if (has_cpu_cycles_per_second()) {
      total_size += 1 + 8;
    }

    // optional fixed64 total_physical_memory = 3;
    if (has_total_physical_memory()) {
      total_size += 1 + 8;
    }

    // optional uint32 logical_processors = 1;
    if (has_logical_processors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logical_processors());
    }

    // optional bool is_64_bit_os = 4;
    if (has_is_64_bit_os()) {
      total_size += 1 + 1;
    }

    // optional bool prefer_not_host = 6;
    if (has_prefer_not_host()) {
      total_size += 1 + 1;
    }

    // optional uint64 upload_measurement = 5;
    if (has_upload_measurement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upload_measurement());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAClientHardwareSpecs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAClientHardwareSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAClientHardwareSpecs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAClientHardwareSpecs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAClientHardwareSpecs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAClientHardwareSpecs)
    MergeFrom(*source);
  }
}

void CDOTAClientHardwareSpecs::MergeFrom(const CDOTAClientHardwareSpecs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAClientHardwareSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cpu_cycles_per_second_ = from.cpu_cycles_per_second_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_physical_memory_ = from.total_physical_memory_;
    }
    if (cached_has_bits & 0x00000004u) {
      logical_processors_ = from.logical_processors_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_64_bit_os_ = from.is_64_bit_os_;
    }
    if (cached_has_bits & 0x00000010u) {
      prefer_not_host_ = from.prefer_not_host_;
    }
    if (cached_has_bits & 0x00000020u) {
      upload_measurement_ = from.upload_measurement_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAClientHardwareSpecs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAClientHardwareSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAClientHardwareSpecs::CopyFrom(const CDOTAClientHardwareSpecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAClientHardwareSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAClientHardwareSpecs::IsInitialized() const {
  return true;
}

void CDOTAClientHardwareSpecs::Swap(CDOTAClientHardwareSpecs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAClientHardwareSpecs::InternalSwap(CDOTAClientHardwareSpecs* other) {
  std::swap(cpu_cycles_per_second_, other->cpu_cycles_per_second_);
  std::swap(total_physical_memory_, other->total_physical_memory_);
  std::swap(logical_processors_, other->logical_processors_);
  std::swap(is_64_bit_os_, other->is_64_bit_os_);
  std::swap(prefer_not_host_, other->prefer_not_host_);
  std::swap(upload_measurement_, other->upload_measurement_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAClientHardwareSpecs::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAClientHardwareSpecs

// optional uint32 logical_processors = 1;
bool CDOTAClientHardwareSpecs::has_logical_processors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_logical_processors() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAClientHardwareSpecs::clear_has_logical_processors() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAClientHardwareSpecs::clear_logical_processors() {
  logical_processors_ = 0u;
  clear_has_logical_processors();
}
::google::protobuf::uint32 CDOTAClientHardwareSpecs::logical_processors() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.logical_processors)
  return logical_processors_;
}
void CDOTAClientHardwareSpecs::set_logical_processors(::google::protobuf::uint32 value) {
  set_has_logical_processors();
  logical_processors_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.logical_processors)
}

// optional fixed64 cpu_cycles_per_second = 2;
bool CDOTAClientHardwareSpecs::has_cpu_cycles_per_second() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_cpu_cycles_per_second() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAClientHardwareSpecs::clear_has_cpu_cycles_per_second() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAClientHardwareSpecs::clear_cpu_cycles_per_second() {
  cpu_cycles_per_second_ = GOOGLE_ULONGLONG(0);
  clear_has_cpu_cycles_per_second();
}
::google::protobuf::uint64 CDOTAClientHardwareSpecs::cpu_cycles_per_second() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.cpu_cycles_per_second)
  return cpu_cycles_per_second_;
}
void CDOTAClientHardwareSpecs::set_cpu_cycles_per_second(::google::protobuf::uint64 value) {
  set_has_cpu_cycles_per_second();
  cpu_cycles_per_second_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.cpu_cycles_per_second)
}

// optional fixed64 total_physical_memory = 3;
bool CDOTAClientHardwareSpecs::has_total_physical_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_total_physical_memory() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAClientHardwareSpecs::clear_has_total_physical_memory() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAClientHardwareSpecs::clear_total_physical_memory() {
  total_physical_memory_ = GOOGLE_ULONGLONG(0);
  clear_has_total_physical_memory();
}
::google::protobuf::uint64 CDOTAClientHardwareSpecs::total_physical_memory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.total_physical_memory)
  return total_physical_memory_;
}
void CDOTAClientHardwareSpecs::set_total_physical_memory(::google::protobuf::uint64 value) {
  set_has_total_physical_memory();
  total_physical_memory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.total_physical_memory)
}

// optional bool is_64_bit_os = 4;
bool CDOTAClientHardwareSpecs::has_is_64_bit_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_is_64_bit_os() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAClientHardwareSpecs::clear_has_is_64_bit_os() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAClientHardwareSpecs::clear_is_64_bit_os() {
  is_64_bit_os_ = false;
  clear_has_is_64_bit_os();
}
bool CDOTAClientHardwareSpecs::is_64_bit_os() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.is_64_bit_os)
  return is_64_bit_os_;
}
void CDOTAClientHardwareSpecs::set_is_64_bit_os(bool value) {
  set_has_is_64_bit_os();
  is_64_bit_os_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.is_64_bit_os)
}

// optional uint64 upload_measurement = 5;
bool CDOTAClientHardwareSpecs::has_upload_measurement() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_upload_measurement() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAClientHardwareSpecs::clear_has_upload_measurement() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAClientHardwareSpecs::clear_upload_measurement() {
  upload_measurement_ = GOOGLE_ULONGLONG(0);
  clear_has_upload_measurement();
}
::google::protobuf::uint64 CDOTAClientHardwareSpecs::upload_measurement() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.upload_measurement)
  return upload_measurement_;
}
void CDOTAClientHardwareSpecs::set_upload_measurement(::google::protobuf::uint64 value) {
  set_has_upload_measurement();
  upload_measurement_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.upload_measurement)
}

// optional bool prefer_not_host = 6;
bool CDOTAClientHardwareSpecs::has_prefer_not_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAClientHardwareSpecs::set_has_prefer_not_host() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAClientHardwareSpecs::clear_has_prefer_not_host() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAClientHardwareSpecs::clear_prefer_not_host() {
  prefer_not_host_ = false;
  clear_has_prefer_not_host();
}
bool CDOTAClientHardwareSpecs::prefer_not_host() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.prefer_not_host)
  return prefer_not_host_;
}
void CDOTAClientHardwareSpecs::set_prefer_not_host(bool value) {
  set_has_prefer_not_host();
  prefer_not_host_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.prefer_not_host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_Player::kTeamFieldNumber;
const int CDOTASaveGame_Player::kNameFieldNumber;
const int CDOTASaveGame_Player::kHeroFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_Player::CDOTASaveGame_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTASaveGame.Player)
}
CDOTASaveGame_Player::CDOTASaveGame_Player(const CDOTASaveGame_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hero()) {
    hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_);
  }
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTASaveGame.Player)
}

void CDOTASaveGame_Player::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_ = 0;
}

CDOTASaveGame_Player::~CDOTASaveGame_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTASaveGame.Player)
  SharedDtor();
}

void CDOTASaveGame_Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hero_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTASaveGame_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_Player::descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_Player& CDOTASaveGame_Player::default_instance() {
  protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTASaveGame_Player* CDOTASaveGame_Player::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_Player* n = new CDOTASaveGame_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTASaveGame.Player)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_hero()) {
      GOOGLE_DCHECK(!hero_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hero_.UnsafeRawStringPointer())->clear();
    }
  }
  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTASaveGame.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTASaveGame.Player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string hero = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hero().data(), this->hero().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTASaveGame.Player.hero");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTASaveGame.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTASaveGame.Player)
  return false;
#undef DO_
}

void CDOTASaveGame_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTASaveGame.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTASaveGame.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string hero = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTASaveGame.Player.hero");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hero(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTASaveGame.Player)
}

::google::protobuf::uint8* CDOTASaveGame_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTASaveGame.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTASaveGame.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string hero = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hero().data(), this->hero().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTASaveGame.Player.hero");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hero(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTASaveGame.Player)
  return target;
}

size_t CDOTASaveGame_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTASaveGame.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hero = 3;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero());
    }

    // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTASaveGame.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTASaveGame.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTASaveGame.Player)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_Player::MergeFrom(const CDOTASaveGame_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTASaveGame.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hero();
      hero_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hero_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTASaveGame.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_Player::CopyFrom(const CDOTASaveGame_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTASaveGame.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_Player::IsInitialized() const {
  return true;
}

void CDOTASaveGame_Player::Swap(CDOTASaveGame_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_Player::InternalSwap(CDOTASaveGame_Player* other) {
  name_.Swap(&other->name_);
  hero_.Swap(&other->hero_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_Player::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASaveGame_Player

// optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTASaveGame_Player::set_has_team() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTASaveGame_Player::clear_has_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  clear_has_team();
}
::proto::dota::DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
void CDOTASaveGame_Player::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.team)
}

// optional string name = 2;
bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_Player::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_Player::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTASaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.name)
  return name_.GetNoArena();
}
void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.name)
}
#if LANG_CXX11
void CDOTASaveGame_Player::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTASaveGame.Player.name)
}
#endif
void CDOTASaveGame_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTASaveGame.Player.name)
}
void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTASaveGame.Player.name)
}
::std::string* CDOTASaveGame_Player::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTASaveGame_Player::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTASaveGame.Player.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTASaveGame_Player::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTASaveGame.Player.name)
}

// optional string hero = 3;
bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_Player::set_has_hero() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_Player::clear_has_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_Player::clear_hero() {
  hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hero();
}
const ::std::string& CDOTASaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.hero)
  return hero_.GetNoArena();
}
void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.hero)
}
#if LANG_CXX11
void CDOTASaveGame_Player::set_hero(::std::string&& value) {
  set_has_hero();
  hero_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTASaveGame.Player.hero)
}
#endif
void CDOTASaveGame_Player::set_hero(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTASaveGame.Player.hero)
}
void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  set_has_hero();
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTASaveGame.Player.hero)
}
::std::string* CDOTASaveGame_Player::mutable_hero() {
  set_has_hero();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.Player.hero)
  return hero_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTASaveGame_Player::release_hero() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTASaveGame.Player.hero)
  clear_has_hero();
  return hero_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTASaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero != NULL) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  hero_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTASaveGame.Player.hero)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_SaveInstance_PlayerPositions::kXFieldNumber;
const int CDOTASaveGame_SaveInstance_PlayerPositions::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
}
CDOTASaveGame_SaveInstance_PlayerPositions::CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

CDOTASaveGame_SaveInstance_PlayerPositions::~CDOTASaveGame_SaveInstance_PlayerPositions() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SharedDtor() {
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance_PlayerPositions::descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance_PlayerPositions::default_instance() {
  protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance_PlayerPositions::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_SaveInstance_PlayerPositions* n = new CDOTASaveGame_SaveInstance_PlayerPositions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance_PlayerPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance_PlayerPositions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  return target;
}

size_t CDOTASaveGame_SaveInstance_PlayerPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance_PlayerPositions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance_PlayerPositions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance_PlayerPositions::CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance_PlayerPositions::IsInitialized() const {
  return true;
}

void CDOTASaveGame_SaveInstance_PlayerPositions::Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance_PlayerPositions::InternalSwap(CDOTASaveGame_SaveInstance_PlayerPositions* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance_PlayerPositions::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame_SaveInstance::kGameTimeFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam1ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kTeam2ScoreFieldNumber;
const int CDOTASaveGame_SaveInstance::kPlayerPositionsFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveIdFieldNumber;
const int CDOTASaveGame_SaveInstance::kSaveTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTASaveGame.SaveInstance)
}
CDOTASaveGame_SaveInstance::CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_positions_(from.player_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(save_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTASaveGame.SaveInstance)
}

void CDOTASaveGame_SaveInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_time_, 0, reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(save_time_));
}

CDOTASaveGame_SaveInstance::~CDOTASaveGame_SaveInstance() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTASaveGame.SaveInstance)
  SharedDtor();
}

void CDOTASaveGame_SaveInstance::SharedDtor() {
}

void CDOTASaveGame_SaveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame_SaveInstance::descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame_SaveInstance& CDOTASaveGame_SaveInstance::default_instance() {
  protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTASaveGame_SaveInstance* CDOTASaveGame_SaveInstance::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame_SaveInstance* n = new CDOTASaveGame_SaveInstance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame_SaveInstance::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTASaveGame.SaveInstance)
  player_positions_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&game_time_, 0, reinterpret_cast<char*>(&save_time_) -
      reinterpret_cast<char*>(&game_time_) + sizeof(save_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame_SaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTASaveGame.SaveInstance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team1_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team2_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 save_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_save_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 save_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_save_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTASaveGame.SaveInstance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTASaveGame.SaveInstance)
  return false;
#undef DO_
}

void CDOTASaveGame_SaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTASaveGame.SaveInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_time(), output);
  }

  // optional uint32 team1_score = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team1_score(), output);
  }

  // optional uint32 team2_score = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team2_score(), output);
  }

  // repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0, n = this->player_positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->player_positions(i), output);
  }

  // optional uint32 save_id = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->save_id(), output);
  }

  // optional uint32 save_time = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->save_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTASaveGame.SaveInstance)
}

::google::protobuf::uint8* CDOTASaveGame_SaveInstance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTASaveGame.SaveInstance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 team1_score = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team1_score(), target);
  }

  // optional uint32 team2_score = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team2_score(), target);
  }

  // repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  for (unsigned int i = 0, n = this->player_positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->player_positions(i), deterministic, target);
  }

  // optional uint32 save_id = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->save_id(), target);
  }

  // optional uint32 save_time = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->save_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTASaveGame.SaveInstance)
  return target;
}

size_t CDOTASaveGame_SaveInstance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTASaveGame.SaveInstance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  {
    unsigned int count = this->player_positions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_positions(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 team1_score = 3;
    if (has_team1_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

    // optional uint32 team2_score = 4;
    if (has_team2_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 save_id = 6;
    if (has_save_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_id());
    }

    // optional uint32 save_time = 7;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame_SaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTASaveGame.SaveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame_SaveInstance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame_SaveInstance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTASaveGame.SaveInstance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTASaveGame.SaveInstance)
    MergeFrom(*source);
  }
}

void CDOTASaveGame_SaveInstance::MergeFrom(const CDOTASaveGame_SaveInstance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTASaveGame.SaveInstance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_positions_.MergeFrom(from.player_positions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      team1_score_ = from.team1_score_;
    }
    if (cached_has_bits & 0x00000004u) {
      team2_score_ = from.team2_score_;
    }
    if (cached_has_bits & 0x00000008u) {
      save_id_ = from.save_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      save_time_ = from.save_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame_SaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTASaveGame.SaveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame_SaveInstance::CopyFrom(const CDOTASaveGame_SaveInstance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTASaveGame.SaveInstance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame_SaveInstance::IsInitialized() const {
  return true;
}

void CDOTASaveGame_SaveInstance::Swap(CDOTASaveGame_SaveInstance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame_SaveInstance::InternalSwap(CDOTASaveGame_SaveInstance* other) {
  player_positions_.InternalSwap(&other->player_positions_);
  std::swap(game_time_, other->game_time_);
  std::swap(team1_score_, other->team1_score_);
  std::swap(team2_score_, other->team2_score_);
  std::swap(save_id_, other->save_id_);
  std::swap(save_time_, other->save_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame_SaveInstance::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame_SaveInstance::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.game_time)
  return game_time_;
}
void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_team1_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame_SaveInstance::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.team1_score)
  return team1_score_;
}
void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_team2_score() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTASaveGame_SaveInstance::clear_has_team2_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.team2_score)
  return team2_score_;
}
void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.team2_score)
}

// repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
const ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return &player_positions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_;
}

// optional uint32 save_id = 6;
bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_save_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTASaveGame_SaveInstance::clear_has_save_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  clear_has_save_id();
}
::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.save_id)
  return save_id_;
}
void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  set_has_save_id();
  save_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.save_id)
}

// optional uint32 save_time = 7;
bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTASaveGame_SaveInstance::set_has_save_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTASaveGame_SaveInstance::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.save_time)
  return save_time_;
}
void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.save_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTASaveGame::kMatchIdFieldNumber;
const int CDOTASaveGame::kSaveTimeFieldNumber;
const int CDOTASaveGame::kPlayersFieldNumber;
const int CDOTASaveGame::kSaveInstancesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTASaveGame::CDOTASaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTASaveGame)
}
CDOTASaveGame::CDOTASaveGame(const CDOTASaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      save_instances_(from.save_instances_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(save_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTASaveGame)
}

void CDOTASaveGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&save_time_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(save_time_));
}

CDOTASaveGame::~CDOTASaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTASaveGame)
  SharedDtor();
}

void CDOTASaveGame::SharedDtor() {
}

void CDOTASaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASaveGame::descriptor() {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTASaveGame& CDOTASaveGame::default_instance() {
  protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTASaveGame* CDOTASaveGame::New(::google::protobuf::Arena* arena) const {
  CDOTASaveGame* n = new CDOTASaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTASaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTASaveGame)
  players_.Clear();
  save_instances_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&save_time_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(save_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTASaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTASaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 save_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_save_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &save_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTASaveGame.Player players = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_save_instances()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTASaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTASaveGame)
  return false;
#undef DO_
}

void CDOTASaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTASaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->save_time(), output);
  }

  // repeated .proto.dota.CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  // repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0, n = this->save_instances_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->save_instances(i), output);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->match_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTASaveGame)
}

::google::protobuf::uint8* CDOTASaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTASaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 save_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->save_time(), target);
  }

  // repeated .proto.dota.CDOTASaveGame.Player players = 3;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->players(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
  for (unsigned int i = 0, n = this->save_instances_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->save_instances(i), deterministic, target);
  }

  // optional uint64 match_id = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->match_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTASaveGame)
  return target;
}

size_t CDOTASaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTASaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTASaveGame.Player players = 3;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
  {
    unsigned int count = this->save_instances_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->save_instances(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 5;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 save_time = 2;
    if (has_save_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->save_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTASaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTASaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTASaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTASaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTASaveGame)
    MergeFrom(*source);
  }
}

void CDOTASaveGame::MergeFrom(const CDOTASaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTASaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  save_instances_.MergeFrom(from.save_instances_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      save_time_ = from.save_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTASaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTASaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASaveGame::CopyFrom(const CDOTASaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTASaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASaveGame::IsInitialized() const {
  return true;
}

void CDOTASaveGame::Swap(CDOTASaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTASaveGame::InternalSwap(CDOTASaveGame* other) {
  players_.InternalSwap(&other->players_);
  save_instances_.InternalSwap(&other->save_instances_);
  std::swap(match_id_, other->match_id_);
  std::swap(save_time_, other->save_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTASaveGame::GetMetadata() const {
  protobuf_dota_5fshared_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fshared_5fenums_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTASaveGame

// optional uint64 match_id = 5;
bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTASaveGame::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTASaveGame::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTASaveGame::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CDOTASaveGame::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.match_id)
  return match_id_;
}
void CDOTASaveGame::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.match_id)
}

// optional uint32 save_time = 2;
bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTASaveGame::set_has_save_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTASaveGame::clear_has_save_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  clear_has_save_time();
}
::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.save_time)
  return save_time_;
}
void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  set_has_save_time();
  save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.save_time)
}

// repeated .proto.dota.CDOTASaveGame.Player players = 3;
int CDOTASaveGame::players_size() const {
  return players_.size();
}
void CDOTASaveGame::clear_players() {
  players_.Clear();
}
const ::proto::dota::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.players)
  return players_.Get(index);
}
::proto::dota::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.players)
  return players_.Mutable(index);
}
::proto::dota::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.players)
  return players_;
}

// repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
const ::proto::dota::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Get(index);
}
::proto::dota::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Mutable(index);
}
::proto::dota::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.save_instances)
  return &save_instances_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
