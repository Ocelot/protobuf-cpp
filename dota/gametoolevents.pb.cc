// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gametoolevents.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gametoolevents.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class ChangeMapToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChangeMapToolEvent> {
} _ChangeMapToolEvent_default_instance_;
class TraceRayServerToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TraceRayServerToolEvent> {
} _TraceRayServerToolEvent_default_instance_;
class ToolTraceRayResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolTraceRayResult> {
} _ToolTraceRayResult_default_instance_;
class SpawnEntityToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpawnEntityToolEvent> {
} _SpawnEntityToolEvent_default_instance_;
class SpawnEntityToolEventResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SpawnEntityToolEventResult> {
} _SpawnEntityToolEventResult_default_instance_;
class DestroyEntityToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyEntityToolEvent> {
} _DestroyEntityToolEvent_default_instance_;
class DestroyAllEntitiesToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DestroyAllEntitiesToolEvent> {
} _DestroyAllEntitiesToolEvent_default_instance_;
class RestartMapToolEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RestartMapToolEvent> {
} _RestartMapToolEvent_default_instance_;
class ToolEvent_GetEntityInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInfo> {
} _ToolEvent_GetEntityInfo_default_instance_;
class ToolEvent_GetEntityInfoResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInfoResult> {
} _ToolEvent_GetEntityInfoResult_default_instance_;
class ToolEvent_GetEntityInputsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInputs> {
} _ToolEvent_GetEntityInputs_default_instance_;
class ToolEvent_GetEntityInputsResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_GetEntityInputsResult> {
} _ToolEvent_GetEntityInputsResult_default_instance_;
class ToolEvent_FireEntityInputDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_FireEntityInput> {
} _ToolEvent_FireEntityInput_default_instance_;
class ToolEvent_SFMRecordingStateChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_SFMRecordingStateChanged> {
} _ToolEvent_SFMRecordingStateChanged_default_instance_;
class ToolEvent_SFMToolActiveStateChangedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ToolEvent_SFMToolActiveStateChanged> {
} _ToolEvent_SFMToolActiveStateChanged_default_instance_;

namespace protobuf_gametoolevents_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapToolEvent, mapname_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceRayServerToolEvent, end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, impact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, distance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, fraction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolTraceRayResult, ehandle_),
  2,
  0,
  1,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, entity_keyvalues_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEvent, clientsideentity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpawnEntityToolEventResult, ehandle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyEntityToolEvent, ehandle_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyAllEntitiesToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestroyAllEntitiesToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartMapToolEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RestartMapToolEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfo, clientsideentity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, cppclass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, classname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, origin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, mins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInfoResult, maxs_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputs, clientsideentity_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_GetEntityInputsResult, input_list_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, clientsideentity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, input_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_FireEntityInput, input_param_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMRecordingStateChanged, isrecording_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToolEvent_SFMToolActiveStateChanged, isactive_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(ChangeMapToolEvent)},
  { 7, 14, sizeof(TraceRayServerToolEvent)},
  { 16, 27, sizeof(ToolTraceRayResult)},
  { 33, 40, sizeof(SpawnEntityToolEvent)},
  { 42, 48, sizeof(SpawnEntityToolEventResult)},
  { 49, 55, sizeof(DestroyEntityToolEvent)},
  { 56, 61, sizeof(DestroyAllEntitiesToolEvent)},
  { 61, 66, sizeof(RestartMapToolEvent)},
  { 66, 73, sizeof(ToolEvent_GetEntityInfo)},
  { 75, 86, sizeof(ToolEvent_GetEntityInfoResult)},
  { 92, 99, sizeof(ToolEvent_GetEntityInputs)},
  { 101, 107, sizeof(ToolEvent_GetEntityInputsResult)},
  { 108, 117, sizeof(ToolEvent_FireEntityInput)},
  { 121, 127, sizeof(ToolEvent_SFMRecordingStateChanged)},
  { 128, 134, sizeof(ToolEvent_SFMToolActiveStateChanged)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChangeMapToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TraceRayServerToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolTraceRayResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpawnEntityToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SpawnEntityToolEventResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyEntityToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DestroyAllEntitiesToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RestartMapToolEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_GetEntityInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_GetEntityInfoResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_GetEntityInputs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_GetEntityInputsResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_FireEntityInput_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_SFMRecordingStateChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ToolEvent_SFMToolActiveStateChanged_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gametoolevents.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChangeMapToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TraceRayServerToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ToolTraceRayResult_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SpawnEntityToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SpawnEntityToolEventResult_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DestroyEntityToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DestroyAllEntitiesToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _RestartMapToolEvent_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _ToolEvent_GetEntityInfo_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ToolEvent_GetEntityInfoResult_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  ToolEvent_GetEntityInfoResult::_default_cppclass_.Shutdown();
  _ToolEvent_GetEntityInputs_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ToolEvent_GetEntityInputsResult_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _ToolEvent_FireEntityInput_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ToolEvent_SFMRecordingStateChanged_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _ToolEvent_SFMToolActiveStateChanged_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _ChangeMapToolEvent_default_instance_.DefaultConstruct();
  _TraceRayServerToolEvent_default_instance_.DefaultConstruct();
  _ToolTraceRayResult_default_instance_.DefaultConstruct();
  _SpawnEntityToolEvent_default_instance_.DefaultConstruct();
  _SpawnEntityToolEventResult_default_instance_.DefaultConstruct();
  _DestroyEntityToolEvent_default_instance_.DefaultConstruct();
  _DestroyAllEntitiesToolEvent_default_instance_.DefaultConstruct();
  _RestartMapToolEvent_default_instance_.DefaultConstruct();
  _ToolEvent_GetEntityInfo_default_instance_.DefaultConstruct();
  ToolEvent_GetEntityInfoResult::_default_cppclass_.DefaultConstruct();
  *ToolEvent_GetEntityInfoResult::_default_cppclass_.get_mutable() = ::std::string("shithead", 8);
  _ToolEvent_GetEntityInfoResult_default_instance_.DefaultConstruct();
  _ToolEvent_GetEntityInputs_default_instance_.DefaultConstruct();
  _ToolEvent_GetEntityInputsResult_default_instance_.DefaultConstruct();
  _ToolEvent_FireEntityInput_default_instance_.DefaultConstruct();
  _ToolEvent_SFMRecordingStateChanged_default_instance_.DefaultConstruct();
  _ToolEvent_SFMToolActiveStateChanged_default_instance_.DefaultConstruct();
  _TraceRayServerToolEvent_default_instance_.get_mutable()->start_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _TraceRayServerToolEvent_default_instance_.get_mutable()->end_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _ToolTraceRayResult_default_instance_.get_mutable()->impact_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _ToolTraceRayResult_default_instance_.get_mutable()->normal_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _ToolEvent_GetEntityInfoResult_default_instance_.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _ToolEvent_GetEntityInfoResult_default_instance_.get_mutable()->mins_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _ToolEvent_GetEntityInfoResult_default_instance_.get_mutable()->maxs_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024gametoolevents.proto\022\nproto.dota\032\026netw"
      "orkbasetypes.proto\"%\n\022ChangeMapToolEvent"
      "\022\017\n\007mapname\030\001 \001(\t\"e\n\027TraceRayServerToolE"
      "vent\022%\n\005start\030\001 \001(\0132\026.proto.dota.CMsgVec"
      "tor\022#\n\003end\030\002 \001(\0132\026.proto.dota.CMsgVector"
      "\"\246\001\n\022ToolTraceRayResult\022\013\n\003hit\030\001 \001(\010\022&\n\006"
      "impact\030\002 \001(\0132\026.proto.dota.CMsgVector\022&\n\006"
      "normal\030\003 \001(\0132\026.proto.dota.CMsgVector\022\020\n\010"
      "distance\030\004 \001(\002\022\020\n\010fraction\030\005 \001(\002\022\017\n\007ehan"
      "dle\030\006 \001(\005\"J\n\024SpawnEntityToolEvent\022\030\n\020ent"
      "ity_keyvalues\030\001 \001(\014\022\030\n\020clientsideentity\030"
      "\002 \001(\010\"-\n\032SpawnEntityToolEventResult\022\017\n\007e"
      "handle\030\001 \001(\005\")\n\026DestroyEntityToolEvent\022\017"
      "\n\007ehandle\030\001 \001(\005\"\035\n\033DestroyAllEntitiesToo"
      "lEvent\"\025\n\023RestartMapToolEvent\"D\n\027ToolEve"
      "nt_GetEntityInfo\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020cli"
      "entsideentity\030\002 \001(\010\"\320\001\n\035ToolEvent_GetEnt"
      "ityInfoResult\022\032\n\010cppclass\030\001 \001(\t:\010shithea"
      "d\022\021\n\tclassname\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022&\n\006or"
      "igin\030\004 \001(\0132\026.proto.dota.CMsgVector\022$\n\004mi"
      "ns\030\005 \001(\0132\026.proto.dota.CMsgVector\022$\n\004maxs"
      "\030\006 \001(\0132\026.proto.dota.CMsgVector\"F\n\031ToolEv"
      "ent_GetEntityInputs\022\017\n\007ehandle\030\001 \001(\005\022\030\n\020"
      "clientsideentity\030\002 \001(\010\"5\n\037ToolEvent_GetE"
      "ntityInputsResult\022\022\n\ninput_list\030\001 \003(\t\"o\n"
      "\031ToolEvent_FireEntityInput\022\017\n\007ehandle\030\001 "
      "\001(\005\022\030\n\020clientsideentity\030\002 \001(\010\022\022\n\ninput_n"
      "ame\030\003 \001(\t\022\023\n\013input_param\030\004 \001(\t\"9\n\"ToolEv"
      "ent_SFMRecordingStateChanged\022\023\n\013isrecord"
      "ing\030\001 \001(\010\"7\n#ToolEvent_SFMToolActiveStat"
      "eChanged\022\020\n\010isactive\030\001 \001(\010B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1231);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gametoolevents.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gametoolevents_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChangeMapToolEvent::kMapnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChangeMapToolEvent::ChangeMapToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ChangeMapToolEvent)
}
ChangeMapToolEvent::ChangeMapToolEvent(const ChangeMapToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mapname()) {
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.ChangeMapToolEvent)
}

void ChangeMapToolEvent::SharedCtor() {
  _cached_size_ = 0;
  mapname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChangeMapToolEvent::~ChangeMapToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.ChangeMapToolEvent)
  SharedDtor();
}

void ChangeMapToolEvent::SharedDtor() {
  mapname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ChangeMapToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMapToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChangeMapToolEvent& ChangeMapToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChangeMapToolEvent* ChangeMapToolEvent::New(::google::protobuf::Arena* arena) const {
  ChangeMapToolEvent* n = new ChangeMapToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChangeMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ChangeMapToolEvent)
  if (has_mapname()) {
    GOOGLE_DCHECK(!mapname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*mapname_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChangeMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ChangeMapToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string mapname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ChangeMapToolEvent.mapname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ChangeMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ChangeMapToolEvent)
  return false;
#undef DO_
}

void ChangeMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ChangeMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ChangeMapToolEvent.mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ChangeMapToolEvent)
}

::google::protobuf::uint8* ChangeMapToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ChangeMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mapname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ChangeMapToolEvent.mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ChangeMapToolEvent)
  return target;
}

size_t ChangeMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ChangeMapToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string mapname = 1;
  if (has_mapname()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mapname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangeMapToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChangeMapToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ChangeMapToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ChangeMapToolEvent)
    MergeFrom(*source);
  }
}

void ChangeMapToolEvent::MergeFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ChangeMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_mapname()) {
    set_has_mapname();
    mapname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mapname_);
  }
}

void ChangeMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapToolEvent::CopyFrom(const ChangeMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ChangeMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapToolEvent::IsInitialized() const {
  return true;
}

void ChangeMapToolEvent::Swap(ChangeMapToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChangeMapToolEvent::InternalSwap(ChangeMapToolEvent* other) {
  mapname_.Swap(&other->mapname_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChangeMapToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChangeMapToolEvent

// optional string mapname = 1;
bool ChangeMapToolEvent::has_mapname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChangeMapToolEvent::set_has_mapname() {
  _has_bits_[0] |= 0x00000001u;
}
void ChangeMapToolEvent::clear_has_mapname() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChangeMapToolEvent::clear_mapname() {
  mapname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mapname();
}
const ::std::string& ChangeMapToolEvent::mapname() const {
  // @@protoc_insertion_point(field_get:proto.dota.ChangeMapToolEvent.mapname)
  return mapname_.GetNoArena();
}
void ChangeMapToolEvent::set_mapname(const ::std::string& value) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ChangeMapToolEvent.mapname)
}
#if LANG_CXX11
void ChangeMapToolEvent::set_mapname(::std::string&& value) {
  set_has_mapname();
  mapname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ChangeMapToolEvent.mapname)
}
#endif
void ChangeMapToolEvent::set_mapname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ChangeMapToolEvent.mapname)
}
void ChangeMapToolEvent::set_mapname(const char* value, size_t size) {
  set_has_mapname();
  mapname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ChangeMapToolEvent.mapname)
}
::std::string* ChangeMapToolEvent::mutable_mapname() {
  set_has_mapname();
  // @@protoc_insertion_point(field_mutable:proto.dota.ChangeMapToolEvent.mapname)
  return mapname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ChangeMapToolEvent::release_mapname() {
  // @@protoc_insertion_point(field_release:proto.dota.ChangeMapToolEvent.mapname)
  clear_has_mapname();
  return mapname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ChangeMapToolEvent::set_allocated_mapname(::std::string* mapname) {
  if (mapname != NULL) {
    set_has_mapname();
  } else {
    clear_has_mapname();
  }
  mapname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mapname);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ChangeMapToolEvent.mapname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TraceRayServerToolEvent::kStartFieldNumber;
const int TraceRayServerToolEvent::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TraceRayServerToolEvent::TraceRayServerToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.TraceRayServerToolEvent)
}
TraceRayServerToolEvent::TraceRayServerToolEvent(const TraceRayServerToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_start()) {
    start_ = new ::proto::dota::CMsgVector(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::proto::dota::CMsgVector(*from.end_);
  } else {
    end_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.TraceRayServerToolEvent)
}

void TraceRayServerToolEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_, 0, reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_) + sizeof(end_));
}

TraceRayServerToolEvent::~TraceRayServerToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.TraceRayServerToolEvent)
  SharedDtor();
}

void TraceRayServerToolEvent::SharedDtor() {
  if (this != internal_default_instance()) {
    delete start_;
  }
  if (this != internal_default_instance()) {
    delete end_;
  }
}

void TraceRayServerToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceRayServerToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TraceRayServerToolEvent& TraceRayServerToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

TraceRayServerToolEvent* TraceRayServerToolEvent::New(::google::protobuf::Arena* arena) const {
  TraceRayServerToolEvent* n = new TraceRayServerToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TraceRayServerToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.TraceRayServerToolEvent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_start()) {
      GOOGLE_DCHECK(start_ != NULL);
      start_->::proto::dota::CMsgVector::Clear();
    }
    if (has_end()) {
      GOOGLE_DCHECK(end_ != NULL);
      end_->::proto::dota::CMsgVector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TraceRayServerToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.TraceRayServerToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.TraceRayServerToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.TraceRayServerToolEvent)
  return false;
#undef DO_
}

void TraceRayServerToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.TraceRayServerToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->start_, output);
  }

  // optional .proto.dota.CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->end_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.TraceRayServerToolEvent)
}

::google::protobuf::uint8* TraceRayServerToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.TraceRayServerToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->start_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->end_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.TraceRayServerToolEvent)
  return target;
}

size_t TraceRayServerToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.TraceRayServerToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_);
    }

    // optional .proto.dota.CMsgVector end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->end_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceRayServerToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceRayServerToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TraceRayServerToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.TraceRayServerToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.TraceRayServerToolEvent)
    MergeFrom(*source);
  }
}

void TraceRayServerToolEvent::MergeFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.TraceRayServerToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_start()->::proto::dota::CMsgVector::MergeFrom(from.start());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_end()->::proto::dota::CMsgVector::MergeFrom(from.end());
    }
  }
}

void TraceRayServerToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceRayServerToolEvent::CopyFrom(const TraceRayServerToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.TraceRayServerToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceRayServerToolEvent::IsInitialized() const {
  return true;
}

void TraceRayServerToolEvent::Swap(TraceRayServerToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TraceRayServerToolEvent::InternalSwap(TraceRayServerToolEvent* other) {
  std::swap(start_, other->start_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TraceRayServerToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TraceRayServerToolEvent

// optional .proto.dota.CMsgVector start = 1;
bool TraceRayServerToolEvent::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TraceRayServerToolEvent::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
void TraceRayServerToolEvent::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void TraceRayServerToolEvent::clear_start() {
  if (start_ != NULL) start_->::proto::dota::CMsgVector::Clear();
  clear_has_start();
}
const ::proto::dota::CMsgVector& TraceRayServerToolEvent::start() const {
  // @@protoc_insertion_point(field_get:proto.dota.TraceRayServerToolEvent.start)
  return start_ != NULL ? *start_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* TraceRayServerToolEvent::mutable_start() {
  set_has_start();
  if (start_ == NULL) {
    start_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.TraceRayServerToolEvent.start)
  return start_;
}
::proto::dota::CMsgVector* TraceRayServerToolEvent::release_start() {
  // @@protoc_insertion_point(field_release:proto.dota.TraceRayServerToolEvent.start)
  clear_has_start();
  ::proto::dota::CMsgVector* temp = start_;
  start_ = NULL;
  return temp;
}
void TraceRayServerToolEvent::set_allocated_start(::proto::dota::CMsgVector* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.TraceRayServerToolEvent.start)
}

// optional .proto.dota.CMsgVector end = 2;
bool TraceRayServerToolEvent::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TraceRayServerToolEvent::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
void TraceRayServerToolEvent::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void TraceRayServerToolEvent::clear_end() {
  if (end_ != NULL) end_->::proto::dota::CMsgVector::Clear();
  clear_has_end();
}
const ::proto::dota::CMsgVector& TraceRayServerToolEvent::end() const {
  // @@protoc_insertion_point(field_get:proto.dota.TraceRayServerToolEvent.end)
  return end_ != NULL ? *end_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* TraceRayServerToolEvent::mutable_end() {
  set_has_end();
  if (end_ == NULL) {
    end_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.TraceRayServerToolEvent.end)
  return end_;
}
::proto::dota::CMsgVector* TraceRayServerToolEvent::release_end() {
  // @@protoc_insertion_point(field_release:proto.dota.TraceRayServerToolEvent.end)
  clear_has_end();
  ::proto::dota::CMsgVector* temp = end_;
  end_ = NULL;
  return temp;
}
void TraceRayServerToolEvent::set_allocated_end(::proto::dota::CMsgVector* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.TraceRayServerToolEvent.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolTraceRayResult::kHitFieldNumber;
const int ToolTraceRayResult::kImpactFieldNumber;
const int ToolTraceRayResult::kNormalFieldNumber;
const int ToolTraceRayResult::kDistanceFieldNumber;
const int ToolTraceRayResult::kFractionFieldNumber;
const int ToolTraceRayResult::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolTraceRayResult::ToolTraceRayResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolTraceRayResult)
}
ToolTraceRayResult::ToolTraceRayResult(const ToolTraceRayResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_impact()) {
    impact_ = new ::proto::dota::CMsgVector(*from.impact_);
  } else {
    impact_ = NULL;
  }
  if (from.has_normal()) {
    normal_ = new ::proto::dota::CMsgVector(*from.normal_);
  } else {
    normal_ = NULL;
  }
  ::memcpy(&hit_, &from.hit_,
    reinterpret_cast<char*>(&ehandle_) -
    reinterpret_cast<char*>(&hit_) + sizeof(ehandle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolTraceRayResult)
}

void ToolTraceRayResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&impact_, 0, reinterpret_cast<char*>(&ehandle_) -
    reinterpret_cast<char*>(&impact_) + sizeof(ehandle_));
}

ToolTraceRayResult::~ToolTraceRayResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolTraceRayResult)
  SharedDtor();
}

void ToolTraceRayResult::SharedDtor() {
  if (this != internal_default_instance()) {
    delete impact_;
  }
  if (this != internal_default_instance()) {
    delete normal_;
  }
}

void ToolTraceRayResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolTraceRayResult::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolTraceRayResult& ToolTraceRayResult::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolTraceRayResult* ToolTraceRayResult::New(::google::protobuf::Arena* arena) const {
  ToolTraceRayResult* n = new ToolTraceRayResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolTraceRayResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolTraceRayResult)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_impact()) {
      GOOGLE_DCHECK(impact_ != NULL);
      impact_->::proto::dota::CMsgVector::Clear();
    }
    if (has_normal()) {
      GOOGLE_DCHECK(normal_ != NULL);
      normal_->::proto::dota::CMsgVector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&hit_, 0, reinterpret_cast<char*>(&ehandle_) -
      reinterpret_cast<char*>(&hit_) + sizeof(ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolTraceRayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolTraceRayResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector impact = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_impact()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector normal = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fraction = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_fraction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fraction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ehandle = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolTraceRayResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolTraceRayResult)
  return false;
#undef DO_
}

void ToolTraceRayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolTraceRayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hit(), output);
  }

  // optional .proto.dota.CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->impact_, output);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->normal_, output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fraction(), output);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolTraceRayResult)
}

::google::protobuf::uint8* ToolTraceRayResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolTraceRayResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool hit = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hit(), target);
  }

  // optional .proto.dota.CMsgVector impact = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->impact_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector normal = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->normal_, deterministic, target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  // optional float fraction = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fraction(), target);
  }

  // optional int32 ehandle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolTraceRayResult)
  return target;
}

size_t ToolTraceRayResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolTraceRayResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgVector impact = 2;
    if (has_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->impact_);
    }

    // optional .proto.dota.CMsgVector normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->normal_);
    }

    // optional bool hit = 1;
    if (has_hit()) {
      total_size += 1 + 1;
    }

    // optional float distance = 4;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional float fraction = 5;
    if (has_fraction()) {
      total_size += 1 + 4;
    }

    // optional int32 ehandle = 6;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolTraceRayResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolTraceRayResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolTraceRayResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolTraceRayResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolTraceRayResult)
    MergeFrom(*source);
  }
}

void ToolTraceRayResult::MergeFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolTraceRayResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_impact()->::proto::dota::CMsgVector::MergeFrom(from.impact());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_normal()->::proto::dota::CMsgVector::MergeFrom(from.normal());
    }
    if (cached_has_bits & 0x00000004u) {
      hit_ = from.hit_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      fraction_ = from.fraction_;
    }
    if (cached_has_bits & 0x00000020u) {
      ehandle_ = from.ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolTraceRayResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolTraceRayResult::CopyFrom(const ToolTraceRayResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolTraceRayResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolTraceRayResult::IsInitialized() const {
  return true;
}

void ToolTraceRayResult::Swap(ToolTraceRayResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolTraceRayResult::InternalSwap(ToolTraceRayResult* other) {
  std::swap(impact_, other->impact_);
  std::swap(normal_, other->normal_);
  std::swap(hit_, other->hit_);
  std::swap(distance_, other->distance_);
  std::swap(fraction_, other->fraction_);
  std::swap(ehandle_, other->ehandle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolTraceRayResult::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolTraceRayResult

// optional bool hit = 1;
bool ToolTraceRayResult::has_hit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToolTraceRayResult::set_has_hit() {
  _has_bits_[0] |= 0x00000004u;
}
void ToolTraceRayResult::clear_has_hit() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToolTraceRayResult::clear_hit() {
  hit_ = false;
  clear_has_hit();
}
bool ToolTraceRayResult::hit() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.hit)
  return hit_;
}
void ToolTraceRayResult::set_hit(bool value) {
  set_has_hit();
  hit_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolTraceRayResult.hit)
}

// optional .proto.dota.CMsgVector impact = 2;
bool ToolTraceRayResult::has_impact() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolTraceRayResult::set_has_impact() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolTraceRayResult::clear_has_impact() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolTraceRayResult::clear_impact() {
  if (impact_ != NULL) impact_->::proto::dota::CMsgVector::Clear();
  clear_has_impact();
}
const ::proto::dota::CMsgVector& ToolTraceRayResult::impact() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.impact)
  return impact_ != NULL ? *impact_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* ToolTraceRayResult::mutable_impact() {
  set_has_impact();
  if (impact_ == NULL) {
    impact_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolTraceRayResult.impact)
  return impact_;
}
::proto::dota::CMsgVector* ToolTraceRayResult::release_impact() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolTraceRayResult.impact)
  clear_has_impact();
  ::proto::dota::CMsgVector* temp = impact_;
  impact_ = NULL;
  return temp;
}
void ToolTraceRayResult::set_allocated_impact(::proto::dota::CMsgVector* impact) {
  delete impact_;
  impact_ = impact;
  if (impact) {
    set_has_impact();
  } else {
    clear_has_impact();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolTraceRayResult.impact)
}

// optional .proto.dota.CMsgVector normal = 3;
bool ToolTraceRayResult::has_normal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToolTraceRayResult::set_has_normal() {
  _has_bits_[0] |= 0x00000002u;
}
void ToolTraceRayResult::clear_has_normal() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToolTraceRayResult::clear_normal() {
  if (normal_ != NULL) normal_->::proto::dota::CMsgVector::Clear();
  clear_has_normal();
}
const ::proto::dota::CMsgVector& ToolTraceRayResult::normal() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.normal)
  return normal_ != NULL ? *normal_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* ToolTraceRayResult::mutable_normal() {
  set_has_normal();
  if (normal_ == NULL) {
    normal_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolTraceRayResult.normal)
  return normal_;
}
::proto::dota::CMsgVector* ToolTraceRayResult::release_normal() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolTraceRayResult.normal)
  clear_has_normal();
  ::proto::dota::CMsgVector* temp = normal_;
  normal_ = NULL;
  return temp;
}
void ToolTraceRayResult::set_allocated_normal(::proto::dota::CMsgVector* normal) {
  delete normal_;
  normal_ = normal;
  if (normal) {
    set_has_normal();
  } else {
    clear_has_normal();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolTraceRayResult.normal)
}

// optional float distance = 4;
bool ToolTraceRayResult::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToolTraceRayResult::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
void ToolTraceRayResult::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToolTraceRayResult::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float ToolTraceRayResult::distance() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.distance)
  return distance_;
}
void ToolTraceRayResult::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolTraceRayResult.distance)
}

// optional float fraction = 5;
bool ToolTraceRayResult::has_fraction() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ToolTraceRayResult::set_has_fraction() {
  _has_bits_[0] |= 0x00000010u;
}
void ToolTraceRayResult::clear_has_fraction() {
  _has_bits_[0] &= ~0x00000010u;
}
void ToolTraceRayResult::clear_fraction() {
  fraction_ = 0;
  clear_has_fraction();
}
float ToolTraceRayResult::fraction() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.fraction)
  return fraction_;
}
void ToolTraceRayResult::set_fraction(float value) {
  set_has_fraction();
  fraction_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolTraceRayResult.fraction)
}

// optional int32 ehandle = 6;
bool ToolTraceRayResult::has_ehandle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ToolTraceRayResult::set_has_ehandle() {
  _has_bits_[0] |= 0x00000020u;
}
void ToolTraceRayResult::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000020u;
}
void ToolTraceRayResult::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 ToolTraceRayResult::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolTraceRayResult.ehandle)
  return ehandle_;
}
void ToolTraceRayResult::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolTraceRayResult.ehandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpawnEntityToolEvent::kEntityKeyvaluesFieldNumber;
const int SpawnEntityToolEvent::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpawnEntityToolEvent::SpawnEntityToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.SpawnEntityToolEvent)
}
SpawnEntityToolEvent::SpawnEntityToolEvent(const SpawnEntityToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_entity_keyvalues()) {
    entity_keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_keyvalues_);
  }
  clientsideentity_ = from.clientsideentity_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.SpawnEntityToolEvent)
}

void SpawnEntityToolEvent::SharedCtor() {
  _cached_size_ = 0;
  entity_keyvalues_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clientsideentity_ = false;
}

SpawnEntityToolEvent::~SpawnEntityToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.SpawnEntityToolEvent)
  SharedDtor();
}

void SpawnEntityToolEvent::SharedDtor() {
  entity_keyvalues_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SpawnEntityToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnEntityToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpawnEntityToolEvent& SpawnEntityToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpawnEntityToolEvent* SpawnEntityToolEvent::New(::google::protobuf::Arena* arena) const {
  SpawnEntityToolEvent* n = new SpawnEntityToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpawnEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.SpawnEntityToolEvent)
  if (has_entity_keyvalues()) {
    GOOGLE_DCHECK(!entity_keyvalues_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*entity_keyvalues_.UnsafeRawStringPointer())->clear();
  }
  clientsideentity_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpawnEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.SpawnEntityToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes entity_keyvalues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_entity_keyvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientsideentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.SpawnEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.SpawnEntityToolEvent)
  return false;
#undef DO_
}

void SpawnEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.SpawnEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->entity_keyvalues(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.SpawnEntityToolEvent)
}

::google::protobuf::uint8* SpawnEntityToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.SpawnEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes entity_keyvalues = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->entity_keyvalues(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.SpawnEntityToolEvent)
  return target;
}

size_t SpawnEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.SpawnEntityToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes entity_keyvalues = 1;
    if (has_entity_keyvalues()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->entity_keyvalues());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpawnEntityToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.SpawnEntityToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.SpawnEntityToolEvent)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEvent::MergeFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.SpawnEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_entity_keyvalues();
      entity_keyvalues_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.entity_keyvalues_);
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SpawnEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEvent::CopyFrom(const SpawnEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.SpawnEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEvent::IsInitialized() const {
  return true;
}

void SpawnEntityToolEvent::Swap(SpawnEntityToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpawnEntityToolEvent::InternalSwap(SpawnEntityToolEvent* other) {
  entity_keyvalues_.Swap(&other->entity_keyvalues_);
  std::swap(clientsideentity_, other->clientsideentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpawnEntityToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpawnEntityToolEvent

// optional bytes entity_keyvalues = 1;
bool SpawnEntityToolEvent::has_entity_keyvalues() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpawnEntityToolEvent::set_has_entity_keyvalues() {
  _has_bits_[0] |= 0x00000001u;
}
void SpawnEntityToolEvent::clear_has_entity_keyvalues() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpawnEntityToolEvent::clear_entity_keyvalues() {
  entity_keyvalues_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_entity_keyvalues();
}
const ::std::string& SpawnEntityToolEvent::entity_keyvalues() const {
  // @@protoc_insertion_point(field_get:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
  return entity_keyvalues_.GetNoArena();
}
void SpawnEntityToolEvent::set_entity_keyvalues(const ::std::string& value) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
}
#if LANG_CXX11
void SpawnEntityToolEvent::set_entity_keyvalues(::std::string&& value) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
}
#endif
void SpawnEntityToolEvent::set_entity_keyvalues(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
}
void SpawnEntityToolEvent::set_entity_keyvalues(const void* value, size_t size) {
  set_has_entity_keyvalues();
  entity_keyvalues_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
}
::std::string* SpawnEntityToolEvent::mutable_entity_keyvalues() {
  set_has_entity_keyvalues();
  // @@protoc_insertion_point(field_mutable:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
  return entity_keyvalues_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SpawnEntityToolEvent::release_entity_keyvalues() {
  // @@protoc_insertion_point(field_release:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
  clear_has_entity_keyvalues();
  return entity_keyvalues_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SpawnEntityToolEvent::set_allocated_entity_keyvalues(::std::string* entity_keyvalues) {
  if (entity_keyvalues != NULL) {
    set_has_entity_keyvalues();
  } else {
    clear_has_entity_keyvalues();
  }
  entity_keyvalues_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), entity_keyvalues);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.SpawnEntityToolEvent.entity_keyvalues)
}

// optional bool clientsideentity = 2;
bool SpawnEntityToolEvent::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpawnEntityToolEvent::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
void SpawnEntityToolEvent::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpawnEntityToolEvent::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
bool SpawnEntityToolEvent::clientsideentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.SpawnEntityToolEvent.clientsideentity)
  return clientsideentity_;
}
void SpawnEntityToolEvent::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.SpawnEntityToolEvent.clientsideentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpawnEntityToolEventResult::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpawnEntityToolEventResult::SpawnEntityToolEventResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.SpawnEntityToolEventResult)
}
SpawnEntityToolEventResult::SpawnEntityToolEventResult(const SpawnEntityToolEventResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.SpawnEntityToolEventResult)
}

void SpawnEntityToolEventResult::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
}

SpawnEntityToolEventResult::~SpawnEntityToolEventResult() {
  // @@protoc_insertion_point(destructor:proto.dota.SpawnEntityToolEventResult)
  SharedDtor();
}

void SpawnEntityToolEventResult::SharedDtor() {
}

void SpawnEntityToolEventResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpawnEntityToolEventResult::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpawnEntityToolEventResult& SpawnEntityToolEventResult::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

SpawnEntityToolEventResult* SpawnEntityToolEventResult::New(::google::protobuf::Arena* arena) const {
  SpawnEntityToolEventResult* n = new SpawnEntityToolEventResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpawnEntityToolEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.SpawnEntityToolEventResult)
  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SpawnEntityToolEventResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.SpawnEntityToolEventResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.SpawnEntityToolEventResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.SpawnEntityToolEventResult)
  return false;
#undef DO_
}

void SpawnEntityToolEventResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.SpawnEntityToolEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.SpawnEntityToolEventResult)
}

::google::protobuf::uint8* SpawnEntityToolEventResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.SpawnEntityToolEventResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.SpawnEntityToolEventResult)
  return target;
}

size_t SpawnEntityToolEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.SpawnEntityToolEventResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ehandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpawnEntityToolEventResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpawnEntityToolEventResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpawnEntityToolEventResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.SpawnEntityToolEventResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.SpawnEntityToolEventResult)
    MergeFrom(*source);
  }
}

void SpawnEntityToolEventResult::MergeFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.SpawnEntityToolEventResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ehandle()) {
    set_ehandle(from.ehandle());
  }
}

void SpawnEntityToolEventResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpawnEntityToolEventResult::CopyFrom(const SpawnEntityToolEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.SpawnEntityToolEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpawnEntityToolEventResult::IsInitialized() const {
  return true;
}

void SpawnEntityToolEventResult::Swap(SpawnEntityToolEventResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpawnEntityToolEventResult::InternalSwap(SpawnEntityToolEventResult* other) {
  std::swap(ehandle_, other->ehandle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpawnEntityToolEventResult::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpawnEntityToolEventResult

// optional int32 ehandle = 1;
bool SpawnEntityToolEventResult::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpawnEntityToolEventResult::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
void SpawnEntityToolEventResult::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpawnEntityToolEventResult::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 SpawnEntityToolEventResult::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.SpawnEntityToolEventResult.ehandle)
  return ehandle_;
}
void SpawnEntityToolEventResult::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.SpawnEntityToolEventResult.ehandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DestroyEntityToolEvent::kEhandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyEntityToolEvent::DestroyEntityToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.DestroyEntityToolEvent)
}
DestroyEntityToolEvent::DestroyEntityToolEvent(const DestroyEntityToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ehandle_ = from.ehandle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.DestroyEntityToolEvent)
}

void DestroyEntityToolEvent::SharedCtor() {
  _cached_size_ = 0;
  ehandle_ = 0;
}

DestroyEntityToolEvent::~DestroyEntityToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.DestroyEntityToolEvent)
  SharedDtor();
}

void DestroyEntityToolEvent::SharedDtor() {
}

void DestroyEntityToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyEntityToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestroyEntityToolEvent& DestroyEntityToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyEntityToolEvent* DestroyEntityToolEvent::New(::google::protobuf::Arena* arena) const {
  DestroyEntityToolEvent* n = new DestroyEntityToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyEntityToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.DestroyEntityToolEvent)
  ehandle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestroyEntityToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.DestroyEntityToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.DestroyEntityToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.DestroyEntityToolEvent)
  return false;
#undef DO_
}

void DestroyEntityToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.DestroyEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.DestroyEntityToolEvent)
}

::google::protobuf::uint8* DestroyEntityToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.DestroyEntityToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.DestroyEntityToolEvent)
  return target;
}

size_t DestroyEntityToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.DestroyEntityToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int32 ehandle = 1;
  if (has_ehandle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ehandle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyEntityToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyEntityToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyEntityToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.DestroyEntityToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.DestroyEntityToolEvent)
    MergeFrom(*source);
  }
}

void DestroyEntityToolEvent::MergeFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.DestroyEntityToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ehandle()) {
    set_ehandle(from.ehandle());
  }
}

void DestroyEntityToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyEntityToolEvent::CopyFrom(const DestroyEntityToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.DestroyEntityToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyEntityToolEvent::IsInitialized() const {
  return true;
}

void DestroyEntityToolEvent::Swap(DestroyEntityToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyEntityToolEvent::InternalSwap(DestroyEntityToolEvent* other) {
  std::swap(ehandle_, other->ehandle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyEntityToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyEntityToolEvent

// optional int32 ehandle = 1;
bool DestroyEntityToolEvent::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DestroyEntityToolEvent::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
void DestroyEntityToolEvent::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
void DestroyEntityToolEvent::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 DestroyEntityToolEvent::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.DestroyEntityToolEvent.ehandle)
  return ehandle_;
}
void DestroyEntityToolEvent::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.DestroyEntityToolEvent.ehandle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.DestroyAllEntitiesToolEvent)
}
DestroyAllEntitiesToolEvent::DestroyAllEntitiesToolEvent(const DestroyAllEntitiesToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.DestroyAllEntitiesToolEvent)
}

void DestroyAllEntitiesToolEvent::SharedCtor() {
  _cached_size_ = 0;
}

DestroyAllEntitiesToolEvent::~DestroyAllEntitiesToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.DestroyAllEntitiesToolEvent)
  SharedDtor();
}

void DestroyAllEntitiesToolEvent::SharedDtor() {
}

void DestroyAllEntitiesToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestroyAllEntitiesToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DestroyAllEntitiesToolEvent& DestroyAllEntitiesToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

DestroyAllEntitiesToolEvent* DestroyAllEntitiesToolEvent::New(::google::protobuf::Arena* arena) const {
  DestroyAllEntitiesToolEvent* n = new DestroyAllEntitiesToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DestroyAllEntitiesToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.DestroyAllEntitiesToolEvent)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DestroyAllEntitiesToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.DestroyAllEntitiesToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.DestroyAllEntitiesToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.DestroyAllEntitiesToolEvent)
  return false;
#undef DO_
}

void DestroyAllEntitiesToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.DestroyAllEntitiesToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.DestroyAllEntitiesToolEvent)
}

::google::protobuf::uint8* DestroyAllEntitiesToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.DestroyAllEntitiesToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.DestroyAllEntitiesToolEvent)
  return target;
}

size_t DestroyAllEntitiesToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.DestroyAllEntitiesToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestroyAllEntitiesToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DestroyAllEntitiesToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DestroyAllEntitiesToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.DestroyAllEntitiesToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.DestroyAllEntitiesToolEvent)
    MergeFrom(*source);
  }
}

void DestroyAllEntitiesToolEvent::MergeFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DestroyAllEntitiesToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestroyAllEntitiesToolEvent::CopyFrom(const DestroyAllEntitiesToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.DestroyAllEntitiesToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyAllEntitiesToolEvent::IsInitialized() const {
  return true;
}

void DestroyAllEntitiesToolEvent::Swap(DestroyAllEntitiesToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DestroyAllEntitiesToolEvent::InternalSwap(DestroyAllEntitiesToolEvent* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DestroyAllEntitiesToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DestroyAllEntitiesToolEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RestartMapToolEvent::RestartMapToolEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.RestartMapToolEvent)
}
RestartMapToolEvent::RestartMapToolEvent(const RestartMapToolEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.RestartMapToolEvent)
}

void RestartMapToolEvent::SharedCtor() {
  _cached_size_ = 0;
}

RestartMapToolEvent::~RestartMapToolEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.RestartMapToolEvent)
  SharedDtor();
}

void RestartMapToolEvent::SharedDtor() {
}

void RestartMapToolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RestartMapToolEvent::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RestartMapToolEvent& RestartMapToolEvent::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

RestartMapToolEvent* RestartMapToolEvent::New(::google::protobuf::Arena* arena) const {
  RestartMapToolEvent* n = new RestartMapToolEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RestartMapToolEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.RestartMapToolEvent)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RestartMapToolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.RestartMapToolEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.RestartMapToolEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.RestartMapToolEvent)
  return false;
#undef DO_
}

void RestartMapToolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.RestartMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.RestartMapToolEvent)
}

::google::protobuf::uint8* RestartMapToolEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.RestartMapToolEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.RestartMapToolEvent)
  return target;
}

size_t RestartMapToolEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.RestartMapToolEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RestartMapToolEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RestartMapToolEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RestartMapToolEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.RestartMapToolEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.RestartMapToolEvent)
    MergeFrom(*source);
  }
}

void RestartMapToolEvent::MergeFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.RestartMapToolEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RestartMapToolEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestartMapToolEvent::CopyFrom(const RestartMapToolEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.RestartMapToolEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestartMapToolEvent::IsInitialized() const {
  return true;
}

void RestartMapToolEvent::Swap(RestartMapToolEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RestartMapToolEvent::InternalSwap(RestartMapToolEvent* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RestartMapToolEvent::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RestartMapToolEvent

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInfo::kEhandleFieldNumber;
const int ToolEvent_GetEntityInfo::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInfo)
}
ToolEvent_GetEntityInfo::ToolEvent_GetEntityInfo(const ToolEvent_GetEntityInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInfo)
}

void ToolEvent_GetEntityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInfo::~ToolEvent_GetEntityInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInfo)
  SharedDtor();
}

void ToolEvent_GetEntityInfo::SharedDtor() {
}

void ToolEvent_GetEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfo::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_GetEntityInfo& ToolEvent_GetEntityInfo::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_GetEntityInfo* ToolEvent_GetEntityInfo::New(::google::protobuf::Arena* arena) const {
  ToolEvent_GetEntityInfo* n = new ToolEvent_GetEntityInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_GetEntityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInfo)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_GetEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientsideentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInfo)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInfo)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInfo)
  return target;
}

size_t ToolEvent_GetEntityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_GetEntityInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInfo)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfo::MergeFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfo::CopyFrom(const ToolEvent_GetEntityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfo::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfo::Swap(ToolEvent_GetEntityInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInfo::InternalSwap(ToolEvent_GetEntityInfo* other) {
  std::swap(ehandle_, other->ehandle_);
  std::swap(clientsideentity_, other->clientsideentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInfo::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_GetEntityInfo

// optional int32 ehandle = 1;
bool ToolEvent_GetEntityInfo::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_GetEntityInfo::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_GetEntityInfo::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_GetEntityInfo::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 ToolEvent_GetEntityInfo::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfo.ehandle)
  return ehandle_;
}
void ToolEvent_GetEntityInfo::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInfo.ehandle)
}

// optional bool clientsideentity = 2;
bool ToolEvent_GetEntityInfo::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToolEvent_GetEntityInfo::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
void ToolEvent_GetEntityInfo::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToolEvent_GetEntityInfo::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
bool ToolEvent_GetEntityInfo::clientsideentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfo.clientsideentity)
  return clientsideentity_;
}
void ToolEvent_GetEntityInfo::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInfo.clientsideentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

::google::protobuf::internal::ExplicitlyConstructed< ::std::string> ToolEvent_GetEntityInfoResult::_default_cppclass_;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInfoResult::kCppclassFieldNumber;
const int ToolEvent_GetEntityInfoResult::kClassnameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kNameFieldNumber;
const int ToolEvent_GetEntityInfoResult::kOriginFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMinsFieldNumber;
const int ToolEvent_GetEntityInfoResult::kMaxsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInfoResult)
}
ToolEvent_GetEntityInfoResult::ToolEvent_GetEntityInfoResult(const ToolEvent_GetEntityInfoResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cppclass_.UnsafeSetDefault(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
  if (from.has_cppclass()) {
    cppclass_.AssignWithDefault(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), from.cppclass_);
  }
  classname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_classname()) {
    classname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classname_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = NULL;
  }
  if (from.has_mins()) {
    mins_ = new ::proto::dota::CMsgVector(*from.mins_);
  } else {
    mins_ = NULL;
  }
  if (from.has_maxs()) {
    maxs_ = new ::proto::dota::CMsgVector(*from.maxs_);
  } else {
    maxs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInfoResult)
}

void ToolEvent_GetEntityInfoResult::SharedCtor() {
  _cached_size_ = 0;
  cppclass_.UnsafeSetDefault(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
  classname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&origin_, 0, reinterpret_cast<char*>(&maxs_) -
    reinterpret_cast<char*>(&origin_) + sizeof(maxs_));
}

ToolEvent_GetEntityInfoResult::~ToolEvent_GetEntityInfoResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInfoResult)
  SharedDtor();
}

void ToolEvent_GetEntityInfoResult::SharedDtor() {
  cppclass_.DestroyNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
  classname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete origin_;
  }
  if (this != internal_default_instance()) {
    delete mins_;
  }
  if (this != internal_default_instance()) {
    delete maxs_;
  }
}

void ToolEvent_GetEntityInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInfoResult::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_GetEntityInfoResult& ToolEvent_GetEntityInfoResult::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_GetEntityInfoResult* ToolEvent_GetEntityInfoResult::New(::google::protobuf::Arena* arena) const {
  ToolEvent_GetEntityInfoResult* n = new ToolEvent_GetEntityInfoResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_GetEntityInfoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInfoResult)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_cppclass()) {
      GOOGLE_DCHECK(!cppclass_.IsDefault(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get()));
      (*cppclass_.UnsafeRawStringPointer())->assign(*&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
    }
    if (has_classname()) {
      GOOGLE_DCHECK(!classname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*classname_.UnsafeRawStringPointer())->clear();
    }
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_origin()) {
      GOOGLE_DCHECK(origin_ != NULL);
      origin_->::proto::dota::CMsgVector::Clear();
    }
    if (has_mins()) {
      GOOGLE_DCHECK(mins_ != NULL);
      mins_->::proto::dota::CMsgVector::Clear();
    }
    if (has_maxs()) {
      GOOGLE_DCHECK(maxs_ != NULL);
      maxs_->::proto::dota::CMsgVector::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_GetEntityInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInfoResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cppclass = 1 [default = "shithead"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cppclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cppclass().data(), this->cppclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->classname().data(), this->classname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.classname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInfoResult.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector mins = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector maxs = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_maxs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInfoResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInfoResult)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), this->cppclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cppclass(), output);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.classname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->classname(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .proto.dota.CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->origin_, output);
  }

  // optional .proto.dota.CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->mins_, output);
  }

  // optional .proto.dota.CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->maxs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInfoResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInfoResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInfoResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string cppclass = 1 [default = "shithead"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cppclass().data(), this->cppclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.cppclass");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cppclass(), target);
  }

  // optional string classname = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->classname().data(), this->classname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.classname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->classname(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInfoResult.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .proto.dota.CMsgVector origin = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->origin_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector mins = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->mins_, deterministic, target);
  }

  // optional .proto.dota.CMsgVector maxs = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->maxs_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInfoResult)
  return target;
}

size_t ToolEvent_GetEntityInfoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInfoResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string cppclass = 1 [default = "shithead"];
    if (has_cppclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cppclass());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.dota.CMsgVector origin = 4;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->origin_);
    }

    // optional .proto.dota.CMsgVector mins = 5;
    if (has_mins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->mins_);
    }

    // optional .proto.dota.CMsgVector maxs = 6;
    if (has_maxs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->maxs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInfoResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_GetEntityInfoResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInfoResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInfoResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInfoResult::MergeFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_cppclass();
      cppclass_.AssignWithDefault(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), from.cppclass_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_classname();
      classname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.classname_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_mins()->::proto::dota::CMsgVector::MergeFrom(from.mins());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_maxs()->::proto::dota::CMsgVector::MergeFrom(from.maxs());
    }
  }
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInfoResult::CopyFrom(const ToolEvent_GetEntityInfoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInfoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInfoResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInfoResult::Swap(ToolEvent_GetEntityInfoResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInfoResult::InternalSwap(ToolEvent_GetEntityInfoResult* other) {
  cppclass_.Swap(&other->cppclass_);
  classname_.Swap(&other->classname_);
  name_.Swap(&other->name_);
  std::swap(origin_, other->origin_);
  std::swap(mins_, other->mins_);
  std::swap(maxs_, other->maxs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInfoResult::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_GetEntityInfoResult

// optional string cppclass = 1 [default = "shithead"];
bool ToolEvent_GetEntityInfoResult::has_cppclass() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_cppclass() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_GetEntityInfoResult::clear_has_cppclass() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_GetEntityInfoResult::clear_cppclass() {
  cppclass_.ClearToDefaultNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
  clear_has_cppclass();
}
const ::std::string& ToolEvent_GetEntityInfoResult::cppclass() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
  return cppclass_.GetNoArena();
}
void ToolEvent_GetEntityInfoResult::set_cppclass(const ::std::string& value) {
  set_has_cppclass();
  cppclass_.SetNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
}
#if LANG_CXX11
void ToolEvent_GetEntityInfoResult::set_cppclass(::std::string&& value) {
  set_has_cppclass();
  cppclass_.SetNoArena(
    &ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
}
#endif
void ToolEvent_GetEntityInfoResult::set_cppclass(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cppclass();
  cppclass_.SetNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
}
void ToolEvent_GetEntityInfoResult::set_cppclass(const char* value, size_t size) {
  set_has_cppclass();
  cppclass_.SetNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
}
::std::string* ToolEvent_GetEntityInfoResult::mutable_cppclass() {
  set_has_cppclass();
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
  return cppclass_.MutableNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
}
::std::string* ToolEvent_GetEntityInfoResult::release_cppclass() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
  clear_has_cppclass();
  return cppclass_.ReleaseNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get());
}
void ToolEvent_GetEntityInfoResult::set_allocated_cppclass(::std::string* cppclass) {
  if (cppclass != NULL) {
    set_has_cppclass();
  } else {
    clear_has_cppclass();
  }
  cppclass_.SetAllocatedNoArena(&ToolEvent_GetEntityInfoResult::_default_cppclass_.get(), cppclass);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.cppclass)
}

// optional string classname = 2;
bool ToolEvent_GetEntityInfoResult::has_classname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_classname() {
  _has_bits_[0] |= 0x00000002u;
}
void ToolEvent_GetEntityInfoResult::clear_has_classname() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToolEvent_GetEntityInfoResult::clear_classname() {
  classname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_classname();
}
const ::std::string& ToolEvent_GetEntityInfoResult::classname() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.classname)
  return classname_.GetNoArena();
}
void ToolEvent_GetEntityInfoResult::set_classname(const ::std::string& value) {
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInfoResult.classname)
}
#if LANG_CXX11
void ToolEvent_GetEntityInfoResult::set_classname(::std::string&& value) {
  set_has_classname();
  classname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ToolEvent_GetEntityInfoResult.classname)
}
#endif
void ToolEvent_GetEntityInfoResult::set_classname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_GetEntityInfoResult.classname)
}
void ToolEvent_GetEntityInfoResult::set_classname(const char* value, size_t size) {
  set_has_classname();
  classname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_GetEntityInfoResult.classname)
}
::std::string* ToolEvent_GetEntityInfoResult::mutable_classname() {
  set_has_classname();
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.classname)
  return classname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ToolEvent_GetEntityInfoResult::release_classname() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.classname)
  clear_has_classname();
  return classname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ToolEvent_GetEntityInfoResult::set_allocated_classname(::std::string* classname) {
  if (classname != NULL) {
    set_has_classname();
  } else {
    clear_has_classname();
  }
  classname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), classname);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.classname)
}

// optional string name = 3;
bool ToolEvent_GetEntityInfoResult::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void ToolEvent_GetEntityInfoResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToolEvent_GetEntityInfoResult::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ToolEvent_GetEntityInfoResult::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.name)
  return name_.GetNoArena();
}
void ToolEvent_GetEntityInfoResult::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInfoResult.name)
}
#if LANG_CXX11
void ToolEvent_GetEntityInfoResult::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ToolEvent_GetEntityInfoResult.name)
}
#endif
void ToolEvent_GetEntityInfoResult::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_GetEntityInfoResult.name)
}
void ToolEvent_GetEntityInfoResult::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_GetEntityInfoResult.name)
}
::std::string* ToolEvent_GetEntityInfoResult::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ToolEvent_GetEntityInfoResult::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ToolEvent_GetEntityInfoResult::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.name)
}

// optional .proto.dota.CMsgVector origin = 4;
bool ToolEvent_GetEntityInfoResult::has_origin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_origin() {
  _has_bits_[0] |= 0x00000008u;
}
void ToolEvent_GetEntityInfoResult::clear_has_origin() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToolEvent_GetEntityInfoResult::clear_origin() {
  if (origin_ != NULL) origin_->::proto::dota::CMsgVector::Clear();
  clear_has_origin();
}
const ::proto::dota::CMsgVector& ToolEvent_GetEntityInfoResult::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.origin)
  return origin_ != NULL ? *origin_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) {
    origin_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.origin)
  return origin_;
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::release_origin() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.origin)
  clear_has_origin();
  ::proto::dota::CMsgVector* temp = origin_;
  origin_ = NULL;
  return temp;
}
void ToolEvent_GetEntityInfoResult::set_allocated_origin(::proto::dota::CMsgVector* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.origin)
}

// optional .proto.dota.CMsgVector mins = 5;
bool ToolEvent_GetEntityInfoResult::has_mins() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_mins() {
  _has_bits_[0] |= 0x00000010u;
}
void ToolEvent_GetEntityInfoResult::clear_has_mins() {
  _has_bits_[0] &= ~0x00000010u;
}
void ToolEvent_GetEntityInfoResult::clear_mins() {
  if (mins_ != NULL) mins_->::proto::dota::CMsgVector::Clear();
  clear_has_mins();
}
const ::proto::dota::CMsgVector& ToolEvent_GetEntityInfoResult::mins() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.mins)
  return mins_ != NULL ? *mins_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_mins() {
  set_has_mins();
  if (mins_ == NULL) {
    mins_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.mins)
  return mins_;
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::release_mins() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.mins)
  clear_has_mins();
  ::proto::dota::CMsgVector* temp = mins_;
  mins_ = NULL;
  return temp;
}
void ToolEvent_GetEntityInfoResult::set_allocated_mins(::proto::dota::CMsgVector* mins) {
  delete mins_;
  mins_ = mins;
  if (mins) {
    set_has_mins();
  } else {
    clear_has_mins();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.mins)
}

// optional .proto.dota.CMsgVector maxs = 6;
bool ToolEvent_GetEntityInfoResult::has_maxs() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ToolEvent_GetEntityInfoResult::set_has_maxs() {
  _has_bits_[0] |= 0x00000020u;
}
void ToolEvent_GetEntityInfoResult::clear_has_maxs() {
  _has_bits_[0] &= ~0x00000020u;
}
void ToolEvent_GetEntityInfoResult::clear_maxs() {
  if (maxs_ != NULL) maxs_->::proto::dota::CMsgVector::Clear();
  clear_has_maxs();
}
const ::proto::dota::CMsgVector& ToolEvent_GetEntityInfoResult::maxs() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInfoResult.maxs)
  return maxs_ != NULL ? *maxs_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::mutable_maxs() {
  set_has_maxs();
  if (maxs_ == NULL) {
    maxs_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInfoResult.maxs)
  return maxs_;
}
::proto::dota::CMsgVector* ToolEvent_GetEntityInfoResult::release_maxs() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_GetEntityInfoResult.maxs)
  clear_has_maxs();
  ::proto::dota::CMsgVector* temp = maxs_;
  maxs_ = NULL;
  return temp;
}
void ToolEvent_GetEntityInfoResult::set_allocated_maxs(::proto::dota::CMsgVector* maxs) {
  delete maxs_;
  maxs_ = maxs;
  if (maxs) {
    set_has_maxs();
  } else {
    clear_has_maxs();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_GetEntityInfoResult.maxs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInputs::kEhandleFieldNumber;
const int ToolEvent_GetEntityInputs::kClientsideentityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInputs)
}
ToolEvent_GetEntityInputs::ToolEvent_GetEntityInputs(const ToolEvent_GetEntityInputs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ehandle_, &from.ehandle_,
    reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInputs)
}

void ToolEvent_GetEntityInputs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
}

ToolEvent_GetEntityInputs::~ToolEvent_GetEntityInputs() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInputs)
  SharedDtor();
}

void ToolEvent_GetEntityInputs::SharedDtor() {
}

void ToolEvent_GetEntityInputs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputs::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_GetEntityInputs& ToolEvent_GetEntityInputs::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_GetEntityInputs* ToolEvent_GetEntityInputs::New(::google::protobuf::Arena* arena) const {
  ToolEvent_GetEntityInputs* n = new ToolEvent_GetEntityInputs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_GetEntityInputs::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInputs)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_GetEntityInputs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInputs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientsideentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInputs)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInputs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInputs)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInputs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInputs)
  return target;
}

size_t ToolEvent_GetEntityInputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInputs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInputs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_GetEntityInputs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInputs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInputs)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputs::MergeFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000002u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_GetEntityInputs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputs::CopyFrom(const ToolEvent_GetEntityInputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputs::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputs::Swap(ToolEvent_GetEntityInputs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInputs::InternalSwap(ToolEvent_GetEntityInputs* other) {
  std::swap(ehandle_, other->ehandle_);
  std::swap(clientsideentity_, other->clientsideentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInputs::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_GetEntityInputs

// optional int32 ehandle = 1;
bool ToolEvent_GetEntityInputs::has_ehandle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_GetEntityInputs::set_has_ehandle() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_GetEntityInputs::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_GetEntityInputs::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 ToolEvent_GetEntityInputs::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInputs.ehandle)
  return ehandle_;
}
void ToolEvent_GetEntityInputs::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInputs.ehandle)
}

// optional bool clientsideentity = 2;
bool ToolEvent_GetEntityInputs::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToolEvent_GetEntityInputs::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000002u;
}
void ToolEvent_GetEntityInputs::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToolEvent_GetEntityInputs::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
bool ToolEvent_GetEntityInputs::clientsideentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInputs.clientsideentity)
  return clientsideentity_;
}
void ToolEvent_GetEntityInputs::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInputs.clientsideentity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_GetEntityInputsResult::kInputListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_GetEntityInputsResult)
}
ToolEvent_GetEntityInputsResult::ToolEvent_GetEntityInputsResult(const ToolEvent_GetEntityInputsResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      input_list_(from.input_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_GetEntityInputsResult)
}

void ToolEvent_GetEntityInputsResult::SharedCtor() {
  _cached_size_ = 0;
}

ToolEvent_GetEntityInputsResult::~ToolEvent_GetEntityInputsResult() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_GetEntityInputsResult)
  SharedDtor();
}

void ToolEvent_GetEntityInputsResult::SharedDtor() {
}

void ToolEvent_GetEntityInputsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_GetEntityInputsResult::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_GetEntityInputsResult& ToolEvent_GetEntityInputsResult::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_GetEntityInputsResult* ToolEvent_GetEntityInputsResult::New(::google::protobuf::Arena* arena) const {
  ToolEvent_GetEntityInputsResult* n = new ToolEvent_GetEntityInputsResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_GetEntityInputsResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_GetEntityInputsResult)
  input_list_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_GetEntityInputsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_GetEntityInputsResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_list(this->input_list_size() - 1).data(),
            this->input_list(this->input_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_GetEntityInputsResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_GetEntityInputsResult)
  return false;
#undef DO_
}

void ToolEvent_GetEntityInputsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_GetEntityInputsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_list(i).data(), this->input_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_GetEntityInputsResult)
}

::google::protobuf::uint8* ToolEvent_GetEntityInputsResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_GetEntityInputsResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string input_list = 1;
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_list(i).data(), this->input_list(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_GetEntityInputsResult.input_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input_list(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_GetEntityInputsResult)
  return target;
}

size_t ToolEvent_GetEntityInputsResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_GetEntityInputsResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string input_list = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->input_list_size());
  for (int i = 0, n = this->input_list_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input_list(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_GetEntityInputsResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_GetEntityInputsResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_GetEntityInputsResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_GetEntityInputsResult)
    MergeFrom(*source);
  }
}

void ToolEvent_GetEntityInputsResult::MergeFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_list_.MergeFrom(from.input_list_);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_GetEntityInputsResult::CopyFrom(const ToolEvent_GetEntityInputsResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_GetEntityInputsResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_GetEntityInputsResult::IsInitialized() const {
  return true;
}

void ToolEvent_GetEntityInputsResult::Swap(ToolEvent_GetEntityInputsResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_GetEntityInputsResult::InternalSwap(ToolEvent_GetEntityInputsResult* other) {
  input_list_.InternalSwap(&other->input_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_GetEntityInputsResult::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_GetEntityInputsResult

// repeated string input_list = 1;
int ToolEvent_GetEntityInputsResult::input_list_size() const {
  return input_list_.size();
}
void ToolEvent_GetEntityInputsResult::clear_input_list() {
  input_list_.Clear();
}
const ::std::string& ToolEvent_GetEntityInputsResult::input_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  return input_list_.Get(index);
}
::std::string* ToolEvent_GetEntityInputsResult::mutable_input_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  return input_list_.Mutable(index);
}
void ToolEvent_GetEntityInputsResult::set_input_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  input_list_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void ToolEvent_GetEntityInputsResult::set_input_list(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  input_list_.Mutable(index)->assign(std::move(value));
}
#endif
void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
void ToolEvent_GetEntityInputsResult::set_input_list(int index, const char* value, size_t size) {
  input_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
::std::string* ToolEvent_GetEntityInputsResult::add_input_list() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  return input_list_.Add();
}
void ToolEvent_GetEntityInputsResult::add_input_list(const ::std::string& value) {
  input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
#if LANG_CXX11
void ToolEvent_GetEntityInputsResult::add_input_list(::std::string&& value) {
  input_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
#endif
void ToolEvent_GetEntityInputsResult::add_input_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  input_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
void ToolEvent_GetEntityInputsResult::add_input_list(const char* value, size_t size) {
  input_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
ToolEvent_GetEntityInputsResult::input_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  return input_list_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
ToolEvent_GetEntityInputsResult::mutable_input_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.ToolEvent_GetEntityInputsResult.input_list)
  return &input_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_FireEntityInput::kEhandleFieldNumber;
const int ToolEvent_FireEntityInput::kClientsideentityFieldNumber;
const int ToolEvent_FireEntityInput::kInputNameFieldNumber;
const int ToolEvent_FireEntityInput::kInputParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_FireEntityInput::ToolEvent_FireEntityInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_FireEntityInput)
}
ToolEvent_FireEntityInput::ToolEvent_FireEntityInput(const ToolEvent_FireEntityInput& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_name()) {
    input_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_name_);
  }
  input_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_input_param()) {
    input_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_param_);
  }
  ::memcpy(&ehandle_, &from.ehandle_,
    reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_FireEntityInput)
}

void ToolEvent_FireEntityInput::SharedCtor() {
  _cached_size_ = 0;
  input_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
    reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
}

ToolEvent_FireEntityInput::~ToolEvent_FireEntityInput() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_FireEntityInput)
  SharedDtor();
}

void ToolEvent_FireEntityInput::SharedDtor() {
  input_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_param_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ToolEvent_FireEntityInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_FireEntityInput::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_FireEntityInput& ToolEvent_FireEntityInput::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_FireEntityInput* ToolEvent_FireEntityInput::New(::google::protobuf::Arena* arena) const {
  ToolEvent_FireEntityInput* n = new ToolEvent_FireEntityInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_FireEntityInput::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_FireEntityInput)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_input_name()) {
      GOOGLE_DCHECK(!input_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*input_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_input_param()) {
      GOOGLE_DCHECK(!input_param_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*input_param_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&ehandle_, 0, reinterpret_cast<char*>(&clientsideentity_) -
      reinterpret_cast<char*>(&ehandle_) + sizeof(clientsideentity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_FireEntityInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_FireEntityInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ehandle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool clientsideentity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_clientsideentity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clientsideentity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_name().data(), this->input_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_FireEntityInput.input_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string input_param = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_param().data(), this->input_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.ToolEvent_FireEntityInput.input_param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_FireEntityInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_FireEntityInput)
  return false;
#undef DO_
}

void ToolEvent_FireEntityInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_FireEntityInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ehandle(), output);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->clientsideentity(), output);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->input_name(), output);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), this->input_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->input_param(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_FireEntityInput)
}

::google::protobuf::uint8* ToolEvent_FireEntityInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_FireEntityInput)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ehandle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ehandle(), target);
  }

  // optional bool clientsideentity = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->clientsideentity(), target);
  }

  // optional string input_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_name().data(), this->input_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->input_name(), target);
  }

  // optional string input_param = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_param().data(), this->input_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.ToolEvent_FireEntityInput.input_param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->input_param(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_FireEntityInput)
  return target;
}

size_t ToolEvent_FireEntityInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_FireEntityInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string input_name = 3;
    if (has_input_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_name());
    }

    // optional string input_param = 4;
    if (has_input_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_param());
    }

    // optional int32 ehandle = 1;
    if (has_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ehandle());
    }

    // optional bool clientsideentity = 2;
    if (has_clientsideentity()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_FireEntityInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_FireEntityInput* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_FireEntityInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_FireEntityInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_FireEntityInput)
    MergeFrom(*source);
  }
}

void ToolEvent_FireEntityInput::MergeFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_FireEntityInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_input_name();
      input_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_input_param();
      input_param_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_param_);
    }
    if (cached_has_bits & 0x00000004u) {
      ehandle_ = from.ehandle_;
    }
    if (cached_has_bits & 0x00000008u) {
      clientsideentity_ = from.clientsideentity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ToolEvent_FireEntityInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_FireEntityInput::CopyFrom(const ToolEvent_FireEntityInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_FireEntityInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_FireEntityInput::IsInitialized() const {
  return true;
}

void ToolEvent_FireEntityInput::Swap(ToolEvent_FireEntityInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_FireEntityInput::InternalSwap(ToolEvent_FireEntityInput* other) {
  input_name_.Swap(&other->input_name_);
  input_param_.Swap(&other->input_param_);
  std::swap(ehandle_, other->ehandle_);
  std::swap(clientsideentity_, other->clientsideentity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_FireEntityInput::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_FireEntityInput

// optional int32 ehandle = 1;
bool ToolEvent_FireEntityInput::has_ehandle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ToolEvent_FireEntityInput::set_has_ehandle() {
  _has_bits_[0] |= 0x00000004u;
}
void ToolEvent_FireEntityInput::clear_has_ehandle() {
  _has_bits_[0] &= ~0x00000004u;
}
void ToolEvent_FireEntityInput::clear_ehandle() {
  ehandle_ = 0;
  clear_has_ehandle();
}
::google::protobuf::int32 ToolEvent_FireEntityInput::ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_FireEntityInput.ehandle)
  return ehandle_;
}
void ToolEvent_FireEntityInput::set_ehandle(::google::protobuf::int32 value) {
  set_has_ehandle();
  ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_FireEntityInput.ehandle)
}

// optional bool clientsideentity = 2;
bool ToolEvent_FireEntityInput::has_clientsideentity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ToolEvent_FireEntityInput::set_has_clientsideentity() {
  _has_bits_[0] |= 0x00000008u;
}
void ToolEvent_FireEntityInput::clear_has_clientsideentity() {
  _has_bits_[0] &= ~0x00000008u;
}
void ToolEvent_FireEntityInput::clear_clientsideentity() {
  clientsideentity_ = false;
  clear_has_clientsideentity();
}
bool ToolEvent_FireEntityInput::clientsideentity() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_FireEntityInput.clientsideentity)
  return clientsideentity_;
}
void ToolEvent_FireEntityInput::set_clientsideentity(bool value) {
  set_has_clientsideentity();
  clientsideentity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_FireEntityInput.clientsideentity)
}

// optional string input_name = 3;
bool ToolEvent_FireEntityInput::has_input_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_FireEntityInput::set_has_input_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_FireEntityInput::clear_has_input_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_FireEntityInput::clear_input_name() {
  input_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_name();
}
const ::std::string& ToolEvent_FireEntityInput::input_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_FireEntityInput.input_name)
  return input_name_.GetNoArena();
}
void ToolEvent_FireEntityInput::set_input_name(const ::std::string& value) {
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_FireEntityInput.input_name)
}
#if LANG_CXX11
void ToolEvent_FireEntityInput::set_input_name(::std::string&& value) {
  set_has_input_name();
  input_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ToolEvent_FireEntityInput.input_name)
}
#endif
void ToolEvent_FireEntityInput::set_input_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_FireEntityInput.input_name)
}
void ToolEvent_FireEntityInput::set_input_name(const char* value, size_t size) {
  set_has_input_name();
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_FireEntityInput.input_name)
}
::std::string* ToolEvent_FireEntityInput::mutable_input_name() {
  set_has_input_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_FireEntityInput.input_name)
  return input_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ToolEvent_FireEntityInput::release_input_name() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_FireEntityInput.input_name)
  clear_has_input_name();
  return input_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ToolEvent_FireEntityInput::set_allocated_input_name(::std::string* input_name) {
  if (input_name != NULL) {
    set_has_input_name();
  } else {
    clear_has_input_name();
  }
  input_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_FireEntityInput.input_name)
}

// optional string input_param = 4;
bool ToolEvent_FireEntityInput::has_input_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ToolEvent_FireEntityInput::set_has_input_param() {
  _has_bits_[0] |= 0x00000002u;
}
void ToolEvent_FireEntityInput::clear_has_input_param() {
  _has_bits_[0] &= ~0x00000002u;
}
void ToolEvent_FireEntityInput::clear_input_param() {
  input_param_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_param();
}
const ::std::string& ToolEvent_FireEntityInput::input_param() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_FireEntityInput.input_param)
  return input_param_.GetNoArena();
}
void ToolEvent_FireEntityInput::set_input_param(const ::std::string& value) {
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_FireEntityInput.input_param)
}
#if LANG_CXX11
void ToolEvent_FireEntityInput::set_input_param(::std::string&& value) {
  set_has_input_param();
  input_param_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.ToolEvent_FireEntityInput.input_param)
}
#endif
void ToolEvent_FireEntityInput::set_input_param(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.ToolEvent_FireEntityInput.input_param)
}
void ToolEvent_FireEntityInput::set_input_param(const char* value, size_t size) {
  set_has_input_param();
  input_param_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.ToolEvent_FireEntityInput.input_param)
}
::std::string* ToolEvent_FireEntityInput::mutable_input_param() {
  set_has_input_param();
  // @@protoc_insertion_point(field_mutable:proto.dota.ToolEvent_FireEntityInput.input_param)
  return input_param_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ToolEvent_FireEntityInput::release_input_param() {
  // @@protoc_insertion_point(field_release:proto.dota.ToolEvent_FireEntityInput.input_param)
  clear_has_input_param();
  return input_param_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ToolEvent_FireEntityInput::set_allocated_input_param(::std::string* input_param) {
  if (input_param != NULL) {
    set_has_input_param();
  } else {
    clear_has_input_param();
  }
  input_param_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_param);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.ToolEvent_FireEntityInput.input_param)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_SFMRecordingStateChanged::kIsrecordingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
}
ToolEvent_SFMRecordingStateChanged::ToolEvent_SFMRecordingStateChanged(const ToolEvent_SFMRecordingStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isrecording_ = from.isrecording_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
}

void ToolEvent_SFMRecordingStateChanged::SharedCtor() {
  _cached_size_ = 0;
  isrecording_ = false;
}

ToolEvent_SFMRecordingStateChanged::~ToolEvent_SFMRecordingStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_SFMRecordingStateChanged)
  SharedDtor();
}

void ToolEvent_SFMRecordingStateChanged::SharedDtor() {
}

void ToolEvent_SFMRecordingStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_SFMRecordingStateChanged::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_SFMRecordingStateChanged& ToolEvent_SFMRecordingStateChanged::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_SFMRecordingStateChanged* ToolEvent_SFMRecordingStateChanged::New(::google::protobuf::Arena* arena) const {
  ToolEvent_SFMRecordingStateChanged* n = new ToolEvent_SFMRecordingStateChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_SFMRecordingStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  isrecording_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_SFMRecordingStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isrecording = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_isrecording();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecording_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return false;
#undef DO_
}

void ToolEvent_SFMRecordingStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isrecording(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_SFMRecordingStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMRecordingStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isrecording = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isrecording(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_SFMRecordingStateChanged)
  return target;
}

size_t ToolEvent_SFMRecordingStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool isrecording = 1;
  if (has_isrecording()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMRecordingStateChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_SFMRecordingStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_SFMRecordingStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_SFMRecordingStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMRecordingStateChanged::MergeFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isrecording()) {
    set_isrecording(from.isrecording());
  }
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMRecordingStateChanged::CopyFrom(const ToolEvent_SFMRecordingStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_SFMRecordingStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMRecordingStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMRecordingStateChanged::Swap(ToolEvent_SFMRecordingStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_SFMRecordingStateChanged::InternalSwap(ToolEvent_SFMRecordingStateChanged* other) {
  std::swap(isrecording_, other->isrecording_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_SFMRecordingStateChanged::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_SFMRecordingStateChanged

// optional bool isrecording = 1;
bool ToolEvent_SFMRecordingStateChanged::has_isrecording() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_SFMRecordingStateChanged::set_has_isrecording() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_SFMRecordingStateChanged::clear_has_isrecording() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_SFMRecordingStateChanged::clear_isrecording() {
  isrecording_ = false;
  clear_has_isrecording();
}
bool ToolEvent_SFMRecordingStateChanged::isrecording() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_SFMRecordingStateChanged.isrecording)
  return isrecording_;
}
void ToolEvent_SFMRecordingStateChanged::set_isrecording(bool value) {
  set_has_isrecording();
  isrecording_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_SFMRecordingStateChanged.isrecording)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ToolEvent_SFMToolActiveStateChanged::kIsactiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gametoolevents_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}
ToolEvent_SFMToolActiveStateChanged::ToolEvent_SFMToolActiveStateChanged(const ToolEvent_SFMToolActiveStateChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isactive_ = from.isactive_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}

void ToolEvent_SFMToolActiveStateChanged::SharedCtor() {
  _cached_size_ = 0;
  isactive_ = false;
}

ToolEvent_SFMToolActiveStateChanged::~ToolEvent_SFMToolActiveStateChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  SharedDtor();
}

void ToolEvent_SFMToolActiveStateChanged::SharedDtor() {
}

void ToolEvent_SFMToolActiveStateChanged::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToolEvent_SFMToolActiveStateChanged::descriptor() {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ToolEvent_SFMToolActiveStateChanged& ToolEvent_SFMToolActiveStateChanged::default_instance() {
  protobuf_gametoolevents_2eproto::InitDefaults();
  return *internal_default_instance();
}

ToolEvent_SFMToolActiveStateChanged* ToolEvent_SFMToolActiveStateChanged::New(::google::protobuf::Arena* arena) const {
  ToolEvent_SFMToolActiveStateChanged* n = new ToolEvent_SFMToolActiveStateChanged;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ToolEvent_SFMToolActiveStateChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  isactive_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ToolEvent_SFMToolActiveStateChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isactive = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_isactive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return false;
#undef DO_
}

void ToolEvent_SFMToolActiveStateChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isactive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.ToolEvent_SFMToolActiveStateChanged)
}

::google::protobuf::uint8* ToolEvent_SFMToolActiveStateChanged::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool isactive = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isactive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  return target;
}

size_t ToolEvent_SFMToolActiveStateChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool isactive = 1;
  if (has_isactive()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolEvent_SFMToolActiveStateChanged* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ToolEvent_SFMToolActiveStateChanged>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.ToolEvent_SFMToolActiveStateChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.ToolEvent_SFMToolActiveStateChanged)
    MergeFrom(*source);
  }
}

void ToolEvent_SFMToolActiveStateChanged::MergeFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_isactive()) {
    set_isactive(from.isactive());
  }
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolEvent_SFMToolActiveStateChanged::CopyFrom(const ToolEvent_SFMToolActiveStateChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.ToolEvent_SFMToolActiveStateChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolEvent_SFMToolActiveStateChanged::IsInitialized() const {
  return true;
}

void ToolEvent_SFMToolActiveStateChanged::Swap(ToolEvent_SFMToolActiveStateChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ToolEvent_SFMToolActiveStateChanged::InternalSwap(ToolEvent_SFMToolActiveStateChanged* other) {
  std::swap(isactive_, other->isactive_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ToolEvent_SFMToolActiveStateChanged::GetMetadata() const {
  protobuf_gametoolevents_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gametoolevents_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ToolEvent_SFMToolActiveStateChanged

// optional bool isactive = 1;
bool ToolEvent_SFMToolActiveStateChanged::has_isactive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ToolEvent_SFMToolActiveStateChanged::set_has_isactive() {
  _has_bits_[0] |= 0x00000001u;
}
void ToolEvent_SFMToolActiveStateChanged::clear_has_isactive() {
  _has_bits_[0] &= ~0x00000001u;
}
void ToolEvent_SFMToolActiveStateChanged::clear_isactive() {
  isactive_ = false;
  clear_has_isactive();
}
bool ToolEvent_SFMToolActiveStateChanged::isactive() const {
  // @@protoc_insertion_point(field_get:proto.dota.ToolEvent_SFMToolActiveStateChanged.isactive)
  return isactive_;
}
void ToolEvent_SFMToolActiveStateChanged::set_isactive(bool value) {
  set_has_isactive();
  isactive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.ToolEvent_SFMToolActiveStateChanged.isactive)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
