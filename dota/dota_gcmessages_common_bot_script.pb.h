// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_bot_script.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace proto {
namespace dota {
class CMsgBotWorldState;
class CMsgBotWorldStateDefaultTypeInternal;
extern CMsgBotWorldStateDefaultTypeInternal _CMsgBotWorldState_default_instance_;
class CMsgBotWorldState_Ability;
class CMsgBotWorldState_AbilityDefaultTypeInternal;
extern CMsgBotWorldState_AbilityDefaultTypeInternal _CMsgBotWorldState_Ability_default_instance_;
class CMsgBotWorldState_AvoidanceZone;
class CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal;
extern CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal _CMsgBotWorldState_AvoidanceZone_default_instance_;
class CMsgBotWorldState_DroppedItem;
class CMsgBotWorldState_DroppedItemDefaultTypeInternal;
extern CMsgBotWorldState_DroppedItemDefaultTypeInternal _CMsgBotWorldState_DroppedItem_default_instance_;
class CMsgBotWorldState_EventAbility;
class CMsgBotWorldState_EventAbilityDefaultTypeInternal;
extern CMsgBotWorldState_EventAbilityDefaultTypeInternal _CMsgBotWorldState_EventAbility_default_instance_;
class CMsgBotWorldState_EventCourierKilled;
class CMsgBotWorldState_EventCourierKilledDefaultTypeInternal;
extern CMsgBotWorldState_EventCourierKilledDefaultTypeInternal _CMsgBotWorldState_EventCourierKilled_default_instance_;
class CMsgBotWorldState_EventDamage;
class CMsgBotWorldState_EventDamageDefaultTypeInternal;
extern CMsgBotWorldState_EventDamageDefaultTypeInternal _CMsgBotWorldState_EventDamage_default_instance_;
class CMsgBotWorldState_EventRoshanKilled;
class CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal;
extern CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal _CMsgBotWorldState_EventRoshanKilled_default_instance_;
class CMsgBotWorldState_EventTree;
class CMsgBotWorldState_EventTreeDefaultTypeInternal;
extern CMsgBotWorldState_EventTreeDefaultTypeInternal _CMsgBotWorldState_EventTree_default_instance_;
class CMsgBotWorldState_LinearProjectile;
class CMsgBotWorldState_LinearProjectileDefaultTypeInternal;
extern CMsgBotWorldState_LinearProjectileDefaultTypeInternal _CMsgBotWorldState_LinearProjectile_default_instance_;
class CMsgBotWorldState_Modifier;
class CMsgBotWorldState_ModifierDefaultTypeInternal;
extern CMsgBotWorldState_ModifierDefaultTypeInternal _CMsgBotWorldState_Modifier_default_instance_;
class CMsgBotWorldState_Player;
class CMsgBotWorldState_PlayerDefaultTypeInternal;
extern CMsgBotWorldState_PlayerDefaultTypeInternal _CMsgBotWorldState_Player_default_instance_;
class CMsgBotWorldState_RuneInfo;
class CMsgBotWorldState_RuneInfoDefaultTypeInternal;
extern CMsgBotWorldState_RuneInfoDefaultTypeInternal _CMsgBotWorldState_RuneInfo_default_instance_;
class CMsgBotWorldState_TeleportInfo;
class CMsgBotWorldState_TeleportInfoDefaultTypeInternal;
extern CMsgBotWorldState_TeleportInfoDefaultTypeInternal _CMsgBotWorldState_TeleportInfo_default_instance_;
class CMsgBotWorldState_TrackingProjectile;
class CMsgBotWorldState_TrackingProjectileDefaultTypeInternal;
extern CMsgBotWorldState_TrackingProjectileDefaultTypeInternal _CMsgBotWorldState_TrackingProjectile_default_instance_;
class CMsgBotWorldState_Unit;
class CMsgBotWorldState_UnitDefaultTypeInternal;
extern CMsgBotWorldState_UnitDefaultTypeInternal _CMsgBotWorldState_Unit_default_instance_;
class CMsgBotWorldState_Vector;
class CMsgBotWorldState_VectorDefaultTypeInternal;
extern CMsgBotWorldState_VectorDefaultTypeInternal _CMsgBotWorldState_Vector_default_instance_;
}  // namespace dota
}  // namespace proto

namespace proto {
namespace dota {

namespace protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto

enum CMsgBotWorldState_UnitType {
  CMsgBotWorldState_UnitType_INVALID = 0,
  CMsgBotWorldState_UnitType_HERO = 1,
  CMsgBotWorldState_UnitType_CREEP_HERO = 2,
  CMsgBotWorldState_UnitType_LANE_CREEP = 3,
  CMsgBotWorldState_UnitType_JUNGLE_CREEP = 4,
  CMsgBotWorldState_UnitType_ROSHAN = 5,
  CMsgBotWorldState_UnitType_TOWER = 6,
  CMsgBotWorldState_UnitType_BARRACKS = 7,
  CMsgBotWorldState_UnitType_SHRINE = 8,
  CMsgBotWorldState_UnitType_FORT = 9,
  CMsgBotWorldState_UnitType_BUILDING = 10,
  CMsgBotWorldState_UnitType_COURIER = 11,
  CMsgBotWorldState_UnitType_WARD = 12
};
bool CMsgBotWorldState_UnitType_IsValid(int value);
const CMsgBotWorldState_UnitType CMsgBotWorldState_UnitType_UnitType_MIN = CMsgBotWorldState_UnitType_INVALID;
const CMsgBotWorldState_UnitType CMsgBotWorldState_UnitType_UnitType_MAX = CMsgBotWorldState_UnitType_WARD;
const int CMsgBotWorldState_UnitType_UnitType_ARRAYSIZE = CMsgBotWorldState_UnitType_UnitType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgBotWorldState_UnitType_descriptor();
inline const ::std::string& CMsgBotWorldState_UnitType_Name(CMsgBotWorldState_UnitType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgBotWorldState_UnitType_descriptor(), value);
}
inline bool CMsgBotWorldState_UnitType_Parse(
    const ::std::string& name, CMsgBotWorldState_UnitType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgBotWorldState_UnitType>(
    CMsgBotWorldState_UnitType_descriptor(), name, value);
}
// ===================================================================

class CMsgBotWorldState_Vector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.Vector) */ {
 public:
  CMsgBotWorldState_Vector();
  virtual ~CMsgBotWorldState_Vector();

  CMsgBotWorldState_Vector(const CMsgBotWorldState_Vector& from);

  inline CMsgBotWorldState_Vector& operator=(const CMsgBotWorldState_Vector& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_Vector& default_instance();

  static inline const CMsgBotWorldState_Vector* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Vector*>(
               &_CMsgBotWorldState_Vector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CMsgBotWorldState_Vector* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_Vector* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_Vector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_Vector& from);
  void MergeFrom(const CMsgBotWorldState_Vector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_Vector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.Vector)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.Player) */ {
 public:
  CMsgBotWorldState_Player();
  virtual ~CMsgBotWorldState_Player();

  CMsgBotWorldState_Player(const CMsgBotWorldState_Player& from);

  inline CMsgBotWorldState_Player& operator=(const CMsgBotWorldState_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_Player& default_instance();

  static inline const CMsgBotWorldState_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Player*>(
               &_CMsgBotWorldState_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CMsgBotWorldState_Player* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_Player& from);
  void MergeFrom(const CMsgBotWorldState_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional bool is_alive = 3;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 3;
  bool is_alive() const;
  void set_is_alive(bool value);

  // optional float respawn_time = 4;
  bool has_respawn_time() const;
  void clear_respawn_time();
  static const int kRespawnTimeFieldNumber = 4;
  float respawn_time() const;
  void set_respawn_time(float value);

  // optional uint32 kills = 5;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 5;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 6;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 6;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 7;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 7;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.Player)
 private:
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_is_alive();
  void clear_has_is_alive();
  void set_has_respawn_time();
  void clear_has_respawn_time();
  void set_has_kills();
  void clear_has_kills();
  void set_has_deaths();
  void clear_has_deaths();
  void set_has_assists();
  void clear_has_assists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::uint32 hero_id_;
  bool is_alive_;
  float respawn_time_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Ability : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.Ability) */ {
 public:
  CMsgBotWorldState_Ability();
  virtual ~CMsgBotWorldState_Ability();

  CMsgBotWorldState_Ability(const CMsgBotWorldState_Ability& from);

  inline CMsgBotWorldState_Ability& operator=(const CMsgBotWorldState_Ability& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_Ability& default_instance();

  static inline const CMsgBotWorldState_Ability* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Ability*>(
               &_CMsgBotWorldState_Ability_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMsgBotWorldState_Ability* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_Ability* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_Ability* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_Ability& from);
  void MergeFrom(const CMsgBotWorldState_Ability& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_Ability* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 handle = 1;
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint32 handle() const;
  void set_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 2;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 2;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional uint32 slot = 3;
  bool has_slot() const;
  void clear_slot();
  static const int kSlotFieldNumber = 3;
  ::google::protobuf::uint32 slot() const;
  void set_slot(::google::protobuf::uint32 value);

  // optional uint32 caster_handle = 5;
  bool has_caster_handle() const;
  void clear_caster_handle();
  static const int kCasterHandleFieldNumber = 5;
  ::google::protobuf::uint32 caster_handle() const;
  void set_caster_handle(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 6;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional uint32 cast_range = 10;
  bool has_cast_range() const;
  void clear_cast_range();
  static const int kCastRangeFieldNumber = 10;
  ::google::protobuf::uint32 cast_range() const;
  void set_cast_range(::google::protobuf::uint32 value);

  // optional float channel_time = 11;
  bool has_channel_time() const;
  void clear_channel_time();
  static const int kChannelTimeFieldNumber = 11;
  float channel_time() const;
  void set_channel_time(float value);

  // optional float cooldown_remaining = 12;
  bool has_cooldown_remaining() const;
  void clear_cooldown_remaining();
  static const int kCooldownRemainingFieldNumber = 12;
  float cooldown_remaining() const;
  void set_cooldown_remaining(float value);

  // optional uint32 power_treads_stat = 50;
  bool has_power_treads_stat() const;
  void clear_power_treads_stat();
  static const int kPowerTreadsStatFieldNumber = 50;
  ::google::protobuf::uint32 power_treads_stat() const;
  void set_power_treads_stat(::google::protobuf::uint32 value);

  // optional bool is_activated = 20;
  bool has_is_activated() const;
  void clear_is_activated();
  static const int kIsActivatedFieldNumber = 20;
  bool is_activated() const;
  void set_is_activated(bool value);

  // optional bool is_toggled = 21;
  bool has_is_toggled() const;
  void clear_is_toggled();
  static const int kIsToggledFieldNumber = 21;
  bool is_toggled() const;
  void set_is_toggled(bool value);

  // optional bool is_in_ability_phase = 22;
  bool has_is_in_ability_phase() const;
  void clear_is_in_ability_phase();
  static const int kIsInAbilityPhaseFieldNumber = 22;
  bool is_in_ability_phase() const;
  void set_is_in_ability_phase(bool value);

  // optional bool is_channeling = 23;
  bool has_is_channeling() const;
  void clear_is_channeling();
  static const int kIsChannelingFieldNumber = 23;
  bool is_channeling() const;
  void set_is_channeling(bool value);

  // optional uint32 charges = 30;
  bool has_charges() const;
  void clear_charges();
  static const int kChargesFieldNumber = 30;
  ::google::protobuf::uint32 charges() const;
  void set_charges(::google::protobuf::uint32 value);

  // optional uint32 secondary_charges = 31;
  bool has_secondary_charges() const;
  void clear_secondary_charges();
  static const int kSecondaryChargesFieldNumber = 31;
  ::google::protobuf::uint32 secondary_charges() const;
  void set_secondary_charges(::google::protobuf::uint32 value);

  // optional bool is_stolen = 24;
  bool has_is_stolen() const;
  void clear_is_stolen();
  static const int kIsStolenFieldNumber = 24;
  bool is_stolen() const;
  void set_is_stolen(bool value);

  // optional bool is_combined_locked = 40;
  bool has_is_combined_locked() const;
  void clear_is_combined_locked();
  static const int kIsCombinedLockedFieldNumber = 40;
  bool is_combined_locked() const;
  void set_is_combined_locked(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.Ability)
 private:
  void set_has_handle();
  void clear_has_handle();
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_slot();
  void clear_has_slot();
  void set_has_caster_handle();
  void clear_has_caster_handle();
  void set_has_level();
  void clear_has_level();
  void set_has_cast_range();
  void clear_has_cast_range();
  void set_has_channel_time();
  void clear_has_channel_time();
  void set_has_cooldown_remaining();
  void clear_has_cooldown_remaining();
  void set_has_is_activated();
  void clear_has_is_activated();
  void set_has_is_toggled();
  void clear_has_is_toggled();
  void set_has_is_in_ability_phase();
  void clear_has_is_in_ability_phase();
  void set_has_is_channeling();
  void clear_has_is_channeling();
  void set_has_is_stolen();
  void clear_has_is_stolen();
  void set_has_charges();
  void clear_has_charges();
  void set_has_secondary_charges();
  void clear_has_secondary_charges();
  void set_has_is_combined_locked();
  void clear_has_is_combined_locked();
  void set_has_power_treads_stat();
  void clear_has_power_treads_stat();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 handle_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 slot_;
  ::google::protobuf::uint32 caster_handle_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 cast_range_;
  float channel_time_;
  float cooldown_remaining_;
  ::google::protobuf::uint32 power_treads_stat_;
  bool is_activated_;
  bool is_toggled_;
  bool is_in_ability_phase_;
  bool is_channeling_;
  ::google::protobuf::uint32 charges_;
  ::google::protobuf::uint32 secondary_charges_;
  bool is_stolen_;
  bool is_combined_locked_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_DroppedItem : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.DroppedItem) */ {
 public:
  CMsgBotWorldState_DroppedItem();
  virtual ~CMsgBotWorldState_DroppedItem();

  CMsgBotWorldState_DroppedItem(const CMsgBotWorldState_DroppedItem& from);

  inline CMsgBotWorldState_DroppedItem& operator=(const CMsgBotWorldState_DroppedItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_DroppedItem& default_instance();

  static inline const CMsgBotWorldState_DroppedItem* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_DroppedItem*>(
               &_CMsgBotWorldState_DroppedItem_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMsgBotWorldState_DroppedItem* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_DroppedItem* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_DroppedItem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_DroppedItem& from);
  void MergeFrom(const CMsgBotWorldState_DroppedItem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_DroppedItem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 item_id = 1;
  bool has_item_id() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint32 item_id() const;
  void set_item_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.DroppedItem)
 private:
  void set_has_item_id();
  void clear_has_item_id();
  void set_has_location();
  void clear_has_location();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 item_id_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_RuneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.RuneInfo) */ {
 public:
  CMsgBotWorldState_RuneInfo();
  virtual ~CMsgBotWorldState_RuneInfo();

  CMsgBotWorldState_RuneInfo(const CMsgBotWorldState_RuneInfo& from);

  inline CMsgBotWorldState_RuneInfo& operator=(const CMsgBotWorldState_RuneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_RuneInfo& default_instance();

  static inline const CMsgBotWorldState_RuneInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_RuneInfo*>(
               &_CMsgBotWorldState_RuneInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CMsgBotWorldState_RuneInfo* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_RuneInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_RuneInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_RuneInfo& from);
  void MergeFrom(const CMsgBotWorldState_RuneInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_RuneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional int32 type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional uint32 status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::uint32 status() const;
  void set_status(::google::protobuf::uint32 value);

  // optional float time_since_seen = 4;
  bool has_time_since_seen() const;
  void clear_time_since_seen();
  static const int kTimeSinceSeenFieldNumber = 4;
  float time_since_seen() const;
  void set_time_since_seen(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.RuneInfo)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_location();
  void clear_has_location();
  void set_has_status();
  void clear_has_status();
  void set_has_time_since_seen();
  void clear_has_time_since_seen();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint32 status_;
  float time_since_seen_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_TeleportInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.TeleportInfo) */ {
 public:
  CMsgBotWorldState_TeleportInfo();
  virtual ~CMsgBotWorldState_TeleportInfo();

  CMsgBotWorldState_TeleportInfo(const CMsgBotWorldState_TeleportInfo& from);

  inline CMsgBotWorldState_TeleportInfo& operator=(const CMsgBotWorldState_TeleportInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_TeleportInfo& default_instance();

  static inline const CMsgBotWorldState_TeleportInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_TeleportInfo*>(
               &_CMsgBotWorldState_TeleportInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CMsgBotWorldState_TeleportInfo* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_TeleportInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_TeleportInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_TeleportInfo& from);
  void MergeFrom(const CMsgBotWorldState_TeleportInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_TeleportInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional int32 player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional float time_remaning = 3;
  bool has_time_remaning() const;
  void clear_time_remaning();
  static const int kTimeRemaningFieldNumber = 3;
  float time_remaning() const;
  void set_time_remaning(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.TeleportInfo)
 private:
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_location();
  void clear_has_location();
  void set_has_time_remaning();
  void clear_has_time_remaning();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::int32 player_id_;
  float time_remaning_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Modifier : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.Modifier) */ {
 public:
  CMsgBotWorldState_Modifier();
  virtual ~CMsgBotWorldState_Modifier();

  CMsgBotWorldState_Modifier(const CMsgBotWorldState_Modifier& from);

  inline CMsgBotWorldState_Modifier& operator=(const CMsgBotWorldState_Modifier& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_Modifier& default_instance();

  static inline const CMsgBotWorldState_Modifier* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Modifier*>(
               &_CMsgBotWorldState_Modifier_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CMsgBotWorldState_Modifier* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_Modifier* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_Modifier* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_Modifier& from);
  void MergeFrom(const CMsgBotWorldState_Modifier& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_Modifier* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 auxiliary_units_handles = 6;
  int auxiliary_units_handles_size() const;
  void clear_auxiliary_units_handles();
  static const int kAuxiliaryUnitsHandlesFieldNumber = 6;
  ::google::protobuf::uint32 auxiliary_units_handles(int index) const;
  void set_auxiliary_units_handles(int index, ::google::protobuf::uint32 value);
  void add_auxiliary_units_handles(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      auxiliary_units_handles() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_auxiliary_units_handles();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 stack_count = 2;
  bool has_stack_count() const;
  void clear_stack_count();
  static const int kStackCountFieldNumber = 2;
  ::google::protobuf::uint32 stack_count() const;
  void set_stack_count(::google::protobuf::uint32 value);

  // optional uint32 ability_handle = 3;
  bool has_ability_handle() const;
  void clear_ability_handle();
  static const int kAbilityHandleFieldNumber = 3;
  ::google::protobuf::uint32 ability_handle() const;
  void set_ability_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 4;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 4;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional float remaining_duration = 5;
  bool has_remaining_duration() const;
  void clear_remaining_duration();
  static const int kRemainingDurationFieldNumber = 5;
  float remaining_duration() const;
  void set_remaining_duration(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.Modifier)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_stack_count();
  void clear_has_stack_count();
  void set_has_ability_handle();
  void clear_has_ability_handle();
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_remaining_duration();
  void clear_has_remaining_duration();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > auxiliary_units_handles_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 stack_count_;
  ::google::protobuf::uint32 ability_handle_;
  ::google::protobuf::uint32 ability_id_;
  float remaining_duration_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_LinearProjectile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.LinearProjectile) */ {
 public:
  CMsgBotWorldState_LinearProjectile();
  virtual ~CMsgBotWorldState_LinearProjectile();

  CMsgBotWorldState_LinearProjectile(const CMsgBotWorldState_LinearProjectile& from);

  inline CMsgBotWorldState_LinearProjectile& operator=(const CMsgBotWorldState_LinearProjectile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_LinearProjectile& default_instance();

  static inline const CMsgBotWorldState_LinearProjectile* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_LinearProjectile*>(
               &_CMsgBotWorldState_LinearProjectile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CMsgBotWorldState_LinearProjectile* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_LinearProjectile* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_LinearProjectile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_LinearProjectile& from);
  void MergeFrom(const CMsgBotWorldState_LinearProjectile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_LinearProjectile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 7;
  const ::proto::dota::CMsgBotWorldState_Vector& velocity() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_velocity();
  ::proto::dota::CMsgBotWorldState_Vector* release_velocity();
  void set_allocated_velocity(::proto::dota::CMsgBotWorldState_Vector* velocity);

  // optional uint32 handle = 1;
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint32 handle() const;
  void set_handle(::google::protobuf::uint32 value);

  // optional uint32 caster_handle = 2;
  bool has_caster_handle() const;
  void clear_caster_handle();
  static const int kCasterHandleFieldNumber = 2;
  ::google::protobuf::uint32 caster_handle() const;
  void set_caster_handle(::google::protobuf::uint32 value);

  // optional int32 caster_player_id = 3;
  bool has_caster_player_id() const;
  void clear_caster_player_id();
  static const int kCasterPlayerIdFieldNumber = 3;
  ::google::protobuf::int32 caster_player_id() const;
  void set_caster_player_id(::google::protobuf::int32 value);

  // optional uint32 ability_handle = 4;
  bool has_ability_handle() const;
  void clear_ability_handle();
  static const int kAbilityHandleFieldNumber = 4;
  ::google::protobuf::uint32 ability_handle() const;
  void set_ability_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 5;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 5;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional uint32 radius = 8;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 8;
  ::google::protobuf::uint32 radius() const;
  void set_radius(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.LinearProjectile)
 private:
  void set_has_handle();
  void clear_has_handle();
  void set_has_caster_handle();
  void clear_has_caster_handle();
  void set_has_caster_player_id();
  void clear_has_caster_player_id();
  void set_has_ability_handle();
  void clear_has_ability_handle();
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_location();
  void clear_has_location();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_radius();
  void clear_has_radius();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::proto::dota::CMsgBotWorldState_Vector* velocity_;
  ::google::protobuf::uint32 handle_;
  ::google::protobuf::uint32 caster_handle_;
  ::google::protobuf::int32 caster_player_id_;
  ::google::protobuf::uint32 ability_handle_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 radius_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_TrackingProjectile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.TrackingProjectile) */ {
 public:
  CMsgBotWorldState_TrackingProjectile();
  virtual ~CMsgBotWorldState_TrackingProjectile();

  CMsgBotWorldState_TrackingProjectile(const CMsgBotWorldState_TrackingProjectile& from);

  inline CMsgBotWorldState_TrackingProjectile& operator=(const CMsgBotWorldState_TrackingProjectile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_TrackingProjectile& default_instance();

  static inline const CMsgBotWorldState_TrackingProjectile* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_TrackingProjectile*>(
               &_CMsgBotWorldState_TrackingProjectile_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CMsgBotWorldState_TrackingProjectile* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_TrackingProjectile* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_TrackingProjectile* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_TrackingProjectile& from);
  void MergeFrom(const CMsgBotWorldState_TrackingProjectile& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_TrackingProjectile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 5;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 5;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 caster_handle = 1;
  bool has_caster_handle() const;
  void clear_caster_handle();
  static const int kCasterHandleFieldNumber = 1;
  ::google::protobuf::uint32 caster_handle() const;
  void set_caster_handle(::google::protobuf::uint32 value);

  // optional int32 caster_player_id = 2;
  bool has_caster_player_id() const;
  void clear_caster_player_id();
  static const int kCasterPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 caster_player_id() const;
  void set_caster_player_id(::google::protobuf::int32 value);

  // optional uint32 ability_handle = 3;
  bool has_ability_handle() const;
  void clear_ability_handle();
  static const int kAbilityHandleFieldNumber = 3;
  ::google::protobuf::uint32 ability_handle() const;
  void set_ability_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 4;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 4;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional uint32 velocity = 6;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 6;
  ::google::protobuf::uint32 velocity() const;
  void set_velocity(::google::protobuf::uint32 value);

  // optional bool is_dodgeable = 7;
  bool has_is_dodgeable() const;
  void clear_is_dodgeable();
  static const int kIsDodgeableFieldNumber = 7;
  bool is_dodgeable() const;
  void set_is_dodgeable(bool value);

  // optional bool is_attack = 8;
  bool has_is_attack() const;
  void clear_is_attack();
  static const int kIsAttackFieldNumber = 8;
  bool is_attack() const;
  void set_is_attack(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.TrackingProjectile)
 private:
  void set_has_caster_handle();
  void clear_has_caster_handle();
  void set_has_caster_player_id();
  void clear_has_caster_player_id();
  void set_has_ability_handle();
  void clear_has_ability_handle();
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_location();
  void clear_has_location();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_is_dodgeable();
  void clear_has_is_dodgeable();
  void set_has_is_attack();
  void clear_has_is_attack();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 caster_handle_;
  ::google::protobuf::int32 caster_player_id_;
  ::google::protobuf::uint32 ability_handle_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 velocity_;
  bool is_dodgeable_;
  bool is_attack_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_AvoidanceZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.AvoidanceZone) */ {
 public:
  CMsgBotWorldState_AvoidanceZone();
  virtual ~CMsgBotWorldState_AvoidanceZone();

  CMsgBotWorldState_AvoidanceZone(const CMsgBotWorldState_AvoidanceZone& from);

  inline CMsgBotWorldState_AvoidanceZone& operator=(const CMsgBotWorldState_AvoidanceZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_AvoidanceZone& default_instance();

  static inline const CMsgBotWorldState_AvoidanceZone* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_AvoidanceZone*>(
               &_CMsgBotWorldState_AvoidanceZone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CMsgBotWorldState_AvoidanceZone* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_AvoidanceZone* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_AvoidanceZone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_AvoidanceZone& from);
  void MergeFrom(const CMsgBotWorldState_AvoidanceZone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_AvoidanceZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 1;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 1;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 caster_handle = 2;
  bool has_caster_handle() const;
  void clear_caster_handle();
  static const int kCasterHandleFieldNumber = 2;
  ::google::protobuf::uint32 caster_handle() const;
  void set_caster_handle(::google::protobuf::uint32 value);

  // optional int32 caster_player_id = 3;
  bool has_caster_player_id() const;
  void clear_caster_player_id();
  static const int kCasterPlayerIdFieldNumber = 3;
  ::google::protobuf::int32 caster_player_id() const;
  void set_caster_player_id(::google::protobuf::int32 value);

  // optional uint32 ability_handle = 4;
  bool has_ability_handle() const;
  void clear_ability_handle();
  static const int kAbilityHandleFieldNumber = 4;
  ::google::protobuf::uint32 ability_handle() const;
  void set_ability_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 5;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 5;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional uint32 radius = 6;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  ::google::protobuf::uint32 radius() const;
  void set_radius(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.AvoidanceZone)
 private:
  void set_has_location();
  void clear_has_location();
  void set_has_caster_handle();
  void clear_has_caster_handle();
  void set_has_caster_player_id();
  void clear_has_caster_player_id();
  void set_has_ability_handle();
  void clear_has_ability_handle();
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_radius();
  void clear_has_radius();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 caster_handle_;
  ::google::protobuf::int32 caster_player_id_;
  ::google::protobuf::uint32 ability_handle_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 radius_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventAbility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.EventAbility) */ {
 public:
  CMsgBotWorldState_EventAbility();
  virtual ~CMsgBotWorldState_EventAbility();

  CMsgBotWorldState_EventAbility(const CMsgBotWorldState_EventAbility& from);

  inline CMsgBotWorldState_EventAbility& operator=(const CMsgBotWorldState_EventAbility& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_EventAbility& default_instance();

  static inline const CMsgBotWorldState_EventAbility* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventAbility*>(
               &_CMsgBotWorldState_EventAbility_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CMsgBotWorldState_EventAbility* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_EventAbility* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_EventAbility* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_EventAbility& from);
  void MergeFrom(const CMsgBotWorldState_EventAbility& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_EventAbility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 ability_id = 1;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 1;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional int32 player_id = 2;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional uint32 unit_handle = 3;
  bool has_unit_handle() const;
  void clear_unit_handle();
  static const int kUnitHandleFieldNumber = 3;
  ::google::protobuf::uint32 unit_handle() const;
  void set_unit_handle(::google::protobuf::uint32 value);

  // optional bool is_channel_start = 5;
  bool has_is_channel_start() const;
  void clear_is_channel_start();
  static const int kIsChannelStartFieldNumber = 5;
  bool is_channel_start() const;
  void set_is_channel_start(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.EventAbility)
 private:
  void set_has_ability_id();
  void clear_has_ability_id();
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_unit_handle();
  void clear_has_unit_handle();
  void set_has_location();
  void clear_has_location();
  void set_has_is_channel_start();
  void clear_has_is_channel_start();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::uint32 unit_handle_;
  bool is_channel_start_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventDamage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.EventDamage) */ {
 public:
  CMsgBotWorldState_EventDamage();
  virtual ~CMsgBotWorldState_EventDamage();

  CMsgBotWorldState_EventDamage(const CMsgBotWorldState_EventDamage& from);

  inline CMsgBotWorldState_EventDamage& operator=(const CMsgBotWorldState_EventDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_EventDamage& default_instance();

  static inline const CMsgBotWorldState_EventDamage* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventDamage*>(
               &_CMsgBotWorldState_EventDamage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CMsgBotWorldState_EventDamage* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_EventDamage* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_EventDamage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_EventDamage& from);
  void MergeFrom(const CMsgBotWorldState_EventDamage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_EventDamage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 damage = 1;
  bool has_damage() const;
  void clear_damage();
  static const int kDamageFieldNumber = 1;
  ::google::protobuf::uint32 damage() const;
  void set_damage(::google::protobuf::uint32 value);

  // optional int32 victim_player_id = 2;
  bool has_victim_player_id() const;
  void clear_victim_player_id();
  static const int kVictimPlayerIdFieldNumber = 2;
  ::google::protobuf::int32 victim_player_id() const;
  void set_victim_player_id(::google::protobuf::int32 value);

  // optional uint32 victim_unit_handle = 3;
  bool has_victim_unit_handle() const;
  void clear_victim_unit_handle();
  static const int kVictimUnitHandleFieldNumber = 3;
  ::google::protobuf::uint32 victim_unit_handle() const;
  void set_victim_unit_handle(::google::protobuf::uint32 value);

  // optional int32 attacker_player_id = 4;
  bool has_attacker_player_id() const;
  void clear_attacker_player_id();
  static const int kAttackerPlayerIdFieldNumber = 4;
  ::google::protobuf::int32 attacker_player_id() const;
  void set_attacker_player_id(::google::protobuf::int32 value);

  // optional uint32 attacker_unit_handle = 5;
  bool has_attacker_unit_handle() const;
  void clear_attacker_unit_handle();
  static const int kAttackerUnitHandleFieldNumber = 5;
  ::google::protobuf::uint32 attacker_unit_handle() const;
  void set_attacker_unit_handle(::google::protobuf::uint32 value);

  // optional uint32 ability_id = 6;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 6;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.EventDamage)
 private:
  void set_has_damage();
  void clear_has_damage();
  void set_has_victim_player_id();
  void clear_has_victim_player_id();
  void set_has_victim_unit_handle();
  void clear_has_victim_unit_handle();
  void set_has_attacker_player_id();
  void clear_has_attacker_player_id();
  void set_has_attacker_unit_handle();
  void clear_has_attacker_unit_handle();
  void set_has_ability_id();
  void clear_has_ability_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::int32 victim_player_id_;
  ::google::protobuf::uint32 victim_unit_handle_;
  ::google::protobuf::int32 attacker_player_id_;
  ::google::protobuf::uint32 attacker_unit_handle_;
  ::google::protobuf::uint32 ability_id_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventCourierKilled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.EventCourierKilled) */ {
 public:
  CMsgBotWorldState_EventCourierKilled();
  virtual ~CMsgBotWorldState_EventCourierKilled();

  CMsgBotWorldState_EventCourierKilled(const CMsgBotWorldState_EventCourierKilled& from);

  inline CMsgBotWorldState_EventCourierKilled& operator=(const CMsgBotWorldState_EventCourierKilled& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_EventCourierKilled& default_instance();

  static inline const CMsgBotWorldState_EventCourierKilled* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventCourierKilled*>(
               &_CMsgBotWorldState_EventCourierKilled_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CMsgBotWorldState_EventCourierKilled* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_EventCourierKilled* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_EventCourierKilled* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_EventCourierKilled& from);
  void MergeFrom(const CMsgBotWorldState_EventCourierKilled& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_EventCourierKilled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 courier_unit_handle = 2;
  bool has_courier_unit_handle() const;
  void clear_courier_unit_handle();
  static const int kCourierUnitHandleFieldNumber = 2;
  ::google::protobuf::uint32 courier_unit_handle() const;
  void set_courier_unit_handle(::google::protobuf::uint32 value);

  // optional int32 killer_player_id = 3;
  bool has_killer_player_id() const;
  void clear_killer_player_id();
  static const int kKillerPlayerIdFieldNumber = 3;
  ::google::protobuf::int32 killer_player_id() const;
  void set_killer_player_id(::google::protobuf::int32 value);

  // optional uint32 killer_unit_handle = 4;
  bool has_killer_unit_handle() const;
  void clear_killer_unit_handle();
  static const int kKillerUnitHandleFieldNumber = 4;
  ::google::protobuf::uint32 killer_unit_handle() const;
  void set_killer_unit_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.EventCourierKilled)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_courier_unit_handle();
  void clear_has_courier_unit_handle();
  void set_has_killer_player_id();
  void clear_has_killer_player_id();
  void set_has_killer_unit_handle();
  void clear_has_killer_unit_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 courier_unit_handle_;
  ::google::protobuf::int32 killer_player_id_;
  ::google::protobuf::uint32 killer_unit_handle_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventRoshanKilled : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.EventRoshanKilled) */ {
 public:
  CMsgBotWorldState_EventRoshanKilled();
  virtual ~CMsgBotWorldState_EventRoshanKilled();

  CMsgBotWorldState_EventRoshanKilled(const CMsgBotWorldState_EventRoshanKilled& from);

  inline CMsgBotWorldState_EventRoshanKilled& operator=(const CMsgBotWorldState_EventRoshanKilled& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_EventRoshanKilled& default_instance();

  static inline const CMsgBotWorldState_EventRoshanKilled* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventRoshanKilled*>(
               &_CMsgBotWorldState_EventRoshanKilled_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CMsgBotWorldState_EventRoshanKilled* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_EventRoshanKilled* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_EventRoshanKilled* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_EventRoshanKilled& from);
  void MergeFrom(const CMsgBotWorldState_EventRoshanKilled& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_EventRoshanKilled* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 killer_player_id = 1;
  bool has_killer_player_id() const;
  void clear_killer_player_id();
  static const int kKillerPlayerIdFieldNumber = 1;
  ::google::protobuf::int32 killer_player_id() const;
  void set_killer_player_id(::google::protobuf::int32 value);

  // optional uint32 killer_unit_handle = 2;
  bool has_killer_unit_handle() const;
  void clear_killer_unit_handle();
  static const int kKillerUnitHandleFieldNumber = 2;
  ::google::protobuf::uint32 killer_unit_handle() const;
  void set_killer_unit_handle(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.EventRoshanKilled)
 private:
  void set_has_killer_player_id();
  void clear_has_killer_player_id();
  void set_has_killer_unit_handle();
  void clear_has_killer_unit_handle();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 killer_player_id_;
  ::google::protobuf::uint32 killer_unit_handle_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_EventTree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.EventTree) */ {
 public:
  CMsgBotWorldState_EventTree();
  virtual ~CMsgBotWorldState_EventTree();

  CMsgBotWorldState_EventTree(const CMsgBotWorldState_EventTree& from);

  inline CMsgBotWorldState_EventTree& operator=(const CMsgBotWorldState_EventTree& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_EventTree& default_instance();

  static inline const CMsgBotWorldState_EventTree* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_EventTree*>(
               &_CMsgBotWorldState_EventTree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CMsgBotWorldState_EventTree* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_EventTree* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_EventTree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_EventTree& from);
  void MergeFrom(const CMsgBotWorldState_EventTree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_EventTree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 tree_id = 1;
  bool has_tree_id() const;
  void clear_tree_id();
  static const int kTreeIdFieldNumber = 1;
  ::google::protobuf::uint32 tree_id() const;
  void set_tree_id(::google::protobuf::uint32 value);

  // optional bool destroyed = 2;
  bool has_destroyed() const;
  void clear_destroyed();
  static const int kDestroyedFieldNumber = 2;
  bool destroyed() const;
  void set_destroyed(bool value);

  // optional bool respawned = 3;
  bool has_respawned() const;
  void clear_respawned();
  static const int kRespawnedFieldNumber = 3;
  bool respawned() const;
  void set_respawned(bool value);

  // optional bool delayed = 5;
  bool has_delayed() const;
  void clear_delayed();
  static const int kDelayedFieldNumber = 5;
  bool delayed() const;
  void set_delayed(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.EventTree)
 private:
  void set_has_tree_id();
  void clear_has_tree_id();
  void set_has_destroyed();
  void clear_has_destroyed();
  void set_has_respawned();
  void clear_has_respawned();
  void set_has_location();
  void clear_has_location();
  void set_has_delayed();
  void clear_has_delayed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 tree_id_;
  bool destroyed_;
  bool respawned_;
  bool delayed_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState_Unit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState.Unit) */ {
 public:
  CMsgBotWorldState_Unit();
  virtual ~CMsgBotWorldState_Unit();

  CMsgBotWorldState_Unit(const CMsgBotWorldState_Unit& from);

  inline CMsgBotWorldState_Unit& operator=(const CMsgBotWorldState_Unit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState_Unit& default_instance();

  static inline const CMsgBotWorldState_Unit* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState_Unit*>(
               &_CMsgBotWorldState_Unit_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CMsgBotWorldState_Unit* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState_Unit* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState_Unit* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState_Unit& from);
  void MergeFrom(const CMsgBotWorldState_Unit& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState_Unit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
  int abilities_size() const;
  void clear_abilities();
  static const int kAbilitiesFieldNumber = 90;
  const ::proto::dota::CMsgBotWorldState_Ability& abilities(int index) const;
  ::proto::dota::CMsgBotWorldState_Ability* mutable_abilities(int index);
  ::proto::dota::CMsgBotWorldState_Ability* add_abilities();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
      mutable_abilities();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
      abilities() const;

  // repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 91;
  const ::proto::dota::CMsgBotWorldState_Ability& items(int index) const;
  ::proto::dota::CMsgBotWorldState_Ability* mutable_items(int index);
  ::proto::dota::CMsgBotWorldState_Ability* add_items();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
      mutable_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
      items() const;

  // repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
  int modifiers_size() const;
  void clear_modifiers();
  static const int kModifiersFieldNumber = 92;
  const ::proto::dota::CMsgBotWorldState_Modifier& modifiers(int index) const;
  ::proto::dota::CMsgBotWorldState_Modifier* mutable_modifiers(int index);
  ::proto::dota::CMsgBotWorldState_Modifier* add_modifiers();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >*
      mutable_modifiers();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >&
      modifiers() const;

  // repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
  int incoming_tracking_projectiles_size() const;
  void clear_incoming_tracking_projectiles();
  static const int kIncomingTrackingProjectilesFieldNumber = 93;
  const ::proto::dota::CMsgBotWorldState_TrackingProjectile& incoming_tracking_projectiles(int index) const;
  ::proto::dota::CMsgBotWorldState_TrackingProjectile* mutable_incoming_tracking_projectiles(int index);
  ::proto::dota::CMsgBotWorldState_TrackingProjectile* add_incoming_tracking_projectiles();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >*
      mutable_incoming_tracking_projectiles();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >&
      incoming_tracking_projectiles() const;

  // optional string name = 3;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::proto::dota::CMsgBotWorldState_Vector& location() const;
  ::proto::dota::CMsgBotWorldState_Vector* mutable_location();
  ::proto::dota::CMsgBotWorldState_Vector* release_location();
  void set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location);

  // optional uint32 handle = 1;
  bool has_handle() const;
  void clear_handle();
  static const int kHandleFieldNumber = 1;
  ::google::protobuf::uint32 handle() const;
  void set_handle(::google::protobuf::uint32 value);

  // optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  bool has_unit_type() const;
  void clear_unit_type();
  static const int kUnitTypeFieldNumber = 2;
  ::proto::dota::CMsgBotWorldState_UnitType unit_type() const;
  void set_unit_type(::proto::dota::CMsgBotWorldState_UnitType value);

  // optional uint32 team_id = 4;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 4;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 5;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // optional int32 player_id = 8;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 8;
  ::google::protobuf::int32 player_id() const;
  void set_player_id(::google::protobuf::int32 value);

  // optional uint32 bounding_radius = 10;
  bool has_bounding_radius() const;
  void clear_bounding_radius();
  static const int kBoundingRadiusFieldNumber = 10;
  ::google::protobuf::uint32 bounding_radius() const;
  void set_bounding_radius(::google::protobuf::uint32 value);

  // optional uint32 facing = 11;
  bool has_facing() const;
  void clear_facing();
  static const int kFacingFieldNumber = 11;
  ::google::protobuf::uint32 facing() const;
  void set_facing(::google::protobuf::uint32 value);

  // optional uint32 ground_height = 12;
  bool has_ground_height() const;
  void clear_ground_height();
  static const int kGroundHeightFieldNumber = 12;
  ::google::protobuf::uint32 ground_height() const;
  void set_ground_height(::google::protobuf::uint32 value);

  // optional uint32 vision_range_daytime = 15;
  bool has_vision_range_daytime() const;
  void clear_vision_range_daytime();
  static const int kVisionRangeDaytimeFieldNumber = 15;
  ::google::protobuf::uint32 vision_range_daytime() const;
  void set_vision_range_daytime(::google::protobuf::uint32 value);

  // optional uint32 vision_range_nighttime = 16;
  bool has_vision_range_nighttime() const;
  void clear_vision_range_nighttime();
  static const int kVisionRangeNighttimeFieldNumber = 16;
  ::google::protobuf::uint32 vision_range_nighttime() const;
  void set_vision_range_nighttime(::google::protobuf::uint32 value);

  // optional uint32 health = 20;
  bool has_health() const;
  void clear_health();
  static const int kHealthFieldNumber = 20;
  ::google::protobuf::uint32 health() const;
  void set_health(::google::protobuf::uint32 value);

  // optional uint32 health_max = 21;
  bool has_health_max() const;
  void clear_health_max();
  static const int kHealthMaxFieldNumber = 21;
  ::google::protobuf::uint32 health_max() const;
  void set_health_max(::google::protobuf::uint32 value);

  // optional float health_regen = 22;
  bool has_health_regen() const;
  void clear_health_regen();
  static const int kHealthRegenFieldNumber = 22;
  float health_regen() const;
  void set_health_regen(float value);

  // optional uint32 mana = 25;
  bool has_mana() const;
  void clear_mana();
  static const int kManaFieldNumber = 25;
  ::google::protobuf::uint32 mana() const;
  void set_mana(::google::protobuf::uint32 value);

  // optional uint32 mana_max = 26;
  bool has_mana_max() const;
  void clear_mana_max();
  static const int kManaMaxFieldNumber = 26;
  ::google::protobuf::uint32 mana_max() const;
  void set_mana_max(::google::protobuf::uint32 value);

  // optional float mana_regen = 27;
  bool has_mana_regen() const;
  void clear_mana_regen();
  static const int kManaRegenFieldNumber = 27;
  float mana_regen() const;
  void set_mana_regen(float value);

  // optional uint32 base_movement_speed = 30;
  bool has_base_movement_speed() const;
  void clear_base_movement_speed();
  static const int kBaseMovementSpeedFieldNumber = 30;
  ::google::protobuf::uint32 base_movement_speed() const;
  void set_base_movement_speed(::google::protobuf::uint32 value);

  // optional uint32 current_movement_speed = 31;
  bool has_current_movement_speed() const;
  void clear_current_movement_speed();
  static const int kCurrentMovementSpeedFieldNumber = 31;
  ::google::protobuf::uint32 current_movement_speed() const;
  void set_current_movement_speed(::google::protobuf::uint32 value);

  // optional int32 anim_activity = 35;
  bool has_anim_activity() const;
  void clear_anim_activity();
  static const int kAnimActivityFieldNumber = 35;
  ::google::protobuf::int32 anim_activity() const;
  void set_anim_activity(::google::protobuf::int32 value);

  // optional float anim_cycle = 36;
  bool has_anim_cycle() const;
  void clear_anim_cycle();
  static const int kAnimCycleFieldNumber = 36;
  float anim_cycle() const;
  void set_anim_cycle(float value);

  // optional uint32 base_damage = 40;
  bool has_base_damage() const;
  void clear_base_damage();
  static const int kBaseDamageFieldNumber = 40;
  ::google::protobuf::uint32 base_damage() const;
  void set_base_damage(::google::protobuf::uint32 value);

  // optional uint32 base_damage_variance = 41;
  bool has_base_damage_variance() const;
  void clear_base_damage_variance();
  static const int kBaseDamageVarianceFieldNumber = 41;
  ::google::protobuf::uint32 base_damage_variance() const;
  void set_base_damage_variance(::google::protobuf::uint32 value);

  // optional uint32 bonus_damage = 42;
  bool has_bonus_damage() const;
  void clear_bonus_damage();
  static const int kBonusDamageFieldNumber = 42;
  ::google::protobuf::uint32 bonus_damage() const;
  void set_bonus_damage(::google::protobuf::uint32 value);

  // optional uint32 attack_damage = 43;
  bool has_attack_damage() const;
  void clear_attack_damage();
  static const int kAttackDamageFieldNumber = 43;
  ::google::protobuf::uint32 attack_damage() const;
  void set_attack_damage(::google::protobuf::uint32 value);

  // optional uint32 attack_range = 44;
  bool has_attack_range() const;
  void clear_attack_range();
  static const int kAttackRangeFieldNumber = 44;
  ::google::protobuf::uint32 attack_range() const;
  void set_attack_range(::google::protobuf::uint32 value);

  // optional float attack_speed = 45;
  bool has_attack_speed() const;
  void clear_attack_speed();
  static const int kAttackSpeedFieldNumber = 45;
  float attack_speed() const;
  void set_attack_speed(float value);

  // optional float attack_anim_point = 46;
  bool has_attack_anim_point() const;
  void clear_attack_anim_point();
  static const int kAttackAnimPointFieldNumber = 46;
  float attack_anim_point() const;
  void set_attack_anim_point(float value);

  // optional uint32 attack_acquisition_range = 47;
  bool has_attack_acquisition_range() const;
  void clear_attack_acquisition_range();
  static const int kAttackAcquisitionRangeFieldNumber = 47;
  ::google::protobuf::uint32 attack_acquisition_range() const;
  void set_attack_acquisition_range(::google::protobuf::uint32 value);

  // optional uint32 attack_projectile_speed = 48;
  bool has_attack_projectile_speed() const;
  void clear_attack_projectile_speed();
  static const int kAttackProjectileSpeedFieldNumber = 48;
  ::google::protobuf::uint32 attack_projectile_speed() const;
  void set_attack_projectile_speed(::google::protobuf::uint32 value);

  // optional uint32 attack_target_handle = 49;
  bool has_attack_target_handle() const;
  void clear_attack_target_handle();
  static const int kAttackTargetHandleFieldNumber = 49;
  ::google::protobuf::uint32 attack_target_handle() const;
  void set_attack_target_handle(::google::protobuf::uint32 value);

  // optional bool is_alive = 7;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 7;
  bool is_alive() const;
  void set_is_alive(bool value);

  // optional bool is_channeling = 65;
  bool has_is_channeling() const;
  void clear_is_channeling();
  static const int kIsChannelingFieldNumber = 65;
  bool is_channeling() const;
  void set_is_channeling(bool value);

  // optional bool is_attack_immune = 70;
  bool has_is_attack_immune() const;
  void clear_is_attack_immune();
  static const int kIsAttackImmuneFieldNumber = 70;
  bool is_attack_immune() const;
  void set_is_attack_immune(bool value);

  // optional bool is_blind = 71;
  bool has_is_blind() const;
  void clear_is_blind();
  static const int kIsBlindFieldNumber = 71;
  bool is_blind() const;
  void set_is_blind(bool value);

  // optional uint32 bounty_xp = 60;
  bool has_bounty_xp() const;
  void clear_bounty_xp();
  static const int kBountyXpFieldNumber = 60;
  ::google::protobuf::uint32 bounty_xp() const;
  void set_bounty_xp(::google::protobuf::uint32 value);

  // optional uint32 bounty_gold_min = 61;
  bool has_bounty_gold_min() const;
  void clear_bounty_gold_min();
  static const int kBountyGoldMinFieldNumber = 61;
  ::google::protobuf::uint32 bounty_gold_min() const;
  void set_bounty_gold_min(::google::protobuf::uint32 value);

  // optional uint32 bounty_gold_max = 62;
  bool has_bounty_gold_max() const;
  void clear_bounty_gold_max();
  static const int kBountyGoldMaxFieldNumber = 62;
  ::google::protobuf::uint32 bounty_gold_max() const;
  void set_bounty_gold_max(::google::protobuf::uint32 value);

  // optional uint32 active_ability_handle = 66;
  bool has_active_ability_handle() const;
  void clear_active_ability_handle();
  static const int kActiveAbilityHandleFieldNumber = 66;
  ::google::protobuf::uint32 active_ability_handle() const;
  void set_active_ability_handle(::google::protobuf::uint32 value);

  // optional bool is_block_disabled = 72;
  bool has_is_block_disabled() const;
  void clear_is_block_disabled();
  static const int kIsBlockDisabledFieldNumber = 72;
  bool is_block_disabled() const;
  void set_is_block_disabled(bool value);

  // optional bool is_disarmed = 73;
  bool has_is_disarmed() const;
  void clear_is_disarmed();
  static const int kIsDisarmedFieldNumber = 73;
  bool is_disarmed() const;
  void set_is_disarmed(bool value);

  // optional bool is_dominated = 74;
  bool has_is_dominated() const;
  void clear_is_dominated();
  static const int kIsDominatedFieldNumber = 74;
  bool is_dominated() const;
  void set_is_dominated(bool value);

  // optional bool is_evade_disabled = 75;
  bool has_is_evade_disabled() const;
  void clear_is_evade_disabled();
  static const int kIsEvadeDisabledFieldNumber = 75;
  bool is_evade_disabled() const;
  void set_is_evade_disabled(bool value);

  // optional bool is_hexed = 76;
  bool has_is_hexed() const;
  void clear_is_hexed();
  static const int kIsHexedFieldNumber = 76;
  bool is_hexed() const;
  void set_is_hexed(bool value);

  // optional bool is_invisible = 77;
  bool has_is_invisible() const;
  void clear_is_invisible();
  static const int kIsInvisibleFieldNumber = 77;
  bool is_invisible() const;
  void set_is_invisible(bool value);

  // optional bool is_invulnerable = 78;
  bool has_is_invulnerable() const;
  void clear_is_invulnerable();
  static const int kIsInvulnerableFieldNumber = 78;
  bool is_invulnerable() const;
  void set_is_invulnerable(bool value);

  // optional bool is_magic_immune = 79;
  bool has_is_magic_immune() const;
  void clear_is_magic_immune();
  static const int kIsMagicImmuneFieldNumber = 79;
  bool is_magic_immune() const;
  void set_is_magic_immune(bool value);

  // optional bool is_muted = 80;
  bool has_is_muted() const;
  void clear_is_muted();
  static const int kIsMutedFieldNumber = 80;
  bool is_muted() const;
  void set_is_muted(bool value);

  // optional bool is_nightmared = 82;
  bool has_is_nightmared() const;
  void clear_is_nightmared();
  static const int kIsNightmaredFieldNumber = 82;
  bool is_nightmared() const;
  void set_is_nightmared(bool value);

  // optional bool is_rooted = 83;
  bool has_is_rooted() const;
  void clear_is_rooted();
  static const int kIsRootedFieldNumber = 83;
  bool is_rooted() const;
  void set_is_rooted(bool value);

  // optional bool is_silenced = 84;
  bool has_is_silenced() const;
  void clear_is_silenced();
  static const int kIsSilencedFieldNumber = 84;
  bool is_silenced() const;
  void set_is_silenced(bool value);

  // optional bool is_specially_deniable = 85;
  bool has_is_specially_deniable() const;
  void clear_is_specially_deniable();
  static const int kIsSpeciallyDeniableFieldNumber = 85;
  bool is_specially_deniable() const;
  void set_is_specially_deniable(bool value);

  // optional bool is_stunned = 86;
  bool has_is_stunned() const;
  void clear_is_stunned();
  static const int kIsStunnedFieldNumber = 86;
  bool is_stunned() const;
  void set_is_stunned(bool value);

  // optional bool is_unable_to_miss = 87;
  bool has_is_unable_to_miss() const;
  void clear_is_unable_to_miss();
  static const int kIsUnableToMissFieldNumber = 87;
  bool is_unable_to_miss() const;
  void set_is_unable_to_miss(bool value);

  // optional bool has_scepter = 88;
  bool has_has_scepter() const;
  void clear_has_scepter();
  static const int kHasScepterFieldNumber = 88;
  bool has_scepter() const;
  void set_has_scepter(bool value);

  // optional uint32 action_type = 100;
  bool has_action_type() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 100;
  ::google::protobuf::uint32 action_type() const;
  void set_action_type(::google::protobuf::uint32 value);

  // optional uint32 ability_target_handle = 101;
  bool has_ability_target_handle() const;
  void clear_ability_target_handle();
  static const int kAbilityTargetHandleFieldNumber = 101;
  ::google::protobuf::uint32 ability_target_handle() const;
  void set_ability_target_handle(::google::protobuf::uint32 value);

  // optional uint32 primary_attribute = 110;
  bool has_primary_attribute() const;
  void clear_primary_attribute();
  static const int kPrimaryAttributeFieldNumber = 110;
  ::google::protobuf::uint32 primary_attribute() const;
  void set_primary_attribute(::google::protobuf::uint32 value);

  // optional uint32 respawn_time = 112;
  bool has_respawn_time() const;
  void clear_respawn_time();
  static const int kRespawnTimeFieldNumber = 112;
  ::google::protobuf::uint32 respawn_time() const;
  void set_respawn_time(::google::protobuf::uint32 value);

  // optional uint32 buyback_cost = 113;
  bool has_buyback_cost() const;
  void clear_buyback_cost();
  static const int kBuybackCostFieldNumber = 113;
  ::google::protobuf::uint32 buyback_cost() const;
  void set_buyback_cost(::google::protobuf::uint32 value);

  // optional float buyback_cooldown = 114;
  bool has_buyback_cooldown() const;
  void clear_buyback_cooldown();
  static const int kBuybackCooldownFieldNumber = 114;
  float buyback_cooldown() const;
  void set_buyback_cooldown(float value);

  // optional float spell_amplification = 115;
  bool has_spell_amplification() const;
  void clear_spell_amplification();
  static const int kSpellAmplificationFieldNumber = 115;
  float spell_amplification() const;
  void set_spell_amplification(float value);

  // optional float armor = 116;
  bool has_armor() const;
  void clear_armor();
  static const int kArmorFieldNumber = 116;
  float armor() const;
  void set_armor(float value);

  // optional float magic_resist = 117;
  bool has_magic_resist() const;
  void clear_magic_resist();
  static const int kMagicResistFieldNumber = 117;
  float magic_resist() const;
  void set_magic_resist(float value);

  // optional float evasion = 118;
  bool has_evasion() const;
  void clear_evasion();
  static const int kEvasionFieldNumber = 118;
  float evasion() const;
  void set_evasion(float value);

  // optional uint32 xp_needed_to_level = 120;
  bool has_xp_needed_to_level() const;
  void clear_xp_needed_to_level();
  static const int kXpNeededToLevelFieldNumber = 120;
  ::google::protobuf::uint32 xp_needed_to_level() const;
  void set_xp_needed_to_level(::google::protobuf::uint32 value);

  // optional uint32 ability_points = 121;
  bool has_ability_points() const;
  void clear_ability_points();
  static const int kAbilityPointsFieldNumber = 121;
  ::google::protobuf::uint32 ability_points() const;
  void set_ability_points(::google::protobuf::uint32 value);

  // optional uint32 reliable_gold = 122;
  bool has_reliable_gold() const;
  void clear_reliable_gold();
  static const int kReliableGoldFieldNumber = 122;
  ::google::protobuf::uint32 reliable_gold() const;
  void set_reliable_gold(::google::protobuf::uint32 value);

  // optional uint32 unreliable_gold = 123;
  bool has_unreliable_gold() const;
  void clear_unreliable_gold();
  static const int kUnreliableGoldFieldNumber = 123;
  ::google::protobuf::uint32 unreliable_gold() const;
  void set_unreliable_gold(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 124;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 124;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 denies = 125;
  bool has_denies() const;
  void clear_denies();
  static const int kDeniesFieldNumber = 125;
  ::google::protobuf::uint32 denies() const;
  void set_denies(::google::protobuf::uint32 value);

  // optional uint32 net_worth = 126;
  bool has_net_worth() const;
  void clear_net_worth();
  static const int kNetWorthFieldNumber = 126;
  ::google::protobuf::uint32 net_worth() const;
  void set_net_worth(::google::protobuf::uint32 value);

  // optional uint32 strength = 127;
  bool has_strength() const;
  void clear_strength();
  static const int kStrengthFieldNumber = 127;
  ::google::protobuf::uint32 strength() const;
  void set_strength(::google::protobuf::uint32 value);

  // optional uint32 agility = 128;
  bool has_agility() const;
  void clear_agility();
  static const int kAgilityFieldNumber = 128;
  ::google::protobuf::uint32 agility() const;
  void set_agility(::google::protobuf::uint32 value);

  // optional uint32 intelligence = 129;
  bool has_intelligence() const;
  void clear_intelligence();
  static const int kIntelligenceFieldNumber = 129;
  ::google::protobuf::uint32 intelligence() const;
  void set_intelligence(::google::protobuf::uint32 value);

  // optional float remaining_lifespan = 130;
  bool has_remaining_lifespan() const;
  void clear_remaining_lifespan();
  static const int kRemainingLifespanFieldNumber = 130;
  float remaining_lifespan() const;
  void set_remaining_lifespan(float value);

  // optional bool is_illusion = 111;
  bool has_is_illusion() const;
  void clear_is_illusion();
  static const int kIsIllusionFieldNumber = 111;
  bool is_illusion() const;
  void set_is_illusion(bool value);

  // optional bool flying_courier = 140;
  bool has_flying_courier() const;
  void clear_flying_courier();
  static const int kFlyingCourierFieldNumber = 140;
  bool flying_courier() const;
  void set_flying_courier(bool value);

  // optional bool is_shrine_healing = 151;
  bool has_is_shrine_healing() const;
  void clear_is_shrine_healing();
  static const int kIsShrineHealingFieldNumber = 151;
  bool is_shrine_healing() const;
  void set_is_shrine_healing(bool value);

  // optional float shrine_cooldown = 150;
  bool has_shrine_cooldown() const;
  void clear_shrine_cooldown();
  static const int kShrineCooldownFieldNumber = 150;
  float shrine_cooldown() const;
  void set_shrine_cooldown(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState.Unit)
 private:
  void set_has_handle();
  void clear_has_handle();
  void set_has_unit_type();
  void clear_has_unit_type();
  void set_has_name();
  void clear_has_name();
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_level();
  void clear_has_level();
  void set_has_location();
  void clear_has_location();
  void set_has_is_alive();
  void clear_has_is_alive();
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_bounding_radius();
  void clear_has_bounding_radius();
  void set_has_facing();
  void clear_has_facing();
  void set_has_ground_height();
  void clear_has_ground_height();
  void set_has_vision_range_daytime();
  void clear_has_vision_range_daytime();
  void set_has_vision_range_nighttime();
  void clear_has_vision_range_nighttime();
  void set_has_health();
  void clear_has_health();
  void set_has_health_max();
  void clear_has_health_max();
  void set_has_health_regen();
  void clear_has_health_regen();
  void set_has_mana();
  void clear_has_mana();
  void set_has_mana_max();
  void clear_has_mana_max();
  void set_has_mana_regen();
  void clear_has_mana_regen();
  void set_has_base_movement_speed();
  void clear_has_base_movement_speed();
  void set_has_current_movement_speed();
  void clear_has_current_movement_speed();
  void set_has_anim_activity();
  void clear_has_anim_activity();
  void set_has_anim_cycle();
  void clear_has_anim_cycle();
  void set_has_base_damage();
  void clear_has_base_damage();
  void set_has_base_damage_variance();
  void clear_has_base_damage_variance();
  void set_has_bonus_damage();
  void clear_has_bonus_damage();
  void set_has_attack_damage();
  void clear_has_attack_damage();
  void set_has_attack_range();
  void clear_has_attack_range();
  void set_has_attack_speed();
  void clear_has_attack_speed();
  void set_has_attack_anim_point();
  void clear_has_attack_anim_point();
  void set_has_attack_acquisition_range();
  void clear_has_attack_acquisition_range();
  void set_has_attack_projectile_speed();
  void clear_has_attack_projectile_speed();
  void set_has_attack_target_handle();
  void clear_has_attack_target_handle();
  void set_has_bounty_xp();
  void clear_has_bounty_xp();
  void set_has_bounty_gold_min();
  void clear_has_bounty_gold_min();
  void set_has_bounty_gold_max();
  void clear_has_bounty_gold_max();
  void set_has_is_channeling();
  void clear_has_is_channeling();
  void set_has_active_ability_handle();
  void clear_has_active_ability_handle();
  void set_has_is_attack_immune();
  void clear_has_is_attack_immune();
  void set_has_is_blind();
  void clear_has_is_blind();
  void set_has_is_block_disabled();
  void clear_has_is_block_disabled();
  void set_has_is_disarmed();
  void clear_has_is_disarmed();
  void set_has_is_dominated();
  void clear_has_is_dominated();
  void set_has_is_evade_disabled();
  void clear_has_is_evade_disabled();
  void set_has_is_hexed();
  void clear_has_is_hexed();
  void set_has_is_invisible();
  void clear_has_is_invisible();
  void set_has_is_invulnerable();
  void clear_has_is_invulnerable();
  void set_has_is_magic_immune();
  void clear_has_is_magic_immune();
  void set_has_is_muted();
  void clear_has_is_muted();
  void set_has_is_nightmared();
  void clear_has_is_nightmared();
  void set_has_is_rooted();
  void clear_has_is_rooted();
  void set_has_is_silenced();
  void clear_has_is_silenced();
  void set_has_is_specially_deniable();
  void clear_has_is_specially_deniable();
  void set_has_is_stunned();
  void clear_has_is_stunned();
  void set_has_is_unable_to_miss();
  void clear_has_is_unable_to_miss();
  void set_has_has_scepter();
  void clear_has_has_scepter();
  void set_has_action_type();
  void clear_has_action_type();
  void set_has_ability_target_handle();
  void clear_has_ability_target_handle();
  void set_has_primary_attribute();
  void clear_has_primary_attribute();
  void set_has_is_illusion();
  void clear_has_is_illusion();
  void set_has_respawn_time();
  void clear_has_respawn_time();
  void set_has_buyback_cost();
  void clear_has_buyback_cost();
  void set_has_buyback_cooldown();
  void clear_has_buyback_cooldown();
  void set_has_spell_amplification();
  void clear_has_spell_amplification();
  void set_has_armor();
  void clear_has_armor();
  void set_has_magic_resist();
  void clear_has_magic_resist();
  void set_has_evasion();
  void clear_has_evasion();
  void set_has_xp_needed_to_level();
  void clear_has_xp_needed_to_level();
  void set_has_ability_points();
  void clear_has_ability_points();
  void set_has_reliable_gold();
  void clear_has_reliable_gold();
  void set_has_unreliable_gold();
  void clear_has_unreliable_gold();
  void set_has_last_hits();
  void clear_has_last_hits();
  void set_has_denies();
  void clear_has_denies();
  void set_has_net_worth();
  void clear_has_net_worth();
  void set_has_strength();
  void clear_has_strength();
  void set_has_agility();
  void clear_has_agility();
  void set_has_intelligence();
  void clear_has_intelligence();
  void set_has_remaining_lifespan();
  void clear_has_remaining_lifespan();
  void set_has_flying_courier();
  void clear_has_flying_courier();
  void set_has_shrine_cooldown();
  void clear_has_shrine_cooldown();
  void set_has_is_shrine_healing();
  void clear_has_is_shrine_healing();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability > abilities_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability > items_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier > modifiers_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile > incoming_tracking_projectiles_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::proto::dota::CMsgBotWorldState_Vector* location_;
  ::google::protobuf::uint32 handle_;
  int unit_type_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int32 player_id_;
  ::google::protobuf::uint32 bounding_radius_;
  ::google::protobuf::uint32 facing_;
  ::google::protobuf::uint32 ground_height_;
  ::google::protobuf::uint32 vision_range_daytime_;
  ::google::protobuf::uint32 vision_range_nighttime_;
  ::google::protobuf::uint32 health_;
  ::google::protobuf::uint32 health_max_;
  float health_regen_;
  ::google::protobuf::uint32 mana_;
  ::google::protobuf::uint32 mana_max_;
  float mana_regen_;
  ::google::protobuf::uint32 base_movement_speed_;
  ::google::protobuf::uint32 current_movement_speed_;
  ::google::protobuf::int32 anim_activity_;
  float anim_cycle_;
  ::google::protobuf::uint32 base_damage_;
  ::google::protobuf::uint32 base_damage_variance_;
  ::google::protobuf::uint32 bonus_damage_;
  ::google::protobuf::uint32 attack_damage_;
  ::google::protobuf::uint32 attack_range_;
  float attack_speed_;
  float attack_anim_point_;
  ::google::protobuf::uint32 attack_acquisition_range_;
  ::google::protobuf::uint32 attack_projectile_speed_;
  ::google::protobuf::uint32 attack_target_handle_;
  bool is_alive_;
  bool is_channeling_;
  bool is_attack_immune_;
  bool is_blind_;
  ::google::protobuf::uint32 bounty_xp_;
  ::google::protobuf::uint32 bounty_gold_min_;
  ::google::protobuf::uint32 bounty_gold_max_;
  ::google::protobuf::uint32 active_ability_handle_;
  bool is_block_disabled_;
  bool is_disarmed_;
  bool is_dominated_;
  bool is_evade_disabled_;
  bool is_hexed_;
  bool is_invisible_;
  bool is_invulnerable_;
  bool is_magic_immune_;
  bool is_muted_;
  bool is_nightmared_;
  bool is_rooted_;
  bool is_silenced_;
  bool is_specially_deniable_;
  bool is_stunned_;
  bool is_unable_to_miss_;
  bool has_scepter_;
  ::google::protobuf::uint32 action_type_;
  ::google::protobuf::uint32 ability_target_handle_;
  ::google::protobuf::uint32 primary_attribute_;
  ::google::protobuf::uint32 respawn_time_;
  ::google::protobuf::uint32 buyback_cost_;
  float buyback_cooldown_;
  float spell_amplification_;
  float armor_;
  float magic_resist_;
  float evasion_;
  ::google::protobuf::uint32 xp_needed_to_level_;
  ::google::protobuf::uint32 ability_points_;
  ::google::protobuf::uint32 reliable_gold_;
  ::google::protobuf::uint32 unreliable_gold_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 denies_;
  ::google::protobuf::uint32 net_worth_;
  ::google::protobuf::uint32 strength_;
  ::google::protobuf::uint32 agility_;
  ::google::protobuf::uint32 intelligence_;
  float remaining_lifespan_;
  bool is_illusion_;
  bool flying_courier_;
  bool is_shrine_healing_;
  float shrine_cooldown_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgBotWorldState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgBotWorldState) */ {
 public:
  CMsgBotWorldState();
  virtual ~CMsgBotWorldState();

  CMsgBotWorldState(const CMsgBotWorldState& from);

  inline CMsgBotWorldState& operator=(const CMsgBotWorldState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgBotWorldState& default_instance();

  static inline const CMsgBotWorldState* internal_default_instance() {
    return reinterpret_cast<const CMsgBotWorldState*>(
               &_CMsgBotWorldState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CMsgBotWorldState* other);

  // implements Message ----------------------------------------------

  inline CMsgBotWorldState* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgBotWorldState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgBotWorldState& from);
  void MergeFrom(const CMsgBotWorldState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgBotWorldState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgBotWorldState_Vector Vector;
  typedef CMsgBotWorldState_Player Player;
  typedef CMsgBotWorldState_Ability Ability;
  typedef CMsgBotWorldState_DroppedItem DroppedItem;
  typedef CMsgBotWorldState_RuneInfo RuneInfo;
  typedef CMsgBotWorldState_TeleportInfo TeleportInfo;
  typedef CMsgBotWorldState_Modifier Modifier;
  typedef CMsgBotWorldState_LinearProjectile LinearProjectile;
  typedef CMsgBotWorldState_TrackingProjectile TrackingProjectile;
  typedef CMsgBotWorldState_AvoidanceZone AvoidanceZone;
  typedef CMsgBotWorldState_EventAbility EventAbility;
  typedef CMsgBotWorldState_EventDamage EventDamage;
  typedef CMsgBotWorldState_EventCourierKilled EventCourierKilled;
  typedef CMsgBotWorldState_EventRoshanKilled EventRoshanKilled;
  typedef CMsgBotWorldState_EventTree EventTree;
  typedef CMsgBotWorldState_Unit Unit;

  typedef CMsgBotWorldState_UnitType UnitType;
  static const UnitType INVALID =
    CMsgBotWorldState_UnitType_INVALID;
  static const UnitType HERO =
    CMsgBotWorldState_UnitType_HERO;
  static const UnitType CREEP_HERO =
    CMsgBotWorldState_UnitType_CREEP_HERO;
  static const UnitType LANE_CREEP =
    CMsgBotWorldState_UnitType_LANE_CREEP;
  static const UnitType JUNGLE_CREEP =
    CMsgBotWorldState_UnitType_JUNGLE_CREEP;
  static const UnitType ROSHAN =
    CMsgBotWorldState_UnitType_ROSHAN;
  static const UnitType TOWER =
    CMsgBotWorldState_UnitType_TOWER;
  static const UnitType BARRACKS =
    CMsgBotWorldState_UnitType_BARRACKS;
  static const UnitType SHRINE =
    CMsgBotWorldState_UnitType_SHRINE;
  static const UnitType FORT =
    CMsgBotWorldState_UnitType_FORT;
  static const UnitType BUILDING =
    CMsgBotWorldState_UnitType_BUILDING;
  static const UnitType COURIER =
    CMsgBotWorldState_UnitType_COURIER;
  static const UnitType WARD =
    CMsgBotWorldState_UnitType_WARD;
  static inline bool UnitType_IsValid(int value) {
    return CMsgBotWorldState_UnitType_IsValid(value);
  }
  static const UnitType UnitType_MIN =
    CMsgBotWorldState_UnitType_UnitType_MIN;
  static const UnitType UnitType_MAX =
    CMsgBotWorldState_UnitType_UnitType_MAX;
  static const int UnitType_ARRAYSIZE =
    CMsgBotWorldState_UnitType_UnitType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  UnitType_descriptor() {
    return CMsgBotWorldState_UnitType_descriptor();
  }
  static inline const ::std::string& UnitType_Name(UnitType value) {
    return CMsgBotWorldState_UnitType_Name(value);
  }
  static inline bool UnitType_Parse(const ::std::string& name,
      UnitType* value) {
    return CMsgBotWorldState_UnitType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgBotWorldState.Player players = 10;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 10;
  const ::proto::dota::CMsgBotWorldState_Player& players(int index) const;
  ::proto::dota::CMsgBotWorldState_Player* mutable_players(int index);
  ::proto::dota::CMsgBotWorldState_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >&
      players() const;

  // repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
  int units_size() const;
  void clear_units();
  static const int kUnitsFieldNumber = 11;
  const ::proto::dota::CMsgBotWorldState_Unit& units(int index) const;
  ::proto::dota::CMsgBotWorldState_Unit* mutable_units(int index);
  ::proto::dota::CMsgBotWorldState_Unit* add_units();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >*
      mutable_units();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >&
      units() const;

  // repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
  int dropped_items_size() const;
  void clear_dropped_items();
  static const int kDroppedItemsFieldNumber = 12;
  const ::proto::dota::CMsgBotWorldState_DroppedItem& dropped_items(int index) const;
  ::proto::dota::CMsgBotWorldState_DroppedItem* mutable_dropped_items(int index);
  ::proto::dota::CMsgBotWorldState_DroppedItem* add_dropped_items();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >*
      mutable_dropped_items();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >&
      dropped_items() const;

  // repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
  int rune_infos_size() const;
  void clear_rune_infos();
  static const int kRuneInfosFieldNumber = 13;
  const ::proto::dota::CMsgBotWorldState_RuneInfo& rune_infos(int index) const;
  ::proto::dota::CMsgBotWorldState_RuneInfo* mutable_rune_infos(int index);
  ::proto::dota::CMsgBotWorldState_RuneInfo* add_rune_infos();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >*
      mutable_rune_infos();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >&
      rune_infos() const;

  // repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  int incoming_teleports_size() const;
  void clear_incoming_teleports();
  static const int kIncomingTeleportsFieldNumber = 14;
  const ::proto::dota::CMsgBotWorldState_TeleportInfo& incoming_teleports(int index) const;
  ::proto::dota::CMsgBotWorldState_TeleportInfo* mutable_incoming_teleports(int index);
  ::proto::dota::CMsgBotWorldState_TeleportInfo* add_incoming_teleports();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >*
      mutable_incoming_teleports();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >&
      incoming_teleports() const;

  // repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
  int linear_projectiles_size() const;
  void clear_linear_projectiles();
  static const int kLinearProjectilesFieldNumber = 15;
  const ::proto::dota::CMsgBotWorldState_LinearProjectile& linear_projectiles(int index) const;
  ::proto::dota::CMsgBotWorldState_LinearProjectile* mutable_linear_projectiles(int index);
  ::proto::dota::CMsgBotWorldState_LinearProjectile* add_linear_projectiles();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >*
      mutable_linear_projectiles();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >&
      linear_projectiles() const;

  // repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  int avoidance_zones_size() const;
  void clear_avoidance_zones();
  static const int kAvoidanceZonesFieldNumber = 16;
  const ::proto::dota::CMsgBotWorldState_AvoidanceZone& avoidance_zones(int index) const;
  ::proto::dota::CMsgBotWorldState_AvoidanceZone* mutable_avoidance_zones(int index);
  ::proto::dota::CMsgBotWorldState_AvoidanceZone* add_avoidance_zones();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >*
      mutable_avoidance_zones();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >&
      avoidance_zones() const;

  // repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
  int ability_events_size() const;
  void clear_ability_events();
  static const int kAbilityEventsFieldNumber = 20;
  const ::proto::dota::CMsgBotWorldState_EventAbility& ability_events(int index) const;
  ::proto::dota::CMsgBotWorldState_EventAbility* mutable_ability_events(int index);
  ::proto::dota::CMsgBotWorldState_EventAbility* add_ability_events();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >*
      mutable_ability_events();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >&
      ability_events() const;

  // repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
  int damage_events_size() const;
  void clear_damage_events();
  static const int kDamageEventsFieldNumber = 21;
  const ::proto::dota::CMsgBotWorldState_EventDamage& damage_events(int index) const;
  ::proto::dota::CMsgBotWorldState_EventDamage* mutable_damage_events(int index);
  ::proto::dota::CMsgBotWorldState_EventDamage* add_damage_events();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >*
      mutable_damage_events();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >&
      damage_events() const;

  // repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  int courier_killed_events_size() const;
  void clear_courier_killed_events();
  static const int kCourierKilledEventsFieldNumber = 22;
  const ::proto::dota::CMsgBotWorldState_EventCourierKilled& courier_killed_events(int index) const;
  ::proto::dota::CMsgBotWorldState_EventCourierKilled* mutable_courier_killed_events(int index);
  ::proto::dota::CMsgBotWorldState_EventCourierKilled* add_courier_killed_events();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >*
      mutable_courier_killed_events();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >&
      courier_killed_events() const;

  // repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  int roshan_killed_events_size() const;
  void clear_roshan_killed_events();
  static const int kRoshanKilledEventsFieldNumber = 23;
  const ::proto::dota::CMsgBotWorldState_EventRoshanKilled& roshan_killed_events(int index) const;
  ::proto::dota::CMsgBotWorldState_EventRoshanKilled* mutable_roshan_killed_events(int index);
  ::proto::dota::CMsgBotWorldState_EventRoshanKilled* add_roshan_killed_events();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >*
      mutable_roshan_killed_events();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >&
      roshan_killed_events() const;

  // repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
  int tree_events_size() const;
  void clear_tree_events();
  static const int kTreeEventsFieldNumber = 24;
  const ::proto::dota::CMsgBotWorldState_EventTree& tree_events(int index) const;
  ::proto::dota::CMsgBotWorldState_EventTree* mutable_tree_events(int index);
  ::proto::dota::CMsgBotWorldState_EventTree* add_tree_events();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >*
      mutable_tree_events();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >&
      tree_events() const;

  // optional uint32 team_id = 1;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 1;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // optional float game_time = 2;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  float game_time() const;
  void set_game_time(float value);

  // optional float dota_time = 3;
  bool has_dota_time() const;
  void clear_dota_time();
  static const int kDotaTimeFieldNumber = 3;
  float dota_time() const;
  void set_dota_time(float value);

  // optional uint32 game_state = 4;
  bool has_game_state() const;
  void clear_game_state();
  static const int kGameStateFieldNumber = 4;
  ::google::protobuf::uint32 game_state() const;
  void set_game_state(::google::protobuf::uint32 value);

  // optional uint32 hero_pick_state = 5;
  bool has_hero_pick_state() const;
  void clear_hero_pick_state();
  static const int kHeroPickStateFieldNumber = 5;
  ::google::protobuf::uint32 hero_pick_state() const;
  void set_hero_pick_state(::google::protobuf::uint32 value);

  // optional float time_of_day = 6;
  bool has_time_of_day() const;
  void clear_time_of_day();
  static const int kTimeOfDayFieldNumber = 6;
  float time_of_day() const;
  void set_time_of_day(float value);

  // optional float glyph_cooldown = 7;
  bool has_glyph_cooldown() const;
  void clear_glyph_cooldown();
  static const int kGlyphCooldownFieldNumber = 7;
  float glyph_cooldown() const;
  void set_glyph_cooldown(float value);

  // optional uint32 glyph_cooldown_enemy = 8;
  bool has_glyph_cooldown_enemy() const;
  void clear_glyph_cooldown_enemy();
  static const int kGlyphCooldownEnemyFieldNumber = 8;
  ::google::protobuf::uint32 glyph_cooldown_enemy() const;
  void set_glyph_cooldown_enemy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgBotWorldState)
 private:
  void set_has_team_id();
  void clear_has_team_id();
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_dota_time();
  void clear_has_dota_time();
  void set_has_game_state();
  void clear_has_game_state();
  void set_has_hero_pick_state();
  void clear_has_hero_pick_state();
  void set_has_time_of_day();
  void clear_has_time_of_day();
  void set_has_glyph_cooldown();
  void clear_has_glyph_cooldown();
  void set_has_glyph_cooldown_enemy();
  void clear_has_glyph_cooldown_enemy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit > units_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem > dropped_items_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo > rune_infos_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo > incoming_teleports_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile > linear_projectiles_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone > avoidance_zones_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility > ability_events_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage > damage_events_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled > courier_killed_events_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled > roshan_killed_events_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree > tree_events_;
  ::google::protobuf::uint32 team_id_;
  float game_time_;
  float dota_time_;
  ::google::protobuf::uint32 game_state_;
  ::google::protobuf::uint32 hero_pick_state_;
  float time_of_day_;
  float glyph_cooldown_;
  ::google::protobuf::uint32 glyph_cooldown_enemy_;
  friend struct protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Vector

// required float x = 1;
inline bool CMsgBotWorldState_Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float CMsgBotWorldState_Vector::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.x)
  return x_;
}
inline void CMsgBotWorldState_Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.x)
}

// required float y = 2;
inline bool CMsgBotWorldState_Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float CMsgBotWorldState_Vector::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.y)
  return y_;
}
inline void CMsgBotWorldState_Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.y)
}

// required float z = 3;
inline bool CMsgBotWorldState_Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float CMsgBotWorldState_Vector::z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.z)
  return z_;
}
inline void CMsgBotWorldState_Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.z)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Player

// optional int32 player_id = 1;
inline bool CMsgBotWorldState_Player::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_Player::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Player::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_Player::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.player_id)
  return player_id_;
}
inline void CMsgBotWorldState_Player::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.player_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgBotWorldState_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.hero_id)
  return hero_id_;
}
inline void CMsgBotWorldState_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.hero_id)
}

// optional bool is_alive = 3;
inline bool CMsgBotWorldState_Player::has_is_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_is_alive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_Player::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Player::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool CMsgBotWorldState_Player::is_alive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.is_alive)
  return is_alive_;
}
inline void CMsgBotWorldState_Player::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.is_alive)
}

// optional float respawn_time = 4;
inline bool CMsgBotWorldState_Player::has_respawn_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_respawn_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_Player::clear_has_respawn_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Player::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
inline float CMsgBotWorldState_Player::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.respawn_time)
  return respawn_time_;
}
inline void CMsgBotWorldState_Player::set_respawn_time(float value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.respawn_time)
}

// optional uint32 kills = 5;
inline bool CMsgBotWorldState_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.kills)
  return kills_;
}
inline void CMsgBotWorldState_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.kills)
}

// optional uint32 deaths = 6;
inline bool CMsgBotWorldState_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.deaths)
  return deaths_;
}
inline void CMsgBotWorldState_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.deaths)
}

// optional uint32 assists = 7;
inline bool CMsgBotWorldState_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.assists)
  return assists_;
}
inline void CMsgBotWorldState_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.assists)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Ability

// optional uint32 handle = 1;
inline bool CMsgBotWorldState_Ability::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_Ability::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Ability::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.handle)
  return handle_;
}
inline void CMsgBotWorldState_Ability::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.handle)
}

// optional uint32 ability_id = 2;
inline bool CMsgBotWorldState_Ability::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_Ability::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Ability::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_Ability::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.ability_id)
}

// optional uint32 slot = 3;
inline bool CMsgBotWorldState_Ability::has_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_slot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_Ability::clear_has_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Ability::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.slot)
  return slot_;
}
inline void CMsgBotWorldState_Ability::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.slot)
}

// optional uint32 caster_handle = 5;
inline bool CMsgBotWorldState_Ability::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_Ability::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Ability::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.caster_handle)
  return caster_handle_;
}
inline void CMsgBotWorldState_Ability::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.caster_handle)
}

// optional uint32 level = 6;
inline bool CMsgBotWorldState_Ability::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_Ability::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Ability::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.level)
  return level_;
}
inline void CMsgBotWorldState_Ability::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.level)
}

// optional uint32 cast_range = 10;
inline bool CMsgBotWorldState_Ability::has_cast_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_cast_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_Ability::clear_has_cast_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_Ability::clear_cast_range() {
  cast_range_ = 0u;
  clear_has_cast_range();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::cast_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.cast_range)
  return cast_range_;
}
inline void CMsgBotWorldState_Ability::set_cast_range(::google::protobuf::uint32 value) {
  set_has_cast_range();
  cast_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.cast_range)
}

// optional float channel_time = 11;
inline bool CMsgBotWorldState_Ability::has_channel_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_channel_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState_Ability::clear_has_channel_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState_Ability::clear_channel_time() {
  channel_time_ = 0;
  clear_has_channel_time();
}
inline float CMsgBotWorldState_Ability::channel_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.channel_time)
  return channel_time_;
}
inline void CMsgBotWorldState_Ability::set_channel_time(float value) {
  set_has_channel_time();
  channel_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.channel_time)
}

// optional float cooldown_remaining = 12;
inline bool CMsgBotWorldState_Ability::has_cooldown_remaining() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_cooldown_remaining() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBotWorldState_Ability::clear_has_cooldown_remaining() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBotWorldState_Ability::clear_cooldown_remaining() {
  cooldown_remaining_ = 0;
  clear_has_cooldown_remaining();
}
inline float CMsgBotWorldState_Ability::cooldown_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.cooldown_remaining)
  return cooldown_remaining_;
}
inline void CMsgBotWorldState_Ability::set_cooldown_remaining(float value) {
  set_has_cooldown_remaining();
  cooldown_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.cooldown_remaining)
}

// optional bool is_activated = 20;
inline bool CMsgBotWorldState_Ability::has_is_activated() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_activated() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_activated() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgBotWorldState_Ability::clear_is_activated() {
  is_activated_ = false;
  clear_has_is_activated();
}
inline bool CMsgBotWorldState_Ability::is_activated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_activated)
  return is_activated_;
}
inline void CMsgBotWorldState_Ability::set_is_activated(bool value) {
  set_has_is_activated();
  is_activated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_activated)
}

// optional bool is_toggled = 21;
inline bool CMsgBotWorldState_Ability::has_is_toggled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_toggled() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_toggled() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgBotWorldState_Ability::clear_is_toggled() {
  is_toggled_ = false;
  clear_has_is_toggled();
}
inline bool CMsgBotWorldState_Ability::is_toggled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_toggled)
  return is_toggled_;
}
inline void CMsgBotWorldState_Ability::set_is_toggled(bool value) {
  set_has_is_toggled();
  is_toggled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_toggled)
}

// optional bool is_in_ability_phase = 22;
inline bool CMsgBotWorldState_Ability::has_is_in_ability_phase() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_in_ability_phase() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_in_ability_phase() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgBotWorldState_Ability::clear_is_in_ability_phase() {
  is_in_ability_phase_ = false;
  clear_has_is_in_ability_phase();
}
inline bool CMsgBotWorldState_Ability::is_in_ability_phase() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_in_ability_phase)
  return is_in_ability_phase_;
}
inline void CMsgBotWorldState_Ability::set_is_in_ability_phase(bool value) {
  set_has_is_in_ability_phase();
  is_in_ability_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_in_ability_phase)
}

// optional bool is_channeling = 23;
inline bool CMsgBotWorldState_Ability::has_is_channeling() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_channeling() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_channeling() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgBotWorldState_Ability::clear_is_channeling() {
  is_channeling_ = false;
  clear_has_is_channeling();
}
inline bool CMsgBotWorldState_Ability::is_channeling() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_channeling)
  return is_channeling_;
}
inline void CMsgBotWorldState_Ability::set_is_channeling(bool value) {
  set_has_is_channeling();
  is_channeling_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_channeling)
}

// optional bool is_stolen = 24;
inline bool CMsgBotWorldState_Ability::has_is_stolen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_stolen() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_stolen() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgBotWorldState_Ability::clear_is_stolen() {
  is_stolen_ = false;
  clear_has_is_stolen();
}
inline bool CMsgBotWorldState_Ability::is_stolen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_stolen)
  return is_stolen_;
}
inline void CMsgBotWorldState_Ability::set_is_stolen(bool value) {
  set_has_is_stolen();
  is_stolen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_stolen)
}

// optional uint32 charges = 30;
inline bool CMsgBotWorldState_Ability::has_charges() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_charges() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgBotWorldState_Ability::clear_has_charges() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgBotWorldState_Ability::clear_charges() {
  charges_ = 0u;
  clear_has_charges();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::charges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.charges)
  return charges_;
}
inline void CMsgBotWorldState_Ability::set_charges(::google::protobuf::uint32 value) {
  set_has_charges();
  charges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.charges)
}

// optional uint32 secondary_charges = 31;
inline bool CMsgBotWorldState_Ability::has_secondary_charges() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_secondary_charges() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgBotWorldState_Ability::clear_has_secondary_charges() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgBotWorldState_Ability::clear_secondary_charges() {
  secondary_charges_ = 0u;
  clear_has_secondary_charges();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::secondary_charges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.secondary_charges)
  return secondary_charges_;
}
inline void CMsgBotWorldState_Ability::set_secondary_charges(::google::protobuf::uint32 value) {
  set_has_secondary_charges();
  secondary_charges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.secondary_charges)
}

// optional bool is_combined_locked = 40;
inline bool CMsgBotWorldState_Ability::has_is_combined_locked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_is_combined_locked() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgBotWorldState_Ability::clear_has_is_combined_locked() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgBotWorldState_Ability::clear_is_combined_locked() {
  is_combined_locked_ = false;
  clear_has_is_combined_locked();
}
inline bool CMsgBotWorldState_Ability::is_combined_locked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_combined_locked)
  return is_combined_locked_;
}
inline void CMsgBotWorldState_Ability::set_is_combined_locked(bool value) {
  set_has_is_combined_locked();
  is_combined_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_combined_locked)
}

// optional uint32 power_treads_stat = 50;
inline bool CMsgBotWorldState_Ability::has_power_treads_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgBotWorldState_Ability::set_has_power_treads_stat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgBotWorldState_Ability::clear_has_power_treads_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgBotWorldState_Ability::clear_power_treads_stat() {
  power_treads_stat_ = 0u;
  clear_has_power_treads_stat();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Ability::power_treads_stat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.power_treads_stat)
  return power_treads_stat_;
}
inline void CMsgBotWorldState_Ability::set_power_treads_stat(::google::protobuf::uint32 value) {
  set_has_power_treads_stat();
  power_treads_stat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.power_treads_stat)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_DroppedItem

// optional uint32 item_id = 1;
inline bool CMsgBotWorldState_DroppedItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_DroppedItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_DroppedItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_DroppedItem::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_DroppedItem::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.DroppedItem.item_id)
  return item_id_;
}
inline void CMsgBotWorldState_DroppedItem::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.DroppedItem.item_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_DroppedItem::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_DroppedItem::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_DroppedItem::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_DroppedItem::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_DroppedItem::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.DroppedItem.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.DroppedItem.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.DroppedItem.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_DroppedItem::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.DroppedItem.location)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_RuneInfo

// optional int32 type = 1;
inline bool CMsgBotWorldState_RuneInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_RuneInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_RuneInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_RuneInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CMsgBotWorldState_RuneInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.type)
  return type_;
}
inline void CMsgBotWorldState_RuneInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.type)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_RuneInfo::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_RuneInfo::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_RuneInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_RuneInfo::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_RuneInfo::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.RuneInfo.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.RuneInfo.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_RuneInfo::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.RuneInfo.location)
}

// optional uint32 status = 3;
inline bool CMsgBotWorldState_RuneInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_RuneInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_RuneInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_RuneInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_RuneInfo::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.status)
  return status_;
}
inline void CMsgBotWorldState_RuneInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.status)
}

// optional float time_since_seen = 4;
inline bool CMsgBotWorldState_RuneInfo::has_time_since_seen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_RuneInfo::set_has_time_since_seen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_RuneInfo::clear_has_time_since_seen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_RuneInfo::clear_time_since_seen() {
  time_since_seen_ = 0;
  clear_has_time_since_seen();
}
inline float CMsgBotWorldState_RuneInfo::time_since_seen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.time_since_seen)
  return time_since_seen_;
}
inline void CMsgBotWorldState_RuneInfo::set_time_since_seen(float value) {
  set_has_time_since_seen();
  time_since_seen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.time_since_seen)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_TeleportInfo

// optional int32 player_id = 1;
inline bool CMsgBotWorldState_TeleportInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_TeleportInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_TeleportInfo::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.player_id)
  return player_id_;
}
inline void CMsgBotWorldState_TeleportInfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TeleportInfo.player_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
inline bool CMsgBotWorldState_TeleportInfo::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_TeleportInfo::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_TeleportInfo::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_TeleportInfo::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.TeleportInfo.location)
}

// optional float time_remaning = 3;
inline bool CMsgBotWorldState_TeleportInfo::has_time_remaning() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_TeleportInfo::set_has_time_remaning() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_has_time_remaning() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_TeleportInfo::clear_time_remaning() {
  time_remaning_ = 0;
  clear_has_time_remaning();
}
inline float CMsgBotWorldState_TeleportInfo::time_remaning() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.time_remaning)
  return time_remaning_;
}
inline void CMsgBotWorldState_TeleportInfo::set_time_remaning(float value) {
  set_has_time_remaning();
  time_remaning_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TeleportInfo.time_remaning)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Modifier

// optional string name = 1;
inline bool CMsgBotWorldState_Modifier::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Modifier::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_Modifier::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Modifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgBotWorldState_Modifier::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.name)
  return name_.GetNoArena();
}
inline void CMsgBotWorldState_Modifier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.name)
}
#if LANG_CXX11
inline void CMsgBotWorldState_Modifier::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgBotWorldState.Modifier.name)
}
#endif
inline void CMsgBotWorldState_Modifier::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgBotWorldState.Modifier.name)
}
inline void CMsgBotWorldState_Modifier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgBotWorldState.Modifier.name)
}
inline ::std::string* CMsgBotWorldState_Modifier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Modifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgBotWorldState_Modifier::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Modifier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgBotWorldState_Modifier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Modifier.name)
}

// optional uint32 stack_count = 2;
inline bool CMsgBotWorldState_Modifier::has_stack_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Modifier::set_has_stack_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_Modifier::clear_has_stack_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Modifier::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Modifier::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.stack_count)
  return stack_count_;
}
inline void CMsgBotWorldState_Modifier::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.stack_count)
}

// optional uint32 ability_handle = 3;
inline bool CMsgBotWorldState_Modifier::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Modifier::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_Modifier::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Modifier::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Modifier::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.ability_handle)
  return ability_handle_;
}
inline void CMsgBotWorldState_Modifier::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.ability_handle)
}

// optional uint32 ability_id = 4;
inline bool CMsgBotWorldState_Modifier::has_ability_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Modifier::set_has_ability_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_Modifier::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Modifier::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Modifier::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_Modifier::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.ability_id)
}

// optional float remaining_duration = 5;
inline bool CMsgBotWorldState_Modifier::has_remaining_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Modifier::set_has_remaining_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_Modifier::clear_has_remaining_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Modifier::clear_remaining_duration() {
  remaining_duration_ = 0;
  clear_has_remaining_duration();
}
inline float CMsgBotWorldState_Modifier::remaining_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.remaining_duration)
  return remaining_duration_;
}
inline void CMsgBotWorldState_Modifier::set_remaining_duration(float value) {
  set_has_remaining_duration();
  remaining_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.remaining_duration)
}

// repeated uint32 auxiliary_units_handles = 6;
inline int CMsgBotWorldState_Modifier::auxiliary_units_handles_size() const {
  return auxiliary_units_handles_.size();
}
inline void CMsgBotWorldState_Modifier::clear_auxiliary_units_handles() {
  auxiliary_units_handles_.Clear();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Modifier::auxiliary_units_handles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return auxiliary_units_handles_.Get(index);
}
inline void CMsgBotWorldState_Modifier::set_auxiliary_units_handles(int index, ::google::protobuf::uint32 value) {
  auxiliary_units_handles_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
inline void CMsgBotWorldState_Modifier::add_auxiliary_units_handles(::google::protobuf::uint32 value) {
  auxiliary_units_handles_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgBotWorldState_Modifier::auxiliary_units_handles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return auxiliary_units_handles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgBotWorldState_Modifier::mutable_auxiliary_units_handles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return &auxiliary_units_handles_;
}

// -------------------------------------------------------------------

// CMsgBotWorldState_LinearProjectile

// optional uint32 handle = 1;
inline bool CMsgBotWorldState_LinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.handle)
  return handle_;
}
inline void CMsgBotWorldState_LinearProjectile::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.handle)
}

// optional uint32 caster_handle = 2;
inline bool CMsgBotWorldState_LinearProjectile::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.caster_handle)
  return caster_handle_;
}
inline void CMsgBotWorldState_LinearProjectile::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.caster_handle)
}

// optional int32 caster_player_id = 3;
inline bool CMsgBotWorldState_LinearProjectile::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_LinearProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.caster_player_id)
  return caster_player_id_;
}
inline void CMsgBotWorldState_LinearProjectile::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.caster_player_id)
}

// optional uint32 ability_handle = 4;
inline bool CMsgBotWorldState_LinearProjectile::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.ability_handle)
  return ability_handle_;
}
inline void CMsgBotWorldState_LinearProjectile::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.ability_handle)
}

// optional uint32 ability_id = 5;
inline bool CMsgBotWorldState_LinearProjectile::has_ability_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_ability_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_LinearProjectile::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.ability_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 6;
inline bool CMsgBotWorldState_LinearProjectile::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_LinearProjectile::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.LinearProjectile.location)
}

// optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
inline bool CMsgBotWorldState_LinearProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_velocity() {
  if (velocity_ != NULL) velocity_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_velocity();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  return velocity_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_velocity() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  clear_has_velocity();
  ::proto::dota::CMsgBotWorldState_Vector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_LinearProjectile::set_allocated_velocity(::proto::dota::CMsgBotWorldState_Vector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
}

// optional uint32 radius = 8;
inline bool CMsgBotWorldState_LinearProjectile::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_LinearProjectile::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBotWorldState_LinearProjectile::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.radius)
  return radius_;
}
inline void CMsgBotWorldState_LinearProjectile::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.radius)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_TrackingProjectile

// optional uint32 caster_handle = 1;
inline bool CMsgBotWorldState_TrackingProjectile::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_handle)
  return caster_handle_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_handle)
}

// optional int32 caster_player_id = 2;
inline bool CMsgBotWorldState_TrackingProjectile::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_TrackingProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_player_id)
  return caster_player_id_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_player_id)
}

// optional uint32 ability_handle = 3;
inline bool CMsgBotWorldState_TrackingProjectile::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_handle)
  return ability_handle_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_handle)
}

// optional uint32 ability_id = 4;
inline bool CMsgBotWorldState_TrackingProjectile::has_ability_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_ability_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 5;
inline bool CMsgBotWorldState_TrackingProjectile::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_TrackingProjectile::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_TrackingProjectile::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
}

// optional uint32 velocity = 6;
inline bool CMsgBotWorldState_TrackingProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_velocity() {
  velocity_ = 0u;
  clear_has_velocity();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.velocity)
  return velocity_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_velocity(::google::protobuf::uint32 value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.velocity)
}

// optional bool is_dodgeable = 7;
inline bool CMsgBotWorldState_TrackingProjectile::has_is_dodgeable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_is_dodgeable() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_is_dodgeable() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_is_dodgeable() {
  is_dodgeable_ = false;
  clear_has_is_dodgeable();
}
inline bool CMsgBotWorldState_TrackingProjectile::is_dodgeable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.is_dodgeable)
  return is_dodgeable_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_is_dodgeable(bool value) {
  set_has_is_dodgeable();
  is_dodgeable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.is_dodgeable)
}

// optional bool is_attack = 8;
inline bool CMsgBotWorldState_TrackingProjectile::has_is_attack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_TrackingProjectile::set_has_is_attack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_has_is_attack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBotWorldState_TrackingProjectile::clear_is_attack() {
  is_attack_ = false;
  clear_has_is_attack();
}
inline bool CMsgBotWorldState_TrackingProjectile::is_attack() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.is_attack)
  return is_attack_;
}
inline void CMsgBotWorldState_TrackingProjectile::set_is_attack(bool value) {
  set_has_is_attack();
  is_attack_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.is_attack)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_AvoidanceZone

// optional .proto.dota.CMsgBotWorldState.Vector location = 1;
inline bool CMsgBotWorldState_AvoidanceZone::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_AvoidanceZone::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_AvoidanceZone::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
}

// optional uint32 caster_handle = 2;
inline bool CMsgBotWorldState_AvoidanceZone::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_handle)
  return caster_handle_;
}
inline void CMsgBotWorldState_AvoidanceZone::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_handle)
}

// optional int32 caster_player_id = 3;
inline bool CMsgBotWorldState_AvoidanceZone::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_AvoidanceZone::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_player_id)
  return caster_player_id_;
}
inline void CMsgBotWorldState_AvoidanceZone::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_player_id)
}

// optional uint32 ability_handle = 4;
inline bool CMsgBotWorldState_AvoidanceZone::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_handle)
  return ability_handle_;
}
inline void CMsgBotWorldState_AvoidanceZone::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_handle)
}

// optional uint32 ability_id = 5;
inline bool CMsgBotWorldState_AvoidanceZone::has_ability_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_ability_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_AvoidanceZone::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_id)
}

// optional uint32 radius = 6;
inline bool CMsgBotWorldState_AvoidanceZone::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_AvoidanceZone::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_AvoidanceZone::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.radius)
  return radius_;
}
inline void CMsgBotWorldState_AvoidanceZone::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.radius)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventAbility

// optional uint32 ability_id = 1;
inline bool CMsgBotWorldState_EventAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_EventAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_EventAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_EventAbility::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_EventAbility::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.ability_id)
}

// optional int32 player_id = 2;
inline bool CMsgBotWorldState_EventAbility::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_EventAbility::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_EventAbility::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_EventAbility::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_EventAbility::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.player_id)
  return player_id_;
}
inline void CMsgBotWorldState_EventAbility::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.player_id)
}

// optional uint32 unit_handle = 3;
inline bool CMsgBotWorldState_EventAbility::has_unit_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_EventAbility::set_has_unit_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_EventAbility::clear_has_unit_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_EventAbility::clear_unit_handle() {
  unit_handle_ = 0u;
  clear_has_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventAbility::unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.unit_handle)
  return unit_handle_;
}
inline void CMsgBotWorldState_EventAbility::set_unit_handle(::google::protobuf::uint32 value) {
  set_has_unit_handle();
  unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.unit_handle)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 4;
inline bool CMsgBotWorldState_EventAbility::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_EventAbility::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_EventAbility::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_EventAbility::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_EventAbility::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.EventAbility.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.EventAbility.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_EventAbility::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.EventAbility.location)
}

// optional bool is_channel_start = 5;
inline bool CMsgBotWorldState_EventAbility::has_is_channel_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_EventAbility::set_has_is_channel_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_EventAbility::clear_has_is_channel_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_EventAbility::clear_is_channel_start() {
  is_channel_start_ = false;
  clear_has_is_channel_start();
}
inline bool CMsgBotWorldState_EventAbility::is_channel_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.is_channel_start)
  return is_channel_start_;
}
inline void CMsgBotWorldState_EventAbility::set_is_channel_start(bool value) {
  set_has_is_channel_start();
  is_channel_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.is_channel_start)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventDamage

// optional uint32 damage = 1;
inline bool CMsgBotWorldState_EventDamage::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_EventDamage::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventDamage::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.damage)
  return damage_;
}
inline void CMsgBotWorldState_EventDamage::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.damage)
}

// optional int32 victim_player_id = 2;
inline bool CMsgBotWorldState_EventDamage::has_victim_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_victim_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_victim_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_EventDamage::clear_victim_player_id() {
  victim_player_id_ = 0;
  clear_has_victim_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_EventDamage::victim_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.victim_player_id)
  return victim_player_id_;
}
inline void CMsgBotWorldState_EventDamage::set_victim_player_id(::google::protobuf::int32 value) {
  set_has_victim_player_id();
  victim_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.victim_player_id)
}

// optional uint32 victim_unit_handle = 3;
inline bool CMsgBotWorldState_EventDamage::has_victim_unit_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_victim_unit_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_victim_unit_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_EventDamage::clear_victim_unit_handle() {
  victim_unit_handle_ = 0u;
  clear_has_victim_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventDamage::victim_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.victim_unit_handle)
  return victim_unit_handle_;
}
inline void CMsgBotWorldState_EventDamage::set_victim_unit_handle(::google::protobuf::uint32 value) {
  set_has_victim_unit_handle();
  victim_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.victim_unit_handle)
}

// optional int32 attacker_player_id = 4;
inline bool CMsgBotWorldState_EventDamage::has_attacker_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_attacker_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_attacker_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_EventDamage::clear_attacker_player_id() {
  attacker_player_id_ = 0;
  clear_has_attacker_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_EventDamage::attacker_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.attacker_player_id)
  return attacker_player_id_;
}
inline void CMsgBotWorldState_EventDamage::set_attacker_player_id(::google::protobuf::int32 value) {
  set_has_attacker_player_id();
  attacker_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.attacker_player_id)
}

// optional uint32 attacker_unit_handle = 5;
inline bool CMsgBotWorldState_EventDamage::has_attacker_unit_handle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_attacker_unit_handle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_attacker_unit_handle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_EventDamage::clear_attacker_unit_handle() {
  attacker_unit_handle_ = 0u;
  clear_has_attacker_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventDamage::attacker_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.attacker_unit_handle)
  return attacker_unit_handle_;
}
inline void CMsgBotWorldState_EventDamage::set_attacker_unit_handle(::google::protobuf::uint32 value) {
  set_has_attacker_unit_handle();
  attacker_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.attacker_unit_handle)
}

// optional uint32 ability_id = 6;
inline bool CMsgBotWorldState_EventDamage::has_ability_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_EventDamage::set_has_ability_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_EventDamage::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_EventDamage::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventDamage::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.ability_id)
  return ability_id_;
}
inline void CMsgBotWorldState_EventDamage::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.ability_id)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventCourierKilled

// optional uint32 team_id = 1;
inline bool CMsgBotWorldState_EventCourierKilled::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_EventCourierKilled::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.team_id)
  return team_id_;
}
inline void CMsgBotWorldState_EventCourierKilled::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.team_id)
}

// optional uint32 courier_unit_handle = 2;
inline bool CMsgBotWorldState_EventCourierKilled::has_courier_unit_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_EventCourierKilled::set_has_courier_unit_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_has_courier_unit_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_courier_unit_handle() {
  courier_unit_handle_ = 0u;
  clear_has_courier_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::courier_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
  return courier_unit_handle_;
}
inline void CMsgBotWorldState_EventCourierKilled::set_courier_unit_handle(::google::protobuf::uint32 value) {
  set_has_courier_unit_handle();
  courier_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
}

// optional int32 killer_player_id = 3;
inline bool CMsgBotWorldState_EventCourierKilled::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_EventCourierKilled::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_killer_player_id() {
  killer_player_id_ = 0;
  clear_has_killer_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_EventCourierKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_player_id)
  return killer_player_id_;
}
inline void CMsgBotWorldState_EventCourierKilled::set_killer_player_id(::google::protobuf::int32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 4;
inline bool CMsgBotWorldState_EventCourierKilled::has_killer_unit_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_EventCourierKilled::set_has_killer_unit_handle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_has_killer_unit_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_EventCourierKilled::clear_killer_unit_handle() {
  killer_unit_handle_ = 0u;
  clear_has_killer_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
  return killer_unit_handle_;
}
inline void CMsgBotWorldState_EventCourierKilled::set_killer_unit_handle(::google::protobuf::uint32 value) {
  set_has_killer_unit_handle();
  killer_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventRoshanKilled

// optional int32 killer_player_id = 1;
inline bool CMsgBotWorldState_EventRoshanKilled::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_killer_player_id() {
  killer_player_id_ = 0;
  clear_has_killer_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_EventRoshanKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_player_id)
  return killer_player_id_;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_killer_player_id(::google::protobuf::int32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 2;
inline bool CMsgBotWorldState_EventRoshanKilled::has_killer_unit_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_has_killer_unit_handle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_has_killer_unit_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_EventRoshanKilled::clear_killer_unit_handle() {
  killer_unit_handle_ = 0u;
  clear_has_killer_unit_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventRoshanKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
  return killer_unit_handle_;
}
inline void CMsgBotWorldState_EventRoshanKilled::set_killer_unit_handle(::google::protobuf::uint32 value) {
  set_has_killer_unit_handle();
  killer_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_EventTree

// optional uint32 tree_id = 1;
inline bool CMsgBotWorldState_EventTree::has_tree_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_EventTree::set_has_tree_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_EventTree::clear_has_tree_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_EventTree::clear_tree_id() {
  tree_id_ = 0u;
  clear_has_tree_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_EventTree::tree_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.tree_id)
  return tree_id_;
}
inline void CMsgBotWorldState_EventTree::set_tree_id(::google::protobuf::uint32 value) {
  set_has_tree_id();
  tree_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.tree_id)
}

// optional bool destroyed = 2;
inline bool CMsgBotWorldState_EventTree::has_destroyed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_EventTree::set_has_destroyed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_EventTree::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_EventTree::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
inline bool CMsgBotWorldState_EventTree::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.destroyed)
  return destroyed_;
}
inline void CMsgBotWorldState_EventTree::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.destroyed)
}

// optional bool respawned = 3;
inline bool CMsgBotWorldState_EventTree::has_respawned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_EventTree::set_has_respawned() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_EventTree::clear_has_respawned() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_EventTree::clear_respawned() {
  respawned_ = false;
  clear_has_respawned();
}
inline bool CMsgBotWorldState_EventTree::respawned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.respawned)
  return respawned_;
}
inline void CMsgBotWorldState_EventTree::set_respawned(bool value) {
  set_has_respawned();
  respawned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.respawned)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 4;
inline bool CMsgBotWorldState_EventTree::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_EventTree::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_EventTree::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_EventTree::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_EventTree::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.EventTree.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.EventTree.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_EventTree::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.EventTree.location)
}

// optional bool delayed = 5;
inline bool CMsgBotWorldState_EventTree::has_delayed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_EventTree::set_has_delayed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_EventTree::clear_has_delayed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_EventTree::clear_delayed() {
  delayed_ = false;
  clear_has_delayed();
}
inline bool CMsgBotWorldState_EventTree::delayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.delayed)
  return delayed_;
}
inline void CMsgBotWorldState_EventTree::set_delayed(bool value) {
  set_has_delayed();
  delayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.delayed)
}

// -------------------------------------------------------------------

// CMsgBotWorldState_Unit

// optional uint32 handle = 1;
inline bool CMsgBotWorldState_Unit::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.handle)
  return handle_;
}
inline void CMsgBotWorldState_Unit::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.handle)
}

// optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
inline bool CMsgBotWorldState_Unit::has_unit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_unit_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
inline ::proto::dota::CMsgBotWorldState_UnitType CMsgBotWorldState_Unit::unit_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.unit_type)
  return static_cast< ::proto::dota::CMsgBotWorldState_UnitType >(unit_type_);
}
inline void CMsgBotWorldState_Unit::set_unit_type(::proto::dota::CMsgBotWorldState_UnitType value) {
  assert(::proto::dota::CMsgBotWorldState_UnitType_IsValid(value));
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.unit_type)
}

// optional string name = 3;
inline bool CMsgBotWorldState_Unit::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& CMsgBotWorldState_Unit::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.name)
  return name_.GetNoArena();
}
inline void CMsgBotWorldState_Unit::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.name)
}
#if LANG_CXX11
inline void CMsgBotWorldState_Unit::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgBotWorldState.Unit.name)
}
#endif
inline void CMsgBotWorldState_Unit::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgBotWorldState.Unit.name)
}
inline void CMsgBotWorldState_Unit::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgBotWorldState.Unit.name)
}
inline ::std::string* CMsgBotWorldState_Unit::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgBotWorldState_Unit::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Unit.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgBotWorldState_Unit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Unit.name)
}

// optional uint32 team_id = 4;
inline bool CMsgBotWorldState_Unit::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.team_id)
  return team_id_;
}
inline void CMsgBotWorldState_Unit::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.team_id)
}

// optional uint32 level = 5;
inline bool CMsgBotWorldState_Unit::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.level)
  return level_;
}
inline void CMsgBotWorldState_Unit::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.level)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 6;
inline bool CMsgBotWorldState_Unit::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
inline const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_Unit::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.location)
  return location_;
}
inline ::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Unit.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
inline void CMsgBotWorldState_Unit::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Unit.location)
}

// optional bool is_alive = 7;
inline bool CMsgBotWorldState_Unit::has_is_alive() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_alive() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_alive() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool CMsgBotWorldState_Unit::is_alive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_alive)
  return is_alive_;
}
inline void CMsgBotWorldState_Unit::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_alive)
}

// optional int32 player_id = 8;
inline bool CMsgBotWorldState_Unit::has_player_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_player_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
inline ::google::protobuf::int32 CMsgBotWorldState_Unit::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.player_id)
  return player_id_;
}
inline void CMsgBotWorldState_Unit::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.player_id)
}

// optional uint32 bounding_radius = 10;
inline bool CMsgBotWorldState_Unit::has_bounding_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_bounding_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_has_bounding_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_bounding_radius() {
  bounding_radius_ = 0u;
  clear_has_bounding_radius();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::bounding_radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounding_radius)
  return bounding_radius_;
}
inline void CMsgBotWorldState_Unit::set_bounding_radius(::google::protobuf::uint32 value) {
  set_has_bounding_radius();
  bounding_radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounding_radius)
}

// optional uint32 facing = 11;
inline bool CMsgBotWorldState_Unit::has_facing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_facing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_has_facing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_facing() {
  facing_ = 0u;
  clear_has_facing();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::facing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.facing)
  return facing_;
}
inline void CMsgBotWorldState_Unit::set_facing(::google::protobuf::uint32 value) {
  set_has_facing();
  facing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.facing)
}

// optional uint32 ground_height = 12;
inline bool CMsgBotWorldState_Unit::has_ground_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_ground_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_has_ground_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_ground_height() {
  ground_height_ = 0u;
  clear_has_ground_height();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::ground_height() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ground_height)
  return ground_height_;
}
inline void CMsgBotWorldState_Unit::set_ground_height(::google::protobuf::uint32 value) {
  set_has_ground_height();
  ground_height_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ground_height)
}

// optional uint32 vision_range_daytime = 15;
inline bool CMsgBotWorldState_Unit::has_vision_range_daytime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_vision_range_daytime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_has_vision_range_daytime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_vision_range_daytime() {
  vision_range_daytime_ = 0u;
  clear_has_vision_range_daytime();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::vision_range_daytime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.vision_range_daytime)
  return vision_range_daytime_;
}
inline void CMsgBotWorldState_Unit::set_vision_range_daytime(::google::protobuf::uint32 value) {
  set_has_vision_range_daytime();
  vision_range_daytime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.vision_range_daytime)
}

// optional uint32 vision_range_nighttime = 16;
inline bool CMsgBotWorldState_Unit::has_vision_range_nighttime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_vision_range_nighttime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_has_vision_range_nighttime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_vision_range_nighttime() {
  vision_range_nighttime_ = 0u;
  clear_has_vision_range_nighttime();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::vision_range_nighttime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.vision_range_nighttime)
  return vision_range_nighttime_;
}
inline void CMsgBotWorldState_Unit::set_vision_range_nighttime(::google::protobuf::uint32 value) {
  set_has_vision_range_nighttime();
  vision_range_nighttime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.vision_range_nighttime)
}

// optional uint32 health = 20;
inline bool CMsgBotWorldState_Unit::has_health() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_health() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_has_health() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health)
  return health_;
}
inline void CMsgBotWorldState_Unit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health)
}

// optional uint32 health_max = 21;
inline bool CMsgBotWorldState_Unit::has_health_max() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_health_max() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_has_health_max() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_health_max() {
  health_max_ = 0u;
  clear_has_health_max();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::health_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health_max)
  return health_max_;
}
inline void CMsgBotWorldState_Unit::set_health_max(::google::protobuf::uint32 value) {
  set_has_health_max();
  health_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health_max)
}

// optional float health_regen = 22;
inline bool CMsgBotWorldState_Unit::has_health_regen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_health_regen() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_has_health_regen() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_health_regen() {
  health_regen_ = 0;
  clear_has_health_regen();
}
inline float CMsgBotWorldState_Unit::health_regen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health_regen)
  return health_regen_;
}
inline void CMsgBotWorldState_Unit::set_health_regen(float value) {
  set_has_health_regen();
  health_regen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health_regen)
}

// optional uint32 mana = 25;
inline bool CMsgBotWorldState_Unit::has_mana() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_mana() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_has_mana() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_mana() {
  mana_ = 0u;
  clear_has_mana();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::mana() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana)
  return mana_;
}
inline void CMsgBotWorldState_Unit::set_mana(::google::protobuf::uint32 value) {
  set_has_mana();
  mana_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana)
}

// optional uint32 mana_max = 26;
inline bool CMsgBotWorldState_Unit::has_mana_max() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_mana_max() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_has_mana_max() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_mana_max() {
  mana_max_ = 0u;
  clear_has_mana_max();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::mana_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana_max)
  return mana_max_;
}
inline void CMsgBotWorldState_Unit::set_mana_max(::google::protobuf::uint32 value) {
  set_has_mana_max();
  mana_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana_max)
}

// optional float mana_regen = 27;
inline bool CMsgBotWorldState_Unit::has_mana_regen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_mana_regen() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CMsgBotWorldState_Unit::clear_has_mana_regen() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CMsgBotWorldState_Unit::clear_mana_regen() {
  mana_regen_ = 0;
  clear_has_mana_regen();
}
inline float CMsgBotWorldState_Unit::mana_regen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana_regen)
  return mana_regen_;
}
inline void CMsgBotWorldState_Unit::set_mana_regen(float value) {
  set_has_mana_regen();
  mana_regen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana_regen)
}

// optional uint32 base_movement_speed = 30;
inline bool CMsgBotWorldState_Unit::has_base_movement_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_base_movement_speed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CMsgBotWorldState_Unit::clear_has_base_movement_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CMsgBotWorldState_Unit::clear_base_movement_speed() {
  base_movement_speed_ = 0u;
  clear_has_base_movement_speed();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::base_movement_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_movement_speed)
  return base_movement_speed_;
}
inline void CMsgBotWorldState_Unit::set_base_movement_speed(::google::protobuf::uint32 value) {
  set_has_base_movement_speed();
  base_movement_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_movement_speed)
}

// optional uint32 current_movement_speed = 31;
inline bool CMsgBotWorldState_Unit::has_current_movement_speed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_current_movement_speed() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CMsgBotWorldState_Unit::clear_has_current_movement_speed() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CMsgBotWorldState_Unit::clear_current_movement_speed() {
  current_movement_speed_ = 0u;
  clear_has_current_movement_speed();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::current_movement_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.current_movement_speed)
  return current_movement_speed_;
}
inline void CMsgBotWorldState_Unit::set_current_movement_speed(::google::protobuf::uint32 value) {
  set_has_current_movement_speed();
  current_movement_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.current_movement_speed)
}

// optional int32 anim_activity = 35;
inline bool CMsgBotWorldState_Unit::has_anim_activity() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_anim_activity() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CMsgBotWorldState_Unit::clear_has_anim_activity() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CMsgBotWorldState_Unit::clear_anim_activity() {
  anim_activity_ = 0;
  clear_has_anim_activity();
}
inline ::google::protobuf::int32 CMsgBotWorldState_Unit::anim_activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.anim_activity)
  return anim_activity_;
}
inline void CMsgBotWorldState_Unit::set_anim_activity(::google::protobuf::int32 value) {
  set_has_anim_activity();
  anim_activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.anim_activity)
}

// optional float anim_cycle = 36;
inline bool CMsgBotWorldState_Unit::has_anim_cycle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_anim_cycle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CMsgBotWorldState_Unit::clear_has_anim_cycle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CMsgBotWorldState_Unit::clear_anim_cycle() {
  anim_cycle_ = 0;
  clear_has_anim_cycle();
}
inline float CMsgBotWorldState_Unit::anim_cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.anim_cycle)
  return anim_cycle_;
}
inline void CMsgBotWorldState_Unit::set_anim_cycle(float value) {
  set_has_anim_cycle();
  anim_cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.anim_cycle)
}

// optional uint32 base_damage = 40;
inline bool CMsgBotWorldState_Unit::has_base_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_base_damage() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CMsgBotWorldState_Unit::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CMsgBotWorldState_Unit::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::base_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_damage)
  return base_damage_;
}
inline void CMsgBotWorldState_Unit::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_damage)
}

// optional uint32 base_damage_variance = 41;
inline bool CMsgBotWorldState_Unit::has_base_damage_variance() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_base_damage_variance() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CMsgBotWorldState_Unit::clear_has_base_damage_variance() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CMsgBotWorldState_Unit::clear_base_damage_variance() {
  base_damage_variance_ = 0u;
  clear_has_base_damage_variance();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::base_damage_variance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_damage_variance)
  return base_damage_variance_;
}
inline void CMsgBotWorldState_Unit::set_base_damage_variance(::google::protobuf::uint32 value) {
  set_has_base_damage_variance();
  base_damage_variance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_damage_variance)
}

// optional uint32 bonus_damage = 42;
inline bool CMsgBotWorldState_Unit::has_bonus_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_bonus_damage() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_bonus_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CMsgBotWorldState_Unit::clear_bonus_damage() {
  bonus_damage_ = 0u;
  clear_has_bonus_damage();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::bonus_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bonus_damage)
  return bonus_damage_;
}
inline void CMsgBotWorldState_Unit::set_bonus_damage(::google::protobuf::uint32 value) {
  set_has_bonus_damage();
  bonus_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bonus_damage)
}

// optional uint32 attack_damage = 43;
inline bool CMsgBotWorldState_Unit::has_attack_damage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_damage() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_damage() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_damage() {
  attack_damage_ = 0u;
  clear_has_attack_damage();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_damage)
  return attack_damage_;
}
inline void CMsgBotWorldState_Unit::set_attack_damage(::google::protobuf::uint32 value) {
  set_has_attack_damage();
  attack_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_damage)
}

// optional uint32 attack_range = 44;
inline bool CMsgBotWorldState_Unit::has_attack_range() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_range() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_range() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_range() {
  attack_range_ = 0u;
  clear_has_attack_range();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_range)
  return attack_range_;
}
inline void CMsgBotWorldState_Unit::set_attack_range(::google::protobuf::uint32 value) {
  set_has_attack_range();
  attack_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_range)
}

// optional float attack_speed = 45;
inline bool CMsgBotWorldState_Unit::has_attack_speed() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_speed() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_speed() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_speed() {
  attack_speed_ = 0;
  clear_has_attack_speed();
}
inline float CMsgBotWorldState_Unit::attack_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_speed)
  return attack_speed_;
}
inline void CMsgBotWorldState_Unit::set_attack_speed(float value) {
  set_has_attack_speed();
  attack_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_speed)
}

// optional float attack_anim_point = 46;
inline bool CMsgBotWorldState_Unit::has_attack_anim_point() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_anim_point() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_anim_point() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_anim_point() {
  attack_anim_point_ = 0;
  clear_has_attack_anim_point();
}
inline float CMsgBotWorldState_Unit::attack_anim_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_anim_point)
  return attack_anim_point_;
}
inline void CMsgBotWorldState_Unit::set_attack_anim_point(float value) {
  set_has_attack_anim_point();
  attack_anim_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_anim_point)
}

// optional uint32 attack_acquisition_range = 47;
inline bool CMsgBotWorldState_Unit::has_attack_acquisition_range() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_acquisition_range() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_acquisition_range() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_acquisition_range() {
  attack_acquisition_range_ = 0u;
  clear_has_attack_acquisition_range();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_acquisition_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_acquisition_range)
  return attack_acquisition_range_;
}
inline void CMsgBotWorldState_Unit::set_attack_acquisition_range(::google::protobuf::uint32 value) {
  set_has_attack_acquisition_range();
  attack_acquisition_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_acquisition_range)
}

// optional uint32 attack_projectile_speed = 48;
inline bool CMsgBotWorldState_Unit::has_attack_projectile_speed() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_projectile_speed() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_projectile_speed() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_projectile_speed() {
  attack_projectile_speed_ = 0u;
  clear_has_attack_projectile_speed();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_projectile_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_projectile_speed)
  return attack_projectile_speed_;
}
inline void CMsgBotWorldState_Unit::set_attack_projectile_speed(::google::protobuf::uint32 value) {
  set_has_attack_projectile_speed();
  attack_projectile_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_projectile_speed)
}

// optional uint32 attack_target_handle = 49;
inline bool CMsgBotWorldState_Unit::has_attack_target_handle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_attack_target_handle() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_attack_target_handle() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CMsgBotWorldState_Unit::clear_attack_target_handle() {
  attack_target_handle_ = 0u;
  clear_has_attack_target_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_target_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_target_handle)
  return attack_target_handle_;
}
inline void CMsgBotWorldState_Unit::set_attack_target_handle(::google::protobuf::uint32 value) {
  set_has_attack_target_handle();
  attack_target_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_target_handle)
}

// optional uint32 bounty_xp = 60;
inline bool CMsgBotWorldState_Unit::has_bounty_xp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_bounty_xp() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_has_bounty_xp() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_bounty_xp() {
  bounty_xp_ = 0u;
  clear_has_bounty_xp();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_xp)
  return bounty_xp_;
}
inline void CMsgBotWorldState_Unit::set_bounty_xp(::google::protobuf::uint32 value) {
  set_has_bounty_xp();
  bounty_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_xp)
}

// optional uint32 bounty_gold_min = 61;
inline bool CMsgBotWorldState_Unit::has_bounty_gold_min() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_bounty_gold_min() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_has_bounty_gold_min() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_bounty_gold_min() {
  bounty_gold_min_ = 0u;
  clear_has_bounty_gold_min();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_gold_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_gold_min)
  return bounty_gold_min_;
}
inline void CMsgBotWorldState_Unit::set_bounty_gold_min(::google::protobuf::uint32 value) {
  set_has_bounty_gold_min();
  bounty_gold_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_gold_min)
}

// optional uint32 bounty_gold_max = 62;
inline bool CMsgBotWorldState_Unit::has_bounty_gold_max() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_bounty_gold_max() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_has_bounty_gold_max() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_bounty_gold_max() {
  bounty_gold_max_ = 0u;
  clear_has_bounty_gold_max();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_gold_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_gold_max)
  return bounty_gold_max_;
}
inline void CMsgBotWorldState_Unit::set_bounty_gold_max(::google::protobuf::uint32 value) {
  set_has_bounty_gold_max();
  bounty_gold_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_gold_max)
}

// optional bool is_channeling = 65;
inline bool CMsgBotWorldState_Unit::has_is_channeling() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_channeling() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_channeling() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_is_channeling() {
  is_channeling_ = false;
  clear_has_is_channeling();
}
inline bool CMsgBotWorldState_Unit::is_channeling() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_channeling)
  return is_channeling_;
}
inline void CMsgBotWorldState_Unit::set_is_channeling(bool value) {
  set_has_is_channeling();
  is_channeling_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_channeling)
}

// optional uint32 active_ability_handle = 66;
inline bool CMsgBotWorldState_Unit::has_active_ability_handle() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_active_ability_handle() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_has_active_ability_handle() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_active_ability_handle() {
  active_ability_handle_ = 0u;
  clear_has_active_ability_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::active_ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.active_ability_handle)
  return active_ability_handle_;
}
inline void CMsgBotWorldState_Unit::set_active_ability_handle(::google::protobuf::uint32 value) {
  set_has_active_ability_handle();
  active_ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.active_ability_handle)
}

// optional bool is_attack_immune = 70;
inline bool CMsgBotWorldState_Unit::has_is_attack_immune() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_attack_immune() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_attack_immune() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_is_attack_immune() {
  is_attack_immune_ = false;
  clear_has_is_attack_immune();
}
inline bool CMsgBotWorldState_Unit::is_attack_immune() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_attack_immune)
  return is_attack_immune_;
}
inline void CMsgBotWorldState_Unit::set_is_attack_immune(bool value) {
  set_has_is_attack_immune();
  is_attack_immune_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_attack_immune)
}

// optional bool is_blind = 71;
inline bool CMsgBotWorldState_Unit::has_is_blind() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_blind() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_blind() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_is_blind() {
  is_blind_ = false;
  clear_has_is_blind();
}
inline bool CMsgBotWorldState_Unit::is_blind() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_blind)
  return is_blind_;
}
inline void CMsgBotWorldState_Unit::set_is_blind(bool value) {
  set_has_is_blind();
  is_blind_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_blind)
}

// optional bool is_block_disabled = 72;
inline bool CMsgBotWorldState_Unit::has_is_block_disabled() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_block_disabled() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_block_disabled() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_is_block_disabled() {
  is_block_disabled_ = false;
  clear_has_is_block_disabled();
}
inline bool CMsgBotWorldState_Unit::is_block_disabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_block_disabled)
  return is_block_disabled_;
}
inline void CMsgBotWorldState_Unit::set_is_block_disabled(bool value) {
  set_has_is_block_disabled();
  is_block_disabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_block_disabled)
}

// optional bool is_disarmed = 73;
inline bool CMsgBotWorldState_Unit::has_is_disarmed() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_disarmed() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_disarmed() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_is_disarmed() {
  is_disarmed_ = false;
  clear_has_is_disarmed();
}
inline bool CMsgBotWorldState_Unit::is_disarmed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_disarmed)
  return is_disarmed_;
}
inline void CMsgBotWorldState_Unit::set_is_disarmed(bool value) {
  set_has_is_disarmed();
  is_disarmed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_disarmed)
}

// optional bool is_dominated = 74;
inline bool CMsgBotWorldState_Unit::has_is_dominated() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_dominated() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_dominated() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_is_dominated() {
  is_dominated_ = false;
  clear_has_is_dominated();
}
inline bool CMsgBotWorldState_Unit::is_dominated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_dominated)
  return is_dominated_;
}
inline void CMsgBotWorldState_Unit::set_is_dominated(bool value) {
  set_has_is_dominated();
  is_dominated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_dominated)
}

// optional bool is_evade_disabled = 75;
inline bool CMsgBotWorldState_Unit::has_is_evade_disabled() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_evade_disabled() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_evade_disabled() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_is_evade_disabled() {
  is_evade_disabled_ = false;
  clear_has_is_evade_disabled();
}
inline bool CMsgBotWorldState_Unit::is_evade_disabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_evade_disabled)
  return is_evade_disabled_;
}
inline void CMsgBotWorldState_Unit::set_is_evade_disabled(bool value) {
  set_has_is_evade_disabled();
  is_evade_disabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_evade_disabled)
}

// optional bool is_hexed = 76;
inline bool CMsgBotWorldState_Unit::has_is_hexed() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_hexed() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_hexed() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_is_hexed() {
  is_hexed_ = false;
  clear_has_is_hexed();
}
inline bool CMsgBotWorldState_Unit::is_hexed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_hexed)
  return is_hexed_;
}
inline void CMsgBotWorldState_Unit::set_is_hexed(bool value) {
  set_has_is_hexed();
  is_hexed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_hexed)
}

// optional bool is_invisible = 77;
inline bool CMsgBotWorldState_Unit::has_is_invisible() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_invisible() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_invisible() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_is_invisible() {
  is_invisible_ = false;
  clear_has_is_invisible();
}
inline bool CMsgBotWorldState_Unit::is_invisible() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_invisible)
  return is_invisible_;
}
inline void CMsgBotWorldState_Unit::set_is_invisible(bool value) {
  set_has_is_invisible();
  is_invisible_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_invisible)
}

// optional bool is_invulnerable = 78;
inline bool CMsgBotWorldState_Unit::has_is_invulnerable() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_invulnerable() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_invulnerable() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_is_invulnerable() {
  is_invulnerable_ = false;
  clear_has_is_invulnerable();
}
inline bool CMsgBotWorldState_Unit::is_invulnerable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_invulnerable)
  return is_invulnerable_;
}
inline void CMsgBotWorldState_Unit::set_is_invulnerable(bool value) {
  set_has_is_invulnerable();
  is_invulnerable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_invulnerable)
}

// optional bool is_magic_immune = 79;
inline bool CMsgBotWorldState_Unit::has_is_magic_immune() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_magic_immune() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_magic_immune() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_is_magic_immune() {
  is_magic_immune_ = false;
  clear_has_is_magic_immune();
}
inline bool CMsgBotWorldState_Unit::is_magic_immune() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_magic_immune)
  return is_magic_immune_;
}
inline void CMsgBotWorldState_Unit::set_is_magic_immune(bool value) {
  set_has_is_magic_immune();
  is_magic_immune_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_magic_immune)
}

// optional bool is_muted = 80;
inline bool CMsgBotWorldState_Unit::has_is_muted() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_muted() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_muted() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_is_muted() {
  is_muted_ = false;
  clear_has_is_muted();
}
inline bool CMsgBotWorldState_Unit::is_muted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_muted)
  return is_muted_;
}
inline void CMsgBotWorldState_Unit::set_is_muted(bool value) {
  set_has_is_muted();
  is_muted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_muted)
}

// optional bool is_nightmared = 82;
inline bool CMsgBotWorldState_Unit::has_is_nightmared() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_nightmared() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_nightmared() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CMsgBotWorldState_Unit::clear_is_nightmared() {
  is_nightmared_ = false;
  clear_has_is_nightmared();
}
inline bool CMsgBotWorldState_Unit::is_nightmared() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_nightmared)
  return is_nightmared_;
}
inline void CMsgBotWorldState_Unit::set_is_nightmared(bool value) {
  set_has_is_nightmared();
  is_nightmared_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_nightmared)
}

// optional bool is_rooted = 83;
inline bool CMsgBotWorldState_Unit::has_is_rooted() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_rooted() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_rooted() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CMsgBotWorldState_Unit::clear_is_rooted() {
  is_rooted_ = false;
  clear_has_is_rooted();
}
inline bool CMsgBotWorldState_Unit::is_rooted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_rooted)
  return is_rooted_;
}
inline void CMsgBotWorldState_Unit::set_is_rooted(bool value) {
  set_has_is_rooted();
  is_rooted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_rooted)
}

// optional bool is_silenced = 84;
inline bool CMsgBotWorldState_Unit::has_is_silenced() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_silenced() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_silenced() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CMsgBotWorldState_Unit::clear_is_silenced() {
  is_silenced_ = false;
  clear_has_is_silenced();
}
inline bool CMsgBotWorldState_Unit::is_silenced() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_silenced)
  return is_silenced_;
}
inline void CMsgBotWorldState_Unit::set_is_silenced(bool value) {
  set_has_is_silenced();
  is_silenced_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_silenced)
}

// optional bool is_specially_deniable = 85;
inline bool CMsgBotWorldState_Unit::has_is_specially_deniable() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_specially_deniable() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_specially_deniable() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CMsgBotWorldState_Unit::clear_is_specially_deniable() {
  is_specially_deniable_ = false;
  clear_has_is_specially_deniable();
}
inline bool CMsgBotWorldState_Unit::is_specially_deniable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_specially_deniable)
  return is_specially_deniable_;
}
inline void CMsgBotWorldState_Unit::set_is_specially_deniable(bool value) {
  set_has_is_specially_deniable();
  is_specially_deniable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_specially_deniable)
}

// optional bool is_stunned = 86;
inline bool CMsgBotWorldState_Unit::has_is_stunned() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_stunned() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_stunned() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CMsgBotWorldState_Unit::clear_is_stunned() {
  is_stunned_ = false;
  clear_has_is_stunned();
}
inline bool CMsgBotWorldState_Unit::is_stunned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_stunned)
  return is_stunned_;
}
inline void CMsgBotWorldState_Unit::set_is_stunned(bool value) {
  set_has_is_stunned();
  is_stunned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_stunned)
}

// optional bool is_unable_to_miss = 87;
inline bool CMsgBotWorldState_Unit::has_is_unable_to_miss() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_unable_to_miss() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_unable_to_miss() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CMsgBotWorldState_Unit::clear_is_unable_to_miss() {
  is_unable_to_miss_ = false;
  clear_has_is_unable_to_miss();
}
inline bool CMsgBotWorldState_Unit::is_unable_to_miss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_unable_to_miss)
  return is_unable_to_miss_;
}
inline void CMsgBotWorldState_Unit::set_is_unable_to_miss(bool value) {
  set_has_is_unable_to_miss();
  is_unable_to_miss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_unable_to_miss)
}

// optional bool has_scepter = 88;
inline bool CMsgBotWorldState_Unit::has_has_scepter() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_has_scepter() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CMsgBotWorldState_Unit::clear_has_has_scepter() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CMsgBotWorldState_Unit::clear_has_scepter() {
  has_scepter_ = false;
  clear_has_has_scepter();
}
inline bool CMsgBotWorldState_Unit::has_scepter() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.has_scepter)
  return has_scepter_;
}
inline void CMsgBotWorldState_Unit::set_has_scepter(bool value) {
  set_has_has_scepter();
  has_scepter_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.has_scepter)
}

// repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
inline int CMsgBotWorldState_Unit::abilities_size() const {
  return abilities_.size();
}
inline void CMsgBotWorldState_Unit::clear_abilities() {
  abilities_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.abilities)
  return &abilities_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_;
}

// repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
inline int CMsgBotWorldState_Unit::items_size() const {
  return items_.size();
}
inline void CMsgBotWorldState_Unit::clear_items() {
  items_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.items)
  return &items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.items)
  return items_;
}

// repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
inline int CMsgBotWorldState_Unit::modifiers_size() const {
  return modifiers_.size();
}
inline void CMsgBotWorldState_Unit::clear_modifiers() {
  modifiers_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_Modifier& CMsgBotWorldState_Unit::modifiers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::mutable_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::add_modifiers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >*
CMsgBotWorldState_Unit::mutable_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return &modifiers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >&
CMsgBotWorldState_Unit::modifiers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_;
}

// repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
inline int CMsgBotWorldState_Unit::incoming_tracking_projectiles_size() const {
  return incoming_tracking_projectiles_.size();
}
inline void CMsgBotWorldState_Unit::clear_incoming_tracking_projectiles() {
  incoming_tracking_projectiles_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_TrackingProjectile& CMsgBotWorldState_Unit::incoming_tracking_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::add_incoming_tracking_projectiles() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >*
CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return &incoming_tracking_projectiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >&
CMsgBotWorldState_Unit::incoming_tracking_projectiles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_;
}

// optional uint32 action_type = 100;
inline bool CMsgBotWorldState_Unit::has_action_type() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_action_type() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_action_type() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CMsgBotWorldState_Unit::clear_action_type() {
  action_type_ = 0u;
  clear_has_action_type();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::action_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.action_type)
  return action_type_;
}
inline void CMsgBotWorldState_Unit::set_action_type(::google::protobuf::uint32 value) {
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.action_type)
}

// optional uint32 ability_target_handle = 101;
inline bool CMsgBotWorldState_Unit::has_ability_target_handle() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_ability_target_handle() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_ability_target_handle() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CMsgBotWorldState_Unit::clear_ability_target_handle() {
  ability_target_handle_ = 0u;
  clear_has_ability_target_handle();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::ability_target_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ability_target_handle)
  return ability_target_handle_;
}
inline void CMsgBotWorldState_Unit::set_ability_target_handle(::google::protobuf::uint32 value) {
  set_has_ability_target_handle();
  ability_target_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ability_target_handle)
}

// optional uint32 primary_attribute = 110;
inline bool CMsgBotWorldState_Unit::has_primary_attribute() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_primary_attribute() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_primary_attribute() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CMsgBotWorldState_Unit::clear_primary_attribute() {
  primary_attribute_ = 0u;
  clear_has_primary_attribute();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::primary_attribute() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.primary_attribute)
  return primary_attribute_;
}
inline void CMsgBotWorldState_Unit::set_primary_attribute(::google::protobuf::uint32 value) {
  set_has_primary_attribute();
  primary_attribute_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.primary_attribute)
}

// optional bool is_illusion = 111;
inline bool CMsgBotWorldState_Unit::has_is_illusion() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_illusion() {
  _has_bits_[2] |= 0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_illusion() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void CMsgBotWorldState_Unit::clear_is_illusion() {
  is_illusion_ = false;
  clear_has_is_illusion();
}
inline bool CMsgBotWorldState_Unit::is_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_illusion)
  return is_illusion_;
}
inline void CMsgBotWorldState_Unit::set_is_illusion(bool value) {
  set_has_is_illusion();
  is_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_illusion)
}

// optional uint32 respawn_time = 112;
inline bool CMsgBotWorldState_Unit::has_respawn_time() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_respawn_time() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CMsgBotWorldState_Unit::clear_respawn_time() {
  respawn_time_ = 0u;
  clear_has_respawn_time();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.respawn_time)
  return respawn_time_;
}
inline void CMsgBotWorldState_Unit::set_respawn_time(::google::protobuf::uint32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.respawn_time)
}

// optional uint32 buyback_cost = 113;
inline bool CMsgBotWorldState_Unit::has_buyback_cost() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_buyback_cost() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_buyback_cost() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CMsgBotWorldState_Unit::clear_buyback_cost() {
  buyback_cost_ = 0u;
  clear_has_buyback_cost();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::buyback_cost() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.buyback_cost)
  return buyback_cost_;
}
inline void CMsgBotWorldState_Unit::set_buyback_cost(::google::protobuf::uint32 value) {
  set_has_buyback_cost();
  buyback_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.buyback_cost)
}

// optional float buyback_cooldown = 114;
inline bool CMsgBotWorldState_Unit::has_buyback_cooldown() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_buyback_cooldown() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_buyback_cooldown() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CMsgBotWorldState_Unit::clear_buyback_cooldown() {
  buyback_cooldown_ = 0;
  clear_has_buyback_cooldown();
}
inline float CMsgBotWorldState_Unit::buyback_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.buyback_cooldown)
  return buyback_cooldown_;
}
inline void CMsgBotWorldState_Unit::set_buyback_cooldown(float value) {
  set_has_buyback_cooldown();
  buyback_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.buyback_cooldown)
}

// optional float spell_amplification = 115;
inline bool CMsgBotWorldState_Unit::has_spell_amplification() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_spell_amplification() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_spell_amplification() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CMsgBotWorldState_Unit::clear_spell_amplification() {
  spell_amplification_ = 0;
  clear_has_spell_amplification();
}
inline float CMsgBotWorldState_Unit::spell_amplification() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.spell_amplification)
  return spell_amplification_;
}
inline void CMsgBotWorldState_Unit::set_spell_amplification(float value) {
  set_has_spell_amplification();
  spell_amplification_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.spell_amplification)
}

// optional float armor = 116;
inline bool CMsgBotWorldState_Unit::has_armor() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_armor() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CMsgBotWorldState_Unit::clear_has_armor() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CMsgBotWorldState_Unit::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
inline float CMsgBotWorldState_Unit::armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.armor)
  return armor_;
}
inline void CMsgBotWorldState_Unit::set_armor(float value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.armor)
}

// optional float magic_resist = 117;
inline bool CMsgBotWorldState_Unit::has_magic_resist() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_magic_resist() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_has_magic_resist() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CMsgBotWorldState_Unit::clear_magic_resist() {
  magic_resist_ = 0;
  clear_has_magic_resist();
}
inline float CMsgBotWorldState_Unit::magic_resist() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.magic_resist)
  return magic_resist_;
}
inline void CMsgBotWorldState_Unit::set_magic_resist(float value) {
  set_has_magic_resist();
  magic_resist_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.magic_resist)
}

// optional float evasion = 118;
inline bool CMsgBotWorldState_Unit::has_evasion() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_evasion() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_has_evasion() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CMsgBotWorldState_Unit::clear_evasion() {
  evasion_ = 0;
  clear_has_evasion();
}
inline float CMsgBotWorldState_Unit::evasion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.evasion)
  return evasion_;
}
inline void CMsgBotWorldState_Unit::set_evasion(float value) {
  set_has_evasion();
  evasion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.evasion)
}

// optional uint32 xp_needed_to_level = 120;
inline bool CMsgBotWorldState_Unit::has_xp_needed_to_level() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_xp_needed_to_level() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_has_xp_needed_to_level() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CMsgBotWorldState_Unit::clear_xp_needed_to_level() {
  xp_needed_to_level_ = 0u;
  clear_has_xp_needed_to_level();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::xp_needed_to_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.xp_needed_to_level)
  return xp_needed_to_level_;
}
inline void CMsgBotWorldState_Unit::set_xp_needed_to_level(::google::protobuf::uint32 value) {
  set_has_xp_needed_to_level();
  xp_needed_to_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.xp_needed_to_level)
}

// optional uint32 ability_points = 121;
inline bool CMsgBotWorldState_Unit::has_ability_points() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_ability_points() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_has_ability_points() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CMsgBotWorldState_Unit::clear_ability_points() {
  ability_points_ = 0u;
  clear_has_ability_points();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::ability_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ability_points)
  return ability_points_;
}
inline void CMsgBotWorldState_Unit::set_ability_points(::google::protobuf::uint32 value) {
  set_has_ability_points();
  ability_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ability_points)
}

// optional uint32 reliable_gold = 122;
inline bool CMsgBotWorldState_Unit::has_reliable_gold() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_reliable_gold() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_has_reliable_gold() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CMsgBotWorldState_Unit::clear_reliable_gold() {
  reliable_gold_ = 0u;
  clear_has_reliable_gold();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::reliable_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.reliable_gold)
  return reliable_gold_;
}
inline void CMsgBotWorldState_Unit::set_reliable_gold(::google::protobuf::uint32 value) {
  set_has_reliable_gold();
  reliable_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.reliable_gold)
}

// optional uint32 unreliable_gold = 123;
inline bool CMsgBotWorldState_Unit::has_unreliable_gold() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_unreliable_gold() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_has_unreliable_gold() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CMsgBotWorldState_Unit::clear_unreliable_gold() {
  unreliable_gold_ = 0u;
  clear_has_unreliable_gold();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::unreliable_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.unreliable_gold)
  return unreliable_gold_;
}
inline void CMsgBotWorldState_Unit::set_unreliable_gold(::google::protobuf::uint32 value) {
  set_has_unreliable_gold();
  unreliable_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.unreliable_gold)
}

// optional uint32 last_hits = 124;
inline bool CMsgBotWorldState_Unit::has_last_hits() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_last_hits() {
  _has_bits_[2] |= 0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_has_last_hits() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void CMsgBotWorldState_Unit::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.last_hits)
  return last_hits_;
}
inline void CMsgBotWorldState_Unit::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.last_hits)
}

// optional uint32 denies = 125;
inline bool CMsgBotWorldState_Unit::has_denies() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_denies() {
  _has_bits_[2] |= 0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_has_denies() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void CMsgBotWorldState_Unit::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.denies)
  return denies_;
}
inline void CMsgBotWorldState_Unit::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.denies)
}

// optional uint32 net_worth = 126;
inline bool CMsgBotWorldState_Unit::has_net_worth() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_net_worth() {
  _has_bits_[2] |= 0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_has_net_worth() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void CMsgBotWorldState_Unit::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.net_worth)
  return net_worth_;
}
inline void CMsgBotWorldState_Unit::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.net_worth)
}

// optional uint32 strength = 127;
inline bool CMsgBotWorldState_Unit::has_strength() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_strength() {
  _has_bits_[2] |= 0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_has_strength() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void CMsgBotWorldState_Unit::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.strength)
  return strength_;
}
inline void CMsgBotWorldState_Unit::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.strength)
}

// optional uint32 agility = 128;
inline bool CMsgBotWorldState_Unit::has_agility() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_agility() {
  _has_bits_[2] |= 0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_has_agility() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void CMsgBotWorldState_Unit::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.agility)
  return agility_;
}
inline void CMsgBotWorldState_Unit::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.agility)
}

// optional uint32 intelligence = 129;
inline bool CMsgBotWorldState_Unit::has_intelligence() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_intelligence() {
  _has_bits_[2] |= 0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_has_intelligence() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void CMsgBotWorldState_Unit::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
inline ::google::protobuf::uint32 CMsgBotWorldState_Unit::intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.intelligence)
  return intelligence_;
}
inline void CMsgBotWorldState_Unit::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.intelligence)
}

// optional float remaining_lifespan = 130;
inline bool CMsgBotWorldState_Unit::has_remaining_lifespan() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_remaining_lifespan() {
  _has_bits_[2] |= 0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_has_remaining_lifespan() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void CMsgBotWorldState_Unit::clear_remaining_lifespan() {
  remaining_lifespan_ = 0;
  clear_has_remaining_lifespan();
}
inline float CMsgBotWorldState_Unit::remaining_lifespan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.remaining_lifespan)
  return remaining_lifespan_;
}
inline void CMsgBotWorldState_Unit::set_remaining_lifespan(float value) {
  set_has_remaining_lifespan();
  remaining_lifespan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.remaining_lifespan)
}

// optional bool flying_courier = 140;
inline bool CMsgBotWorldState_Unit::has_flying_courier() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_flying_courier() {
  _has_bits_[2] |= 0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_has_flying_courier() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void CMsgBotWorldState_Unit::clear_flying_courier() {
  flying_courier_ = false;
  clear_has_flying_courier();
}
inline bool CMsgBotWorldState_Unit::flying_courier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.flying_courier)
  return flying_courier_;
}
inline void CMsgBotWorldState_Unit::set_flying_courier(bool value) {
  set_has_flying_courier();
  flying_courier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.flying_courier)
}

// optional float shrine_cooldown = 150;
inline bool CMsgBotWorldState_Unit::has_shrine_cooldown() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_shrine_cooldown() {
  _has_bits_[2] |= 0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_has_shrine_cooldown() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void CMsgBotWorldState_Unit::clear_shrine_cooldown() {
  shrine_cooldown_ = 0;
  clear_has_shrine_cooldown();
}
inline float CMsgBotWorldState_Unit::shrine_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.shrine_cooldown)
  return shrine_cooldown_;
}
inline void CMsgBotWorldState_Unit::set_shrine_cooldown(float value) {
  set_has_shrine_cooldown();
  shrine_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.shrine_cooldown)
}

// optional bool is_shrine_healing = 151;
inline bool CMsgBotWorldState_Unit::has_is_shrine_healing() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void CMsgBotWorldState_Unit::set_has_is_shrine_healing() {
  _has_bits_[2] |= 0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_has_is_shrine_healing() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void CMsgBotWorldState_Unit::clear_is_shrine_healing() {
  is_shrine_healing_ = false;
  clear_has_is_shrine_healing();
}
inline bool CMsgBotWorldState_Unit::is_shrine_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_shrine_healing)
  return is_shrine_healing_;
}
inline void CMsgBotWorldState_Unit::set_is_shrine_healing(bool value) {
  set_has_is_shrine_healing();
  is_shrine_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_shrine_healing)
}

// -------------------------------------------------------------------

// CMsgBotWorldState

// optional uint32 team_id = 1;
inline bool CMsgBotWorldState::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgBotWorldState::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgBotWorldState::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgBotWorldState::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgBotWorldState::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.team_id)
  return team_id_;
}
inline void CMsgBotWorldState::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.team_id)
}

// optional float game_time = 2;
inline bool CMsgBotWorldState::has_game_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgBotWorldState::set_has_game_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgBotWorldState::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgBotWorldState::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline float CMsgBotWorldState::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.game_time)
  return game_time_;
}
inline void CMsgBotWorldState::set_game_time(float value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.game_time)
}

// optional float dota_time = 3;
inline bool CMsgBotWorldState::has_dota_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgBotWorldState::set_has_dota_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgBotWorldState::clear_has_dota_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgBotWorldState::clear_dota_time() {
  dota_time_ = 0;
  clear_has_dota_time();
}
inline float CMsgBotWorldState::dota_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.dota_time)
  return dota_time_;
}
inline void CMsgBotWorldState::set_dota_time(float value) {
  set_has_dota_time();
  dota_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.dota_time)
}

// optional uint32 game_state = 4;
inline bool CMsgBotWorldState::has_game_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgBotWorldState::set_has_game_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgBotWorldState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgBotWorldState::clear_game_state() {
  game_state_ = 0u;
  clear_has_game_state();
}
inline ::google::protobuf::uint32 CMsgBotWorldState::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.game_state)
  return game_state_;
}
inline void CMsgBotWorldState::set_game_state(::google::protobuf::uint32 value) {
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.game_state)
}

// optional uint32 hero_pick_state = 5;
inline bool CMsgBotWorldState::has_hero_pick_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgBotWorldState::set_has_hero_pick_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgBotWorldState::clear_has_hero_pick_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgBotWorldState::clear_hero_pick_state() {
  hero_pick_state_ = 0u;
  clear_has_hero_pick_state();
}
inline ::google::protobuf::uint32 CMsgBotWorldState::hero_pick_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.hero_pick_state)
  return hero_pick_state_;
}
inline void CMsgBotWorldState::set_hero_pick_state(::google::protobuf::uint32 value) {
  set_has_hero_pick_state();
  hero_pick_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.hero_pick_state)
}

// optional float time_of_day = 6;
inline bool CMsgBotWorldState::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgBotWorldState::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgBotWorldState::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgBotWorldState::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
inline float CMsgBotWorldState::time_of_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.time_of_day)
  return time_of_day_;
}
inline void CMsgBotWorldState::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.time_of_day)
}

// optional float glyph_cooldown = 7;
inline bool CMsgBotWorldState::has_glyph_cooldown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgBotWorldState::set_has_glyph_cooldown() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgBotWorldState::clear_has_glyph_cooldown() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgBotWorldState::clear_glyph_cooldown() {
  glyph_cooldown_ = 0;
  clear_has_glyph_cooldown();
}
inline float CMsgBotWorldState::glyph_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.glyph_cooldown)
  return glyph_cooldown_;
}
inline void CMsgBotWorldState::set_glyph_cooldown(float value) {
  set_has_glyph_cooldown();
  glyph_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.glyph_cooldown)
}

// optional uint32 glyph_cooldown_enemy = 8;
inline bool CMsgBotWorldState::has_glyph_cooldown_enemy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgBotWorldState::set_has_glyph_cooldown_enemy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgBotWorldState::clear_has_glyph_cooldown_enemy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgBotWorldState::clear_glyph_cooldown_enemy() {
  glyph_cooldown_enemy_ = 0u;
  clear_has_glyph_cooldown_enemy();
}
inline ::google::protobuf::uint32 CMsgBotWorldState::glyph_cooldown_enemy() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.glyph_cooldown_enemy)
  return glyph_cooldown_enemy_;
}
inline void CMsgBotWorldState::set_glyph_cooldown_enemy(::google::protobuf::uint32 value) {
  set_has_glyph_cooldown_enemy();
  glyph_cooldown_enemy_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.glyph_cooldown_enemy)
}

// repeated .proto.dota.CMsgBotWorldState.Player players = 10;
inline int CMsgBotWorldState::players_size() const {
  return players_.size();
}
inline void CMsgBotWorldState::clear_players() {
  players_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_Player& CMsgBotWorldState::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_Player* CMsgBotWorldState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.players)
  return players_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_Player* CMsgBotWorldState::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >*
CMsgBotWorldState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >&
CMsgBotWorldState::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.players)
  return players_;
}

// repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
inline int CMsgBotWorldState::units_size() const {
  return units_.size();
}
inline void CMsgBotWorldState::clear_units() {
  units_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_Unit& CMsgBotWorldState::units(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.units)
  return units_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_Unit* CMsgBotWorldState::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.units)
  return units_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_Unit* CMsgBotWorldState::add_units() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.units)
  return units_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >*
CMsgBotWorldState::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.units)
  return &units_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >&
CMsgBotWorldState::units() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.units)
  return units_;
}

// repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
inline int CMsgBotWorldState::dropped_items_size() const {
  return dropped_items_.size();
}
inline void CMsgBotWorldState::clear_dropped_items() {
  dropped_items_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_DroppedItem& CMsgBotWorldState::dropped_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::mutable_dropped_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::add_dropped_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >*
CMsgBotWorldState::mutable_dropped_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.dropped_items)
  return &dropped_items_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >&
CMsgBotWorldState::dropped_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_;
}

// repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
inline int CMsgBotWorldState::rune_infos_size() const {
  return rune_infos_.size();
}
inline void CMsgBotWorldState::clear_rune_infos() {
  rune_infos_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_RuneInfo& CMsgBotWorldState::rune_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::mutable_rune_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::add_rune_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >*
CMsgBotWorldState::mutable_rune_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.rune_infos)
  return &rune_infos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >&
CMsgBotWorldState::rune_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_;
}

// repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
inline int CMsgBotWorldState::incoming_teleports_size() const {
  return incoming_teleports_.size();
}
inline void CMsgBotWorldState::clear_incoming_teleports() {
  incoming_teleports_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_TeleportInfo& CMsgBotWorldState::incoming_teleports(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::mutable_incoming_teleports(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::add_incoming_teleports() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >*
CMsgBotWorldState::mutable_incoming_teleports() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.incoming_teleports)
  return &incoming_teleports_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >&
CMsgBotWorldState::incoming_teleports() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_;
}

// repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
inline int CMsgBotWorldState::linear_projectiles_size() const {
  return linear_projectiles_.size();
}
inline void CMsgBotWorldState::clear_linear_projectiles() {
  linear_projectiles_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_LinearProjectile& CMsgBotWorldState::linear_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::mutable_linear_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::add_linear_projectiles() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >*
CMsgBotWorldState::mutable_linear_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.linear_projectiles)
  return &linear_projectiles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >&
CMsgBotWorldState::linear_projectiles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_;
}

// repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
inline int CMsgBotWorldState::avoidance_zones_size() const {
  return avoidance_zones_.size();
}
inline void CMsgBotWorldState::clear_avoidance_zones() {
  avoidance_zones_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_AvoidanceZone& CMsgBotWorldState::avoidance_zones(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::mutable_avoidance_zones(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::add_avoidance_zones() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >*
CMsgBotWorldState::mutable_avoidance_zones() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.avoidance_zones)
  return &avoidance_zones_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >&
CMsgBotWorldState::avoidance_zones() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_;
}

// repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
inline int CMsgBotWorldState::ability_events_size() const {
  return ability_events_.size();
}
inline void CMsgBotWorldState::clear_ability_events() {
  ability_events_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_EventAbility& CMsgBotWorldState::ability_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_EventAbility* CMsgBotWorldState::mutable_ability_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_EventAbility* CMsgBotWorldState::add_ability_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >*
CMsgBotWorldState::mutable_ability_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.ability_events)
  return &ability_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >&
CMsgBotWorldState::ability_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
inline int CMsgBotWorldState::damage_events_size() const {
  return damage_events_.size();
}
inline void CMsgBotWorldState::clear_damage_events() {
  damage_events_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_EventDamage& CMsgBotWorldState::damage_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_EventDamage* CMsgBotWorldState::mutable_damage_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_EventDamage* CMsgBotWorldState::add_damage_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >*
CMsgBotWorldState::mutable_damage_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.damage_events)
  return &damage_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >&
CMsgBotWorldState::damage_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
inline int CMsgBotWorldState::courier_killed_events_size() const {
  return courier_killed_events_.size();
}
inline void CMsgBotWorldState::clear_courier_killed_events() {
  courier_killed_events_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_EventCourierKilled& CMsgBotWorldState::courier_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::mutable_courier_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::add_courier_killed_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >*
CMsgBotWorldState::mutable_courier_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.courier_killed_events)
  return &courier_killed_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >&
CMsgBotWorldState::courier_killed_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
inline int CMsgBotWorldState::roshan_killed_events_size() const {
  return roshan_killed_events_.size();
}
inline void CMsgBotWorldState::clear_roshan_killed_events() {
  roshan_killed_events_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_EventRoshanKilled& CMsgBotWorldState::roshan_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::mutable_roshan_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::add_roshan_killed_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >*
CMsgBotWorldState::mutable_roshan_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return &roshan_killed_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >&
CMsgBotWorldState::roshan_killed_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
inline int CMsgBotWorldState::tree_events_size() const {
  return tree_events_.size();
}
inline void CMsgBotWorldState::clear_tree_events() {
  tree_events_.Clear();
}
inline const ::proto::dota::CMsgBotWorldState_EventTree& CMsgBotWorldState::tree_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Get(index);
}
inline ::proto::dota::CMsgBotWorldState_EventTree* CMsgBotWorldState::mutable_tree_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Mutable(index);
}
inline ::proto::dota::CMsgBotWorldState_EventTree* CMsgBotWorldState::add_tree_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >*
CMsgBotWorldState::mutable_tree_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.tree_events)
  return &tree_events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >&
CMsgBotWorldState::tree_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dota
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgBotWorldState_UnitType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgBotWorldState_UnitType>() {
  return ::proto::dota::CMsgBotWorldState_UnitType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto__INCLUDED
