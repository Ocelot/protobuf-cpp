// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CSODOTAGameAccountClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAGameAccountClient> {
} _CSODOTAGameAccountClient_default_instance_;
class CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints_ChatWheelMessageRange> {
} _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
class CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints_AccountPoints> {
} _CMsgLobbyEventPoints_AccountPoints_default_instance_;
class CMsgLobbyEventPointsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyEventPoints> {
} _CMsgLobbyEventPoints_default_instance_;
class CMsgBattleCupVictoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBattleCupVictory> {
} _CMsgBattleCupVictory_default_instance_;
class CMsgLobbyBattleCupVictoryListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyBattleCupVictoryList> {
} _CMsgLobbyBattleCupVictoryList_default_instance_;
class CMsgDOTABroadcastNotificationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABroadcastNotification> {
} _CMsgDOTABroadcastNotification_default_instance_;
class CProtoItemHeroStatueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CProtoItemHeroStatue> {
} _CProtoItemHeroStatue_default_instance_;
class CProtoItemTeamShowcaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CProtoItemTeamShowcase> {
} _CProtoItemTeamShowcase_default_instance_;
class CMatchPlayerAbilityUpgradeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMatchPlayerAbilityUpgrade> {
} _CMatchPlayerAbilityUpgrade_default_instance_;
class CMatchAdditionalUnitInventoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMatchAdditionalUnitInventory> {
} _CMatchAdditionalUnitInventory_default_instance_;
class CMatchPlayerPermanentBuffDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMatchPlayerPermanentBuff> {
} _CMatchPlayerPermanentBuff_default_instance_;
class CMatchHeroSelectEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMatchHeroSelectEvent> {
} _CMatchHeroSelectEvent_default_instance_;
class CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProcessFantasyScheduledEvent> {
} _CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
class CMsgDOTAHasItemQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemQuery> {
} _CMsgDOTAHasItemQuery_default_instance_;
class CMsgDOTAHasItemResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemResponse> {
} _CMsgDOTAHasItemResponse_default_instance_;
class CMsgGCIsProQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIsProQuery> {
} _CMsgGCIsProQuery_default_instance_;
class CMsgGCIsProResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIsProResponse> {
} _CMsgGCIsProResponse_default_instance_;
class CMsgDOTAHasItemDefsQueryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemDefsQuery> {
} _CMsgDOTAHasItemDefsQuery_default_instance_;
class CMsgDOTAHasItemDefsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAHasItemDefsResponse> {
} _CMsgDOTAHasItemDefsResponse_default_instance_;
class CMsgGCGetPlayerCardItemInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfo> {
} _CMsgGCGetPlayerCardItemInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo> {
} _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCGetPlayerCardItemInfoResponse> {
} _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
class CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCFantasySetMatchLeague> {
} _CMsgGCToGCFantasySetMatchLeague_default_instance_;
class CSODOTAMapLocationStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAMapLocationState> {
} _CSODOTAMapLocationState_default_instance_;
class CMsgLeagueAdminListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeagueAdminList> {
} _CMsgLeagueAdminList_default_instance_;
class CCompendiumTimestampedDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumTimestampedData> {
} _CCompendiumTimestampedData_default_instance_;
class CCompendiumGameTimelineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumGameTimeline> {
} _CCompendiumGameTimeline_default_instance_;
class CCompendiumGameListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CCompendiumGameList> {
} _CCompendiumGameList_default_instance_;
class CAdditionalEquipSlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CAdditionalEquipSlot> {
} _CAdditionalEquipSlot_default_instance_;
class CMsgDOTACombatLogEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACombatLogEntry> {
} _CMsgDOTACombatLogEntry_default_instance_;
class CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Trophy> {
} _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Stat> {
} _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Item> {
} _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Hero> {
} _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Emoticon> {
} _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot_Team> {
} _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_SlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard_Slot> {
} _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAProfileCard> {
} _CMsgDOTAProfileCard_default_instance_;
class CSODOTAPlayerChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPlayerChallenge> {
} _CSODOTAPlayerChallenge_default_instance_;
class CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRerollPlayerChallenge> {
} _CMsgClientToGCRerollPlayerChallenge_default_instance_;
class CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCRerollPlayerChallengeResponse> {
} _CMsgGCRerollPlayerChallengeResponse_default_instance_;
class CMsgGCTopCustomGamesListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCTopCustomGamesList> {
} _CMsgGCTopCustomGamesList_default_instance_;
class CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_TeamDetails> {
} _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_ItemDetails> {
} _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_AbilityDetails> {
} _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
class CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_HeroToHeroStats> {
} _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_AbilityList> {
} _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
class CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_PlayerDetails> {
} _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_BuildingDetails> {
} _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_KillDetails> {
} _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_BroadcasterDetails> {
} _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_PickBanDetails> {
} _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_MatchDetails> {
} _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData_LocationStats> {
} _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats> {
} _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats_GraphData> {
} _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStats> {
} _CMsgDOTARealtimeGameStats_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_TeamDetails> {
} _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_PlayerDetails> {
} _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_BuildingDetails> {
} _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_MatchDetails> {
} _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse_GraphData> {
} _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARealtimeGameStatsTerse> {
} _CMsgDOTARealtimeGameStatsTerse_default_instance_;
class CMsgGCToClientMatchGroupsVersionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientMatchGroupsVersion> {
} _CMsgGCToClientMatchGroupsVersion_default_instance_;
class CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASDOHeroStatsHistory> {
} _CMsgDOTASDOHeroStatsHistory_default_instance_;
class CMsgDOTASeasonRewards_RewardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonRewards_Reward> {
} _CMsgDOTASeasonRewards_Reward_default_instance_;
class CMsgDOTASeasonRewardsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonRewards> {
} _CMsgDOTASeasonRewards_default_instance_;
class CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonAchievements_Achievement> {
} _CMsgDOTASeasonAchievements_Achievement_default_instance_;
class CMsgDOTASeasonAchievementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonAchievements> {
} _CMsgDOTASeasonAchievements_default_instance_;
class CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Choice> {
} _CMsgDOTASeasonPredictions_Choice_default_instance_;
class CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Answers> {
} _CMsgDOTASeasonPredictions_Answers_default_instance_;
class CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_QueryKeyValues> {
} _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_;
class CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_Prediction> {
} _CMsgDOTASeasonPredictions_Prediction_default_instance_;
class CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions_InGamePrediction> {
} _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_;
class CMsgDOTASeasonPredictionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeasonPredictions> {
} _CMsgDOTASeasonPredictions_default_instance_;
class CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_Player_CustomGameData> {
} _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
class CMsgDOTAMatch_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_Player> {
} _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_BroadcasterInfo> {
} _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
class CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_BroadcasterChannel> {
} _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
class CMsgDOTAMatch_CustomGameDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch_CustomGameData> {
} _CMsgDOTAMatch_CustomGameData_default_instance_;
class CMsgDOTAMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatch> {
} _CMsgDOTAMatch_default_instance_;
class CMsgPlayerCard_StatModifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerCard_StatModifier> {
} _CMsgPlayerCard_StatModifier_default_instance_;
class CMsgPlayerCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPlayerCard> {
} _CMsgPlayerCard_default_instance_;
class CMsgDOTAFantasyPlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerStats> {
} _CMsgDOTAFantasyPlayerStats_default_instance_;
class CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAFantasyPlayerMatchStats> {
} _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
class CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot_Mode> {
} _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
class CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot_Action> {
} _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
class CMsgDOTABotDebugInfo_BotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo_Bot> {
} _CMsgDOTABotDebugInfo_Bot_default_instance_;
class CMsgDOTABotDebugInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTABotDebugInfo> {
} _CMsgDOTABotDebugInfo_default_instance_;

namespace protobuf_dota_5fgcmessages_5fcommon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[90];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[16];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, losses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, initial_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, secondary_leaver_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_text_chat_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_voice_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, prevent_public_text_chat_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_abandoned_game_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, last_secondary_abandoned_game_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leaver_penalty_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, completed_game_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, teaching_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, leadership_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, friendly_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, forgiving_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_disabled_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, showcase_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, match_disabled_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, partner_account_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, shutdownlawterminatetimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, low_priority_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recruitment_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, has_new_notifications_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, is_league_admin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_competitive_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, party_competitive_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, casual_1v1_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, competitive_team_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, curr_all_hero_challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, play_time_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_seq_num_last_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_score_last_report_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, player_behavior_report_old_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, tourney_recent_participation_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, favorite_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, anchored_phone_number_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, ranked_matchmaking_ban_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recent_game_time_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recent_game_time_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recent_game_time_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_ranked_rank_peak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, general_seasonal_rank_transferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_calibration_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_games_played_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_ranked_rank_peak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, solo_seasonal_rank_transferred_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, favorite_team_packed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAGameAccountClient, recent_report_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  31,
  7,
  8,
  9,
  51,
  10,
  32,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  43,
  44,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  41,
  42,
  47,
  48,
  45,
  49,
  50,
  53,
  52,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  46,
  62,
  63,
  64,
  65,
  66,
  67,
  40,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_ChatWheelMessageRange, message_id_end_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, normal_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, owned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, points_held_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, premium_points_held_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, favorite_team_foil_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, wager_tokens_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, wager_tokens_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, active_effects_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, unlocked_chat_wheel_message_ranges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, rank_wager_tokens_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints_AccountPoints, rank_wager_tokens_max_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  10,
  ~0u,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyEventPoints, account_points_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, win_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, valid_until_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBattleCupVictory, trophy_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyBattleCupVictoryList, winners_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABroadcastNotification, message_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, status_effect_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, sequence_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, wearable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, inscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemHeroStatue, tournament_drop_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, status_effect_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, sequence_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, wearable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, inscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CProtoItemTeamShowcase, style_),
  2,
  3,
  0,
  4,
  ~0u,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerAbilityUpgrade, time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, unit_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchAdditionalUnitInventory, items_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, permanent_buff_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchPlayerPermanentBuff, stack_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, is_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMatchHeroSelectEvent, hero_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, fantasy_league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, season_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProcessFantasyScheduledEvent, reference_data_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemQuery, item_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemResponse, has_item_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProQuery, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCIsProResponse, is_pro_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsQuery, itemdef_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAHasItemDefsResponse, has_items_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfo, player_card_item_ids_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, player_card_item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo, packed_bonuses_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCGetPlayerCardItemInfoResponse, player_card_infos_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToGCFantasySetMatchLeague, league_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, location_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAMapLocationState, completed_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeagueAdminList, account_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, xpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumTimestampedData, item_purchases_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameTimeline, tags_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CCompendiumGameList, games_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, class_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CAdditionalEquipSlot, def_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_source_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, inflictor_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_illusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_attacker_hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_illusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_visible_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stun_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, slow_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_on_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ability_toggle_off_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, ability_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, location_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, gold_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, timestamp_raw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, xp_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, obs_wards_placed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_player3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, stack_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, hidden_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_target_building_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, neutral_camp_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, rune_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, assist_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_heal_save_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, is_ultimate_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, attacker_hero_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_hero_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, xpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, event_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, target_is_self_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, invisibility_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, damage_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, networth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, building_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_elapsed_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, silence_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, heal_from_lifesteal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purged_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, spell_evaded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, motion_controller_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, long_range_kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purge_ability_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, modifier_purge_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, root_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, total_unit_death_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, aura_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, armor_debuff_modifier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACombatLogEntry, no_physical_damage_modifier_),
  65,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  12,
  13,
  9,
  10,
  11,
  16,
  17,
  14,
  15,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  36,
  37,
  34,
  35,
  ~0u,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  48,
  45,
  49,
  46,
  47,
  52,
  53,
  50,
  51,
  54,
  55,
  56,
  57,
  58,
  59,
  61,
  60,
  62,
  63,
  64,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Trophy, trophy_score_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Stat, stat_score_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, serialized_item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Item, item_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Hero, hero_losses_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Emoticon, emoticon_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot_Team, team_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, trophy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, item_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, emoticon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard_Slot, team_),
  6,
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, background_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, badge_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAProfileCard, recent_battle_cup_victory_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, slot_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, int_param_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, created_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, sequence_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, challenge_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, attempts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, complete_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPlayerChallenge, quest_rank_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRerollPlayerChallenge, sequence_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCRerollPlayerChallengeResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, top_custom_games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCTopCustomGamesList, game_of_the_day_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, only_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_TeamDetails, cheers_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, sold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_ItemDetails, stackcount_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityDetails, cooldown_max_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, victimid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_HeroToHeroStats, assists_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_AbilityList, id_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, heroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxhealthpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, healthregenrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manapoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, maxmanapoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, manaregenrate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_agility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_intelligence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_movespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, base_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, agility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, intelligence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, movespeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, kill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, death_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, assists_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, denies_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, lh_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, xp_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, net_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, respawn_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, ultimate_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_buyback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, stashitems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, itemshoppinglist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, levelpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, hero_to_hero_stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PlayerDetails, has_ultimate_mana_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  ~0u,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  41,
  42,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, death_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_KillDetails, killer_player_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_BroadcasterDetails, selected_graph_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, hero_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_PickBanDetails, team_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, is_nightstalker_night_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, teamid_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, picks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, broadcasters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, single_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_MatchDetails, cheers_peak_),
  0,
  1,
  2,
  3,
  7,
  4,
  5,
  6,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  9,
  10,
  8,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_LocationStats, stats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats, loc_stats_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_kill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_tower_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, graph_rax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats_GraphData, team_loc_stats_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, buildings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, graph_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStats, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_TeamDetails, players_),
  1,
  2,
  0,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, heroid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, kill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, death_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, assists_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, denies_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, lh_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_PlayerDetails, y_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_BuildingDetails, destroyed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, matchid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, steam_broadcaster_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_MatchDetails, league_id_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse_GraphData, graph_gold_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, buildings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, graph_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARealtimeGameStatsTerse, delta_frame_),
  0,
  ~0u,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientMatchGroupsVersion, matchgroups_version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, won_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, xpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASDOHeroStatsHistory, assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, itemdef_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, importance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, base_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, repeat_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, reward_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards_Reward, effect_index_),
  0,
  2,
  3,
  4,
  5,
  6,
  1,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonRewards, rewards_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, max_grants_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, normal_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, tracking_achievement_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, achievement_goal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements_Achievement, achievement_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonAchievements, achievements_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, min_raw_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Choice, max_raw_value_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Answers, answer_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_QueryKeyValues, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, choices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, selection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, start_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, reward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, answers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, query_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, query_bind_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, lock_on_selection_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_Prediction, use_answer_value_ranges_),
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  ~0u,
  1,
  ~0u,
  9,
  10,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, question_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, choices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, required_heroes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, query_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, query_values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, answer_resolution_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, points_to_grant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, reward_action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, debug_force_selection_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions_InGamePrediction, raw_value_type_),
  3,
  0,
  4,
  5,
  1,
  ~0u,
  ~0u,
  2,
  ~0u,
  6,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, predictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_predictions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_count_per_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASeasonPredictions, in_game_prediction_voting_period_minutes_),
  ~0u,
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, dota_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player_CustomGameData, winner_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_6_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_7_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, item_8_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, expected_team_contribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, previous_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, rank_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, solo_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, seasonal_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, leaver_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, xp_per_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, gold_spent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, time_last_seen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, player_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, support_ability_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, feeding_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, search_rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, search_rank_uncertainty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, rank_uncertainty_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, hero_play_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_hero_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_tower_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_hero_healing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, scaled_assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_farm_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, support_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, claimed_misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, misses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, ability_upgrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, additional_units_inventory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, permanent_buffs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, custom_game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, active_battle_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_Player, bot_difficulty_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  53,
  54,
  55,
  11,
  12,
  13,
  14,
  44,
  45,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  0,
  30,
  46,
  31,
  32,
  33,
  35,
  34,
  49,
  50,
  51,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  ~0u,
  ~0u,
  ~0u,
  1,
  47,
  48,
  52,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterInfo, name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, broadcaster_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_BroadcasterChannel, language_code_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch_CustomGameData, map_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, starttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tower_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, barracks_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, cluster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, first_blood_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, replay_salt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, server_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, human_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, average_skill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, game_balance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, leagueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, positive_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, negative_votes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, picks_bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, replay_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, broadcaster_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, engine_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, custom_game_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, private_metadata_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, radiant_team_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, dire_team_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, match_outcome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, tournament_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatch, pre_game_duration_),
  5,
  6,
  ~0u,
  7,
  ~0u,
  ~0u,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  0,
  1,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  ~0u,
  28,
  27,
  29,
  30,
  2,
  3,
  31,
  32,
  ~0u,
  33,
  4,
  34,
  35,
  36,
  38,
  39,
  40,
  41,
  37,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, stat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard_StatModifier, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPlayerCard, stat_modifier_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, match_completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, cs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, gpm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, tower_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, roshan_kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, teamfight_participation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, wards_placed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, camps_stacked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, runes_grabbed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, first_blood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerStats, stuns_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAFantasyPlayerMatchStats, matches_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, mode_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, desire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_entity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Mode, target_z_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, action_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot_Action, action_target_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, player_owner_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, power_current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, power_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, move_target_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, active_mode_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, execution_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo_Bot, action_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_push_lane_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_defend_lane_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_top_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_mid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_lane_bot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, desire_farm_roshan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, execution_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTABotDebugInfo, rune_status_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 73, sizeof(CSODOTAGameAccountClient)},
  { 141, 148, sizeof(CMsgLobbyEventPoints_ChatWheelMessageRange)},
  { 150, 170, sizeof(CMsgLobbyEventPoints_AccountPoints)},
  { 185, 192, sizeof(CMsgLobbyEventPoints)},
  { 194, 208, sizeof(CMsgBattleCupVictory)},
  { 217, 223, sizeof(CMsgLobbyBattleCupVictoryList)},
  { 224, 230, sizeof(CMsgDOTABroadcastNotification)},
  { 231, 244, sizeof(CProtoItemHeroStatue)},
  { 252, 264, sizeof(CProtoItemTeamShowcase)},
  { 271, 278, sizeof(CMatchPlayerAbilityUpgrade)},
  { 280, 287, sizeof(CMatchAdditionalUnitInventory)},
  { 289, 296, sizeof(CMatchPlayerPermanentBuff)},
  { 298, 306, sizeof(CMatchHeroSelectEvent)},
  { 309, 319, sizeof(CMsgDOTAProcessFantasyScheduledEvent)},
  { 324, 331, sizeof(CMsgDOTAHasItemQuery)},
  { 333, 339, sizeof(CMsgDOTAHasItemResponse)},
  { 340, 346, sizeof(CMsgGCIsProQuery)},
  { 347, 353, sizeof(CMsgGCIsProResponse)},
  { 354, 361, sizeof(CMsgDOTAHasItemDefsQuery)},
  { 363, 369, sizeof(CMsgDOTAHasItemDefsResponse)},
  { 370, 377, sizeof(CMsgGCGetPlayerCardItemInfo)},
  { 379, 387, sizeof(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo)},
  { 390, 396, sizeof(CMsgGCGetPlayerCardItemInfoResponse)},
  { 397, 404, sizeof(CMsgGCToGCFantasySetMatchLeague)},
  { 406, 414, sizeof(CSODOTAMapLocationState)},
  { 417, 423, sizeof(CMsgLeagueAdminList)},
  { 424, 435, sizeof(CCompendiumTimestampedData)},
  { 441, 448, sizeof(CCompendiumGameTimeline)},
  { 450, 456, sizeof(CCompendiumGameList)},
  { 457, 465, sizeof(CAdditionalEquipSlot)},
  { 468, 540, sizeof(CMsgDOTACombatLogEntry)},
  { 607, 614, sizeof(CMsgDOTAProfileCard_Slot_Trophy)},
  { 616, 623, sizeof(CMsgDOTAProfileCard_Slot_Stat)},
  { 625, 632, sizeof(CMsgDOTAProfileCard_Slot_Item)},
  { 634, 642, sizeof(CMsgDOTAProfileCard_Slot_Hero)},
  { 645, 651, sizeof(CMsgDOTAProfileCard_Slot_Emoticon)},
  { 652, 658, sizeof(CMsgDOTAProfileCard_Slot_Team)},
  { 659, 671, sizeof(CMsgDOTAProfileCard_Slot)},
  { 678, 690, sizeof(CMsgDOTAProfileCard)},
  { 697, 716, sizeof(CSODOTAPlayerChallenge)},
  { 730, 737, sizeof(CMsgClientToGCRerollPlayerChallenge)},
  { 739, 745, sizeof(CMsgGCRerollPlayerChallengeResponse)},
  { 746, 753, sizeof(CMsgGCTopCustomGamesList)},
  { 755, 768, sizeof(CMsgDOTARealtimeGameStats_TeamDetails)},
  { 776, 786, sizeof(CMsgDOTARealtimeGameStats_ItemDetails)},
  { 791, 801, sizeof(CMsgDOTARealtimeGameStats_AbilityDetails)},
  { 806, 814, sizeof(CMsgDOTARealtimeGameStats_HeroToHeroStats)},
  { 817, 823, sizeof(CMsgDOTARealtimeGameStats_AbilityList)},
  { 824, 878, sizeof(CMsgDOTARealtimeGameStats_PlayerDetails)},
  { 927, 940, sizeof(CMsgDOTARealtimeGameStats_BuildingDetails)},
  { 948, 956, sizeof(CMsgDOTARealtimeGameStats_KillDetails)},
  { 959, 967, sizeof(CMsgDOTARealtimeGameStats_BroadcasterDetails)},
  { 970, 977, sizeof(CMsgDOTARealtimeGameStats_PickBanDetails)},
  { 979, 1000, sizeof(CMsgDOTARealtimeGameStats_MatchDetails)},
  { 1016, 1022, sizeof(CMsgDOTARealtimeGameStats_GraphData_LocationStats)},
  { 1023, 1029, sizeof(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats)},
  { 1030, 1041, sizeof(CMsgDOTARealtimeGameStats_GraphData)},
  { 1047, 1057, sizeof(CMsgDOTARealtimeGameStats)},
  { 1062, 1073, sizeof(CMsgDOTARealtimeGameStatsTerse_TeamDetails)},
  { 1079, 1098, sizeof(CMsgDOTARealtimeGameStatsTerse_PlayerDetails)},
  { 1112, 1125, sizeof(CMsgDOTARealtimeGameStatsTerse_BuildingDetails)},
  { 1133, 1145, sizeof(CMsgDOTARealtimeGameStatsTerse_MatchDetails)},
  { 1152, 1158, sizeof(CMsgDOTARealtimeGameStatsTerse_GraphData)},
  { 1159, 1169, sizeof(CMsgDOTARealtimeGameStatsTerse)},
  { 1174, 1180, sizeof(CMsgGCToClientMatchGroupsVersion)},
  { 1181, 1196, sizeof(CMsgDOTASDOHeroStatsHistory)},
  { 1206, 1220, sizeof(CMsgDOTASeasonRewards_Reward)},
  { 1229, 1235, sizeof(CMsgDOTASeasonRewards)},
  { 1236, 1250, sizeof(CMsgDOTASeasonAchievements_Achievement)},
  { 1259, 1265, sizeof(CMsgDOTASeasonAchievements)},
  { 1266, 1275, sizeof(CMsgDOTASeasonPredictions_Choice)},
  { 1279, 1285, sizeof(CMsgDOTASeasonPredictions_Answers)},
  { 1286, 1293, sizeof(CMsgDOTASeasonPredictions_QueryKeyValues)},
  { 1295, 1316, sizeof(CMsgDOTASeasonPredictions_Prediction)},
  { 1332, 1351, sizeof(CMsgDOTASeasonPredictions_InGamePrediction)},
  { 1365, 1374, sizeof(CMsgDOTASeasonPredictions)},
  { 1378, 1385, sizeof(CMsgDOTAMatch_Player_CustomGameData)},
  { 1387, 1451, sizeof(CMsgDOTAMatch_Player)},
  { 1510, 1517, sizeof(CMsgDOTAMatch_BroadcasterInfo)},
  { 1519, 1528, sizeof(CMsgDOTAMatch_BroadcasterChannel)},
  { 1532, 1539, sizeof(CMsgDOTAMatch_CustomGameData)},
  { 1541, 1593, sizeof(CMsgDOTAMatch)},
  { 1640, 1647, sizeof(CMsgPlayerCard_StatModifier)},
  { 1649, 1656, sizeof(CMsgPlayerCard)},
  { 1658, 1683, sizeof(CMsgDOTAFantasyPlayerStats)},
  { 1703, 1709, sizeof(CMsgDOTAFantasyPlayerMatchStats)},
  { 1710, 1721, sizeof(CMsgDOTABotDebugInfo_Bot_Mode)},
  { 1727, 1734, sizeof(CMsgDOTABotDebugInfo_Bot_Action)},
  { 1736, 1753, sizeof(CMsgDOTABotDebugInfo_Bot)},
  { 1765, 1783, sizeof(CMsgDOTABotDebugInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAGameAccountClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyEventPoints_AccountPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyEventPoints_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBattleCupVictory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyBattleCupVictoryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABroadcastNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CProtoItemHeroStatue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CProtoItemTeamShowcase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMatchPlayerAbilityUpgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMatchAdditionalUnitInventory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMatchPlayerPermanentBuff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMatchHeroSelectEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProcessFantasyScheduledEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAHasItemQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAHasItemResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCIsProQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCIsProResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAHasItemDefsQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAHasItemDefsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPlayerCardItemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCGetPlayerCardItemInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToGCFantasySetMatchLeague_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAMapLocationState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLeagueAdminList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCompendiumTimestampedData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCompendiumGameTimeline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CCompendiumGameList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CAdditionalEquipSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACombatLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Trophy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Stat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Hero_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Emoticon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_Slot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAProfileCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCRerollPlayerChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCRerollPlayerChallengeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCTopCustomGamesList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_TeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_ItemDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_AbilityList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_KillDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_MatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_GraphData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARealtimeGameStatsTerse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientMatchGroupsVersion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASDOHeroStatsHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonRewards_Reward_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonRewards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonAchievements_Achievement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonAchievements_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_Choice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_Answers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_Prediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_InGamePrediction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASeasonPredictions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_Player_CustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_BroadcasterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_BroadcasterChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_CustomGameData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPlayerCard_StatModifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPlayerCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAFantasyPlayerMatchStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABotDebugInfo_Bot_Mode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABotDebugInfo_Bot_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABotDebugInfo_Bot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTABotDebugInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 90);
}

}  // namespace

void TableStruct::Shutdown() {
  _CSODOTAGameAccountClient_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgLobbyEventPoints_AccountPoints_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgLobbyEventPoints_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgBattleCupVictory_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgLobbyBattleCupVictoryList_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgDOTABroadcastNotification_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CProtoItemHeroStatue_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CProtoItemTeamShowcase_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMatchPlayerAbilityUpgrade_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMatchAdditionalUnitInventory_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMatchPlayerPermanentBuff_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMatchHeroSelectEvent_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTAProcessFantasyScheduledEvent_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTAHasItemQuery_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTAHasItemResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgGCIsProQuery_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgGCIsProResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTAHasItemDefsQuery_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTAHasItemDefsResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgGCGetPlayerCardItemInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgGCGetPlayerCardItemInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgGCToGCFantasySetMatchLeague_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CSODOTAMapLocationState_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgLeagueAdminList_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CCompendiumTimestampedData_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CCompendiumGameTimeline_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CCompendiumGameList_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CAdditionalEquipSlot_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgDOTACombatLogEntry_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgDOTAProfileCard_Slot_Trophy_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgDOTAProfileCard_Slot_Stat_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgDOTAProfileCard_Slot_Item_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgDOTAProfileCard_Slot_Hero_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgDOTAProfileCard_Slot_Team_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgDOTAProfileCard_Slot_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgDOTAProfileCard_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CSODOTAPlayerChallenge_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgClientToGCRerollPlayerChallenge_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgGCRerollPlayerChallengeResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgGCTopCustomGamesList_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgDOTARealtimeGameStats_AbilityList_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgDOTARealtimeGameStats_KillDetails_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgDOTARealtimeGameStats_GraphData_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgDOTARealtimeGameStats_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
  _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_.Shutdown();
  delete file_level_metadata[62].reflection;
  _CMsgDOTARealtimeGameStatsTerse_default_instance_.Shutdown();
  delete file_level_metadata[63].reflection;
  _CMsgGCToClientMatchGroupsVersion_default_instance_.Shutdown();
  delete file_level_metadata[64].reflection;
  _CMsgDOTASDOHeroStatsHistory_default_instance_.Shutdown();
  delete file_level_metadata[65].reflection;
  _CMsgDOTASeasonRewards_Reward_default_instance_.Shutdown();
  delete file_level_metadata[66].reflection;
  _CMsgDOTASeasonRewards_default_instance_.Shutdown();
  delete file_level_metadata[67].reflection;
  _CMsgDOTASeasonAchievements_Achievement_default_instance_.Shutdown();
  delete file_level_metadata[68].reflection;
  _CMsgDOTASeasonAchievements_default_instance_.Shutdown();
  delete file_level_metadata[69].reflection;
  _CMsgDOTASeasonPredictions_Choice_default_instance_.Shutdown();
  delete file_level_metadata[70].reflection;
  _CMsgDOTASeasonPredictions_Answers_default_instance_.Shutdown();
  delete file_level_metadata[71].reflection;
  _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_.Shutdown();
  delete file_level_metadata[72].reflection;
  _CMsgDOTASeasonPredictions_Prediction_default_instance_.Shutdown();
  delete file_level_metadata[73].reflection;
  _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_.Shutdown();
  delete file_level_metadata[74].reflection;
  _CMsgDOTASeasonPredictions_default_instance_.Shutdown();
  delete file_level_metadata[75].reflection;
  _CMsgDOTAMatch_Player_CustomGameData_default_instance_.Shutdown();
  delete file_level_metadata[76].reflection;
  _CMsgDOTAMatch_Player_default_instance_.Shutdown();
  delete file_level_metadata[77].reflection;
  _CMsgDOTAMatch_BroadcasterInfo_default_instance_.Shutdown();
  delete file_level_metadata[78].reflection;
  _CMsgDOTAMatch_BroadcasterChannel_default_instance_.Shutdown();
  delete file_level_metadata[79].reflection;
  _CMsgDOTAMatch_CustomGameData_default_instance_.Shutdown();
  delete file_level_metadata[80].reflection;
  _CMsgDOTAMatch_default_instance_.Shutdown();
  delete file_level_metadata[81].reflection;
  _CMsgPlayerCard_StatModifier_default_instance_.Shutdown();
  delete file_level_metadata[82].reflection;
  _CMsgPlayerCard_default_instance_.Shutdown();
  delete file_level_metadata[83].reflection;
  _CMsgDOTAFantasyPlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[84].reflection;
  _CMsgDOTAFantasyPlayerMatchStats_default_instance_.Shutdown();
  delete file_level_metadata[85].reflection;
  _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_.Shutdown();
  delete file_level_metadata[86].reflection;
  _CMsgDOTABotDebugInfo_Bot_Action_default_instance_.Shutdown();
  delete file_level_metadata[87].reflection;
  _CMsgDOTABotDebugInfo_Bot_default_instance_.Shutdown();
  delete file_level_metadata[88].reflection;
  _CMsgDOTABotDebugInfo_default_instance_.Shutdown();
  delete file_level_metadata[89].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  _CSODOTAGameAccountClient_default_instance_.DefaultConstruct();
  _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_.DefaultConstruct();
  _CMsgLobbyEventPoints_AccountPoints_default_instance_.DefaultConstruct();
  _CMsgLobbyEventPoints_default_instance_.DefaultConstruct();
  _CMsgBattleCupVictory_default_instance_.DefaultConstruct();
  _CMsgLobbyBattleCupVictoryList_default_instance_.DefaultConstruct();
  _CMsgDOTABroadcastNotification_default_instance_.DefaultConstruct();
  _CProtoItemHeroStatue_default_instance_.DefaultConstruct();
  _CProtoItemTeamShowcase_default_instance_.DefaultConstruct();
  _CMatchPlayerAbilityUpgrade_default_instance_.DefaultConstruct();
  _CMatchAdditionalUnitInventory_default_instance_.DefaultConstruct();
  _CMatchPlayerPermanentBuff_default_instance_.DefaultConstruct();
  _CMatchHeroSelectEvent_default_instance_.DefaultConstruct();
  _CMsgDOTAProcessFantasyScheduledEvent_default_instance_.DefaultConstruct();
  _CMsgDOTAHasItemQuery_default_instance_.DefaultConstruct();
  _CMsgDOTAHasItemResponse_default_instance_.DefaultConstruct();
  _CMsgGCIsProQuery_default_instance_.DefaultConstruct();
  _CMsgGCIsProResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAHasItemDefsQuery_default_instance_.DefaultConstruct();
  _CMsgDOTAHasItemDefsResponse_default_instance_.DefaultConstruct();
  _CMsgGCGetPlayerCardItemInfo_default_instance_.DefaultConstruct();
  _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_.DefaultConstruct();
  _CMsgGCGetPlayerCardItemInfoResponse_default_instance_.DefaultConstruct();
  _CMsgGCToGCFantasySetMatchLeague_default_instance_.DefaultConstruct();
  _CSODOTAMapLocationState_default_instance_.DefaultConstruct();
  _CMsgLeagueAdminList_default_instance_.DefaultConstruct();
  _CCompendiumTimestampedData_default_instance_.DefaultConstruct();
  _CCompendiumGameTimeline_default_instance_.DefaultConstruct();
  _CCompendiumGameList_default_instance_.DefaultConstruct();
  _CAdditionalEquipSlot_default_instance_.DefaultConstruct();
  _CMsgDOTACombatLogEntry_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Trophy_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Stat_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Item_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Hero_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_Team_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_default_instance_.DefaultConstruct();
  _CSODOTAPlayerChallenge_default_instance_.DefaultConstruct();
  _CMsgClientToGCRerollPlayerChallenge_default_instance_.DefaultConstruct();
  _CMsgGCRerollPlayerChallengeResponse_default_instance_.DefaultConstruct();
  _CMsgGCTopCustomGamesList_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_AbilityList_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_KillDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_GraphData_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStats_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_.DefaultConstruct();
  _CMsgDOTARealtimeGameStatsTerse_default_instance_.DefaultConstruct();
  _CMsgGCToClientMatchGroupsVersion_default_instance_.DefaultConstruct();
  _CMsgDOTASDOHeroStatsHistory_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonRewards_Reward_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonRewards_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonAchievements_Achievement_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonAchievements_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_Choice_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_Answers_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_Prediction_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_.DefaultConstruct();
  _CMsgDOTASeasonPredictions_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_Player_CustomGameData_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_Player_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_BroadcasterInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_BroadcasterChannel_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_CustomGameData_default_instance_.DefaultConstruct();
  _CMsgDOTAMatch_default_instance_.DefaultConstruct();
  _CMsgPlayerCard_StatModifier_default_instance_.DefaultConstruct();
  _CMsgPlayerCard_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerStats_default_instance_.DefaultConstruct();
  _CMsgDOTAFantasyPlayerMatchStats_default_instance_.DefaultConstruct();
  _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_.DefaultConstruct();
  _CMsgDOTABotDebugInfo_Bot_Action_default_instance_.DefaultConstruct();
  _CMsgDOTABotDebugInfo_Bot_default_instance_.DefaultConstruct();
  _CMsgDOTABotDebugInfo_default_instance_.DefaultConstruct();
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->trophy_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::internal_default_instance());
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->stat_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Stat*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Stat::internal_default_instance());
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->item_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Item*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Item::internal_default_instance());
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->hero_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Hero*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Hero::internal_default_instance());
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->emoticon_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::internal_default_instance());
  _CMsgDOTAProfileCard_Slot_default_instance_.get_mutable()->team_ = const_cast< ::proto::dota::CMsgDOTAProfileCard_Slot_Team*>(
      ::proto::dota::CMsgDOTAProfileCard_Slot_Team::internal_default_instance());
  _CMsgDOTAProfileCard_default_instance_.get_mutable()->recent_battle_cup_victory_ = const_cast< ::proto::dota::CMsgBattleCupVictory*>(
      ::proto::dota::CMsgBattleCupVictory::internal_default_instance());
  _CMsgDOTARealtimeGameStats_default_instance_.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails*>(
      ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::internal_default_instance());
  _CMsgDOTARealtimeGameStats_default_instance_.get_mutable()->graph_data_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData*>(
      ::proto::dota::CMsgDOTARealtimeGameStats_GraphData::internal_default_instance());
  _CMsgDOTARealtimeGameStatsTerse_default_instance_.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::internal_default_instance());
  _CMsgDOTARealtimeGameStatsTerse_default_instance_.get_mutable()->graph_data_ = const_cast< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData*>(
      ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::internal_default_instance());
  _CMsgDOTAMatch_Player_default_instance_.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgDOTAMatch_Player_CustomGameData*>(
      ::proto::dota::CMsgDOTAMatch_Player_CustomGameData::internal_default_instance());
  _CMsgDOTAMatch_default_instance_.get_mutable()->custom_game_data_ = const_cast< ::proto::dota::CMsgDOTAMatch_CustomGameData*>(
      ::proto::dota::CMsgDOTAMatch_CustomGameData::internal_default_instance());
  _CMsgDOTABotDebugInfo_Bot_default_instance_.get_mutable()->action_ = const_cast< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action*>(
      ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\034dota_gcmessages_common.proto\022\nproto.do"
      "ta\032\023steammessages.proto\032\026gcsdk_gcmessage"
      "s.proto\032\027dota_shared_enums.proto\"\365\021\n\030CSO"
      "DOTAGameAccountClient\022\030\n\naccount_id\030\001 \001("
      "\rB\004\200\246\035\001\022\014\n\004wins\030\003 \001(\r\022\016\n\006losses\030\004 \001(\r\022\n\n"
      "\002xp\030\014 \001(\r\022\r\n\005level\030\r \001(\r\022\025\n\rinitial_skil"
      "l\030\016 \001(\r\022\024\n\014leaver_count\030\017 \001(\r\022\036\n\026seconda"
      "ry_leaver_count\030: \001(\r\022\037\n\027low_priority_un"
      "til_date\030\022 \001(\r\022$\n\034prevent_text_chat_unti"
      "l_date\030\024 \001(\r\022 \n\030prevent_voice_until_date"
      "\030\025 \001(\r\022+\n#prevent_public_text_chat_until"
      "_date\030V \001(\r\022 \n\030last_abandoned_game_date\030"
      "\026 \001(\r\022*\n\"last_secondary_abandoned_game_d"
      "ate\030; \001(\r\022\034\n\024leaver_penalty_count\030\027 \001(\r\022"
      "\035\n\025completed_game_streak\030\030 \001(\r\022\020\n\010teachi"
      "ng\030\034 \001(\r\022\022\n\nleadership\030\035 \001(\r\022\020\n\010friendly"
      "\030\036 \001(\r\022\021\n\tforgiving\030\037 \001(\r\022#\n\033account_dis"
      "abled_until_date\030& \001(\r\022\036\n\026account_disabl"
      "ed_count\030\' \001(\r\022\030\n\020showcase_hero_id\030( \001(\r"
      "\022!\n\031match_disabled_until_date\030) \001(\r\022\034\n\024m"
      "atch_disabled_count\030* \001(\r\022J\n\024partner_acc"
      "ount_type\030, \001(\0162\036.proto.dota.PartnerAcco"
      "untType:\014PARTNER_NONE\022\035\n\025partner_account"
      "_state\030- \001(\r\022%\n\035shutdownlawterminatetime"
      "stamp\030/ \001(\r\022$\n\034low_priority_games_remain"
      "ing\0300 \001(\r\022\030\n\020competitive_rank\0301 \001(\r\022#\n\033c"
      "alibration_games_remaining\0303 \001(\r\022\035\n\025solo"
      "_competitive_rank\0304 \001(\r\022(\n solo_calibrat"
      "ion_games_remaining\0306 \001(\r\022\031\n\021recruitment"
      "_level\0307 \001(\r\022\035\n\025has_new_notifications\0308 "
      "\001(\010\022\027\n\017is_league_admin\0309 \001(\010\022\033\n\023casual_g"
      "ames_played\030< \001(\r\022%\n\035solo_competitive_ga"
      "mes_played\030= \001(\r\022&\n\036party_competitive_ga"
      "mes_played\030> \001(\r\022\037\n\027casual_1v1_games_pla"
      "yed\030A \001(\r\022%\n\035competitive_team_games_play"
      "ed\030B \001(\r\022\"\n\032curr_all_hero_challenge_id\030C"
      " \001(\r\022\030\n\020play_time_points\030D \001(\r\022\025\n\raccoun"
      "t_flags\030E \001(\r\022\027\n\017play_time_level\030F \001(\r\022+"
      "\n#player_behavior_seq_num_last_report\030G "
      "\001(\r\022)\n!player_behavior_score_last_report"
      "\030H \001(\r\022\'\n\037player_behavior_report_old_dat"
      "a\030I \001(\010\022\033\n\023tourney_skill_level\030J \001(\r\022)\n!"
      "tourney_recent_participation_date\030U \001(\r\022"
      "\025\n\rfavorite_team\030W \001(\r\022 \n\030anchored_phone"
      "_number_id\030X \001(\004\022)\n!ranked_matchmaking_b"
      "an_until_date\030Y \001(\r\022\032\n\022recent_game_time_"
      "1\030Z \001(\r\022\032\n\022recent_game_time_2\030[ \001(\r\022\032\n\022r"
      "ecent_game_time_3\030\\ \001(\r\022$\n\034general_seaso"
      "nal_ranked_rank\030] \001(\r\022;\n3general_seasona"
      "l_ranked_calibration_games_remaining\030^ \001"
      "(\r\022,\n$general_seasonal_ranked_games_play"
      "ed\030_ \001(\r\022)\n!general_seasonal_ranked_rank"
      "_peak\030` \001(\r\022)\n!general_seasonal_rank_tra"
      "nsferred\030a \001(\010\022!\n\031solo_seasonal_ranked_r"
      "ank\030b \001(\r\0228\n0solo_seasonal_ranked_calibr"
      "ation_games_remaining\030c \001(\r\022)\n!solo_seas"
      "onal_ranked_games_played\030d \001(\r\022&\n\036solo_s"
      "easonal_ranked_rank_peak\030e \001(\r\022&\n\036solo_s"
      "easonal_rank_transferred\030f \001(\010\022\034\n\024favori"
      "te_team_packed\030g \001(\004\022\032\n\022recent_report_ti"
      "me\030h \001(\r\"\246\005\n\024CMsgLobbyEventPoints\022\020\n\010eve"
      "nt_id\030\001 \001(\r\022F\n\016account_points\030\002 \003(\0132..pr"
      "oto.dota.CMsgLobbyEventPoints.AccountPoi"
      "nts\032I\n\025ChatWheelMessageRange\022\030\n\020message_"
      "id_start\030\001 \001(\r\022\026\n\016message_id_end\030\002 \001(\r\032\350"
      "\003\n\rAccountPoints\022\022\n\naccount_id\030\001 \001(\r\022\025\n\r"
      "normal_points\030\002 \001(\r\022\026\n\016premium_points\030\003 "
      "\001(\r\022\r\n\005owned\030\004 \001(\010\022\025\n\rfavorite_team\030\005 \001("
      "\r\022\033\n\023favorite_team_level\030\006 \001(\r\022\023\n\013points"
      "_held\030\007 \001(\r\022\033\n\023premium_points_held\030\010 \001(\r"
      "\022 \n\030favorite_team_foil_level\030\t \001(\r\022\036\n\026wa"
      "ger_tokens_remaining\030\n \001(\r\022\030\n\020wager_toke"
      "ns_max\030\013 \001(\r\022\033\n\023active_effects_mask\030\014 \001("
      "\004\022b\n\"unlocked_chat_wheel_message_ranges\030"
      "\r \003(\01326.proto.dota.CMsgLobbyEventPoints."
      "ChatWheelMessageRange\022#\n\033rank_wager_toke"
      "ns_remaining\030\016 \001(\r\022\035\n\025rank_wager_tokens_"
      "max\030\017 \001(\r\"\306\001\n\024CMsgBattleCupVictory\022\022\n\nac"
      "count_id\030\001 \001(\r\022\020\n\010win_date\030\002 \001(\r\022\023\n\013vali"
      "d_until\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\025\n\rto"
      "urnament_id\030\005 \001(\r\022\023\n\013division_id\030\006 \001(\r\022\017"
      "\n\007team_id\030\007 \001(\r\022\016\n\006streak\030\010 \001(\r\022\021\n\ttroph"
      "y_id\030\t \001(\r\"R\n\035CMsgLobbyBattleCupVictoryL"
      "ist\0221\n\007winners\030\001 \003(\0132 .proto.dota.CMsgBa"
      "ttleCupVictory\"0\n\035CMsgDOTABroadcastNotif"
      "ication\022\017\n\007message\030\001 \001(\t\"\271\001\n\024CProtoItemH"
      "eroStatue\022\017\n\007hero_id\030\001 \001(\r\022\033\n\023status_eff"
      "ect_index\030\002 \001(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r"
      "\n\005cycle\030\004 \001(\002\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscr"
      "iption\030\006 \001(\t\022\r\n\005style\030\007 \003(\r\022\027\n\017tournamen"
      "t_drop\030\010 \001(\010\"\242\001\n\026CProtoItemTeamShowcase\022"
      "\017\n\007hero_id\030\001 \001(\r\022\033\n\023status_effect_index\030"
      "\002 \001(\r\022\025\n\rsequence_name\030\003 \001(\t\022\r\n\005cycle\030\004 "
      "\001(\002\022\020\n\010wearable\030\005 \003(\r\022\023\n\013inscription\030\006 \001"
      "(\t\022\r\n\005style\030\007 \003(\r\";\n\032CMatchPlayerAbility"
      "Upgrade\022\017\n\007ability\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\"A"
      "\n\035CMatchAdditionalUnitInventory\022\021\n\tunit_"
      "name\030\001 \001(\t\022\r\n\005items\030\002 \003(\r\"H\n\031CMatchPlaye"
      "rPermanentBuff\022\026\n\016permanent_buff\030\001 \001(\r\022\023"
      "\n\013stack_count\030\002 \001(\r\"G\n\025CMatchHeroSelectE"
      "vent\022\017\n\007is_pick\030\001 \001(\010\022\014\n\004team\030\002 \001(\r\022\017\n\007h"
      "ero_id\030\003 \001(\r\"\213\001\n$CMsgDOTAProcessFantasyS"
      "cheduledEvent\022\r\n\005event\030\001 \001(\r\022\021\n\ttimestam"
      "p\030\002 \001(\r\022\031\n\021fantasy_league_id\030\003 \001(\r\022\016\n\006se"
      "ason\030\004 \001(\r\022\026\n\016reference_data\030\005 \001(\r\";\n\024CM"
      "sgDOTAHasItemQuery\022\022\n\naccount_id\030\001 \001(\r\022\017"
      "\n\007item_id\030\002 \001(\004\"+\n\027CMsgDOTAHasItemRespon"
      "se\022\020\n\010has_item\030\001 \001(\010\"&\n\020CMsgGCIsProQuery"
      "\022\022\n\naccount_id\030\001 \001(\r\"%\n\023CMsgGCIsProRespo"
      "nse\022\016\n\006is_pro\030\001 \001(\010\"C\n\030CMsgDOTAHasItemDe"
      "fsQuery\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013itemdef_i"
      "ds\030\002 \003(\r\"0\n\033CMsgDOTAHasItemDefsResponse\022"
      "\021\n\thas_items\030\001 \001(\010\"O\n\033CMsgGCGetPlayerCar"
      "dItemInfo\022\022\n\naccount_id\030\001 \001(\r\022\034\n\024player_"
      "card_item_ids\030\002 \003(\004\"\333\001\n#CMsgGCGetPlayerC"
      "ardItemInfoResponse\022Y\n\021player_card_infos"
      "\030\001 \003(\0132>.proto.dota.CMsgGCGetPlayerCardI"
      "temInfoResponse.PlayerCardInfo\032Y\n\016Player"
      "CardInfo\022\033\n\023player_card_item_id\030\001 \001(\004\022\022\n"
      "\naccount_id\030\002 \001(\r\022\026\n\016packed_bonuses\030\003 \001("
      "\004\"F\n\037CMsgGCToGCFantasySetMatchLeague\022\020\n\010"
      "match_id\030\001 \001(\004\022\021\n\tleague_id\030\002 \001(\r\"a\n\027CSO"
      "DOTAMapLocationState\022\030\n\naccount_id\030\001 \001(\r"
      "B\004\200\246\035\001\022\031\n\013location_id\030\002 \001(\005B\004\200\246\035\001\022\021\n\tcom"
      "pleted\030\003 \001(\010\"*\n\023CMsgLeagueAdminList\022\023\n\013a"
      "ccount_ids\030\001 \003(\r\"\200\001\n\032CCompendiumTimestam"
      "pedData\022\021\n\tgame_time\030\001 \001(\r\022\013\n\003gpm\030\002 \001(\r\022"
      "\013\n\003xpm\030\003 \001(\r\022\r\n\005kills\030\004 \001(\r\022\016\n\006deaths\030\005 "
      "\001(\r\022\026\n\016item_purchases\030\006 \003(\r\"]\n\027CCompendi"
      "umGameTimeline\0224\n\004data\030\001 \003(\0132&.proto.dot"
      "a.CCompendiumTimestampedData\022\014\n\004tags\030\002 \003"
      "(\t\"I\n\023CCompendiumGameList\0222\n\005games\030\001 \003(\013"
      "2#.proto.dota.CCompendiumGameTimeline\"L\n"
      "\024CAdditionalEquipSlot\022\020\n\010class_id\030\001 \001(\r\022"
      "\017\n\007slot_id\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r\"\273\r\n\026"
      "CMsgDOTACombatLogEntry\022F\n\004type\030\001 \001(\0162 .p"
      "roto.dota.DOTA_COMBATLOG_TYPES:\026DOTA_COM"
      "BATLOG_INVALID\022\023\n\013target_name\030\002 \001(\r\022\032\n\022t"
      "arget_source_name\030\003 \001(\r\022\025\n\rattacker_name"
      "\030\004 \001(\r\022\032\n\022damage_source_name\030\005 \001(\r\022\026\n\016in"
      "flictor_name\030\006 \001(\r\022\034\n\024is_attacker_illusi"
      "on\030\007 \001(\010\022\030\n\020is_attacker_hero\030\010 \001(\010\022\032\n\022is"
      "_target_illusion\030\t \001(\010\022\026\n\016is_target_hero"
      "\030\n \001(\010\022\032\n\022is_visible_radiant\030\013 \001(\010\022\027\n\017is"
      "_visible_dire\030\014 \001(\010\022\r\n\005value\030\r \001(\r\022\016\n\006he"
      "alth\030\016 \001(\005\022\021\n\ttimestamp\030\017 \001(\002\022\025\n\rstun_du"
      "ration\030\020 \001(\002\022\025\n\rslow_duration\030\021 \001(\002\022\034\n\024i"
      "s_ability_toggle_on\030\022 \001(\010\022\035\n\025is_ability_"
      "toggle_off\030\023 \001(\010\022\025\n\rability_level\030\024 \001(\r\022"
      "\022\n\nlocation_x\030\025 \001(\002\022\022\n\nlocation_y\030\026 \001(\002\022"
      "\023\n\013gold_reason\030\027 \001(\r\022\025\n\rtimestamp_raw\030\030 "
      "\001(\002\022\031\n\021modifier_duration\030\031 \001(\002\022\021\n\txp_rea"
      "son\030\032 \001(\r\022\021\n\tlast_hits\030\033 \001(\r\022\025\n\rattacker"
      "_team\030\034 \001(\r\022\023\n\013target_team\030\035 \001(\r\022\030\n\020obs_"
      "wards_placed\030\036 \001(\r\022\026\n\016assist_player0\030\037 \001"
      "(\r\022\026\n\016assist_player1\030  \001(\r\022\026\n\016assist_pla"
      "yer2\030! \001(\r\022\026\n\016assist_player3\030\" \001(\r\022\023\n\013st"
      "ack_count\030# \001(\r\022\027\n\017hidden_modifier\030$ \001(\010"
      "\022\032\n\022is_target_building\030% \001(\010\022\031\n\021neutral_"
      "camp_type\030& \001(\r\022\021\n\trune_type\030\' \001(\r\022\026\n\016as"
      "sist_players\030( \003(\r\022\024\n\014is_heal_save\030) \001(\010"
      "\022\033\n\023is_ultimate_ability\030* \001(\010\022\033\n\023attacke"
      "r_hero_level\030+ \001(\r\022\031\n\021target_hero_level\030"
      ", \001(\r\022\013\n\003xpm\030- \001(\r\022\013\n\003gpm\030. \001(\r\022\026\n\016event"
      "_location\030/ \001(\r\022\026\n\016target_is_self\0300 \001(\010\022"
      "\023\n\013damage_type\0301 \001(\r\022\035\n\025invisibility_mod"
      "ifier\0302 \001(\010\022\027\n\017damage_category\0303 \001(\r\022\020\n\010"
      "networth\0304 \001(\r\022\025\n\rbuilding_type\0305 \001(\r\022!\n"
      "\031modifier_elapsed_duration\0306 \001(\002\022\030\n\020sile"
      "nce_modifier\0307 \001(\010\022\033\n\023heal_from_lifestea"
      "l\0308 \001(\010\022\027\n\017modifier_purged\0309 \001(\010\022\024\n\014spel"
      "l_evaded\030: \001(\010\022\"\n\032motion_controller_modi"
      "fier\030; \001(\010\022\027\n\017long_range_kill\030< \001(\010\022\036\n\026m"
      "odifier_purge_ability\030= \001(\r\022\032\n\022modifier_"
      "purge_npc\030> \001(\r\022\025\n\rroot_modifier\030\? \001(\010\022\036"
      "\n\026total_unit_death_count\030@ \001(\r\022\025\n\raura_m"
      "odifier\030A \001(\010\022\035\n\025armor_debuff_modifier\030B"
      " \001(\010\022#\n\033no_physical_damage_modifier\030C \001("
      "\010\"\331\010\n\023CMsgDOTAProfileCard\022\022\n\naccount_id\030"
      "\001 \001(\r\022\034\n\024background_def_index\030\002 \001(\r\0223\n\005s"
      "lots\030\003 \003(\0132$.proto.dota.CMsgDOTAProfileC"
      "ard.Slot\022\024\n\014badge_points\030\004 \001(\r\022\024\n\014event_"
      "points\030\005 \001(\r\022\020\n\010event_id\030\006 \001(\r\022C\n\031recent"
      "_battle_cup_victory\030\007 \001(\0132 .proto.dota.C"
      "MsgBattleCupVictory\032\301\005\n\004Slot\022\017\n\007slot_id\030"
      "\001 \001(\r\022;\n\006trophy\030\002 \001(\0132+.proto.dota.CMsgD"
      "OTAProfileCard.Slot.Trophy\0227\n\004stat\030\003 \001(\013"
      "2).proto.dota.CMsgDOTAProfileCard.Slot.S"
      "tat\0227\n\004item\030\004 \001(\0132).proto.dota.CMsgDOTAP"
      "rofileCard.Slot.Item\0227\n\004hero\030\005 \001(\0132).pro"
      "to.dota.CMsgDOTAProfileCard.Slot.Hero\022\?\n"
      "\010emoticon\030\006 \001(\0132-.proto.dota.CMsgDOTAPro"
      "fileCard.Slot.Emoticon\0227\n\004team\030\007 \001(\0132).p"
      "roto.dota.CMsgDOTAProfileCard.Slot.Team\032"
      "1\n\006Trophy\022\021\n\ttrophy_id\030\001 \001(\r\022\024\n\014trophy_s"
      "core\030\002 \001(\r\032f\n\004Stat\022J\n\007stat_id\030\001 \001(\0162\'.pr"
      "oto.dota.CMsgDOTAProfileCard.EStatID:\020k_"
      "eStat_SoloRank\022\022\n\nstat_score\030\002 \001(\r\0320\n\004It"
      "em\022\027\n\017serialized_item\030\001 \001(\014\022\017\n\007item_id\030\002"
      " \001(\004\032\?\n\004Hero\022\017\n\007hero_id\030\001 \001(\r\022\021\n\thero_wi"
      "ns\030\002 \001(\r\022\023\n\013hero_losses\030\003 \001(\r\032\037\n\010Emotico"
      "n\022\023\n\013emoticon_id\030\001 \001(\r\032\027\n\004Team\022\017\n\007team_i"
      "d\030\001 \001(\r\"\223\001\n\007EStatID\022\024\n\020k_eStat_SoloRank\020"
      "\001\022\025\n\021k_eStat_PartyRank\020\002\022\020\n\014k_eStat_Wins"
      "\020\003\022\024\n\020k_eStat_Commends\020\004\022\027\n\023k_eStat_Game"
      "sPlayed\020\005\022\032\n\026k_eStat_FirstMatchDate\020\006\"\216\003"
      "\n\026CSODOTAPlayerChallenge\022\030\n\naccount_id\030\001"
      " \001(\rB\004\200\246\035\001\022\026\n\010event_id\030\002 \001(\rB\004\200\246\035\001\022\025\n\007sl"
      "ot_id\030\003 \001(\rB\004\200\246\035\001\022\026\n\016challenge_type\030\004 \001("
      "\r\022\023\n\013int_param_0\030\005 \001(\r\022\023\n\013int_param_1\030\006 "
      "\001(\r\022\024\n\014created_time\030\007 \001(\r\022\021\n\tcompleted\030\010"
      " \001(\r\022\023\n\013sequence_id\030\t \001(\r\022\026\n\016challenge_t"
      "ier\030\n \001(\r\022\r\n\005flags\030\013 \001(\r\022\020\n\010attempts\030\014 \001"
      "(\r\022\026\n\016complete_limit\030\r \001(\r\022\022\n\nquest_rank"
      "\030\016 \001(\r\"F\n\006EFlags\022\"\n\036eFlag_InstantRerollU"
      "ncompleted\020\001\022\030\n\024eFlag_QuestChallenge\020\002\"L"
      "\n#CMsgClientToGCRerollPlayerChallenge\022\020\n"
      "\010event_id\030\001 \001(\r\022\023\n\013sequence_id\030\003 \001(\r\"\373\001\n"
      "#CMsgGCRerollPlayerChallengeResponse\022X\n\006"
      "result\030\001 \001(\01627.proto.dota.CMsgGCRerollPl"
      "ayerChallengeResponse.EResult:\017eResult_S"
      "uccess\"z\n\007EResult\022\023\n\017eResult_Success\020\000\022\023"
      "\n\017eResult_Dropped\020\001\022\024\n\020eResult_NotFound\020"
      "\002\022\026\n\022eResult_CantReroll\020\003\022\027\n\023eResult_Ser"
      "verError\020\004\"M\n\030CMsgGCTopCustomGamesList\022\030"
      "\n\020top_custom_games\030\001 \003(\004\022\027\n\017game_of_the_"
      "day\030\002 \001(\004\"\357\033\n\031CMsgDOTARealtimeGameStats\022"
      "A\n\005match\030\001 \001(\01322.proto.dota.CMsgDOTAReal"
      "timeGameStats.MatchDetails\022@\n\005teams\030\002 \003("
      "\01321.proto.dota.CMsgDOTARealtimeGameStats"
      ".TeamDetails\022H\n\tbuildings\030\003 \003(\01325.proto."
      "dota.CMsgDOTARealtimeGameStats.BuildingD"
      "etails\022C\n\ngraph_data\030\004 \001(\0132/.proto.dota."
      "CMsgDOTARealtimeGameStats.GraphData\022\023\n\013d"
      "elta_frame\030\005 \001(\010\032\321\001\n\013TeamDetails\022\023\n\013team"
      "_number\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_n"
      "ame\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\r\n\005score\030\005 "
      "\001(\r\022D\n\007players\030\006 \003(\01323.proto.dota.CMsgDO"
      "TARealtimeGameStats.PlayerDetails\022\021\n\tonl"
      "y_team\030\007 \001(\010\022\016\n\006cheers\030\010 \001(\r\032W\n\013ItemDeta"
      "ils\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004time\030\003 "
      "\001(\005\022\014\n\004sold\030\004 \001(\010\022\022\n\nstackcount\030\005 \001(\r\032a\n"
      "\016AbilityDetails\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001("
      "\t\022\r\n\005level\030\003 \001(\r\022\020\n\010cooldown\030\004 \001(\002\022\024\n\014co"
      "oldown_max\030\005 \001(\002\032C\n\017HeroToHeroStats\022\020\n\010v"
      "ictimid\030\001 \001(\r\022\r\n\005kills\030\002 \001(\r\022\017\n\007assists\030"
      "\003 \001(\r\032\031\n\013AbilityList\022\n\n\002id\030\001 \003(\r\032\247\n\n\rPla"
      "yerDetails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010playeri"
      "d\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006h"
      "eroid\030\005 \001(\r\022\024\n\014healthpoints\030\006 \001(\r\022\027\n\017max"
      "healthpoints\030\007 \001(\r\022\027\n\017healthregenrate\030\010 "
      "\001(\002\022\022\n\nmanapoints\030\t \001(\r\022\025\n\rmaxmanapoints"
      "\030\n \001(\r\022\025\n\rmanaregenrate\030\013 \001(\002\022\025\n\rbase_st"
      "rength\030\014 \001(\r\022\024\n\014base_agility\030\r \001(\r\022\031\n\021ba"
      "se_intelligence\030\016 \001(\r\022\022\n\nbase_armor\030\017 \001("
      "\005\022\026\n\016base_movespeed\030\020 \001(\r\022\023\n\013base_damage"
      "\030\021 \001(\r\022\020\n\010strength\030\022 \001(\r\022\017\n\007agility\030\023 \001("
      "\r\022\024\n\014intelligence\030\024 \001(\r\022\r\n\005armor\030\025 \001(\005\022\021"
      "\n\tmovespeed\030\026 \001(\r\022\016\n\006damage\030\027 \001(\r\022\023\n\013her"
      "o_damage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022G\n\t"
      "abilities\030\032 \003(\01324.proto.dota.CMsgDOTARea"
      "ltimeGameStats.AbilityDetails\022\r\n\005level\030\033"
      " \001(\r\022\022\n\nkill_count\030\034 \001(\r\022\023\n\013death_count\030"
      "\035 \001(\r\022\025\n\rassists_count\030\036 \001(\r\022\024\n\014denies_c"
      "ount\030\037 \001(\r\022\020\n\010lh_count\030  \001(\r\022\024\n\014hero_hea"
      "ling\030! \001(\r\022\024\n\014gold_per_min\030\" \001(\r\022\022\n\nxp_p"
      "er_min\030# \001(\r\022\020\n\010net_gold\030$ \001(\r\022\014\n\004gold\030%"
      " \001(\r\022\t\n\001x\030& \001(\002\022\t\n\001y\030\' \001(\002\022\024\n\014respawn_ti"
      "me\030( \001(\005\022\031\n\021ultimate_cooldown\030) \001(\r\022\023\n\013h"
      "as_buyback\030* \001(\010\022@\n\005items\030+ \003(\01321.proto."
      "dota.CMsgDOTARealtimeGameStats.ItemDetai"
      "ls\022E\n\nstashitems\030, \003(\01321.proto.dota.CMsg"
      "DOTARealtimeGameStats.ItemDetails\022K\n\020ite"
      "mshoppinglist\030- \003(\01321.proto.dota.CMsgDOT"
      "ARealtimeGameStats.ItemDetails\022F\n\013levelp"
      "oints\030. \003(\01321.proto.dota.CMsgDOTARealtim"
      "eGameStats.AbilityList\022Q\n\022hero_to_hero_s"
      "tats\030/ \003(\01325.proto.dota.CMsgDOTARealtime"
      "GameStats.HeroToHeroStats\022\024\n\014has_ultimat"
      "e\0300 \001(\010\022\031\n\021has_ultimate_mana\0301 \001(\010\032\203\001\n\017B"
      "uildingDetails\022\014\n\004team\030\002 \001(\r\022\017\n\007heading\030"
      "\003 \001(\002\022\014\n\004lane\030\004 \001(\r\022\014\n\004tier\030\005 \001(\r\022\014\n\004typ"
      "e\030\006 \001(\r\022\t\n\001x\030\007 \001(\002\022\t\n\001y\030\010 \001(\002\022\021\n\tdestroy"
      "ed\030\t \001(\010\032N\n\013KillDetails\022\021\n\tplayer_id\030\001 \001"
      "(\r\022\022\n\ndeath_time\030\002 \001(\005\022\030\n\020killer_player_"
      "id\030\003 \001(\r\032V\n\022BroadcasterDetails\022\021\n\tplayer"
      "_id\030\001 \001(\r\022\025\n\rselected_hero\030\002 \001(\r\022\026\n\016sele"
      "cted_graph\030\003 \001(\r\032,\n\016PickBanDetails\022\014\n\004he"
      "ro\030\001 \001(\r\022\014\n\004team\030\002 \001(\r\032\252\004\n\014MatchDetails\022"
      "\027\n\017server_steam_id\030\001 \001(\006\022\017\n\007matchid\030\002 \001("
      "\004\022\021\n\ttimestamp\030\003 \001(\r\022\023\n\013time_of_day\030\004 \001("
      "\002\022\035\n\025is_nightstalker_night\030\005 \001(\010\022\021\n\tgame"
      "_time\030\006 \001(\005\022\026\n\016teamid_radiant\030\010 \001(\r\022\023\n\013t"
      "eamid_dire\030\t \001(\r\022C\n\005picks\030\n \003(\01324.proto."
      "dota.CMsgDOTARealtimeGameStats.PickBanDe"
      "tails\022B\n\004bans\030\013 \003(\01324.proto.dota.CMsgDOT"
      "ARealtimeGameStats.PickBanDetails\022@\n\005kil"
      "ls\030\014 \003(\01321.proto.dota.CMsgDOTARealtimeGa"
      "meStats.KillDetails\022N\n\014broadcasters\030\r \003("
      "\01328.proto.dota.CMsgDOTARealtimeGameStats"
      ".BroadcasterDetails\022\021\n\tgame_mode\030\016 \001(\r\022\021"
      "\n\tleague_id\030\017 \001(\r\022\023\n\013single_team\030\020 \001(\010\022\023"
      "\n\013cheers_peak\030\021 \001(\r\032\205\004\n\tGraphData\022\022\n\ngra"
      "ph_gold\030\001 \003(\005\022\020\n\010graph_xp\030\002 \003(\005\022\022\n\ngraph"
      "_kill\030\003 \003(\005\022\023\n\013graph_tower\030\004 \003(\005\022\021\n\tgrap"
      "h_rax\030\005 \003(\005\022Y\n\016team_loc_stats\030\006 \003(\0132A.pr"
      "oto.dota.CMsgDOTARealtimeGameStats.Graph"
      "Data.TeamLocationStats\032\036\n\rLocationStats\022"
      "\r\n\005stats\030\001 \003(\005\032e\n\021TeamLocationStats\022P\n\tl"
      "oc_stats\030\001 \003(\0132=.proto.dota.CMsgDOTAReal"
      "timeGameStats.GraphData.LocationStats\"[\n"
      "\005eStat\022\023\n\017CreepGoldEarned\020\000\022\022\n\016KillGoldE"
      "arned\020\001\022\033\n\027DeathAndBuybackGoldLost\020\002\022\014\n\010"
      "XPEarned\020\003\"W\n\teLocation\022\013\n\007BotLane\020\000\022\013\n\007"
      "MidLane\020\001\022\013\n\007TopLane\020\002\022\n\n\006Jungle\020\003\022\014\n\010An"
      "cients\020\004\022\t\n\005Other\020\005\"\346\010\n\036CMsgDOTARealtime"
      "GameStatsTerse\022F\n\005match\030\001 \001(\01327.proto.do"
      "ta.CMsgDOTARealtimeGameStatsTerse.MatchD"
      "etails\022E\n\005teams\030\002 \003(\01326.proto.dota.CMsgD"
      "OTARealtimeGameStatsTerse.TeamDetails\022M\n"
      "\tbuildings\030\003 \003(\0132:.proto.dota.CMsgDOTARe"
      "altimeGameStatsTerse.BuildingDetails\022H\n\n"
      "graph_data\030\004 \001(\01324.proto.dota.CMsgDOTARe"
      "altimeGameStatsTerse.GraphData\022\023\n\013delta_"
      "frame\030\005 \001(\010\032\263\001\n\013TeamDetails\022\023\n\013team_numb"
      "er\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tteam_name\030\003"
      " \001(\t\022\021\n\tteam_logo\030\004 \001(\006\022\r\n\005score\030\005 \001(\r\022I"
      "\n\007players\030\006 \003(\01328.proto.dota.CMsgDOTARea"
      "ltimeGameStatsTerse.PlayerDetails\032\373\001\n\rPl"
      "ayerDetails\022\021\n\taccountid\030\001 \001(\r\022\020\n\010player"
      "id\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\014\n\004team\030\004 \001(\r\022\016\n\006"
      "heroid\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\022\n\nkill_coun"
      "t\030\007 \001(\r\022\023\n\013death_count\030\010 \001(\r\022\025\n\rassists_"
      "count\030\t \001(\r\022\024\n\014denies_count\030\n \001(\r\022\020\n\010lh_"
      "count\030\013 \001(\r\022\014\n\004gold\030\014 \001(\r\022\t\n\001x\030\r \001(\002\022\t\n\001"
      "y\030\016 \001(\002\032\203\001\n\017BuildingDetails\022\014\n\004team\030\001 \001("
      "\r\022\017\n\007heading\030\002 \001(\002\022\014\n\004type\030\003 \001(\r\022\014\n\004lane"
      "\030\004 \001(\r\022\014\n\004tier\030\005 \001(\r\022\t\n\001x\030\006 \001(\002\022\t\n\001y\030\007 \001"
      "(\002\022\021\n\tdestroyed\030\010 \001(\010\032\253\001\n\014MatchDetails\022\027"
      "\n\017server_steam_id\030\001 \001(\006\022\017\n\007matchid\030\002 \001(\004"
      "\022\021\n\ttimestamp\030\003 \001(\r\022\021\n\tgame_time\030\004 \001(\005\022%"
      "\n\035steam_broadcaster_account_ids\030\006 \003(\r\022\021\n"
      "\tgame_mode\030\007 \001(\r\022\021\n\tleague_id\030\010 \001(\r\032\037\n\tG"
      "raphData\022\022\n\ngraph_gold\030\001 \003(\005\"\?\n CMsgGCTo"
      "ClientMatchGroupsVersion\022\033\n\023matchgroups_"
      "version\030\001 \001(\r\"\301\001\n\033CMsgDOTASDOHeroStatsHi"
      "story\022\020\n\010match_id\030\001 \001(\004\022\021\n\tgame_mode\030\002 \001"
      "(\r\022\022\n\nlobby_type\030\003 \001(\r\022\022\n\nstart_time\030\004 \001"
      "(\r\022\013\n\003won\030\005 \001(\010\022\013\n\003gpm\030\006 \001(\r\022\013\n\003xpm\030\007 \001("
      "\r\022\r\n\005kills\030\010 \001(\r\022\016\n\006deaths\030\t \001(\r\022\017\n\007assi"
      "sts\030\n \001(\r\"\252\003\n\025CMsgDOTASeasonRewards\0229\n\007r"
      "ewards\030\001 \003(\0132(.proto.dota.CMsgDOTASeason"
      "Rewards.Reward\032\353\001\n\006Reward\022\014\n\004name\030\001 \001(\t\022"
      "\017\n\007itemdef\030\002 \001(\r\022\022\n\nimportance\030\003 \001(\r\022\022\n\n"
      "base_level\030\004 \001(\r\022\024\n\014repeat_level\030\005 \001(\r\022L"
      "\n\013reward_type\030\006 \001(\0162-.proto.dota.CMsgDOT"
      "ASeasonRewards.ERewardType:\010EconItem\022\r\n\005"
      "image\030\007 \001(\t\022\021\n\taction_id\030\010 \001(\r\022\024\n\014effect"
      "_index\030\t \001(\r\"h\n\013ERewardType\022\014\n\010EconItem\020"
      "\000\022\020\n\014MysteryWheel\020\001\022\021\n\rAbilityEffect\020\002\022\t"
      "\n\005Other\020\003\022\033\n\027MysteryWheelPointsBased\020\004\"\271"
      "\002\n\032CMsgDOTASeasonAchievements\022H\n\014achieve"
      "ments\030\001 \003(\01322.proto.dota.CMsgDOTASeasonA"
      "chievements.Achievement\032\320\001\n\013Achievement\022"
      "\014\n\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\r\n\005im"
      "age\030\003 \001(\t\022\021\n\taction_id\030\004 \001(\r\022\022\n\nmax_gran"
      "ts\030\005 \001(\r\022\025\n\rnormal_points\030\006 \001(\r\022\034\n\024track"
      "ing_achievement\030\007 \001(\r\022\030\n\020achievement_goa"
      "l\030\010 \001(\r\022\031\n\021achievement_level\030\t \001(\r\"\356\021\n\031C"
      "MsgDOTASeasonPredictions\022E\n\013predictions\030"
      "\001 \003(\01320.proto.dota.CMsgDOTASeasonPredict"
      "ions.Prediction\022S\n\023in_game_predictions\030\002"
      " \003(\01326.proto.dota.CMsgDOTASeasonPredicti"
      "ons.InGamePrediction\022)\n!in_game_predicti"
      "on_count_per_game\030\003 \001(\r\0220\n(in_game_predi"
      "ction_voting_period_minutes\030\004 \001(\r\032S\n\006Cho"
      "ice\022\r\n\005value\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\025\n\rmin_"
      "raw_value\030\003 \001(\r\022\025\n\rmax_raw_value\030\004 \001(\r\032\034"
      "\n\007Answers\022\021\n\tanswer_id\030\001 \001(\r\032-\n\016QueryKey"
      "Values\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032\314\004\n\n"
      "Prediction\022L\n\004type\030\001 \001(\01625.proto.dota.CM"
      "sgDOTASeasonPredictions.ePredictionType:"
      "\007Generic\022\020\n\010question\030\002 \001(\t\022=\n\007choices\030\003 "
      "\003(\0132,.proto.dota.CMsgDOTASeasonPredictio"
      "ns.Choice\022\024\n\014selection_id\030\004 \001(\r\022\022\n\nstart"
      "_date\030\005 \001(\r\022\021\n\tlock_date\030\006 \001(\r\022\016\n\006reward"
      "\030\007 \001(\r\022Q\n\013answer_type\030\010 \001(\01621.proto.dota"
      ".CMsgDOTASeasonPredictions.eAnswerType:\t"
      "SingleInt\022\021\n\tanswer_id\030\t \001(\r\022>\n\007answers\030"
      "\n \003(\0132-.proto.dota.CMsgDOTASeasonPredict"
      "ions.Answers\022\022\n\nquery_name\030\013 \001(\t\022\031\n\021quer"
      "y_bind_params\030\014 \003(\r\022\034\n\024lock_on_selection"
      "_id\030\r \001(\r\022\037\n\027lock_on_selection_value\030\016 \001"
      "(\r\022\035\n\025lock_on_selection_set\030\017 \001(\010\022\037\n\027use"
      "_answer_value_ranges\030\020 \001(\010\032\252\005\n\020InGamePre"
      "diction\022\n\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022L\n\004typ"
      "e\030\003 \001(\01625.proto.dota.CMsgDOTASeasonPredi"
      "ctions.ePredictionType:\007Generic\022W\n\005group"
      "\030\004 \001(\0162=.proto.dota.CMsgDOTASeasonPredic"
      "tions.eRandomSelectionGroup_t:\tEarlyGame"
      "\022\020\n\010question\030\005 \001(\t\022=\n\007choices\030\006 \003(\0132,.pr"
      "oto.dota.CMsgDOTASeasonPredictions.Choic"
      "e\022\027\n\017required_heroes\030\007 \003(\t\022\022\n\nquery_name"
      "\030\010 \001(\t\022J\n\014query_values\030\t \003(\01324.proto.dot"
      "a.CMsgDOTASeasonPredictions.QueryKeyValu"
      "es\022e\n\026answer_resolution_type\030\n \001(\01627.pro"
      "to.dota.CMsgDOTASeasonPredictions.eResol"
      "utionType_t:\014InvalidQuery\022\027\n\017points_to_g"
      "rant\030\013 \001(\r\022\025\n\rreward_action\030\014 \001(\r\022\035\n\025deb"
      "ug_force_selection\030\r \001(\r\022U\n\016raw_value_ty"
      "pe\030\016 \001(\01625.proto.dota.CMsgDOTASeasonPred"
      "ictions.eRawValueType_t:\006Number\"V\n\017ePred"
      "ictionType\022\013\n\007Generic\020\000\022\010\n\004Hero\020\001\022\010\n\004Tea"
      "m\020\002\022\n\n\006Player\020\003\022\013\n\007Special\020\004\022\t\n\005YesNo\020\005\""
      "\221\001\n\013eAnswerType\022\r\n\tSingleInt\020\000\022\017\n\013Single"
      "Float\020\001\022\017\n\013MultipleInt\020\002\022\021\n\rMultipleFloa"
      "t\020\003\022\016\n\nAnswerTeam\020\004\022\016\n\nSingleTime\020\005\022\020\n\014M"
      "ultipleTime\020\006\022\014\n\010NoAnswer\020\007\"\324\001\n\021eResolut"
      "ionType_t\022\020\n\014InvalidQuery\020\000\022\024\n\020FirstToPa"
      "ssQuery\020\001\022\023\n\017LastToPassQuery\020\002\022\026\n\022LastRe"
      "mainingQuery\020\003\022\022\n\016MaxToPassQuery\020\004\022\022\n\016Mi"
      "nToPassQuery\020\005\022\014\n\010SumQuery\020\006\022\031\n\025MaxTeamS"
      "umToPassQuery\020\007\022\031\n\025MinTeamSumToPassQuery"
      "\020\010\"N\n\027eRandomSelectionGroup_t\022\r\n\tEarlyGa"
      "me\020\000\022\013\n\007MidGame\020\001\022\014\n\010LateGame\020\002\022\t\n\005Count"
      "\020\003\"\'\n\017eRawValueType_t\022\n\n\006Number\020\000\022\010\n\004Tim"
      "e\020\001\"\334\031\n\rCMsgDOTAMatch\022\020\n\010duration\030\003 \001(\r\022"
      "\021\n\tstartTime\030\004 \001(\007\0221\n\007players\030\005 \003(\0132 .pr"
      "oto.dota.CMsgDOTAMatch.Player\022\020\n\010match_i"
      "d\030\006 \001(\004\022\024\n\014tower_status\030\010 \003(\r\022\027\n\017barrack"
      "s_status\030\t \003(\r\022\017\n\007cluster\030\n \001(\r\022\030\n\020first"
      "_blood_time\030\014 \001(\r\022\023\n\013replay_salt\030\r \001(\007\022\021"
      "\n\tserver_ip\030\016 \001(\007\022\023\n\013server_port\030\017 \001(\r\022\022"
      "\n\nlobby_type\030\020 \001(\r\022\025\n\rhuman_players\030\021 \001("
      "\r\022\025\n\raverage_skill\030\022 \001(\r\022\024\n\014game_balance"
      "\030\023 \001(\002\022\027\n\017radiant_team_id\030\024 \001(\r\022\024\n\014dire_"
      "team_id\030\025 \001(\r\022\020\n\010leagueid\030\026 \001(\r\022\031\n\021radia"
      "nt_team_name\030\027 \001(\t\022\026\n\016dire_team_name\030\030 \001"
      "(\t\022\031\n\021radiant_team_logo\030\031 \001(\004\022\026\n\016dire_te"
      "am_logo\030\032 \001(\004\022\035\n\025radiant_team_complete\030\033"
      " \001(\r\022\032\n\022dire_team_complete\030\034 \001(\r\022\026\n\016posi"
      "tive_votes\030\035 \001(\r\022\026\n\016negative_votes\030\036 \001(\r"
      "\022@\n\tgame_mode\030\037 \001(\0162\031.proto.dota.DOTA_Ga"
      "meMode:\022DOTA_GAMEMODE_NONE\0225\n\npicks_bans"
      "\030  \003(\0132!.proto.dota.CMatchHeroSelectEven"
      "t\022\025\n\rmatch_seq_num\030! \001(\004\022M\n\014replay_state"
      "\030\" \001(\0162%.proto.dota.CMsgDOTAMatch.Replay"
      "State:\020REPLAY_AVAILABLE\022\030\n\020radiant_guild"
      "_id\030# \001(\r\022\025\n\rdire_guild_id\030$ \001(\r\022\030\n\020radi"
      "ant_team_tag\030% \001(\t\022\025\n\rdire_team_tag\030& \001("
      "\t\022\021\n\tseries_id\030\' \001(\r\022\023\n\013series_type\030( \001("
      "\r\022J\n\024broadcaster_channels\030+ \003(\0132,.proto."
      "dota.CMsgDOTAMatch.BroadcasterChannel\022\016\n"
      "\006engine\030, \001(\r\022B\n\020custom_game_data\030- \001(\0132"
      "(.proto.dota.CMsgDOTAMatch.CustomGameDat"
      "a\022\023\n\013match_flags\030. \001(\r\022\034\n\024private_metada"
      "ta_key\030/ \001(\007\022\032\n\022radiant_team_score\0300 \001(\r"
      "\022\027\n\017dire_team_score\0301 \001(\r\022I\n\rmatch_outco"
      "me\0302 \001(\0162\031.proto.dota.EMatchOutcome:\027k_E"
      "MatchOutcome_Unknown\022\025\n\rtournament_id\0303 "
      "\001(\r\022\030\n\020tournament_round\0304 \001(\r\022\031\n\021pre_gam"
      "e_duration\0305 \001(\r\032\365\013\n\006Player\022\022\n\naccount_i"
      "d\030\001 \001(\r\022\023\n\013player_slot\030\002 \001(\r\022\017\n\007hero_id\030"
      "\003 \001(\r\022\016\n\006item_0\030\004 \001(\r\022\016\n\006item_1\030\005 \001(\r\022\016\n"
      "\006item_2\030\006 \001(\r\022\016\n\006item_3\030\007 \001(\r\022\016\n\006item_4\030"
      "\010 \001(\r\022\016\n\006item_5\030\t \001(\r\022\016\n\006item_6\030; \001(\r\022\016\n"
      "\006item_7\030< \001(\r\022\016\n\006item_8\030= \001(\r\022\"\n\032expecte"
      "d_team_contribution\030\n \001(\002\022\025\n\rscaled_metr"
      "ic\030\013 \001(\002\022\025\n\rprevious_rank\030\014 \001(\r\022\023\n\013rank_"
      "change\030\r \001(\021\022\021\n\tsolo_rank\0301 \001(\010\022\025\n\rseaso"
      "nal_rank\0305 \001(\010\022\r\n\005kills\030\016 \001(\r\022\016\n\006deaths\030"
      "\017 \001(\r\022\017\n\007assists\030\020 \001(\r\022\025\n\rleaver_status\030"
      "\021 \001(\r\022\014\n\004gold\030\022 \001(\r\022\021\n\tlast_hits\030\023 \001(\r\022\016"
      "\n\006denies\030\024 \001(\r\022\024\n\014gold_per_min\030\025 \001(\r\022\022\n\n"
      "XP_per_min\030\026 \001(\r\022\022\n\ngold_spent\030\027 \001(\r\022\023\n\013"
      "hero_damage\030\030 \001(\r\022\024\n\014tower_damage\030\031 \001(\r\022"
      "\024\n\014hero_healing\030\032 \001(\r\022\r\n\005level\030\033 \001(\r\022\026\n\016"
      "time_last_seen\030\034 \001(\r\022\023\n\013player_name\030\035 \001("
      "\t\022\035\n\025support_ability_value\030\036 \001(\r\022\030\n\020feed"
      "ing_detected\030  \001(\010\022\023\n\013search_rank\030\" \001(\r\022"
      "\037\n\027search_rank_uncertainty\030# \001(\r\022\037\n\027rank"
      "_uncertainty_change\030$ \001(\005\022\027\n\017hero_play_c"
      "ount\030% \001(\r\022\020\n\010party_id\030& \001(\006\022\032\n\022scaled_h"
      "ero_damage\0306 \001(\r\022\033\n\023scaled_tower_damage\030"
      "7 \001(\r\022\033\n\023scaled_hero_healing\0308 \001(\r\022\024\n\014sc"
      "aled_kills\030\' \001(\002\022\025\n\rscaled_deaths\030( \001(\002\022"
      "\026\n\016scaled_assists\030) \001(\002\022\031\n\021claimed_farm_"
      "gold\030* \001(\r\022\024\n\014support_gold\030+ \001(\r\022\026\n\016clai"
      "med_denies\030, \001(\r\022\026\n\016claimed_misses\030- \001(\r"
      "\022\016\n\006misses\030. \001(\r\022@\n\020ability_upgrades\030/ \003"
      "(\0132&.proto.dota.CMatchPlayerAbilityUpgra"
      "de\022M\n\032additional_units_inventory\0300 \003(\0132)"
      ".proto.dota.CMatchAdditionalUnitInventor"
      "y\022>\n\017permanent_buffs\0309 \003(\0132%.proto.dota."
      "CMatchPlayerPermanentBuff\022I\n\020custom_game"
      "_data\0302 \001(\0132/.proto.dota.CMsgDOTAMatch.P"
      "layer.CustomGameData\022\032\n\022active_battle_pa"
      "ss\0303 \001(\010\022\021\n\tnet_worth\0304 \001(\r\022\026\n\016bot_diffi"
      "culty\030: \001(\r\0323\n\016CustomGameData\022\021\n\tdota_te"
      "am\030\001 \001(\r\022\016\n\006winner\030\002 \001(\010\0323\n\017BroadcasterI"
      "nfo\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\032\234\001"
      "\n\022BroadcasterChannel\022\024\n\014country_code\030\001 \001"
      "(\t\022\023\n\013description\030\002 \001(\t\022D\n\021broadcaster_i"
      "nfos\030\003 \003(\0132).proto.dota.CMsgDOTAMatch.Br"
      "oadcasterInfo\022\025\n\rlanguage_code\030\004 \001(\t\032:\n\016"
      "CustomGameData\022\026\n\016custom_game_id\030\001 \001(\004\022\020"
      "\n\010map_name\030\002 \001(\t\"P\n\013ReplayState\022\024\n\020REPLA"
      "Y_AVAILABLE\020\000\022\027\n\023REPLAY_NOT_RECORDED\020\001\022\022"
      "\n\016REPLAY_EXPIRED\020\002\"\221\001\n\016CMsgPlayerCard\022\022\n"
      "\naccount_id\030\001 \001(\r\022>\n\rstat_modifier\030\002 \003(\013"
      "2\'.proto.dota.CMsgPlayerCard.StatModifie"
      "r\032+\n\014StatModifier\022\014\n\004stat\030\001 \001(\r\022\r\n\005value"
      "\030\002 \001(\r\"\251\003\n\032CMsgDOTAFantasyPlayerStats\022\031\n"
      "\021player_account_id\030\001 \001(\r\022\020\n\010match_id\030\002 \001"
      "(\004\022\027\n\017match_completed\030\003 \001(\010\022\017\n\007team_id\030\004"
      " \001(\r\022\021\n\tleague_id\030\005 \001(\r\022\r\n\005delay\030\006 \001(\r\022\021"
      "\n\tseries_id\030\007 \001(\r\022\023\n\013series_type\030\010 \001(\r\022\r"
      "\n\005kills\030\n \001(\r\022\016\n\006deaths\030\013 \001(\r\022\n\n\002cs\030\014 \001("
      "\r\022\013\n\003gpm\030\r \001(\002\022\023\n\013tower_kills\030\016 \001(\r\022\024\n\014r"
      "oshan_kills\030\017 \001(\r\022\037\n\027teamfight_participa"
      "tion\030\020 \001(\002\022\024\n\014wards_placed\030\021 \001(\r\022\025\n\rcamp"
      "s_stacked\030\022 \001(\r\022\025\n\rrunes_grabbed\030\023 \001(\r\022\023"
      "\n\013first_blood\030\024 \001(\r\022\r\n\005stuns\030\025 \001(\002\"Z\n\037CM"
      "sgDOTAFantasyPlayerMatchStats\0227\n\007matches"
      "\030\001 \003(\0132&.proto.dota.CMsgDOTAFantasyPlaye"
      "rStats\"\255\007\n\024CMsgDOTABotDebugInfo\0222\n\004bots\030"
      "\001 \003(\0132$.proto.dota.CMsgDOTABotDebugInfo."
      "Bot\022\034\n\024desire_push_lane_top\030\002 \001(\002\022\034\n\024des"
      "ire_push_lane_mid\030\003 \001(\002\022\034\n\024desire_push_l"
      "ane_bot\030\004 \001(\002\022\036\n\026desire_defend_lane_top\030"
      "\005 \001(\002\022\036\n\026desire_defend_lane_mid\030\006 \001(\002\022\036\n"
      "\026desire_defend_lane_bot\030\007 \001(\002\022\034\n\024desire_"
      "farm_lane_top\030\010 \001(\002\022\034\n\024desire_farm_lane_"
      "mid\030\t \001(\002\022\034\n\024desire_farm_lane_bot\030\n \001(\002\022"
      "\032\n\022desire_farm_roshan\030\013 \001(\002\022\026\n\016execution"
      "_time\030\014 \001(\002\022\023\n\013rune_status\030\r \003(\r\032\203\004\n\003Bot"
      "\022\027\n\017player_owner_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001"
      "(\r\022\022\n\ndifficulty\030\003 \001(\r\022\025\n\rpower_current\030"
      "\004 \001(\r\022\021\n\tpower_max\030\005 \001(\r\022\025\n\rmove_target_"
      "x\030\006 \001(\r\022\025\n\rmove_target_y\030\007 \001(\r\022\025\n\rmove_t"
      "arget_z\030\010 \001(\r\022\026\n\016active_mode_id\030\t \001(\r\022\026\n"
      "\016execution_time\030\n \001(\002\0228\n\005modes\030\013 \003(\0132).p"
      "roto.dota.CMsgDOTABotDebugInfo.Bot.Mode\022"
      ";\n\006action\030\014 \001(\0132+.proto.dota.CMsgDOTABot"
      "DebugInfo.Bot.Action\032t\n\004Mode\022\017\n\007mode_id\030"
      "\001 \001(\r\022\016\n\006desire\030\002 \001(\002\022\025\n\rtarget_entity\030\003"
      " \001(\r\022\020\n\010target_x\030\004 \001(\r\022\020\n\010target_y\030\005 \001(\r"
      "\022\020\n\010target_z\030\006 \001(\r\0322\n\006Action\022\021\n\taction_i"
      "d\030\001 \001(\r\022\025\n\raction_target\030\002 \001(\t*U\n\021ESpeci"
      "alPingValue\022\037\n\032k_ESpecialPingValue_NoDat"
      "a\020\376\177\022\037\n\032k_ESpecialPingValue_Failed\020\377\177*\206\005"
      "\n\022EDOTAGCSessionNeed\022 \n\034k_EDOTAGCSession"
      "Need_Unknown\020\000\022,\n(k_EDOTAGCSessionNeed_U"
      "serNoSessionNeeded\020d\022)\n%k_EDOTAGCSession"
      "Need_UserInOnlineGame\020e\022(\n$k_EDOTAGCSess"
      "ionNeed_UserInLocalGame\020f\022-\n)k_EDOTAGCSe"
      "ssionNeed_UserInUIWasConnected\020g\022/\n+k_ED"
      "OTAGCSessionNeed_UserInUINeverConnected\020"
      "h\022&\n\"k_EDOTAGCSessionNeed_UserTutorials\020"
      "i\0221\n-k_EDOTAGCSessionNeed_UserInUIWasCon"
      "nectedIdle\020j\0223\n/k_EDOTAGCSessionNeed_Use"
      "rInUINeverConnectedIdle\020k\022*\n%k_EDOTAGCSe"
      "ssionNeed_GameServerOnline\020\310\001\022)\n$k_EDOTA"
      "GCSessionNeed_GameServerLocal\020\311\001\022(\n#k_ED"
      "OTAGCSessionNeed_GameServerIdle\020\312\001\022)\n$k_"
      "EDOTAGCSessionNeed_GameServerRelay\020\313\001\022/\n"
      "*k_EDOTAGCSessionNeed_GameServerLocalUpl"
      "oad\020\314\001*\366\001\n\025DOTA_TournamentEvents\022\022\n\016TE_F"
      "IRST_BLOOD\020\000\022\017\n\013TE_GAME_END\020\001\022\021\n\rTE_MULT"
      "I_KILL\020\002\022\020\n\014TE_HERO_DENY\020\003\022\021\n\rTE_AEGIS_D"
      "ENY\020\004\022\023\n\017TE_AEGIS_STOLEN\020\005\022\016\n\nTE_GODLIKE"
      "\020\006\022\023\n\017TE_COURIER_KILL\020\007\022\017\n\013TE_ECHOSLAM\020\010"
      "\022\r\n\tTE_RAPIER\020\t\022\023\n\017TE_EARLY_ROSHAN\020\n\022\021\n\r"
      "TE_BLACK_HOLE\020\013*\362\n\n\024DOTA_COMBATLOG_TYPES"
      "\022#\n\026DOTA_COMBATLOG_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\031\n"
      "\025DOTA_COMBATLOG_DAMAGE\020\000\022\027\n\023DOTA_COMBATL"
      "OG_HEAL\020\001\022\037\n\033DOTA_COMBATLOG_MODIFIER_ADD"
      "\020\002\022\"\n\036DOTA_COMBATLOG_MODIFIER_REMOVE\020\003\022\030"
      "\n\024DOTA_COMBATLOG_DEATH\020\004\022\032\n\026DOTA_COMBATL"
      "OG_ABILITY\020\005\022\027\n\023DOTA_COMBATLOG_ITEM\020\006\022\033\n"
      "\027DOTA_COMBATLOG_LOCATION\020\007\022\027\n\023DOTA_COMBA"
      "TLOG_GOLD\020\010\022\035\n\031DOTA_COMBATLOG_GAME_STATE"
      "\020\t\022\025\n\021DOTA_COMBATLOG_XP\020\n\022\033\n\027DOTA_COMBAT"
      "LOG_PURCHASE\020\013\022\032\n\026DOTA_COMBATLOG_BUYBACK"
      "\020\014\022\"\n\036DOTA_COMBATLOG_ABILITY_TRIGGER\020\r\022\036"
      "\n\032DOTA_COMBATLOG_PLAYERSTATS\020\016\022\034\n\030DOTA_C"
      "OMBATLOG_MULTIKILL\020\017\022\035\n\031DOTA_COMBATLOG_K"
      "ILLSTREAK\020\020\022%\n!DOTA_COMBATLOG_TEAM_BUILD"
      "ING_KILL\020\021\022\036\n\032DOTA_COMBATLOG_FIRST_BLOOD"
      "\020\022\022#\n\037DOTA_COMBATLOG_MODIFIER_REFRESH\020\023\022"
      "%\n!DOTA_COMBATLOG_NEUTRAL_CAMP_STACK\020\024\022\036"
      "\n\032DOTA_COMBATLOG_PICKUP_RUNE\020\025\022%\n!DOTA_C"
      "OMBATLOG_REVEALED_INVISIBLE\020\026\022\035\n\031DOTA_CO"
      "MBATLOG_HERO_SAVED\020\027\022 \n\034DOTA_COMBATLOG_M"
      "ANA_RESTORED\020\030\022\037\n\033DOTA_COMBATLOG_HERO_LE"
      "VELUP\020\031\022#\n\037DOTA_COMBATLOG_BOTTLE_HEAL_AL"
      "LY\020\032\022 \n\034DOTA_COMBATLOG_ENDGAME_STATS\020\033\022$"
      "\n DOTA_COMBATLOG_INTERRUPT_CHANNEL\020\034\022\036\n\032"
      "DOTA_COMBATLOG_ALLIED_GOLD\020\035\022\036\n\032DOTA_COM"
      "BATLOG_AEGIS_TAKEN\020\036\022\036\n\032DOTA_COMBATLOG_M"
      "ANA_DAMAGE\020\037\022,\n(DOTA_COMBATLOG_PHYSICAL_"
      "DAMAGE_PREVENTED\020 \022 \n\034DOTA_COMBATLOG_UNI"
      "T_SUMMONED\020!\022\037\n\033DOTA_COMBATLOG_ATTACK_EV"
      "ADE\020\"\022\033\n\027DOTA_COMBATLOG_TREE_CUT\020#\022\"\n\036DO"
      "TA_COMBATLOG_SUCCESSFUL_SCAN\020$\022!\n\035DOTA_C"
      "OMBATLOG_END_KILLSTREAK\020%\022$\n DOTA_COMBAT"
      "LOG_BLOODSTONE_CHARGE\020&\022\"\n\036DOTA_COMBATLO"
      "G_CRITICAL_DAMAGE\020\'\022\037\n\033DOTA_COMBATLOG_SP"
      "ELL_ABSORB\020(B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 24339);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_gcsdk_5fgcmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fcommon_2eproto

const ::google::protobuf::EnumDescriptor* CMsgDOTAProfileCard_EStatID_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[0];
}
bool CMsgDOTAProfileCard_EStatID_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_SoloRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_PartyRank;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Wins;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_Commends;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_GamesPlayed;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::k_eStat_FirstMatchDate;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MIN;
const CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard::EStatID_MAX;
const int CMsgDOTAProfileCard::EStatID_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSODOTAPlayerChallenge_EFlags_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[1];
}
bool CSODOTAPlayerChallenge_EFlags_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::eFlag_InstantRerollUncompleted;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::eFlag_QuestChallenge;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MIN;
const CSODOTAPlayerChallenge_EFlags CSODOTAPlayerChallenge::EFlags_MAX;
const int CSODOTAPlayerChallenge::EFlags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgGCRerollPlayerChallengeResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[2];
}
bool CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Success;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_Dropped;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_NotFound;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_CantReroll;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::eResult_ServerError;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MIN;
const CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::EResult_MAX;
const int CMsgGCRerollPlayerChallengeResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eStat_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDOTARealtimeGameStats_GraphData_eStat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::CreepGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::KillGoldEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::DeathAndBuybackGoldLost;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::XPEarned;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eStat CMsgDOTARealtimeGameStats_GraphData::eStat_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eStat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTARealtimeGameStats_GraphData_eLocation_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[4];
}
bool CMsgDOTARealtimeGameStats_GraphData_eLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::BotLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::MidLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::TopLane;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Jungle;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Ancients;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::Other;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MIN;
const CMsgDOTARealtimeGameStats_GraphData_eLocation CMsgDOTARealtimeGameStats_GraphData::eLocation_MAX;
const int CMsgDOTARealtimeGameStats_GraphData::eLocation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonRewards_ERewardType_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[5];
}
bool CMsgDOTASeasonRewards_ERewardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::EconItem;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheel;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::AbilityEffect;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::Other;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::MysteryWheelPointsBased;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MIN;
const CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards::ERewardType_MAX;
const int CMsgDOTASeasonRewards::ERewardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_ePredictionType_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[6];
}
bool CMsgDOTASeasonPredictions_ePredictionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Generic;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Hero;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Team;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Player;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::Special;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::YesNo;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MIN;
const CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions::ePredictionType_MAX;
const int CMsgDOTASeasonPredictions::ePredictionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eAnswerType_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[7];
}
bool CMsgDOTASeasonPredictions_eAnswerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleInt;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleFloat;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::AnswerTeam;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::SingleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::MultipleTime;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::NoAnswer;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MIN;
const CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions::eAnswerType_MAX;
const int CMsgDOTASeasonPredictions::eAnswerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eResolutionType_t_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[8];
}
bool CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::InvalidQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::FirstToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::LastRemainingQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::SumQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MaxTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::MinTeamSumToPassQuery;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MIN;
const CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions::eResolutionType_t_MAX;
const int CMsgDOTASeasonPredictions::eResolutionType_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[9];
}
bool CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::EarlyGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::MidGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::LateGame;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::Count;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MIN;
const CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_MAX;
const int CMsgDOTASeasonPredictions::eRandomSelectionGroup_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTASeasonPredictions_eRawValueType_t_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[10];
}
bool CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Number;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::Time;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MIN;
const CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions::eRawValueType_t_MAX;
const int CMsgDOTASeasonPredictions::eRawValueType_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAMatch_ReplayState_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[11];
}
bool CMsgDOTAMatch_ReplayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_AVAILABLE;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_NOT_RECORDED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::REPLAY_EXPIRED;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MIN;
const CMsgDOTAMatch_ReplayState CMsgDOTAMatch::ReplayState_MAX;
const int CMsgDOTAMatch::ReplayState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ESpecialPingValue_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[12];
}
bool ESpecialPingValue_IsValid(int value) {
  switch (value) {
    case 16382:
    case 16383:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGCSessionNeed_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[13];
}
bool EDOTAGCSessionNeed_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_TournamentEvents_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[14];
}
bool DOTA_TournamentEvents_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_enum_descriptors[15];
}
bool DOTA_COMBATLOG_TYPES_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAGameAccountClient::kAccountIdFieldNumber;
const int CSODOTAGameAccountClient::kWinsFieldNumber;
const int CSODOTAGameAccountClient::kLossesFieldNumber;
const int CSODOTAGameAccountClient::kXpFieldNumber;
const int CSODOTAGameAccountClient::kLevelFieldNumber;
const int CSODOTAGameAccountClient::kInitialSkillFieldNumber;
const int CSODOTAGameAccountClient::kLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kSecondaryLeaverCountFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventVoiceUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kPreventPublicTextChatUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kLastAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLastSecondaryAbandonedGameDateFieldNumber;
const int CSODOTAGameAccountClient::kLeaverPenaltyCountFieldNumber;
const int CSODOTAGameAccountClient::kCompletedGameStreakFieldNumber;
const int CSODOTAGameAccountClient::kTeachingFieldNumber;
const int CSODOTAGameAccountClient::kLeadershipFieldNumber;
const int CSODOTAGameAccountClient::kFriendlyFieldNumber;
const int CSODOTAGameAccountClient::kForgivingFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kAccountDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kShowcaseHeroIdFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kMatchDisabledCountFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountTypeFieldNumber;
const int CSODOTAGameAccountClient::kPartnerAccountStateFieldNumber;
const int CSODOTAGameAccountClient::kShutdownlawterminatetimestampFieldNumber;
const int CSODOTAGameAccountClient::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kRecruitmentLevelFieldNumber;
const int CSODOTAGameAccountClient::kHasNewNotificationsFieldNumber;
const int CSODOTAGameAccountClient::kIsLeagueAdminFieldNumber;
const int CSODOTAGameAccountClient::kCasualGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kPartyCompetitiveGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCasual1V1GamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCompetitiveTeamGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kCurrAllHeroChallengeIdFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimePointsFieldNumber;
const int CSODOTAGameAccountClient::kAccountFlagsFieldNumber;
const int CSODOTAGameAccountClient::kPlayTimeLevelFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorSeqNumLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorScoreLastReportFieldNumber;
const int CSODOTAGameAccountClient::kPlayerBehaviorReportOldDataFieldNumber;
const int CSODOTAGameAccountClient::kTourneySkillLevelFieldNumber;
const int CSODOTAGameAccountClient::kTourneyRecentParticipationDateFieldNumber;
const int CSODOTAGameAccountClient::kFavoriteTeamFieldNumber;
const int CSODOTAGameAccountClient::kAnchoredPhoneNumberIdFieldNumber;
const int CSODOTAGameAccountClient::kRankedMatchmakingBanUntilDateFieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime1FieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime2FieldNumber;
const int CSODOTAGameAccountClient::kRecentGameTime3FieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kGeneralSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedCalibrationGamesRemainingFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedGamesPlayedFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankedRankPeakFieldNumber;
const int CSODOTAGameAccountClient::kSoloSeasonalRankTransferredFieldNumber;
const int CSODOTAGameAccountClient::kFavoriteTeamPackedFieldNumber;
const int CSODOTAGameAccountClient::kRecentReportTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAGameAccountClient::CSODOTAGameAccountClient()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAGameAccountClient)
}
CSODOTAGameAccountClient::CSODOTAGameAccountClient(const CSODOTAGameAccountClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(favorite_team_packed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAGameAccountClient)
}

void CSODOTAGameAccountClient::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(favorite_team_packed_));
}

CSODOTAGameAccountClient::~CSODOTAGameAccountClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAGameAccountClient)
  SharedDtor();
}

void CSODOTAGameAccountClient::SharedDtor() {
}

void CSODOTAGameAccountClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAGameAccountClient::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAGameAccountClient& CSODOTAGameAccountClient::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAGameAccountClient* CSODOTAGameAccountClient::New(::google::protobuf::Arena* arena) const {
  CSODOTAGameAccountClient* n = new CSODOTAGameAccountClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAGameAccountClient)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&low_priority_until_date_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(low_priority_until_date_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&prevent_text_chat_until_date_, 0, reinterpret_cast<char*>(&friendly_) -
      reinterpret_cast<char*>(&prevent_text_chat_until_date_) + sizeof(friendly_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&forgiving_, 0, reinterpret_cast<char*>(&partner_account_state_) -
      reinterpret_cast<char*>(&forgiving_) + sizeof(partner_account_state_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&shutdownlawterminatetimestamp_, 0, reinterpret_cast<char*>(&secondary_leaver_count_) -
      reinterpret_cast<char*>(&shutdownlawterminatetimestamp_) + sizeof(secondary_leaver_count_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&last_secondary_abandoned_game_date_, 0, reinterpret_cast<char*>(&play_time_points_) -
      reinterpret_cast<char*>(&last_secondary_abandoned_game_date_) + sizeof(play_time_points_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&recent_report_time_, 0, reinterpret_cast<char*>(&player_behavior_seq_num_last_report_) -
      reinterpret_cast<char*>(&recent_report_time_) + sizeof(player_behavior_seq_num_last_report_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&player_behavior_score_last_report_, 0, reinterpret_cast<char*>(&recent_game_time_1_) -
      reinterpret_cast<char*>(&player_behavior_score_last_report_) + sizeof(recent_game_time_1_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&recent_game_time_2_, 0, reinterpret_cast<char*>(&solo_seasonal_ranked_calibration_games_remaining_) -
      reinterpret_cast<char*>(&recent_game_time_2_) + sizeof(solo_seasonal_ranked_calibration_games_remaining_));
  }
  if (_has_bits_[64 / 32] & 15u) {
    ::memset(&solo_seasonal_ranked_games_played_, 0, reinterpret_cast<char*>(&favorite_team_packed_) -
      reinterpret_cast<char*>(&solo_seasonal_ranked_games_played_) + sizeof(favorite_team_packed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAGameAccountClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_skill = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_initial_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_leaver_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_until_date = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_low_priority_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_text_chat_until_date = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_prevent_text_chat_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_text_chat_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_voice_until_date = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_prevent_voice_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_voice_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_abandoned_game_date = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_last_abandoned_game_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_abandoned_game_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_penalty_count = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_leaver_penalty_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_penalty_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 completed_game_streak = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_completed_game_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_game_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teaching = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_teaching();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teaching_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leadership = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_leadership();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadership_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friendly = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_friendly();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendly_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 forgiving = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_forgiving();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forgiving_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_disabled_until_date = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_account_disabled_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_disabled_count = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_account_disabled_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_disabled_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 showcase_hero_id = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_showcase_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showcase_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_until_date = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_match_disabled_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_count = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_match_disabled_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(44, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partner_account_state = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_partner_account_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partner_account_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 shutdownlawterminatetimestamp = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_shutdownlawterminatetimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shutdownlawterminatetimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_games_remaining = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_low_priority_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 competitive_rank = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_competitive_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 calibration_games_remaining = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_competitive_rank = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(416u)) {
          set_has_solo_competitive_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_calibration_games_remaining = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(432u)) {
          set_has_solo_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recruitment_level = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has_recruitment_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruitment_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_new_notifications = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_has_new_notifications();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_new_notifications_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_league_admin = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(456u)) {
          set_has_is_league_admin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_league_admin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_leaver_count = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_secondary_leaver_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_leaver_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_secondary_abandoned_game_date = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(472u)) {
          set_has_last_secondary_abandoned_game_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_secondary_abandoned_game_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 casual_games_played = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_casual_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_competitive_games_played = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_solo_competitive_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_competitive_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_competitive_games_played = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_party_competitive_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_competitive_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 casual_1v1_games_played = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_casual_1v1_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &casual_1v1_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 competitive_team_games_played = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(528u)) {
          set_has_competitive_team_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &competitive_team_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 curr_all_hero_challenge_id = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(536u)) {
          set_has_curr_all_hero_challenge_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curr_all_hero_challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_time_points = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(544u)) {
          set_has_play_time_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(552u)) {
          set_has_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 play_time_level = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {
          set_has_play_time_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_time_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_behavior_seq_num_last_report = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(568u)) {
          set_has_player_behavior_seq_num_last_report();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_seq_num_last_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_behavior_score_last_report = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(576u)) {
          set_has_player_behavior_score_last_report();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_behavior_score_last_report_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool player_behavior_report_old_data = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(584u)) {
          set_has_player_behavior_report_old_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_behavior_report_old_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(592u)) {
          set_has_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_recent_participation_date = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(680u)) {
          set_has_tourney_recent_participation_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_recent_participation_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prevent_public_text_chat_until_date = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(688u)) {
          set_has_prevent_public_text_chat_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prevent_public_text_chat_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(696u)) {
          set_has_favorite_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 anchored_phone_number_id = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(704u)) {
          set_has_anchored_phone_number_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &anchored_phone_number_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ranked_matchmaking_ban_until_date = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(712u)) {
          set_has_ranked_matchmaking_ban_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranked_matchmaking_ban_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_1 = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(720u)) {
          set_has_recent_game_time_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_2 = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(728u)) {
          set_has_recent_game_time_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_game_time_3 = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(736u)) {
          set_has_recent_game_time_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_game_time_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_rank = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(744u)) {
          set_has_general_seasonal_ranked_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(752u)) {
          set_has_general_seasonal_ranked_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_games_played = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(760u)) {
          set_has_general_seasonal_ranked_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 general_seasonal_ranked_rank_peak = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(768u)) {
          set_has_general_seasonal_ranked_rank_peak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &general_seasonal_ranked_rank_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool general_seasonal_rank_transferred = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(776u)) {
          set_has_general_seasonal_rank_transferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &general_seasonal_rank_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(784u)) {
          set_has_solo_seasonal_ranked_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(792u)) {
          set_has_solo_seasonal_ranked_calibration_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_calibration_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_games_played = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_solo_seasonal_ranked_games_played();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_games_played_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 solo_seasonal_ranked_rank_peak = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          set_has_solo_seasonal_ranked_rank_peak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solo_seasonal_ranked_rank_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_seasonal_rank_transferred = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(816u)) {
          set_has_solo_seasonal_rank_transferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_seasonal_rank_transferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 favorite_team_packed = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(824u)) {
          set_has_favorite_team_packed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &favorite_team_packed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 recent_report_time = 104;
      case 104: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(832u)) {
          set_has_recent_report_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recent_report_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAGameAccountClient)
  return false;
#undef DO_
}

void CSODOTAGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wins(), output);
  }

  // optional uint32 losses = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losses(), output);
  }

  // optional uint32 xp = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->xp(), output);
  }

  // optional uint32 level = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->level(), output);
  }

  // optional uint32 initial_skill = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initial_skill(), output);
  }

  // optional uint32 leaver_count = 15;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->leaver_count(), output);
  }

  // optional uint32 low_priority_until_date = 18;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->low_priority_until_date(), output);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->prevent_text_chat_until_date(), output);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->prevent_voice_until_date(), output);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->last_abandoned_game_date(), output);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->leaver_penalty_count(), output);
  }

  // optional uint32 completed_game_streak = 24;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->completed_game_streak(), output);
  }

  // optional uint32 teaching = 28;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->teaching(), output);
  }

  // optional uint32 leadership = 29;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->leadership(), output);
  }

  // optional uint32 friendly = 30;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->friendly(), output);
  }

  // optional uint32 forgiving = 31;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->forgiving(), output);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->account_disabled_until_date(), output);
  }

  // optional uint32 account_disabled_count = 39;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->account_disabled_count(), output);
  }

  // optional uint32 showcase_hero_id = 40;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->showcase_hero_id(), output);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_count = 42;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->match_disabled_count(), output);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      44, this->partner_account_type(), output);
  }

  // optional uint32 partner_account_state = 45;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->partner_account_state(), output);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->shutdownlawterminatetimestamp(), output);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->low_priority_games_remaining(), output);
  }

  // optional uint32 competitive_rank = 49;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->competitive_rank(), output);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->calibration_games_remaining(), output);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->solo_competitive_rank(), output);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->solo_calibration_games_remaining(), output);
  }

  // optional uint32 recruitment_level = 55;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->recruitment_level(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_new_notifications = 56;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->has_new_notifications(), output);
  }

  // optional bool is_league_admin = 57;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->is_league_admin(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 secondary_leaver_count = 58;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->secondary_leaver_count(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_secondary_abandoned_game_date(), output);
  }

  // optional uint32 casual_games_played = 60;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->casual_games_played(), output);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->solo_competitive_games_played(), output);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->party_competitive_games_played(), output);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->casual_1v1_games_played(), output);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->competitive_team_games_played(), output);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(67, this->curr_all_hero_challenge_id(), output);
  }

  // optional uint32 play_time_points = 68;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(68, this->play_time_points(), output);
  }

  // optional uint32 account_flags = 69;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(69, this->account_flags(), output);
  }

  // optional uint32 play_time_level = 70;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(70, this->play_time_level(), output);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->player_behavior_seq_num_last_report(), output);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->player_behavior_score_last_report(), output);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->player_behavior_report_old_data(), output);
  }

  // optional uint32 tourney_skill_level = 74;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(85, this->tourney_recent_participation_date(), output);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(86, this->prevent_public_text_chat_until_date(), output);
  }

  // optional uint32 favorite_team = 87;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->favorite_team(), output);
  }

  // optional uint64 anchored_phone_number_id = 88;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(88, this->anchored_phone_number_id(), output);
  }

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->ranked_matchmaking_ban_until_date(), output);
  }

  // optional uint32 recent_game_time_1 = 90;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->recent_game_time_1(), output);
  }

  // optional uint32 recent_game_time_2 = 91;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->recent_game_time_2(), output);
  }

  // optional uint32 recent_game_time_3 = 92;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->recent_game_time_3(), output);
  }

  // optional uint32 general_seasonal_ranked_rank = 93;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(93, this->general_seasonal_ranked_rank(), output);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(94, this->general_seasonal_ranked_calibration_games_remaining(), output);
  }

  // optional uint32 general_seasonal_ranked_games_played = 95;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(95, this->general_seasonal_ranked_games_played(), output);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 96;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(96, this->general_seasonal_ranked_rank_peak(), output);
  }

  // optional bool general_seasonal_rank_transferred = 97;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->general_seasonal_rank_transferred(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank = 98;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->solo_seasonal_ranked_rank(), output);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->solo_seasonal_ranked_calibration_games_remaining(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 solo_seasonal_ranked_games_played = 100;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->solo_seasonal_ranked_games_played(), output);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 101;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->solo_seasonal_ranked_rank_peak(), output);
  }

  // optional bool solo_seasonal_rank_transferred = 102;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->solo_seasonal_rank_transferred(), output);
  }

  // optional uint64 favorite_team_packed = 103;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(103, this->favorite_team_packed(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 recent_report_time = 104;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(104, this->recent_report_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAGameAccountClient)
}

::google::protobuf::uint8* CSODOTAGameAccountClient::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 wins = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->wins(), target);
  }

  // optional uint32 losses = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losses(), target);
  }

  // optional uint32 xp = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->xp(), target);
  }

  // optional uint32 level = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->level(), target);
  }

  // optional uint32 initial_skill = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->initial_skill(), target);
  }

  // optional uint32 leaver_count = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->leaver_count(), target);
  }

  // optional uint32 low_priority_until_date = 18;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->low_priority_until_date(), target);
  }

  // optional uint32 prevent_text_chat_until_date = 20;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->prevent_text_chat_until_date(), target);
  }

  // optional uint32 prevent_voice_until_date = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->prevent_voice_until_date(), target);
  }

  // optional uint32 last_abandoned_game_date = 22;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->last_abandoned_game_date(), target);
  }

  // optional uint32 leaver_penalty_count = 23;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->leaver_penalty_count(), target);
  }

  // optional uint32 completed_game_streak = 24;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->completed_game_streak(), target);
  }

  // optional uint32 teaching = 28;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->teaching(), target);
  }

  // optional uint32 leadership = 29;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->leadership(), target);
  }

  // optional uint32 friendly = 30;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->friendly(), target);
  }

  // optional uint32 forgiving = 31;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->forgiving(), target);
  }

  // optional uint32 account_disabled_until_date = 38;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->account_disabled_until_date(), target);
  }

  // optional uint32 account_disabled_count = 39;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->account_disabled_count(), target);
  }

  // optional uint32 showcase_hero_id = 40;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->showcase_hero_id(), target);
  }

  // optional uint32 match_disabled_until_date = 41;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_count = 42;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->match_disabled_count(), target);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      44, this->partner_account_type(), target);
  }

  // optional uint32 partner_account_state = 45;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->partner_account_state(), target);
  }

  // optional uint32 shutdownlawterminatetimestamp = 47;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->shutdownlawterminatetimestamp(), target);
  }

  // optional uint32 low_priority_games_remaining = 48;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->low_priority_games_remaining(), target);
  }

  // optional uint32 competitive_rank = 49;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->competitive_rank(), target);
  }

  // optional uint32 calibration_games_remaining = 51;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->calibration_games_remaining(), target);
  }

  // optional uint32 solo_competitive_rank = 52;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->solo_competitive_rank(), target);
  }

  // optional uint32 solo_calibration_games_remaining = 54;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->solo_calibration_games_remaining(), target);
  }

  // optional uint32 recruitment_level = 55;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->recruitment_level(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_new_notifications = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->has_new_notifications(), target);
  }

  // optional bool is_league_admin = 57;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->is_league_admin(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 secondary_leaver_count = 58;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->secondary_leaver_count(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 last_secondary_abandoned_game_date = 59;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_secondary_abandoned_game_date(), target);
  }

  // optional uint32 casual_games_played = 60;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->casual_games_played(), target);
  }

  // optional uint32 solo_competitive_games_played = 61;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->solo_competitive_games_played(), target);
  }

  // optional uint32 party_competitive_games_played = 62;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->party_competitive_games_played(), target);
  }

  // optional uint32 casual_1v1_games_played = 65;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->casual_1v1_games_played(), target);
  }

  // optional uint32 competitive_team_games_played = 66;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->competitive_team_games_played(), target);
  }

  // optional uint32 curr_all_hero_challenge_id = 67;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(67, this->curr_all_hero_challenge_id(), target);
  }

  // optional uint32 play_time_points = 68;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(68, this->play_time_points(), target);
  }

  // optional uint32 account_flags = 69;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(69, this->account_flags(), target);
  }

  // optional uint32 play_time_level = 70;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(70, this->play_time_level(), target);
  }

  // optional uint32 player_behavior_seq_num_last_report = 71;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->player_behavior_seq_num_last_report(), target);
  }

  // optional uint32 player_behavior_score_last_report = 72;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->player_behavior_score_last_report(), target);
  }

  // optional bool player_behavior_report_old_data = 73;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->player_behavior_report_old_data(), target);
  }

  // optional uint32 tourney_skill_level = 74;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_recent_participation_date = 85;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(85, this->tourney_recent_participation_date(), target);
  }

  // optional uint32 prevent_public_text_chat_until_date = 86;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(86, this->prevent_public_text_chat_until_date(), target);
  }

  // optional uint32 favorite_team = 87;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->favorite_team(), target);
  }

  // optional uint64 anchored_phone_number_id = 88;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(88, this->anchored_phone_number_id(), target);
  }

  // optional uint32 ranked_matchmaking_ban_until_date = 89;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->ranked_matchmaking_ban_until_date(), target);
  }

  // optional uint32 recent_game_time_1 = 90;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->recent_game_time_1(), target);
  }

  // optional uint32 recent_game_time_2 = 91;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->recent_game_time_2(), target);
  }

  // optional uint32 recent_game_time_3 = 92;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->recent_game_time_3(), target);
  }

  // optional uint32 general_seasonal_ranked_rank = 93;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(93, this->general_seasonal_ranked_rank(), target);
  }

  // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(94, this->general_seasonal_ranked_calibration_games_remaining(), target);
  }

  // optional uint32 general_seasonal_ranked_games_played = 95;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(95, this->general_seasonal_ranked_games_played(), target);
  }

  // optional uint32 general_seasonal_ranked_rank_peak = 96;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(96, this->general_seasonal_ranked_rank_peak(), target);
  }

  // optional bool general_seasonal_rank_transferred = 97;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(97, this->general_seasonal_rank_transferred(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank = 98;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->solo_seasonal_ranked_rank(), target);
  }

  // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(99, this->solo_seasonal_ranked_calibration_games_remaining(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 solo_seasonal_ranked_games_played = 100;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->solo_seasonal_ranked_games_played(), target);
  }

  // optional uint32 solo_seasonal_ranked_rank_peak = 101;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->solo_seasonal_ranked_rank_peak(), target);
  }

  // optional bool solo_seasonal_rank_transferred = 102;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->solo_seasonal_rank_transferred(), target);
  }

  // optional uint64 favorite_team_packed = 103;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(103, this->favorite_team_packed(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 recent_report_time = 104;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(104, this->recent_report_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAGameAccountClient)
  return target;
}

size_t CSODOTAGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAGameAccountClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 4;
    if (has_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

    // optional uint32 xp = 12;
    if (has_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp());
    }

    // optional uint32 level = 13;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 initial_skill = 14;
    if (has_initial_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_skill());
    }

    // optional uint32 leaver_count = 15;
    if (has_leaver_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_count());
    }

    // optional uint32 low_priority_until_date = 18;
    if (has_low_priority_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_until_date());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 prevent_text_chat_until_date = 20;
    if (has_prevent_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_text_chat_until_date());
    }

    // optional uint32 prevent_voice_until_date = 21;
    if (has_prevent_voice_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_voice_until_date());
    }

    // optional uint32 last_abandoned_game_date = 22;
    if (has_last_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_abandoned_game_date());
    }

    // optional uint32 leaver_penalty_count = 23;
    if (has_leaver_penalty_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_penalty_count());
    }

    // optional uint32 completed_game_streak = 24;
    if (has_completed_game_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed_game_streak());
    }

    // optional uint32 teaching = 28;
    if (has_teaching()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teaching());
    }

    // optional uint32 leadership = 29;
    if (has_leadership()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadership());
    }

    // optional uint32 friendly = 30;
    if (has_friendly()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendly());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 forgiving = 31;
    if (has_forgiving()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->forgiving());
    }

    // optional uint32 account_disabled_until_date = 38;
    if (has_account_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_until_date());
    }

    // optional uint32 account_disabled_count = 39;
    if (has_account_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_disabled_count());
    }

    // optional uint32 showcase_hero_id = 40;
    if (has_showcase_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showcase_hero_id());
    }

    // optional uint32 match_disabled_until_date = 41;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_count = 42;
    if (has_match_disabled_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_count());
    }

    // optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 partner_account_state = 45;
    if (has_partner_account_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partner_account_state());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 shutdownlawterminatetimestamp = 47;
    if (has_shutdownlawterminatetimestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shutdownlawterminatetimestamp());
    }

    // optional uint32 low_priority_games_remaining = 48;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 competitive_rank = 49;
    if (has_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_rank());
    }

    // optional uint32 calibration_games_remaining = 51;
    if (has_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->calibration_games_remaining());
    }

    // optional uint32 solo_competitive_rank = 52;
    if (has_solo_competitive_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_rank());
    }

    // optional uint32 solo_calibration_games_remaining = 54;
    if (has_solo_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_calibration_games_remaining());
    }

    // optional uint32 recruitment_level = 55;
    if (has_recruitment_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruitment_level());
    }

    // optional uint32 secondary_leaver_count = 58;
    if (has_secondary_leaver_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_leaver_count());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 last_secondary_abandoned_game_date = 59;
    if (has_last_secondary_abandoned_game_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_secondary_abandoned_game_date());
    }

    // optional uint32 casual_games_played = 60;
    if (has_casual_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_games_played());
    }

    // optional uint32 solo_competitive_games_played = 61;
    if (has_solo_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_competitive_games_played());
    }

    // optional uint32 party_competitive_games_played = 62;
    if (has_party_competitive_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_competitive_games_played());
    }

    // optional uint32 casual_1v1_games_played = 65;
    if (has_casual_1v1_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->casual_1v1_games_played());
    }

    // optional uint32 competitive_team_games_played = 66;
    if (has_competitive_team_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->competitive_team_games_played());
    }

    // optional uint32 curr_all_hero_challenge_id = 67;
    if (has_curr_all_hero_challenge_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curr_all_hero_challenge_id());
    }

    // optional uint32 play_time_points = 68;
    if (has_play_time_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_points());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 recent_report_time = 104;
    if (has_recent_report_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_report_time());
    }

    // optional uint32 account_flags = 69;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 play_time_level = 70;
    if (has_play_time_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->play_time_level());
    }

    // optional bool has_new_notifications = 56;
    if (has_has_new_notifications()) {
      total_size += 2 + 1;
    }

    // optional bool is_league_admin = 57;
    if (has_is_league_admin()) {
      total_size += 2 + 1;
    }

    // optional bool player_behavior_report_old_data = 73;
    if (has_player_behavior_report_old_data()) {
      total_size += 2 + 1;
    }

    // optional bool general_seasonal_rank_transferred = 97;
    if (has_general_seasonal_rank_transferred()) {
      total_size += 2 + 1;
    }

    // optional uint32 player_behavior_seq_num_last_report = 71;
    if (has_player_behavior_seq_num_last_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_seq_num_last_report());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 player_behavior_score_last_report = 72;
    if (has_player_behavior_score_last_report()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_behavior_score_last_report());
    }

    // optional uint32 tourney_skill_level = 74;
    if (has_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_recent_participation_date = 85;
    if (has_tourney_recent_participation_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_recent_participation_date());
    }

    // optional uint32 prevent_public_text_chat_until_date = 86;
    if (has_prevent_public_text_chat_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prevent_public_text_chat_until_date());
    }

    // optional uint64 anchored_phone_number_id = 88;
    if (has_anchored_phone_number_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->anchored_phone_number_id());
    }

    // optional uint32 favorite_team = 87;
    if (has_favorite_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 ranked_matchmaking_ban_until_date = 89;
    if (has_ranked_matchmaking_ban_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranked_matchmaking_ban_until_date());
    }

    // optional uint32 recent_game_time_1 = 90;
    if (has_recent_game_time_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_1());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional uint32 recent_game_time_2 = 91;
    if (has_recent_game_time_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_2());
    }

    // optional uint32 recent_game_time_3 = 92;
    if (has_recent_game_time_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recent_game_time_3());
    }

    // optional uint32 general_seasonal_ranked_rank = 93;
    if (has_general_seasonal_ranked_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank());
    }

    // optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
    if (has_general_seasonal_ranked_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_calibration_games_remaining());
    }

    // optional uint32 general_seasonal_ranked_games_played = 95;
    if (has_general_seasonal_ranked_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_games_played());
    }

    // optional uint32 general_seasonal_ranked_rank_peak = 96;
    if (has_general_seasonal_ranked_rank_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->general_seasonal_ranked_rank_peak());
    }

    // optional uint32 solo_seasonal_ranked_rank = 98;
    if (has_solo_seasonal_ranked_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank());
    }

    // optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
    if (has_solo_seasonal_ranked_calibration_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_calibration_games_remaining());
    }

  }
  if (_has_bits_[64 / 32] & 15u) {
    // optional uint32 solo_seasonal_ranked_games_played = 100;
    if (has_solo_seasonal_ranked_games_played()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_games_played());
    }

    // optional uint32 solo_seasonal_ranked_rank_peak = 101;
    if (has_solo_seasonal_ranked_rank_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->solo_seasonal_ranked_rank_peak());
    }

    // optional bool solo_seasonal_rank_transferred = 102;
    if (has_solo_seasonal_rank_transferred()) {
      total_size += 2 + 1;
    }

    // optional uint64 favorite_team_packed = 103;
    if (has_favorite_team_packed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->favorite_team_packed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAGameAccountClient* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAGameAccountClient>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAGameAccountClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAGameAccountClient)
    MergeFrom(*source);
  }
}

void CSODOTAGameAccountClient::MergeFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      losses_ = from.losses_;
    }
    if (cached_has_bits & 0x00000008u) {
      xp_ = from.xp_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      initial_skill_ = from.initial_skill_;
    }
    if (cached_has_bits & 0x00000040u) {
      leaver_count_ = from.leaver_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_priority_until_date_ = from.low_priority_until_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      prevent_text_chat_until_date_ = from.prevent_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00000200u) {
      prevent_voice_until_date_ = from.prevent_voice_until_date_;
    }
    if (cached_has_bits & 0x00000400u) {
      last_abandoned_game_date_ = from.last_abandoned_game_date_;
    }
    if (cached_has_bits & 0x00000800u) {
      leaver_penalty_count_ = from.leaver_penalty_count_;
    }
    if (cached_has_bits & 0x00001000u) {
      completed_game_streak_ = from.completed_game_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      teaching_ = from.teaching_;
    }
    if (cached_has_bits & 0x00004000u) {
      leadership_ = from.leadership_;
    }
    if (cached_has_bits & 0x00008000u) {
      friendly_ = from.friendly_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      forgiving_ = from.forgiving_;
    }
    if (cached_has_bits & 0x00020000u) {
      account_disabled_until_date_ = from.account_disabled_until_date_;
    }
    if (cached_has_bits & 0x00040000u) {
      account_disabled_count_ = from.account_disabled_count_;
    }
    if (cached_has_bits & 0x00080000u) {
      showcase_hero_id_ = from.showcase_hero_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00200000u) {
      match_disabled_count_ = from.match_disabled_count_;
    }
    if (cached_has_bits & 0x00400000u) {
      partner_account_type_ = from.partner_account_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      partner_account_state_ = from.partner_account_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      shutdownlawterminatetimestamp_ = from.shutdownlawterminatetimestamp_;
    }
    if (cached_has_bits & 0x02000000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x04000000u) {
      competitive_rank_ = from.competitive_rank_;
    }
    if (cached_has_bits & 0x08000000u) {
      calibration_games_remaining_ = from.calibration_games_remaining_;
    }
    if (cached_has_bits & 0x10000000u) {
      solo_competitive_rank_ = from.solo_competitive_rank_;
    }
    if (cached_has_bits & 0x20000000u) {
      solo_calibration_games_remaining_ = from.solo_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x40000000u) {
      recruitment_level_ = from.recruitment_level_;
    }
    if (cached_has_bits & 0x80000000u) {
      secondary_leaver_count_ = from.secondary_leaver_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      last_secondary_abandoned_game_date_ = from.last_secondary_abandoned_game_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      casual_games_played_ = from.casual_games_played_;
    }
    if (cached_has_bits & 0x00000004u) {
      solo_competitive_games_played_ = from.solo_competitive_games_played_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_competitive_games_played_ = from.party_competitive_games_played_;
    }
    if (cached_has_bits & 0x00000010u) {
      casual_1v1_games_played_ = from.casual_1v1_games_played_;
    }
    if (cached_has_bits & 0x00000020u) {
      competitive_team_games_played_ = from.competitive_team_games_played_;
    }
    if (cached_has_bits & 0x00000040u) {
      curr_all_hero_challenge_id_ = from.curr_all_hero_challenge_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      play_time_points_ = from.play_time_points_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      recent_report_time_ = from.recent_report_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      play_time_level_ = from.play_time_level_;
    }
    if (cached_has_bits & 0x00000800u) {
      has_new_notifications_ = from.has_new_notifications_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_league_admin_ = from.is_league_admin_;
    }
    if (cached_has_bits & 0x00002000u) {
      player_behavior_report_old_data_ = from.player_behavior_report_old_data_;
    }
    if (cached_has_bits & 0x00004000u) {
      general_seasonal_rank_transferred_ = from.general_seasonal_rank_transferred_;
    }
    if (cached_has_bits & 0x00008000u) {
      player_behavior_seq_num_last_report_ = from.player_behavior_seq_num_last_report_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      player_behavior_score_last_report_ = from.player_behavior_score_last_report_;
    }
    if (cached_has_bits & 0x00020000u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x00040000u) {
      tourney_recent_participation_date_ = from.tourney_recent_participation_date_;
    }
    if (cached_has_bits & 0x00080000u) {
      prevent_public_text_chat_until_date_ = from.prevent_public_text_chat_until_date_;
    }
    if (cached_has_bits & 0x00100000u) {
      anchored_phone_number_id_ = from.anchored_phone_number_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00400000u) {
      ranked_matchmaking_ban_until_date_ = from.ranked_matchmaking_ban_until_date_;
    }
    if (cached_has_bits & 0x00800000u) {
      recent_game_time_1_ = from.recent_game_time_1_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      recent_game_time_2_ = from.recent_game_time_2_;
    }
    if (cached_has_bits & 0x02000000u) {
      recent_game_time_3_ = from.recent_game_time_3_;
    }
    if (cached_has_bits & 0x04000000u) {
      general_seasonal_ranked_rank_ = from.general_seasonal_ranked_rank_;
    }
    if (cached_has_bits & 0x08000000u) {
      general_seasonal_ranked_calibration_games_remaining_ = from.general_seasonal_ranked_calibration_games_remaining_;
    }
    if (cached_has_bits & 0x10000000u) {
      general_seasonal_ranked_games_played_ = from.general_seasonal_ranked_games_played_;
    }
    if (cached_has_bits & 0x20000000u) {
      general_seasonal_ranked_rank_peak_ = from.general_seasonal_ranked_rank_peak_;
    }
    if (cached_has_bits & 0x40000000u) {
      solo_seasonal_ranked_rank_ = from.solo_seasonal_ranked_rank_;
    }
    if (cached_has_bits & 0x80000000u) {
      solo_seasonal_ranked_calibration_games_remaining_ = from.solo_seasonal_ranked_calibration_games_remaining_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      solo_seasonal_ranked_games_played_ = from.solo_seasonal_ranked_games_played_;
    }
    if (cached_has_bits & 0x00000002u) {
      solo_seasonal_ranked_rank_peak_ = from.solo_seasonal_ranked_rank_peak_;
    }
    if (cached_has_bits & 0x00000004u) {
      solo_seasonal_rank_transferred_ = from.solo_seasonal_rank_transferred_;
    }
    if (cached_has_bits & 0x00000008u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CSODOTAGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAGameAccountClient::CopyFrom(const CSODOTAGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAGameAccountClient::IsInitialized() const {
  return true;
}

void CSODOTAGameAccountClient::Swap(CSODOTAGameAccountClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAGameAccountClient::InternalSwap(CSODOTAGameAccountClient* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(wins_, other->wins_);
  std::swap(losses_, other->losses_);
  std::swap(xp_, other->xp_);
  std::swap(level_, other->level_);
  std::swap(initial_skill_, other->initial_skill_);
  std::swap(leaver_count_, other->leaver_count_);
  std::swap(low_priority_until_date_, other->low_priority_until_date_);
  std::swap(prevent_text_chat_until_date_, other->prevent_text_chat_until_date_);
  std::swap(prevent_voice_until_date_, other->prevent_voice_until_date_);
  std::swap(last_abandoned_game_date_, other->last_abandoned_game_date_);
  std::swap(leaver_penalty_count_, other->leaver_penalty_count_);
  std::swap(completed_game_streak_, other->completed_game_streak_);
  std::swap(teaching_, other->teaching_);
  std::swap(leadership_, other->leadership_);
  std::swap(friendly_, other->friendly_);
  std::swap(forgiving_, other->forgiving_);
  std::swap(account_disabled_until_date_, other->account_disabled_until_date_);
  std::swap(account_disabled_count_, other->account_disabled_count_);
  std::swap(showcase_hero_id_, other->showcase_hero_id_);
  std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
  std::swap(match_disabled_count_, other->match_disabled_count_);
  std::swap(partner_account_type_, other->partner_account_type_);
  std::swap(partner_account_state_, other->partner_account_state_);
  std::swap(shutdownlawterminatetimestamp_, other->shutdownlawterminatetimestamp_);
  std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  std::swap(competitive_rank_, other->competitive_rank_);
  std::swap(calibration_games_remaining_, other->calibration_games_remaining_);
  std::swap(solo_competitive_rank_, other->solo_competitive_rank_);
  std::swap(solo_calibration_games_remaining_, other->solo_calibration_games_remaining_);
  std::swap(recruitment_level_, other->recruitment_level_);
  std::swap(secondary_leaver_count_, other->secondary_leaver_count_);
  std::swap(last_secondary_abandoned_game_date_, other->last_secondary_abandoned_game_date_);
  std::swap(casual_games_played_, other->casual_games_played_);
  std::swap(solo_competitive_games_played_, other->solo_competitive_games_played_);
  std::swap(party_competitive_games_played_, other->party_competitive_games_played_);
  std::swap(casual_1v1_games_played_, other->casual_1v1_games_played_);
  std::swap(competitive_team_games_played_, other->competitive_team_games_played_);
  std::swap(curr_all_hero_challenge_id_, other->curr_all_hero_challenge_id_);
  std::swap(play_time_points_, other->play_time_points_);
  std::swap(recent_report_time_, other->recent_report_time_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(play_time_level_, other->play_time_level_);
  std::swap(has_new_notifications_, other->has_new_notifications_);
  std::swap(is_league_admin_, other->is_league_admin_);
  std::swap(player_behavior_report_old_data_, other->player_behavior_report_old_data_);
  std::swap(general_seasonal_rank_transferred_, other->general_seasonal_rank_transferred_);
  std::swap(player_behavior_seq_num_last_report_, other->player_behavior_seq_num_last_report_);
  std::swap(player_behavior_score_last_report_, other->player_behavior_score_last_report_);
  std::swap(tourney_skill_level_, other->tourney_skill_level_);
  std::swap(tourney_recent_participation_date_, other->tourney_recent_participation_date_);
  std::swap(prevent_public_text_chat_until_date_, other->prevent_public_text_chat_until_date_);
  std::swap(anchored_phone_number_id_, other->anchored_phone_number_id_);
  std::swap(favorite_team_, other->favorite_team_);
  std::swap(ranked_matchmaking_ban_until_date_, other->ranked_matchmaking_ban_until_date_);
  std::swap(recent_game_time_1_, other->recent_game_time_1_);
  std::swap(recent_game_time_2_, other->recent_game_time_2_);
  std::swap(recent_game_time_3_, other->recent_game_time_3_);
  std::swap(general_seasonal_ranked_rank_, other->general_seasonal_ranked_rank_);
  std::swap(general_seasonal_ranked_calibration_games_remaining_, other->general_seasonal_ranked_calibration_games_remaining_);
  std::swap(general_seasonal_ranked_games_played_, other->general_seasonal_ranked_games_played_);
  std::swap(general_seasonal_ranked_rank_peak_, other->general_seasonal_ranked_rank_peak_);
  std::swap(solo_seasonal_ranked_rank_, other->solo_seasonal_ranked_rank_);
  std::swap(solo_seasonal_ranked_calibration_games_remaining_, other->solo_seasonal_ranked_calibration_games_remaining_);
  std::swap(solo_seasonal_ranked_games_played_, other->solo_seasonal_ranked_games_played_);
  std::swap(solo_seasonal_ranked_rank_peak_, other->solo_seasonal_ranked_rank_peak_);
  std::swap(solo_seasonal_rank_transferred_, other->solo_seasonal_rank_transferred_);
  std::swap(favorite_team_packed_, other->favorite_team_packed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAGameAccountClient::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAGameAccountClient

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTAGameAccountClient::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAGameAccountClient::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAGameAccountClient::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_id)
  return account_id_;
}
void CSODOTAGameAccountClient::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_id)
}

// optional uint32 wins = 3;
bool CSODOTAGameAccountClient::has_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAGameAccountClient::set_has_wins() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAGameAccountClient::clear_has_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAGameAccountClient::clear_wins() {
  wins_ = 0u;
  clear_has_wins();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.wins)
  return wins_;
}
void CSODOTAGameAccountClient::set_wins(::google::protobuf::uint32 value) {
  set_has_wins();
  wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.wins)
}

// optional uint32 losses = 4;
bool CSODOTAGameAccountClient::has_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAGameAccountClient::set_has_losses() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAGameAccountClient::clear_has_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAGameAccountClient::clear_losses() {
  losses_ = 0u;
  clear_has_losses();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.losses)
  return losses_;
}
void CSODOTAGameAccountClient::set_losses(::google::protobuf::uint32 value) {
  set_has_losses();
  losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.losses)
}

// optional uint32 xp = 12;
bool CSODOTAGameAccountClient::has_xp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAGameAccountClient::set_has_xp() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_xp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAGameAccountClient::clear_xp() {
  xp_ = 0u;
  clear_has_xp();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.xp)
  return xp_;
}
void CSODOTAGameAccountClient::set_xp(::google::protobuf::uint32 value) {
  set_has_xp();
  xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.xp)
}

// optional uint32 level = 13;
bool CSODOTAGameAccountClient::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAGameAccountClient::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAGameAccountClient::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAGameAccountClient::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.level)
  return level_;
}
void CSODOTAGameAccountClient::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.level)
}

// optional uint32 initial_skill = 14;
bool CSODOTAGameAccountClient::has_initial_skill() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAGameAccountClient::set_has_initial_skill() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAGameAccountClient::clear_has_initial_skill() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAGameAccountClient::clear_initial_skill() {
  initial_skill_ = 0u;
  clear_has_initial_skill();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::initial_skill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.initial_skill)
  return initial_skill_;
}
void CSODOTAGameAccountClient::set_initial_skill(::google::protobuf::uint32 value) {
  set_has_initial_skill();
  initial_skill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.initial_skill)
}

// optional uint32 leaver_count = 15;
bool CSODOTAGameAccountClient::has_leaver_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAGameAccountClient::set_has_leaver_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAGameAccountClient::clear_has_leaver_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAGameAccountClient::clear_leaver_count() {
  leaver_count_ = 0u;
  clear_has_leaver_count();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leaver_count)
  return leaver_count_;
}
void CSODOTAGameAccountClient::set_leaver_count(::google::protobuf::uint32 value) {
  set_has_leaver_count();
  leaver_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leaver_count)
}

// optional uint32 secondary_leaver_count = 58;
bool CSODOTAGameAccountClient::has_secondary_leaver_count() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_secondary_leaver_count() {
  _has_bits_[0] |= 0x80000000u;
}
void CSODOTAGameAccountClient::clear_has_secondary_leaver_count() {
  _has_bits_[0] &= ~0x80000000u;
}
void CSODOTAGameAccountClient::clear_secondary_leaver_count() {
  secondary_leaver_count_ = 0u;
  clear_has_secondary_leaver_count();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::secondary_leaver_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.secondary_leaver_count)
  return secondary_leaver_count_;
}
void CSODOTAGameAccountClient::set_secondary_leaver_count(::google::protobuf::uint32 value) {
  set_has_secondary_leaver_count();
  secondary_leaver_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.secondary_leaver_count)
}

// optional uint32 low_priority_until_date = 18;
bool CSODOTAGameAccountClient::has_low_priority_until_date() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAGameAccountClient::set_has_low_priority_until_date() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAGameAccountClient::clear_has_low_priority_until_date() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAGameAccountClient::clear_low_priority_until_date() {
  low_priority_until_date_ = 0u;
  clear_has_low_priority_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.low_priority_until_date)
  return low_priority_until_date_;
}
void CSODOTAGameAccountClient::set_low_priority_until_date(::google::protobuf::uint32 value) {
  set_has_low_priority_until_date();
  low_priority_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.low_priority_until_date)
}

// optional uint32 prevent_text_chat_until_date = 20;
bool CSODOTAGameAccountClient::has_prevent_text_chat_until_date() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAGameAccountClient::set_has_prevent_text_chat_until_date() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAGameAccountClient::clear_has_prevent_text_chat_until_date() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAGameAccountClient::clear_prevent_text_chat_until_date() {
  prevent_text_chat_until_date_ = 0u;
  clear_has_prevent_text_chat_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_text_chat_until_date)
  return prevent_text_chat_until_date_;
}
void CSODOTAGameAccountClient::set_prevent_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_text_chat_until_date();
  prevent_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_text_chat_until_date)
}

// optional uint32 prevent_voice_until_date = 21;
bool CSODOTAGameAccountClient::has_prevent_voice_until_date() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAGameAccountClient::set_has_prevent_voice_until_date() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAGameAccountClient::clear_has_prevent_voice_until_date() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAGameAccountClient::clear_prevent_voice_until_date() {
  prevent_voice_until_date_ = 0u;
  clear_has_prevent_voice_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_voice_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_voice_until_date)
  return prevent_voice_until_date_;
}
void CSODOTAGameAccountClient::set_prevent_voice_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_voice_until_date();
  prevent_voice_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_voice_until_date)
}

// optional uint32 prevent_public_text_chat_until_date = 86;
bool CSODOTAGameAccountClient::has_prevent_public_text_chat_until_date() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CSODOTAGameAccountClient::set_has_prevent_public_text_chat_until_date() {
  _has_bits_[1] |= 0x00080000u;
}
void CSODOTAGameAccountClient::clear_has_prevent_public_text_chat_until_date() {
  _has_bits_[1] &= ~0x00080000u;
}
void CSODOTAGameAccountClient::clear_prevent_public_text_chat_until_date() {
  prevent_public_text_chat_until_date_ = 0u;
  clear_has_prevent_public_text_chat_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::prevent_public_text_chat_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
  return prevent_public_text_chat_until_date_;
}
void CSODOTAGameAccountClient::set_prevent_public_text_chat_until_date(::google::protobuf::uint32 value) {
  set_has_prevent_public_text_chat_until_date();
  prevent_public_text_chat_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.prevent_public_text_chat_until_date)
}

// optional uint32 last_abandoned_game_date = 22;
bool CSODOTAGameAccountClient::has_last_abandoned_game_date() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAGameAccountClient::set_has_last_abandoned_game_date() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAGameAccountClient::clear_has_last_abandoned_game_date() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAGameAccountClient::clear_last_abandoned_game_date() {
  last_abandoned_game_date_ = 0u;
  clear_has_last_abandoned_game_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::last_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.last_abandoned_game_date)
  return last_abandoned_game_date_;
}
void CSODOTAGameAccountClient::set_last_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_abandoned_game_date();
  last_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.last_abandoned_game_date)
}

// optional uint32 last_secondary_abandoned_game_date = 59;
bool CSODOTAGameAccountClient::has_last_secondary_abandoned_game_date() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CSODOTAGameAccountClient::set_has_last_secondary_abandoned_game_date() {
  _has_bits_[1] |= 0x00000001u;
}
void CSODOTAGameAccountClient::clear_has_last_secondary_abandoned_game_date() {
  _has_bits_[1] &= ~0x00000001u;
}
void CSODOTAGameAccountClient::clear_last_secondary_abandoned_game_date() {
  last_secondary_abandoned_game_date_ = 0u;
  clear_has_last_secondary_abandoned_game_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::last_secondary_abandoned_game_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
  return last_secondary_abandoned_game_date_;
}
void CSODOTAGameAccountClient::set_last_secondary_abandoned_game_date(::google::protobuf::uint32 value) {
  set_has_last_secondary_abandoned_game_date();
  last_secondary_abandoned_game_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.last_secondary_abandoned_game_date)
}

// optional uint32 leaver_penalty_count = 23;
bool CSODOTAGameAccountClient::has_leaver_penalty_count() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTAGameAccountClient::set_has_leaver_penalty_count() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTAGameAccountClient::clear_has_leaver_penalty_count() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTAGameAccountClient::clear_leaver_penalty_count() {
  leaver_penalty_count_ = 0u;
  clear_has_leaver_penalty_count();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::leaver_penalty_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leaver_penalty_count)
  return leaver_penalty_count_;
}
void CSODOTAGameAccountClient::set_leaver_penalty_count(::google::protobuf::uint32 value) {
  set_has_leaver_penalty_count();
  leaver_penalty_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leaver_penalty_count)
}

// optional uint32 completed_game_streak = 24;
bool CSODOTAGameAccountClient::has_completed_game_streak() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTAGameAccountClient::set_has_completed_game_streak() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTAGameAccountClient::clear_has_completed_game_streak() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTAGameAccountClient::clear_completed_game_streak() {
  completed_game_streak_ = 0u;
  clear_has_completed_game_streak();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::completed_game_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.completed_game_streak)
  return completed_game_streak_;
}
void CSODOTAGameAccountClient::set_completed_game_streak(::google::protobuf::uint32 value) {
  set_has_completed_game_streak();
  completed_game_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.completed_game_streak)
}

// optional uint32 teaching = 28;
bool CSODOTAGameAccountClient::has_teaching() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTAGameAccountClient::set_has_teaching() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTAGameAccountClient::clear_has_teaching() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTAGameAccountClient::clear_teaching() {
  teaching_ = 0u;
  clear_has_teaching();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::teaching() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.teaching)
  return teaching_;
}
void CSODOTAGameAccountClient::set_teaching(::google::protobuf::uint32 value) {
  set_has_teaching();
  teaching_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.teaching)
}

// optional uint32 leadership = 29;
bool CSODOTAGameAccountClient::has_leadership() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSODOTAGameAccountClient::set_has_leadership() {
  _has_bits_[0] |= 0x00004000u;
}
void CSODOTAGameAccountClient::clear_has_leadership() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSODOTAGameAccountClient::clear_leadership() {
  leadership_ = 0u;
  clear_has_leadership();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::leadership() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.leadership)
  return leadership_;
}
void CSODOTAGameAccountClient::set_leadership(::google::protobuf::uint32 value) {
  set_has_leadership();
  leadership_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.leadership)
}

// optional uint32 friendly = 30;
bool CSODOTAGameAccountClient::has_friendly() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTAGameAccountClient::set_has_friendly() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTAGameAccountClient::clear_has_friendly() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTAGameAccountClient::clear_friendly() {
  friendly_ = 0u;
  clear_has_friendly();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::friendly() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.friendly)
  return friendly_;
}
void CSODOTAGameAccountClient::set_friendly(::google::protobuf::uint32 value) {
  set_has_friendly();
  friendly_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.friendly)
}

// optional uint32 forgiving = 31;
bool CSODOTAGameAccountClient::has_forgiving() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTAGameAccountClient::set_has_forgiving() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTAGameAccountClient::clear_has_forgiving() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTAGameAccountClient::clear_forgiving() {
  forgiving_ = 0u;
  clear_has_forgiving();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::forgiving() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.forgiving)
  return forgiving_;
}
void CSODOTAGameAccountClient::set_forgiving(::google::protobuf::uint32 value) {
  set_has_forgiving();
  forgiving_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.forgiving)
}

// optional uint32 account_disabled_until_date = 38;
bool CSODOTAGameAccountClient::has_account_disabled_until_date() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_disabled_until_date() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTAGameAccountClient::clear_has_account_disabled_until_date() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTAGameAccountClient::clear_account_disabled_until_date() {
  account_disabled_until_date_ = 0u;
  clear_has_account_disabled_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_disabled_until_date)
  return account_disabled_until_date_;
}
void CSODOTAGameAccountClient::set_account_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_account_disabled_until_date();
  account_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_disabled_until_date)
}

// optional uint32 account_disabled_count = 39;
bool CSODOTAGameAccountClient::has_account_disabled_count() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_disabled_count() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTAGameAccountClient::clear_has_account_disabled_count() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTAGameAccountClient::clear_account_disabled_count() {
  account_disabled_count_ = 0u;
  clear_has_account_disabled_count();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::account_disabled_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_disabled_count)
  return account_disabled_count_;
}
void CSODOTAGameAccountClient::set_account_disabled_count(::google::protobuf::uint32 value) {
  set_has_account_disabled_count();
  account_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_disabled_count)
}

// optional uint32 showcase_hero_id = 40;
bool CSODOTAGameAccountClient::has_showcase_hero_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSODOTAGameAccountClient::set_has_showcase_hero_id() {
  _has_bits_[0] |= 0x00080000u;
}
void CSODOTAGameAccountClient::clear_has_showcase_hero_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSODOTAGameAccountClient::clear_showcase_hero_id() {
  showcase_hero_id_ = 0u;
  clear_has_showcase_hero_id();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::showcase_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.showcase_hero_id)
  return showcase_hero_id_;
}
void CSODOTAGameAccountClient::set_showcase_hero_id(::google::protobuf::uint32 value) {
  set_has_showcase_hero_id();
  showcase_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.showcase_hero_id)
}

// optional uint32 match_disabled_until_date = 41;
bool CSODOTAGameAccountClient::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTAGameAccountClient::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTAGameAccountClient::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTAGameAccountClient::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.match_disabled_until_date)
  return match_disabled_until_date_;
}
void CSODOTAGameAccountClient::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.match_disabled_until_date)
}

// optional uint32 match_disabled_count = 42;
bool CSODOTAGameAccountClient::has_match_disabled_count() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSODOTAGameAccountClient::set_has_match_disabled_count() {
  _has_bits_[0] |= 0x00200000u;
}
void CSODOTAGameAccountClient::clear_has_match_disabled_count() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSODOTAGameAccountClient::clear_match_disabled_count() {
  match_disabled_count_ = 0u;
  clear_has_match_disabled_count();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::match_disabled_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.match_disabled_count)
  return match_disabled_count_;
}
void CSODOTAGameAccountClient::set_match_disabled_count(::google::protobuf::uint32 value) {
  set_has_match_disabled_count();
  match_disabled_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.match_disabled_count)
}

// optional .proto.dota.PartnerAccountType partner_account_type = 44 [default = PARTNER_NONE];
bool CSODOTAGameAccountClient::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTAGameAccountClient::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTAGameAccountClient::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTAGameAccountClient::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
::proto::dota::PartnerAccountType CSODOTAGameAccountClient::partner_account_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.partner_account_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_account_type_);
}
void CSODOTAGameAccountClient::set_partner_account_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.partner_account_type)
}

// optional uint32 partner_account_state = 45;
bool CSODOTAGameAccountClient::has_partner_account_state() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTAGameAccountClient::set_has_partner_account_state() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTAGameAccountClient::clear_has_partner_account_state() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTAGameAccountClient::clear_partner_account_state() {
  partner_account_state_ = 0u;
  clear_has_partner_account_state();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::partner_account_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.partner_account_state)
  return partner_account_state_;
}
void CSODOTAGameAccountClient::set_partner_account_state(::google::protobuf::uint32 value) {
  set_has_partner_account_state();
  partner_account_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.partner_account_state)
}

// optional uint32 shutdownlawterminatetimestamp = 47;
bool CSODOTAGameAccountClient::has_shutdownlawterminatetimestamp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTAGameAccountClient::clear_has_shutdownlawterminatetimestamp() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTAGameAccountClient::clear_shutdownlawterminatetimestamp() {
  shutdownlawterminatetimestamp_ = 0u;
  clear_has_shutdownlawterminatetimestamp();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::shutdownlawterminatetimestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
  return shutdownlawterminatetimestamp_;
}
void CSODOTAGameAccountClient::set_shutdownlawterminatetimestamp(::google::protobuf::uint32 value) {
  set_has_shutdownlawterminatetimestamp();
  shutdownlawterminatetimestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.shutdownlawterminatetimestamp)
}

// optional uint32 low_priority_games_remaining = 48;
bool CSODOTAGameAccountClient::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x02000000u;
}
void CSODOTAGameAccountClient::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x02000000u;
}
void CSODOTAGameAccountClient::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
void CSODOTAGameAccountClient::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.low_priority_games_remaining)
}

// optional uint32 competitive_rank = 49;
bool CSODOTAGameAccountClient::has_competitive_rank() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_rank() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTAGameAccountClient::clear_has_competitive_rank() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTAGameAccountClient::clear_competitive_rank() {
  competitive_rank_ = 0u;
  clear_has_competitive_rank();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.competitive_rank)
  return competitive_rank_;
}
void CSODOTAGameAccountClient::set_competitive_rank(::google::protobuf::uint32 value) {
  set_has_competitive_rank();
  competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.competitive_rank)
}

// optional uint32 calibration_games_remaining = 51;
bool CSODOTAGameAccountClient::has_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_calibration_games_remaining() {
  _has_bits_[0] |= 0x08000000u;
}
void CSODOTAGameAccountClient::clear_has_calibration_games_remaining() {
  _has_bits_[0] &= ~0x08000000u;
}
void CSODOTAGameAccountClient::clear_calibration_games_remaining() {
  calibration_games_remaining_ = 0u;
  clear_has_calibration_games_remaining();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.calibration_games_remaining)
  return calibration_games_remaining_;
}
void CSODOTAGameAccountClient::set_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_calibration_games_remaining();
  calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.calibration_games_remaining)
}

// optional uint32 solo_competitive_rank = 52;
bool CSODOTAGameAccountClient::has_solo_competitive_rank() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_competitive_rank() {
  _has_bits_[0] |= 0x10000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_competitive_rank() {
  _has_bits_[0] &= ~0x10000000u;
}
void CSODOTAGameAccountClient::clear_solo_competitive_rank() {
  solo_competitive_rank_ = 0u;
  clear_has_solo_competitive_rank();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_competitive_rank)
  return solo_competitive_rank_;
}
void CSODOTAGameAccountClient::set_solo_competitive_rank(::google::protobuf::uint32 value) {
  set_has_solo_competitive_rank();
  solo_competitive_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_competitive_rank)
}

// optional uint32 solo_calibration_games_remaining = 54;
bool CSODOTAGameAccountClient::has_solo_calibration_games_remaining() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_calibration_games_remaining() {
  _has_bits_[0] |= 0x20000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_calibration_games_remaining() {
  _has_bits_[0] &= ~0x20000000u;
}
void CSODOTAGameAccountClient::clear_solo_calibration_games_remaining() {
  solo_calibration_games_remaining_ = 0u;
  clear_has_solo_calibration_games_remaining();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_calibration_games_remaining)
  return solo_calibration_games_remaining_;
}
void CSODOTAGameAccountClient::set_solo_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_calibration_games_remaining();
  solo_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_calibration_games_remaining)
}

// optional uint32 recruitment_level = 55;
bool CSODOTAGameAccountClient::has_recruitment_level() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_recruitment_level() {
  _has_bits_[0] |= 0x40000000u;
}
void CSODOTAGameAccountClient::clear_has_recruitment_level() {
  _has_bits_[0] &= ~0x40000000u;
}
void CSODOTAGameAccountClient::clear_recruitment_level() {
  recruitment_level_ = 0u;
  clear_has_recruitment_level();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::recruitment_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recruitment_level)
  return recruitment_level_;
}
void CSODOTAGameAccountClient::set_recruitment_level(::google::protobuf::uint32 value) {
  set_has_recruitment_level();
  recruitment_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recruitment_level)
}

// optional bool has_new_notifications = 56;
bool CSODOTAGameAccountClient::has_has_new_notifications() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CSODOTAGameAccountClient::set_has_has_new_notifications() {
  _has_bits_[1] |= 0x00000800u;
}
void CSODOTAGameAccountClient::clear_has_has_new_notifications() {
  _has_bits_[1] &= ~0x00000800u;
}
void CSODOTAGameAccountClient::clear_has_new_notifications() {
  has_new_notifications_ = false;
  clear_has_has_new_notifications();
}
bool CSODOTAGameAccountClient::has_new_notifications() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.has_new_notifications)
  return has_new_notifications_;
}
void CSODOTAGameAccountClient::set_has_new_notifications(bool value) {
  set_has_has_new_notifications();
  has_new_notifications_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.has_new_notifications)
}

// optional bool is_league_admin = 57;
bool CSODOTAGameAccountClient::has_is_league_admin() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CSODOTAGameAccountClient::set_has_is_league_admin() {
  _has_bits_[1] |= 0x00001000u;
}
void CSODOTAGameAccountClient::clear_has_is_league_admin() {
  _has_bits_[1] &= ~0x00001000u;
}
void CSODOTAGameAccountClient::clear_is_league_admin() {
  is_league_admin_ = false;
  clear_has_is_league_admin();
}
bool CSODOTAGameAccountClient::is_league_admin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.is_league_admin)
  return is_league_admin_;
}
void CSODOTAGameAccountClient::set_is_league_admin(bool value) {
  set_has_is_league_admin();
  is_league_admin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.is_league_admin)
}

// optional uint32 casual_games_played = 60;
bool CSODOTAGameAccountClient::has_casual_games_played() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CSODOTAGameAccountClient::set_has_casual_games_played() {
  _has_bits_[1] |= 0x00000002u;
}
void CSODOTAGameAccountClient::clear_has_casual_games_played() {
  _has_bits_[1] &= ~0x00000002u;
}
void CSODOTAGameAccountClient::clear_casual_games_played() {
  casual_games_played_ = 0u;
  clear_has_casual_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::casual_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.casual_games_played)
  return casual_games_played_;
}
void CSODOTAGameAccountClient::set_casual_games_played(::google::protobuf::uint32 value) {
  set_has_casual_games_played();
  casual_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.casual_games_played)
}

// optional uint32 solo_competitive_games_played = 61;
bool CSODOTAGameAccountClient::has_solo_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_competitive_games_played() {
  _has_bits_[1] |= 0x00000004u;
}
void CSODOTAGameAccountClient::clear_has_solo_competitive_games_played() {
  _has_bits_[1] &= ~0x00000004u;
}
void CSODOTAGameAccountClient::clear_solo_competitive_games_played() {
  solo_competitive_games_played_ = 0u;
  clear_has_solo_competitive_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_competitive_games_played)
  return solo_competitive_games_played_;
}
void CSODOTAGameAccountClient::set_solo_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_solo_competitive_games_played();
  solo_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_competitive_games_played)
}

// optional uint32 party_competitive_games_played = 62;
bool CSODOTAGameAccountClient::has_party_competitive_games_played() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CSODOTAGameAccountClient::set_has_party_competitive_games_played() {
  _has_bits_[1] |= 0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_party_competitive_games_played() {
  _has_bits_[1] &= ~0x00000008u;
}
void CSODOTAGameAccountClient::clear_party_competitive_games_played() {
  party_competitive_games_played_ = 0u;
  clear_has_party_competitive_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::party_competitive_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.party_competitive_games_played)
  return party_competitive_games_played_;
}
void CSODOTAGameAccountClient::set_party_competitive_games_played(::google::protobuf::uint32 value) {
  set_has_party_competitive_games_played();
  party_competitive_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.party_competitive_games_played)
}

// optional uint32 casual_1v1_games_played = 65;
bool CSODOTAGameAccountClient::has_casual_1v1_games_played() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CSODOTAGameAccountClient::set_has_casual_1v1_games_played() {
  _has_bits_[1] |= 0x00000010u;
}
void CSODOTAGameAccountClient::clear_has_casual_1v1_games_played() {
  _has_bits_[1] &= ~0x00000010u;
}
void CSODOTAGameAccountClient::clear_casual_1v1_games_played() {
  casual_1v1_games_played_ = 0u;
  clear_has_casual_1v1_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::casual_1v1_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.casual_1v1_games_played)
  return casual_1v1_games_played_;
}
void CSODOTAGameAccountClient::set_casual_1v1_games_played(::google::protobuf::uint32 value) {
  set_has_casual_1v1_games_played();
  casual_1v1_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.casual_1v1_games_played)
}

// optional uint32 competitive_team_games_played = 66;
bool CSODOTAGameAccountClient::has_competitive_team_games_played() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CSODOTAGameAccountClient::set_has_competitive_team_games_played() {
  _has_bits_[1] |= 0x00000020u;
}
void CSODOTAGameAccountClient::clear_has_competitive_team_games_played() {
  _has_bits_[1] &= ~0x00000020u;
}
void CSODOTAGameAccountClient::clear_competitive_team_games_played() {
  competitive_team_games_played_ = 0u;
  clear_has_competitive_team_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::competitive_team_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.competitive_team_games_played)
  return competitive_team_games_played_;
}
void CSODOTAGameAccountClient::set_competitive_team_games_played(::google::protobuf::uint32 value) {
  set_has_competitive_team_games_played();
  competitive_team_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.competitive_team_games_played)
}

// optional uint32 curr_all_hero_challenge_id = 67;
bool CSODOTAGameAccountClient::has_curr_all_hero_challenge_id() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CSODOTAGameAccountClient::set_has_curr_all_hero_challenge_id() {
  _has_bits_[1] |= 0x00000040u;
}
void CSODOTAGameAccountClient::clear_has_curr_all_hero_challenge_id() {
  _has_bits_[1] &= ~0x00000040u;
}
void CSODOTAGameAccountClient::clear_curr_all_hero_challenge_id() {
  curr_all_hero_challenge_id_ = 0u;
  clear_has_curr_all_hero_challenge_id();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::curr_all_hero_challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.curr_all_hero_challenge_id)
  return curr_all_hero_challenge_id_;
}
void CSODOTAGameAccountClient::set_curr_all_hero_challenge_id(::google::protobuf::uint32 value) {
  set_has_curr_all_hero_challenge_id();
  curr_all_hero_challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.curr_all_hero_challenge_id)
}

// optional uint32 play_time_points = 68;
bool CSODOTAGameAccountClient::has_play_time_points() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CSODOTAGameAccountClient::set_has_play_time_points() {
  _has_bits_[1] |= 0x00000080u;
}
void CSODOTAGameAccountClient::clear_has_play_time_points() {
  _has_bits_[1] &= ~0x00000080u;
}
void CSODOTAGameAccountClient::clear_play_time_points() {
  play_time_points_ = 0u;
  clear_has_play_time_points();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.play_time_points)
  return play_time_points_;
}
void CSODOTAGameAccountClient::set_play_time_points(::google::protobuf::uint32 value) {
  set_has_play_time_points();
  play_time_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.play_time_points)
}

// optional uint32 account_flags = 69;
bool CSODOTAGameAccountClient::has_account_flags() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CSODOTAGameAccountClient::set_has_account_flags() {
  _has_bits_[1] |= 0x00000200u;
}
void CSODOTAGameAccountClient::clear_has_account_flags() {
  _has_bits_[1] &= ~0x00000200u;
}
void CSODOTAGameAccountClient::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.account_flags)
  return account_flags_;
}
void CSODOTAGameAccountClient::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.account_flags)
}

// optional uint32 play_time_level = 70;
bool CSODOTAGameAccountClient::has_play_time_level() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CSODOTAGameAccountClient::set_has_play_time_level() {
  _has_bits_[1] |= 0x00000400u;
}
void CSODOTAGameAccountClient::clear_has_play_time_level() {
  _has_bits_[1] &= ~0x00000400u;
}
void CSODOTAGameAccountClient::clear_play_time_level() {
  play_time_level_ = 0u;
  clear_has_play_time_level();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::play_time_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.play_time_level)
  return play_time_level_;
}
void CSODOTAGameAccountClient::set_play_time_level(::google::protobuf::uint32 value) {
  set_has_play_time_level();
  play_time_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.play_time_level)
}

// optional uint32 player_behavior_seq_num_last_report = 71;
bool CSODOTAGameAccountClient::has_player_behavior_seq_num_last_report() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CSODOTAGameAccountClient::set_has_player_behavior_seq_num_last_report() {
  _has_bits_[1] |= 0x00008000u;
}
void CSODOTAGameAccountClient::clear_has_player_behavior_seq_num_last_report() {
  _has_bits_[1] &= ~0x00008000u;
}
void CSODOTAGameAccountClient::clear_player_behavior_seq_num_last_report() {
  player_behavior_seq_num_last_report_ = 0u;
  clear_has_player_behavior_seq_num_last_report();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_seq_num_last_report() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
  return player_behavior_seq_num_last_report_;
}
void CSODOTAGameAccountClient::set_player_behavior_seq_num_last_report(::google::protobuf::uint32 value) {
  set_has_player_behavior_seq_num_last_report();
  player_behavior_seq_num_last_report_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_seq_num_last_report)
}

// optional uint32 player_behavior_score_last_report = 72;
bool CSODOTAGameAccountClient::has_player_behavior_score_last_report() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CSODOTAGameAccountClient::set_has_player_behavior_score_last_report() {
  _has_bits_[1] |= 0x00010000u;
}
void CSODOTAGameAccountClient::clear_has_player_behavior_score_last_report() {
  _has_bits_[1] &= ~0x00010000u;
}
void CSODOTAGameAccountClient::clear_player_behavior_score_last_report() {
  player_behavior_score_last_report_ = 0u;
  clear_has_player_behavior_score_last_report();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::player_behavior_score_last_report() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_score_last_report)
  return player_behavior_score_last_report_;
}
void CSODOTAGameAccountClient::set_player_behavior_score_last_report(::google::protobuf::uint32 value) {
  set_has_player_behavior_score_last_report();
  player_behavior_score_last_report_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_score_last_report)
}

// optional bool player_behavior_report_old_data = 73;
bool CSODOTAGameAccountClient::has_player_behavior_report_old_data() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CSODOTAGameAccountClient::set_has_player_behavior_report_old_data() {
  _has_bits_[1] |= 0x00002000u;
}
void CSODOTAGameAccountClient::clear_has_player_behavior_report_old_data() {
  _has_bits_[1] &= ~0x00002000u;
}
void CSODOTAGameAccountClient::clear_player_behavior_report_old_data() {
  player_behavior_report_old_data_ = false;
  clear_has_player_behavior_report_old_data();
}
bool CSODOTAGameAccountClient::player_behavior_report_old_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.player_behavior_report_old_data)
  return player_behavior_report_old_data_;
}
void CSODOTAGameAccountClient::set_player_behavior_report_old_data(bool value) {
  set_has_player_behavior_report_old_data();
  player_behavior_report_old_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.player_behavior_report_old_data)
}

// optional uint32 tourney_skill_level = 74;
bool CSODOTAGameAccountClient::has_tourney_skill_level() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void CSODOTAGameAccountClient::set_has_tourney_skill_level() {
  _has_bits_[1] |= 0x00020000u;
}
void CSODOTAGameAccountClient::clear_has_tourney_skill_level() {
  _has_bits_[1] &= ~0x00020000u;
}
void CSODOTAGameAccountClient::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.tourney_skill_level)
  return tourney_skill_level_;
}
void CSODOTAGameAccountClient::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.tourney_skill_level)
}

// optional uint32 tourney_recent_participation_date = 85;
bool CSODOTAGameAccountClient::has_tourney_recent_participation_date() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CSODOTAGameAccountClient::set_has_tourney_recent_participation_date() {
  _has_bits_[1] |= 0x00040000u;
}
void CSODOTAGameAccountClient::clear_has_tourney_recent_participation_date() {
  _has_bits_[1] &= ~0x00040000u;
}
void CSODOTAGameAccountClient::clear_tourney_recent_participation_date() {
  tourney_recent_participation_date_ = 0u;
  clear_has_tourney_recent_participation_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::tourney_recent_participation_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.tourney_recent_participation_date)
  return tourney_recent_participation_date_;
}
void CSODOTAGameAccountClient::set_tourney_recent_participation_date(::google::protobuf::uint32 value) {
  set_has_tourney_recent_participation_date();
  tourney_recent_participation_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.tourney_recent_participation_date)
}

// optional uint32 favorite_team = 87;
bool CSODOTAGameAccountClient::has_favorite_team() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CSODOTAGameAccountClient::set_has_favorite_team() {
  _has_bits_[1] |= 0x00200000u;
}
void CSODOTAGameAccountClient::clear_has_favorite_team() {
  _has_bits_[1] &= ~0x00200000u;
}
void CSODOTAGameAccountClient::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::favorite_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.favorite_team)
  return favorite_team_;
}
void CSODOTAGameAccountClient::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.favorite_team)
}

// optional uint64 anchored_phone_number_id = 88;
bool CSODOTAGameAccountClient::has_anchored_phone_number_id() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CSODOTAGameAccountClient::set_has_anchored_phone_number_id() {
  _has_bits_[1] |= 0x00100000u;
}
void CSODOTAGameAccountClient::clear_has_anchored_phone_number_id() {
  _has_bits_[1] &= ~0x00100000u;
}
void CSODOTAGameAccountClient::clear_anchored_phone_number_id() {
  anchored_phone_number_id_ = GOOGLE_ULONGLONG(0);
  clear_has_anchored_phone_number_id();
}
::google::protobuf::uint64 CSODOTAGameAccountClient::anchored_phone_number_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.anchored_phone_number_id)
  return anchored_phone_number_id_;
}
void CSODOTAGameAccountClient::set_anchored_phone_number_id(::google::protobuf::uint64 value) {
  set_has_anchored_phone_number_id();
  anchored_phone_number_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.anchored_phone_number_id)
}

// optional uint32 ranked_matchmaking_ban_until_date = 89;
bool CSODOTAGameAccountClient::has_ranked_matchmaking_ban_until_date() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CSODOTAGameAccountClient::set_has_ranked_matchmaking_ban_until_date() {
  _has_bits_[1] |= 0x00400000u;
}
void CSODOTAGameAccountClient::clear_has_ranked_matchmaking_ban_until_date() {
  _has_bits_[1] &= ~0x00400000u;
}
void CSODOTAGameAccountClient::clear_ranked_matchmaking_ban_until_date() {
  ranked_matchmaking_ban_until_date_ = 0u;
  clear_has_ranked_matchmaking_ban_until_date();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::ranked_matchmaking_ban_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
  return ranked_matchmaking_ban_until_date_;
}
void CSODOTAGameAccountClient::set_ranked_matchmaking_ban_until_date(::google::protobuf::uint32 value) {
  set_has_ranked_matchmaking_ban_until_date();
  ranked_matchmaking_ban_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.ranked_matchmaking_ban_until_date)
}

// optional uint32 recent_game_time_1 = 90;
bool CSODOTAGameAccountClient::has_recent_game_time_1() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void CSODOTAGameAccountClient::set_has_recent_game_time_1() {
  _has_bits_[1] |= 0x00800000u;
}
void CSODOTAGameAccountClient::clear_has_recent_game_time_1() {
  _has_bits_[1] &= ~0x00800000u;
}
void CSODOTAGameAccountClient::clear_recent_game_time_1() {
  recent_game_time_1_ = 0u;
  clear_has_recent_game_time_1();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_1)
  return recent_game_time_1_;
}
void CSODOTAGameAccountClient::set_recent_game_time_1(::google::protobuf::uint32 value) {
  set_has_recent_game_time_1();
  recent_game_time_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_1)
}

// optional uint32 recent_game_time_2 = 91;
bool CSODOTAGameAccountClient::has_recent_game_time_2() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_recent_game_time_2() {
  _has_bits_[1] |= 0x01000000u;
}
void CSODOTAGameAccountClient::clear_has_recent_game_time_2() {
  _has_bits_[1] &= ~0x01000000u;
}
void CSODOTAGameAccountClient::clear_recent_game_time_2() {
  recent_game_time_2_ = 0u;
  clear_has_recent_game_time_2();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_2)
  return recent_game_time_2_;
}
void CSODOTAGameAccountClient::set_recent_game_time_2(::google::protobuf::uint32 value) {
  set_has_recent_game_time_2();
  recent_game_time_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_2)
}

// optional uint32 recent_game_time_3 = 92;
bool CSODOTAGameAccountClient::has_recent_game_time_3() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_recent_game_time_3() {
  _has_bits_[1] |= 0x02000000u;
}
void CSODOTAGameAccountClient::clear_has_recent_game_time_3() {
  _has_bits_[1] &= ~0x02000000u;
}
void CSODOTAGameAccountClient::clear_recent_game_time_3() {
  recent_game_time_3_ = 0u;
  clear_has_recent_game_time_3();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::recent_game_time_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_game_time_3)
  return recent_game_time_3_;
}
void CSODOTAGameAccountClient::set_recent_game_time_3(::google::protobuf::uint32 value) {
  set_has_recent_game_time_3();
  recent_game_time_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_game_time_3)
}

// optional uint32 general_seasonal_ranked_rank = 93;
bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_rank() {
  _has_bits_[1] |= 0x04000000u;
}
void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_rank() {
  _has_bits_[1] &= ~0x04000000u;
}
void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank() {
  general_seasonal_ranked_rank_ = 0u;
  clear_has_general_seasonal_ranked_rank();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank)
  return general_seasonal_ranked_rank_;
}
void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_rank();
  general_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank)
}

// optional uint32 general_seasonal_ranked_calibration_games_remaining = 94;
bool CSODOTAGameAccountClient::has_general_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] |= 0x08000000u;
}
void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] &= ~0x08000000u;
}
void CSODOTAGameAccountClient::clear_general_seasonal_ranked_calibration_games_remaining() {
  general_seasonal_ranked_calibration_games_remaining_ = 0u;
  clear_has_general_seasonal_ranked_calibration_games_remaining();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
  return general_seasonal_ranked_calibration_games_remaining_;
}
void CSODOTAGameAccountClient::set_general_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_calibration_games_remaining();
  general_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 general_seasonal_ranked_games_played = 95;
bool CSODOTAGameAccountClient::has_general_seasonal_ranked_games_played() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_games_played() {
  _has_bits_[1] |= 0x10000000u;
}
void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_games_played() {
  _has_bits_[1] &= ~0x10000000u;
}
void CSODOTAGameAccountClient::clear_general_seasonal_ranked_games_played() {
  general_seasonal_ranked_games_played_ = 0u;
  clear_has_general_seasonal_ranked_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
  return general_seasonal_ranked_games_played_;
}
void CSODOTAGameAccountClient::set_general_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_games_played();
  general_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_games_played)
}

// optional uint32 general_seasonal_ranked_rank_peak = 96;
bool CSODOTAGameAccountClient::has_general_seasonal_ranked_rank_peak() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_general_seasonal_ranked_rank_peak() {
  _has_bits_[1] |= 0x20000000u;
}
void CSODOTAGameAccountClient::clear_has_general_seasonal_ranked_rank_peak() {
  _has_bits_[1] &= ~0x20000000u;
}
void CSODOTAGameAccountClient::clear_general_seasonal_ranked_rank_peak() {
  general_seasonal_ranked_rank_peak_ = 0u;
  clear_has_general_seasonal_ranked_rank_peak();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::general_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
  return general_seasonal_ranked_rank_peak_;
}
void CSODOTAGameAccountClient::set_general_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  set_has_general_seasonal_ranked_rank_peak();
  general_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_ranked_rank_peak)
}

// optional bool general_seasonal_rank_transferred = 97;
bool CSODOTAGameAccountClient::has_general_seasonal_rank_transferred() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CSODOTAGameAccountClient::set_has_general_seasonal_rank_transferred() {
  _has_bits_[1] |= 0x00004000u;
}
void CSODOTAGameAccountClient::clear_has_general_seasonal_rank_transferred() {
  _has_bits_[1] &= ~0x00004000u;
}
void CSODOTAGameAccountClient::clear_general_seasonal_rank_transferred() {
  general_seasonal_rank_transferred_ = false;
  clear_has_general_seasonal_rank_transferred();
}
bool CSODOTAGameAccountClient::general_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.general_seasonal_rank_transferred)
  return general_seasonal_rank_transferred_;
}
void CSODOTAGameAccountClient::set_general_seasonal_rank_transferred(bool value) {
  set_has_general_seasonal_rank_transferred();
  general_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.general_seasonal_rank_transferred)
}

// optional uint32 solo_seasonal_ranked_rank = 98;
bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_rank() {
  _has_bits_[1] |= 0x40000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_rank() {
  _has_bits_[1] &= ~0x40000000u;
}
void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank() {
  solo_seasonal_ranked_rank_ = 0u;
  clear_has_solo_seasonal_ranked_rank();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
  return solo_seasonal_ranked_rank_;
}
void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_rank();
  solo_seasonal_ranked_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank)
}

// optional uint32 solo_seasonal_ranked_calibration_games_remaining = 99;
bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_calibration_games_remaining() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] |= 0x80000000u;
}
void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_calibration_games_remaining() {
  _has_bits_[1] &= ~0x80000000u;
}
void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_calibration_games_remaining() {
  solo_seasonal_ranked_calibration_games_remaining_ = 0u;
  clear_has_solo_seasonal_ranked_calibration_games_remaining();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_calibration_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
  return solo_seasonal_ranked_calibration_games_remaining_;
}
void CSODOTAGameAccountClient::set_solo_seasonal_ranked_calibration_games_remaining(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_calibration_games_remaining();
  solo_seasonal_ranked_calibration_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_calibration_games_remaining)
}

// optional uint32 solo_seasonal_ranked_games_played = 100;
bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_games_played() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_games_played() {
  _has_bits_[2] |= 0x00000001u;
}
void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_games_played() {
  _has_bits_[2] &= ~0x00000001u;
}
void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_games_played() {
  solo_seasonal_ranked_games_played_ = 0u;
  clear_has_solo_seasonal_ranked_games_played();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_games_played() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
  return solo_seasonal_ranked_games_played_;
}
void CSODOTAGameAccountClient::set_solo_seasonal_ranked_games_played(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_games_played();
  solo_seasonal_ranked_games_played_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_games_played)
}

// optional uint32 solo_seasonal_ranked_rank_peak = 101;
bool CSODOTAGameAccountClient::has_solo_seasonal_ranked_rank_peak() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_seasonal_ranked_rank_peak() {
  _has_bits_[2] |= 0x00000002u;
}
void CSODOTAGameAccountClient::clear_has_solo_seasonal_ranked_rank_peak() {
  _has_bits_[2] &= ~0x00000002u;
}
void CSODOTAGameAccountClient::clear_solo_seasonal_ranked_rank_peak() {
  solo_seasonal_ranked_rank_peak_ = 0u;
  clear_has_solo_seasonal_ranked_rank_peak();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::solo_seasonal_ranked_rank_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
  return solo_seasonal_ranked_rank_peak_;
}
void CSODOTAGameAccountClient::set_solo_seasonal_ranked_rank_peak(::google::protobuf::uint32 value) {
  set_has_solo_seasonal_ranked_rank_peak();
  solo_seasonal_ranked_rank_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_ranked_rank_peak)
}

// optional bool solo_seasonal_rank_transferred = 102;
bool CSODOTAGameAccountClient::has_solo_seasonal_rank_transferred() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void CSODOTAGameAccountClient::set_has_solo_seasonal_rank_transferred() {
  _has_bits_[2] |= 0x00000004u;
}
void CSODOTAGameAccountClient::clear_has_solo_seasonal_rank_transferred() {
  _has_bits_[2] &= ~0x00000004u;
}
void CSODOTAGameAccountClient::clear_solo_seasonal_rank_transferred() {
  solo_seasonal_rank_transferred_ = false;
  clear_has_solo_seasonal_rank_transferred();
}
bool CSODOTAGameAccountClient::solo_seasonal_rank_transferred() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
  return solo_seasonal_rank_transferred_;
}
void CSODOTAGameAccountClient::set_solo_seasonal_rank_transferred(bool value) {
  set_has_solo_seasonal_rank_transferred();
  solo_seasonal_rank_transferred_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.solo_seasonal_rank_transferred)
}

// optional uint64 favorite_team_packed = 103;
bool CSODOTAGameAccountClient::has_favorite_team_packed() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void CSODOTAGameAccountClient::set_has_favorite_team_packed() {
  _has_bits_[2] |= 0x00000008u;
}
void CSODOTAGameAccountClient::clear_has_favorite_team_packed() {
  _has_bits_[2] &= ~0x00000008u;
}
void CSODOTAGameAccountClient::clear_favorite_team_packed() {
  favorite_team_packed_ = GOOGLE_ULONGLONG(0);
  clear_has_favorite_team_packed();
}
::google::protobuf::uint64 CSODOTAGameAccountClient::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.favorite_team_packed)
  return favorite_team_packed_;
}
void CSODOTAGameAccountClient::set_favorite_team_packed(::google::protobuf::uint64 value) {
  set_has_favorite_team_packed();
  favorite_team_packed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.favorite_team_packed)
}

// optional uint32 recent_report_time = 104;
bool CSODOTAGameAccountClient::has_recent_report_time() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CSODOTAGameAccountClient::set_has_recent_report_time() {
  _has_bits_[1] |= 0x00000100u;
}
void CSODOTAGameAccountClient::clear_has_recent_report_time() {
  _has_bits_[1] &= ~0x00000100u;
}
void CSODOTAGameAccountClient::clear_recent_report_time() {
  recent_report_time_ = 0u;
  clear_has_recent_report_time();
}
::google::protobuf::uint32 CSODOTAGameAccountClient::recent_report_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAGameAccountClient.recent_report_time)
  return recent_report_time_;
}
void CSODOTAGameAccountClient::set_recent_report_time(::google::protobuf::uint32 value) {
  set_has_recent_report_time();
  recent_report_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAGameAccountClient.recent_report_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints_ChatWheelMessageRange::kMessageIdStartFieldNumber;
const int CMsgLobbyEventPoints_ChatWheelMessageRange::kMessageIdEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}
CMsgLobbyEventPoints_ChatWheelMessageRange::CMsgLobbyEventPoints_ChatWheelMessageRange(const CMsgLobbyEventPoints_ChatWheelMessageRange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&message_id_start_, &from.message_id_start_,
    reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_) + sizeof(message_id_end_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&message_id_start_, 0, reinterpret_cast<char*>(&message_id_end_) -
    reinterpret_cast<char*>(&message_id_start_) + sizeof(message_id_end_));
}

CMsgLobbyEventPoints_ChatWheelMessageRange::~CMsgLobbyEventPoints_ChatWheelMessageRange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  SharedDtor();
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SharedDtor() {
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_ChatWheelMessageRange::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyEventPoints_ChatWheelMessageRange& CMsgLobbyEventPoints_ChatWheelMessageRange::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyEventPoints_ChatWheelMessageRange* CMsgLobbyEventPoints_ChatWheelMessageRange::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyEventPoints_ChatWheelMessageRange* n = new CMsgLobbyEventPoints_ChatWheelMessageRange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&message_id_start_, 0, reinterpret_cast<char*>(&message_id_end_) -
      reinterpret_cast<char*>(&message_id_start_) + sizeof(message_id_end_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyEventPoints_ChatWheelMessageRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 message_id_start = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_message_id_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 message_id_end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_message_id_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_id_start(), output);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->message_id_end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_ChatWheelMessageRange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 message_id_start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_id_start(), target);
  }

  // optional uint32 message_id_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->message_id_end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  return target;
}

size_t CMsgLobbyEventPoints_ChatWheelMessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 message_id_start = 1;
    if (has_message_id_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id_start());
    }

    // optional uint32 message_id_end = 2;
    if (has_message_id_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_id_end());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_ChatWheelMessageRange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyEventPoints_ChatWheelMessageRange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::MergeFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      message_id_start_ = from.message_id_start_;
    }
    if (cached_has_bits & 0x00000002u) {
      message_id_end_ = from.message_id_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::CopyFrom(const CMsgLobbyEventPoints_ChatWheelMessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_ChatWheelMessageRange::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_ChatWheelMessageRange::Swap(CMsgLobbyEventPoints_ChatWheelMessageRange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::InternalSwap(CMsgLobbyEventPoints_ChatWheelMessageRange* other) {
  std::swap(message_id_start_, other->message_id_start_);
  std::swap(message_id_end_, other->message_id_end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_ChatWheelMessageRange::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyEventPoints_ChatWheelMessageRange

// optional uint32 message_id_start = 1;
bool CMsgLobbyEventPoints_ChatWheelMessageRange::has_message_id_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::set_has_message_id_start() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_has_message_id_start() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_message_id_start() {
  message_id_start_ = 0u;
  clear_has_message_id_start();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_ChatWheelMessageRange::message_id_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_start)
  return message_id_start_;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::set_message_id_start(::google::protobuf::uint32 value) {
  set_has_message_id_start();
  message_id_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_start)
}

// optional uint32 message_id_end = 2;
bool CMsgLobbyEventPoints_ChatWheelMessageRange::has_message_id_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::set_has_message_id_end() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_has_message_id_end() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::clear_message_id_end() {
  message_id_end_ = 0u;
  clear_has_message_id_end();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_ChatWheelMessageRange::message_id_end() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_end)
  return message_id_end_;
}
void CMsgLobbyEventPoints_ChatWheelMessageRange::set_message_id_end(::google::protobuf::uint32 value) {
  set_has_message_id_end();
  message_id_end_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange.message_id_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints_AccountPoints::kAccountIdFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kNormalPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kOwnedFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kPremiumPointsHeldFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kFavoriteTeamFoilLevelFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kWagerTokensRemainingFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kWagerTokensMaxFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kActiveEffectsMaskFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kUnlockedChatWheelMessageRangesFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kRankWagerTokensRemainingFieldNumber;
const int CMsgLobbyEventPoints_AccountPoints::kRankWagerTokensMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}
CMsgLobbyEventPoints_AccountPoints::CMsgLobbyEventPoints_AccountPoints(const CMsgLobbyEventPoints_AccountPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      unlocked_chat_wheel_message_ranges_(from.unlocked_chat_wheel_message_ranges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&rank_wager_tokens_max_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(rank_wager_tokens_max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}

void CMsgLobbyEventPoints_AccountPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&rank_wager_tokens_max_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(rank_wager_tokens_max_));
}

CMsgLobbyEventPoints_AccountPoints::~CMsgLobbyEventPoints_AccountPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints_AccountPoints::SharedDtor() {
}

void CMsgLobbyEventPoints_AccountPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints_AccountPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints_AccountPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints_AccountPoints::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyEventPoints_AccountPoints* n = new CMsgLobbyEventPoints_AccountPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyEventPoints_AccountPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  unlocked_chat_wheel_message_ranges_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&premium_points_held_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(premium_points_held_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&favorite_team_foil_level_, 0, reinterpret_cast<char*>(&rank_wager_tokens_max_) -
      reinterpret_cast<char*>(&favorite_team_foil_level_) + sizeof(rank_wager_tokens_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyEventPoints_AccountPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 normal_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_normal_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_points = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_premium_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool owned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_owned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &owned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_favorite_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_favorite_team_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_held = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_points_held();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 premium_points_held = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_premium_points_held();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &premium_points_held_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 favorite_team_foil_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_favorite_team_foil_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorite_team_foil_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager_tokens_remaining = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_wager_tokens_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_tokens_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager_tokens_max = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_wager_tokens_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_tokens_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 active_effects_mask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_active_effects_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_effects_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unlocked_chat_wheel_message_ranges()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_wager_tokens_remaining = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_rank_wager_tokens_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_wager_tokens_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank_wager_tokens_max = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_rank_wager_tokens_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_wager_tokens_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints_AccountPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_points(), output);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->premium_points(), output);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->owned(), output);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->favorite_team(), output);
  }

  // optional uint32 favorite_team_level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->favorite_team_level(), output);
  }

  // optional uint32 points_held = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->points_held(), output);
  }

  // optional uint32 premium_points_held = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->premium_points_held(), output);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->favorite_team_foil_level(), output);
  }

  // optional uint32 wager_tokens_remaining = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->wager_tokens_remaining(), output);
  }

  // optional uint32 wager_tokens_max = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wager_tokens_max(), output);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->active_effects_mask(), output);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  for (unsigned int i = 0, n = this->unlocked_chat_wheel_message_ranges_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->unlocked_chat_wheel_message_ranges(i), output);
  }

  // optional uint32 rank_wager_tokens_remaining = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->rank_wager_tokens_remaining(), output);
  }

  // optional uint32 rank_wager_tokens_max = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank_wager_tokens_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints.AccountPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints_AccountPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 normal_points = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_points(), target);
  }

  // optional uint32 premium_points = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->premium_points(), target);
  }

  // optional bool owned = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->owned(), target);
  }

  // optional uint32 favorite_team = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->favorite_team(), target);
  }

  // optional uint32 favorite_team_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->favorite_team_level(), target);
  }

  // optional uint32 points_held = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->points_held(), target);
  }

  // optional uint32 premium_points_held = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->premium_points_held(), target);
  }

  // optional uint32 favorite_team_foil_level = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->favorite_team_foil_level(), target);
  }

  // optional uint32 wager_tokens_remaining = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->wager_tokens_remaining(), target);
  }

  // optional uint32 wager_tokens_max = 11;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wager_tokens_max(), target);
  }

  // optional uint64 active_effects_mask = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->active_effects_mask(), target);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  for (unsigned int i = 0, n = this->unlocked_chat_wheel_message_ranges_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->unlocked_chat_wheel_message_ranges(i), deterministic, target);
  }

  // optional uint32 rank_wager_tokens_remaining = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->rank_wager_tokens_remaining(), target);
  }

  // optional uint32 rank_wager_tokens_max = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank_wager_tokens_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  return target;
}

size_t CMsgLobbyEventPoints_AccountPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
  {
    unsigned int count = this->unlocked_chat_wheel_message_ranges_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlocked_chat_wheel_message_ranges(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 normal_points = 2;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 premium_points = 3;
    if (has_premium_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points());
    }

    // optional bool owned = 4;
    if (has_owned()) {
      total_size += 1 + 1;
    }

    // optional uint32 favorite_team = 5;
    if (has_favorite_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team());
    }

    // optional uint32 favorite_team_level = 6;
    if (has_favorite_team_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_level());
    }

    // optional uint32 points_held = 7;
    if (has_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_held());
    }

    // optional uint32 premium_points_held = 8;
    if (has_premium_points_held()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->premium_points_held());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 favorite_team_foil_level = 9;
    if (has_favorite_team_foil_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorite_team_foil_level());
    }

    // optional uint32 wager_tokens_remaining = 10;
    if (has_wager_tokens_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_tokens_remaining());
    }

    // optional uint64 active_effects_mask = 12;
    if (has_active_effects_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_effects_mask());
    }

    // optional uint32 wager_tokens_max = 11;
    if (has_wager_tokens_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_tokens_max());
    }

    // optional uint32 rank_wager_tokens_remaining = 14;
    if (has_rank_wager_tokens_remaining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_wager_tokens_remaining());
    }

    // optional uint32 rank_wager_tokens_max = 15;
    if (has_rank_wager_tokens_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_wager_tokens_max());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints_AccountPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyEventPoints_AccountPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints.AccountPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints.AccountPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints_AccountPoints::MergeFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlocked_chat_wheel_message_ranges_.MergeFrom(from.unlocked_chat_wheel_message_ranges_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000004u) {
      premium_points_ = from.premium_points_;
    }
    if (cached_has_bits & 0x00000008u) {
      owned_ = from.owned_;
    }
    if (cached_has_bits & 0x00000010u) {
      favorite_team_ = from.favorite_team_;
    }
    if (cached_has_bits & 0x00000020u) {
      favorite_team_level_ = from.favorite_team_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      points_held_ = from.points_held_;
    }
    if (cached_has_bits & 0x00000080u) {
      premium_points_held_ = from.premium_points_held_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      favorite_team_foil_level_ = from.favorite_team_foil_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      wager_tokens_remaining_ = from.wager_tokens_remaining_;
    }
    if (cached_has_bits & 0x00000400u) {
      active_effects_mask_ = from.active_effects_mask_;
    }
    if (cached_has_bits & 0x00000800u) {
      wager_tokens_max_ = from.wager_tokens_max_;
    }
    if (cached_has_bits & 0x00001000u) {
      rank_wager_tokens_remaining_ = from.rank_wager_tokens_remaining_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_wager_tokens_max_ = from.rank_wager_tokens_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints_AccountPoints::CopyFrom(const CMsgLobbyEventPoints_AccountPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints.AccountPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints_AccountPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints_AccountPoints::Swap(CMsgLobbyEventPoints_AccountPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints_AccountPoints::InternalSwap(CMsgLobbyEventPoints_AccountPoints* other) {
  unlocked_chat_wheel_message_ranges_.InternalSwap(&other->unlocked_chat_wheel_message_ranges_);
  std::swap(account_id_, other->account_id_);
  std::swap(normal_points_, other->normal_points_);
  std::swap(premium_points_, other->premium_points_);
  std::swap(owned_, other->owned_);
  std::swap(favorite_team_, other->favorite_team_);
  std::swap(favorite_team_level_, other->favorite_team_level_);
  std::swap(points_held_, other->points_held_);
  std::swap(premium_points_held_, other->premium_points_held_);
  std::swap(favorite_team_foil_level_, other->favorite_team_foil_level_);
  std::swap(wager_tokens_remaining_, other->wager_tokens_remaining_);
  std::swap(active_effects_mask_, other->active_effects_mask_);
  std::swap(wager_tokens_max_, other->wager_tokens_max_);
  std::swap(rank_wager_tokens_remaining_, other->rank_wager_tokens_remaining_);
  std::swap(rank_wager_tokens_max_, other->rank_wager_tokens_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints_AccountPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyEventPoints_AccountPoints

// optional uint32 account_id = 1;
bool CMsgLobbyEventPoints_AccountPoints::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.account_id)
  return account_id_;
}
void CMsgLobbyEventPoints_AccountPoints::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.account_id)
}

// optional uint32 normal_points = 2;
bool CMsgLobbyEventPoints_AccountPoints::has_normal_points() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_normal_points() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::normal_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.normal_points)
  return normal_points_;
}
void CMsgLobbyEventPoints_AccountPoints::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.normal_points)
}

// optional uint32 premium_points = 3;
bool CMsgLobbyEventPoints_AccountPoints::has_premium_points() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_premium_points() {
  premium_points_ = 0u;
  clear_has_premium_points();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points)
  return premium_points_;
}
void CMsgLobbyEventPoints_AccountPoints::set_premium_points(::google::protobuf::uint32 value) {
  set_has_premium_points();
  premium_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points)
}

// optional bool owned = 4;
bool CMsgLobbyEventPoints_AccountPoints::has_owned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_owned() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_owned() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_owned() {
  owned_ = false;
  clear_has_owned();
}
bool CMsgLobbyEventPoints_AccountPoints::owned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.owned)
  return owned_;
}
void CMsgLobbyEventPoints_AccountPoints::set_owned(bool value) {
  set_has_owned();
  owned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.owned)
}

// optional uint32 favorite_team = 5;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team() {
  favorite_team_ = 0u;
  clear_has_favorite_team();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team)
  return favorite_team_;
}
void CMsgLobbyEventPoints_AccountPoints::set_favorite_team(::google::protobuf::uint32 value) {
  set_has_favorite_team();
  favorite_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team)
}

// optional uint32 favorite_team_level = 6;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_level() {
  favorite_team_level_ = 0u;
  clear_has_favorite_team_level();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
  return favorite_team_level_;
}
void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_level();
  favorite_team_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_level)
}

// optional uint32 points_held = 7;
bool CMsgLobbyEventPoints_AccountPoints::has_points_held() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_points_held() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_points_held() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_points_held() {
  points_held_ = 0u;
  clear_has_points_held();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::points_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.points_held)
  return points_held_;
}
void CMsgLobbyEventPoints_AccountPoints::set_points_held(::google::protobuf::uint32 value) {
  set_has_points_held();
  points_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.points_held)
}

// optional uint32 premium_points_held = 8;
bool CMsgLobbyEventPoints_AccountPoints::has_premium_points_held() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_premium_points_held() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_premium_points_held() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_premium_points_held() {
  premium_points_held_ = 0u;
  clear_has_premium_points_held();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::premium_points_held() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points_held)
  return premium_points_held_;
}
void CMsgLobbyEventPoints_AccountPoints::set_premium_points_held(::google::protobuf::uint32 value) {
  set_has_premium_points_held();
  premium_points_held_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.premium_points_held)
}

// optional uint32 favorite_team_foil_level = 9;
bool CMsgLobbyEventPoints_AccountPoints::has_favorite_team_foil_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_favorite_team_foil_level() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_favorite_team_foil_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_favorite_team_foil_level() {
  favorite_team_foil_level_ = 0u;
  clear_has_favorite_team_foil_level();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::favorite_team_foil_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
  return favorite_team_foil_level_;
}
void CMsgLobbyEventPoints_AccountPoints::set_favorite_team_foil_level(::google::protobuf::uint32 value) {
  set_has_favorite_team_foil_level();
  favorite_team_foil_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.favorite_team_foil_level)
}

// optional uint32 wager_tokens_remaining = 10;
bool CMsgLobbyEventPoints_AccountPoints::has_wager_tokens_remaining() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_wager_tokens_remaining() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_wager_tokens_remaining() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_wager_tokens_remaining() {
  wager_tokens_remaining_ = 0u;
  clear_has_wager_tokens_remaining();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::wager_tokens_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens_remaining)
  return wager_tokens_remaining_;
}
void CMsgLobbyEventPoints_AccountPoints::set_wager_tokens_remaining(::google::protobuf::uint32 value) {
  set_has_wager_tokens_remaining();
  wager_tokens_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens_remaining)
}

// optional uint32 wager_tokens_max = 11;
bool CMsgLobbyEventPoints_AccountPoints::has_wager_tokens_max() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_wager_tokens_max() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_wager_tokens_max() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_wager_tokens_max() {
  wager_tokens_max_ = 0u;
  clear_has_wager_tokens_max();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::wager_tokens_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens_max)
  return wager_tokens_max_;
}
void CMsgLobbyEventPoints_AccountPoints::set_wager_tokens_max(::google::protobuf::uint32 value) {
  set_has_wager_tokens_max();
  wager_tokens_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.wager_tokens_max)
}

// optional uint64 active_effects_mask = 12;
bool CMsgLobbyEventPoints_AccountPoints::has_active_effects_mask() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_active_effects_mask() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_active_effects_mask() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_active_effects_mask() {
  active_effects_mask_ = GOOGLE_ULONGLONG(0);
  clear_has_active_effects_mask();
}
::google::protobuf::uint64 CMsgLobbyEventPoints_AccountPoints::active_effects_mask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
  return active_effects_mask_;
}
void CMsgLobbyEventPoints_AccountPoints::set_active_effects_mask(::google::protobuf::uint64 value) {
  set_has_active_effects_mask();
  active_effects_mask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.active_effects_mask)
}

// repeated .proto.dota.CMsgLobbyEventPoints.ChatWheelMessageRange unlocked_chat_wheel_message_ranges = 13;
int CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges_size() const {
  return unlocked_chat_wheel_message_ranges_.size();
}
void CMsgLobbyEventPoints_AccountPoints::clear_unlocked_chat_wheel_message_ranges() {
  unlocked_chat_wheel_message_ranges_.Clear();
}
const ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange& CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Get(index);
}
::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* CMsgLobbyEventPoints_AccountPoints::mutable_unlocked_chat_wheel_message_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Mutable(index);
}
::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange* CMsgLobbyEventPoints_AccountPoints::add_unlocked_chat_wheel_message_ranges() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >*
CMsgLobbyEventPoints_AccountPoints::mutable_unlocked_chat_wheel_message_ranges() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return &unlocked_chat_wheel_message_ranges_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_ChatWheelMessageRange >&
CMsgLobbyEventPoints_AccountPoints::unlocked_chat_wheel_message_ranges() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyEventPoints.AccountPoints.unlocked_chat_wheel_message_ranges)
  return unlocked_chat_wheel_message_ranges_;
}

// optional uint32 rank_wager_tokens_remaining = 14;
bool CMsgLobbyEventPoints_AccountPoints::has_rank_wager_tokens_remaining() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_rank_wager_tokens_remaining() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_rank_wager_tokens_remaining() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_rank_wager_tokens_remaining() {
  rank_wager_tokens_remaining_ = 0u;
  clear_has_rank_wager_tokens_remaining();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::rank_wager_tokens_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens_remaining)
  return rank_wager_tokens_remaining_;
}
void CMsgLobbyEventPoints_AccountPoints::set_rank_wager_tokens_remaining(::google::protobuf::uint32 value) {
  set_has_rank_wager_tokens_remaining();
  rank_wager_tokens_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens_remaining)
}

// optional uint32 rank_wager_tokens_max = 15;
bool CMsgLobbyEventPoints_AccountPoints::has_rank_wager_tokens_max() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgLobbyEventPoints_AccountPoints::set_has_rank_wager_tokens_max() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_has_rank_wager_tokens_max() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgLobbyEventPoints_AccountPoints::clear_rank_wager_tokens_max() {
  rank_wager_tokens_max_ = 0u;
  clear_has_rank_wager_tokens_max();
}
::google::protobuf::uint32 CMsgLobbyEventPoints_AccountPoints::rank_wager_tokens_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens_max)
  return rank_wager_tokens_max_;
}
void CMsgLobbyEventPoints_AccountPoints::set_rank_wager_tokens_max(::google::protobuf::uint32 value) {
  set_has_rank_wager_tokens_max();
  rank_wager_tokens_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.AccountPoints.rank_wager_tokens_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyEventPoints::kEventIdFieldNumber;
const int CMsgLobbyEventPoints::kAccountPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyEventPoints::CMsgLobbyEventPoints()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyEventPoints)
}
CMsgLobbyEventPoints::CMsgLobbyEventPoints(const CMsgLobbyEventPoints& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_points_(from.account_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_id_ = from.event_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyEventPoints)
}

void CMsgLobbyEventPoints::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
}

CMsgLobbyEventPoints::~CMsgLobbyEventPoints() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyEventPoints)
  SharedDtor();
}

void CMsgLobbyEventPoints::SharedDtor() {
}

void CMsgLobbyEventPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyEventPoints::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyEventPoints& CMsgLobbyEventPoints::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyEventPoints* CMsgLobbyEventPoints::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyEventPoints* n = new CMsgLobbyEventPoints;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyEventPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyEventPoints)
  account_points_.Clear();
  event_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyEventPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyEventPoints)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_account_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyEventPoints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyEventPoints)
  return false;
#undef DO_
}

void CMsgLobbyEventPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0, n = this->account_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->account_points(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyEventPoints)
}

::google::protobuf::uint8* CMsgLobbyEventPoints::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyEventPoints)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  for (unsigned int i = 0, n = this->account_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->account_points(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyEventPoints)
  return target;
}

size_t CMsgLobbyEventPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyEventPoints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
  {
    unsigned int count = this->account_points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_points(i));
    }
  }

  // optional uint32 event_id = 1;
  if (has_event_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->event_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyEventPoints::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyEventPoints* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyEventPoints>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyEventPoints)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyEventPoints)
    MergeFrom(*source);
  }
}

void CMsgLobbyEventPoints::MergeFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyEventPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_points_.MergeFrom(from.account_points_);
  if (from.has_event_id()) {
    set_event_id(from.event_id());
  }
}

void CMsgLobbyEventPoints::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyEventPoints::CopyFrom(const CMsgLobbyEventPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyEventPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyEventPoints::IsInitialized() const {
  return true;
}

void CMsgLobbyEventPoints::Swap(CMsgLobbyEventPoints* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyEventPoints::InternalSwap(CMsgLobbyEventPoints* other) {
  account_points_.InternalSwap(&other->account_points_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyEventPoints::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyEventPoints

// optional uint32 event_id = 1;
bool CMsgLobbyEventPoints::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyEventPoints::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyEventPoints::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyEventPoints::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgLobbyEventPoints::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.event_id)
  return event_id_;
}
void CMsgLobbyEventPoints::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyEventPoints.event_id)
}

// repeated .proto.dota.CMsgLobbyEventPoints.AccountPoints account_points = 2;
int CMsgLobbyEventPoints::account_points_size() const {
  return account_points_.size();
}
void CMsgLobbyEventPoints::clear_account_points() {
  account_points_.Clear();
}
const ::proto::dota::CMsgLobbyEventPoints_AccountPoints& CMsgLobbyEventPoints::account_points(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Get(index);
}
::proto::dota::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::mutable_account_points(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Mutable(index);
}
::proto::dota::CMsgLobbyEventPoints_AccountPoints* CMsgLobbyEventPoints::add_account_points() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >*
CMsgLobbyEventPoints::mutable_account_points() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyEventPoints.account_points)
  return &account_points_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgLobbyEventPoints_AccountPoints >&
CMsgLobbyEventPoints::account_points() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyEventPoints.account_points)
  return account_points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBattleCupVictory::kAccountIdFieldNumber;
const int CMsgBattleCupVictory::kWinDateFieldNumber;
const int CMsgBattleCupVictory::kValidUntilFieldNumber;
const int CMsgBattleCupVictory::kSkillLevelFieldNumber;
const int CMsgBattleCupVictory::kTournamentIdFieldNumber;
const int CMsgBattleCupVictory::kDivisionIdFieldNumber;
const int CMsgBattleCupVictory::kTeamIdFieldNumber;
const int CMsgBattleCupVictory::kStreakFieldNumber;
const int CMsgBattleCupVictory::kTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBattleCupVictory::CMsgBattleCupVictory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBattleCupVictory)
}
CMsgBattleCupVictory::CMsgBattleCupVictory(const CMsgBattleCupVictory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBattleCupVictory)
}

void CMsgBattleCupVictory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(trophy_id_));
}

CMsgBattleCupVictory::~CMsgBattleCupVictory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBattleCupVictory)
  SharedDtor();
}

void CMsgBattleCupVictory::SharedDtor() {
}

void CMsgBattleCupVictory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBattleCupVictory::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBattleCupVictory& CMsgBattleCupVictory::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBattleCupVictory* CMsgBattleCupVictory::New(::google::protobuf::Arena* arena) const {
  CMsgBattleCupVictory* n = new CMsgBattleCupVictory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBattleCupVictory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBattleCupVictory)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&streak_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(streak_));
  }
  trophy_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBattleCupVictory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBattleCupVictory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_win_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 valid_until = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_valid_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valid_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 streak = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBattleCupVictory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBattleCupVictory)
  return false;
#undef DO_
}

void CMsgBattleCupVictory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBattleCupVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->win_date(), output);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->valid_until(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tournament_id(), output);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->division_id(), output);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_id(), output);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->streak(), output);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBattleCupVictory)
}

::google::protobuf::uint8* CMsgBattleCupVictory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBattleCupVictory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 win_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->win_date(), target);
  }

  // optional uint32 valid_until = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->valid_until(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 tournament_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tournament_id(), target);
  }

  // optional uint32 division_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->division_id(), target);
  }

  // optional uint32 team_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_id(), target);
  }

  // optional uint32 streak = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->streak(), target);
  }

  // optional uint32 trophy_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBattleCupVictory)
  return target;
}

size_t CMsgBattleCupVictory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBattleCupVictory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 win_date = 2;
    if (has_win_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_date());
    }

    // optional uint32 valid_until = 3;
    if (has_valid_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valid_until());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 tournament_id = 5;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 6;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 team_id = 7;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 streak = 8;
    if (has_streak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->streak());
    }

  }
  // optional uint32 trophy_id = 9;
  if (has_trophy_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trophy_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBattleCupVictory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBattleCupVictory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBattleCupVictory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBattleCupVictory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBattleCupVictory)
    MergeFrom(*source);
  }
}

void CMsgBattleCupVictory::MergeFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBattleCupVictory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      win_date_ = from.win_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      valid_until_ = from.valid_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      streak_ = from.streak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_trophy_id(from.trophy_id());
  }
}

void CMsgBattleCupVictory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBattleCupVictory::CopyFrom(const CMsgBattleCupVictory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBattleCupVictory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBattleCupVictory::IsInitialized() const {
  return true;
}

void CMsgBattleCupVictory::Swap(CMsgBattleCupVictory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBattleCupVictory::InternalSwap(CMsgBattleCupVictory* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(win_date_, other->win_date_);
  std::swap(valid_until_, other->valid_until_);
  std::swap(skill_level_, other->skill_level_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(division_id_, other->division_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(streak_, other->streak_);
  std::swap(trophy_id_, other->trophy_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBattleCupVictory::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBattleCupVictory

// optional uint32 account_id = 1;
bool CMsgBattleCupVictory::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBattleCupVictory::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBattleCupVictory::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBattleCupVictory::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgBattleCupVictory::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.account_id)
  return account_id_;
}
void CMsgBattleCupVictory::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.account_id)
}

// optional uint32 win_date = 2;
bool CMsgBattleCupVictory::has_win_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBattleCupVictory::set_has_win_date() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBattleCupVictory::clear_has_win_date() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBattleCupVictory::clear_win_date() {
  win_date_ = 0u;
  clear_has_win_date();
}
::google::protobuf::uint32 CMsgBattleCupVictory::win_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.win_date)
  return win_date_;
}
void CMsgBattleCupVictory::set_win_date(::google::protobuf::uint32 value) {
  set_has_win_date();
  win_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.win_date)
}

// optional uint32 valid_until = 3;
bool CMsgBattleCupVictory::has_valid_until() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBattleCupVictory::set_has_valid_until() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBattleCupVictory::clear_has_valid_until() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBattleCupVictory::clear_valid_until() {
  valid_until_ = 0u;
  clear_has_valid_until();
}
::google::protobuf::uint32 CMsgBattleCupVictory::valid_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.valid_until)
  return valid_until_;
}
void CMsgBattleCupVictory::set_valid_until(::google::protobuf::uint32 value) {
  set_has_valid_until();
  valid_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.valid_until)
}

// optional uint32 skill_level = 4;
bool CMsgBattleCupVictory::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBattleCupVictory::set_has_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBattleCupVictory::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBattleCupVictory::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
::google::protobuf::uint32 CMsgBattleCupVictory::skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.skill_level)
  return skill_level_;
}
void CMsgBattleCupVictory::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.skill_level)
}

// optional uint32 tournament_id = 5;
bool CMsgBattleCupVictory::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBattleCupVictory::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBattleCupVictory::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBattleCupVictory::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgBattleCupVictory::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.tournament_id)
  return tournament_id_;
}
void CMsgBattleCupVictory::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.tournament_id)
}

// optional uint32 division_id = 6;
bool CMsgBattleCupVictory::has_division_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBattleCupVictory::set_has_division_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBattleCupVictory::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBattleCupVictory::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
::google::protobuf::uint32 CMsgBattleCupVictory::division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.division_id)
  return division_id_;
}
void CMsgBattleCupVictory::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.division_id)
}

// optional uint32 team_id = 7;
bool CMsgBattleCupVictory::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBattleCupVictory::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBattleCupVictory::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBattleCupVictory::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgBattleCupVictory::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.team_id)
  return team_id_;
}
void CMsgBattleCupVictory::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.team_id)
}

// optional uint32 streak = 8;
bool CMsgBattleCupVictory::has_streak() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBattleCupVictory::set_has_streak() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBattleCupVictory::clear_has_streak() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBattleCupVictory::clear_streak() {
  streak_ = 0u;
  clear_has_streak();
}
::google::protobuf::uint32 CMsgBattleCupVictory::streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.streak)
  return streak_;
}
void CMsgBattleCupVictory::set_streak(::google::protobuf::uint32 value) {
  set_has_streak();
  streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.streak)
}

// optional uint32 trophy_id = 9;
bool CMsgBattleCupVictory::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgBattleCupVictory::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgBattleCupVictory::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgBattleCupVictory::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
::google::protobuf::uint32 CMsgBattleCupVictory::trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBattleCupVictory.trophy_id)
  return trophy_id_;
}
void CMsgBattleCupVictory::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBattleCupVictory.trophy_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyBattleCupVictoryList::kWinnersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyBattleCupVictoryList)
}
CMsgLobbyBattleCupVictoryList::CMsgLobbyBattleCupVictoryList(const CMsgLobbyBattleCupVictoryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      winners_(from.winners_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyBattleCupVictoryList)
}

void CMsgLobbyBattleCupVictoryList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgLobbyBattleCupVictoryList::~CMsgLobbyBattleCupVictoryList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyBattleCupVictoryList)
  SharedDtor();
}

void CMsgLobbyBattleCupVictoryList::SharedDtor() {
}

void CMsgLobbyBattleCupVictoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyBattleCupVictoryList::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyBattleCupVictoryList& CMsgLobbyBattleCupVictoryList::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyBattleCupVictoryList* CMsgLobbyBattleCupVictoryList::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyBattleCupVictoryList* n = new CMsgLobbyBattleCupVictoryList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyBattleCupVictoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  winners_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyBattleCupVictoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_winners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyBattleCupVictoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyBattleCupVictoryList)
  return false;
#undef DO_
}

void CMsgLobbyBattleCupVictoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  for (unsigned int i = 0, n = this->winners_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->winners(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyBattleCupVictoryList)
}

::google::protobuf::uint8* CMsgLobbyBattleCupVictoryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  for (unsigned int i = 0, n = this->winners_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->winners(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyBattleCupVictoryList)
  return target;
}

size_t CMsgLobbyBattleCupVictoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgBattleCupVictory winners = 1;
  {
    unsigned int count = this->winners_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->winners(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyBattleCupVictoryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyBattleCupVictoryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyBattleCupVictoryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyBattleCupVictoryList)
    MergeFrom(*source);
  }
}

void CMsgLobbyBattleCupVictoryList::MergeFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  winners_.MergeFrom(from.winners_);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyBattleCupVictoryList::CopyFrom(const CMsgLobbyBattleCupVictoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyBattleCupVictoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyBattleCupVictoryList::IsInitialized() const {
  return true;
}

void CMsgLobbyBattleCupVictoryList::Swap(CMsgLobbyBattleCupVictoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyBattleCupVictoryList::InternalSwap(CMsgLobbyBattleCupVictoryList* other) {
  winners_.InternalSwap(&other->winners_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyBattleCupVictoryList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyBattleCupVictoryList

// repeated .proto.dota.CMsgBattleCupVictory winners = 1;
int CMsgLobbyBattleCupVictoryList::winners_size() const {
  return winners_.size();
}
void CMsgLobbyBattleCupVictoryList::clear_winners() {
  winners_.Clear();
}
const ::proto::dota::CMsgBattleCupVictory& CMsgLobbyBattleCupVictoryList::winners(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Get(index);
}
::proto::dota::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::mutable_winners(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Mutable(index);
}
::proto::dota::CMsgBattleCupVictory* CMsgLobbyBattleCupVictoryList::add_winners() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >*
CMsgLobbyBattleCupVictoryList::mutable_winners() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return &winners_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBattleCupVictory >&
CMsgLobbyBattleCupVictoryList::winners() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyBattleCupVictoryList.winners)
  return winners_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABroadcastNotification::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABroadcastNotification)
}
CMsgDOTABroadcastNotification::CMsgDOTABroadcastNotification(const CMsgDOTABroadcastNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABroadcastNotification)
}

void CMsgDOTABroadcastNotification::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTABroadcastNotification::~CMsgDOTABroadcastNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABroadcastNotification)
  SharedDtor();
}

void CMsgDOTABroadcastNotification::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABroadcastNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABroadcastNotification::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABroadcastNotification& CMsgDOTABroadcastNotification::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABroadcastNotification* CMsgDOTABroadcastNotification::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABroadcastNotification* n = new CMsgDOTABroadcastNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABroadcastNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABroadcastNotification)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABroadcastNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABroadcastNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTABroadcastNotification.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABroadcastNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABroadcastNotification)
  return false;
#undef DO_
}

void CMsgDOTABroadcastNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABroadcastNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastNotification.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABroadcastNotification)
}

::google::protobuf::uint8* CMsgDOTABroadcastNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABroadcastNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABroadcastNotification.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABroadcastNotification)
  return target;
}

size_t CMsgDOTABroadcastNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABroadcastNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABroadcastNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABroadcastNotification* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABroadcastNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABroadcastNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABroadcastNotification)
    MergeFrom(*source);
  }
}

void CMsgDOTABroadcastNotification::MergeFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABroadcastNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    set_has_message();
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CMsgDOTABroadcastNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABroadcastNotification::CopyFrom(const CMsgDOTABroadcastNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABroadcastNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABroadcastNotification::IsInitialized() const {
  return true;
}

void CMsgDOTABroadcastNotification::Swap(CMsgDOTABroadcastNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABroadcastNotification::InternalSwap(CMsgDOTABroadcastNotification* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABroadcastNotification::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABroadcastNotification

// optional string message = 1;
bool CMsgDOTABroadcastNotification::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABroadcastNotification::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABroadcastNotification::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABroadcastNotification::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgDOTABroadcastNotification::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABroadcastNotification.message)
  return message_.GetNoArena();
}
void CMsgDOTABroadcastNotification::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABroadcastNotification.message)
}
#if LANG_CXX11
void CMsgDOTABroadcastNotification::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTABroadcastNotification.message)
}
#endif
void CMsgDOTABroadcastNotification::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTABroadcastNotification.message)
}
void CMsgDOTABroadcastNotification::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTABroadcastNotification.message)
}
::std::string* CMsgDOTABroadcastNotification::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABroadcastNotification.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTABroadcastNotification::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABroadcastNotification.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTABroadcastNotification::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABroadcastNotification.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProtoItemHeroStatue::kHeroIdFieldNumber;
const int CProtoItemHeroStatue::kStatusEffectIndexFieldNumber;
const int CProtoItemHeroStatue::kSequenceNameFieldNumber;
const int CProtoItemHeroStatue::kCycleFieldNumber;
const int CProtoItemHeroStatue::kWearableFieldNumber;
const int CProtoItemHeroStatue::kInscriptionFieldNumber;
const int CProtoItemHeroStatue::kStyleFieldNumber;
const int CProtoItemHeroStatue::kTournamentDropFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProtoItemHeroStatue::CProtoItemHeroStatue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CProtoItemHeroStatue)
}
CProtoItemHeroStatue::CProtoItemHeroStatue(const CProtoItemHeroStatue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_name()) {
    sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
  }
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inscription()) {
    inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&tournament_drop_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(tournament_drop_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CProtoItemHeroStatue)
}

void CProtoItemHeroStatue::SharedCtor() {
  _cached_size_ = 0;
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&tournament_drop_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(tournament_drop_));
}

CProtoItemHeroStatue::~CProtoItemHeroStatue() {
  // @@protoc_insertion_point(destructor:proto.dota.CProtoItemHeroStatue)
  SharedDtor();
}

void CProtoItemHeroStatue::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemHeroStatue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemHeroStatue::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CProtoItemHeroStatue& CProtoItemHeroStatue::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CProtoItemHeroStatue* CProtoItemHeroStatue::New(::google::protobuf::Arena* arena) const {
  CProtoItemHeroStatue* n = new CProtoItemHeroStatue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemHeroStatue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CProtoItemHeroStatue)
  wearable_.Clear();
  style_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sequence_name()) {
      GOOGLE_DCHECK(!sequence_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sequence_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_inscription()) {
      GOOGLE_DCHECK(!inscription_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inscription_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&tournament_drop_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(tournament_drop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CProtoItemHeroStatue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CProtoItemHeroStatue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status_effect_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemHeroStatue.sequence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_wearable())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemHeroStatue.inscription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_style())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool tournament_drop = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tournament_drop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CProtoItemHeroStatue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CProtoItemHeroStatue)
  return false;
#undef DO_
}

void CProtoItemHeroStatue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CProtoItemHeroStatue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->wearable_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->style_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  // optional bool tournament_drop = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tournament_drop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CProtoItemHeroStatue)
}

::google::protobuf::uint8* CProtoItemHeroStatue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CProtoItemHeroStatue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->wearable_, target);

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemHeroStatue.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->style_, target);

  // optional bool tournament_drop = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tournament_drop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CProtoItemHeroStatue)
  return target;
}

size_t CProtoItemHeroStatue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CProtoItemHeroStatue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->style_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

    // optional bool tournament_drop = 8;
    if (has_tournament_drop()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemHeroStatue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemHeroStatue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemHeroStatue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CProtoItemHeroStatue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CProtoItemHeroStatue)
    MergeFrom(*source);
  }
}

void CProtoItemHeroStatue::MergeFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CProtoItemHeroStatue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sequence_name();
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_inscription();
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      tournament_drop_ = from.tournament_drop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemHeroStatue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemHeroStatue::CopyFrom(const CProtoItemHeroStatue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CProtoItemHeroStatue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemHeroStatue::IsInitialized() const {
  return true;
}

void CProtoItemHeroStatue::Swap(CProtoItemHeroStatue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemHeroStatue::InternalSwap(CProtoItemHeroStatue* other) {
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_);
  inscription_.Swap(&other->inscription_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(status_effect_index_, other->status_effect_index_);
  std::swap(cycle_, other->cycle_);
  std::swap(tournament_drop_, other->tournament_drop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemHeroStatue::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemHeroStatue

// optional uint32 hero_id = 1;
bool CProtoItemHeroStatue::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemHeroStatue::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemHeroStatue::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemHeroStatue::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CProtoItemHeroStatue::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.hero_id)
  return hero_id_;
}
void CProtoItemHeroStatue::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.hero_id)
}

// optional uint32 status_effect_index = 2;
bool CProtoItemHeroStatue::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemHeroStatue::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemHeroStatue::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemHeroStatue::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
::google::protobuf::uint32 CProtoItemHeroStatue::status_effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.status_effect_index)
  return status_effect_index_;
}
void CProtoItemHeroStatue::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.status_effect_index)
}

// optional string sequence_name = 3;
bool CProtoItemHeroStatue::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemHeroStatue::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemHeroStatue::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemHeroStatue::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_name();
}
const ::std::string& CProtoItemHeroStatue::sequence_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.sequence_name)
  return sequence_name_.GetNoArena();
}
void CProtoItemHeroStatue::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.sequence_name)
}
#if LANG_CXX11
void CProtoItemHeroStatue::set_sequence_name(::std::string&& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemHeroStatue.sequence_name)
}
#endif
void CProtoItemHeroStatue::set_sequence_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemHeroStatue.sequence_name)
}
void CProtoItemHeroStatue::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemHeroStatue.sequence_name)
}
::std::string* CProtoItemHeroStatue::mutable_sequence_name() {
  set_has_sequence_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemHeroStatue.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CProtoItemHeroStatue::release_sequence_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemHeroStatue.sequence_name)
  clear_has_sequence_name();
  return sequence_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CProtoItemHeroStatue::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != NULL) {
    set_has_sequence_name();
  } else {
    clear_has_sequence_name();
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemHeroStatue.sequence_name)
}

// optional float cycle = 4;
bool CProtoItemHeroStatue::has_cycle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CProtoItemHeroStatue::set_has_cycle() {
  _has_bits_[0] |= 0x00000010u;
}
void CProtoItemHeroStatue::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CProtoItemHeroStatue::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
float CProtoItemHeroStatue::cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.cycle)
  return cycle_;
}
void CProtoItemHeroStatue::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.cycle)
}

// repeated uint32 wearable = 5;
int CProtoItemHeroStatue::wearable_size() const {
  return wearable_.size();
}
void CProtoItemHeroStatue::clear_wearable() {
  wearable_.Clear();
}
::google::protobuf::uint32 CProtoItemHeroStatue::wearable(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.wearable)
  return wearable_.Get(index);
}
void CProtoItemHeroStatue::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.wearable)
}
void CProtoItemHeroStatue::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemHeroStatue.wearable)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::wearable() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemHeroStatue.wearable)
  return wearable_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemHeroStatue.wearable)
  return &wearable_;
}

// optional string inscription = 6;
bool CProtoItemHeroStatue::has_inscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemHeroStatue::set_has_inscription() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemHeroStatue::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemHeroStatue::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inscription();
}
const ::std::string& CProtoItemHeroStatue::inscription() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.inscription)
  return inscription_.GetNoArena();
}
void CProtoItemHeroStatue::set_inscription(const ::std::string& value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.inscription)
}
#if LANG_CXX11
void CProtoItemHeroStatue::set_inscription(::std::string&& value) {
  set_has_inscription();
  inscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemHeroStatue.inscription)
}
#endif
void CProtoItemHeroStatue::set_inscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemHeroStatue.inscription)
}
void CProtoItemHeroStatue::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemHeroStatue.inscription)
}
::std::string* CProtoItemHeroStatue::mutable_inscription() {
  set_has_inscription();
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemHeroStatue.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CProtoItemHeroStatue::release_inscription() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemHeroStatue.inscription)
  clear_has_inscription();
  return inscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CProtoItemHeroStatue::set_allocated_inscription(::std::string* inscription) {
  if (inscription != NULL) {
    set_has_inscription();
  } else {
    clear_has_inscription();
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemHeroStatue.inscription)
}

// repeated uint32 style = 7;
int CProtoItemHeroStatue::style_size() const {
  return style_.size();
}
void CProtoItemHeroStatue::clear_style() {
  style_.Clear();
}
::google::protobuf::uint32 CProtoItemHeroStatue::style(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.style)
  return style_.Get(index);
}
void CProtoItemHeroStatue::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.style)
}
void CProtoItemHeroStatue::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemHeroStatue.style)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemHeroStatue::style() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemHeroStatue.style)
  return style_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemHeroStatue::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemHeroStatue.style)
  return &style_;
}

// optional bool tournament_drop = 8;
bool CProtoItemHeroStatue::has_tournament_drop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CProtoItemHeroStatue::set_has_tournament_drop() {
  _has_bits_[0] |= 0x00000020u;
}
void CProtoItemHeroStatue::clear_has_tournament_drop() {
  _has_bits_[0] &= ~0x00000020u;
}
void CProtoItemHeroStatue::clear_tournament_drop() {
  tournament_drop_ = false;
  clear_has_tournament_drop();
}
bool CProtoItemHeroStatue::tournament_drop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemHeroStatue.tournament_drop)
  return tournament_drop_;
}
void CProtoItemHeroStatue::set_tournament_drop(bool value) {
  set_has_tournament_drop();
  tournament_drop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemHeroStatue.tournament_drop)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CProtoItemTeamShowcase::kHeroIdFieldNumber;
const int CProtoItemTeamShowcase::kStatusEffectIndexFieldNumber;
const int CProtoItemTeamShowcase::kSequenceNameFieldNumber;
const int CProtoItemTeamShowcase::kCycleFieldNumber;
const int CProtoItemTeamShowcase::kWearableFieldNumber;
const int CProtoItemTeamShowcase::kInscriptionFieldNumber;
const int CProtoItemTeamShowcase::kStyleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CProtoItemTeamShowcase::CProtoItemTeamShowcase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CProtoItemTeamShowcase)
}
CProtoItemTeamShowcase::CProtoItemTeamShowcase(const CProtoItemTeamShowcase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      wearable_(from.wearable_),
      style_(from.style_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sequence_name()) {
    sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
  }
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inscription()) {
    inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
  }
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(cycle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CProtoItemTeamShowcase)
}

void CProtoItemTeamShowcase::SharedCtor() {
  _cached_size_ = 0;
  sequence_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&cycle_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(cycle_));
}

CProtoItemTeamShowcase::~CProtoItemTeamShowcase() {
  // @@protoc_insertion_point(destructor:proto.dota.CProtoItemTeamShowcase)
  SharedDtor();
}

void CProtoItemTeamShowcase::SharedDtor() {
  sequence_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CProtoItemTeamShowcase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CProtoItemTeamShowcase::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CProtoItemTeamShowcase& CProtoItemTeamShowcase::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CProtoItemTeamShowcase* CProtoItemTeamShowcase::New(::google::protobuf::Arena* arena) const {
  CProtoItemTeamShowcase* n = new CProtoItemTeamShowcase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CProtoItemTeamShowcase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CProtoItemTeamShowcase)
  wearable_.Clear();
  style_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sequence_name()) {
      GOOGLE_DCHECK(!sequence_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sequence_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_inscription()) {
      GOOGLE_DCHECK(!inscription_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inscription_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&cycle_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(cycle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CProtoItemTeamShowcase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CProtoItemTeamShowcase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status_effect_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_status_effect_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sequence_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sequence_name().data(), this->sequence_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemTeamShowcase.sequence_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 wearable = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_wearable())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wearable())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inscription = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inscription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inscription().data(), this->inscription().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CProtoItemTeamShowcase.inscription");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 style = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_style())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CProtoItemTeamShowcase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CProtoItemTeamShowcase)
  return false;
#undef DO_
}

void CProtoItemTeamShowcase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CProtoItemTeamShowcase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status_effect_index(), output);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.sequence_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence_name(), output);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cycle(), output);
  }

  // repeated uint32 wearable = 5;
  for (int i = 0, n = this->wearable_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->wearable(i), output);
  }

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.inscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->inscription(), output);
  }

  // repeated uint32 style = 7;
  for (int i = 0, n = this->style_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->style(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CProtoItemTeamShowcase)
}

::google::protobuf::uint8* CProtoItemTeamShowcase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CProtoItemTeamShowcase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 status_effect_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status_effect_index(), target);
  }

  // optional string sequence_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sequence_name().data(), this->sequence_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.sequence_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence_name(), target);
  }

  // optional float cycle = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cycle(), target);
  }

  // repeated uint32 wearable = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->wearable_, target);

  // optional string inscription = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inscription().data(), this->inscription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CProtoItemTeamShowcase.inscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->inscription(), target);
  }

  // repeated uint32 style = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->style_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CProtoItemTeamShowcase)
  return target;
}

size_t CProtoItemTeamShowcase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CProtoItemTeamShowcase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 wearable = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->wearable_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->wearable_size());
    total_size += data_size;
  }

  // repeated uint32 style = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->style_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->style_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string sequence_name = 3;
    if (has_sequence_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sequence_name());
    }

    // optional string inscription = 6;
    if (has_inscription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inscription());
    }

    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 status_effect_index = 2;
    if (has_status_effect_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status_effect_index());
    }

    // optional float cycle = 4;
    if (has_cycle()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CProtoItemTeamShowcase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  const CProtoItemTeamShowcase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CProtoItemTeamShowcase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CProtoItemTeamShowcase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CProtoItemTeamShowcase)
    MergeFrom(*source);
  }
}

void CProtoItemTeamShowcase::MergeFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CProtoItemTeamShowcase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wearable_.MergeFrom(from.wearable_);
  style_.MergeFrom(from.style_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sequence_name();
      sequence_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_inscription();
      inscription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inscription_);
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_effect_index_ = from.status_effect_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      cycle_ = from.cycle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CProtoItemTeamShowcase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CProtoItemTeamShowcase::CopyFrom(const CProtoItemTeamShowcase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CProtoItemTeamShowcase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CProtoItemTeamShowcase::IsInitialized() const {
  return true;
}

void CProtoItemTeamShowcase::Swap(CProtoItemTeamShowcase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CProtoItemTeamShowcase::InternalSwap(CProtoItemTeamShowcase* other) {
  wearable_.InternalSwap(&other->wearable_);
  style_.InternalSwap(&other->style_);
  sequence_name_.Swap(&other->sequence_name_);
  inscription_.Swap(&other->inscription_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(status_effect_index_, other->status_effect_index_);
  std::swap(cycle_, other->cycle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CProtoItemTeamShowcase::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CProtoItemTeamShowcase

// optional uint32 hero_id = 1;
bool CProtoItemTeamShowcase::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CProtoItemTeamShowcase::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CProtoItemTeamShowcase::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CProtoItemTeamShowcase::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CProtoItemTeamShowcase::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.hero_id)
  return hero_id_;
}
void CProtoItemTeamShowcase::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.hero_id)
}

// optional uint32 status_effect_index = 2;
bool CProtoItemTeamShowcase::has_status_effect_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CProtoItemTeamShowcase::set_has_status_effect_index() {
  _has_bits_[0] |= 0x00000008u;
}
void CProtoItemTeamShowcase::clear_has_status_effect_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void CProtoItemTeamShowcase::clear_status_effect_index() {
  status_effect_index_ = 0u;
  clear_has_status_effect_index();
}
::google::protobuf::uint32 CProtoItemTeamShowcase::status_effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.status_effect_index)
  return status_effect_index_;
}
void CProtoItemTeamShowcase::set_status_effect_index(::google::protobuf::uint32 value) {
  set_has_status_effect_index();
  status_effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.status_effect_index)
}

// optional string sequence_name = 3;
bool CProtoItemTeamShowcase::has_sequence_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CProtoItemTeamShowcase::set_has_sequence_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CProtoItemTeamShowcase::clear_has_sequence_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CProtoItemTeamShowcase::clear_sequence_name() {
  sequence_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sequence_name();
}
const ::std::string& CProtoItemTeamShowcase::sequence_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.GetNoArena();
}
void CProtoItemTeamShowcase::set_sequence_name(const ::std::string& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
#if LANG_CXX11
void CProtoItemTeamShowcase::set_sequence_name(::std::string&& value) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
#endif
void CProtoItemTeamShowcase::set_sequence_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
void CProtoItemTeamShowcase::set_sequence_name(const char* value, size_t size) {
  set_has_sequence_name();
  sequence_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemTeamShowcase.sequence_name)
}
::std::string* CProtoItemTeamShowcase::mutable_sequence_name() {
  set_has_sequence_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemTeamShowcase.sequence_name)
  return sequence_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CProtoItemTeamShowcase::release_sequence_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemTeamShowcase.sequence_name)
  clear_has_sequence_name();
  return sequence_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CProtoItemTeamShowcase::set_allocated_sequence_name(::std::string* sequence_name) {
  if (sequence_name != NULL) {
    set_has_sequence_name();
  } else {
    clear_has_sequence_name();
  }
  sequence_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sequence_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemTeamShowcase.sequence_name)
}

// optional float cycle = 4;
bool CProtoItemTeamShowcase::has_cycle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CProtoItemTeamShowcase::set_has_cycle() {
  _has_bits_[0] |= 0x00000010u;
}
void CProtoItemTeamShowcase::clear_has_cycle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CProtoItemTeamShowcase::clear_cycle() {
  cycle_ = 0;
  clear_has_cycle();
}
float CProtoItemTeamShowcase::cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.cycle)
  return cycle_;
}
void CProtoItemTeamShowcase::set_cycle(float value) {
  set_has_cycle();
  cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.cycle)
}

// repeated uint32 wearable = 5;
int CProtoItemTeamShowcase::wearable_size() const {
  return wearable_.size();
}
void CProtoItemTeamShowcase::clear_wearable() {
  wearable_.Clear();
}
::google::protobuf::uint32 CProtoItemTeamShowcase::wearable(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.wearable)
  return wearable_.Get(index);
}
void CProtoItemTeamShowcase::set_wearable(int index, ::google::protobuf::uint32 value) {
  wearable_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.wearable)
}
void CProtoItemTeamShowcase::add_wearable(::google::protobuf::uint32 value) {
  wearable_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemTeamShowcase.wearable)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::wearable() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemTeamShowcase.wearable)
  return wearable_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_wearable() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemTeamShowcase.wearable)
  return &wearable_;
}

// optional string inscription = 6;
bool CProtoItemTeamShowcase::has_inscription() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CProtoItemTeamShowcase::set_has_inscription() {
  _has_bits_[0] |= 0x00000002u;
}
void CProtoItemTeamShowcase::clear_has_inscription() {
  _has_bits_[0] &= ~0x00000002u;
}
void CProtoItemTeamShowcase::clear_inscription() {
  inscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inscription();
}
const ::std::string& CProtoItemTeamShowcase::inscription() const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.inscription)
  return inscription_.GetNoArena();
}
void CProtoItemTeamShowcase::set_inscription(const ::std::string& value) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.inscription)
}
#if LANG_CXX11
void CProtoItemTeamShowcase::set_inscription(::std::string&& value) {
  set_has_inscription();
  inscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CProtoItemTeamShowcase.inscription)
}
#endif
void CProtoItemTeamShowcase::set_inscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CProtoItemTeamShowcase.inscription)
}
void CProtoItemTeamShowcase::set_inscription(const char* value, size_t size) {
  set_has_inscription();
  inscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CProtoItemTeamShowcase.inscription)
}
::std::string* CProtoItemTeamShowcase::mutable_inscription() {
  set_has_inscription();
  // @@protoc_insertion_point(field_mutable:proto.dota.CProtoItemTeamShowcase.inscription)
  return inscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CProtoItemTeamShowcase::release_inscription() {
  // @@protoc_insertion_point(field_release:proto.dota.CProtoItemTeamShowcase.inscription)
  clear_has_inscription();
  return inscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CProtoItemTeamShowcase::set_allocated_inscription(::std::string* inscription) {
  if (inscription != NULL) {
    set_has_inscription();
  } else {
    clear_has_inscription();
  }
  inscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inscription);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CProtoItemTeamShowcase.inscription)
}

// repeated uint32 style = 7;
int CProtoItemTeamShowcase::style_size() const {
  return style_.size();
}
void CProtoItemTeamShowcase::clear_style() {
  style_.Clear();
}
::google::protobuf::uint32 CProtoItemTeamShowcase::style(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CProtoItemTeamShowcase.style)
  return style_.Get(index);
}
void CProtoItemTeamShowcase::set_style(int index, ::google::protobuf::uint32 value) {
  style_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CProtoItemTeamShowcase.style)
}
void CProtoItemTeamShowcase::add_style(::google::protobuf::uint32 value) {
  style_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CProtoItemTeamShowcase.style)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CProtoItemTeamShowcase::style() const {
  // @@protoc_insertion_point(field_list:proto.dota.CProtoItemTeamShowcase.style)
  return style_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CProtoItemTeamShowcase::mutable_style() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CProtoItemTeamShowcase.style)
  return &style_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchPlayerAbilityUpgrade::kAbilityFieldNumber;
const int CMatchPlayerAbilityUpgrade::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchPlayerAbilityUpgrade)
}
CMatchPlayerAbilityUpgrade::CMatchPlayerAbilityUpgrade(const CMatchPlayerAbilityUpgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ability_, &from.ability_,
    reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&ability_) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchPlayerAbilityUpgrade)
}

void CMatchPlayerAbilityUpgrade::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ability_, 0, reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&ability_) + sizeof(time_));
}

CMatchPlayerAbilityUpgrade::~CMatchPlayerAbilityUpgrade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchPlayerAbilityUpgrade)
  SharedDtor();
}

void CMatchPlayerAbilityUpgrade::SharedDtor() {
}

void CMatchPlayerAbilityUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerAbilityUpgrade::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMatchPlayerAbilityUpgrade& CMatchPlayerAbilityUpgrade::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMatchPlayerAbilityUpgrade* CMatchPlayerAbilityUpgrade::New(::google::protobuf::Arena* arena) const {
  CMatchPlayerAbilityUpgrade* n = new CMatchPlayerAbilityUpgrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchPlayerAbilityUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchPlayerAbilityUpgrade)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&ability_, 0, reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&ability_) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMatchPlayerAbilityUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchPlayerAbilityUpgrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchPlayerAbilityUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchPlayerAbilityUpgrade)
  return false;
#undef DO_
}

void CMatchPlayerAbilityUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchPlayerAbilityUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchPlayerAbilityUpgrade)
}

::google::protobuf::uint8* CMatchPlayerAbilityUpgrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchPlayerAbilityUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }

  // optional uint32 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchPlayerAbilityUpgrade)
  return target;
}

size_t CMatchPlayerAbilityUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchPlayerAbilityUpgrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerAbilityUpgrade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchPlayerAbilityUpgrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchPlayerAbilityUpgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchPlayerAbilityUpgrade)
    MergeFrom(*source);
  }
}

void CMatchPlayerAbilityUpgrade::MergeFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ability_ = from.ability_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerAbilityUpgrade::CopyFrom(const CMatchPlayerAbilityUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchPlayerAbilityUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerAbilityUpgrade::IsInitialized() const {
  return true;
}

void CMatchPlayerAbilityUpgrade::Swap(CMatchPlayerAbilityUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerAbilityUpgrade::InternalSwap(CMatchPlayerAbilityUpgrade* other) {
  std::swap(ability_, other->ability_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchPlayerAbilityUpgrade::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchPlayerAbilityUpgrade

// optional uint32 ability = 1;
bool CMatchPlayerAbilityUpgrade::has_ability() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchPlayerAbilityUpgrade::set_has_ability() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchPlayerAbilityUpgrade::clear_has_ability() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchPlayerAbilityUpgrade::clear_ability() {
  ability_ = 0u;
  clear_has_ability();
}
::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerAbilityUpgrade.ability)
  return ability_;
}
void CMatchPlayerAbilityUpgrade::set_ability(::google::protobuf::uint32 value) {
  set_has_ability();
  ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerAbilityUpgrade.ability)
}

// optional uint32 time = 2;
bool CMatchPlayerAbilityUpgrade::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMatchPlayerAbilityUpgrade::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMatchPlayerAbilityUpgrade::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMatchPlayerAbilityUpgrade::clear_time() {
  time_ = 0u;
  clear_has_time();
}
::google::protobuf::uint32 CMatchPlayerAbilityUpgrade::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerAbilityUpgrade.time)
  return time_;
}
void CMatchPlayerAbilityUpgrade::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerAbilityUpgrade.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchAdditionalUnitInventory::kUnitNameFieldNumber;
const int CMatchAdditionalUnitInventory::kItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchAdditionalUnitInventory)
}
CMatchAdditionalUnitInventory::CMatchAdditionalUnitInventory(const CMatchAdditionalUnitInventory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unit_name()) {
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchAdditionalUnitInventory)
}

void CMatchAdditionalUnitInventory::SharedCtor() {
  _cached_size_ = 0;
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMatchAdditionalUnitInventory::~CMatchAdditionalUnitInventory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchAdditionalUnitInventory)
  SharedDtor();
}

void CMatchAdditionalUnitInventory::SharedDtor() {
  unit_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMatchAdditionalUnitInventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchAdditionalUnitInventory::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMatchAdditionalUnitInventory& CMatchAdditionalUnitInventory::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMatchAdditionalUnitInventory* CMatchAdditionalUnitInventory::New(::google::protobuf::Arena* arena) const {
  CMatchAdditionalUnitInventory* n = new CMatchAdditionalUnitInventory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchAdditionalUnitInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchAdditionalUnitInventory)
  items_.Clear();
  if (has_unit_name()) {
    GOOGLE_DCHECK(!unit_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*unit_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMatchAdditionalUnitInventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchAdditionalUnitInventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMatchAdditionalUnitInventory.unit_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchAdditionalUnitInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchAdditionalUnitInventory)
  return false;
#undef DO_
}

void CMatchAdditionalUnitInventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchAdditionalUnitInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMatchAdditionalUnitInventory.unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // repeated uint32 items = 2;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->items(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchAdditionalUnitInventory)
}

::google::protobuf::uint8* CMatchAdditionalUnitInventory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchAdditionalUnitInventory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMatchAdditionalUnitInventory.unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // repeated uint32 items = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->items_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchAdditionalUnitInventory)
  return target;
}

size_t CMatchAdditionalUnitInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchAdditionalUnitInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 items = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  // optional string unit_name = 1;
  if (has_unit_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unit_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchAdditionalUnitInventory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchAdditionalUnitInventory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchAdditionalUnitInventory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchAdditionalUnitInventory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchAdditionalUnitInventory)
    MergeFrom(*source);
  }
}

void CMatchAdditionalUnitInventory::MergeFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchAdditionalUnitInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (from.has_unit_name()) {
    set_has_unit_name();
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
}

void CMatchAdditionalUnitInventory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchAdditionalUnitInventory::CopyFrom(const CMatchAdditionalUnitInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchAdditionalUnitInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchAdditionalUnitInventory::IsInitialized() const {
  return true;
}

void CMatchAdditionalUnitInventory::Swap(CMatchAdditionalUnitInventory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchAdditionalUnitInventory::InternalSwap(CMatchAdditionalUnitInventory* other) {
  items_.InternalSwap(&other->items_);
  unit_name_.Swap(&other->unit_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchAdditionalUnitInventory::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchAdditionalUnitInventory

// optional string unit_name = 1;
bool CMatchAdditionalUnitInventory::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchAdditionalUnitInventory::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchAdditionalUnitInventory::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchAdditionalUnitInventory::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit_name();
}
const ::std::string& CMatchAdditionalUnitInventory::unit_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.GetNoArena();
}
void CMatchAdditionalUnitInventory::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
#if LANG_CXX11
void CMatchAdditionalUnitInventory::set_unit_name(::std::string&& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
#endif
void CMatchAdditionalUnitInventory::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
void CMatchAdditionalUnitInventory::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}
::std::string* CMatchAdditionalUnitInventory::mutable_unit_name() {
  set_has_unit_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMatchAdditionalUnitInventory::release_unit_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMatchAdditionalUnitInventory.unit_name)
  clear_has_unit_name();
  return unit_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMatchAdditionalUnitInventory::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != NULL) {
    set_has_unit_name();
  } else {
    clear_has_unit_name();
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMatchAdditionalUnitInventory.unit_name)
}

// repeated uint32 items = 2;
int CMatchAdditionalUnitInventory::items_size() const {
  return items_.size();
}
void CMatchAdditionalUnitInventory::clear_items() {
  items_.Clear();
}
::google::protobuf::uint32 CMatchAdditionalUnitInventory::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchAdditionalUnitInventory.items)
  return items_.Get(index);
}
void CMatchAdditionalUnitInventory::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMatchAdditionalUnitInventory.items)
}
void CMatchAdditionalUnitInventory::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMatchAdditionalUnitInventory.items)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMatchAdditionalUnitInventory::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMatchAdditionalUnitInventory.items)
  return items_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMatchAdditionalUnitInventory::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMatchAdditionalUnitInventory.items)
  return &items_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchPlayerPermanentBuff::kPermanentBuffFieldNumber;
const int CMatchPlayerPermanentBuff::kStackCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchPlayerPermanentBuff)
}
CMatchPlayerPermanentBuff::CMatchPlayerPermanentBuff(const CMatchPlayerPermanentBuff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&permanent_buff_, &from.permanent_buff_,
    reinterpret_cast<char*>(&stack_count_) -
    reinterpret_cast<char*>(&permanent_buff_) + sizeof(stack_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchPlayerPermanentBuff)
}

void CMatchPlayerPermanentBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&permanent_buff_, 0, reinterpret_cast<char*>(&stack_count_) -
    reinterpret_cast<char*>(&permanent_buff_) + sizeof(stack_count_));
}

CMatchPlayerPermanentBuff::~CMatchPlayerPermanentBuff() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchPlayerPermanentBuff)
  SharedDtor();
}

void CMatchPlayerPermanentBuff::SharedDtor() {
}

void CMatchPlayerPermanentBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchPlayerPermanentBuff::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMatchPlayerPermanentBuff& CMatchPlayerPermanentBuff::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMatchPlayerPermanentBuff* CMatchPlayerPermanentBuff::New(::google::protobuf::Arena* arena) const {
  CMatchPlayerPermanentBuff* n = new CMatchPlayerPermanentBuff;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchPlayerPermanentBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchPlayerPermanentBuff)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&permanent_buff_, 0, reinterpret_cast<char*>(&stack_count_) -
      reinterpret_cast<char*>(&permanent_buff_) + sizeof(stack_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMatchPlayerPermanentBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchPlayerPermanentBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 permanent_buff = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_permanent_buff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &permanent_buff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stack_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchPlayerPermanentBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchPlayerPermanentBuff)
  return false;
#undef DO_
}

void CMatchPlayerPermanentBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchPlayerPermanentBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permanent_buff = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->permanent_buff(), output);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stack_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchPlayerPermanentBuff)
}

::google::protobuf::uint8* CMatchPlayerPermanentBuff::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchPlayerPermanentBuff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 permanent_buff = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->permanent_buff(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stack_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchPlayerPermanentBuff)
  return target;
}

size_t CMatchPlayerPermanentBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchPlayerPermanentBuff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 permanent_buff = 1;
    if (has_permanent_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->permanent_buff());
    }

    // optional uint32 stack_count = 2;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchPlayerPermanentBuff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchPlayerPermanentBuff* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchPlayerPermanentBuff>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchPlayerPermanentBuff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchPlayerPermanentBuff)
    MergeFrom(*source);
  }
}

void CMatchPlayerPermanentBuff::MergeFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchPlayerPermanentBuff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      permanent_buff_ = from.permanent_buff_;
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchPlayerPermanentBuff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchPlayerPermanentBuff::CopyFrom(const CMatchPlayerPermanentBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchPlayerPermanentBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchPlayerPermanentBuff::IsInitialized() const {
  return true;
}

void CMatchPlayerPermanentBuff::Swap(CMatchPlayerPermanentBuff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchPlayerPermanentBuff::InternalSwap(CMatchPlayerPermanentBuff* other) {
  std::swap(permanent_buff_, other->permanent_buff_);
  std::swap(stack_count_, other->stack_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchPlayerPermanentBuff::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchPlayerPermanentBuff

// optional uint32 permanent_buff = 1;
bool CMatchPlayerPermanentBuff::has_permanent_buff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchPlayerPermanentBuff::set_has_permanent_buff() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchPlayerPermanentBuff::clear_has_permanent_buff() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchPlayerPermanentBuff::clear_permanent_buff() {
  permanent_buff_ = 0u;
  clear_has_permanent_buff();
}
::google::protobuf::uint32 CMatchPlayerPermanentBuff::permanent_buff() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerPermanentBuff.permanent_buff)
  return permanent_buff_;
}
void CMatchPlayerPermanentBuff::set_permanent_buff(::google::protobuf::uint32 value) {
  set_has_permanent_buff();
  permanent_buff_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerPermanentBuff.permanent_buff)
}

// optional uint32 stack_count = 2;
bool CMatchPlayerPermanentBuff::has_stack_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMatchPlayerPermanentBuff::set_has_stack_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMatchPlayerPermanentBuff::clear_has_stack_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMatchPlayerPermanentBuff::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
::google::protobuf::uint32 CMatchPlayerPermanentBuff::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchPlayerPermanentBuff.stack_count)
  return stack_count_;
}
void CMatchPlayerPermanentBuff::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchPlayerPermanentBuff.stack_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMatchHeroSelectEvent::kIsPickFieldNumber;
const int CMatchHeroSelectEvent::kTeamFieldNumber;
const int CMatchHeroSelectEvent::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMatchHeroSelectEvent::CMatchHeroSelectEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMatchHeroSelectEvent)
}
CMatchHeroSelectEvent::CMatchHeroSelectEvent(const CMatchHeroSelectEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_pick_, &from.is_pick_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMatchHeroSelectEvent)
}

void CMatchHeroSelectEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&is_pick_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
}

CMatchHeroSelectEvent::~CMatchHeroSelectEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMatchHeroSelectEvent)
  SharedDtor();
}

void CMatchHeroSelectEvent::SharedDtor() {
}

void CMatchHeroSelectEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMatchHeroSelectEvent::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMatchHeroSelectEvent& CMatchHeroSelectEvent::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMatchHeroSelectEvent* CMatchHeroSelectEvent::New(::google::protobuf::Arena* arena) const {
  CMatchHeroSelectEvent* n = new CMatchHeroSelectEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMatchHeroSelectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMatchHeroSelectEvent)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&is_pick_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&is_pick_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMatchHeroSelectEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMatchHeroSelectEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMatchHeroSelectEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMatchHeroSelectEvent)
  return false;
#undef DO_
}

void CMatchHeroSelectEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMatchHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pick(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMatchHeroSelectEvent)
}

::google::protobuf::uint8* CMatchHeroSelectEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMatchHeroSelectEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pick(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMatchHeroSelectEvent)
  return target;
}

size_t CMatchHeroSelectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMatchHeroSelectEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool is_pick = 1;
    if (has_is_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMatchHeroSelectEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMatchHeroSelectEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMatchHeroSelectEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMatchHeroSelectEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMatchHeroSelectEvent)
    MergeFrom(*source);
  }
}

void CMatchHeroSelectEvent::MergeFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMatchHeroSelectEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      is_pick_ = from.is_pick_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMatchHeroSelectEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMatchHeroSelectEvent::CopyFrom(const CMatchHeroSelectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMatchHeroSelectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMatchHeroSelectEvent::IsInitialized() const {
  return true;
}

void CMatchHeroSelectEvent::Swap(CMatchHeroSelectEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMatchHeroSelectEvent::InternalSwap(CMatchHeroSelectEvent* other) {
  std::swap(is_pick_, other->is_pick_);
  std::swap(team_, other->team_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMatchHeroSelectEvent::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMatchHeroSelectEvent

// optional bool is_pick = 1;
bool CMatchHeroSelectEvent::has_is_pick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMatchHeroSelectEvent::set_has_is_pick() {
  _has_bits_[0] |= 0x00000001u;
}
void CMatchHeroSelectEvent::clear_has_is_pick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMatchHeroSelectEvent::clear_is_pick() {
  is_pick_ = false;
  clear_has_is_pick();
}
bool CMatchHeroSelectEvent::is_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.is_pick)
  return is_pick_;
}
void CMatchHeroSelectEvent::set_is_pick(bool value) {
  set_has_is_pick();
  is_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.is_pick)
}

// optional uint32 team = 2;
bool CMatchHeroSelectEvent::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMatchHeroSelectEvent::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CMatchHeroSelectEvent::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMatchHeroSelectEvent::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMatchHeroSelectEvent::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.team)
  return team_;
}
void CMatchHeroSelectEvent::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.team)
}

// optional uint32 hero_id = 3;
bool CMatchHeroSelectEvent::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMatchHeroSelectEvent::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMatchHeroSelectEvent::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMatchHeroSelectEvent::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMatchHeroSelectEvent::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMatchHeroSelectEvent.hero_id)
  return hero_id_;
}
void CMatchHeroSelectEvent::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMatchHeroSelectEvent.hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProcessFantasyScheduledEvent::kEventFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kTimestampFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kFantasyLeagueIdFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kSeasonFieldNumber;
const int CMsgDOTAProcessFantasyScheduledEvent::kReferenceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}
CMsgDOTAProcessFantasyScheduledEvent::CMsgDOTAProcessFantasyScheduledEvent(const CMsgDOTAProcessFantasyScheduledEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_, &from.event_,
    reinterpret_cast<char*>(&reference_data_) -
    reinterpret_cast<char*>(&event_) + sizeof(reference_data_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_, 0, reinterpret_cast<char*>(&reference_data_) -
    reinterpret_cast<char*>(&event_) + sizeof(reference_data_));
}

CMsgDOTAProcessFantasyScheduledEvent::~CMsgDOTAProcessFantasyScheduledEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  SharedDtor();
}

void CMsgDOTAProcessFantasyScheduledEvent::SharedDtor() {
}

void CMsgDOTAProcessFantasyScheduledEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProcessFantasyScheduledEvent::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProcessFantasyScheduledEvent& CMsgDOTAProcessFantasyScheduledEvent::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProcessFantasyScheduledEvent* CMsgDOTAProcessFantasyScheduledEvent::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProcessFantasyScheduledEvent* n = new CMsgDOTAProcessFantasyScheduledEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProcessFantasyScheduledEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&event_, 0, reinterpret_cast<char*>(&reference_data_) -
      reinterpret_cast<char*>(&event_) + sizeof(reference_data_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProcessFantasyScheduledEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_league_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fantasy_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_season();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reference_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reference_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return false;
#undef DO_
}

void CMsgDOTAProcessFantasyScheduledEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 fantasy_league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fantasy_league_id(), output);
  }

  // optional uint32 season = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->season(), output);
  }

  // optional uint32 reference_data = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reference_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
}

::google::protobuf::uint8* CMsgDOTAProcessFantasyScheduledEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 fantasy_league_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fantasy_league_id(), target);
  }

  // optional uint32 season = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->season(), target);
  }

  // optional uint32 reference_data = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reference_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  return target;
}

size_t CMsgDOTAProcessFantasyScheduledEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 fantasy_league_id = 3;
    if (has_fantasy_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_league_id());
    }

    // optional uint32 season = 4;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

    // optional uint32 reference_data = 5;
    if (has_reference_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProcessFantasyScheduledEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProcessFantasyScheduledEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
    MergeFrom(*source);
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::MergeFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      fantasy_league_id_ = from.fantasy_league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      season_ = from.season_;
    }
    if (cached_has_bits & 0x00000010u) {
      reference_data_ = from.reference_data_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProcessFantasyScheduledEvent::CopyFrom(const CMsgDOTAProcessFantasyScheduledEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProcessFantasyScheduledEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProcessFantasyScheduledEvent::IsInitialized() const {
  return true;
}

void CMsgDOTAProcessFantasyScheduledEvent::Swap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProcessFantasyScheduledEvent::InternalSwap(CMsgDOTAProcessFantasyScheduledEvent* other) {
  std::swap(event_, other->event_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(fantasy_league_id_, other->fantasy_league_id_);
  std::swap(season_, other->season_);
  std::swap(reference_data_, other->reference_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProcessFantasyScheduledEvent::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProcessFantasyScheduledEvent

// optional uint32 event = 1;
bool CMsgDOTAProcessFantasyScheduledEvent::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_event() {
  event_ = 0u;
  clear_has_event();
}
::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.event)
  return event_;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.event)
}

// optional uint32 timestamp = 2;
bool CMsgDOTAProcessFantasyScheduledEvent::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.timestamp)
  return timestamp_;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.timestamp)
}

// optional uint32 fantasy_league_id = 3;
bool CMsgDOTAProcessFantasyScheduledEvent::has_fantasy_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_fantasy_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_fantasy_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_fantasy_league_id() {
  fantasy_league_id_ = 0u;
  clear_has_fantasy_league_id();
}
::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::fantasy_league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
  return fantasy_league_id_;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_fantasy_league_id(::google::protobuf::uint32 value) {
  set_has_fantasy_league_id();
  fantasy_league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.fantasy_league_id)
}

// optional uint32 season = 4;
bool CMsgDOTAProcessFantasyScheduledEvent::has_season() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_season() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_season() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_season() {
  season_ = 0u;
  clear_has_season();
}
::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::season() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.season)
  return season_;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.season)
}

// optional uint32 reference_data = 5;
bool CMsgDOTAProcessFantasyScheduledEvent::has_reference_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_has_reference_data() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_has_reference_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProcessFantasyScheduledEvent::clear_reference_data() {
  reference_data_ = 0u;
  clear_has_reference_data();
}
::google::protobuf::uint32 CMsgDOTAProcessFantasyScheduledEvent::reference_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.reference_data)
  return reference_data_;
}
void CMsgDOTAProcessFantasyScheduledEvent::set_reference_data(::google::protobuf::uint32 value) {
  set_has_reference_data();
  reference_data_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProcessFantasyScheduledEvent.reference_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemQuery::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemQuery)
}
CMsgDOTAHasItemQuery::CMsgDOTAHasItemQuery(const CMsgDOTAHasItemQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemQuery)
}

void CMsgDOTAHasItemQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
}

CMsgDOTAHasItemQuery::~CMsgDOTAHasItemQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemQuery)
  SharedDtor();
}

void CMsgDOTAHasItemQuery::SharedDtor() {
}

void CMsgDOTAHasItemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemQuery::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAHasItemQuery& CMsgDOTAHasItemQuery::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAHasItemQuery* CMsgDOTAHasItemQuery::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemQuery* n = new CMsgDOTAHasItemQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemQuery)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAHasItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemQuery)
  return target;
}

size_t CMsgDOTAHasItemQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemQuery::MergeFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAHasItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemQuery::CopyFrom(const CMsgDOTAHasItemQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemQuery::Swap(CMsgDOTAHasItemQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemQuery::InternalSwap(CMsgDOTAHasItemQuery* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemQuery::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemQuery

// optional uint32 account_id = 1;
bool CMsgDOTAHasItemQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAHasItemQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAHasItemQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAHasItemQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAHasItemQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemQuery.account_id)
  return account_id_;
}
void CMsgDOTAHasItemQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemQuery.account_id)
}

// optional uint64 item_id = 2;
bool CMsgDOTAHasItemQuery::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemQuery::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemQuery::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgDOTAHasItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemQuery.item_id)
  return item_id_;
}
void CMsgDOTAHasItemQuery::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemQuery.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemResponse::kHasItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemResponse)
}
CMsgDOTAHasItemResponse::CMsgDOTAHasItemResponse(const CMsgDOTAHasItemResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_item_ = from.has_item_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemResponse)
}

void CMsgDOTAHasItemResponse::SharedCtor() {
  _cached_size_ = 0;
  has_item_ = false;
}

CMsgDOTAHasItemResponse::~CMsgDOTAHasItemResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemResponse)
  SharedDtor();
}

void CMsgDOTAHasItemResponse::SharedDtor() {
}

void CMsgDOTAHasItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAHasItemResponse& CMsgDOTAHasItemResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAHasItemResponse* CMsgDOTAHasItemResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemResponse* n = new CMsgDOTAHasItemResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemResponse)
  has_item_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAHasItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_has_item();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemResponse)
  return target;
}

size_t CMsgDOTAHasItemResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool has_item = 1;
  if (has_has_item()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemResponse::MergeFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_item()) {
    set_has_item(from.has_item());
  }
}

void CMsgDOTAHasItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemResponse::CopyFrom(const CMsgDOTAHasItemResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemResponse::Swap(CMsgDOTAHasItemResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemResponse::InternalSwap(CMsgDOTAHasItemResponse* other) {
  std::swap(has_item_, other->has_item_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemResponse

// optional bool has_item = 1;
bool CMsgDOTAHasItemResponse::has_has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemResponse::set_has_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemResponse::clear_has_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemResponse::clear_has_item() {
  has_item_ = false;
  clear_has_has_item();
}
bool CMsgDOTAHasItemResponse::has_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemResponse.has_item)
  return has_item_;
}
void CMsgDOTAHasItemResponse::set_has_item(bool value) {
  set_has_has_item();
  has_item_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemResponse.has_item)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIsProQuery::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIsProQuery::CMsgGCIsProQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIsProQuery)
}
CMsgGCIsProQuery::CMsgGCIsProQuery(const CMsgGCIsProQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIsProQuery)
}

void CMsgGCIsProQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgGCIsProQuery::~CMsgGCIsProQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIsProQuery)
  SharedDtor();
}

void CMsgGCIsProQuery::SharedDtor() {
}

void CMsgGCIsProQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCIsProQuery::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCIsProQuery& CMsgGCIsProQuery::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCIsProQuery* CMsgGCIsProQuery::New(::google::protobuf::Arena* arena) const {
  CMsgGCIsProQuery* n = new CMsgGCIsProQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCIsProQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIsProQuery)
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCIsProQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIsProQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIsProQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIsProQuery)
  return false;
#undef DO_
}

void CMsgGCIsProQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIsProQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIsProQuery)
}

::google::protobuf::uint8* CMsgGCIsProQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIsProQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIsProQuery)
  return target;
}

size_t CMsgGCIsProQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIsProQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCIsProQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCIsProQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIsProQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIsProQuery)
    MergeFrom(*source);
  }
}

void CMsgGCIsProQuery::MergeFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIsProQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGCIsProQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProQuery::CopyFrom(const CMsgGCIsProQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIsProQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProQuery::IsInitialized() const {
  return true;
}

void CMsgGCIsProQuery::Swap(CMsgGCIsProQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIsProQuery::InternalSwap(CMsgGCIsProQuery* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCIsProQuery::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCIsProQuery

// optional uint32 account_id = 1;
bool CMsgGCIsProQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCIsProQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCIsProQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCIsProQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCIsProQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIsProQuery.account_id)
  return account_id_;
}
void CMsgGCIsProQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIsProQuery.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIsProResponse::kIsProFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIsProResponse::CMsgGCIsProResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIsProResponse)
}
CMsgGCIsProResponse::CMsgGCIsProResponse(const CMsgGCIsProResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_pro_ = from.is_pro_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIsProResponse)
}

void CMsgGCIsProResponse::SharedCtor() {
  _cached_size_ = 0;
  is_pro_ = false;
}

CMsgGCIsProResponse::~CMsgGCIsProResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIsProResponse)
  SharedDtor();
}

void CMsgGCIsProResponse::SharedDtor() {
}

void CMsgGCIsProResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCIsProResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCIsProResponse& CMsgGCIsProResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCIsProResponse* CMsgGCIsProResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCIsProResponse* n = new CMsgGCIsProResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCIsProResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIsProResponse)
  is_pro_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCIsProResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIsProResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_pro = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_is_pro();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pro_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIsProResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIsProResponse)
  return false;
#undef DO_
}

void CMsgGCIsProResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIsProResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pro = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_pro(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIsProResponse)
}

::google::protobuf::uint8* CMsgGCIsProResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIsProResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is_pro = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_pro(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIsProResponse)
  return target;
}

size_t CMsgGCIsProResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIsProResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool is_pro = 1;
  if (has_is_pro()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCIsProResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIsProResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCIsProResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIsProResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIsProResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIsProResponse::MergeFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIsProResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_is_pro()) {
    set_is_pro(from.is_pro());
  }
}

void CMsgGCIsProResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIsProResponse::CopyFrom(const CMsgGCIsProResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIsProResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIsProResponse::IsInitialized() const {
  return true;
}

void CMsgGCIsProResponse::Swap(CMsgGCIsProResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIsProResponse::InternalSwap(CMsgGCIsProResponse* other) {
  std::swap(is_pro_, other->is_pro_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCIsProResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCIsProResponse

// optional bool is_pro = 1;
bool CMsgGCIsProResponse::has_is_pro() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCIsProResponse::set_has_is_pro() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCIsProResponse::clear_has_is_pro() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCIsProResponse::clear_is_pro() {
  is_pro_ = false;
  clear_has_is_pro();
}
bool CMsgGCIsProResponse::is_pro() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCIsProResponse.is_pro)
  return is_pro_;
}
void CMsgGCIsProResponse::set_is_pro(bool value) {
  set_has_is_pro();
  is_pro_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCIsProResponse.is_pro)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemDefsQuery::kAccountIdFieldNumber;
const int CMsgDOTAHasItemDefsQuery::kItemdefIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemDefsQuery)
}
CMsgDOTAHasItemDefsQuery::CMsgDOTAHasItemDefsQuery(const CMsgDOTAHasItemDefsQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      itemdef_ids_(from.itemdef_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemDefsQuery)
}

void CMsgDOTAHasItemDefsQuery::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgDOTAHasItemDefsQuery::~CMsgDOTAHasItemDefsQuery() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemDefsQuery)
  SharedDtor();
}

void CMsgDOTAHasItemDefsQuery::SharedDtor() {
}

void CMsgDOTAHasItemDefsQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsQuery::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAHasItemDefsQuery& CMsgDOTAHasItemDefsQuery::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAHasItemDefsQuery* CMsgDOTAHasItemDefsQuery::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemDefsQuery* n = new CMsgDOTAHasItemDefsQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemDefsQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  itemdef_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAHasItemDefsQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 itemdef_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_itemdef_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_itemdef_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemDefsQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemDefsQuery)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 itemdef_ids = 2;
  for (int i = 0, n = this->itemdef_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->itemdef_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemDefsQuery)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 itemdef_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->itemdef_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemDefsQuery)
  return target;
}

size_t CMsgDOTAHasItemDefsQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 itemdef_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->itemdef_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->itemdef_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemDefsQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemDefsQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemDefsQuery)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsQuery::MergeFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  itemdef_ids_.MergeFrom(from.itemdef_ids_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsQuery::CopyFrom(const CMsgDOTAHasItemDefsQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemDefsQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsQuery::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsQuery::Swap(CMsgDOTAHasItemDefsQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsQuery::InternalSwap(CMsgDOTAHasItemDefsQuery* other) {
  itemdef_ids_.InternalSwap(&other->itemdef_ids_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsQuery::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemDefsQuery

// optional uint32 account_id = 1;
bool CMsgDOTAHasItemDefsQuery::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemDefsQuery::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemDefsQuery::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemDefsQuery::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsQuery.account_id)
  return account_id_;
}
void CMsgDOTAHasItemDefsQuery::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsQuery.account_id)
}

// repeated uint32 itemdef_ids = 2;
int CMsgDOTAHasItemDefsQuery::itemdef_ids_size() const {
  return itemdef_ids_.size();
}
void CMsgDOTAHasItemDefsQuery::clear_itemdef_ids() {
  itemdef_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAHasItemDefsQuery::itemdef_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_.Get(index);
}
void CMsgDOTAHasItemDefsQuery::set_itemdef_ids(int index, ::google::protobuf::uint32 value) {
  itemdef_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
void CMsgDOTAHasItemDefsQuery::add_itemdef_ids(::google::protobuf::uint32 value) {
  itemdef_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAHasItemDefsQuery::itemdef_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return itemdef_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAHasItemDefsQuery::mutable_itemdef_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAHasItemDefsQuery.itemdef_ids)
  return &itemdef_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAHasItemDefsResponse::kHasItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAHasItemDefsResponse)
}
CMsgDOTAHasItemDefsResponse::CMsgDOTAHasItemDefsResponse(const CMsgDOTAHasItemDefsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  has_items_ = from.has_items_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAHasItemDefsResponse)
}

void CMsgDOTAHasItemDefsResponse::SharedCtor() {
  _cached_size_ = 0;
  has_items_ = false;
}

CMsgDOTAHasItemDefsResponse::~CMsgDOTAHasItemDefsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAHasItemDefsResponse)
  SharedDtor();
}

void CMsgDOTAHasItemDefsResponse::SharedDtor() {
}

void CMsgDOTAHasItemDefsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAHasItemDefsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAHasItemDefsResponse& CMsgDOTAHasItemDefsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAHasItemDefsResponse* CMsgDOTAHasItemDefsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAHasItemDefsResponse* n = new CMsgDOTAHasItemDefsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAHasItemDefsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  has_items_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAHasItemDefsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_items = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_has_items();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_items_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAHasItemDefsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAHasItemDefsResponse)
  return false;
#undef DO_
}

void CMsgDOTAHasItemDefsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_items = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_items(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAHasItemDefsResponse)
}

::google::protobuf::uint8* CMsgDOTAHasItemDefsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_items = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_items(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAHasItemDefsResponse)
  return target;
}

size_t CMsgDOTAHasItemDefsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool has_items = 1;
  if (has_has_items()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAHasItemDefsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAHasItemDefsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAHasItemDefsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAHasItemDefsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAHasItemDefsResponse::MergeFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_has_items()) {
    set_has_items(from.has_items());
  }
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAHasItemDefsResponse::CopyFrom(const CMsgDOTAHasItemDefsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAHasItemDefsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAHasItemDefsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAHasItemDefsResponse::Swap(CMsgDOTAHasItemDefsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAHasItemDefsResponse::InternalSwap(CMsgDOTAHasItemDefsResponse* other) {
  std::swap(has_items_, other->has_items_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAHasItemDefsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAHasItemDefsResponse

// optional bool has_items = 1;
bool CMsgDOTAHasItemDefsResponse::has_has_items() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAHasItemDefsResponse::set_has_has_items() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAHasItemDefsResponse::clear_has_has_items() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAHasItemDefsResponse::clear_has_items() {
  has_items_ = false;
  clear_has_has_items();
}
bool CMsgDOTAHasItemDefsResponse::has_items() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAHasItemDefsResponse.has_items)
  return has_items_;
}
void CMsgDOTAHasItemDefsResponse::set_has_items(bool value) {
  set_has_has_items();
  has_items_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAHasItemDefsResponse.has_items)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfo::kPlayerCardItemIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
}
CMsgGCGetPlayerCardItemInfo::CMsgGCGetPlayerCardItemInfo(const CMsgGCGetPlayerCardItemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_card_item_ids_(from.player_card_item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
}

void CMsgGCGetPlayerCardItemInfo::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgGCGetPlayerCardItemInfo::~CMsgGCGetPlayerCardItemInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfo::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPlayerCardItemInfo& CMsgGCGetPlayerCardItemInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPlayerCardItemInfo* CMsgGCGetPlayerCardItemInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPlayerCardItemInfo* n = new CMsgGCGetPlayerCardItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPlayerCardItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  player_card_item_ids_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPlayerCardItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 player_card_item_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_player_card_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_player_card_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint64 player_card_item_ids = 2;
  for (int i = 0, n = this->player_card_item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->player_card_item_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint64 player_card_item_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->player_card_item_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 player_card_item_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->player_card_item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->player_card_item_ids_size());
    total_size += data_size;
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPlayerCardItemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_item_ids_.MergeFrom(from.player_card_item_ids_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfo::Swap(CMsgGCGetPlayerCardItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfo::InternalSwap(CMsgGCGetPlayerCardItemInfo* other) {
  player_card_item_ids_.InternalSwap(&other->player_card_item_ids_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPlayerCardItemInfo

// optional uint32 account_id = 1;
bool CMsgGCGetPlayerCardItemInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetPlayerCardItemInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetPlayerCardItemInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetPlayerCardItemInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfo.account_id)
  return account_id_;
}
void CMsgGCGetPlayerCardItemInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfo.account_id)
}

// repeated uint64 player_card_item_ids = 2;
int CMsgGCGetPlayerCardItemInfo::player_card_item_ids_size() const {
  return player_card_item_ids_.size();
}
void CMsgGCGetPlayerCardItemInfo::clear_player_card_item_ids() {
  player_card_item_ids_.Clear();
}
::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfo::player_card_item_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_.Get(index);
}
void CMsgGCGetPlayerCardItemInfo::set_player_card_item_ids(int index, ::google::protobuf::uint64 value) {
  player_card_item_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
void CMsgGCGetPlayerCardItemInfo::add_player_card_item_ids(::google::protobuf::uint64 value) {
  player_card_item_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCGetPlayerCardItemInfo::player_card_item_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return player_card_item_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCGetPlayerCardItemInfo::mutable_player_card_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPlayerCardItemInfo.player_card_item_ids)
  return &player_card_item_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPlayerCardItemIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kAccountIdFieldNumber;
const int CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::kPackedBonusesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}
CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_card_item_id_, &from.player_card_item_id_,
    reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&player_card_item_id_) + sizeof(account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_card_item_id_, 0, reinterpret_cast<char*>(&account_id_) -
    reinterpret_cast<char*>(&player_card_item_id_) + sizeof(account_id_));
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::~CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* n = new CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_card_item_id_, 0, reinterpret_cast<char*>(&account_id_) -
      reinterpret_cast<char*>(&player_card_item_id_) + sizeof(account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 player_card_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_card_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_card_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 packed_bonuses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_packed_bonuses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packed_bonuses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 player_card_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_card_item_id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint64 packed_bonuses = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->packed_bonuses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 player_card_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_card_item_id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint64 packed_bonuses = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->packed_bonuses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 player_card_item_id = 1;
    if (has_player_card_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->player_card_item_id());
    }

    // optional uint64 packed_bonuses = 3;
    if (has_packed_bonuses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->packed_bonuses());
    }

    // optional uint32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_card_item_id_ = from.player_card_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      packed_bonuses_ = from.packed_bonuses_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::Swap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* other) {
  std::swap(player_card_item_id_, other->player_card_item_id_);
  std::swap(packed_bonuses_, other->packed_bonuses_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo

// optional uint64 player_card_item_id = 1;
bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_player_card_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_player_card_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_player_card_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_player_card_item_id() {
  player_card_item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_card_item_id();
}
::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::player_card_item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
  return player_card_item_id_;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_player_card_item_id(::google::protobuf::uint64 value) {
  set_has_player_card_item_id();
  player_card_item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.player_card_item_id)
}

// optional uint32 account_id = 2;
bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
  return account_id_;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.account_id)
}

// optional uint64 packed_bonuses = 3;
bool CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::has_packed_bonuses() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_has_packed_bonuses() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_has_packed_bonuses() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::clear_packed_bonuses() {
  packed_bonuses_ = GOOGLE_ULONGLONG(0);
  clear_has_packed_bonuses();
}
::google::protobuf::uint64 CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::packed_bonuses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
  return packed_bonuses_;
}
void CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo::set_packed_bonuses(::google::protobuf::uint64 value) {
  set_has_packed_bonuses();
  packed_bonuses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo.packed_bonuses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCGetPlayerCardItemInfoResponse::kPlayerCardInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}
CMsgGCGetPlayerCardItemInfoResponse::CMsgGCGetPlayerCardItemInfoResponse(const CMsgGCGetPlayerCardItemInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      player_card_infos_(from.player_card_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCGetPlayerCardItemInfoResponse::~CMsgGCGetPlayerCardItemInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  SharedDtor();
}

void CMsgGCGetPlayerCardItemInfoResponse::SharedDtor() {
}

void CMsgGCGetPlayerCardItemInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCGetPlayerCardItemInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCGetPlayerCardItemInfoResponse& CMsgGCGetPlayerCardItemInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCGetPlayerCardItemInfoResponse* CMsgGCGetPlayerCardItemInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCGetPlayerCardItemInfoResponse* n = new CMsgGCGetPlayerCardItemInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCGetPlayerCardItemInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  player_card_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCGetPlayerCardItemInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_card_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return false;
#undef DO_
}

void CMsgGCGetPlayerCardItemInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (unsigned int i = 0, n = this->player_card_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_card_infos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
}

::google::protobuf::uint8* CMsgGCGetPlayerCardItemInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  for (unsigned int i = 0, n = this->player_card_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->player_card_infos(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  return target;
}

size_t CMsgGCGetPlayerCardItemInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
  {
    unsigned int count = this->player_card_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_card_infos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCGetPlayerCardItemInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCGetPlayerCardItemInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCGetPlayerCardItemInfoResponse::MergeFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_card_infos_.MergeFrom(from.player_card_infos_);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCGetPlayerCardItemInfoResponse::CopyFrom(const CMsgGCGetPlayerCardItemInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCGetPlayerCardItemInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPlayerCardItemInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetPlayerCardItemInfoResponse::Swap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCGetPlayerCardItemInfoResponse::InternalSwap(CMsgGCGetPlayerCardItemInfoResponse* other) {
  player_card_infos_.InternalSwap(&other->player_card_infos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCGetPlayerCardItemInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCGetPlayerCardItemInfoResponse

// repeated .proto.dota.CMsgGCGetPlayerCardItemInfoResponse.PlayerCardInfo player_card_infos = 1;
int CMsgGCGetPlayerCardItemInfoResponse::player_card_infos_size() const {
  return player_card_infos_.size();
}
void CMsgGCGetPlayerCardItemInfoResponse::clear_player_card_infos() {
  player_card_infos_.Clear();
}
const ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo& CMsgGCGetPlayerCardItemInfoResponse::player_card_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Get(index);
}
::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Mutable(index);
}
::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo* CMsgGCGetPlayerCardItemInfoResponse::add_player_card_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >*
CMsgGCGetPlayerCardItemInfoResponse::mutable_player_card_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return &player_card_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo >&
CMsgGCGetPlayerCardItemInfoResponse::player_card_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCGetPlayerCardItemInfoResponse.player_card_infos)
  return player_card_infos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCFantasySetMatchLeague::kMatchIdFieldNumber;
const int CMsgGCToGCFantasySetMatchLeague::kLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}
CMsgGCToGCFantasySetMatchLeague::CMsgGCToGCFantasySetMatchLeague(const CMsgGCToGCFantasySetMatchLeague& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}

void CMsgGCToGCFantasySetMatchLeague::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(league_id_));
}

CMsgGCToGCFantasySetMatchLeague::~CMsgGCToGCFantasySetMatchLeague() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  SharedDtor();
}

void CMsgGCToGCFantasySetMatchLeague::SharedDtor() {
}

void CMsgGCToGCFantasySetMatchLeague::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToGCFantasySetMatchLeague::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToGCFantasySetMatchLeague& CMsgGCToGCFantasySetMatchLeague::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToGCFantasySetMatchLeague* CMsgGCToGCFantasySetMatchLeague::New(::google::protobuf::Arena* arena) const {
  CMsgGCToGCFantasySetMatchLeague* n = new CMsgGCToGCFantasySetMatchLeague;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToGCFantasySetMatchLeague::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToGCFantasySetMatchLeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return false;
#undef DO_
}

void CMsgGCToGCFantasySetMatchLeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCFantasySetMatchLeague)
}

::google::protobuf::uint8* CMsgGCToGCFantasySetMatchLeague::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  return target;
}

size_t CMsgGCToGCFantasySetMatchLeague::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCFantasySetMatchLeague* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToGCFantasySetMatchLeague>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCFantasySetMatchLeague)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCFantasySetMatchLeague)
    MergeFrom(*source);
  }
}

void CMsgGCToGCFantasySetMatchLeague::MergeFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCFantasySetMatchLeague::CopyFrom(const CMsgGCToGCFantasySetMatchLeague& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCFantasySetMatchLeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCFantasySetMatchLeague::IsInitialized() const {
  return true;
}

void CMsgGCToGCFantasySetMatchLeague::Swap(CMsgGCToGCFantasySetMatchLeague* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCFantasySetMatchLeague::InternalSwap(CMsgGCToGCFantasySetMatchLeague* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToGCFantasySetMatchLeague::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToGCFantasySetMatchLeague

// optional uint64 match_id = 1;
bool CMsgGCToGCFantasySetMatchLeague::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToGCFantasySetMatchLeague::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgGCToGCFantasySetMatchLeague::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCFantasySetMatchLeague.match_id)
  return match_id_;
}
void CMsgGCToGCFantasySetMatchLeague::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCFantasySetMatchLeague.match_id)
}

// optional uint32 league_id = 2;
bool CMsgGCToGCFantasySetMatchLeague::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToGCFantasySetMatchLeague::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToGCFantasySetMatchLeague::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgGCToGCFantasySetMatchLeague::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToGCFantasySetMatchLeague.league_id)
  return league_id_;
}
void CMsgGCToGCFantasySetMatchLeague::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToGCFantasySetMatchLeague.league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAMapLocationState::kAccountIdFieldNumber;
const int CSODOTAMapLocationState::kLocationIdFieldNumber;
const int CSODOTAMapLocationState::kCompletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAMapLocationState::CSODOTAMapLocationState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAMapLocationState)
}
CSODOTAMapLocationState::CSODOTAMapLocationState(const CSODOTAMapLocationState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(completed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAMapLocationState)
}

void CSODOTAMapLocationState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&completed_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(completed_));
}

CSODOTAMapLocationState::~CSODOTAMapLocationState() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAMapLocationState)
  SharedDtor();
}

void CSODOTAMapLocationState::SharedDtor() {
}

void CSODOTAMapLocationState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAMapLocationState::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAMapLocationState& CSODOTAMapLocationState::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAMapLocationState* CSODOTAMapLocationState::New(::google::protobuf::Arena* arena) const {
  CSODOTAMapLocationState* n = new CSODOTAMapLocationState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAMapLocationState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAMapLocationState)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(completed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAMapLocationState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAMapLocationState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_location_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &location_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool completed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAMapLocationState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAMapLocationState)
  return false;
#undef DO_
}

void CSODOTAMapLocationState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAMapLocationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->location_id(), output);
  }

  // optional bool completed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAMapLocationState)
}

::google::protobuf::uint8* CSODOTAMapLocationState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAMapLocationState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->location_id(), target);
  }

  // optional bool completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAMapLocationState)
  return target;
}

size_t CSODOTAMapLocationState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAMapLocationState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional int32 location_id = 2 [(.proto.dota.key_field) = true];
    if (has_location_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->location_id());
    }

    // optional bool completed = 3;
    if (has_completed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAMapLocationState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAMapLocationState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAMapLocationState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAMapLocationState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAMapLocationState)
    MergeFrom(*source);
  }
}

void CSODOTAMapLocationState::MergeFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAMapLocationState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      location_id_ = from.location_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAMapLocationState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAMapLocationState::CopyFrom(const CSODOTAMapLocationState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAMapLocationState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAMapLocationState::IsInitialized() const {
  return true;
}

void CSODOTAMapLocationState::Swap(CSODOTAMapLocationState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAMapLocationState::InternalSwap(CSODOTAMapLocationState* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(location_id_, other->location_id_);
  std::swap(completed_, other->completed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAMapLocationState::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAMapLocationState

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTAMapLocationState::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAMapLocationState::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAMapLocationState::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAMapLocationState::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSODOTAMapLocationState::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.account_id)
  return account_id_;
}
void CSODOTAMapLocationState::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.account_id)
}

// optional int32 location_id = 2 [(.proto.dota.key_field) = true];
bool CSODOTAMapLocationState::has_location_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAMapLocationState::set_has_location_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAMapLocationState::clear_has_location_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAMapLocationState::clear_location_id() {
  location_id_ = 0;
  clear_has_location_id();
}
::google::protobuf::int32 CSODOTAMapLocationState::location_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.location_id)
  return location_id_;
}
void CSODOTAMapLocationState::set_location_id(::google::protobuf::int32 value) {
  set_has_location_id();
  location_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.location_id)
}

// optional bool completed = 3;
bool CSODOTAMapLocationState::has_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAMapLocationState::set_has_completed() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAMapLocationState::clear_has_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAMapLocationState::clear_completed() {
  completed_ = false;
  clear_has_completed();
}
bool CSODOTAMapLocationState::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAMapLocationState.completed)
  return completed_;
}
void CSODOTAMapLocationState::set_completed(bool value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAMapLocationState.completed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeagueAdminList::kAccountIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeagueAdminList::CMsgLeagueAdminList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeagueAdminList)
}
CMsgLeagueAdminList::CMsgLeagueAdminList(const CMsgLeagueAdminList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_ids_(from.account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeagueAdminList)
}

void CMsgLeagueAdminList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgLeagueAdminList::~CMsgLeagueAdminList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeagueAdminList)
  SharedDtor();
}

void CMsgLeagueAdminList::SharedDtor() {
}

void CMsgLeagueAdminList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeagueAdminList::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeagueAdminList& CMsgLeagueAdminList::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLeagueAdminList* CMsgLeagueAdminList::New(::google::protobuf::Arena* arena) const {
  CMsgLeagueAdminList* n = new CMsgLeagueAdminList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeagueAdminList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeagueAdminList)
  account_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeagueAdminList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeagueAdminList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 account_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeagueAdminList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeagueAdminList)
  return false;
#undef DO_
}

void CMsgLeagueAdminList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeagueAdminList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  for (int i = 0, n = this->account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->account_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeagueAdminList)
}

::google::protobuf::uint8* CMsgLeagueAdminList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeagueAdminList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 account_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->account_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeagueAdminList)
  return target;
}

size_t CMsgLeagueAdminList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeagueAdminList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeagueAdminList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeagueAdminList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeagueAdminList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeagueAdminList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeagueAdminList)
    MergeFrom(*source);
  }
}

void CMsgLeagueAdminList::MergeFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeagueAdminList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_ids_.MergeFrom(from.account_ids_);
}

void CMsgLeagueAdminList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeagueAdminList::CopyFrom(const CMsgLeagueAdminList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeagueAdminList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeagueAdminList::IsInitialized() const {
  return true;
}

void CMsgLeagueAdminList::Swap(CMsgLeagueAdminList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeagueAdminList::InternalSwap(CMsgLeagueAdminList* other) {
  account_ids_.InternalSwap(&other->account_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeagueAdminList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeagueAdminList

// repeated uint32 account_ids = 1;
int CMsgLeagueAdminList::account_ids_size() const {
  return account_ids_.size();
}
void CMsgLeagueAdminList::clear_account_ids() {
  account_ids_.Clear();
}
::google::protobuf::uint32 CMsgLeagueAdminList::account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeagueAdminList.account_ids)
  return account_ids_.Get(index);
}
void CMsgLeagueAdminList::set_account_ids(int index, ::google::protobuf::uint32 value) {
  account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeagueAdminList.account_ids)
}
void CMsgLeagueAdminList::add_account_ids(::google::protobuf::uint32 value) {
  account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLeagueAdminList.account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgLeagueAdminList::account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLeagueAdminList.account_ids)
  return account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgLeagueAdminList::mutable_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLeagueAdminList.account_ids)
  return &account_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumTimestampedData::kGameTimeFieldNumber;
const int CCompendiumTimestampedData::kGpmFieldNumber;
const int CCompendiumTimestampedData::kXpmFieldNumber;
const int CCompendiumTimestampedData::kKillsFieldNumber;
const int CCompendiumTimestampedData::kDeathsFieldNumber;
const int CCompendiumTimestampedData::kItemPurchasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumTimestampedData::CCompendiumTimestampedData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumTimestampedData)
}
CCompendiumTimestampedData::CCompendiumTimestampedData(const CCompendiumTimestampedData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_purchases_(from.item_purchases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    reinterpret_cast<char*>(&deaths_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(deaths_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumTimestampedData)
}

void CCompendiumTimestampedData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_time_, 0, reinterpret_cast<char*>(&deaths_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(deaths_));
}

CCompendiumTimestampedData::~CCompendiumTimestampedData() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumTimestampedData)
  SharedDtor();
}

void CCompendiumTimestampedData::SharedDtor() {
}

void CCompendiumTimestampedData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumTimestampedData::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCompendiumTimestampedData& CCompendiumTimestampedData::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCompendiumTimestampedData* CCompendiumTimestampedData::New(::google::protobuf::Arena* arena) const {
  CCompendiumTimestampedData* n = new CCompendiumTimestampedData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumTimestampedData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumTimestampedData)
  item_purchases_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&game_time_, 0, reinterpret_cast<char*>(&deaths_) -
      reinterpret_cast<char*>(&game_time_) + sizeof(deaths_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCompendiumTimestampedData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumTimestampedData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 game_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_xpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 item_purchases = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_item_purchases())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_purchases())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumTimestampedData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumTimestampedData)
  return false;
#undef DO_
}

void CCompendiumTimestampedData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumTimestampedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_time(), output);
  }

  // optional uint32 gpm = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpm(), output);
  }

  // optional uint32 xpm = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->xpm(), output);
  }

  // optional uint32 kills = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kills(), output);
  }

  // optional uint32 deaths = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deaths(), output);
  }

  // repeated uint32 item_purchases = 6;
  for (int i = 0, n = this->item_purchases_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->item_purchases(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumTimestampedData)
}

::google::protobuf::uint8* CCompendiumTimestampedData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumTimestampedData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 game_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_time(), target);
  }

  // optional uint32 gpm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpm(), target);
  }

  // optional uint32 xpm = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->xpm(), target);
  }

  // optional uint32 kills = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kills(), target);
  }

  // optional uint32 deaths = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deaths(), target);
  }

  // repeated uint32 item_purchases = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->item_purchases_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumTimestampedData)
  return target;
}

size_t CCompendiumTimestampedData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumTimestampedData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 item_purchases = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_purchases_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_purchases_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 game_time = 1;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_time());
    }

    // optional uint32 gpm = 2;
    if (has_gpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 3;
    if (has_xpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 4;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 5;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumTimestampedData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumTimestampedData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumTimestampedData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumTimestampedData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumTimestampedData)
    MergeFrom(*source);
  }
}

void CCompendiumTimestampedData::MergeFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumTimestampedData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_purchases_.MergeFrom(from.item_purchases_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000004u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000008u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000010u) {
      deaths_ = from.deaths_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CCompendiumTimestampedData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumTimestampedData::CopyFrom(const CCompendiumTimestampedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumTimestampedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumTimestampedData::IsInitialized() const {
  return true;
}

void CCompendiumTimestampedData::Swap(CCompendiumTimestampedData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumTimestampedData::InternalSwap(CCompendiumTimestampedData* other) {
  item_purchases_.InternalSwap(&other->item_purchases_);
  std::swap(game_time_, other->game_time_);
  std::swap(gpm_, other->gpm_);
  std::swap(xpm_, other->xpm_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumTimestampedData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumTimestampedData

// optional uint32 game_time = 1;
bool CCompendiumTimestampedData::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CCompendiumTimestampedData::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CCompendiumTimestampedData::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CCompendiumTimestampedData::clear_game_time() {
  game_time_ = 0u;
  clear_has_game_time();
}
::google::protobuf::uint32 CCompendiumTimestampedData::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.game_time)
  return game_time_;
}
void CCompendiumTimestampedData::set_game_time(::google::protobuf::uint32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.game_time)
}

// optional uint32 gpm = 2;
bool CCompendiumTimestampedData::has_gpm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CCompendiumTimestampedData::set_has_gpm() {
  _has_bits_[0] |= 0x00000002u;
}
void CCompendiumTimestampedData::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000002u;
}
void CCompendiumTimestampedData::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
::google::protobuf::uint32 CCompendiumTimestampedData::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.gpm)
  return gpm_;
}
void CCompendiumTimestampedData::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.gpm)
}

// optional uint32 xpm = 3;
bool CCompendiumTimestampedData::has_xpm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CCompendiumTimestampedData::set_has_xpm() {
  _has_bits_[0] |= 0x00000004u;
}
void CCompendiumTimestampedData::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000004u;
}
void CCompendiumTimestampedData::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
::google::protobuf::uint32 CCompendiumTimestampedData::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.xpm)
  return xpm_;
}
void CCompendiumTimestampedData::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.xpm)
}

// optional uint32 kills = 4;
bool CCompendiumTimestampedData::has_kills() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CCompendiumTimestampedData::set_has_kills() {
  _has_bits_[0] |= 0x00000008u;
}
void CCompendiumTimestampedData::clear_has_kills() {
  _has_bits_[0] &= ~0x00000008u;
}
void CCompendiumTimestampedData::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CCompendiumTimestampedData::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.kills)
  return kills_;
}
void CCompendiumTimestampedData::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.kills)
}

// optional uint32 deaths = 5;
bool CCompendiumTimestampedData::has_deaths() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CCompendiumTimestampedData::set_has_deaths() {
  _has_bits_[0] |= 0x00000010u;
}
void CCompendiumTimestampedData::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000010u;
}
void CCompendiumTimestampedData::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CCompendiumTimestampedData::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.deaths)
  return deaths_;
}
void CCompendiumTimestampedData::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.deaths)
}

// repeated uint32 item_purchases = 6;
int CCompendiumTimestampedData::item_purchases_size() const {
  return item_purchases_.size();
}
void CCompendiumTimestampedData::clear_item_purchases() {
  item_purchases_.Clear();
}
::google::protobuf::uint32 CCompendiumTimestampedData::item_purchases(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumTimestampedData.item_purchases)
  return item_purchases_.Get(index);
}
void CCompendiumTimestampedData::set_item_purchases(int index, ::google::protobuf::uint32 value) {
  item_purchases_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumTimestampedData.item_purchases)
}
void CCompendiumTimestampedData::add_item_purchases(::google::protobuf::uint32 value) {
  item_purchases_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumTimestampedData.item_purchases)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CCompendiumTimestampedData::item_purchases() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumTimestampedData.item_purchases)
  return item_purchases_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CCompendiumTimestampedData::mutable_item_purchases() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumTimestampedData.item_purchases)
  return &item_purchases_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumGameTimeline::kDataFieldNumber;
const int CCompendiumGameTimeline::kTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumGameTimeline::CCompendiumGameTimeline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumGameTimeline)
}
CCompendiumGameTimeline::CCompendiumGameTimeline(const CCompendiumGameTimeline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumGameTimeline)
}

void CCompendiumGameTimeline::SharedCtor() {
  _cached_size_ = 0;
}

CCompendiumGameTimeline::~CCompendiumGameTimeline() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumGameTimeline)
  SharedDtor();
}

void CCompendiumGameTimeline::SharedDtor() {
}

void CCompendiumGameTimeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameTimeline::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCompendiumGameTimeline& CCompendiumGameTimeline::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCompendiumGameTimeline* CCompendiumGameTimeline::New(::google::protobuf::Arena* arena) const {
  CCompendiumGameTimeline* n = new CCompendiumGameTimeline;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumGameTimeline::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumGameTimeline)
  data_.Clear();
  tags_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCompendiumGameTimeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumGameTimeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCompendiumTimestampedData data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CCompendiumGameTimeline.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumGameTimeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumGameTimeline)
  return false;
#undef DO_
}

void CCompendiumGameTimeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumGameTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCompendiumGameTimeline.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumGameTimeline)
}

::google::protobuf::uint8* CCompendiumGameTimeline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumGameTimeline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // repeated string tags = 2;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CCompendiumGameTimeline.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumGameTimeline)
  return target;
}

size_t CCompendiumGameTimeline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumGameTimeline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CCompendiumTimestampedData data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  // repeated string tags = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameTimeline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameTimeline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumGameTimeline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumGameTimeline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumGameTimeline)
    MergeFrom(*source);
  }
}

void CCompendiumGameTimeline::MergeFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumGameTimeline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  tags_.MergeFrom(from.tags_);
}

void CCompendiumGameTimeline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameTimeline::CopyFrom(const CCompendiumGameTimeline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumGameTimeline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameTimeline::IsInitialized() const {
  return true;
}

void CCompendiumGameTimeline::Swap(CCompendiumGameTimeline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameTimeline::InternalSwap(CCompendiumGameTimeline* other) {
  data_.InternalSwap(&other->data_);
  tags_.InternalSwap(&other->tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumGameTimeline::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumGameTimeline

// repeated .proto.dota.CCompendiumTimestampedData data = 1;
int CCompendiumGameTimeline::data_size() const {
  return data_.size();
}
void CCompendiumGameTimeline::clear_data() {
  data_.Clear();
}
const ::proto::dota::CCompendiumTimestampedData& CCompendiumGameTimeline::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameTimeline.data)
  return data_.Get(index);
}
::proto::dota::CCompendiumTimestampedData* CCompendiumGameTimeline::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameTimeline.data)
  return data_.Mutable(index);
}
::proto::dota::CCompendiumTimestampedData* CCompendiumGameTimeline::add_data() {
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >*
CCompendiumGameTimeline::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameTimeline.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumTimestampedData >&
CCompendiumGameTimeline::data() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameTimeline.data)
  return data_;
}

// repeated string tags = 2;
int CCompendiumGameTimeline::tags_size() const {
  return tags_.size();
}
void CCompendiumGameTimeline::clear_tags() {
  tags_.Clear();
}
const ::std::string& CCompendiumGameTimeline::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Get(index);
}
::std::string* CCompendiumGameTimeline::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Mutable(index);
}
void CCompendiumGameTimeline::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CCompendiumGameTimeline::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CCompendiumGameTimeline.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CCompendiumGameTimeline::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CCompendiumGameTimeline.tags)
}
void CCompendiumGameTimeline::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CCompendiumGameTimeline.tags)
}
::std::string* CCompendiumGameTimeline::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CCompendiumGameTimeline.tags)
  return tags_.Add();
}
void CCompendiumGameTimeline::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.tags)
}
#if LANG_CXX11
void CCompendiumGameTimeline::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameTimeline.tags)
}
#endif
void CCompendiumGameTimeline::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CCompendiumGameTimeline.tags)
}
void CCompendiumGameTimeline::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CCompendiumGameTimeline.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CCompendiumGameTimeline::tags() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameTimeline.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CCompendiumGameTimeline::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameTimeline.tags)
  return &tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CCompendiumGameList::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CCompendiumGameList::CCompendiumGameList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CCompendiumGameList)
}
CCompendiumGameList::CCompendiumGameList(const CCompendiumGameList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CCompendiumGameList)
}

void CCompendiumGameList::SharedCtor() {
  _cached_size_ = 0;
}

CCompendiumGameList::~CCompendiumGameList() {
  // @@protoc_insertion_point(destructor:proto.dota.CCompendiumGameList)
  SharedDtor();
}

void CCompendiumGameList::SharedDtor() {
}

void CCompendiumGameList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CCompendiumGameList::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CCompendiumGameList& CCompendiumGameList::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CCompendiumGameList* CCompendiumGameList::New(::google::protobuf::Arena* arena) const {
  CCompendiumGameList* n = new CCompendiumGameList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CCompendiumGameList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CCompendiumGameList)
  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CCompendiumGameList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CCompendiumGameList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CCompendiumGameTimeline games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CCompendiumGameList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CCompendiumGameList)
  return false;
#undef DO_
}

void CCompendiumGameList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CCompendiumGameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CCompendiumGameList)
}

::google::protobuf::uint8* CCompendiumGameList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CCompendiumGameList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->games(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CCompendiumGameList)
  return target;
}

size_t CCompendiumGameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CCompendiumGameList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CCompendiumGameTimeline games = 1;
  {
    unsigned int count = this->games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CCompendiumGameList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  const CCompendiumGameList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CCompendiumGameList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CCompendiumGameList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CCompendiumGameList)
    MergeFrom(*source);
  }
}

void CCompendiumGameList::MergeFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CCompendiumGameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CCompendiumGameList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CCompendiumGameList::CopyFrom(const CCompendiumGameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CCompendiumGameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CCompendiumGameList::IsInitialized() const {
  return true;
}

void CCompendiumGameList::Swap(CCompendiumGameList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CCompendiumGameList::InternalSwap(CCompendiumGameList* other) {
  games_.InternalSwap(&other->games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CCompendiumGameList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CCompendiumGameList

// repeated .proto.dota.CCompendiumGameTimeline games = 1;
int CCompendiumGameList::games_size() const {
  return games_.size();
}
void CCompendiumGameList::clear_games() {
  games_.Clear();
}
const ::proto::dota::CCompendiumGameTimeline& CCompendiumGameList::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CCompendiumGameList.games)
  return games_.Get(index);
}
::proto::dota::CCompendiumGameTimeline* CCompendiumGameList::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CCompendiumGameList.games)
  return games_.Mutable(index);
}
::proto::dota::CCompendiumGameTimeline* CCompendiumGameList::add_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CCompendiumGameList.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >*
CCompendiumGameList::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CCompendiumGameList.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CCompendiumGameTimeline >&
CCompendiumGameList::games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CCompendiumGameList.games)
  return games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAdditionalEquipSlot::kClassIdFieldNumber;
const int CAdditionalEquipSlot::kSlotIdFieldNumber;
const int CAdditionalEquipSlot::kDefIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAdditionalEquipSlot::CAdditionalEquipSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CAdditionalEquipSlot)
}
CAdditionalEquipSlot::CAdditionalEquipSlot(const CAdditionalEquipSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&class_id_, &from.class_id_,
    reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CAdditionalEquipSlot)
}

void CAdditionalEquipSlot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&class_id_, 0, reinterpret_cast<char*>(&def_index_) -
    reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
}

CAdditionalEquipSlot::~CAdditionalEquipSlot() {
  // @@protoc_insertion_point(destructor:proto.dota.CAdditionalEquipSlot)
  SharedDtor();
}

void CAdditionalEquipSlot::SharedDtor() {
}

void CAdditionalEquipSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAdditionalEquipSlot::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAdditionalEquipSlot& CAdditionalEquipSlot::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CAdditionalEquipSlot* CAdditionalEquipSlot::New(::google::protobuf::Arena* arena) const {
  CAdditionalEquipSlot* n = new CAdditionalEquipSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAdditionalEquipSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CAdditionalEquipSlot)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&class_id_, 0, reinterpret_cast<char*>(&def_index_) -
      reinterpret_cast<char*>(&class_id_) + sizeof(def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAdditionalEquipSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CAdditionalEquipSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 class_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_class_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &class_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CAdditionalEquipSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CAdditionalEquipSlot)
  return false;
#undef DO_
}

void CAdditionalEquipSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CAdditionalEquipSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->class_id(), output);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot_id(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CAdditionalEquipSlot)
}

::google::protobuf::uint8* CAdditionalEquipSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CAdditionalEquipSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 class_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->class_id(), target);
  }

  // optional uint32 slot_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot_id(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CAdditionalEquipSlot)
  return target;
}

size_t CAdditionalEquipSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CAdditionalEquipSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->class_id());
    }

    // optional uint32 slot_id = 2;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 def_index = 3;
    if (has_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAdditionalEquipSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CAdditionalEquipSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAdditionalEquipSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CAdditionalEquipSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CAdditionalEquipSlot)
    MergeFrom(*source);
  }
}

void CAdditionalEquipSlot::MergeFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CAdditionalEquipSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      class_id_ = from.class_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CAdditionalEquipSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAdditionalEquipSlot::CopyFrom(const CAdditionalEquipSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CAdditionalEquipSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAdditionalEquipSlot::IsInitialized() const {
  return true;
}

void CAdditionalEquipSlot::Swap(CAdditionalEquipSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAdditionalEquipSlot::InternalSwap(CAdditionalEquipSlot* other) {
  std::swap(class_id_, other->class_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(def_index_, other->def_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAdditionalEquipSlot::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CAdditionalEquipSlot

// optional uint32 class_id = 1;
bool CAdditionalEquipSlot::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CAdditionalEquipSlot::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CAdditionalEquipSlot::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CAdditionalEquipSlot::clear_class_id() {
  class_id_ = 0u;
  clear_has_class_id();
}
::google::protobuf::uint32 CAdditionalEquipSlot::class_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.class_id)
  return class_id_;
}
void CAdditionalEquipSlot::set_class_id(::google::protobuf::uint32 value) {
  set_has_class_id();
  class_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.class_id)
}

// optional uint32 slot_id = 2;
bool CAdditionalEquipSlot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CAdditionalEquipSlot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CAdditionalEquipSlot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CAdditionalEquipSlot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CAdditionalEquipSlot::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.slot_id)
  return slot_id_;
}
void CAdditionalEquipSlot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.slot_id)
}

// optional uint32 def_index = 3;
bool CAdditionalEquipSlot::has_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CAdditionalEquipSlot::set_has_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CAdditionalEquipSlot::clear_has_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CAdditionalEquipSlot::clear_def_index() {
  def_index_ = 0u;
  clear_has_def_index();
}
::google::protobuf::uint32 CAdditionalEquipSlot::def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CAdditionalEquipSlot.def_index)
  return def_index_;
}
void CAdditionalEquipSlot::set_def_index(::google::protobuf::uint32 value) {
  set_has_def_index();
  def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CAdditionalEquipSlot.def_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACombatLogEntry::kTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetNameFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerNameFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageSourceNameFieldNumber;
const int CMsgDOTACombatLogEntry::kInflictorNameFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAttackerHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetIllusionFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetHeroFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleRadiantFieldNumber;
const int CMsgDOTACombatLogEntry::kIsVisibleDireFieldNumber;
const int CMsgDOTACombatLogEntry::kValueFieldNumber;
const int CMsgDOTACombatLogEntry::kHealthFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampFieldNumber;
const int CMsgDOTACombatLogEntry::kStunDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSlowDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOnFieldNumber;
const int CMsgDOTACombatLogEntry::kIsAbilityToggleOffFieldNumber;
const int CMsgDOTACombatLogEntry::kAbilityLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationXFieldNumber;
const int CMsgDOTACombatLogEntry::kLocationYFieldNumber;
const int CMsgDOTACombatLogEntry::kGoldReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kTimestampRawFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kXpReasonFieldNumber;
const int CMsgDOTACombatLogEntry::kLastHitsFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetTeamFieldNumber;
const int CMsgDOTACombatLogEntry::kObsWardsPlacedFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer0FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer1FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer2FieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayer3FieldNumber;
const int CMsgDOTACombatLogEntry::kStackCountFieldNumber;
const int CMsgDOTACombatLogEntry::kHiddenModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kIsTargetBuildingFieldNumber;
const int CMsgDOTACombatLogEntry::kNeutralCampTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kRuneTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kAssistPlayersFieldNumber;
const int CMsgDOTACombatLogEntry::kIsHealSaveFieldNumber;
const int CMsgDOTACombatLogEntry::kIsUltimateAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kAttackerHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetHeroLevelFieldNumber;
const int CMsgDOTACombatLogEntry::kXpmFieldNumber;
const int CMsgDOTACombatLogEntry::kGpmFieldNumber;
const int CMsgDOTACombatLogEntry::kEventLocationFieldNumber;
const int CMsgDOTACombatLogEntry::kTargetIsSelfFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kInvisibilityModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kDamageCategoryFieldNumber;
const int CMsgDOTACombatLogEntry::kNetworthFieldNumber;
const int CMsgDOTACombatLogEntry::kBuildingTypeFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierElapsedDurationFieldNumber;
const int CMsgDOTACombatLogEntry::kSilenceModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kHealFromLifestealFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgedFieldNumber;
const int CMsgDOTACombatLogEntry::kSpellEvadedFieldNumber;
const int CMsgDOTACombatLogEntry::kMotionControllerModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kLongRangeKillFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeAbilityFieldNumber;
const int CMsgDOTACombatLogEntry::kModifierPurgeNpcFieldNumber;
const int CMsgDOTACombatLogEntry::kRootModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kTotalUnitDeathCountFieldNumber;
const int CMsgDOTACombatLogEntry::kAuraModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kArmorDebuffModifierFieldNumber;
const int CMsgDOTACombatLogEntry::kNoPhysicalDamageModifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACombatLogEntry)
}
CMsgDOTACombatLogEntry::CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      assist_players_(from.assist_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_name_, &from.target_name_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&target_name_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACombatLogEntry)
}

void CMsgDOTACombatLogEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&target_name_, 0, reinterpret_cast<char*>(&no_physical_damage_modifier_) -
    reinterpret_cast<char*>(&target_name_) + sizeof(no_physical_damage_modifier_));
  type_ = -1;
}

CMsgDOTACombatLogEntry::~CMsgDOTACombatLogEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACombatLogEntry)
  SharedDtor();
}

void CMsgDOTACombatLogEntry::SharedDtor() {
}

void CMsgDOTACombatLogEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACombatLogEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACombatLogEntry& CMsgDOTACombatLogEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACombatLogEntry* CMsgDOTACombatLogEntry::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACombatLogEntry* n = new CMsgDOTACombatLogEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACombatLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACombatLogEntry)
  assist_players_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&target_name_, 0, reinterpret_cast<char*>(&is_target_illusion_) -
      reinterpret_cast<char*>(&target_name_) + sizeof(is_target_illusion_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&is_target_hero_, 0, reinterpret_cast<char*>(&is_ability_toggle_off_) -
      reinterpret_cast<char*>(&is_target_hero_) + sizeof(is_ability_toggle_off_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&stun_duration_, 0, reinterpret_cast<char*>(&modifier_duration_) -
      reinterpret_cast<char*>(&stun_duration_) + sizeof(modifier_duration_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&xp_reason_, 0, reinterpret_cast<char*>(&assist_player2_) -
      reinterpret_cast<char*>(&xp_reason_) + sizeof(assist_player2_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&assist_player3_, 0, reinterpret_cast<char*>(&is_ultimate_ability_) -
      reinterpret_cast<char*>(&assist_player3_) + sizeof(is_ultimate_ability_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&attacker_hero_level_, 0, reinterpret_cast<char*>(&networth_) -
      reinterpret_cast<char*>(&attacker_hero_level_) + sizeof(networth_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&target_is_self_, 0, reinterpret_cast<char*>(&spell_evaded_) -
      reinterpret_cast<char*>(&target_is_self_) + sizeof(spell_evaded_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&motion_controller_modifier_, 0, reinterpret_cast<char*>(&armor_debuff_modifier_) -
      reinterpret_cast<char*>(&motion_controller_modifier_) + sizeof(armor_debuff_modifier_));
  }
  if (_has_bits_[64 / 32] & 3u) {
    no_physical_damage_modifier_ = false;
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACombatLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACombatLogEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_COMBATLOG_TYPES_IsValid(value)) {
            set_type(static_cast< ::proto::dota::DOTA_COMBATLOG_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_source_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_source_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_source_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_attacker_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_source_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_damage_source_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_source_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inflictor_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_inflictor_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inflictor_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attacker_illusion = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_attacker_illusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_illusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attacker_hero = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_attacker_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attacker_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_illusion = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_is_target_illusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_illusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_hero = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_target_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_visible_radiant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_is_visible_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_visible_dire = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_visible_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 health = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stun_duration = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_stun_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stun_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float slow_duration = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_slow_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slow_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ability_toggle_on = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_is_ability_toggle_on();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_on_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ability_toggle_off = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_is_ability_toggle_off();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ability_toggle_off_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_level = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_ability_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_x = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_location_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float location_y = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_location_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &location_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_reason = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_gold_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float timestamp_raw = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_timestamp_raw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestamp_raw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float modifier_duration = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_modifier_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_reason = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_xp_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_team = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_attacker_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_team = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_target_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 obs_wards_placed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_obs_wards_placed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obs_wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player0 = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_assist_player0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player1 = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_assist_player1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player2 = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_assist_player2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assist_player3 = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_assist_player3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assist_player3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_stack_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hidden_modifier = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_hidden_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hidden_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_target_building = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_is_target_building();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_target_building_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 neutral_camp_type = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_neutral_camp_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neutral_camp_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rune_type = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_rune_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rune_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 assist_players = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 320u, input, this->mutable_assist_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(322u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_assist_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_heal_save = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_is_heal_save();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_heal_save_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_ultimate_ability = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_is_ultimate_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ultimate_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_hero_level = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_attacker_hero_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_hero_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_hero_level = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_target_hero_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_hero_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_xpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_location = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_event_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool target_is_self = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_target_is_self();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_is_self_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_type = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_damage_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool invisibility_modifier = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_invisibility_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invisibility_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage_category = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_damage_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 networth = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(416u)) {
          set_has_networth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &networth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 building_type = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_building_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &building_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float modifier_elapsed_duration = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(437u)) {
          set_has_modifier_elapsed_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &modifier_elapsed_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool silence_modifier = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has_silence_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &silence_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool heal_from_lifesteal = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_heal_from_lifesteal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &heal_from_lifesteal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool modifier_purged = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(456u)) {
          set_has_modifier_purged();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &modifier_purged_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool spell_evaded = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_spell_evaded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &spell_evaded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool motion_controller_modifier = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(472u)) {
          set_has_motion_controller_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motion_controller_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool long_range_kill = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_long_range_kill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &long_range_kill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifier_purge_ability = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_modifier_purge_ability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_ability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 modifier_purge_npc = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_modifier_purge_npc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifier_purge_npc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool root_modifier = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(504u)) {
          set_has_root_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_unit_death_count = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(512u)) {
          set_has_total_unit_death_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_unit_death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool aura_modifier = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_aura_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aura_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool armor_debuff_modifier = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(528u)) {
          set_has_armor_debuff_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &armor_debuff_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool no_physical_damage_modifier = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(536u)) {
          set_has_no_physical_damage_modifier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_physical_damage_modifier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACombatLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACombatLogEntry)
  return false;
#undef DO_
}

void CMsgDOTACombatLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACombatLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_name(), output);
  }

  // optional uint32 target_source_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_source_name(), output);
  }

  // optional uint32 attacker_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacker_name(), output);
  }

  // optional uint32 damage_source_name = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage_source_name(), output);
  }

  // optional uint32 inflictor_name = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inflictor_name(), output);
  }

  // optional bool is_attacker_illusion = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_attacker_illusion(), output);
  }

  // optional bool is_attacker_hero = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_attacker_hero(), output);
  }

  // optional bool is_target_illusion = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_target_illusion(), output);
  }

  // optional bool is_target_hero = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_target_hero(), output);
  }

  // optional bool is_visible_radiant = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_visible_radiant(), output);
  }

  // optional bool is_visible_dire = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_visible_dire(), output);
  }

  // optional uint32 value = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->value(), output);
  }

  // optional int32 health = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->health(), output);
  }

  // optional float timestamp = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->timestamp(), output);
  }

  // optional float stun_duration = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->stun_duration(), output);
  }

  // optional float slow_duration = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->slow_duration(), output);
  }

  // optional bool is_ability_toggle_on = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->is_ability_toggle_on(), output);
  }

  // optional bool is_ability_toggle_off = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_ability_toggle_off(), output);
  }

  // optional uint32 ability_level = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ability_level(), output);
  }

  // optional float location_x = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->location_x(), output);
  }

  // optional float location_y = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->location_y(), output);
  }

  // optional uint32 gold_reason = 23;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_reason(), output);
  }

  // optional float timestamp_raw = 24;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->timestamp_raw(), output);
  }

  // optional float modifier_duration = 25;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->modifier_duration(), output);
  }

  // optional uint32 xp_reason = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->xp_reason(), output);
  }

  // optional uint32 last_hits = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->last_hits(), output);
  }

  // optional uint32 attacker_team = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->attacker_team(), output);
  }

  // optional uint32 target_team = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->target_team(), output);
  }

  // optional uint32 obs_wards_placed = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->obs_wards_placed(), output);
  }

  // optional uint32 assist_player0 = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->assist_player0(), output);
  }

  // optional uint32 assist_player1 = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->assist_player1(), output);
  }

  // optional uint32 assist_player2 = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->assist_player2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 assist_player3 = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->assist_player3(), output);
  }

  // optional uint32 stack_count = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->stack_count(), output);
  }

  // optional bool hidden_modifier = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(36, this->hidden_modifier(), output);
  }

  // optional bool is_target_building = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->is_target_building(), output);
  }

  // optional uint32 neutral_camp_type = 38;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->neutral_camp_type(), output);
  }

  // optional uint32 rune_type = 39;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->rune_type(), output);
  }

  // repeated uint32 assist_players = 40;
  for (int i = 0, n = this->assist_players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      40, this->assist_players(i), output);
  }

  // optional bool is_heal_save = 41;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->is_heal_save(), output);
  }

  // optional bool is_ultimate_ability = 42;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->is_ultimate_ability(), output);
  }

  // optional uint32 attacker_hero_level = 43;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->attacker_hero_level(), output);
  }

  // optional uint32 target_hero_level = 44;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->target_hero_level(), output);
  }

  // optional uint32 xpm = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->xpm(), output);
  }

  // optional uint32 gpm = 46;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->gpm(), output);
  }

  // optional uint32 event_location = 47;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->event_location(), output);
  }

  // optional bool target_is_self = 48;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->target_is_self(), output);
  }

  // optional uint32 damage_type = 49;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->damage_type(), output);
  }

  // optional bool invisibility_modifier = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->invisibility_modifier(), output);
  }

  // optional uint32 damage_category = 51;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->damage_category(), output);
  }

  // optional uint32 networth = 52;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->networth(), output);
  }

  // optional uint32 building_type = 53;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->building_type(), output);
  }

  // optional float modifier_elapsed_duration = 54;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(54, this->modifier_elapsed_duration(), output);
  }

  // optional bool silence_modifier = 55;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->silence_modifier(), output);
  }

  // optional bool heal_from_lifesteal = 56;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(56, this->heal_from_lifesteal(), output);
  }

  // optional bool modifier_purged = 57;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->modifier_purged(), output);
  }

  // optional bool spell_evaded = 58;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(58, this->spell_evaded(), output);
  }

  // optional bool motion_controller_modifier = 59;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->motion_controller_modifier(), output);
  }

  // optional bool long_range_kill = 60;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->long_range_kill(), output);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->modifier_purge_ability(), output);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->modifier_purge_npc(), output);
  }

  // optional bool root_modifier = 63;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(63, this->root_modifier(), output);
  }

  // optional uint32 total_unit_death_count = 64;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->total_unit_death_count(), output);
  }

  // optional bool aura_modifier = 65;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->aura_modifier(), output);
  }

  // optional bool armor_debuff_modifier = 66;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->armor_debuff_modifier(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool no_physical_damage_modifier = 67;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->no_physical_damage_modifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACombatLogEntry)
}

::google::protobuf::uint8* CMsgDOTACombatLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACombatLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 target_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_name(), target);
  }

  // optional uint32 target_source_name = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_source_name(), target);
  }

  // optional uint32 attacker_name = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacker_name(), target);
  }

  // optional uint32 damage_source_name = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage_source_name(), target);
  }

  // optional uint32 inflictor_name = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inflictor_name(), target);
  }

  // optional bool is_attacker_illusion = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_attacker_illusion(), target);
  }

  // optional bool is_attacker_hero = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_attacker_hero(), target);
  }

  // optional bool is_target_illusion = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_target_illusion(), target);
  }

  // optional bool is_target_hero = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_target_hero(), target);
  }

  // optional bool is_visible_radiant = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_visible_radiant(), target);
  }

  // optional bool is_visible_dire = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_visible_dire(), target);
  }

  // optional uint32 value = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->value(), target);
  }

  // optional int32 health = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->health(), target);
  }

  // optional float timestamp = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->timestamp(), target);
  }

  // optional float stun_duration = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->stun_duration(), target);
  }

  // optional float slow_duration = 17;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->slow_duration(), target);
  }

  // optional bool is_ability_toggle_on = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->is_ability_toggle_on(), target);
  }

  // optional bool is_ability_toggle_off = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_ability_toggle_off(), target);
  }

  // optional uint32 ability_level = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ability_level(), target);
  }

  // optional float location_x = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->location_x(), target);
  }

  // optional float location_y = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->location_y(), target);
  }

  // optional uint32 gold_reason = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_reason(), target);
  }

  // optional float timestamp_raw = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->timestamp_raw(), target);
  }

  // optional float modifier_duration = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->modifier_duration(), target);
  }

  // optional uint32 xp_reason = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->xp_reason(), target);
  }

  // optional uint32 last_hits = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->last_hits(), target);
  }

  // optional uint32 attacker_team = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->attacker_team(), target);
  }

  // optional uint32 target_team = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->target_team(), target);
  }

  // optional uint32 obs_wards_placed = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->obs_wards_placed(), target);
  }

  // optional uint32 assist_player0 = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->assist_player0(), target);
  }

  // optional uint32 assist_player1 = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->assist_player1(), target);
  }

  // optional uint32 assist_player2 = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->assist_player2(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 assist_player3 = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->assist_player3(), target);
  }

  // optional uint32 stack_count = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->stack_count(), target);
  }

  // optional bool hidden_modifier = 36;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(36, this->hidden_modifier(), target);
  }

  // optional bool is_target_building = 37;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->is_target_building(), target);
  }

  // optional uint32 neutral_camp_type = 38;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->neutral_camp_type(), target);
  }

  // optional uint32 rune_type = 39;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->rune_type(), target);
  }

  // repeated uint32 assist_players = 40;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(40, this->assist_players_, target);

  // optional bool is_heal_save = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->is_heal_save(), target);
  }

  // optional bool is_ultimate_ability = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->is_ultimate_ability(), target);
  }

  // optional uint32 attacker_hero_level = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->attacker_hero_level(), target);
  }

  // optional uint32 target_hero_level = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->target_hero_level(), target);
  }

  // optional uint32 xpm = 45;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->xpm(), target);
  }

  // optional uint32 gpm = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->gpm(), target);
  }

  // optional uint32 event_location = 47;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->event_location(), target);
  }

  // optional bool target_is_self = 48;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->target_is_self(), target);
  }

  // optional uint32 damage_type = 49;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->damage_type(), target);
  }

  // optional bool invisibility_modifier = 50;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->invisibility_modifier(), target);
  }

  // optional uint32 damage_category = 51;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->damage_category(), target);
  }

  // optional uint32 networth = 52;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->networth(), target);
  }

  // optional uint32 building_type = 53;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->building_type(), target);
  }

  // optional float modifier_elapsed_duration = 54;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(54, this->modifier_elapsed_duration(), target);
  }

  // optional bool silence_modifier = 55;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->silence_modifier(), target);
  }

  // optional bool heal_from_lifesteal = 56;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(56, this->heal_from_lifesteal(), target);
  }

  // optional bool modifier_purged = 57;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->modifier_purged(), target);
  }

  // optional bool spell_evaded = 58;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(58, this->spell_evaded(), target);
  }

  // optional bool motion_controller_modifier = 59;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->motion_controller_modifier(), target);
  }

  // optional bool long_range_kill = 60;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->long_range_kill(), target);
  }

  // optional uint32 modifier_purge_ability = 61;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->modifier_purge_ability(), target);
  }

  // optional uint32 modifier_purge_npc = 62;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->modifier_purge_npc(), target);
  }

  // optional bool root_modifier = 63;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(63, this->root_modifier(), target);
  }

  // optional uint32 total_unit_death_count = 64;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->total_unit_death_count(), target);
  }

  // optional bool aura_modifier = 65;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->aura_modifier(), target);
  }

  // optional bool armor_debuff_modifier = 66;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->armor_debuff_modifier(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool no_physical_damage_modifier = 67;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->no_physical_damage_modifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACombatLogEntry)
  return target;
}

size_t CMsgDOTACombatLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACombatLogEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 assist_players = 40;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->assist_players_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->assist_players_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_name());
    }

    // optional uint32 target_source_name = 3;
    if (has_target_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_source_name());
    }

    // optional uint32 attacker_name = 4;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_name());
    }

    // optional uint32 damage_source_name = 5;
    if (has_damage_source_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_source_name());
    }

    // optional uint32 inflictor_name = 6;
    if (has_inflictor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inflictor_name());
    }

    // optional bool is_attacker_illusion = 7;
    if (has_is_attacker_illusion()) {
      total_size += 1 + 1;
    }

    // optional bool is_attacker_hero = 8;
    if (has_is_attacker_hero()) {
      total_size += 1 + 1;
    }

    // optional bool is_target_illusion = 9;
    if (has_is_target_illusion()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool is_target_hero = 10;
    if (has_is_target_hero()) {
      total_size += 1 + 1;
    }

    // optional uint32 value = 13;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional int32 health = 14;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional float timestamp = 15;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }

    // optional bool is_visible_radiant = 11;
    if (has_is_visible_radiant()) {
      total_size += 1 + 1;
    }

    // optional bool is_visible_dire = 12;
    if (has_is_visible_dire()) {
      total_size += 1 + 1;
    }

    // optional bool is_ability_toggle_on = 18;
    if (has_is_ability_toggle_on()) {
      total_size += 2 + 1;
    }

    // optional bool is_ability_toggle_off = 19;
    if (has_is_ability_toggle_off()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float stun_duration = 16;
    if (has_stun_duration()) {
      total_size += 2 + 4;
    }

    // optional float slow_duration = 17;
    if (has_slow_duration()) {
      total_size += 2 + 4;
    }

    // optional uint32 ability_level = 20;
    if (has_ability_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_level());
    }

    // optional float location_x = 21;
    if (has_location_x()) {
      total_size += 2 + 4;
    }

    // optional float location_y = 22;
    if (has_location_y()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold_reason = 23;
    if (has_gold_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_reason());
    }

    // optional float timestamp_raw = 24;
    if (has_timestamp_raw()) {
      total_size += 2 + 4;
    }

    // optional float modifier_duration = 25;
    if (has_modifier_duration()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 xp_reason = 26;
    if (has_xp_reason()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_reason());
    }

    // optional uint32 last_hits = 27;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 attacker_team = 28;
    if (has_attacker_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_team());
    }

    // optional uint32 target_team = 29;
    if (has_target_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_team());
    }

    // optional uint32 obs_wards_placed = 30;
    if (has_obs_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obs_wards_placed());
    }

    // optional uint32 assist_player0 = 31;
    if (has_assist_player0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player0());
    }

    // optional uint32 assist_player1 = 32;
    if (has_assist_player1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player1());
    }

    // optional uint32 assist_player2 = 33;
    if (has_assist_player2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player2());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 assist_player3 = 34;
    if (has_assist_player3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assist_player3());
    }

    // optional uint32 stack_count = 35;
    if (has_stack_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional uint32 neutral_camp_type = 38;
    if (has_neutral_camp_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neutral_camp_type());
    }

    // optional uint32 rune_type = 39;
    if (has_rune_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rune_type());
    }

    // optional bool hidden_modifier = 36;
    if (has_hidden_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool is_target_building = 37;
    if (has_is_target_building()) {
      total_size += 2 + 1;
    }

    // optional bool is_heal_save = 41;
    if (has_is_heal_save()) {
      total_size += 2 + 1;
    }

    // optional bool is_ultimate_ability = 42;
    if (has_is_ultimate_ability()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 attacker_hero_level = 43;
    if (has_attacker_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_hero_level());
    }

    // optional uint32 target_hero_level = 44;
    if (has_target_hero_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_hero_level());
    }

    // optional uint32 xpm = 45;
    if (has_xpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 gpm = 46;
    if (has_gpm()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 event_location = 47;
    if (has_event_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_location());
    }

    // optional uint32 damage_type = 49;
    if (has_damage_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_type());
    }

    // optional uint32 damage_category = 51;
    if (has_damage_category()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage_category());
    }

    // optional uint32 networth = 52;
    if (has_networth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->networth());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional bool target_is_self = 48;
    if (has_target_is_self()) {
      total_size += 2 + 1;
    }

    // optional bool invisibility_modifier = 50;
    if (has_invisibility_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool silence_modifier = 55;
    if (has_silence_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool heal_from_lifesteal = 56;
    if (has_heal_from_lifesteal()) {
      total_size += 2 + 1;
    }

    // optional uint32 building_type = 53;
    if (has_building_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->building_type());
    }

    // optional float modifier_elapsed_duration = 54;
    if (has_modifier_elapsed_duration()) {
      total_size += 2 + 4;
    }

    // optional bool modifier_purged = 57;
    if (has_modifier_purged()) {
      total_size += 2 + 1;
    }

    // optional bool spell_evaded = 58;
    if (has_spell_evaded()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional bool motion_controller_modifier = 59;
    if (has_motion_controller_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool long_range_kill = 60;
    if (has_long_range_kill()) {
      total_size += 2 + 1;
    }

    // optional uint32 modifier_purge_ability = 61;
    if (has_modifier_purge_ability()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_ability());
    }

    // optional uint32 modifier_purge_npc = 62;
    if (has_modifier_purge_npc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifier_purge_npc());
    }

    // optional uint32 total_unit_death_count = 64;
    if (has_total_unit_death_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_unit_death_count());
    }

    // optional bool root_modifier = 63;
    if (has_root_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool aura_modifier = 65;
    if (has_aura_modifier()) {
      total_size += 2 + 1;
    }

    // optional bool armor_debuff_modifier = 66;
    if (has_armor_debuff_modifier()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[64 / 32] & 3u) {
    // optional bool no_physical_damage_modifier = 67;
    if (has_no_physical_damage_modifier()) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACombatLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACombatLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACombatLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACombatLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACombatLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACombatLogEntry)
    MergeFrom(*source);
  }
}

void CMsgDOTACombatLogEntry::MergeFrom(const CMsgDOTACombatLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACombatLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assist_players_.MergeFrom(from.assist_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      target_name_ = from.target_name_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_source_name_ = from.target_source_name_;
    }
    if (cached_has_bits & 0x00000004u) {
      attacker_name_ = from.attacker_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      damage_source_name_ = from.damage_source_name_;
    }
    if (cached_has_bits & 0x00000010u) {
      inflictor_name_ = from.inflictor_name_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_attacker_illusion_ = from.is_attacker_illusion_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_attacker_hero_ = from.is_attacker_hero_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_target_illusion_ = from.is_target_illusion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_target_hero_ = from.is_target_hero_;
    }
    if (cached_has_bits & 0x00000200u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000400u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00000800u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_visible_radiant_ = from.is_visible_radiant_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_visible_dire_ = from.is_visible_dire_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_ability_toggle_on_ = from.is_ability_toggle_on_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_ability_toggle_off_ = from.is_ability_toggle_off_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      stun_duration_ = from.stun_duration_;
    }
    if (cached_has_bits & 0x00020000u) {
      slow_duration_ = from.slow_duration_;
    }
    if (cached_has_bits & 0x00040000u) {
      ability_level_ = from.ability_level_;
    }
    if (cached_has_bits & 0x00080000u) {
      location_x_ = from.location_x_;
    }
    if (cached_has_bits & 0x00100000u) {
      location_y_ = from.location_y_;
    }
    if (cached_has_bits & 0x00200000u) {
      gold_reason_ = from.gold_reason_;
    }
    if (cached_has_bits & 0x00400000u) {
      timestamp_raw_ = from.timestamp_raw_;
    }
    if (cached_has_bits & 0x00800000u) {
      modifier_duration_ = from.modifier_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      xp_reason_ = from.xp_reason_;
    }
    if (cached_has_bits & 0x02000000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x04000000u) {
      attacker_team_ = from.attacker_team_;
    }
    if (cached_has_bits & 0x08000000u) {
      target_team_ = from.target_team_;
    }
    if (cached_has_bits & 0x10000000u) {
      obs_wards_placed_ = from.obs_wards_placed_;
    }
    if (cached_has_bits & 0x20000000u) {
      assist_player0_ = from.assist_player0_;
    }
    if (cached_has_bits & 0x40000000u) {
      assist_player1_ = from.assist_player1_;
    }
    if (cached_has_bits & 0x80000000u) {
      assist_player2_ = from.assist_player2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      assist_player3_ = from.assist_player3_;
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      neutral_camp_type_ = from.neutral_camp_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      rune_type_ = from.rune_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      hidden_modifier_ = from.hidden_modifier_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_target_building_ = from.is_target_building_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_heal_save_ = from.is_heal_save_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_ultimate_ability_ = from.is_ultimate_ability_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      attacker_hero_level_ = from.attacker_hero_level_;
    }
    if (cached_has_bits & 0x00000200u) {
      target_hero_level_ = from.target_hero_level_;
    }
    if (cached_has_bits & 0x00000400u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00001000u) {
      event_location_ = from.event_location_;
    }
    if (cached_has_bits & 0x00002000u) {
      damage_type_ = from.damage_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      damage_category_ = from.damage_category_;
    }
    if (cached_has_bits & 0x00008000u) {
      networth_ = from.networth_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      target_is_self_ = from.target_is_self_;
    }
    if (cached_has_bits & 0x00020000u) {
      invisibility_modifier_ = from.invisibility_modifier_;
    }
    if (cached_has_bits & 0x00040000u) {
      silence_modifier_ = from.silence_modifier_;
    }
    if (cached_has_bits & 0x00080000u) {
      heal_from_lifesteal_ = from.heal_from_lifesteal_;
    }
    if (cached_has_bits & 0x00100000u) {
      building_type_ = from.building_type_;
    }
    if (cached_has_bits & 0x00200000u) {
      modifier_elapsed_duration_ = from.modifier_elapsed_duration_;
    }
    if (cached_has_bits & 0x00400000u) {
      modifier_purged_ = from.modifier_purged_;
    }
    if (cached_has_bits & 0x00800000u) {
      spell_evaded_ = from.spell_evaded_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      motion_controller_modifier_ = from.motion_controller_modifier_;
    }
    if (cached_has_bits & 0x02000000u) {
      long_range_kill_ = from.long_range_kill_;
    }
    if (cached_has_bits & 0x04000000u) {
      modifier_purge_ability_ = from.modifier_purge_ability_;
    }
    if (cached_has_bits & 0x08000000u) {
      modifier_purge_npc_ = from.modifier_purge_npc_;
    }
    if (cached_has_bits & 0x10000000u) {
      total_unit_death_count_ = from.total_unit_death_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      root_modifier_ = from.root_modifier_;
    }
    if (cached_has_bits & 0x40000000u) {
      aura_modifier_ = from.aura_modifier_;
    }
    if (cached_has_bits & 0x80000000u) {
      armor_debuff_modifier_ = from.armor_debuff_modifier_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      no_physical_damage_modifier_ = from.no_physical_damage_modifier_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CMsgDOTACombatLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACombatLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACombatLogEntry::CopyFrom(const CMsgDOTACombatLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACombatLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACombatLogEntry::IsInitialized() const {
  return true;
}

void CMsgDOTACombatLogEntry::Swap(CMsgDOTACombatLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACombatLogEntry::InternalSwap(CMsgDOTACombatLogEntry* other) {
  assist_players_.InternalSwap(&other->assist_players_);
  std::swap(target_name_, other->target_name_);
  std::swap(target_source_name_, other->target_source_name_);
  std::swap(attacker_name_, other->attacker_name_);
  std::swap(damage_source_name_, other->damage_source_name_);
  std::swap(inflictor_name_, other->inflictor_name_);
  std::swap(is_attacker_illusion_, other->is_attacker_illusion_);
  std::swap(is_attacker_hero_, other->is_attacker_hero_);
  std::swap(is_target_illusion_, other->is_target_illusion_);
  std::swap(is_target_hero_, other->is_target_hero_);
  std::swap(value_, other->value_);
  std::swap(health_, other->health_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(is_visible_radiant_, other->is_visible_radiant_);
  std::swap(is_visible_dire_, other->is_visible_dire_);
  std::swap(is_ability_toggle_on_, other->is_ability_toggle_on_);
  std::swap(is_ability_toggle_off_, other->is_ability_toggle_off_);
  std::swap(stun_duration_, other->stun_duration_);
  std::swap(slow_duration_, other->slow_duration_);
  std::swap(ability_level_, other->ability_level_);
  std::swap(location_x_, other->location_x_);
  std::swap(location_y_, other->location_y_);
  std::swap(gold_reason_, other->gold_reason_);
  std::swap(timestamp_raw_, other->timestamp_raw_);
  std::swap(modifier_duration_, other->modifier_duration_);
  std::swap(xp_reason_, other->xp_reason_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(attacker_team_, other->attacker_team_);
  std::swap(target_team_, other->target_team_);
  std::swap(obs_wards_placed_, other->obs_wards_placed_);
  std::swap(assist_player0_, other->assist_player0_);
  std::swap(assist_player1_, other->assist_player1_);
  std::swap(assist_player2_, other->assist_player2_);
  std::swap(assist_player3_, other->assist_player3_);
  std::swap(stack_count_, other->stack_count_);
  std::swap(neutral_camp_type_, other->neutral_camp_type_);
  std::swap(rune_type_, other->rune_type_);
  std::swap(hidden_modifier_, other->hidden_modifier_);
  std::swap(is_target_building_, other->is_target_building_);
  std::swap(is_heal_save_, other->is_heal_save_);
  std::swap(is_ultimate_ability_, other->is_ultimate_ability_);
  std::swap(attacker_hero_level_, other->attacker_hero_level_);
  std::swap(target_hero_level_, other->target_hero_level_);
  std::swap(xpm_, other->xpm_);
  std::swap(gpm_, other->gpm_);
  std::swap(event_location_, other->event_location_);
  std::swap(damage_type_, other->damage_type_);
  std::swap(damage_category_, other->damage_category_);
  std::swap(networth_, other->networth_);
  std::swap(target_is_self_, other->target_is_self_);
  std::swap(invisibility_modifier_, other->invisibility_modifier_);
  std::swap(silence_modifier_, other->silence_modifier_);
  std::swap(heal_from_lifesteal_, other->heal_from_lifesteal_);
  std::swap(building_type_, other->building_type_);
  std::swap(modifier_elapsed_duration_, other->modifier_elapsed_duration_);
  std::swap(modifier_purged_, other->modifier_purged_);
  std::swap(spell_evaded_, other->spell_evaded_);
  std::swap(motion_controller_modifier_, other->motion_controller_modifier_);
  std::swap(long_range_kill_, other->long_range_kill_);
  std::swap(modifier_purge_ability_, other->modifier_purge_ability_);
  std::swap(modifier_purge_npc_, other->modifier_purge_npc_);
  std::swap(total_unit_death_count_, other->total_unit_death_count_);
  std::swap(root_modifier_, other->root_modifier_);
  std::swap(aura_modifier_, other->aura_modifier_);
  std::swap(armor_debuff_modifier_, other->armor_debuff_modifier_);
  std::swap(no_physical_damage_modifier_, other->no_physical_damage_modifier_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACombatLogEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACombatLogEntry

// optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
bool CMsgDOTACombatLogEntry::has_type() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_type() {
  _has_bits_[2] |= 0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_has_type() {
  _has_bits_[2] &= ~0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_type() {
  type_ = -1;
  clear_has_type();
}
::proto::dota::DOTA_COMBATLOG_TYPES CMsgDOTACombatLogEntry::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.type)
  return static_cast< ::proto::dota::DOTA_COMBATLOG_TYPES >(type_);
}
void CMsgDOTACombatLogEntry::set_type(::proto::dota::DOTA_COMBATLOG_TYPES value) {
  assert(::proto::dota::DOTA_COMBATLOG_TYPES_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.type)
}

// optional uint32 target_name = 2;
bool CMsgDOTACombatLogEntry::has_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_target_name() {
  target_name_ = 0u;
  clear_has_target_name();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_name)
  return target_name_;
}
void CMsgDOTACombatLogEntry::set_target_name(::google::protobuf::uint32 value) {
  set_has_target_name();
  target_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_name)
}

// optional uint32 target_source_name = 3;
bool CMsgDOTACombatLogEntry::has_target_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_source_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_has_target_source_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_target_source_name() {
  target_source_name_ = 0u;
  clear_has_target_source_name();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_source_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_source_name)
  return target_source_name_;
}
void CMsgDOTACombatLogEntry::set_target_source_name(::google::protobuf::uint32 value) {
  set_has_target_source_name();
  target_source_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_source_name)
}

// optional uint32 attacker_name = 4;
bool CMsgDOTACombatLogEntry::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_attacker_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_has_attacker_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_attacker_name() {
  attacker_name_ = 0u;
  clear_has_attacker_name();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_name)
  return attacker_name_;
}
void CMsgDOTACombatLogEntry::set_attacker_name(::google::protobuf::uint32 value) {
  set_has_attacker_name();
  attacker_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_name)
}

// optional uint32 damage_source_name = 5;
bool CMsgDOTACombatLogEntry::has_damage_source_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_damage_source_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_has_damage_source_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_damage_source_name() {
  damage_source_name_ = 0u;
  clear_has_damage_source_name();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_source_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_source_name)
  return damage_source_name_;
}
void CMsgDOTACombatLogEntry::set_damage_source_name(::google::protobuf::uint32 value) {
  set_has_damage_source_name();
  damage_source_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_source_name)
}

// optional uint32 inflictor_name = 6;
bool CMsgDOTACombatLogEntry::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_inflictor_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_has_inflictor_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_inflictor_name() {
  inflictor_name_ = 0u;
  clear_has_inflictor_name();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::inflictor_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.inflictor_name)
  return inflictor_name_;
}
void CMsgDOTACombatLogEntry::set_inflictor_name(::google::protobuf::uint32 value) {
  set_has_inflictor_name();
  inflictor_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.inflictor_name)
}

// optional bool is_attacker_illusion = 7;
bool CMsgDOTACombatLogEntry::has_is_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_attacker_illusion() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_has_is_attacker_illusion() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_is_attacker_illusion() {
  is_attacker_illusion_ = false;
  clear_has_is_attacker_illusion();
}
bool CMsgDOTACombatLogEntry::is_attacker_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_attacker_illusion)
  return is_attacker_illusion_;
}
void CMsgDOTACombatLogEntry::set_is_attacker_illusion(bool value) {
  set_has_is_attacker_illusion();
  is_attacker_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_attacker_illusion)
}

// optional bool is_attacker_hero = 8;
bool CMsgDOTACombatLogEntry::has_is_attacker_hero() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_attacker_hero() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_has_is_attacker_hero() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_is_attacker_hero() {
  is_attacker_hero_ = false;
  clear_has_is_attacker_hero();
}
bool CMsgDOTACombatLogEntry::is_attacker_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_attacker_hero)
  return is_attacker_hero_;
}
void CMsgDOTACombatLogEntry::set_is_attacker_hero(bool value) {
  set_has_is_attacker_hero();
  is_attacker_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_attacker_hero)
}

// optional bool is_target_illusion = 9;
bool CMsgDOTACombatLogEntry::has_is_target_illusion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_illusion() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_illusion() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_is_target_illusion() {
  is_target_illusion_ = false;
  clear_has_is_target_illusion();
}
bool CMsgDOTACombatLogEntry::is_target_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_illusion)
  return is_target_illusion_;
}
void CMsgDOTACombatLogEntry::set_is_target_illusion(bool value) {
  set_has_is_target_illusion();
  is_target_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_illusion)
}

// optional bool is_target_hero = 10;
bool CMsgDOTACombatLogEntry::has_is_target_hero() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_hero() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_hero() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_is_target_hero() {
  is_target_hero_ = false;
  clear_has_is_target_hero();
}
bool CMsgDOTACombatLogEntry::is_target_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_hero)
  return is_target_hero_;
}
void CMsgDOTACombatLogEntry::set_is_target_hero(bool value) {
  set_has_is_target_hero();
  is_target_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_hero)
}

// optional bool is_visible_radiant = 11;
bool CMsgDOTACombatLogEntry::has_is_visible_radiant() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_visible_radiant() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_visible_radiant() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_is_visible_radiant() {
  is_visible_radiant_ = false;
  clear_has_is_visible_radiant();
}
bool CMsgDOTACombatLogEntry::is_visible_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_visible_radiant)
  return is_visible_radiant_;
}
void CMsgDOTACombatLogEntry::set_is_visible_radiant(bool value) {
  set_has_is_visible_radiant();
  is_visible_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_visible_radiant)
}

// optional bool is_visible_dire = 12;
bool CMsgDOTACombatLogEntry::has_is_visible_dire() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_visible_dire() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_visible_dire() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_is_visible_dire() {
  is_visible_dire_ = false;
  clear_has_is_visible_dire();
}
bool CMsgDOTACombatLogEntry::is_visible_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_visible_dire)
  return is_visible_dire_;
}
void CMsgDOTACombatLogEntry::set_is_visible_dire(bool value) {
  set_has_is_visible_dire();
  is_visible_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_visible_dire)
}

// optional uint32 value = 13;
bool CMsgDOTACombatLogEntry::has_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_value() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.value)
  return value_;
}
void CMsgDOTACombatLogEntry::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.value)
}

// optional int32 health = 14;
bool CMsgDOTACombatLogEntry::has_health() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_health() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_has_health() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_health() {
  health_ = 0;
  clear_has_health();
}
::google::protobuf::int32 CMsgDOTACombatLogEntry::health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.health)
  return health_;
}
void CMsgDOTACombatLogEntry::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.health)
}

// optional float timestamp = 15;
bool CMsgDOTACombatLogEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
float CMsgDOTACombatLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.timestamp)
  return timestamp_;
}
void CMsgDOTACombatLogEntry::set_timestamp(float value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.timestamp)
}

// optional float stun_duration = 16;
bool CMsgDOTACombatLogEntry::has_stun_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_stun_duration() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_has_stun_duration() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_stun_duration() {
  stun_duration_ = 0;
  clear_has_stun_duration();
}
float CMsgDOTACombatLogEntry::stun_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.stun_duration)
  return stun_duration_;
}
void CMsgDOTACombatLogEntry::set_stun_duration(float value) {
  set_has_stun_duration();
  stun_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.stun_duration)
}

// optional float slow_duration = 17;
bool CMsgDOTACombatLogEntry::has_slow_duration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_slow_duration() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_has_slow_duration() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_slow_duration() {
  slow_duration_ = 0;
  clear_has_slow_duration();
}
float CMsgDOTACombatLogEntry::slow_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.slow_duration)
  return slow_duration_;
}
void CMsgDOTACombatLogEntry::set_slow_duration(float value) {
  set_has_slow_duration();
  slow_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.slow_duration)
}

// optional bool is_ability_toggle_on = 18;
bool CMsgDOTACombatLogEntry::has_is_ability_toggle_on() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_on() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_on() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_is_ability_toggle_on() {
  is_ability_toggle_on_ = false;
  clear_has_is_ability_toggle_on();
}
bool CMsgDOTACombatLogEntry::is_ability_toggle_on() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_on)
  return is_ability_toggle_on_;
}
void CMsgDOTACombatLogEntry::set_is_ability_toggle_on(bool value) {
  set_has_is_ability_toggle_on();
  is_ability_toggle_on_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_on)
}

// optional bool is_ability_toggle_off = 19;
bool CMsgDOTACombatLogEntry::has_is_ability_toggle_off() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_ability_toggle_off() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_has_is_ability_toggle_off() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_is_ability_toggle_off() {
  is_ability_toggle_off_ = false;
  clear_has_is_ability_toggle_off();
}
bool CMsgDOTACombatLogEntry::is_ability_toggle_off() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_off)
  return is_ability_toggle_off_;
}
void CMsgDOTACombatLogEntry::set_is_ability_toggle_off(bool value) {
  set_has_is_ability_toggle_off();
  is_ability_toggle_off_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_off)
}

// optional uint32 ability_level = 20;
bool CMsgDOTACombatLogEntry::has_ability_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_ability_level() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_has_ability_level() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_ability_level() {
  ability_level_ = 0u;
  clear_has_ability_level();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::ability_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.ability_level)
  return ability_level_;
}
void CMsgDOTACombatLogEntry::set_ability_level(::google::protobuf::uint32 value) {
  set_has_ability_level();
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.ability_level)
}

// optional float location_x = 21;
bool CMsgDOTACombatLogEntry::has_location_x() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_location_x() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_has_location_x() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_location_x() {
  location_x_ = 0;
  clear_has_location_x();
}
float CMsgDOTACombatLogEntry::location_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.location_x)
  return location_x_;
}
void CMsgDOTACombatLogEntry::set_location_x(float value) {
  set_has_location_x();
  location_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.location_x)
}

// optional float location_y = 22;
bool CMsgDOTACombatLogEntry::has_location_y() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_location_y() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_has_location_y() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_location_y() {
  location_y_ = 0;
  clear_has_location_y();
}
float CMsgDOTACombatLogEntry::location_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.location_y)
  return location_y_;
}
void CMsgDOTACombatLogEntry::set_location_y(float value) {
  set_has_location_y();
  location_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.location_y)
}

// optional uint32 gold_reason = 23;
bool CMsgDOTACombatLogEntry::has_gold_reason() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_gold_reason() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_has_gold_reason() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_gold_reason() {
  gold_reason_ = 0u;
  clear_has_gold_reason();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::gold_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.gold_reason)
  return gold_reason_;
}
void CMsgDOTACombatLogEntry::set_gold_reason(::google::protobuf::uint32 value) {
  set_has_gold_reason();
  gold_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.gold_reason)
}

// optional float timestamp_raw = 24;
bool CMsgDOTACombatLogEntry::has_timestamp_raw() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_timestamp_raw() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_has_timestamp_raw() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_timestamp_raw() {
  timestamp_raw_ = 0;
  clear_has_timestamp_raw();
}
float CMsgDOTACombatLogEntry::timestamp_raw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.timestamp_raw)
  return timestamp_raw_;
}
void CMsgDOTACombatLogEntry::set_timestamp_raw(float value) {
  set_has_timestamp_raw();
  timestamp_raw_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.timestamp_raw)
}

// optional float modifier_duration = 25;
bool CMsgDOTACombatLogEntry::has_modifier_duration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_duration() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_duration() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_duration() {
  modifier_duration_ = 0;
  clear_has_modifier_duration();
}
float CMsgDOTACombatLogEntry::modifier_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_duration)
  return modifier_duration_;
}
void CMsgDOTACombatLogEntry::set_modifier_duration(float value) {
  set_has_modifier_duration();
  modifier_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_duration)
}

// optional uint32 xp_reason = 26;
bool CMsgDOTACombatLogEntry::has_xp_reason() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_xp_reason() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_has_xp_reason() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_xp_reason() {
  xp_reason_ = 0u;
  clear_has_xp_reason();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::xp_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.xp_reason)
  return xp_reason_;
}
void CMsgDOTACombatLogEntry::set_xp_reason(::google::protobuf::uint32 value) {
  set_has_xp_reason();
  xp_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.xp_reason)
}

// optional uint32 last_hits = 27;
bool CMsgDOTACombatLogEntry::has_last_hits() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_last_hits() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_has_last_hits() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.last_hits)
  return last_hits_;
}
void CMsgDOTACombatLogEntry::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.last_hits)
}

// optional uint32 attacker_team = 28;
bool CMsgDOTACombatLogEntry::has_attacker_team() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_attacker_team() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_has_attacker_team() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_attacker_team() {
  attacker_team_ = 0u;
  clear_has_attacker_team();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_team)
  return attacker_team_;
}
void CMsgDOTACombatLogEntry::set_attacker_team(::google::protobuf::uint32 value) {
  set_has_attacker_team();
  attacker_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_team)
}

// optional uint32 target_team = 29;
bool CMsgDOTACombatLogEntry::has_target_team() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_team() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_has_target_team() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_target_team() {
  target_team_ = 0u;
  clear_has_target_team();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_team)
  return target_team_;
}
void CMsgDOTACombatLogEntry::set_target_team(::google::protobuf::uint32 value) {
  set_has_target_team();
  target_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_team)
}

// optional uint32 obs_wards_placed = 30;
bool CMsgDOTACombatLogEntry::has_obs_wards_placed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_obs_wards_placed() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_has_obs_wards_placed() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_obs_wards_placed() {
  obs_wards_placed_ = 0u;
  clear_has_obs_wards_placed();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::obs_wards_placed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.obs_wards_placed)
  return obs_wards_placed_;
}
void CMsgDOTACombatLogEntry::set_obs_wards_placed(::google::protobuf::uint32 value) {
  set_has_obs_wards_placed();
  obs_wards_placed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.obs_wards_placed)
}

// optional uint32 assist_player0 = 31;
bool CMsgDOTACombatLogEntry::has_assist_player0() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player0() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player0() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_assist_player0() {
  assist_player0_ = 0u;
  clear_has_assist_player0();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player0)
  return assist_player0_;
}
void CMsgDOTACombatLogEntry::set_assist_player0(::google::protobuf::uint32 value) {
  set_has_assist_player0();
  assist_player0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player0)
}

// optional uint32 assist_player1 = 32;
bool CMsgDOTACombatLogEntry::has_assist_player1() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player1() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player1() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_assist_player1() {
  assist_player1_ = 0u;
  clear_has_assist_player1();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player1)
  return assist_player1_;
}
void CMsgDOTACombatLogEntry::set_assist_player1(::google::protobuf::uint32 value) {
  set_has_assist_player1();
  assist_player1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player1)
}

// optional uint32 assist_player2 = 33;
bool CMsgDOTACombatLogEntry::has_assist_player2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player2() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player2() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_assist_player2() {
  assist_player2_ = 0u;
  clear_has_assist_player2();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player2)
  return assist_player2_;
}
void CMsgDOTACombatLogEntry::set_assist_player2(::google::protobuf::uint32 value) {
  set_has_assist_player2();
  assist_player2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player2)
}

// optional uint32 assist_player3 = 34;
bool CMsgDOTACombatLogEntry::has_assist_player3() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_assist_player3() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_has_assist_player3() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_assist_player3() {
  assist_player3_ = 0u;
  clear_has_assist_player3();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player3)
  return assist_player3_;
}
void CMsgDOTACombatLogEntry::set_assist_player3(::google::protobuf::uint32 value) {
  set_has_assist_player3();
  assist_player3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player3)
}

// optional uint32 stack_count = 35;
bool CMsgDOTACombatLogEntry::has_stack_count() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_stack_count() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_has_stack_count() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTACombatLogEntry::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.stack_count)
  return stack_count_;
}
void CMsgDOTACombatLogEntry::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.stack_count)
}

// optional bool hidden_modifier = 36;
bool CMsgDOTACombatLogEntry::has_hidden_modifier() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_hidden_modifier() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_has_hidden_modifier() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTACombatLogEntry::clear_hidden_modifier() {
  hidden_modifier_ = false;
  clear_has_hidden_modifier();
}
bool CMsgDOTACombatLogEntry::hidden_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.hidden_modifier)
  return hidden_modifier_;
}
void CMsgDOTACombatLogEntry::set_hidden_modifier(bool value) {
  set_has_hidden_modifier();
  hidden_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.hidden_modifier)
}

// optional bool is_target_building = 37;
bool CMsgDOTACombatLogEntry::has_is_target_building() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_target_building() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_has_is_target_building() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTACombatLogEntry::clear_is_target_building() {
  is_target_building_ = false;
  clear_has_is_target_building();
}
bool CMsgDOTACombatLogEntry::is_target_building() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_building)
  return is_target_building_;
}
void CMsgDOTACombatLogEntry::set_is_target_building(bool value) {
  set_has_is_target_building();
  is_target_building_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_building)
}

// optional uint32 neutral_camp_type = 38;
bool CMsgDOTACombatLogEntry::has_neutral_camp_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_neutral_camp_type() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_has_neutral_camp_type() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTACombatLogEntry::clear_neutral_camp_type() {
  neutral_camp_type_ = 0u;
  clear_has_neutral_camp_type();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::neutral_camp_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.neutral_camp_type)
  return neutral_camp_type_;
}
void CMsgDOTACombatLogEntry::set_neutral_camp_type(::google::protobuf::uint32 value) {
  set_has_neutral_camp_type();
  neutral_camp_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.neutral_camp_type)
}

// optional uint32 rune_type = 39;
bool CMsgDOTACombatLogEntry::has_rune_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_rune_type() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_has_rune_type() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTACombatLogEntry::clear_rune_type() {
  rune_type_ = 0u;
  clear_has_rune_type();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::rune_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.rune_type)
  return rune_type_;
}
void CMsgDOTACombatLogEntry::set_rune_type(::google::protobuf::uint32 value) {
  set_has_rune_type();
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.rune_type)
}

// repeated uint32 assist_players = 40;
int CMsgDOTACombatLogEntry::assist_players_size() const {
  return assist_players_.size();
}
void CMsgDOTACombatLogEntry::clear_assist_players() {
  assist_players_.Clear();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return assist_players_.Get(index);
}
void CMsgDOTACombatLogEntry::set_assist_players(int index, ::google::protobuf::uint32 value) {
  assist_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_players)
}
void CMsgDOTACombatLogEntry::add_assist_players(::google::protobuf::uint32 value) {
  assist_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTACombatLogEntry.assist_players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTACombatLogEntry::assist_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return assist_players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTACombatLogEntry::mutable_assist_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return &assist_players_;
}

// optional bool is_heal_save = 41;
bool CMsgDOTACombatLogEntry::has_is_heal_save() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_heal_save() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_has_is_heal_save() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTACombatLogEntry::clear_is_heal_save() {
  is_heal_save_ = false;
  clear_has_is_heal_save();
}
bool CMsgDOTACombatLogEntry::is_heal_save() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_heal_save)
  return is_heal_save_;
}
void CMsgDOTACombatLogEntry::set_is_heal_save(bool value) {
  set_has_is_heal_save();
  is_heal_save_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_heal_save)
}

// optional bool is_ultimate_ability = 42;
bool CMsgDOTACombatLogEntry::has_is_ultimate_ability() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_is_ultimate_ability() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_has_is_ultimate_ability() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgDOTACombatLogEntry::clear_is_ultimate_ability() {
  is_ultimate_ability_ = false;
  clear_has_is_ultimate_ability();
}
bool CMsgDOTACombatLogEntry::is_ultimate_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ultimate_ability)
  return is_ultimate_ability_;
}
void CMsgDOTACombatLogEntry::set_is_ultimate_ability(bool value) {
  set_has_is_ultimate_ability();
  is_ultimate_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ultimate_ability)
}

// optional uint32 attacker_hero_level = 43;
bool CMsgDOTACombatLogEntry::has_attacker_hero_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_attacker_hero_level() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_has_attacker_hero_level() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgDOTACombatLogEntry::clear_attacker_hero_level() {
  attacker_hero_level_ = 0u;
  clear_has_attacker_hero_level();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_hero_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_hero_level)
  return attacker_hero_level_;
}
void CMsgDOTACombatLogEntry::set_attacker_hero_level(::google::protobuf::uint32 value) {
  set_has_attacker_hero_level();
  attacker_hero_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_hero_level)
}

// optional uint32 target_hero_level = 44;
bool CMsgDOTACombatLogEntry::has_target_hero_level() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_hero_level() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_has_target_hero_level() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgDOTACombatLogEntry::clear_target_hero_level() {
  target_hero_level_ = 0u;
  clear_has_target_hero_level();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_hero_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_hero_level)
  return target_hero_level_;
}
void CMsgDOTACombatLogEntry::set_target_hero_level(::google::protobuf::uint32 value) {
  set_has_target_hero_level();
  target_hero_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_hero_level)
}

// optional uint32 xpm = 45;
bool CMsgDOTACombatLogEntry::has_xpm() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_xpm() {
  _has_bits_[1] |= 0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_has_xpm() {
  _has_bits_[1] &= ~0x00000400u;
}
void CMsgDOTACombatLogEntry::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.xpm)
  return xpm_;
}
void CMsgDOTACombatLogEntry::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.xpm)
}

// optional uint32 gpm = 46;
bool CMsgDOTACombatLogEntry::has_gpm() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_gpm() {
  _has_bits_[1] |= 0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_has_gpm() {
  _has_bits_[1] &= ~0x00000800u;
}
void CMsgDOTACombatLogEntry::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.gpm)
  return gpm_;
}
void CMsgDOTACombatLogEntry::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.gpm)
}

// optional uint32 event_location = 47;
bool CMsgDOTACombatLogEntry::has_event_location() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_event_location() {
  _has_bits_[1] |= 0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_has_event_location() {
  _has_bits_[1] &= ~0x00001000u;
}
void CMsgDOTACombatLogEntry::clear_event_location() {
  event_location_ = 0u;
  clear_has_event_location();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::event_location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.event_location)
  return event_location_;
}
void CMsgDOTACombatLogEntry::set_event_location(::google::protobuf::uint32 value) {
  set_has_event_location();
  event_location_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.event_location)
}

// optional bool target_is_self = 48;
bool CMsgDOTACombatLogEntry::has_target_is_self() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_target_is_self() {
  _has_bits_[1] |= 0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_has_target_is_self() {
  _has_bits_[1] &= ~0x00010000u;
}
void CMsgDOTACombatLogEntry::clear_target_is_self() {
  target_is_self_ = false;
  clear_has_target_is_self();
}
bool CMsgDOTACombatLogEntry::target_is_self() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_is_self)
  return target_is_self_;
}
void CMsgDOTACombatLogEntry::set_target_is_self(bool value) {
  set_has_target_is_self();
  target_is_self_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_is_self)
}

// optional uint32 damage_type = 49;
bool CMsgDOTACombatLogEntry::has_damage_type() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_damage_type() {
  _has_bits_[1] |= 0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_has_damage_type() {
  _has_bits_[1] &= ~0x00002000u;
}
void CMsgDOTACombatLogEntry::clear_damage_type() {
  damage_type_ = 0u;
  clear_has_damage_type();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_type)
  return damage_type_;
}
void CMsgDOTACombatLogEntry::set_damage_type(::google::protobuf::uint32 value) {
  set_has_damage_type();
  damage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_type)
}

// optional bool invisibility_modifier = 50;
bool CMsgDOTACombatLogEntry::has_invisibility_modifier() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_invisibility_modifier() {
  _has_bits_[1] |= 0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_has_invisibility_modifier() {
  _has_bits_[1] &= ~0x00020000u;
}
void CMsgDOTACombatLogEntry::clear_invisibility_modifier() {
  invisibility_modifier_ = false;
  clear_has_invisibility_modifier();
}
bool CMsgDOTACombatLogEntry::invisibility_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.invisibility_modifier)
  return invisibility_modifier_;
}
void CMsgDOTACombatLogEntry::set_invisibility_modifier(bool value) {
  set_has_invisibility_modifier();
  invisibility_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.invisibility_modifier)
}

// optional uint32 damage_category = 51;
bool CMsgDOTACombatLogEntry::has_damage_category() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_damage_category() {
  _has_bits_[1] |= 0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_has_damage_category() {
  _has_bits_[1] &= ~0x00004000u;
}
void CMsgDOTACombatLogEntry::clear_damage_category() {
  damage_category_ = 0u;
  clear_has_damage_category();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_category() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_category)
  return damage_category_;
}
void CMsgDOTACombatLogEntry::set_damage_category(::google::protobuf::uint32 value) {
  set_has_damage_category();
  damage_category_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_category)
}

// optional uint32 networth = 52;
bool CMsgDOTACombatLogEntry::has_networth() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_networth() {
  _has_bits_[1] |= 0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_has_networth() {
  _has_bits_[1] &= ~0x00008000u;
}
void CMsgDOTACombatLogEntry::clear_networth() {
  networth_ = 0u;
  clear_has_networth();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::networth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.networth)
  return networth_;
}
void CMsgDOTACombatLogEntry::set_networth(::google::protobuf::uint32 value) {
  set_has_networth();
  networth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.networth)
}

// optional uint32 building_type = 53;
bool CMsgDOTACombatLogEntry::has_building_type() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_building_type() {
  _has_bits_[1] |= 0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_has_building_type() {
  _has_bits_[1] &= ~0x00100000u;
}
void CMsgDOTACombatLogEntry::clear_building_type() {
  building_type_ = 0u;
  clear_has_building_type();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::building_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.building_type)
  return building_type_;
}
void CMsgDOTACombatLogEntry::set_building_type(::google::protobuf::uint32 value) {
  set_has_building_type();
  building_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.building_type)
}

// optional float modifier_elapsed_duration = 54;
bool CMsgDOTACombatLogEntry::has_modifier_elapsed_duration() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_elapsed_duration() {
  _has_bits_[1] |= 0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_elapsed_duration() {
  _has_bits_[1] &= ~0x00200000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_elapsed_duration() {
  modifier_elapsed_duration_ = 0;
  clear_has_modifier_elapsed_duration();
}
float CMsgDOTACombatLogEntry::modifier_elapsed_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_elapsed_duration)
  return modifier_elapsed_duration_;
}
void CMsgDOTACombatLogEntry::set_modifier_elapsed_duration(float value) {
  set_has_modifier_elapsed_duration();
  modifier_elapsed_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_elapsed_duration)
}

// optional bool silence_modifier = 55;
bool CMsgDOTACombatLogEntry::has_silence_modifier() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_silence_modifier() {
  _has_bits_[1] |= 0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_has_silence_modifier() {
  _has_bits_[1] &= ~0x00040000u;
}
void CMsgDOTACombatLogEntry::clear_silence_modifier() {
  silence_modifier_ = false;
  clear_has_silence_modifier();
}
bool CMsgDOTACombatLogEntry::silence_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.silence_modifier)
  return silence_modifier_;
}
void CMsgDOTACombatLogEntry::set_silence_modifier(bool value) {
  set_has_silence_modifier();
  silence_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.silence_modifier)
}

// optional bool heal_from_lifesteal = 56;
bool CMsgDOTACombatLogEntry::has_heal_from_lifesteal() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_heal_from_lifesteal() {
  _has_bits_[1] |= 0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_has_heal_from_lifesteal() {
  _has_bits_[1] &= ~0x00080000u;
}
void CMsgDOTACombatLogEntry::clear_heal_from_lifesteal() {
  heal_from_lifesteal_ = false;
  clear_has_heal_from_lifesteal();
}
bool CMsgDOTACombatLogEntry::heal_from_lifesteal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.heal_from_lifesteal)
  return heal_from_lifesteal_;
}
void CMsgDOTACombatLogEntry::set_heal_from_lifesteal(bool value) {
  set_has_heal_from_lifesteal();
  heal_from_lifesteal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.heal_from_lifesteal)
}

// optional bool modifier_purged = 57;
bool CMsgDOTACombatLogEntry::has_modifier_purged() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_purged() {
  _has_bits_[1] |= 0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_purged() {
  _has_bits_[1] &= ~0x00400000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_purged() {
  modifier_purged_ = false;
  clear_has_modifier_purged();
}
bool CMsgDOTACombatLogEntry::modifier_purged() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purged)
  return modifier_purged_;
}
void CMsgDOTACombatLogEntry::set_modifier_purged(bool value) {
  set_has_modifier_purged();
  modifier_purged_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purged)
}

// optional bool spell_evaded = 58;
bool CMsgDOTACombatLogEntry::has_spell_evaded() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_spell_evaded() {
  _has_bits_[1] |= 0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_has_spell_evaded() {
  _has_bits_[1] &= ~0x00800000u;
}
void CMsgDOTACombatLogEntry::clear_spell_evaded() {
  spell_evaded_ = false;
  clear_has_spell_evaded();
}
bool CMsgDOTACombatLogEntry::spell_evaded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.spell_evaded)
  return spell_evaded_;
}
void CMsgDOTACombatLogEntry::set_spell_evaded(bool value) {
  set_has_spell_evaded();
  spell_evaded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.spell_evaded)
}

// optional bool motion_controller_modifier = 59;
bool CMsgDOTACombatLogEntry::has_motion_controller_modifier() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_motion_controller_modifier() {
  _has_bits_[1] |= 0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_has_motion_controller_modifier() {
  _has_bits_[1] &= ~0x01000000u;
}
void CMsgDOTACombatLogEntry::clear_motion_controller_modifier() {
  motion_controller_modifier_ = false;
  clear_has_motion_controller_modifier();
}
bool CMsgDOTACombatLogEntry::motion_controller_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.motion_controller_modifier)
  return motion_controller_modifier_;
}
void CMsgDOTACombatLogEntry::set_motion_controller_modifier(bool value) {
  set_has_motion_controller_modifier();
  motion_controller_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.motion_controller_modifier)
}

// optional bool long_range_kill = 60;
bool CMsgDOTACombatLogEntry::has_long_range_kill() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_long_range_kill() {
  _has_bits_[1] |= 0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_has_long_range_kill() {
  _has_bits_[1] &= ~0x02000000u;
}
void CMsgDOTACombatLogEntry::clear_long_range_kill() {
  long_range_kill_ = false;
  clear_has_long_range_kill();
}
bool CMsgDOTACombatLogEntry::long_range_kill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.long_range_kill)
  return long_range_kill_;
}
void CMsgDOTACombatLogEntry::set_long_range_kill(bool value) {
  set_has_long_range_kill();
  long_range_kill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.long_range_kill)
}

// optional uint32 modifier_purge_ability = 61;
bool CMsgDOTACombatLogEntry::has_modifier_purge_ability() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_purge_ability() {
  _has_bits_[1] |= 0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_purge_ability() {
  _has_bits_[1] &= ~0x04000000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_purge_ability() {
  modifier_purge_ability_ = 0u;
  clear_has_modifier_purge_ability();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_ability)
  return modifier_purge_ability_;
}
void CMsgDOTACombatLogEntry::set_modifier_purge_ability(::google::protobuf::uint32 value) {
  set_has_modifier_purge_ability();
  modifier_purge_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_ability)
}

// optional uint32 modifier_purge_npc = 62;
bool CMsgDOTACombatLogEntry::has_modifier_purge_npc() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_modifier_purge_npc() {
  _has_bits_[1] |= 0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_has_modifier_purge_npc() {
  _has_bits_[1] &= ~0x08000000u;
}
void CMsgDOTACombatLogEntry::clear_modifier_purge_npc() {
  modifier_purge_npc_ = 0u;
  clear_has_modifier_purge_npc();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_npc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_npc)
  return modifier_purge_npc_;
}
void CMsgDOTACombatLogEntry::set_modifier_purge_npc(::google::protobuf::uint32 value) {
  set_has_modifier_purge_npc();
  modifier_purge_npc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_npc)
}

// optional bool root_modifier = 63;
bool CMsgDOTACombatLogEntry::has_root_modifier() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_root_modifier() {
  _has_bits_[1] |= 0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_has_root_modifier() {
  _has_bits_[1] &= ~0x20000000u;
}
void CMsgDOTACombatLogEntry::clear_root_modifier() {
  root_modifier_ = false;
  clear_has_root_modifier();
}
bool CMsgDOTACombatLogEntry::root_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.root_modifier)
  return root_modifier_;
}
void CMsgDOTACombatLogEntry::set_root_modifier(bool value) {
  set_has_root_modifier();
  root_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.root_modifier)
}

// optional uint32 total_unit_death_count = 64;
bool CMsgDOTACombatLogEntry::has_total_unit_death_count() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_total_unit_death_count() {
  _has_bits_[1] |= 0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_has_total_unit_death_count() {
  _has_bits_[1] &= ~0x10000000u;
}
void CMsgDOTACombatLogEntry::clear_total_unit_death_count() {
  total_unit_death_count_ = 0u;
  clear_has_total_unit_death_count();
}
::google::protobuf::uint32 CMsgDOTACombatLogEntry::total_unit_death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.total_unit_death_count)
  return total_unit_death_count_;
}
void CMsgDOTACombatLogEntry::set_total_unit_death_count(::google::protobuf::uint32 value) {
  set_has_total_unit_death_count();
  total_unit_death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.total_unit_death_count)
}

// optional bool aura_modifier = 65;
bool CMsgDOTACombatLogEntry::has_aura_modifier() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_aura_modifier() {
  _has_bits_[1] |= 0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_has_aura_modifier() {
  _has_bits_[1] &= ~0x40000000u;
}
void CMsgDOTACombatLogEntry::clear_aura_modifier() {
  aura_modifier_ = false;
  clear_has_aura_modifier();
}
bool CMsgDOTACombatLogEntry::aura_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.aura_modifier)
  return aura_modifier_;
}
void CMsgDOTACombatLogEntry::set_aura_modifier(bool value) {
  set_has_aura_modifier();
  aura_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.aura_modifier)
}

// optional bool armor_debuff_modifier = 66;
bool CMsgDOTACombatLogEntry::has_armor_debuff_modifier() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_armor_debuff_modifier() {
  _has_bits_[1] |= 0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_has_armor_debuff_modifier() {
  _has_bits_[1] &= ~0x80000000u;
}
void CMsgDOTACombatLogEntry::clear_armor_debuff_modifier() {
  armor_debuff_modifier_ = false;
  clear_has_armor_debuff_modifier();
}
bool CMsgDOTACombatLogEntry::armor_debuff_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.armor_debuff_modifier)
  return armor_debuff_modifier_;
}
void CMsgDOTACombatLogEntry::set_armor_debuff_modifier(bool value) {
  set_has_armor_debuff_modifier();
  armor_debuff_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.armor_debuff_modifier)
}

// optional bool no_physical_damage_modifier = 67;
bool CMsgDOTACombatLogEntry::has_no_physical_damage_modifier() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void CMsgDOTACombatLogEntry::set_has_no_physical_damage_modifier() {
  _has_bits_[2] |= 0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_has_no_physical_damage_modifier() {
  _has_bits_[2] &= ~0x00000001u;
}
void CMsgDOTACombatLogEntry::clear_no_physical_damage_modifier() {
  no_physical_damage_modifier_ = false;
  clear_has_no_physical_damage_modifier();
}
bool CMsgDOTACombatLogEntry::no_physical_damage_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.no_physical_damage_modifier)
  return no_physical_damage_modifier_;
}
void CMsgDOTACombatLogEntry::set_no_physical_damage_modifier(bool value) {
  set_has_no_physical_damage_modifier();
  no_physical_damage_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.no_physical_damage_modifier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Trophy::kTrophyScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}
CMsgDOTAProfileCard_Slot_Trophy::CMsgDOTAProfileCard_Slot_Trophy(const CMsgDOTAProfileCard_Slot_Trophy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trophy_id_, &from.trophy_id_,
    reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_) + sizeof(trophy_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trophy_id_, 0, reinterpret_cast<char*>(&trophy_score_) -
    reinterpret_cast<char*>(&trophy_id_) + sizeof(trophy_score_));
}

CMsgDOTAProfileCard_Slot_Trophy::~CMsgDOTAProfileCard_Slot_Trophy() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Trophy::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Trophy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Trophy::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot_Trophy::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot_Trophy::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Trophy* n = new CMsgDOTAProfileCard_Slot_Trophy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Trophy::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&trophy_id_, 0, reinterpret_cast<char*>(&trophy_score_) -
      reinterpret_cast<char*>(&trophy_id_) + sizeof(trophy_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Trophy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 trophy_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_trophy_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Trophy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trophy_id(), output);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->trophy_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Trophy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 trophy_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trophy_id(), target);
  }

  // optional uint32 trophy_score = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->trophy_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Trophy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 trophy_id = 1;
    if (has_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional uint32 trophy_score = 2;
    if (has_trophy_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Trophy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Trophy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      trophy_score_ = from.trophy_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Trophy::CopyFrom(const CMsgDOTAProfileCard_Slot_Trophy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Trophy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Trophy::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Trophy::Swap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Trophy::InternalSwap(CMsgDOTAProfileCard_Slot_Trophy* other) {
  std::swap(trophy_id_, other->trophy_id_);
  std::swap(trophy_score_, other->trophy_score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Trophy::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Trophy

// optional uint32 trophy_id = 1;
bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
  return trophy_id_;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_id)
}

// optional uint32 trophy_score = 2;
bool CMsgDOTAProfileCard_Slot_Trophy::has_trophy_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_has_trophy_score() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_has_trophy_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Trophy::clear_trophy_score() {
  trophy_score_ = 0u;
  clear_has_trophy_score();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Trophy::trophy_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
  return trophy_score_;
}
void CMsgDOTAProfileCard_Slot_Trophy::set_trophy_score(::google::protobuf::uint32 value) {
  set_has_trophy_score();
  trophy_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Trophy.trophy_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Stat::kStatIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Stat::kStatScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}
CMsgDOTAProfileCard_Slot_Stat::CMsgDOTAProfileCard_Slot_Stat(const CMsgDOTAProfileCard_Slot_Stat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_score_, &from.stat_score_,
    reinterpret_cast<char*>(&stat_id_) -
    reinterpret_cast<char*>(&stat_score_) + sizeof(stat_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}

void CMsgDOTAProfileCard_Slot_Stat::SharedCtor() {
  _cached_size_ = 0;
  stat_score_ = 0u;
  stat_id_ = 1;
}

CMsgDOTAProfileCard_Slot_Stat::~CMsgDOTAProfileCard_Slot_Stat() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Stat::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Stat::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot_Stat::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot_Stat::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Stat* n = new CMsgDOTAProfileCard_Slot_Stat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Stat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  if (_has_bits_[0 / 32] & 3u) {
    stat_score_ = 0u;
    stat_id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAProfileCard_EStatID_IsValid(value)) {
            set_stat_id(static_cast< ::proto::dota::CMsgDOTAProfileCard_EStatID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stat_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stat_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stat_id(), output);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Stat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stat_id(), target);
  }

  // optional uint32 stat_score = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stat_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Stat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat_score = 2;
    if (has_stat_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat_score());
    }

    // optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
    if (has_stat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stat_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Stat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Stat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Stat::MergeFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_score_ = from.stat_score_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_id_ = from.stat_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Stat::CopyFrom(const CMsgDOTAProfileCard_Slot_Stat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Stat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Stat::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Stat::Swap(CMsgDOTAProfileCard_Slot_Stat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Stat::InternalSwap(CMsgDOTAProfileCard_Slot_Stat* other) {
  std::swap(stat_score_, other->stat_score_);
  std::swap(stat_id_, other->stat_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Stat::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Stat

// optional .proto.dota.CMsgDOTAProfileCard.EStatID stat_id = 1 [default = k_eStat_SoloRank];
bool CMsgDOTAProfileCard_Slot_Stat::has_stat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_stat_id() {
  stat_id_ = 1;
  clear_has_stat_id();
}
::proto::dota::CMsgDOTAProfileCard_EStatID CMsgDOTAProfileCard_Slot_Stat::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_id)
  return static_cast< ::proto::dota::CMsgDOTAProfileCard_EStatID >(stat_id_);
}
void CMsgDOTAProfileCard_Slot_Stat::set_stat_id(::proto::dota::CMsgDOTAProfileCard_EStatID value) {
  assert(::proto::dota::CMsgDOTAProfileCard_EStatID_IsValid(value));
  set_has_stat_id();
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_id)
}

// optional uint32 stat_score = 2;
bool CMsgDOTAProfileCard_Slot_Stat::has_stat_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Stat::set_has_stat_score() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_has_stat_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Stat::clear_stat_score() {
  stat_score_ = 0u;
  clear_has_stat_score();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Stat::stat_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_score)
  return stat_score_;
}
void CMsgDOTAProfileCard_Slot_Stat::set_stat_score(::google::protobuf::uint32 value) {
  set_has_stat_score();
  stat_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Stat.stat_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Item::kSerializedItemFieldNumber;
const int CMsgDOTAProfileCard_Slot_Item::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}
CMsgDOTAProfileCard_Slot_Item::CMsgDOTAProfileCard_Slot_Item(const CMsgDOTAProfileCard_Slot_Item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_item()) {
    serialized_item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_item_);
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}

void CMsgDOTAProfileCard_Slot_Item::SharedCtor() {
  _cached_size_ = 0;
  serialized_item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAProfileCard_Slot_Item::~CMsgDOTAProfileCard_Slot_Item() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Item::SharedDtor() {
  serialized_item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAProfileCard_Slot_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Item::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot_Item::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot_Item::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Item* n = new CMsgDOTAProfileCard_Slot_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  if (has_serialized_item()) {
    GOOGLE_DCHECK(!serialized_item_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*serialized_item_.UnsafeRawStringPointer())->clear();
  }
  item_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_item = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_item(), output);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Item)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_item = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_item(), target);
  }

  // optional uint64 item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes serialized_item = 1;
    if (has_serialized_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_item());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Item)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Item::MergeFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serialized_item();
      serialized_item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_item_);
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Item::CopyFrom(const CMsgDOTAProfileCard_Slot_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Item::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Item::Swap(CMsgDOTAProfileCard_Slot_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Item::InternalSwap(CMsgDOTAProfileCard_Slot_Item* other) {
  serialized_item_.Swap(&other->serialized_item_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Item::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Item

// optional bytes serialized_item = 1;
bool CMsgDOTAProfileCard_Slot_Item::has_serialized_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Item::set_has_serialized_item() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_has_serialized_item() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_serialized_item() {
  serialized_item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_item();
}
const ::std::string& CMsgDOTAProfileCard_Slot_Item::serialized_item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.GetNoArena();
}
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const ::std::string& value) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
#if LANG_CXX11
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(::std::string&& value) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
#endif
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
void CMsgDOTAProfileCard_Slot_Item::set_serialized_item(const void* value, size_t size) {
  set_has_serialized_item();
  serialized_item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}
::std::string* CMsgDOTAProfileCard_Slot_Item::mutable_serialized_item() {
  set_has_serialized_item();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  return serialized_item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAProfileCard_Slot_Item::release_serialized_item() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
  clear_has_serialized_item();
  return serialized_item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAProfileCard_Slot_Item::set_allocated_serialized_item(::std::string* serialized_item) {
  if (serialized_item != NULL) {
    set_has_serialized_item();
  } else {
    clear_has_serialized_item();
  }
  serialized_item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_item);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.Item.serialized_item)
}

// optional uint64 item_id = 2;
bool CMsgDOTAProfileCard_Slot_Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Item::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
  clear_has_item_id();
}
::google::protobuf::uint64 CMsgDOTAProfileCard_Slot_Item::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Item.item_id)
  return item_id_;
}
void CMsgDOTAProfileCard_Slot_Item::set_item_id(::google::protobuf::uint64 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Item.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Hero::kHeroIdFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroWinsFieldNumber;
const int CMsgDOTAProfileCard_Slot_Hero::kHeroLossesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}
CMsgDOTAProfileCard_Slot_Hero::CMsgDOTAProfileCard_Slot_Hero(const CMsgDOTAProfileCard_Slot_Hero& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(hero_losses_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}

void CMsgDOTAProfileCard_Slot_Hero::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&hero_losses_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(hero_losses_));
}

CMsgDOTAProfileCard_Slot_Hero::~CMsgDOTAProfileCard_Slot_Hero() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Hero::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Hero::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot_Hero::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot_Hero::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Hero* n = new CMsgDOTAProfileCard_Slot_Hero;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&hero_losses_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(hero_losses_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_wins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_losses = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_losses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_wins(), output);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_losses(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Hero::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 hero_wins = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_wins(), target);
  }

  // optional uint32 hero_losses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_losses(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 hero_wins = 2;
    if (has_hero_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_wins());
    }

    // optional uint32 hero_losses = 3;
    if (has_hero_losses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_losses());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Hero* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Hero>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Hero::MergeFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_wins_ = from.hero_wins_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_losses_ = from.hero_losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Hero::CopyFrom(const CMsgDOTAProfileCard_Slot_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Hero::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Hero::Swap(CMsgDOTAProfileCard_Slot_Hero* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Hero::InternalSwap(CMsgDOTAProfileCard_Slot_Hero* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(hero_wins_, other->hero_wins_);
  std::swap(hero_losses_, other->hero_losses_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Hero::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Hero

// optional uint32 hero_id = 1;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_id)
  return hero_id_;
}
void CMsgDOTAProfileCard_Slot_Hero::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_id)
}

// optional uint32 hero_wins = 2;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_wins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_wins() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_wins() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_wins() {
  hero_wins_ = 0u;
  clear_has_hero_wins();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_wins)
  return hero_wins_;
}
void CMsgDOTAProfileCard_Slot_Hero::set_hero_wins(::google::protobuf::uint32 value) {
  set_has_hero_wins();
  hero_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_wins)
}

// optional uint32 hero_losses = 3;
bool CMsgDOTAProfileCard_Slot_Hero::has_hero_losses() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProfileCard_Slot_Hero::set_has_hero_losses() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_has_hero_losses() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProfileCard_Slot_Hero::clear_hero_losses() {
  hero_losses_ = 0u;
  clear_has_hero_losses();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Hero::hero_losses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_losses)
  return hero_losses_;
}
void CMsgDOTAProfileCard_Slot_Hero::set_hero_losses(::google::protobuf::uint32 value) {
  set_has_hero_losses();
  hero_losses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Hero.hero_losses)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Emoticon::kEmoticonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}
CMsgDOTAProfileCard_Slot_Emoticon::CMsgDOTAProfileCard_Slot_Emoticon(const CMsgDOTAProfileCard_Slot_Emoticon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emoticon_id_ = from.emoticon_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedCtor() {
  _cached_size_ = 0;
  emoticon_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Emoticon::~CMsgDOTAProfileCard_Slot_Emoticon() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Emoticon::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Emoticon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Emoticon::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot_Emoticon::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot_Emoticon::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Emoticon* n = new CMsgDOTAProfileCard_Slot_Emoticon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  emoticon_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Emoticon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 emoticon_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_emoticon_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &emoticon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Emoticon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->emoticon_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Emoticon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 emoticon_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->emoticon_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Emoticon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 emoticon_id = 1;
  if (has_emoticon_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->emoticon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Emoticon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Emoticon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_emoticon_id()) {
    set_emoticon_id(from.emoticon_id());
  }
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Emoticon::CopyFrom(const CMsgDOTAProfileCard_Slot_Emoticon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Emoticon::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Emoticon::Swap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Emoticon::InternalSwap(CMsgDOTAProfileCard_Slot_Emoticon* other) {
  std::swap(emoticon_id_, other->emoticon_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Emoticon::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Emoticon

// optional uint32 emoticon_id = 1;
bool CMsgDOTAProfileCard_Slot_Emoticon::has_emoticon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Emoticon::set_has_emoticon_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Emoticon::clear_has_emoticon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Emoticon::clear_emoticon_id() {
  emoticon_id_ = 0u;
  clear_has_emoticon_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Emoticon::emoticon_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
  return emoticon_id_;
}
void CMsgDOTAProfileCard_Slot_Emoticon::set_emoticon_id(::google::protobuf::uint32 value) {
  set_has_emoticon_id();
  emoticon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Emoticon.emoticon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot_Team::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}
CMsgDOTAProfileCard_Slot_Team::CMsgDOTAProfileCard_Slot_Team(const CMsgDOTAProfileCard_Slot_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}

void CMsgDOTAProfileCard_Slot_Team::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
}

CMsgDOTAProfileCard_Slot_Team::~CMsgDOTAProfileCard_Slot_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot_Team::SharedDtor() {
}

void CMsgDOTAProfileCard_Slot_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot_Team::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot_Team::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot_Team::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot_Team* n = new CMsgDOTAProfileCard_Slot_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot.Team)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  return target;
}

size_t CMsgDOTAProfileCard_Slot_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot_Team::MergeFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot_Team::CopyFrom(const CMsgDOTAProfileCard_Slot_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot_Team::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot_Team::Swap(CMsgDOTAProfileCard_Slot_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot_Team::InternalSwap(CMsgDOTAProfileCard_Slot_Team* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot_Team::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot_Team

// optional uint32 team_id = 1;
bool CMsgDOTAProfileCard_Slot_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot_Team::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.Team.team_id)
  return team_id_;
}
void CMsgDOTAProfileCard_Slot_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.Team.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard_Slot::kSlotIdFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTrophyFieldNumber;
const int CMsgDOTAProfileCard_Slot::kStatFieldNumber;
const int CMsgDOTAProfileCard_Slot::kItemFieldNumber;
const int CMsgDOTAProfileCard_Slot::kHeroFieldNumber;
const int CMsgDOTAProfileCard_Slot::kEmoticonFieldNumber;
const int CMsgDOTAProfileCard_Slot::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard.Slot)
}
CMsgDOTAProfileCard_Slot::CMsgDOTAProfileCard_Slot(const CMsgDOTAProfileCard_Slot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trophy()) {
    trophy_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy(*from.trophy_);
  } else {
    trophy_ = NULL;
  }
  if (from.has_stat()) {
    stat_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Stat(*from.stat_);
  } else {
    stat_ = NULL;
  }
  if (from.has_item()) {
    item_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Item(*from.item_);
  } else {
    item_ = NULL;
  }
  if (from.has_hero()) {
    hero_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Hero(*from.hero_);
  } else {
    hero_ = NULL;
  }
  if (from.has_emoticon()) {
    emoticon_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon(*from.emoticon_);
  } else {
    emoticon_ = NULL;
  }
  if (from.has_team()) {
    team_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Team(*from.team_);
  } else {
    team_ = NULL;
  }
  slot_id_ = from.slot_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard.Slot)
}

void CMsgDOTAProfileCard_Slot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&trophy_, 0, reinterpret_cast<char*>(&slot_id_) -
    reinterpret_cast<char*>(&trophy_) + sizeof(slot_id_));
}

CMsgDOTAProfileCard_Slot::~CMsgDOTAProfileCard_Slot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard.Slot)
  SharedDtor();
}

void CMsgDOTAProfileCard_Slot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete trophy_;
  }
  if (this != internal_default_instance()) {
    delete stat_;
  }
  if (this != internal_default_instance()) {
    delete item_;
  }
  if (this != internal_default_instance()) {
    delete hero_;
  }
  if (this != internal_default_instance()) {
    delete emoticon_;
  }
  if (this != internal_default_instance()) {
    delete team_;
  }
}

void CMsgDOTAProfileCard_Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard_Slot::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard_Slot::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard_Slot::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard_Slot* n = new CMsgDOTAProfileCard_Slot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard_Slot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard.Slot)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_trophy()) {
      GOOGLE_DCHECK(trophy_ != NULL);
      trophy_->::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::Clear();
    }
    if (has_stat()) {
      GOOGLE_DCHECK(stat_ != NULL);
      stat_->::proto::dota::CMsgDOTAProfileCard_Slot_Stat::Clear();
    }
    if (has_item()) {
      GOOGLE_DCHECK(item_ != NULL);
      item_->::proto::dota::CMsgDOTAProfileCard_Slot_Item::Clear();
    }
    if (has_hero()) {
      GOOGLE_DCHECK(hero_ != NULL);
      hero_->::proto::dota::CMsgDOTAProfileCard_Slot_Hero::Clear();
    }
    if (has_emoticon()) {
      GOOGLE_DCHECK(emoticon_ != NULL);
      emoticon_->::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
    }
    if (has_team()) {
      GOOGLE_DCHECK(team_ != NULL);
      team_->::proto::dota::CMsgDOTAProfileCard_Slot_Team::Clear();
    }
  }
  slot_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard_Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard.Slot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trophy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emoticon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard.Slot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard.Slot)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard_Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard.Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot_id(), output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trophy_, output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stat_, output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->item_, output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->hero_, output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->emoticon_, output);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->team_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard.Slot)
}

::google::protobuf::uint8* CMsgDOTAProfileCard_Slot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard.Slot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 slot_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot_id(), target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trophy_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stat_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->item_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->hero_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->emoticon_, deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->team_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard.Slot)
  return target;
}

size_t CMsgDOTAProfileCard_Slot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard.Slot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
    if (has_trophy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trophy_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stat_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->item_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hero_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
    if (has_emoticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->emoticon_);
    }

    // optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->team_);
    }

    // optional uint32 slot_id = 1;
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard_Slot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard_Slot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard.Slot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard.Slot)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard_Slot::MergeFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_trophy()->::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::MergeFrom(from.trophy());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stat()->::proto::dota::CMsgDOTAProfileCard_Slot_Stat::MergeFrom(from.stat());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_item()->::proto::dota::CMsgDOTAProfileCard_Slot_Item::MergeFrom(from.item());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_hero()->::proto::dota::CMsgDOTAProfileCard_Slot_Hero::MergeFrom(from.hero());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_emoticon()->::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::MergeFrom(from.emoticon());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_team()->::proto::dota::CMsgDOTAProfileCard_Slot_Team::MergeFrom(from.team());
    }
    if (cached_has_bits & 0x00000040u) {
      slot_id_ = from.slot_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard_Slot::CopyFrom(const CMsgDOTAProfileCard_Slot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard.Slot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard_Slot::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard_Slot::Swap(CMsgDOTAProfileCard_Slot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard_Slot::InternalSwap(CMsgDOTAProfileCard_Slot* other) {
  std::swap(trophy_, other->trophy_);
  std::swap(stat_, other->stat_);
  std::swap(item_, other->item_);
  std::swap(hero_, other->hero_);
  std::swap(emoticon_, other->emoticon_);
  std::swap(team_, other->team_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard_Slot::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard_Slot

// optional uint32 slot_id = 1;
bool CMsgDOTAProfileCard_Slot::has_slot_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_slot_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAProfileCard_Slot::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAProfileCard_Slot::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard_Slot::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.slot_id)
  return slot_id_;
}
void CMsgDOTAProfileCard_Slot::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.Slot.slot_id)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Trophy trophy = 2;
bool CMsgDOTAProfileCard_Slot::has_trophy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_trophy() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard_Slot::clear_has_trophy() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard_Slot::clear_trophy() {
  if (trophy_ != NULL) trophy_->::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::Clear();
  clear_has_trophy();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy& CMsgDOTAProfileCard_Slot::trophy() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  return trophy_ != NULL ? *trophy_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Trophy::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::mutable_trophy() {
  set_has_trophy();
  if (trophy_ == NULL) {
    trophy_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  return trophy_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* CMsgDOTAProfileCard_Slot::release_trophy() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
  clear_has_trophy();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* temp = trophy_;
  trophy_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_trophy(::proto::dota::CMsgDOTAProfileCard_Slot_Trophy* trophy) {
  delete trophy_;
  trophy_ = trophy;
  if (trophy) {
    set_has_trophy();
  } else {
    clear_has_trophy();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.trophy)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Stat stat = 3;
bool CMsgDOTAProfileCard_Slot::has_stat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_stat() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard_Slot::clear_has_stat() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard_Slot::clear_stat() {
  if (stat_ != NULL) stat_->::proto::dota::CMsgDOTAProfileCard_Slot_Stat::Clear();
  clear_has_stat();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Stat& CMsgDOTAProfileCard_Slot::stat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  return stat_ != NULL ? *stat_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Stat::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::mutable_stat() {
  set_has_stat();
  if (stat_ == NULL) {
    stat_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Stat;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  return stat_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Stat* CMsgDOTAProfileCard_Slot::release_stat() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.stat)
  clear_has_stat();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Stat* temp = stat_;
  stat_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_stat(::proto::dota::CMsgDOTAProfileCard_Slot_Stat* stat) {
  delete stat_;
  stat_ = stat;
  if (stat) {
    set_has_stat();
  } else {
    clear_has_stat();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.stat)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Item item = 4;
bool CMsgDOTAProfileCard_Slot::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProfileCard_Slot::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProfileCard_Slot::clear_item() {
  if (item_ != NULL) item_->::proto::dota::CMsgDOTAProfileCard_Slot_Item::Clear();
  clear_has_item();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Item& CMsgDOTAProfileCard_Slot::item() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.item)
  return item_ != NULL ? *item_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Item::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::mutable_item() {
  set_has_item();
  if (item_ == NULL) {
    item_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Item;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.item)
  return item_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Item* CMsgDOTAProfileCard_Slot::release_item() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.item)
  clear_has_item();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Item* temp = item_;
  item_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_item(::proto::dota::CMsgDOTAProfileCard_Slot_Item* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.item)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Hero hero = 5;
bool CMsgDOTAProfileCard_Slot::has_hero() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_hero() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProfileCard_Slot::clear_has_hero() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProfileCard_Slot::clear_hero() {
  if (hero_ != NULL) hero_->::proto::dota::CMsgDOTAProfileCard_Slot_Hero::Clear();
  clear_has_hero();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Hero& CMsgDOTAProfileCard_Slot::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  return hero_ != NULL ? *hero_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Hero::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::mutable_hero() {
  set_has_hero();
  if (hero_ == NULL) {
    hero_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Hero;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  return hero_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Hero* CMsgDOTAProfileCard_Slot::release_hero() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.hero)
  clear_has_hero();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Hero* temp = hero_;
  hero_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_hero(::proto::dota::CMsgDOTAProfileCard_Slot_Hero* hero) {
  delete hero_;
  hero_ = hero;
  if (hero) {
    set_has_hero();
  } else {
    clear_has_hero();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.hero)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Emoticon emoticon = 6;
bool CMsgDOTAProfileCard_Slot::has_emoticon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_emoticon() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProfileCard_Slot::clear_has_emoticon() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProfileCard_Slot::clear_emoticon() {
  if (emoticon_ != NULL) emoticon_->::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::Clear();
  clear_has_emoticon();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon& CMsgDOTAProfileCard_Slot::emoticon() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_ != NULL ? *emoticon_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::mutable_emoticon() {
  set_has_emoticon();
  if (emoticon_ == NULL) {
    emoticon_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  return emoticon_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* CMsgDOTAProfileCard_Slot::release_emoticon() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
  clear_has_emoticon();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* temp = emoticon_;
  emoticon_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_emoticon(::proto::dota::CMsgDOTAProfileCard_Slot_Emoticon* emoticon) {
  delete emoticon_;
  emoticon_ = emoticon;
  if (emoticon) {
    set_has_emoticon();
  } else {
    clear_has_emoticon();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.emoticon)
}

// optional .proto.dota.CMsgDOTAProfileCard.Slot.Team team = 7;
bool CMsgDOTAProfileCard_Slot::has_team() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAProfileCard_Slot::set_has_team() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAProfileCard_Slot::clear_has_team() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAProfileCard_Slot::clear_team() {
  if (team_ != NULL) team_->::proto::dota::CMsgDOTAProfileCard_Slot_Team::Clear();
  clear_has_team();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot_Team& CMsgDOTAProfileCard_Slot::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.Slot.team)
  return team_ != NULL ? *team_
                         : *::proto::dota::CMsgDOTAProfileCard_Slot_Team::internal_default_instance();
}
::proto::dota::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::mutable_team() {
  set_has_team();
  if (team_ == NULL) {
    team_ = new ::proto::dota::CMsgDOTAProfileCard_Slot_Team;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.Slot.team)
  return team_;
}
::proto::dota::CMsgDOTAProfileCard_Slot_Team* CMsgDOTAProfileCard_Slot::release_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.Slot.team)
  clear_has_team();
  ::proto::dota::CMsgDOTAProfileCard_Slot_Team* temp = team_;
  team_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard_Slot::set_allocated_team(::proto::dota::CMsgDOTAProfileCard_Slot_Team* team) {
  delete team_;
  team_ = team;
  if (team) {
    set_has_team();
  } else {
    clear_has_team();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.Slot.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAProfileCard::kAccountIdFieldNumber;
const int CMsgDOTAProfileCard::kBackgroundDefIndexFieldNumber;
const int CMsgDOTAProfileCard::kSlotsFieldNumber;
const int CMsgDOTAProfileCard::kBadgePointsFieldNumber;
const int CMsgDOTAProfileCard::kEventPointsFieldNumber;
const int CMsgDOTAProfileCard::kEventIdFieldNumber;
const int CMsgDOTAProfileCard::kRecentBattleCupVictoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAProfileCard::CMsgDOTAProfileCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAProfileCard)
}
CMsgDOTAProfileCard::CMsgDOTAProfileCard(const CMsgDOTAProfileCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      slots_(from.slots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_recent_battle_cup_victory()) {
    recent_battle_cup_victory_ = new ::proto::dota::CMsgBattleCupVictory(*from.recent_battle_cup_victory_);
  } else {
    recent_battle_cup_victory_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(event_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAProfileCard)
}

void CMsgDOTAProfileCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&recent_battle_cup_victory_, 0, reinterpret_cast<char*>(&event_id_) -
    reinterpret_cast<char*>(&recent_battle_cup_victory_) + sizeof(event_id_));
}

CMsgDOTAProfileCard::~CMsgDOTAProfileCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAProfileCard)
  SharedDtor();
}

void CMsgDOTAProfileCard::SharedDtor() {
  if (this != internal_default_instance()) {
    delete recent_battle_cup_victory_;
  }
}

void CMsgDOTAProfileCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAProfileCard::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAProfileCard& CMsgDOTAProfileCard::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAProfileCard* CMsgDOTAProfileCard::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAProfileCard* n = new CMsgDOTAProfileCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAProfileCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAProfileCard)
  slots_.Clear();
  if (has_recent_battle_cup_victory()) {
    GOOGLE_DCHECK(recent_battle_cup_victory_ != NULL);
    recent_battle_cup_victory_->::proto::dota::CMsgBattleCupVictory::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&event_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(event_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAProfileCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAProfileCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 background_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_background_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &background_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_points = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_badge_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_event_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recent_battle_cup_victory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAProfileCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAProfileCard)
  return false;
#undef DO_
}

void CMsgDOTAProfileCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 background_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->background_def_index(), output);
  }

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badge_points(), output);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->event_points(), output);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->event_id(), output);
  }

  // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->recent_battle_cup_victory_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAProfileCard)
}

::google::protobuf::uint8* CMsgDOTAProfileCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAProfileCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 background_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->background_def_index(), target);
  }

  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  for (unsigned int i = 0, n = this->slots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->slots(i), deterministic, target);
  }

  // optional uint32 badge_points = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->badge_points(), target);
  }

  // optional uint32 event_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->event_points(), target);
  }

  // optional uint32 event_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->event_id(), target);
  }

  // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->recent_battle_cup_victory_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAProfileCard)
  return target;
}

size_t CMsgDOTAProfileCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAProfileCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
  {
    unsigned int count = this->slots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slots(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
    if (has_recent_battle_cup_victory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->recent_battle_cup_victory_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 background_def_index = 2;
    if (has_background_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->background_def_index());
    }

    // optional uint32 badge_points = 4;
    if (has_badge_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_points());
    }

    // optional uint32 event_points = 5;
    if (has_event_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 event_id = 6;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAProfileCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAProfileCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAProfileCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAProfileCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAProfileCard)
    MergeFrom(*source);
  }
}

void CMsgDOTAProfileCard::MergeFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAProfileCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slots_.MergeFrom(from.slots_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_recent_battle_cup_victory()->::proto::dota::CMsgBattleCupVictory::MergeFrom(from.recent_battle_cup_victory());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      background_def_index_ = from.background_def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      badge_points_ = from.badge_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00000020u) {
      event_id_ = from.event_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAProfileCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAProfileCard::CopyFrom(const CMsgDOTAProfileCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAProfileCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAProfileCard::IsInitialized() const {
  return true;
}

void CMsgDOTAProfileCard::Swap(CMsgDOTAProfileCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAProfileCard::InternalSwap(CMsgDOTAProfileCard* other) {
  slots_.InternalSwap(&other->slots_);
  std::swap(recent_battle_cup_victory_, other->recent_battle_cup_victory_);
  std::swap(account_id_, other->account_id_);
  std::swap(background_def_index_, other->background_def_index_);
  std::swap(badge_points_, other->badge_points_);
  std::swap(event_points_, other->event_points_);
  std::swap(event_id_, other->event_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAProfileCard::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAProfileCard

// optional uint32 account_id = 1;
bool CMsgDOTAProfileCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAProfileCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAProfileCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAProfileCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.account_id)
  return account_id_;
}
void CMsgDOTAProfileCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.account_id)
}

// optional uint32 background_def_index = 2;
bool CMsgDOTAProfileCard::has_background_def_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAProfileCard::set_has_background_def_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAProfileCard::clear_has_background_def_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAProfileCard::clear_background_def_index() {
  background_def_index_ = 0u;
  clear_has_background_def_index();
}
::google::protobuf::uint32 CMsgDOTAProfileCard::background_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.background_def_index)
  return background_def_index_;
}
void CMsgDOTAProfileCard::set_background_def_index(::google::protobuf::uint32 value) {
  set_has_background_def_index();
  background_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.background_def_index)
}

// repeated .proto.dota.CMsgDOTAProfileCard.Slot slots = 3;
int CMsgDOTAProfileCard::slots_size() const {
  return slots_.size();
}
void CMsgDOTAProfileCard::clear_slots() {
  slots_.Clear();
}
const ::proto::dota::CMsgDOTAProfileCard_Slot& CMsgDOTAProfileCard::slots(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Get(index);
}
::proto::dota::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::mutable_slots(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Mutable(index);
}
::proto::dota::CMsgDOTAProfileCard_Slot* CMsgDOTAProfileCard::add_slots() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >*
CMsgDOTAProfileCard::mutable_slots() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAProfileCard.slots)
  return &slots_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAProfileCard_Slot >&
CMsgDOTAProfileCard::slots() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAProfileCard.slots)
  return slots_;
}

// optional uint32 badge_points = 4;
bool CMsgDOTAProfileCard::has_badge_points() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAProfileCard::set_has_badge_points() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAProfileCard::clear_has_badge_points() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAProfileCard::clear_badge_points() {
  badge_points_ = 0u;
  clear_has_badge_points();
}
::google::protobuf::uint32 CMsgDOTAProfileCard::badge_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.badge_points)
  return badge_points_;
}
void CMsgDOTAProfileCard::set_badge_points(::google::protobuf::uint32 value) {
  set_has_badge_points();
  badge_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.badge_points)
}

// optional uint32 event_points = 5;
bool CMsgDOTAProfileCard::has_event_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAProfileCard::set_has_event_points() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAProfileCard::clear_has_event_points() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAProfileCard::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
::google::protobuf::uint32 CMsgDOTAProfileCard::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.event_points)
  return event_points_;
}
void CMsgDOTAProfileCard::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.event_points)
}

// optional uint32 event_id = 6;
bool CMsgDOTAProfileCard::has_event_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAProfileCard::set_has_event_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAProfileCard::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAProfileCard::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgDOTAProfileCard::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.event_id)
  return event_id_;
}
void CMsgDOTAProfileCard::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAProfileCard.event_id)
}

// optional .proto.dota.CMsgBattleCupVictory recent_battle_cup_victory = 7;
bool CMsgDOTAProfileCard::has_recent_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAProfileCard::set_has_recent_battle_cup_victory() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAProfileCard::clear_has_recent_battle_cup_victory() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAProfileCard::clear_recent_battle_cup_victory() {
  if (recent_battle_cup_victory_ != NULL) recent_battle_cup_victory_->::proto::dota::CMsgBattleCupVictory::Clear();
  clear_has_recent_battle_cup_victory();
}
const ::proto::dota::CMsgBattleCupVictory& CMsgDOTAProfileCard::recent_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  return recent_battle_cup_victory_ != NULL ? *recent_battle_cup_victory_
                         : *::proto::dota::CMsgBattleCupVictory::internal_default_instance();
}
::proto::dota::CMsgBattleCupVictory* CMsgDOTAProfileCard::mutable_recent_battle_cup_victory() {
  set_has_recent_battle_cup_victory();
  if (recent_battle_cup_victory_ == NULL) {
    recent_battle_cup_victory_ = new ::proto::dota::CMsgBattleCupVictory;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  return recent_battle_cup_victory_;
}
::proto::dota::CMsgBattleCupVictory* CMsgDOTAProfileCard::release_recent_battle_cup_victory() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
  clear_has_recent_battle_cup_victory();
  ::proto::dota::CMsgBattleCupVictory* temp = recent_battle_cup_victory_;
  recent_battle_cup_victory_ = NULL;
  return temp;
}
void CMsgDOTAProfileCard::set_allocated_recent_battle_cup_victory(::proto::dota::CMsgBattleCupVictory* recent_battle_cup_victory) {
  delete recent_battle_cup_victory_;
  recent_battle_cup_victory_ = recent_battle_cup_victory;
  if (recent_battle_cup_victory) {
    set_has_recent_battle_cup_victory();
  } else {
    clear_has_recent_battle_cup_victory();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAProfileCard.recent_battle_cup_victory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPlayerChallenge::kAccountIdFieldNumber;
const int CSODOTAPlayerChallenge::kEventIdFieldNumber;
const int CSODOTAPlayerChallenge::kSlotIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTypeFieldNumber;
const int CSODOTAPlayerChallenge::kIntParam0FieldNumber;
const int CSODOTAPlayerChallenge::kIntParam1FieldNumber;
const int CSODOTAPlayerChallenge::kCreatedTimeFieldNumber;
const int CSODOTAPlayerChallenge::kCompletedFieldNumber;
const int CSODOTAPlayerChallenge::kSequenceIdFieldNumber;
const int CSODOTAPlayerChallenge::kChallengeTierFieldNumber;
const int CSODOTAPlayerChallenge::kFlagsFieldNumber;
const int CSODOTAPlayerChallenge::kAttemptsFieldNumber;
const int CSODOTAPlayerChallenge::kCompleteLimitFieldNumber;
const int CSODOTAPlayerChallenge::kQuestRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPlayerChallenge::CSODOTAPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPlayerChallenge)
}
CSODOTAPlayerChallenge::CSODOTAPlayerChallenge(const CSODOTAPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&quest_rank_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(quest_rank_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPlayerChallenge)
}

void CSODOTAPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&quest_rank_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(quest_rank_));
}

CSODOTAPlayerChallenge::~CSODOTAPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPlayerChallenge)
  SharedDtor();
}

void CSODOTAPlayerChallenge::SharedDtor() {
}

void CSODOTAPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPlayerChallenge::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAPlayerChallenge& CSODOTAPlayerChallenge::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAPlayerChallenge* CSODOTAPlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CSODOTAPlayerChallenge* n = new CSODOTAPlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPlayerChallenge)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&completed_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(completed_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&sequence_id_, 0, reinterpret_cast<char*>(&quest_rank_) -
      reinterpret_cast<char*>(&sequence_id_) + sizeof(quest_rank_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_slot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_challenge_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_param_0 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_int_param_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_param_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_int_param_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_param_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 created_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_created_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &created_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 completed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 challenge_tier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_challenge_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempts = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_attempts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 complete_limit = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_complete_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &complete_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quest_rank = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_quest_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPlayerChallenge)
  return false;
#undef DO_
}

void CSODOTAPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot_id(), output);
  }

  // optional uint32 challenge_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_type(), output);
  }

  // optional uint32 int_param_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->int_param_0(), output);
  }

  // optional uint32 int_param_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->int_param_1(), output);
  }

  // optional uint32 created_time = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->created_time(), output);
  }

  // optional uint32 completed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->completed(), output);
  }

  // optional uint32 sequence_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->sequence_id(), output);
  }

  // optional uint32 challenge_tier = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_tier(), output);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->flags(), output);
  }

  // optional uint32 attempts = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->attempts(), output);
  }

  // optional uint32 complete_limit = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->complete_limit(), output);
  }

  // optional uint32 quest_rank = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->quest_rank(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPlayerChallenge)
}

::google::protobuf::uint8* CSODOTAPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot_id(), target);
  }

  // optional uint32 challenge_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_type(), target);
  }

  // optional uint32 int_param_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->int_param_0(), target);
  }

  // optional uint32 int_param_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->int_param_1(), target);
  }

  // optional uint32 created_time = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->created_time(), target);
  }

  // optional uint32 completed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->completed(), target);
  }

  // optional uint32 sequence_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->sequence_id(), target);
  }

  // optional uint32 challenge_tier = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_tier(), target);
  }

  // optional uint32 flags = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->flags(), target);
  }

  // optional uint32 attempts = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->attempts(), target);
  }

  // optional uint32 complete_limit = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->complete_limit(), target);
  }

  // optional uint32 quest_rank = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->quest_rank(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPlayerChallenge)
  return target;
}

size_t CSODOTAPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
    if (has_slot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot_id());
    }

    // optional uint32 challenge_type = 4;
    if (has_challenge_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_type());
    }

    // optional uint32 int_param_0 = 5;
    if (has_int_param_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_0());
    }

    // optional uint32 int_param_1 = 6;
    if (has_int_param_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_param_1());
    }

    // optional uint32 created_time = 7;
    if (has_created_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->created_time());
    }

    // optional uint32 completed = 8;
    if (has_completed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->completed());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 sequence_id = 9;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

    // optional uint32 challenge_tier = 10;
    if (has_challenge_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challenge_tier());
    }

    // optional uint32 flags = 11;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 attempts = 12;
    if (has_attempts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempts());
    }

    // optional uint32 complete_limit = 13;
    if (has_complete_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->complete_limit());
    }

    // optional uint32 quest_rank = 14;
    if (has_quest_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quest_rank());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPlayerChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPlayerChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPlayerChallenge)
    MergeFrom(*source);
  }
}

void CSODOTAPlayerChallenge::MergeFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_id_ = from.slot_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      challenge_type_ = from.challenge_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      int_param_0_ = from.int_param_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      int_param_1_ = from.int_param_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      created_time_ = from.created_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      completed_ = from.completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      sequence_id_ = from.sequence_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      challenge_tier_ = from.challenge_tier_;
    }
    if (cached_has_bits & 0x00000400u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000800u) {
      attempts_ = from.attempts_;
    }
    if (cached_has_bits & 0x00001000u) {
      complete_limit_ = from.complete_limit_;
    }
    if (cached_has_bits & 0x00002000u) {
      quest_rank_ = from.quest_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPlayerChallenge::CopyFrom(const CSODOTAPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPlayerChallenge::IsInitialized() const {
  return true;
}

void CSODOTAPlayerChallenge::Swap(CSODOTAPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPlayerChallenge::InternalSwap(CSODOTAPlayerChallenge* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(slot_id_, other->slot_id_);
  std::swap(challenge_type_, other->challenge_type_);
  std::swap(int_param_0_, other->int_param_0_);
  std::swap(int_param_1_, other->int_param_1_);
  std::swap(created_time_, other->created_time_);
  std::swap(completed_, other->completed_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(challenge_tier_, other->challenge_tier_);
  std::swap(flags_, other->flags_);
  std::swap(attempts_, other->attempts_);
  std::swap(complete_limit_, other->complete_limit_);
  std::swap(quest_rank_, other->quest_rank_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPlayerChallenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPlayerChallenge

// optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTAPlayerChallenge::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPlayerChallenge::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPlayerChallenge::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPlayerChallenge::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.account_id)
  return account_id_;
}
void CSODOTAPlayerChallenge::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.account_id)
}

// optional uint32 event_id = 2 [(.proto.dota.key_field) = true];
bool CSODOTAPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.event_id)
  return event_id_;
}
void CSODOTAPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.event_id)
}

// optional uint32 slot_id = 3 [(.proto.dota.key_field) = true];
bool CSODOTAPlayerChallenge::has_slot_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPlayerChallenge::set_has_slot_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPlayerChallenge::clear_has_slot_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPlayerChallenge::clear_slot_id() {
  slot_id_ = 0u;
  clear_has_slot_id();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::slot_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.slot_id)
  return slot_id_;
}
void CSODOTAPlayerChallenge::set_slot_id(::google::protobuf::uint32 value) {
  set_has_slot_id();
  slot_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.slot_id)
}

// optional uint32 challenge_type = 4;
bool CSODOTAPlayerChallenge::has_challenge_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAPlayerChallenge::set_has_challenge_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAPlayerChallenge::clear_has_challenge_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAPlayerChallenge::clear_challenge_type() {
  challenge_type_ = 0u;
  clear_has_challenge_type();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.challenge_type)
  return challenge_type_;
}
void CSODOTAPlayerChallenge::set_challenge_type(::google::protobuf::uint32 value) {
  set_has_challenge_type();
  challenge_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.challenge_type)
}

// optional uint32 int_param_0 = 5;
bool CSODOTAPlayerChallenge::has_int_param_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAPlayerChallenge::set_has_int_param_0() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAPlayerChallenge::clear_has_int_param_0() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAPlayerChallenge::clear_int_param_0() {
  int_param_0_ = 0u;
  clear_has_int_param_0();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.int_param_0)
  return int_param_0_;
}
void CSODOTAPlayerChallenge::set_int_param_0(::google::protobuf::uint32 value) {
  set_has_int_param_0();
  int_param_0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.int_param_0)
}

// optional uint32 int_param_1 = 6;
bool CSODOTAPlayerChallenge::has_int_param_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAPlayerChallenge::set_has_int_param_1() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAPlayerChallenge::clear_has_int_param_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAPlayerChallenge::clear_int_param_1() {
  int_param_1_ = 0u;
  clear_has_int_param_1();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::int_param_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.int_param_1)
  return int_param_1_;
}
void CSODOTAPlayerChallenge::set_int_param_1(::google::protobuf::uint32 value) {
  set_has_int_param_1();
  int_param_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.int_param_1)
}

// optional uint32 created_time = 7;
bool CSODOTAPlayerChallenge::has_created_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAPlayerChallenge::set_has_created_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAPlayerChallenge::clear_has_created_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAPlayerChallenge::clear_created_time() {
  created_time_ = 0u;
  clear_has_created_time();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::created_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.created_time)
  return created_time_;
}
void CSODOTAPlayerChallenge::set_created_time(::google::protobuf::uint32 value) {
  set_has_created_time();
  created_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.created_time)
}

// optional uint32 completed = 8;
bool CSODOTAPlayerChallenge::has_completed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAPlayerChallenge::set_has_completed() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAPlayerChallenge::clear_has_completed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAPlayerChallenge::clear_completed() {
  completed_ = 0u;
  clear_has_completed();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.completed)
  return completed_;
}
void CSODOTAPlayerChallenge::set_completed(::google::protobuf::uint32 value) {
  set_has_completed();
  completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.completed)
}

// optional uint32 sequence_id = 9;
bool CSODOTAPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.sequence_id)
  return sequence_id_;
}
void CSODOTAPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.sequence_id)
}

// optional uint32 challenge_tier = 10;
bool CSODOTAPlayerChallenge::has_challenge_tier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAPlayerChallenge::set_has_challenge_tier() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAPlayerChallenge::clear_has_challenge_tier() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAPlayerChallenge::clear_challenge_tier() {
  challenge_tier_ = 0u;
  clear_has_challenge_tier();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::challenge_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.challenge_tier)
  return challenge_tier_;
}
void CSODOTAPlayerChallenge::set_challenge_tier(::google::protobuf::uint32 value) {
  set_has_challenge_tier();
  challenge_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.challenge_tier)
}

// optional uint32 flags = 11;
bool CSODOTAPlayerChallenge::has_flags() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAPlayerChallenge::set_has_flags() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAPlayerChallenge::clear_has_flags() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAPlayerChallenge::clear_flags() {
  flags_ = 0u;
  clear_has_flags();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.flags)
  return flags_;
}
void CSODOTAPlayerChallenge::set_flags(::google::protobuf::uint32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.flags)
}

// optional uint32 attempts = 12;
bool CSODOTAPlayerChallenge::has_attempts() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTAPlayerChallenge::set_has_attempts() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTAPlayerChallenge::clear_has_attempts() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTAPlayerChallenge::clear_attempts() {
  attempts_ = 0u;
  clear_has_attempts();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::attempts() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.attempts)
  return attempts_;
}
void CSODOTAPlayerChallenge::set_attempts(::google::protobuf::uint32 value) {
  set_has_attempts();
  attempts_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.attempts)
}

// optional uint32 complete_limit = 13;
bool CSODOTAPlayerChallenge::has_complete_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTAPlayerChallenge::set_has_complete_limit() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTAPlayerChallenge::clear_has_complete_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTAPlayerChallenge::clear_complete_limit() {
  complete_limit_ = 0u;
  clear_has_complete_limit();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::complete_limit() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.complete_limit)
  return complete_limit_;
}
void CSODOTAPlayerChallenge::set_complete_limit(::google::protobuf::uint32 value) {
  set_has_complete_limit();
  complete_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.complete_limit)
}

// optional uint32 quest_rank = 14;
bool CSODOTAPlayerChallenge::has_quest_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTAPlayerChallenge::set_has_quest_rank() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTAPlayerChallenge::clear_has_quest_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTAPlayerChallenge::clear_quest_rank() {
  quest_rank_ = 0u;
  clear_has_quest_rank();
}
::google::protobuf::uint32 CSODOTAPlayerChallenge::quest_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPlayerChallenge.quest_rank)
  return quest_rank_;
}
void CSODOTAPlayerChallenge::set_quest_rank(::google::protobuf::uint32 value) {
  set_has_quest_rank();
  quest_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPlayerChallenge.quest_rank)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRerollPlayerChallenge::kEventIdFieldNumber;
const int CMsgClientToGCRerollPlayerChallenge::kSequenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}
CMsgClientToGCRerollPlayerChallenge::CMsgClientToGCRerollPlayerChallenge(const CMsgClientToGCRerollPlayerChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_id_, &from.event_id_,
    reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}

void CMsgClientToGCRerollPlayerChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
    reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
}

CMsgClientToGCRerollPlayerChallenge::~CMsgClientToGCRerollPlayerChallenge() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  SharedDtor();
}

void CMsgClientToGCRerollPlayerChallenge::SharedDtor() {
}

void CMsgClientToGCRerollPlayerChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRerollPlayerChallenge::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCRerollPlayerChallenge& CMsgClientToGCRerollPlayerChallenge::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCRerollPlayerChallenge* CMsgClientToGCRerollPlayerChallenge::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCRerollPlayerChallenge* n = new CMsgClientToGCRerollPlayerChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCRerollPlayerChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&event_id_, 0, reinterpret_cast<char*>(&sequence_id_) -
      reinterpret_cast<char*>(&event_id_) + sizeof(sequence_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCRerollPlayerChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sequence_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sequence_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return false;
#undef DO_
}

void CMsgClientToGCRerollPlayerChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sequence_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRerollPlayerChallenge)
}

::google::protobuf::uint8* CMsgClientToGCRerollPlayerChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 sequence_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sequence_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  return target;
}

size_t CMsgClientToGCRerollPlayerChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 sequence_id = 3;
    if (has_sequence_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRerollPlayerChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCRerollPlayerChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRerollPlayerChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRerollPlayerChallenge)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRerollPlayerChallenge::MergeFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_id_ = from.sequence_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRerollPlayerChallenge::CopyFrom(const CMsgClientToGCRerollPlayerChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRerollPlayerChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRerollPlayerChallenge::IsInitialized() const {
  return true;
}

void CMsgClientToGCRerollPlayerChallenge::Swap(CMsgClientToGCRerollPlayerChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRerollPlayerChallenge::InternalSwap(CMsgClientToGCRerollPlayerChallenge* other) {
  std::swap(event_id_, other->event_id_);
  std::swap(sequence_id_, other->sequence_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCRerollPlayerChallenge::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCRerollPlayerChallenge

// optional uint32 event_id = 1;
bool CMsgClientToGCRerollPlayerChallenge::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCRerollPlayerChallenge::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRerollPlayerChallenge.event_id)
  return event_id_;
}
void CMsgClientToGCRerollPlayerChallenge::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRerollPlayerChallenge.event_id)
}

// optional uint32 sequence_id = 3;
bool CMsgClientToGCRerollPlayerChallenge::has_sequence_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCRerollPlayerChallenge::set_has_sequence_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_has_sequence_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCRerollPlayerChallenge::clear_sequence_id() {
  sequence_id_ = 0u;
  clear_has_sequence_id();
}
::google::protobuf::uint32 CMsgClientToGCRerollPlayerChallenge::sequence_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRerollPlayerChallenge.sequence_id)
  return sequence_id_;
}
void CMsgClientToGCRerollPlayerChallenge::set_sequence_id(::google::protobuf::uint32 value) {
  set_has_sequence_id();
  sequence_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRerollPlayerChallenge.sequence_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCRerollPlayerChallengeResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}
CMsgGCRerollPlayerChallengeResponse::CMsgGCRerollPlayerChallengeResponse(const CMsgGCRerollPlayerChallengeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}

void CMsgGCRerollPlayerChallengeResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgGCRerollPlayerChallengeResponse::~CMsgGCRerollPlayerChallengeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  SharedDtor();
}

void CMsgGCRerollPlayerChallengeResponse::SharedDtor() {
}

void CMsgGCRerollPlayerChallengeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCRerollPlayerChallengeResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCRerollPlayerChallengeResponse& CMsgGCRerollPlayerChallengeResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCRerollPlayerChallengeResponse* CMsgGCRerollPlayerChallengeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCRerollPlayerChallengeResponse* n = new CMsgGCRerollPlayerChallengeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCRerollPlayerChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCRerollPlayerChallengeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return false;
#undef DO_
}

void CMsgGCRerollPlayerChallengeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCRerollPlayerChallengeResponse)
}

::google::protobuf::uint8* CMsgGCRerollPlayerChallengeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  return target;
}

size_t CMsgGCRerollPlayerChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCRerollPlayerChallengeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCRerollPlayerChallengeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCRerollPlayerChallengeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCRerollPlayerChallengeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCRerollPlayerChallengeResponse::MergeFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCRerollPlayerChallengeResponse::CopyFrom(const CMsgGCRerollPlayerChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCRerollPlayerChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRerollPlayerChallengeResponse::IsInitialized() const {
  return true;
}

void CMsgGCRerollPlayerChallengeResponse::Swap(CMsgGCRerollPlayerChallengeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCRerollPlayerChallengeResponse::InternalSwap(CMsgGCRerollPlayerChallengeResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCRerollPlayerChallengeResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCRerollPlayerChallengeResponse

// optional .proto.dota.CMsgGCRerollPlayerChallengeResponse.EResult result = 1 [default = eResult_Success];
bool CMsgGCRerollPlayerChallengeResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCRerollPlayerChallengeResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCRerollPlayerChallengeResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCRerollPlayerChallengeResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult CMsgGCRerollPlayerChallengeResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCRerollPlayerChallengeResponse.result)
  return static_cast< ::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult >(result_);
}
void CMsgGCRerollPlayerChallengeResponse::set_result(::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult value) {
  assert(::proto::dota::CMsgGCRerollPlayerChallengeResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCRerollPlayerChallengeResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCTopCustomGamesList::kTopCustomGamesFieldNumber;
const int CMsgGCTopCustomGamesList::kGameOfTheDayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCTopCustomGamesList)
}
CMsgGCTopCustomGamesList::CMsgGCTopCustomGamesList(const CMsgGCTopCustomGamesList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      top_custom_games_(from.top_custom_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_of_the_day_ = from.game_of_the_day_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCTopCustomGamesList)
}

void CMsgGCTopCustomGamesList::SharedCtor() {
  _cached_size_ = 0;
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
}

CMsgGCTopCustomGamesList::~CMsgGCTopCustomGamesList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCTopCustomGamesList)
  SharedDtor();
}

void CMsgGCTopCustomGamesList::SharedDtor() {
}

void CMsgGCTopCustomGamesList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCTopCustomGamesList::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCTopCustomGamesList& CMsgGCTopCustomGamesList::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCTopCustomGamesList* CMsgGCTopCustomGamesList::New(::google::protobuf::Arena* arena) const {
  CMsgGCTopCustomGamesList* n = new CMsgGCTopCustomGamesList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCTopCustomGamesList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCTopCustomGamesList)
  top_custom_games_.Clear();
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCTopCustomGamesList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCTopCustomGamesList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 top_custom_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_top_custom_games())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_top_custom_games())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 game_of_the_day = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_of_the_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &game_of_the_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCTopCustomGamesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCTopCustomGamesList)
  return false;
#undef DO_
}

void CMsgGCTopCustomGamesList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCTopCustomGamesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  for (int i = 0, n = this->top_custom_games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->top_custom_games(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_of_the_day = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->game_of_the_day(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCTopCustomGamesList)
}

::google::protobuf::uint8* CMsgGCTopCustomGamesList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCTopCustomGamesList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 top_custom_games = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->top_custom_games_, target);

  cached_has_bits = _has_bits_[0];
  // optional uint64 game_of_the_day = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->game_of_the_day(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCTopCustomGamesList)
  return target;
}

size_t CMsgGCTopCustomGamesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCTopCustomGamesList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 top_custom_games = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->top_custom_games_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->top_custom_games_size());
    total_size += data_size;
  }

  // optional uint64 game_of_the_day = 2;
  if (has_game_of_the_day()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->game_of_the_day());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCTopCustomGamesList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCTopCustomGamesList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCTopCustomGamesList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCTopCustomGamesList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCTopCustomGamesList)
    MergeFrom(*source);
  }
}

void CMsgGCTopCustomGamesList::MergeFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCTopCustomGamesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  top_custom_games_.MergeFrom(from.top_custom_games_);
  if (from.has_game_of_the_day()) {
    set_game_of_the_day(from.game_of_the_day());
  }
}

void CMsgGCTopCustomGamesList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCTopCustomGamesList::CopyFrom(const CMsgGCTopCustomGamesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCTopCustomGamesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCTopCustomGamesList::IsInitialized() const {
  return true;
}

void CMsgGCTopCustomGamesList::Swap(CMsgGCTopCustomGamesList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCTopCustomGamesList::InternalSwap(CMsgGCTopCustomGamesList* other) {
  top_custom_games_.InternalSwap(&other->top_custom_games_);
  std::swap(game_of_the_day_, other->game_of_the_day_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCTopCustomGamesList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCTopCustomGamesList

// repeated uint64 top_custom_games = 1;
int CMsgGCTopCustomGamesList::top_custom_games_size() const {
  return top_custom_games_.size();
}
void CMsgGCTopCustomGamesList::clear_top_custom_games() {
  top_custom_games_.Clear();
}
::google::protobuf::uint64 CMsgGCTopCustomGamesList::top_custom_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_.Get(index);
}
void CMsgGCTopCustomGamesList::set_top_custom_games(int index, ::google::protobuf::uint64 value) {
  top_custom_games_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
}
void CMsgGCTopCustomGamesList::add_top_custom_games(::google::protobuf::uint64 value) {
  top_custom_games_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgGCTopCustomGamesList::top_custom_games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return top_custom_games_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgGCTopCustomGamesList::mutable_top_custom_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCTopCustomGamesList.top_custom_games)
  return &top_custom_games_;
}

// optional uint64 game_of_the_day = 2;
bool CMsgGCTopCustomGamesList::has_game_of_the_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCTopCustomGamesList::set_has_game_of_the_day() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCTopCustomGamesList::clear_has_game_of_the_day() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCTopCustomGamesList::clear_game_of_the_day() {
  game_of_the_day_ = GOOGLE_ULONGLONG(0);
  clear_has_game_of_the_day();
}
::google::protobuf::uint64 CMsgGCTopCustomGamesList::game_of_the_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCTopCustomGamesList.game_of_the_day)
  return game_of_the_day_;
}
void CMsgGCTopCustomGamesList::set_game_of_the_day(::google::protobuf::uint64 value) {
  set_has_game_of_the_day();
  game_of_the_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCTopCustomGamesList.game_of_the_day)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kPlayersFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kOnlyTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_TeamDetails::kCheersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}
CMsgDOTARealtimeGameStats_TeamDetails::CMsgDOTARealtimeGameStats_TeamDetails(const CMsgDOTARealtimeGameStats_TeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_number_, &from.team_number_,
    reinterpret_cast<char*>(&cheers_) -
    reinterpret_cast<char*>(&team_number_) + sizeof(cheers_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_number_, 0, reinterpret_cast<char*>(&cheers_) -
    reinterpret_cast<char*>(&team_number_) + sizeof(cheers_));
}

CMsgDOTARealtimeGameStats_TeamDetails::~CMsgDOTARealtimeGameStats_TeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_TeamDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats_TeamDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats_TeamDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_TeamDetails* n = new CMsgDOTARealtimeGameStats_TeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  players_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&team_number_, 0, reinterpret_cast<char*>(&cheers_) -
      reinterpret_cast<char*>(&team_number_) + sizeof(cheers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool only_team = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_only_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheers = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_cheers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional bool only_team = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->only_team(), output);
  }

  // optional uint32 cheers = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->cheers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_TeamDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->players(i), deterministic, target);
  }

  // optional bool only_team = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->only_team(), target);
  }

  // optional uint32 cheers = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->cheers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool only_team = 7;
    if (has_only_team()) {
      total_size += 1 + 1;
    }

    // optional uint32 cheers = 8;
    if (has_cheers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_TeamDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_TeamDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000020u) {
      only_team_ = from.only_team_;
    }
    if (cached_has_bits & 0x00000040u) {
      cheers_ = from.cheers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStats_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_TeamDetails::Swap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStats_TeamDetails* other) {
  players_.InternalSwap(&other->players_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_number_, other->team_number_);
  std::swap(team_id_, other->team_id_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(score_, other->score_);
  std::swap(only_team_, other->only_team_);
  std::swap(cheers_, other->cheers_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_TeamDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_TeamDetails

// optional uint32 team_number = 1;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_number)
  return team_number_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_id)
  return team_id_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_id)
}

// optional string team_name = 3;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTARealtimeGameStats_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
#endif
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}
::std::string* CMsgDOTARealtimeGameStats_TeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStats_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStats_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
  return team_logo_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.team_logo)
}

// optional uint32 score = 5;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.score)
  return score_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.score)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails players = 6;
int CMsgDOTARealtimeGameStats_TeamDetails::players_size() const {
  return players_.size();
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >*
CMsgDOTARealtimeGameStats_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PlayerDetails >&
CMsgDOTARealtimeGameStats_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.players)
  return players_;
}

// optional bool only_team = 7;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_only_team() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_only_team() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_only_team() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_only_team() {
  only_team_ = false;
  clear_has_only_team();
}
bool CMsgDOTARealtimeGameStats_TeamDetails::only_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.only_team)
  return only_team_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_only_team(bool value) {
  set_has_only_team();
  only_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.only_team)
}

// optional uint32 cheers = 8;
bool CMsgDOTARealtimeGameStats_TeamDetails::has_cheers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_has_cheers() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_has_cheers() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_TeamDetails::clear_cheers() {
  cheers_ = 0u;
  clear_has_cheers();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_TeamDetails::cheers() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.cheers)
  return cheers_;
}
void CMsgDOTARealtimeGameStats_TeamDetails::set_cheers(::google::protobuf::uint32 value) {
  set_has_cheers();
  cheers_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.TeamDetails.cheers)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_ItemDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kSoldFieldNumber;
const int CMsgDOTARealtimeGameStats_ItemDetails::kStackcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}
CMsgDOTARealtimeGameStats_ItemDetails::CMsgDOTARealtimeGameStats_ItemDetails(const CMsgDOTARealtimeGameStats_ItemDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&stackcount_) -
    reinterpret_cast<char*>(&id_) + sizeof(stackcount_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&stackcount_) -
    reinterpret_cast<char*>(&id_) + sizeof(stackcount_));
}

CMsgDOTARealtimeGameStats_ItemDetails::~CMsgDOTARealtimeGameStats_ItemDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_ItemDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_ItemDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_ItemDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_ItemDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_ItemDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_ItemDetails* n = new CMsgDOTARealtimeGameStats_ItemDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&stackcount_) -
      reinterpret_cast<char*>(&id_) + sizeof(stackcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_ItemDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sold = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stackcount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_stackcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stackcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_ItemDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional bool sold = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sold(), output);
  }

  // optional uint32 stackcount = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stackcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_ItemDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional bool sold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sold(), target);
  }

  // optional uint32 stackcount = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stackcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_ItemDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional bool sold = 4;
    if (has_sold()) {
      total_size += 1 + 1;
    }

    // optional uint32 stackcount = 5;
    if (has_stackcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stackcount());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_ItemDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_ItemDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::MergeFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sold_ = from.sold_;
    }
    if (cached_has_bits & 0x00000010u) {
      stackcount_ = from.stackcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_ItemDetails::CopyFrom(const CMsgDOTARealtimeGameStats_ItemDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_ItemDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_ItemDetails::Swap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_ItemDetails::InternalSwap(CMsgDOTARealtimeGameStats_ItemDetails* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(time_, other->time_);
  std::swap(sold_, other->sold_);
  std::swap(stackcount_, other->stackcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_ItemDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_ItemDetails

// optional uint32 id = 1;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.id)
  return id_;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.id)
}

// optional string name = 2;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTARealtimeGameStats_ItemDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.GetNoArena();
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStats_ItemDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
#endif
void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}
::std::string* CMsgDOTARealtimeGameStats_ItemDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStats_ItemDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.name)
}

// optional int32 time = 3;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_time() {
  time_ = 0;
  clear_has_time();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_ItemDetails::time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.time)
  return time_;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.time)
}

// optional bool sold = 4;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_sold() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_sold() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_sold() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_sold() {
  sold_ = false;
  clear_has_sold();
}
bool CMsgDOTARealtimeGameStats_ItemDetails::sold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.sold)
  return sold_;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_sold(bool value) {
  set_has_sold();
  sold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.sold)
}

// optional uint32 stackcount = 5;
bool CMsgDOTARealtimeGameStats_ItemDetails::has_stackcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_has_stackcount() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_has_stackcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_ItemDetails::clear_stackcount() {
  stackcount_ = 0u;
  clear_has_stackcount();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_ItemDetails::stackcount() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
  return stackcount_;
}
void CMsgDOTARealtimeGameStats_ItemDetails::set_stackcount(::google::protobuf::uint32 value) {
  set_has_stackcount();
  stackcount_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.ItemDetails.stackcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_AbilityDetails::kIdFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_AbilityDetails::kCooldownMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}
CMsgDOTARealtimeGameStats_AbilityDetails::CMsgDOTARealtimeGameStats_AbilityDetails(const CMsgDOTARealtimeGameStats_AbilityDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&cooldown_max_) -
    reinterpret_cast<char*>(&id_) + sizeof(cooldown_max_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&cooldown_max_) -
    reinterpret_cast<char*>(&id_) + sizeof(cooldown_max_));
}

CMsgDOTARealtimeGameStats_AbilityDetails::~CMsgDOTARealtimeGameStats_AbilityDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_AbilityDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_AbilityDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_AbilityDetails* n = new CMsgDOTARealtimeGameStats_AbilityDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&cooldown_max_) -
      reinterpret_cast<char*>(&id_) + sizeof(cooldown_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_cooldown_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional float cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->cooldown(), output);
  }

  // optional float cooldown_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cooldown_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional float cooldown = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->cooldown(), target);
  }

  // optional float cooldown_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cooldown_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional float cooldown = 4;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }

    // optional float cooldown_max = 5;
    if (has_cooldown_max()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_AbilityDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000008u) {
      cooldown_ = from.cooldown_;
    }
    if (cached_has_bits & 0x00000010u) {
      cooldown_max_ = from.cooldown_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityDetails::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityDetails::Swap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityDetails::InternalSwap(CMsgDOTARealtimeGameStats_AbilityDetails* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(level_, other->level_);
  std::swap(cooldown_, other->cooldown_);
  std::swap(cooldown_max_, other->cooldown_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_AbilityDetails

// optional uint32 id = 1;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.id)
  return id_;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.id)
}

// optional string name = 2;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTARealtimeGameStats_AbilityDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.GetNoArena();
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
#endif
void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}
::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStats_AbilityDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.name)
}

// optional uint32 level = 3;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.level)
  return level_;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.level)
}

// optional float cooldown = 4;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown() {
  cooldown_ = 0;
  clear_has_cooldown();
}
float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
  return cooldown_;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown(float value) {
  set_has_cooldown();
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown)
}

// optional float cooldown_max = 5;
bool CMsgDOTARealtimeGameStats_AbilityDetails::has_cooldown_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_has_cooldown_max() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_has_cooldown_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::clear_cooldown_max() {
  cooldown_max_ = 0;
  clear_has_cooldown_max();
}
float CMsgDOTARealtimeGameStats_AbilityDetails::cooldown_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
  return cooldown_max_;
}
void CMsgDOTARealtimeGameStats_AbilityDetails::set_cooldown_max(float value) {
  set_has_cooldown_max();
  cooldown_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails.cooldown_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kVictimidFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_HeroToHeroStats::kAssistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}
CMsgDOTARealtimeGameStats_HeroToHeroStats::CMsgDOTARealtimeGameStats_HeroToHeroStats(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&victimid_, &from.victimid_,
    reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&victimid_) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&victimid_, 0, reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&victimid_) + sizeof(assists_));
}

CMsgDOTARealtimeGameStats_HeroToHeroStats::~CMsgDOTARealtimeGameStats_HeroToHeroStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_HeroToHeroStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_HeroToHeroStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_HeroToHeroStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_HeroToHeroStats* n = new CMsgDOTARealtimeGameStats_HeroToHeroStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&victimid_, 0, reinterpret_cast<char*>(&assists_) -
      reinterpret_cast<char*>(&victimid_) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victimid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_victimid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victimid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victimid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victimid(), output);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kills(), output);
  }

  // optional uint32 assists = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victimid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victimid(), target);
  }

  // optional uint32 kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kills(), target);
  }

  // optional uint32 assists = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_HeroToHeroStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 victimid = 1;
    if (has_victimid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victimid());
    }

    // optional uint32 kills = 2;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 assists = 3;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_HeroToHeroStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_HeroToHeroStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::MergeFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      victimid_ = from.victimid_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::CopyFrom(const CMsgDOTARealtimeGameStats_HeroToHeroStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_HeroToHeroStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_HeroToHeroStats::Swap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::InternalSwap(CMsgDOTARealtimeGameStats_HeroToHeroStats* other) {
  std::swap(victimid_, other->victimid_);
  std::swap(kills_, other->kills_);
  std::swap(assists_, other->assists_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_HeroToHeroStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_HeroToHeroStats

// optional uint32 victimid = 1;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_victimid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_victimid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_victimid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_victimid() {
  victimid_ = 0u;
  clear_has_victimid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::victimid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
  return victimid_;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_victimid(::google::protobuf::uint32 value) {
  set_has_victimid();
  victimid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.victimid)
}

// optional uint32 kills = 2;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
  return kills_;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.kills)
}

// optional uint32 assists = 3;
bool CMsgDOTARealtimeGameStats_HeroToHeroStats::has_assists() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_has_assists() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_has_assists() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_HeroToHeroStats::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
  return assists_;
}
void CMsgDOTARealtimeGameStats_HeroToHeroStats::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats.assists)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_AbilityList::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}
CMsgDOTARealtimeGameStats_AbilityList::CMsgDOTARealtimeGameStats_AbilityList(const CMsgDOTARealtimeGameStats_AbilityList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      id_(from.id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStats_AbilityList::~CMsgDOTARealtimeGameStats_AbilityList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_AbilityList::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_AbilityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_AbilityList::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_AbilityList::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_AbilityList::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_AbilityList* n = new CMsgDOTARealtimeGameStats_AbilityList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_AbilityList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  id_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_AbilityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_AbilityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  for (int i = 0, n = this->id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_AbilityList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->id_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  return target;
}

size_t CMsgDOTARealtimeGameStats_AbilityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->id_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_AbilityList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_AbilityList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_AbilityList::MergeFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  id_.MergeFrom(from.id_);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_AbilityList::CopyFrom(const CMsgDOTARealtimeGameStats_AbilityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.AbilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_AbilityList::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_AbilityList::Swap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_AbilityList::InternalSwap(CMsgDOTARealtimeGameStats_AbilityList* other) {
  id_.InternalSwap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_AbilityList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_AbilityList

// repeated uint32 id = 1;
int CMsgDOTARealtimeGameStats_AbilityList::id_size() const {
  return id_.size();
}
void CMsgDOTARealtimeGameStats_AbilityList::clear_id() {
  id_.Clear();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_AbilityList::id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_.Get(index);
}
void CMsgDOTARealtimeGameStats_AbilityList::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
}
void CMsgDOTARealtimeGameStats_AbilityList::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStats_AbilityList::id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStats_AbilityList::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.AbilityList.id)
  return &id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxhealthpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHealthregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMaxmanapointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kManaregenrateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kBaseDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStrengthFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAgilityFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kIntelligenceFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kArmorFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kMovespeedFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kTowerDamageFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAbilitiesFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroHealingFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXpPerMinFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kNetGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kRespawnTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kUltimateCooldownFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasBuybackFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kStashitemsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kItemshoppinglistFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kLevelpointsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHeroToHeroStatsFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateFieldNumber;
const int CMsgDOTARealtimeGameStats_PlayerDetails::kHasUltimateManaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}
CMsgDOTARealtimeGameStats_PlayerDetails::CMsgDOTARealtimeGameStats_PlayerDetails(const CMsgDOTARealtimeGameStats_PlayerDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      abilities_(from.abilities_),
      items_(from.items_),
      stashitems_(from.stashitems_),
      itemshoppinglist_(from.itemshoppinglist_),
      levelpoints_(from.levelpoints_),
      hero_to_hero_stats_(from.hero_to_hero_stats_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&has_ultimate_mana_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(has_ultimate_mana_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&has_ultimate_mana_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(has_ultimate_mana_));
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStats_PlayerDetails::~CMsgDOTARealtimeGameStats_PlayerDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PlayerDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_PlayerDetails& CMsgDOTARealtimeGameStats_PlayerDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_PlayerDetails* CMsgDOTARealtimeGameStats_PlayerDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_PlayerDetails* n = new CMsgDOTARealtimeGameStats_PlayerDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  abilities_.Clear();
  items_.Clear();
  stashitems_.Clear();
  itemshoppinglist_.Clear();
  levelpoints_.Clear();
  hero_to_hero_stats_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&healthregenrate_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(healthregenrate_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&manapoints_, 0, reinterpret_cast<char*>(&base_movespeed_) -
      reinterpret_cast<char*>(&manapoints_) + sizeof(base_movespeed_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&base_damage_, 0, reinterpret_cast<char*>(&hero_damage_) -
      reinterpret_cast<char*>(&base_damage_) + sizeof(hero_damage_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&tower_damage_, 0, reinterpret_cast<char*>(&hero_healing_) -
      reinterpret_cast<char*>(&tower_damage_) + sizeof(hero_healing_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&gold_per_min_, 0, reinterpret_cast<char*>(&ultimate_cooldown_) -
      reinterpret_cast<char*>(&gold_per_min_) + sizeof(ultimate_cooldown_));
  }
  if (_has_bits_[40 / 32] & 1792u) {
    ::memset(&has_buyback_, 0, reinterpret_cast<char*>(&has_ultimate_mana_) -
      reinterpret_cast<char*>(&has_buyback_) + sizeof(has_ultimate_mana_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_heroid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 healthpoints = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_healthpoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxhealthpoints = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_maxhealthpoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhealthpoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float healthregenrate = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_healthregenrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &healthregenrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 manapoints = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_manapoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manapoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 maxmanapoints = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_maxmanapoints();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxmanapoints_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float manaregenrate = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_manaregenrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &manaregenrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_strength = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_base_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_agility = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_base_agility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_agility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_intelligence = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_base_intelligence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_intelligence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 base_armor = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_base_armor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_movespeed = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_base_movespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_damage = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_base_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 strength = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 agility = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_agility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intelligence = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_intelligence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 armor = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_armor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 movespeed = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_movespeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 damage = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_kill_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 death_count = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_death_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists_count = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_assists_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies_count = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_denies_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lh_count = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_lh_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_hero_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_gold_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_per_min = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_xp_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_gold = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_net_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(309u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(317u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 respawn_time = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_respawn_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respawn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ultimate_cooldown = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_ultimate_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ultimate_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_buyback = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_has_buyback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_buyback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(346u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(354u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stashitems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemshoppinglist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(370u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelpoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_to_hero_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ultimate = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_has_ultimate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_ultimate_mana = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_has_ultimate_mana();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ultimate_mana_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 healthpoints = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->healthpoints(), output);
  }

  // optional uint32 maxhealthpoints = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxhealthpoints(), output);
  }

  // optional float healthregenrate = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->healthregenrate(), output);
  }

  // optional uint32 manapoints = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->manapoints(), output);
  }

  // optional uint32 maxmanapoints = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->maxmanapoints(), output);
  }

  // optional float manaregenrate = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->manaregenrate(), output);
  }

  // optional uint32 base_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->base_strength(), output);
  }

  // optional uint32 base_agility = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->base_agility(), output);
  }

  // optional uint32 base_intelligence = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->base_intelligence(), output);
  }

  // optional int32 base_armor = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->base_armor(), output);
  }

  // optional uint32 base_movespeed = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->base_movespeed(), output);
  }

  // optional uint32 base_damage = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->base_damage(), output);
  }

  // optional uint32 strength = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->strength(), output);
  }

  // optional uint32 agility = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->agility(), output);
  }

  // optional uint32 intelligence = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->intelligence(), output);
  }

  // optional int32 armor = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->armor(), output);
  }

  // optional uint32 movespeed = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->movespeed(), output);
  }

  // optional uint32 damage = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->damage(), output);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->abilities(i), output);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 kill_count = 28;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->kill_count(), output);
  }

  // optional uint32 death_count = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->death_count(), output);
  }

  // optional uint32 assists_count = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->assists_count(), output);
  }

  // optional uint32 denies_count = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->denies_count(), output);
  }

  // optional uint32 lh_count = 32;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lh_count(), output);
  }

  // optional uint32 hero_healing = 33;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->hero_healing(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 gold_per_min = 34;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->gold_per_min(), output);
  }

  // optional uint32 xp_per_min = 35;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->xp_per_min(), output);
  }

  // optional uint32 net_gold = 36;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->net_gold(), output);
  }

  // optional uint32 gold = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->gold(), output);
  }

  // optional float x = 38;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->x(), output);
  }

  // optional float y = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->y(), output);
  }

  // optional int32 respawn_time = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->respawn_time(), output);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->ultimate_cooldown(), output);
  }

  // optional bool has_buyback = 42;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(42, this->has_buyback(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->items(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0, n = this->stashitems_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->stashitems(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0, n = this->itemshoppinglist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->itemshoppinglist(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0, n = this->levelpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->levelpoints(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0, n = this->hero_to_hero_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->hero_to_hero_stats(i), output);
  }

  // optional bool has_ultimate = 48;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->has_ultimate(), output);
  }

  // optional bool has_ultimate_mana = 49;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->has_ultimate_mana(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PlayerDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 healthpoints = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->healthpoints(), target);
  }

  // optional uint32 maxhealthpoints = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxhealthpoints(), target);
  }

  // optional float healthregenrate = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->healthregenrate(), target);
  }

  // optional uint32 manapoints = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->manapoints(), target);
  }

  // optional uint32 maxmanapoints = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->maxmanapoints(), target);
  }

  // optional float manaregenrate = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->manaregenrate(), target);
  }

  // optional uint32 base_strength = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->base_strength(), target);
  }

  // optional uint32 base_agility = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->base_agility(), target);
  }

  // optional uint32 base_intelligence = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->base_intelligence(), target);
  }

  // optional int32 base_armor = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->base_armor(), target);
  }

  // optional uint32 base_movespeed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->base_movespeed(), target);
  }

  // optional uint32 base_damage = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->base_damage(), target);
  }

  // optional uint32 strength = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->strength(), target);
  }

  // optional uint32 agility = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->agility(), target);
  }

  // optional uint32 intelligence = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->intelligence(), target);
  }

  // optional int32 armor = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->armor(), target);
  }

  // optional uint32 movespeed = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->movespeed(), target);
  }

  // optional uint32 damage = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->damage(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->abilities(i), deterministic, target);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 kill_count = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->kill_count(), target);
  }

  // optional uint32 death_count = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->death_count(), target);
  }

  // optional uint32 assists_count = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->assists_count(), target);
  }

  // optional uint32 denies_count = 31;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->denies_count(), target);
  }

  // optional uint32 lh_count = 32;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lh_count(), target);
  }

  // optional uint32 hero_healing = 33;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->hero_healing(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 gold_per_min = 34;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->gold_per_min(), target);
  }

  // optional uint32 xp_per_min = 35;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->xp_per_min(), target);
  }

  // optional uint32 net_gold = 36;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->net_gold(), target);
  }

  // optional uint32 gold = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->gold(), target);
  }

  // optional float x = 38;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->x(), target);
  }

  // optional float y = 39;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->y(), target);
  }

  // optional int32 respawn_time = 40;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->respawn_time(), target);
  }

  // optional uint32 ultimate_cooldown = 41;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->ultimate_cooldown(), target);
  }

  // optional bool has_buyback = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(42, this->has_buyback(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, this->items(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  for (unsigned int i = 0, n = this->stashitems_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        44, this->stashitems(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  for (unsigned int i = 0, n = this->itemshoppinglist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, this->itemshoppinglist(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  for (unsigned int i = 0, n = this->levelpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        46, this->levelpoints(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  for (unsigned int i = 0, n = this->hero_to_hero_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, this->hero_to_hero_stats(i), deterministic, target);
  }

  // optional bool has_ultimate = 48;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->has_ultimate(), target);
  }

  // optional bool has_ultimate_mana = 49;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->has_ultimate_mana(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
  {
    unsigned int count = this->abilities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abilities(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
  {
    unsigned int count = this->items_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
  {
    unsigned int count = this->stashitems_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stashitems(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
  {
    unsigned int count = this->itemshoppinglist_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemshoppinglist(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
  {
    unsigned int count = this->levelpoints_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->levelpoints(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
  {
    unsigned int count = this->hero_to_hero_stats_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_to_hero_stats(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 healthpoints = 6;
    if (has_healthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthpoints());
    }

    // optional uint32 maxhealthpoints = 7;
    if (has_maxhealthpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhealthpoints());
    }

    // optional float healthregenrate = 8;
    if (has_healthregenrate()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 manapoints = 9;
    if (has_manapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manapoints());
    }

    // optional uint32 maxmanapoints = 10;
    if (has_maxmanapoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxmanapoints());
    }

    // optional float manaregenrate = 11;
    if (has_manaregenrate()) {
      total_size += 1 + 4;
    }

    // optional uint32 base_strength = 12;
    if (has_base_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_strength());
    }

    // optional uint32 base_agility = 13;
    if (has_base_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_agility());
    }

    // optional uint32 base_intelligence = 14;
    if (has_base_intelligence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_intelligence());
    }

    // optional int32 base_armor = 15;
    if (has_base_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_armor());
    }

    // optional uint32 base_movespeed = 16;
    if (has_base_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_movespeed());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 base_damage = 17;
    if (has_base_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage());
    }

    // optional uint32 strength = 18;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 agility = 19;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 intelligence = 20;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional int32 armor = 21;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }

    // optional uint32 movespeed = 22;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // optional uint32 damage = 23;
    if (has_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 hero_damage = 24;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 tower_damage = 25;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 level = 27;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 28;
    if (has_kill_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 29;
    if (has_death_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

    // optional uint32 assists_count = 30;
    if (has_assists_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 31;
    if (has_denies_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 32;
    if (has_lh_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 hero_healing = 33;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 gold_per_min = 34;
    if (has_gold_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 xp_per_min = 35;
    if (has_xp_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

    // optional uint32 net_gold = 36;
    if (has_net_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_gold());
    }

    // optional uint32 gold = 37;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 38;
    if (has_x()) {
      total_size += 2 + 4;
    }

    // optional float y = 39;
    if (has_y()) {
      total_size += 2 + 4;
    }

    // optional int32 respawn_time = 40;
    if (has_respawn_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->respawn_time());
    }

    // optional uint32 ultimate_cooldown = 41;
    if (has_ultimate_cooldown()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ultimate_cooldown());
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional bool has_buyback = 42;
    if (has_has_buyback()) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate = 48;
    if (has_has_ultimate()) {
      total_size += 2 + 1;
    }

    // optional bool has_ultimate_mana = 49;
    if (has_has_ultimate_mana()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PlayerDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_PlayerDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  stashitems_.MergeFrom(from.stashitems_);
  itemshoppinglist_.MergeFrom(from.itemshoppinglist_);
  levelpoints_.MergeFrom(from.levelpoints_);
  hero_to_hero_stats_.MergeFrom(from.hero_to_hero_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      healthpoints_ = from.healthpoints_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxhealthpoints_ = from.maxhealthpoints_;
    }
    if (cached_has_bits & 0x00000080u) {
      healthregenrate_ = from.healthregenrate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      manapoints_ = from.manapoints_;
    }
    if (cached_has_bits & 0x00000200u) {
      maxmanapoints_ = from.maxmanapoints_;
    }
    if (cached_has_bits & 0x00000400u) {
      manaregenrate_ = from.manaregenrate_;
    }
    if (cached_has_bits & 0x00000800u) {
      base_strength_ = from.base_strength_;
    }
    if (cached_has_bits & 0x00001000u) {
      base_agility_ = from.base_agility_;
    }
    if (cached_has_bits & 0x00002000u) {
      base_intelligence_ = from.base_intelligence_;
    }
    if (cached_has_bits & 0x00004000u) {
      base_armor_ = from.base_armor_;
    }
    if (cached_has_bits & 0x00008000u) {
      base_movespeed_ = from.base_movespeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      base_damage_ = from.base_damage_;
    }
    if (cached_has_bits & 0x00020000u) {
      strength_ = from.strength_;
    }
    if (cached_has_bits & 0x00040000u) {
      agility_ = from.agility_;
    }
    if (cached_has_bits & 0x00080000u) {
      intelligence_ = from.intelligence_;
    }
    if (cached_has_bits & 0x00100000u) {
      armor_ = from.armor_;
    }
    if (cached_has_bits & 0x00200000u) {
      movespeed_ = from.movespeed_;
    }
    if (cached_has_bits & 0x00400000u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00800000u) {
      hero_damage_ = from.hero_damage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x04000000u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x08000000u) {
      death_count_ = from.death_count_;
    }
    if (cached_has_bits & 0x10000000u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x20000000u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x40000000u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x80000000u) {
      hero_healing_ = from.hero_healing_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_per_min_ = from.xp_per_min_;
    }
    if (cached_has_bits & 0x00000004u) {
      net_gold_ = from.net_gold_;
    }
    if (cached_has_bits & 0x00000008u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      ultimate_cooldown_ = from.ultimate_cooldown_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      has_buyback_ = from.has_buyback_;
    }
    if (cached_has_bits & 0x00000200u) {
      has_ultimate_ = from.has_ultimate_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_ultimate_mana_ = from.has_ultimate_mana_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PlayerDetails::Swap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStats_PlayerDetails* other) {
  abilities_.InternalSwap(&other->abilities_);
  items_.InternalSwap(&other->items_);
  stashitems_.InternalSwap(&other->stashitems_);
  itemshoppinglist_.InternalSwap(&other->itemshoppinglist_);
  levelpoints_.InternalSwap(&other->levelpoints_);
  hero_to_hero_stats_.InternalSwap(&other->hero_to_hero_stats_);
  name_.Swap(&other->name_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(team_, other->team_);
  std::swap(heroid_, other->heroid_);
  std::swap(healthpoints_, other->healthpoints_);
  std::swap(maxhealthpoints_, other->maxhealthpoints_);
  std::swap(healthregenrate_, other->healthregenrate_);
  std::swap(manapoints_, other->manapoints_);
  std::swap(maxmanapoints_, other->maxmanapoints_);
  std::swap(manaregenrate_, other->manaregenrate_);
  std::swap(base_strength_, other->base_strength_);
  std::swap(base_agility_, other->base_agility_);
  std::swap(base_intelligence_, other->base_intelligence_);
  std::swap(base_armor_, other->base_armor_);
  std::swap(base_movespeed_, other->base_movespeed_);
  std::swap(base_damage_, other->base_damage_);
  std::swap(strength_, other->strength_);
  std::swap(agility_, other->agility_);
  std::swap(intelligence_, other->intelligence_);
  std::swap(armor_, other->armor_);
  std::swap(movespeed_, other->movespeed_);
  std::swap(damage_, other->damage_);
  std::swap(hero_damage_, other->hero_damage_);
  std::swap(tower_damage_, other->tower_damage_);
  std::swap(level_, other->level_);
  std::swap(kill_count_, other->kill_count_);
  std::swap(death_count_, other->death_count_);
  std::swap(assists_count_, other->assists_count_);
  std::swap(denies_count_, other->denies_count_);
  std::swap(lh_count_, other->lh_count_);
  std::swap(hero_healing_, other->hero_healing_);
  std::swap(gold_per_min_, other->gold_per_min_);
  std::swap(xp_per_min_, other->xp_per_min_);
  std::swap(net_gold_, other->net_gold_);
  std::swap(gold_, other->gold_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(respawn_time_, other->respawn_time_);
  std::swap(ultimate_cooldown_, other->ultimate_cooldown_);
  std::swap(has_buyback_, other->has_buyback_);
  std::swap(has_ultimate_, other->has_ultimate_);
  std::swap(has_ultimate_mana_, other->has_ultimate_mana_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PlayerDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_PlayerDetails

// optional uint32 accountid = 1;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
  return accountid_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
  return playerid_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.playerid)
}

// optional string name = 3;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTARealtimeGameStats_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.GetNoArena();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
#endif
void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}
::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStats_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.name)
}

// optional uint32 team = 4;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.team)
  return team_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.team)
}

// optional uint32 heroid = 5;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
  return heroid_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.heroid)
}

// optional uint32 healthpoints = 6;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthpoints() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthpoints() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthpoints() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthpoints() {
  healthpoints_ = 0u;
  clear_has_healthpoints();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::healthpoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
  return healthpoints_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthpoints(::google::protobuf::uint32 value) {
  set_has_healthpoints();
  healthpoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthpoints)
}

// optional uint32 maxhealthpoints = 7;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxhealthpoints() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxhealthpoints() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxhealthpoints() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxhealthpoints() {
  maxhealthpoints_ = 0u;
  clear_has_maxhealthpoints();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxhealthpoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
  return maxhealthpoints_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxhealthpoints(::google::protobuf::uint32 value) {
  set_has_maxhealthpoints();
  maxhealthpoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxhealthpoints)
}

// optional float healthregenrate = 8;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_healthregenrate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_healthregenrate() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_healthregenrate() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_healthregenrate() {
  healthregenrate_ = 0;
  clear_has_healthregenrate();
}
float CMsgDOTARealtimeGameStats_PlayerDetails::healthregenrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
  return healthregenrate_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_healthregenrate(float value) {
  set_has_healthregenrate();
  healthregenrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.healthregenrate)
}

// optional uint32 manapoints = 9;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manapoints() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manapoints() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manapoints() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manapoints() {
  manapoints_ = 0u;
  clear_has_manapoints();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::manapoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
  return manapoints_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_manapoints(::google::protobuf::uint32 value) {
  set_has_manapoints();
  manapoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manapoints)
}

// optional uint32 maxmanapoints = 10;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_maxmanapoints() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_maxmanapoints() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_maxmanapoints() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_maxmanapoints() {
  maxmanapoints_ = 0u;
  clear_has_maxmanapoints();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::maxmanapoints() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
  return maxmanapoints_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_maxmanapoints(::google::protobuf::uint32 value) {
  set_has_maxmanapoints();
  maxmanapoints_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.maxmanapoints)
}

// optional float manaregenrate = 11;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_manaregenrate() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_manaregenrate() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_manaregenrate() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_manaregenrate() {
  manaregenrate_ = 0;
  clear_has_manaregenrate();
}
float CMsgDOTARealtimeGameStats_PlayerDetails::manaregenrate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
  return manaregenrate_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_manaregenrate(float value) {
  set_has_manaregenrate();
  manaregenrate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.manaregenrate)
}

// optional uint32 base_strength = 12;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_strength() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_strength() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_strength() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_strength() {
  base_strength_ = 0u;
  clear_has_base_strength();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
  return base_strength_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_strength(::google::protobuf::uint32 value) {
  set_has_base_strength();
  base_strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_strength)
}

// optional uint32 base_agility = 13;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_agility() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_agility() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_agility() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_agility() {
  base_agility_ = 0u;
  clear_has_base_agility();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
  return base_agility_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_agility(::google::protobuf::uint32 value) {
  set_has_base_agility();
  base_agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_agility)
}

// optional uint32 base_intelligence = 14;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_intelligence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_intelligence() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_intelligence() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_intelligence() {
  base_intelligence_ = 0u;
  clear_has_base_intelligence();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
  return base_intelligence_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_intelligence(::google::protobuf::uint32 value) {
  set_has_base_intelligence();
  base_intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_intelligence)
}

// optional int32 base_armor = 15;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_armor() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_armor() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_armor() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_armor() {
  base_armor_ = 0;
  clear_has_base_armor();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::base_armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
  return base_armor_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_armor(::google::protobuf::int32 value) {
  set_has_base_armor();
  base_armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_armor)
}

// optional uint32 base_movespeed = 16;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_movespeed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_movespeed() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_movespeed() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_movespeed() {
  base_movespeed_ = 0u;
  clear_has_base_movespeed();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
  return base_movespeed_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_movespeed(::google::protobuf::uint32 value) {
  set_has_base_movespeed();
  base_movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_movespeed)
}

// optional uint32 base_damage = 17;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_base_damage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_base_damage() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::base_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
  return base_damage_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.base_damage)
}

// optional uint32 strength = 18;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_strength() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_strength() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_strength() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.strength)
  return strength_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.strength)
}

// optional uint32 agility = 19;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_agility() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_agility() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_agility() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.agility)
  return agility_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.agility)
}

// optional uint32 intelligence = 20;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_intelligence() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_intelligence() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_intelligence() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
  return intelligence_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.intelligence)
}

// optional int32 armor = 21;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_armor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_armor() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_armor() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.armor)
  return armor_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_armor(::google::protobuf::int32 value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.armor)
}

// optional uint32 movespeed = 22;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_movespeed() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_movespeed() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_movespeed() {
  movespeed_ = 0u;
  clear_has_movespeed();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::movespeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
  return movespeed_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_movespeed(::google::protobuf::uint32 value) {
  set_has_movespeed();
  movespeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.movespeed)
}

// optional uint32 damage = 23;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_damage() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.damage)
  return damage_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.damage)
}

// optional uint32 hero_damage = 24;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_damage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_damage() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
  return hero_damage_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_damage)
}

// optional uint32 tower_damage = 25;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_tower_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_tower_damage() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
  return tower_damage_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.tower_damage)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityDetails abilities = 26;
int CMsgDOTARealtimeGameStats_PlayerDetails::abilities_size() const {
  return abilities_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_abilities() {
  abilities_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails& CMsgDOTARealtimeGameStats_PlayerDetails::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.abilities)
  return abilities_;
}

// optional uint32 level = 27;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.level)
  return level_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.level)
}

// optional uint32 kill_count = 28;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
  return kill_count_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.kill_count)
}

// optional uint32 death_count = 29;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
  return death_count_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.death_count)
}

// optional uint32 assists_count = 30;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
  return assists_count_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 31;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
  return denies_count_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 32;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
  return lh_count_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.lh_count)
}

// optional uint32 hero_healing = 33;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_hero_healing() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_hero_healing() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
  return hero_healing_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_healing)
}

// optional uint32 gold_per_min = 34;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold_per_min() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold_per_min() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold_per_min() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
  return gold_per_min_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold_per_min)
}

// optional uint32 xp_per_min = 35;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_xp_per_min() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_xp_per_min() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_xp_per_min() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::xp_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
  return xp_per_min_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.xp_per_min)
}

// optional uint32 net_gold = 36;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_net_gold() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_net_gold() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_net_gold() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_net_gold() {
  net_gold_ = 0u;
  clear_has_net_gold();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::net_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
  return net_gold_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_net_gold(::google::protobuf::uint32 value) {
  set_has_net_gold();
  net_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.net_gold)
}

// optional uint32 gold = 37;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_gold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_gold() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_gold() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold)
  return gold_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.gold)
}

// optional float x = 38;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_x() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_x() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_x() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgDOTARealtimeGameStats_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.x)
  return x_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.x)
}

// optional float y = 39;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_y() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_y() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_y() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgDOTARealtimeGameStats_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.y)
  return y_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.y)
}

// optional int32 respawn_time = 40;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_respawn_time() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_respawn_time() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_PlayerDetails::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
  return respawn_time_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_respawn_time(::google::protobuf::int32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.respawn_time)
}

// optional uint32 ultimate_cooldown = 41;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_cooldown() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_cooldown() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_cooldown() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_ultimate_cooldown() {
  ultimate_cooldown_ = 0u;
  clear_has_ultimate_cooldown();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PlayerDetails::ultimate_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
  return ultimate_cooldown_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_ultimate_cooldown(::google::protobuf::uint32 value) {
  set_has_ultimate_cooldown();
  ultimate_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.ultimate_cooldown)
}

// optional bool has_buyback = 42;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_buyback() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_buyback() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_buyback() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_buyback() {
  has_buyback_ = false;
  clear_has_has_buyback();
}
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_buyback() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
  return has_buyback_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_buyback(bool value) {
  set_has_has_buyback();
  has_buyback_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_buyback)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails items = 43;
int CMsgDOTARealtimeGameStats_PlayerDetails::items_size() const {
  return items_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_items() {
  items_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.items)
  return items_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails stashitems = 44;
int CMsgDOTARealtimeGameStats_PlayerDetails::stashitems_size() const {
  return stashitems_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_stashitems() {
  stashitems_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::stashitems(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_stashitems() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_stashitems() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return &stashitems_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::stashitems() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.stashitems)
  return stashitems_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.ItemDetails itemshoppinglist = 45;
int CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist_size() const {
  return itemshoppinglist_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_itemshoppinglist() {
  itemshoppinglist_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails& CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails* CMsgDOTARealtimeGameStats_PlayerDetails::add_itemshoppinglist() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_itemshoppinglist() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return &itemshoppinglist_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_ItemDetails >&
CMsgDOTARealtimeGameStats_PlayerDetails::itemshoppinglist() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.itemshoppinglist)
  return itemshoppinglist_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.AbilityList levelpoints = 46;
int CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints_size() const {
  return levelpoints_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_levelpoints() {
  levelpoints_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList& CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_AbilityList* CMsgDOTARealtimeGameStats_PlayerDetails::add_levelpoints() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_levelpoints() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return &levelpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_AbilityList >&
CMsgDOTARealtimeGameStats_PlayerDetails::levelpoints() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.levelpoints)
  return levelpoints_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.HeroToHeroStats hero_to_hero_stats = 47;
int CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats_size() const {
  return hero_to_hero_stats_.size();
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_hero_to_hero_stats() {
  hero_to_hero_stats_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats& CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats* CMsgDOTARealtimeGameStats_PlayerDetails::add_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >*
CMsgDOTARealtimeGameStats_PlayerDetails::mutable_hero_to_hero_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return &hero_to_hero_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_HeroToHeroStats >&
CMsgDOTARealtimeGameStats_PlayerDetails::hero_to_hero_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.hero_to_hero_stats)
  return hero_to_hero_stats_;
}

// optional bool has_ultimate = 48;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate() {
  has_ultimate_ = false;
  clear_has_has_ultimate();
}
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
  return has_ultimate_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate(bool value) {
  set_has_has_ultimate();
  has_ultimate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate)
}

// optional bool has_ultimate_mana = 49;
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_has_ultimate_mana() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_has_ultimate_mana() {
  _has_bits_[1] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_has_ultimate_mana() {
  _has_bits_[1] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::clear_has_ultimate_mana() {
  has_ultimate_mana_ = false;
  clear_has_has_ultimate_mana();
}
bool CMsgDOTARealtimeGameStats_PlayerDetails::has_ultimate_mana() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
  return has_ultimate_mana_;
}
void CMsgDOTARealtimeGameStats_PlayerDetails::set_has_ultimate_mana(bool value) {
  set_has_has_ultimate_mana();
  has_ultimate_mana_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PlayerDetails.has_ultimate_mana)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStats_BuildingDetails::kDestroyedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}
CMsgDOTARealtimeGameStats_BuildingDetails::CMsgDOTARealtimeGameStats_BuildingDetails(const CMsgDOTARealtimeGameStats_BuildingDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStats_BuildingDetails::~CMsgDOTARealtimeGameStats_BuildingDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BuildingDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats_BuildingDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats_BuildingDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_BuildingDetails* n = new CMsgDOTARealtimeGameStats_BuildingDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&destroyed_) -
      reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool destroyed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_destroyed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  // optional float heading = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->heading(), output);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->x(), output);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->y(), output);
  }

  // optional bool destroyed = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->destroyed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BuildingDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  // optional float heading = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->heading(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional uint32 type = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  // optional float x = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->x(), target);
  }

  // optional float y = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->y(), target);
  }

  // optional bool destroyed = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->destroyed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 3;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float x = 7;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 8;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 9;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BuildingDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_BuildingDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000008u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BuildingDetails::Swap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStats_BuildingDetails* other) {
  std::swap(team_, other->team_);
  std::swap(heading_, other->heading_);
  std::swap(lane_, other->lane_);
  std::swap(tier_, other->tier_);
  std::swap(type_, other->type_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(destroyed_, other->destroyed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BuildingDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_BuildingDetails

// optional uint32 team = 2;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.team)
  return team_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.team)
}

// optional float heading = 3;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
float CMsgDOTARealtimeGameStats_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.heading)
  return heading_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.heading)
}

// optional uint32 lane = 4;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.lane)
  return lane_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.lane)
}

// optional uint32 tier = 5;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.tier)
  return tier_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.tier)
}

// optional uint32 type = 6;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.type)
  return type_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.type)
}

// optional float x = 7;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgDOTARealtimeGameStats_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.x)
  return x_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.x)
}

// optional float y = 8;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgDOTARealtimeGameStats_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.y)
  return y_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.y)
}

// optional bool destroyed = 9;
bool CMsgDOTARealtimeGameStats_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_has_destroyed() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
bool CMsgDOTARealtimeGameStats_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
  return destroyed_;
}
void CMsgDOTARealtimeGameStats_BuildingDetails::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails.destroyed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_KillDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kDeathTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_KillDetails::kKillerPlayerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}
CMsgDOTARealtimeGameStats_KillDetails::CMsgDOTARealtimeGameStats_KillDetails(const CMsgDOTARealtimeGameStats_KillDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&killer_player_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(killer_player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&killer_player_id_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(killer_player_id_));
}

CMsgDOTARealtimeGameStats_KillDetails::~CMsgDOTARealtimeGameStats_KillDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_KillDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_KillDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_KillDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_KillDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_KillDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_KillDetails* n = new CMsgDOTARealtimeGameStats_KillDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_KillDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&killer_player_id_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(killer_player_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_KillDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 death_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_death_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killer_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_killer_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_KillDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional int32 death_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->death_time(), output);
  }

  // optional uint32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killer_player_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_KillDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional int32 death_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->death_time(), target);
  }

  // optional uint32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killer_player_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_KillDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional int32 death_time = 2;
    if (has_death_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->death_time());
    }

    // optional uint32 killer_player_id = 3;
    if (has_killer_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_KillDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_KillDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::MergeFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      death_time_ = from.death_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      killer_player_id_ = from.killer_player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_KillDetails::CopyFrom(const CMsgDOTARealtimeGameStats_KillDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.KillDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_KillDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_KillDetails::Swap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_KillDetails::InternalSwap(CMsgDOTARealtimeGameStats_KillDetails* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(death_time_, other->death_time_);
  std::swap(killer_player_id_, other->killer_player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_KillDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_KillDetails

// optional uint32 player_id = 1;
bool CMsgDOTARealtimeGameStats_KillDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.player_id)
  return player_id_;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.player_id)
}

// optional int32 death_time = 2;
bool CMsgDOTARealtimeGameStats_KillDetails::has_death_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_death_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_KillDetails::death_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.death_time)
  return death_time_;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_death_time(::google::protobuf::int32 value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.death_time)
}

// optional uint32 killer_player_id = 3;
bool CMsgDOTARealtimeGameStats_KillDetails::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_KillDetails::clear_killer_player_id() {
  killer_player_id_ = 0u;
  clear_has_killer_player_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_KillDetails::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
  return killer_player_id_;
}
void CMsgDOTARealtimeGameStats_KillDetails::set_killer_player_id(::google::protobuf::uint32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.KillDetails.killer_player_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kPlayerIdFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_BroadcasterDetails::kSelectedGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}
CMsgDOTARealtimeGameStats_BroadcasterDetails::CMsgDOTARealtimeGameStats_BroadcasterDetails(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&selected_graph_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(selected_graph_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&selected_graph_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(selected_graph_));
}

CMsgDOTARealtimeGameStats_BroadcasterDetails::~CMsgDOTARealtimeGameStats_BroadcasterDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_BroadcasterDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_BroadcasterDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_BroadcasterDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_BroadcasterDetails* n = new CMsgDOTARealtimeGameStats_BroadcasterDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&selected_graph_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(selected_graph_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_hero = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_selected_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selected_graph = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_selected_graph();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selected_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 selected_hero = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->selected_hero(), output);
  }

  // optional uint32 selected_graph = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selected_graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 selected_hero = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->selected_hero(), target);
  }

  // optional uint32 selected_graph = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selected_graph(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_BroadcasterDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 selected_hero = 2;
    if (has_selected_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_hero());
    }

    // optional uint32 selected_graph = 3;
    if (has_selected_graph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selected_graph());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_BroadcasterDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_BroadcasterDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::MergeFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      selected_hero_ = from.selected_hero_;
    }
    if (cached_has_bits & 0x00000004u) {
      selected_graph_ = from.selected_graph_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::CopyFrom(const CMsgDOTARealtimeGameStats_BroadcasterDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_BroadcasterDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_BroadcasterDetails::Swap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::InternalSwap(CMsgDOTARealtimeGameStats_BroadcasterDetails* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(selected_hero_, other->selected_hero_);
  std::swap(selected_graph_, other->selected_graph_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_BroadcasterDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_BroadcasterDetails

// optional uint32 player_id = 1;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
  return player_id_;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.player_id)
}

// optional uint32 selected_hero = 2;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_hero() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_hero() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_hero() {
  selected_hero_ = 0u;
  clear_has_selected_hero();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
  return selected_hero_;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_hero(::google::protobuf::uint32 value) {
  set_has_selected_hero();
  selected_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_hero)
}

// optional uint32 selected_graph = 3;
bool CMsgDOTARealtimeGameStats_BroadcasterDetails::has_selected_graph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_has_selected_graph() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_has_selected_graph() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::clear_selected_graph() {
  selected_graph_ = 0u;
  clear_has_selected_graph();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_BroadcasterDetails::selected_graph() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
  return selected_graph_;
}
void CMsgDOTARealtimeGameStats_BroadcasterDetails::set_selected_graph(::google::protobuf::uint32 value) {
  set_has_selected_graph();
  selected_graph_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails.selected_graph)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_PickBanDetails::kHeroFieldNumber;
const int CMsgDOTARealtimeGameStats_PickBanDetails::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}
CMsgDOTARealtimeGameStats_PickBanDetails::CMsgDOTARealtimeGameStats_PickBanDetails(const CMsgDOTARealtimeGameStats_PickBanDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_, &from.hero_,
    reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hero_, 0, reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&hero_) + sizeof(team_));
}

CMsgDOTARealtimeGameStats_PickBanDetails::~CMsgDOTARealtimeGameStats_PickBanDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_PickBanDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_PickBanDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_PickBanDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_PickBanDetails* n = new CMsgDOTARealtimeGameStats_PickBanDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&hero_, 0, reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&hero_) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_PickBanDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero(), output);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_PickBanDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero(), target);
  }

  // optional uint32 team = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_PickBanDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 hero = 1;
    if (has_hero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero());
    }

    // optional uint32 team = 2;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_PickBanDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_PickBanDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::MergeFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      hero_ = from.hero_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_ = from.team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_PickBanDetails::CopyFrom(const CMsgDOTARealtimeGameStats_PickBanDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_PickBanDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_PickBanDetails::Swap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_PickBanDetails::InternalSwap(CMsgDOTARealtimeGameStats_PickBanDetails* other) {
  std::swap(hero_, other->hero_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_PickBanDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_PickBanDetails

// optional uint32 hero = 1;
bool CMsgDOTARealtimeGameStats_PickBanDetails::has_hero() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_hero() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_hero() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_hero() {
  hero_ = 0u;
  clear_has_hero();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.hero)
  return hero_;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_hero(::google::protobuf::uint32 value) {
  set_has_hero();
  hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.hero)
}

// optional uint32 team = 2;
bool CMsgDOTARealtimeGameStats_PickBanDetails::has_team() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_has_team() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_PickBanDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.team)
  return team_;
}
void CMsgDOTARealtimeGameStats_PickBanDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTimeOfDayFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kIsNightstalkerNightFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidRadiantFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kTeamidDireFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kPicksFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBansFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kKillsFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kBroadcastersFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kLeagueIdFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kSingleTeamFieldNumber;
const int CMsgDOTARealtimeGameStats_MatchDetails::kCheersPeakFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}
CMsgDOTARealtimeGameStats_MatchDetails::CMsgDOTARealtimeGameStats_MatchDetails(const CMsgDOTARealtimeGameStats_MatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      picks_(from.picks_),
      bans_(from.bans_),
      kills_(from.kills_),
      broadcasters_(from.broadcasters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    reinterpret_cast<char*>(&cheers_peak_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(cheers_peak_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&cheers_peak_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(cheers_peak_));
}

CMsgDOTARealtimeGameStats_MatchDetails::~CMsgDOTARealtimeGameStats_MatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_MatchDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_MatchDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats_MatchDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats_MatchDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_MatchDetails* n = new CMsgDOTARealtimeGameStats_MatchDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  picks_.Clear();
  bans_.Clear();
  kills_.Clear();
  broadcasters_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&is_nightstalker_night_) -
      reinterpret_cast<char*>(&server_steam_id_) + sizeof(is_nightstalker_night_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&single_team_, 0, reinterpret_cast<char*>(&cheers_peak_) -
      reinterpret_cast<char*>(&single_team_) + sizeof(cheers_peak_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_matchid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_of_day = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_time_of_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nightstalker_night = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_nightstalker_night();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nightstalker_night_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamid_radiant = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_teamid_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teamid_dire = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_teamid_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcasters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool single_team = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_single_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &single_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cheers_peak = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_cheers_peak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cheers_peak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional float time_of_day = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_of_day(), output);
  }

  // optional bool is_nightstalker_night = 5;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_nightstalker_night(), output);
  }

  // optional int32 game_time = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->game_time(), output);
  }

  // optional uint32 teamid_radiant = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->teamid_radiant(), output);
  }

  // optional uint32 teamid_dire = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->teamid_dire(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0, n = this->picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->picks(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->bans(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->kills(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0, n = this->broadcasters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->broadcasters(i), output);
  }

  // optional uint32 game_mode = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->game_mode(), output);
  }

  // optional uint32 league_id = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->league_id(), output);
  }

  // optional bool single_team = 16;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->single_team(), output);
  }

  // optional uint32 cheers_peak = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->cheers_peak(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_MatchDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional float time_of_day = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_of_day(), target);
  }

  // optional bool is_nightstalker_night = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_nightstalker_night(), target);
  }

  // optional int32 game_time = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->game_time(), target);
  }

  // optional uint32 teamid_radiant = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->teamid_radiant(), target);
  }

  // optional uint32 teamid_dire = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->teamid_dire(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  for (unsigned int i = 0, n = this->picks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->picks(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  for (unsigned int i = 0, n = this->bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->bans(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->kills(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  for (unsigned int i = 0, n = this->broadcasters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->broadcasters(i), deterministic, target);
  }

  // optional uint32 game_mode = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->game_mode(), target);
  }

  // optional uint32 league_id = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->league_id(), target);
  }

  // optional bool single_team = 16;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->single_team(), target);
  }

  // optional uint32 cheers_peak = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->cheers_peak(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStats_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
  {
    unsigned int count = this->picks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picks(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
  {
    unsigned int count = this->bans_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bans(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
  {
    unsigned int count = this->kills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kills(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
  {
    unsigned int count = this->broadcasters_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcasters(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional float time_of_day = 4;
    if (has_time_of_day()) {
      total_size += 1 + 4;
    }

    // optional int32 game_time = 6;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 teamid_radiant = 8;
    if (has_teamid_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_radiant());
    }

    // optional uint32 teamid_dire = 9;
    if (has_teamid_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid_dire());
    }

    // optional bool is_nightstalker_night = 5;
    if (has_is_nightstalker_night()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional bool single_team = 16;
    if (has_single_team()) {
      total_size += 2 + 1;
    }

    // optional uint32 game_mode = 14;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 15;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 cheers_peak = 17;
    if (has_cheers_peak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cheers_peak());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_MatchDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_MatchDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  picks_.MergeFrom(from.picks_);
  bans_.MergeFrom(from.bans_);
  kills_.MergeFrom(from.kills_);
  broadcasters_.MergeFrom(from.broadcasters_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      teamid_radiant_ = from.teamid_radiant_;
    }
    if (cached_has_bits & 0x00000040u) {
      teamid_dire_ = from.teamid_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_nightstalker_night_ = from.is_nightstalker_night_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      single_team_ = from.single_team_;
    }
    if (cached_has_bits & 0x00000200u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000400u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      cheers_peak_ = from.cheers_peak_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStats_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_MatchDetails::Swap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStats_MatchDetails* other) {
  picks_.InternalSwap(&other->picks_);
  bans_.InternalSwap(&other->bans_);
  kills_.InternalSwap(&other->kills_);
  broadcasters_.InternalSwap(&other->broadcasters_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(matchid_, other->matchid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(time_of_day_, other->time_of_day_);
  std::swap(game_time_, other->game_time_);
  std::swap(teamid_radiant_, other->teamid_radiant_);
  std::swap(teamid_dire_, other->teamid_dire_);
  std::swap(is_nightstalker_night_, other->is_nightstalker_night_);
  std::swap(single_team_, other->single_team_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(league_id_, other->league_id_);
  std::swap(cheers_peak_, other->cheers_peak_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_MatchDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_MatchDetails

// optional fixed64 server_steam_id = 1;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
  return server_steam_id_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStats_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.matchid)
  return matchid_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
  return timestamp_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.timestamp)
}

// optional float time_of_day = 4;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
float CMsgDOTARealtimeGameStats_MatchDetails::time_of_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
  return time_of_day_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.time_of_day)
}

// optional bool is_nightstalker_night = 5;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_is_nightstalker_night() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_is_nightstalker_night() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_is_nightstalker_night() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_is_nightstalker_night() {
  is_nightstalker_night_ = false;
  clear_has_is_nightstalker_night();
}
bool CMsgDOTARealtimeGameStats_MatchDetails::is_nightstalker_night() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
  return is_nightstalker_night_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_is_nightstalker_night(bool value) {
  set_has_is_nightstalker_night();
  is_nightstalker_night_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.is_nightstalker_night)
}

// optional int32 game_time = 6;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_time)
  return game_time_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_time)
}

// optional uint32 teamid_radiant = 8;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_radiant() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_radiant() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_radiant() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_radiant() {
  teamid_radiant_ = 0u;
  clear_has_teamid_radiant();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
  return teamid_radiant_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_radiant(::google::protobuf::uint32 value) {
  set_has_teamid_radiant();
  teamid_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_radiant)
}

// optional uint32 teamid_dire = 9;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_teamid_dire() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_teamid_dire() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_teamid_dire() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_teamid_dire() {
  teamid_dire_ = 0u;
  clear_has_teamid_dire();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::teamid_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
  return teamid_dire_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_teamid_dire(::google::protobuf::uint32 value) {
  set_has_teamid_dire();
  teamid_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.teamid_dire)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails picks = 10;
int CMsgDOTARealtimeGameStats_MatchDetails::picks_size() const {
  return picks_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_picks() {
  picks_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_picks() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return &picks_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.picks)
  return picks_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.PickBanDetails bans = 11;
int CMsgDOTARealtimeGameStats_MatchDetails::bans_size() const {
  return bans_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_bans() {
  bans_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails& CMsgDOTARealtimeGameStats_MatchDetails::bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return &bans_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_PickBanDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.bans)
  return bans_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.KillDetails kills = 12;
int CMsgDOTARealtimeGameStats_MatchDetails::kills_size() const {
  return kills_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_kills() {
  kills_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails& CMsgDOTARealtimeGameStats_MatchDetails::kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_KillDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return &kills_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_KillDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.kills)
  return kills_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.BroadcasterDetails broadcasters = 13;
int CMsgDOTARealtimeGameStats_MatchDetails::broadcasters_size() const {
  return broadcasters_.size();
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_broadcasters() {
  broadcasters_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails& CMsgDOTARealtimeGameStats_MatchDetails::broadcasters(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails* CMsgDOTARealtimeGameStats_MatchDetails::add_broadcasters() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >*
CMsgDOTARealtimeGameStats_MatchDetails::mutable_broadcasters() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return &broadcasters_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BroadcasterDetails >&
CMsgDOTARealtimeGameStats_MatchDetails::broadcasters() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.broadcasters)
  return broadcasters_;
}

// optional uint32 game_mode = 14;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
  return game_mode_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.game_mode)
}

// optional uint32 league_id = 15;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_id)
  return league_id_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.league_id)
}

// optional bool single_team = 16;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_single_team() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_single_team() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_single_team() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_single_team() {
  single_team_ = false;
  clear_has_single_team();
}
bool CMsgDOTARealtimeGameStats_MatchDetails::single_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.single_team)
  return single_team_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_single_team(bool value) {
  set_has_single_team();
  single_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.single_team)
}

// optional uint32 cheers_peak = 17;
bool CMsgDOTARealtimeGameStats_MatchDetails::has_cheers_peak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_has_cheers_peak() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_has_cheers_peak() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTARealtimeGameStats_MatchDetails::clear_cheers_peak() {
  cheers_peak_ = 0u;
  clear_has_cheers_peak();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStats_MatchDetails::cheers_peak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
  return cheers_peak_;
}
void CMsgDOTARealtimeGameStats_MatchDetails::set_cheers_peak(::google::protobuf::uint32 value) {
  set_has_cheers_peak();
  cheers_peak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.MatchDetails.cheers_peak)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData_LocationStats::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_LocationStats::CMsgDOTARealtimeGameStats_GraphData_LocationStats(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats::~CMsgDOTARealtimeGameStats_GraphData_LocationStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_LocationStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_LocationStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_LocationStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData_LocationStats* n = new CMsgDOTARealtimeGameStats_GraphData_LocationStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_stats())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stats())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  for (int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stats = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->stats_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_LocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 stats = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stats_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->stats_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_LocationStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData_LocationStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_LocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_LocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_LocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_LocationStats* other) {
  stats_.InternalSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_LocationStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_GraphData_LocationStats

// repeated int32 stats = 1;
int CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats_size() const {
  return stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::clear_stats() {
  stats_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::set_stats(int index, ::google::protobuf::int32 value) {
  stats_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
void CMsgDOTARealtimeGameStats_GraphData_LocationStats::add_stats(::google::protobuf::int32 value) {
  stats_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData_LocationStats::stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return stats_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData_LocationStats::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats.stats)
  return &stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::kLocStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      loc_stats_(from.loc_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::~CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* n = new CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  loc_stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0, n = this->loc_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loc_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  for (unsigned int i = 0, n = this->loc_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->loc_stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
  {
    unsigned int count = this->loc_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loc_stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  loc_stats_.MergeFrom(from.loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::Swap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::InternalSwap(CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* other) {
  loc_stats_.InternalSwap(&other->loc_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats

// repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.LocationStats loc_stats = 1;
int CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats_size() const {
  return loc_stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::clear_loc_stats() {
  loc_stats_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats& CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats* CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::add_loc_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >*
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::mutable_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return &loc_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_LocationStats >&
CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats::loc_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats.loc_stats)
  return loc_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats_GraphData::kGraphGoldFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphXpFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphKillFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphTowerFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kGraphRaxFieldNumber;
const int CMsgDOTARealtimeGameStats_GraphData::kTeamLocStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}
CMsgDOTARealtimeGameStats_GraphData::CMsgDOTARealtimeGameStats_GraphData(const CMsgDOTARealtimeGameStats_GraphData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      graph_gold_(from.graph_gold_),
      graph_xp_(from.graph_xp_),
      graph_kill_(from.graph_kill_),
      graph_tower_(from.graph_tower_),
      graph_rax_(from.graph_rax_),
      team_loc_stats_(from.team_loc_stats_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}

void CMsgDOTARealtimeGameStats_GraphData::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStats_GraphData::~CMsgDOTARealtimeGameStats_GraphData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats_GraphData::SharedDtor() {
}

void CMsgDOTARealtimeGameStats_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats_GraphData::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats_GraphData::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats_GraphData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats_GraphData* n = new CMsgDOTARealtimeGameStats_GraphData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  graph_gold_.Clear();
  graph_xp_.Clear();
  graph_kill_.Clear();
  graph_tower_.Clear();
  graph_rax_.Clear();
  team_loc_stats_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_graph_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_xp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_graph_xp())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_xp())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_kill = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24u, input, this->mutable_graph_kill())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_kill())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_tower = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32u, input, this->mutable_graph_tower())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_tower())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 graph_rax = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40u, input, this->mutable_graph_rax())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_rax())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_loc_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->graph_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  // repeated int32 graph_xp = 2;
  for (int i = 0, n = this->graph_xp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->graph_xp(i), output);
  }

  // repeated int32 graph_kill = 3;
  for (int i = 0, n = this->graph_kill_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->graph_kill(i), output);
  }

  // repeated int32 graph_tower = 4;
  for (int i = 0, n = this->graph_tower_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->graph_tower(i), output);
  }

  // repeated int32 graph_rax = 5;
  for (int i = 0, n = this->graph_rax_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->graph_rax(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0, n = this->team_loc_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->team_loc_stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats_GraphData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->graph_gold_, target);

  // repeated int32 graph_xp = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->graph_xp_, target);

  // repeated int32 graph_kill = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(3, this->graph_kill_, target);

  // repeated int32 graph_tower = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(4, this->graph_tower_, target);

  // repeated int32 graph_rax = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(5, this->graph_rax_, target);

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  for (unsigned int i = 0, n = this->team_loc_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->team_loc_stats(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStats_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_size());
    total_size += data_size;
  }

  // repeated int32 graph_xp = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_xp_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_xp_size());
    total_size += data_size;
  }

  // repeated int32 graph_kill = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_kill_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_kill_size());
    total_size += data_size;
  }

  // repeated int32 graph_tower = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_tower_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_tower_size());
    total_size += data_size;
  }

  // repeated int32 graph_rax = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_rax_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_rax_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
  {
    unsigned int count = this->team_loc_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_loc_stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats_GraphData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats_GraphData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats_GraphData::MergeFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
  graph_xp_.MergeFrom(from.graph_xp_);
  graph_kill_.MergeFrom(from.graph_kill_);
  graph_tower_.MergeFrom(from.graph_tower_);
  graph_rax_.MergeFrom(from.graph_rax_);
  team_loc_stats_.MergeFrom(from.team_loc_stats_);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats_GraphData::CopyFrom(const CMsgDOTARealtimeGameStats_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats_GraphData::Swap(CMsgDOTARealtimeGameStats_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats_GraphData::InternalSwap(CMsgDOTARealtimeGameStats_GraphData* other) {
  graph_gold_.InternalSwap(&other->graph_gold_);
  graph_xp_.InternalSwap(&other->graph_xp_);
  graph_kill_.InternalSwap(&other->graph_kill_);
  graph_tower_.InternalSwap(&other->graph_tower_);
  graph_rax_.InternalSwap(&other->graph_rax_);
  team_loc_stats_.InternalSwap(&other->team_loc_stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats_GraphData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats_GraphData

// repeated int32 graph_gold = 1;
int CMsgDOTARealtimeGameStats_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
void CMsgDOTARealtimeGameStats_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return graph_gold_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_gold)
  return &graph_gold_;
}

// repeated int32 graph_xp = 2;
int CMsgDOTARealtimeGameStats_GraphData::graph_xp_size() const {
  return graph_xp_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_xp() {
  graph_xp_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_xp(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData::set_graph_xp(int index, ::google::protobuf::int32 value) {
  graph_xp_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
void CMsgDOTARealtimeGameStats_GraphData::add_graph_xp(::google::protobuf::int32 value) {
  graph_xp_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_xp() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return graph_xp_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_xp() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_xp)
  return &graph_xp_;
}

// repeated int32 graph_kill = 3;
int CMsgDOTARealtimeGameStats_GraphData::graph_kill_size() const {
  return graph_kill_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_kill() {
  graph_kill_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_kill(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData::set_graph_kill(int index, ::google::protobuf::int32 value) {
  graph_kill_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
void CMsgDOTARealtimeGameStats_GraphData::add_graph_kill(::google::protobuf::int32 value) {
  graph_kill_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_kill() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return graph_kill_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_kill() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_kill)
  return &graph_kill_;
}

// repeated int32 graph_tower = 4;
int CMsgDOTARealtimeGameStats_GraphData::graph_tower_size() const {
  return graph_tower_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_tower() {
  graph_tower_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_tower(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData::set_graph_tower(int index, ::google::protobuf::int32 value) {
  graph_tower_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
void CMsgDOTARealtimeGameStats_GraphData::add_graph_tower(::google::protobuf::int32 value) {
  graph_tower_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_tower() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return graph_tower_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_tower() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_tower)
  return &graph_tower_;
}

// repeated int32 graph_rax = 5;
int CMsgDOTARealtimeGameStats_GraphData::graph_rax_size() const {
  return graph_rax_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_graph_rax() {
  graph_rax_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStats_GraphData::graph_rax(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_.Get(index);
}
void CMsgDOTARealtimeGameStats_GraphData::set_graph_rax(int index, ::google::protobuf::int32 value) {
  graph_rax_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
void CMsgDOTARealtimeGameStats_GraphData::add_graph_rax(::google::protobuf::int32 value) {
  graph_rax_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStats_GraphData::graph_rax() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return graph_rax_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStats_GraphData::mutable_graph_rax() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.graph_rax)
  return &graph_rax_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.GraphData.TeamLocationStats team_loc_stats = 6;
int CMsgDOTARealtimeGameStats_GraphData::team_loc_stats_size() const {
  return team_loc_stats_.size();
}
void CMsgDOTARealtimeGameStats_GraphData::clear_team_loc_stats() {
  team_loc_stats_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats& CMsgDOTARealtimeGameStats_GraphData::team_loc_stats(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats* CMsgDOTARealtimeGameStats_GraphData::add_team_loc_stats() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >*
CMsgDOTARealtimeGameStats_GraphData::mutable_team_loc_stats() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return &team_loc_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats >&
CMsgDOTARealtimeGameStats_GraphData::team_loc_stats() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.GraphData.team_loc_stats)
  return team_loc_stats_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStats::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStats::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStats::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStats::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStats::kDeltaFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStats)
}
CMsgDOTARealtimeGameStats::CMsgDOTARealtimeGameStats(const CMsgDOTARealtimeGameStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_graph_data()) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStats_GraphData(*from.graph_data_);
  } else {
    graph_data_ = NULL;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStats)
}

void CMsgDOTARealtimeGameStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_, 0, reinterpret_cast<char*>(&delta_frame_) -
    reinterpret_cast<char*>(&match_) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStats::~CMsgDOTARealtimeGameStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStats)
  SharedDtor();
}

void CMsgDOTARealtimeGameStats::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
  if (this != internal_default_instance()) {
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStats& CMsgDOTARealtimeGameStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStats* CMsgDOTARealtimeGameStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStats* n = new CMsgDOTARealtimeGameStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStats)
  teams_.Clear();
  buildings_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_match()) {
      GOOGLE_DCHECK(match_ != NULL);
      match_->::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      GOOGLE_DCHECK(graph_data_ != NULL);
      graph_data_->::proto::dota::CMsgDOTARealtimeGameStats_GraphData::Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_delta_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStats)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_data_, output);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStats)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->teams(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buildings(i), deterministic, target);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->graph_data_, deterministic, target);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStats)
  return target;
}

size_t CMsgDOTARealtimeGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
  {
    unsigned int count = this->buildings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildings(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_);
    }

    // optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graph_data_);
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStats)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStats::MergeFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_graph_data()->::proto::dota::CMsgDOTARealtimeGameStats_GraphData::MergeFrom(from.graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStats::CopyFrom(const CMsgDOTARealtimeGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStats::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStats::Swap(CMsgDOTARealtimeGameStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStats::InternalSwap(CMsgDOTARealtimeGameStats* other) {
  teams_.InternalSwap(&other->teams_);
  buildings_.InternalSwap(&other->buildings_);
  std::swap(match_, other->match_);
  std::swap(graph_data_, other->graph_data_);
  std::swap(delta_frame_, other->delta_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStats

// optional .proto.dota.CMsgDOTARealtimeGameStats.MatchDetails match = 1;
bool CMsgDOTARealtimeGameStats::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStats::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStats::clear_match() {
  if (match_ != NULL) match_->::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::Clear();
  clear_has_match();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails& CMsgDOTARealtimeGameStats::match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.match)
  return match_ != NULL ? *match_
                         : *::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.match)
  return match_;
}
::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* CMsgDOTARealtimeGameStats::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.match)
  clear_has_match();
  ::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStats::set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStats_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.match)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.TeamDetails teams = 2;
int CMsgDOTARealtimeGameStats::teams_size() const {
  return teams_.size();
}
void CMsgDOTARealtimeGameStats::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails& CMsgDOTARealtimeGameStats::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails* CMsgDOTARealtimeGameStats::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >*
CMsgDOTARealtimeGameStats::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_TeamDetails >&
CMsgDOTARealtimeGameStats::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.teams)
  return teams_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStats.BuildingDetails buildings = 3;
int CMsgDOTARealtimeGameStats::buildings_size() const {
  return buildings_.size();
}
void CMsgDOTARealtimeGameStats::clear_buildings() {
  buildings_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails& CMsgDOTARealtimeGameStats::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails* CMsgDOTARealtimeGameStats::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >*
CMsgDOTARealtimeGameStats::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStats_BuildingDetails >&
CMsgDOTARealtimeGameStats::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStats.buildings)
  return buildings_;
}

// optional .proto.dota.CMsgDOTARealtimeGameStats.GraphData graph_data = 4;
bool CMsgDOTARealtimeGameStats::has_graph_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_graph_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStats::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStats::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::proto::dota::CMsgDOTARealtimeGameStats_GraphData::Clear();
  clear_has_graph_data();
}
const ::proto::dota::CMsgDOTARealtimeGameStats_GraphData& CMsgDOTARealtimeGameStats::graph_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_ != NULL ? *graph_data_
                         : *::proto::dota::CMsgDOTARealtimeGameStats_GraphData::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStats_GraphData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  return graph_data_;
}
::proto::dota::CMsgDOTARealtimeGameStats_GraphData* CMsgDOTARealtimeGameStats::release_graph_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
  clear_has_graph_data();
  ::proto::dota::CMsgDOTARealtimeGameStats_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStats::set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStats_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStats.graph_data)
}

// optional bool delta_frame = 5;
bool CMsgDOTARealtimeGameStats::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStats::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStats::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStats::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
bool CMsgDOTARealtimeGameStats::delta_frame() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStats.delta_frame)
  return delta_frame_;
}
void CMsgDOTARealtimeGameStats::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStats.delta_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNumberFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kTeamLogoFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kScoreFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_TeamDetails::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}
CMsgDOTARealtimeGameStatsTerse_TeamDetails::CMsgDOTARealtimeGameStatsTerse_TeamDetails(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_number_, &from.team_number_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&team_number_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_number_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&team_number_) + sizeof(score_));
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails::~CMsgDOTARealtimeGameStatsTerse_TeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_TeamDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_TeamDetails* n = new CMsgDOTARealtimeGameStatsTerse_TeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  players_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&team_number_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&team_number_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_number(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->team_logo(), output);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_number = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_number(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional fixed64 team_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->team_logo(), target);
  }

  // optional uint32 score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->players(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_TeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string team_name = 3;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 team_number = 1;
    if (has_team_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_number());
    }

    // optional uint32 team_id = 2;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional fixed64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_TeamDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_TeamDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_number_ = from.team_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_TeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_TeamDetails::Swap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_TeamDetails* other) {
  players_.InternalSwap(&other->players_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_number_, other->team_number_);
  std::swap(team_id_, other->team_id_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_TeamDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_TeamDetails

// optional uint32 team_number = 1;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_number() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_number() {
  team_number_ = 0u;
  clear_has_team_number();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_number() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
  return team_number_;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_number(::google::protobuf::uint32 value) {
  set_has_team_number();
  team_number_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_number)
}

// optional uint32 team_id = 2;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
  return team_id_;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_id)
}

// optional string team_name = 3;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
#endif
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}
::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStatsTerse_TeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_name)
}

// optional fixed64 team_logo = 4;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_TeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
  return team_logo_;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.team_logo)
}

// optional uint32 score = 5;
bool CMsgDOTARealtimeGameStatsTerse_TeamDetails::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_TeamDetails::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
  return score_;
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.score)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails players = 6;
int CMsgDOTARealtimeGameStatsTerse_TeamDetails::players_size() const {
  return players_.size();
}
void CMsgDOTARealtimeGameStatsTerse_TeamDetails::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_TeamDetails::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_TeamDetails::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >*
CMsgDOTARealtimeGameStatsTerse_TeamDetails::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_PlayerDetails >&
CMsgDOTARealtimeGameStatsTerse_TeamDetails::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAccountidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kPlayeridFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kNameFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kHeroidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLevelFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kKillCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeathCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kAssistsCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kDeniesCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kLhCountFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kGoldFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}
CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CMsgDOTARealtimeGameStatsTerse_PlayerDetails(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&accountid_, &from.accountid_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&accountid_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&accountid_) + sizeof(y_));
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails::~CMsgDOTARealtimeGameStatsTerse_PlayerDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse_PlayerDetails* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_PlayerDetails* n = new CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&accountid_, 0, reinterpret_cast<char*>(&death_count_) -
      reinterpret_cast<char*>(&accountid_) + sizeof(death_count_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&assists_count_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&assists_count_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 accountid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 playerid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_playerid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 heroid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_heroid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kill_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_kill_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 death_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_death_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &death_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_assists_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_denies_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lh_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_lh_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lh_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->accountid(), output);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->playerid(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heroid(), output);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 kill_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->kill_count(), output);
  }

  // optional uint32 death_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->death_count(), output);
  }

  // optional uint32 assists_count = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->assists_count(), output);
  }

  // optional uint32 denies_count = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->denies_count(), output);
  }

  // optional uint32 lh_count = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->lh_count(), output);
  }

  // optional uint32 gold = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gold(), output);
  }

  // optional float x = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->x(), output);
  }

  // optional float y = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 accountid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->accountid(), target);
  }

  // optional uint32 playerid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->playerid(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  // optional uint32 heroid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heroid(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 kill_count = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->kill_count(), target);
  }

  // optional uint32 death_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->death_count(), target);
  }

  // optional uint32 assists_count = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->assists_count(), target);
  }

  // optional uint32 denies_count = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->denies_count(), target);
  }

  // optional uint32 lh_count = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->lh_count(), target);
  }

  // optional uint32 gold = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gold(), target);
  }

  // optional float x = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->x(), target);
  }

  // optional float y = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_PlayerDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 accountid = 1;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 playerid = 2;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional uint32 heroid = 5;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 kill_count = 7;
    if (has_kill_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kill_count());
    }

    // optional uint32 death_count = 8;
    if (has_death_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->death_count());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional uint32 assists_count = 9;
    if (has_assists_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists_count());
    }

    // optional uint32 denies_count = 10;
    if (has_denies_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies_count());
    }

    // optional uint32 lh_count = 11;
    if (has_lh_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lh_count());
    }

    // optional uint32 gold = 12;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional float x = 13;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 14;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_PlayerDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_PlayerDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00000004u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      heroid_ = from.heroid_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      kill_count_ = from.kill_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      death_count_ = from.death_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      assists_count_ = from.assists_count_;
    }
    if (cached_has_bits & 0x00000200u) {
      denies_count_ = from.denies_count_;
    }
    if (cached_has_bits & 0x00000400u) {
      lh_count_ = from.lh_count_;
    }
    if (cached_has_bits & 0x00000800u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00001000u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00002000u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_PlayerDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::Swap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_PlayerDetails* other) {
  name_.Swap(&other->name_);
  std::swap(accountid_, other->accountid_);
  std::swap(playerid_, other->playerid_);
  std::swap(team_, other->team_);
  std::swap(heroid_, other->heroid_);
  std::swap(level_, other->level_);
  std::swap(kill_count_, other->kill_count_);
  std::swap(death_count_, other->death_count_);
  std::swap(assists_count_, other->assists_count_);
  std::swap(denies_count_, other->denies_count_);
  std::swap(lh_count_, other->lh_count_);
  std::swap(gold_, other->gold_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_PlayerDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_PlayerDetails

// optional uint32 accountid = 1;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_accountid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_accountid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_accountid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_accountid() {
  accountid_ = 0u;
  clear_has_accountid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
  return accountid_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_accountid(::google::protobuf::uint32 value) {
  set_has_accountid();
  accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.accountid)
}

// optional uint32 playerid = 2;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_playerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_playerid() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_playerid() {
  playerid_ = 0u;
  clear_has_playerid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::playerid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
  return playerid_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_playerid(::google::protobuf::uint32 value) {
  set_has_playerid();
  playerid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.playerid)
}

// optional string name = 3;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTARealtimeGameStatsTerse_PlayerDetails::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.GetNoArena();
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
#if LANG_CXX11
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
#endif
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}
::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARealtimeGameStatsTerse_PlayerDetails::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.name)
}

// optional uint32 team = 4;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
  return team_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.team)
}

// optional uint32 heroid = 5;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_heroid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_heroid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::heroid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
  return heroid_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.heroid)
}

// optional uint32 level = 6;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
  return level_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.level)
}

// optional uint32 kill_count = 7;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_kill_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_kill_count() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_kill_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_kill_count() {
  kill_count_ = 0u;
  clear_has_kill_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::kill_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
  return kill_count_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_kill_count(::google::protobuf::uint32 value) {
  set_has_kill_count();
  kill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.kill_count)
}

// optional uint32 death_count = 8;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_death_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_death_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_death_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_death_count() {
  death_count_ = 0u;
  clear_has_death_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
  return death_count_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_death_count(::google::protobuf::uint32 value) {
  set_has_death_count();
  death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.death_count)
}

// optional uint32 assists_count = 9;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_assists_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_assists_count() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_assists_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_assists_count() {
  assists_count_ = 0u;
  clear_has_assists_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::assists_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
  return assists_count_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_assists_count(::google::protobuf::uint32 value) {
  set_has_assists_count();
  assists_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.assists_count)
}

// optional uint32 denies_count = 10;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_denies_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_denies_count() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_denies_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_denies_count() {
  denies_count_ = 0u;
  clear_has_denies_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::denies_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
  return denies_count_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_denies_count(::google::protobuf::uint32 value) {
  set_has_denies_count();
  denies_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.denies_count)
}

// optional uint32 lh_count = 11;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_lh_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_lh_count() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_lh_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_lh_count() {
  lh_count_ = 0u;
  clear_has_lh_count();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::lh_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
  return lh_count_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_lh_count(::google::protobuf::uint32 value) {
  set_has_lh_count();
  lh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.lh_count)
}

// optional uint32 gold = 12;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_gold() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_gold() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_gold() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_PlayerDetails::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
  return gold_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.gold)
}

// optional float x = 13;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_x() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_x() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
  return x_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.x)
}

// optional float y = 14;
bool CMsgDOTARealtimeGameStatsTerse_PlayerDetails::has_y() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_has_y() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgDOTARealtimeGameStatsTerse_PlayerDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
  return y_;
}
void CMsgDOTARealtimeGameStatsTerse_PlayerDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.PlayerDetails.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTeamFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kHeadingFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTypeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kLaneFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kTierFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kXFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kYFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_BuildingDetails::kDestroyedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}
CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CMsgDOTARealtimeGameStatsTerse_BuildingDetails(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&destroyed_) -
    reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails::~CMsgDOTARealtimeGameStatsTerse_BuildingDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse_BuildingDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_BuildingDetails* n = new CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&destroyed_) -
      reinterpret_cast<char*>(&team_) + sizeof(destroyed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tier = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool destroyed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_destroyed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team(), output);
  }

  // optional float heading = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->heading(), output);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lane(), output);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tier(), output);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->x(), output);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->y(), output);
  }

  // optional bool destroyed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->destroyed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team(), target);
  }

  // optional float heading = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->heading(), target);
  }

  // optional uint32 type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional uint32 lane = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lane(), target);
  }

  // optional uint32 tier = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tier(), target);
  }

  // optional float x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->x(), target);
  }

  // optional float y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->y(), target);
  }

  // optional bool destroyed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->destroyed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_BuildingDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 team = 1;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

    // optional float heading = 2;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 lane = 4;
    if (has_lane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lane());
    }

    // optional uint32 tier = 5;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional float x = 6;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 7;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional bool destroyed = 8;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_BuildingDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_BuildingDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      lane_ = from.lane_;
    }
    if (cached_has_bits & 0x00000010u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000020u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000040u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000080u) {
      destroyed_ = from.destroyed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_BuildingDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::Swap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_BuildingDetails* other) {
  std::swap(team_, other->team_);
  std::swap(heading_, other->heading_);
  std::swap(type_, other->type_);
  std::swap(lane_, other->lane_);
  std::swap(tier_, other->tier_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(destroyed_, other->destroyed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_BuildingDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_BuildingDetails

// optional uint32 team = 1;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
  return team_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.team)
}

// optional float heading = 2;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_heading() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_heading() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_heading() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::heading() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
  return heading_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.heading)
}

// optional uint32 type = 3;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
  return type_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.type)
}

// optional uint32 lane = 4;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_lane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_lane() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_lane() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_lane() {
  lane_ = 0u;
  clear_has_lane();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::lane() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
  return lane_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_lane(::google::protobuf::uint32 value) {
  set_has_lane();
  lane_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.lane)
}

// optional uint32 tier = 5;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_tier() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_tier() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_tier() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_BuildingDetails::tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
  return tier_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.tier)
}

// optional float x = 6;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
  return x_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.x)
}

// optional float y = 7;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgDOTARealtimeGameStatsTerse_BuildingDetails::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
  return y_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.y)
}

// optional bool destroyed = 8;
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::has_destroyed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_has_destroyed() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
bool CMsgDOTARealtimeGameStatsTerse_BuildingDetails::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
  return destroyed_;
}
void CMsgDOTARealtimeGameStatsTerse_BuildingDetails::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails.destroyed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kServerSteamIdFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kMatchidFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kTimestampFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameTimeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kSteamBroadcasterAccountIdsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kGameModeFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse_MatchDetails::kLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}
CMsgDOTARealtimeGameStatsTerse_MatchDetails::CMsgDOTARealtimeGameStatsTerse_MatchDetails(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      steam_broadcaster_account_ids_(from.steam_broadcaster_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(league_id_));
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails::~CMsgDOTARealtimeGameStatsTerse_MatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_MatchDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse_MatchDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse_MatchDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_MatchDetails* n = new CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  steam_broadcaster_account_ids_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&server_steam_id_) + sizeof(league_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 matchid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_matchid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 steam_broadcaster_account_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_steam_broadcaster_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_steam_broadcaster_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->matchid(), output);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timestamp(), output);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game_time(), output);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  for (int i = 0, n = this->steam_broadcaster_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->steam_broadcaster_account_ids(i), output);
  }

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_mode(), output);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional uint64 matchid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->matchid(), target);
  }

  // optional uint32 timestamp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timestamp(), target);
  }

  // optional int32 game_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game_time(), target);
  }

  // repeated uint32 steam_broadcaster_account_ids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->steam_broadcaster_account_ids_, target);

  // optional uint32 game_mode = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_mode(), target);
  }

  // optional uint32 league_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 steam_broadcaster_account_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->steam_broadcaster_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->steam_broadcaster_account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 server_steam_id = 1;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 matchid = 2;
    if (has_matchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->matchid());
    }

    // optional uint32 timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional int32 game_time = 4;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 game_mode = 7;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 league_id = 8;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_MatchDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_MatchDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  steam_broadcaster_account_ids_.MergeFrom(from.steam_broadcaster_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchid_ = from.matchid_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_MatchDetails::Swap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::InternalSwap(CMsgDOTARealtimeGameStatsTerse_MatchDetails* other) {
  steam_broadcaster_account_ids_.InternalSwap(&other->steam_broadcaster_account_ids_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(matchid_, other->matchid_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(game_time_, other->game_time_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_MatchDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_MatchDetails

// optional fixed64 server_steam_id = 1;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
  return server_steam_id_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.server_steam_id)
}

// optional uint64 matchid = 2;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_matchid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_matchid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_matchid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_matchid() {
  matchid_ = GOOGLE_ULONGLONG(0);
  clear_has_matchid();
}
::google::protobuf::uint64 CMsgDOTARealtimeGameStatsTerse_MatchDetails::matchid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
  return matchid_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_matchid(::google::protobuf::uint64 value) {
  set_has_matchid();
  matchid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.matchid)
}

// optional uint32 timestamp = 3;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
  return timestamp_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.timestamp)
}

// optional int32 game_time = 4;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
  return game_time_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_time)
}

// repeated uint32 steam_broadcaster_account_ids = 6;
int CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids_size() const {
  return steam_broadcaster_account_ids_.size();
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_steam_broadcaster_account_ids() {
  steam_broadcaster_account_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_.Get(index);
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_steam_broadcaster_account_ids(int index, ::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::add_steam_broadcaster_account_ids(::google::protobuf::uint32 value) {
  steam_broadcaster_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTARealtimeGameStatsTerse_MatchDetails::steam_broadcaster_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return steam_broadcaster_account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTARealtimeGameStatsTerse_MatchDetails::mutable_steam_broadcaster_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.steam_broadcaster_account_ids)
  return &steam_broadcaster_account_ids_;
}

// optional uint32 game_mode = 7;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
  return game_mode_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.game_mode)
}

// optional uint32 league_id = 8;
bool CMsgDOTARealtimeGameStatsTerse_MatchDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTARealtimeGameStatsTerse_MatchDetails::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
  return league_id_;
}
void CMsgDOTARealtimeGameStatsTerse_MatchDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails.league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse_GraphData::kGraphGoldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}
CMsgDOTARealtimeGameStatsTerse_GraphData::CMsgDOTARealtimeGameStatsTerse_GraphData(const CMsgDOTARealtimeGameStatsTerse_GraphData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      graph_gold_(from.graph_gold_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARealtimeGameStatsTerse_GraphData::~CMsgDOTARealtimeGameStatsTerse_GraphData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SharedDtor() {
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse_GraphData::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse_GraphData::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse_GraphData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse_GraphData* n = new CMsgDOTARealtimeGameStatsTerse_GraphData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  graph_gold_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 graph_gold = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_graph_gold())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_graph_gold())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  for (int i = 0, n = this->graph_gold_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->graph_gold(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 graph_gold = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->graph_gold_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse_GraphData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated int32 graph_gold = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->graph_gold_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse_GraphData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse_GraphData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  graph_gold_.MergeFrom(from.graph_gold_);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::CopyFrom(const CMsgDOTARealtimeGameStatsTerse_GraphData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse_GraphData::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse_GraphData::Swap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::InternalSwap(CMsgDOTARealtimeGameStatsTerse_GraphData* other) {
  graph_gold_.InternalSwap(&other->graph_gold_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse_GraphData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse_GraphData

// repeated int32 graph_gold = 1;
int CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold_size() const {
  return graph_gold_.size();
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::clear_graph_gold() {
  graph_gold_.Clear();
}
::google::protobuf::int32 CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_.Get(index);
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::set_graph_gold(int index, ::google::protobuf::int32 value) {
  graph_gold_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
void CMsgDOTARealtimeGameStatsTerse_GraphData::add_graph_gold(::google::protobuf::int32 value) {
  graph_gold_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CMsgDOTARealtimeGameStatsTerse_GraphData::graph_gold() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return graph_gold_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CMsgDOTARealtimeGameStatsTerse_GraphData::mutable_graph_gold() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData.graph_gold)
  return &graph_gold_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARealtimeGameStatsTerse::kMatchFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kTeamsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kBuildingsFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kGraphDataFieldNumber;
const int CMsgDOTARealtimeGameStatsTerse::kDeltaFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}
CMsgDOTARealtimeGameStatsTerse::CMsgDOTARealtimeGameStatsTerse(const CMsgDOTARealtimeGameStatsTerse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_graph_data()) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData(*from.graph_data_);
  } else {
    graph_data_ = NULL;
  }
  delta_frame_ = from.delta_frame_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}

void CMsgDOTARealtimeGameStatsTerse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_, 0, reinterpret_cast<char*>(&delta_frame_) -
    reinterpret_cast<char*>(&match_) + sizeof(delta_frame_));
}

CMsgDOTARealtimeGameStatsTerse::~CMsgDOTARealtimeGameStatsTerse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  SharedDtor();
}

void CMsgDOTARealtimeGameStatsTerse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
  if (this != internal_default_instance()) {
    delete graph_data_;
  }
}

void CMsgDOTARealtimeGameStatsTerse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARealtimeGameStatsTerse::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARealtimeGameStatsTerse& CMsgDOTARealtimeGameStatsTerse::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARealtimeGameStatsTerse* CMsgDOTARealtimeGameStatsTerse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARealtimeGameStatsTerse* n = new CMsgDOTARealtimeGameStatsTerse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARealtimeGameStatsTerse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  teams_.Clear();
  buildings_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_match()) {
      GOOGLE_DCHECK(match_ != NULL);
      match_->::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
    }
    if (has_graph_data()) {
      GOOGLE_DCHECK(graph_data_ != NULL);
      graph_data_->::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
    }
  }
  delta_frame_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARealtimeGameStatsTerse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_graph_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delta_frame = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_delta_frame();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delta_frame_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return false;
#undef DO_
}

void CMsgDOTARealtimeGameStatsTerse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teams(i), output);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->graph_data_, output);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delta_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARealtimeGameStatsTerse)
}

::google::protobuf::uint8* CMsgDOTARealtimeGameStatsTerse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->teams(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buildings(i), deterministic, target);
  }

  // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->graph_data_, deterministic, target);
  }

  // optional bool delta_frame = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delta_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  return target;
}

size_t CMsgDOTARealtimeGameStatsTerse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
  {
    unsigned int count = this->buildings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildings(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_);
    }

    // optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
    if (has_graph_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->graph_data_);
    }

    // optional bool delta_frame = 5;
    if (has_delta_frame()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARealtimeGameStatsTerse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARealtimeGameStatsTerse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARealtimeGameStatsTerse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARealtimeGameStatsTerse)
    MergeFrom(*source);
  }
}

void CMsgDOTARealtimeGameStatsTerse::MergeFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  buildings_.MergeFrom(from.buildings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_match()->::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_graph_data()->::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::MergeFrom(from.graph_data());
    }
    if (cached_has_bits & 0x00000004u) {
      delta_frame_ = from.delta_frame_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARealtimeGameStatsTerse::CopyFrom(const CMsgDOTARealtimeGameStatsTerse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARealtimeGameStatsTerse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARealtimeGameStatsTerse::IsInitialized() const {
  return true;
}

void CMsgDOTARealtimeGameStatsTerse::Swap(CMsgDOTARealtimeGameStatsTerse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARealtimeGameStatsTerse::InternalSwap(CMsgDOTARealtimeGameStatsTerse* other) {
  teams_.InternalSwap(&other->teams_);
  buildings_.InternalSwap(&other->buildings_);
  std::swap(match_, other->match_);
  std::swap(graph_data_, other->graph_data_);
  std::swap(delta_frame_, other->delta_frame_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARealtimeGameStatsTerse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARealtimeGameStatsTerse

// optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.MatchDetails match = 1;
bool CMsgDOTARealtimeGameStatsTerse::has_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_match() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_match() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_match() {
  if (match_ != NULL) match_->::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::Clear();
  clear_has_match();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails& CMsgDOTARealtimeGameStatsTerse::match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  return match_ != NULL ? *match_
                         : *::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  return match_;
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* CMsgDOTARealtimeGameStatsTerse::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
  clear_has_match();
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* temp = match_;
  match_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStatsTerse::set_allocated_match(::proto::dota::CMsgDOTARealtimeGameStatsTerse_MatchDetails* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.match)
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.TeamDetails teams = 2;
int CMsgDOTARealtimeGameStatsTerse::teams_size() const {
  return teams_.size();
}
void CMsgDOTARealtimeGameStatsTerse::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails& CMsgDOTARealtimeGameStatsTerse::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails* CMsgDOTARealtimeGameStatsTerse::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_TeamDetails >&
CMsgDOTARealtimeGameStatsTerse::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.teams)
  return teams_;
}

// repeated .proto.dota.CMsgDOTARealtimeGameStatsTerse.BuildingDetails buildings = 3;
int CMsgDOTARealtimeGameStatsTerse::buildings_size() const {
  return buildings_.size();
}
void CMsgDOTARealtimeGameStatsTerse::clear_buildings() {
  buildings_.Clear();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails& CMsgDOTARealtimeGameStatsTerse::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Get(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Mutable(index);
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails* CMsgDOTARealtimeGameStatsTerse::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >*
CMsgDOTARealtimeGameStatsTerse::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARealtimeGameStatsTerse_BuildingDetails >&
CMsgDOTARealtimeGameStatsTerse::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARealtimeGameStatsTerse.buildings)
  return buildings_;
}

// optional .proto.dota.CMsgDOTARealtimeGameStatsTerse.GraphData graph_data = 4;
bool CMsgDOTARealtimeGameStatsTerse::has_graph_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_graph_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_graph_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_graph_data() {
  if (graph_data_ != NULL) graph_data_->::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::Clear();
  clear_has_graph_data();
}
const ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData& CMsgDOTARealtimeGameStatsTerse::graph_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_ != NULL ? *graph_data_
                         : *::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData::internal_default_instance();
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::mutable_graph_data() {
  set_has_graph_data();
  if (graph_data_ == NULL) {
    graph_data_ = new ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  return graph_data_;
}
::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* CMsgDOTARealtimeGameStatsTerse::release_graph_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
  clear_has_graph_data();
  ::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* temp = graph_data_;
  graph_data_ = NULL;
  return temp;
}
void CMsgDOTARealtimeGameStatsTerse::set_allocated_graph_data(::proto::dota::CMsgDOTARealtimeGameStatsTerse_GraphData* graph_data) {
  delete graph_data_;
  graph_data_ = graph_data;
  if (graph_data) {
    set_has_graph_data();
  } else {
    clear_has_graph_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARealtimeGameStatsTerse.graph_data)
}

// optional bool delta_frame = 5;
bool CMsgDOTARealtimeGameStatsTerse::has_delta_frame() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARealtimeGameStatsTerse::set_has_delta_frame() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_has_delta_frame() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARealtimeGameStatsTerse::clear_delta_frame() {
  delta_frame_ = false;
  clear_has_delta_frame();
}
bool CMsgDOTARealtimeGameStatsTerse::delta_frame() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARealtimeGameStatsTerse.delta_frame)
  return delta_frame_;
}
void CMsgDOTARealtimeGameStatsTerse::set_delta_frame(bool value) {
  set_has_delta_frame();
  delta_frame_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARealtimeGameStatsTerse.delta_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientMatchGroupsVersion::kMatchgroupsVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
}
CMsgGCToClientMatchGroupsVersion::CMsgGCToClientMatchGroupsVersion(const CMsgGCToClientMatchGroupsVersion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  matchgroups_version_ = from.matchgroups_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
}

void CMsgGCToClientMatchGroupsVersion::SharedCtor() {
  _cached_size_ = 0;
  matchgroups_version_ = 0u;
}

CMsgGCToClientMatchGroupsVersion::~CMsgGCToClientMatchGroupsVersion() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientMatchGroupsVersion)
  SharedDtor();
}

void CMsgGCToClientMatchGroupsVersion::SharedDtor() {
}

void CMsgGCToClientMatchGroupsVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientMatchGroupsVersion::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientMatchGroupsVersion& CMsgGCToClientMatchGroupsVersion::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientMatchGroupsVersion* CMsgGCToClientMatchGroupsVersion::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientMatchGroupsVersion* n = new CMsgGCToClientMatchGroupsVersion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientMatchGroupsVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  matchgroups_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientMatchGroupsVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 matchgroups_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_matchgroups_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return false;
#undef DO_
}

void CMsgGCToClientMatchGroupsVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matchgroups_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->matchgroups_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientMatchGroupsVersion)
}

::google::protobuf::uint8* CMsgGCToClientMatchGroupsVersion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 matchgroups_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->matchgroups_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientMatchGroupsVersion)
  return target;
}

size_t CMsgGCToClientMatchGroupsVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 matchgroups_version = 1;
  if (has_matchgroups_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->matchgroups_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientMatchGroupsVersion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientMatchGroupsVersion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientMatchGroupsVersion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientMatchGroupsVersion)
    MergeFrom(*source);
  }
}

void CMsgGCToClientMatchGroupsVersion::MergeFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_matchgroups_version()) {
    set_matchgroups_version(from.matchgroups_version());
  }
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientMatchGroupsVersion::CopyFrom(const CMsgGCToClientMatchGroupsVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientMatchGroupsVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientMatchGroupsVersion::IsInitialized() const {
  return true;
}

void CMsgGCToClientMatchGroupsVersion::Swap(CMsgGCToClientMatchGroupsVersion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientMatchGroupsVersion::InternalSwap(CMsgGCToClientMatchGroupsVersion* other) {
  std::swap(matchgroups_version_, other->matchgroups_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientMatchGroupsVersion::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientMatchGroupsVersion

// optional uint32 matchgroups_version = 1;
bool CMsgGCToClientMatchGroupsVersion::has_matchgroups_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientMatchGroupsVersion::set_has_matchgroups_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientMatchGroupsVersion::clear_has_matchgroups_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientMatchGroupsVersion::clear_matchgroups_version() {
  matchgroups_version_ = 0u;
  clear_has_matchgroups_version();
}
::google::protobuf::uint32 CMsgGCToClientMatchGroupsVersion::matchgroups_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientMatchGroupsVersion.matchgroups_version)
  return matchgroups_version_;
}
void CMsgGCToClientMatchGroupsVersion::set_matchgroups_version(::google::protobuf::uint32 value) {
  set_has_matchgroups_version();
  matchgroups_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientMatchGroupsVersion.matchgroups_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASDOHeroStatsHistory::kMatchIdFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGameModeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kLobbyTypeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kStartTimeFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kWonFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kGpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kXpmFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kKillsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kDeathsFieldNumber;
const int CMsgDOTASDOHeroStatsHistory::kAssistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
}
CMsgDOTASDOHeroStatsHistory::CMsgDOTASDOHeroStatsHistory(const CMsgDOTASDOHeroStatsHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
}

void CMsgDOTASDOHeroStatsHistory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(assists_));
}

CMsgDOTASDOHeroStatsHistory::~CMsgDOTASDOHeroStatsHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASDOHeroStatsHistory)
  SharedDtor();
}

void CMsgDOTASDOHeroStatsHistory::SharedDtor() {
}

void CMsgDOTASDOHeroStatsHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASDOHeroStatsHistory::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASDOHeroStatsHistory& CMsgDOTASDOHeroStatsHistory::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASDOHeroStatsHistory* CMsgDOTASDOHeroStatsHistory::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASDOHeroStatsHistory* n = new CMsgDOTASDOHeroStatsHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASDOHeroStatsHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&kills_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(kills_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&deaths_, 0, reinterpret_cast<char*>(&assists_) -
      reinterpret_cast<char*>(&deaths_) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASDOHeroStatsHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool won = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_won();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gpm = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xpm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_xpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return false;
#undef DO_
}

void CMsgDOTASDOHeroStatsHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_mode(), output);
  }

  // optional uint32 lobby_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lobby_type(), output);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_time(), output);
  }

  // optional bool won = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->won(), output);
  }

  // optional uint32 gpm = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gpm(), output);
  }

  // optional uint32 xpm = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->xpm(), output);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kills(), output);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->deaths(), output);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASDOHeroStatsHistory)
}

::google::protobuf::uint8* CMsgDOTASDOHeroStatsHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 game_mode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_mode(), target);
  }

  // optional uint32 lobby_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lobby_type(), target);
  }

  // optional uint32 start_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_time(), target);
  }

  // optional bool won = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->won(), target);
  }

  // optional uint32 gpm = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->gpm(), target);
  }

  // optional uint32 xpm = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->xpm(), target);
  }

  // optional uint32 kills = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kills(), target);
  }

  // optional uint32 deaths = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->deaths(), target);
  }

  // optional uint32 assists = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASDOHeroStatsHistory)
  return target;
}

size_t CMsgDOTASDOHeroStatsHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 lobby_type = 3;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional uint32 start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional bool won = 5;
    if (has_won()) {
      total_size += 1 + 1;
    }

    // optional uint32 gpm = 6;
    if (has_gpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpm());
    }

    // optional uint32 xpm = 7;
    if (has_xpm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xpm());
    }

    // optional uint32 kills = 8;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 deaths = 9;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 10;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASDOHeroStatsHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASDOHeroStatsHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASDOHeroStatsHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASDOHeroStatsHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTASDOHeroStatsHistory::MergeFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      won_ = from.won_;
    }
    if (cached_has_bits & 0x00000020u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00000040u) {
      xpm_ = from.xpm_;
    }
    if (cached_has_bits & 0x00000080u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000200u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASDOHeroStatsHistory::CopyFrom(const CMsgDOTASDOHeroStatsHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASDOHeroStatsHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASDOHeroStatsHistory::IsInitialized() const {
  return true;
}

void CMsgDOTASDOHeroStatsHistory::Swap(CMsgDOTASDOHeroStatsHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASDOHeroStatsHistory::InternalSwap(CMsgDOTASDOHeroStatsHistory* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(start_time_, other->start_time_);
  std::swap(won_, other->won_);
  std::swap(gpm_, other->gpm_);
  std::swap(xpm_, other->xpm_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASDOHeroStatsHistory::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASDOHeroStatsHistory

// optional uint64 match_id = 1;
bool CMsgDOTASDOHeroStatsHistory::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASDOHeroStatsHistory::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTASDOHeroStatsHistory::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.match_id)
  return match_id_;
}
void CMsgDOTASDOHeroStatsHistory::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.match_id)
}

// optional uint32 game_mode = 2;
bool CMsgDOTASDOHeroStatsHistory::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASDOHeroStatsHistory::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.game_mode)
  return game_mode_;
}
void CMsgDOTASDOHeroStatsHistory::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.game_mode)
}

// optional uint32 lobby_type = 3;
bool CMsgDOTASDOHeroStatsHistory::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASDOHeroStatsHistory::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.lobby_type)
  return lobby_type_;
}
void CMsgDOTASDOHeroStatsHistory::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.lobby_type)
}

// optional uint32 start_time = 4;
bool CMsgDOTASDOHeroStatsHistory::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASDOHeroStatsHistory::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.start_time)
  return start_time_;
}
void CMsgDOTASDOHeroStatsHistory::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.start_time)
}

// optional bool won = 5;
bool CMsgDOTASDOHeroStatsHistory::has_won() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_won() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_won() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTASDOHeroStatsHistory::clear_won() {
  won_ = false;
  clear_has_won();
}
bool CMsgDOTASDOHeroStatsHistory::won() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.won)
  return won_;
}
void CMsgDOTASDOHeroStatsHistory::set_won(bool value) {
  set_has_won();
  won_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.won)
}

// optional uint32 gpm = 6;
bool CMsgDOTASDOHeroStatsHistory::has_gpm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_gpm() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTASDOHeroStatsHistory::clear_gpm() {
  gpm_ = 0u;
  clear_has_gpm();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.gpm)
  return gpm_;
}
void CMsgDOTASDOHeroStatsHistory::set_gpm(::google::protobuf::uint32 value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.gpm)
}

// optional uint32 xpm = 7;
bool CMsgDOTASDOHeroStatsHistory::has_xpm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_xpm() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_xpm() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTASDOHeroStatsHistory::clear_xpm() {
  xpm_ = 0u;
  clear_has_xpm();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.xpm)
  return xpm_;
}
void CMsgDOTASDOHeroStatsHistory::set_xpm(::google::protobuf::uint32 value) {
  set_has_xpm();
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.xpm)
}

// optional uint32 kills = 8;
bool CMsgDOTASDOHeroStatsHistory::has_kills() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_kills() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_kills() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTASDOHeroStatsHistory::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.kills)
  return kills_;
}
void CMsgDOTASDOHeroStatsHistory::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.kills)
}

// optional uint32 deaths = 9;
bool CMsgDOTASDOHeroStatsHistory::has_deaths() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_deaths() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTASDOHeroStatsHistory::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.deaths)
  return deaths_;
}
void CMsgDOTASDOHeroStatsHistory::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.deaths)
}

// optional uint32 assists = 10;
bool CMsgDOTASDOHeroStatsHistory::has_assists() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTASDOHeroStatsHistory::set_has_assists() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTASDOHeroStatsHistory::clear_has_assists() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTASDOHeroStatsHistory::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgDOTASDOHeroStatsHistory::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASDOHeroStatsHistory.assists)
  return assists_;
}
void CMsgDOTASDOHeroStatsHistory::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASDOHeroStatsHistory.assists)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonRewards_Reward::kNameFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kItemdefFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImportanceFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kBaseLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRepeatLevelFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kRewardTypeFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kImageFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kActionIdFieldNumber;
const int CMsgDOTASeasonRewards_Reward::kEffectIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonRewards.Reward)
}
CMsgDOTASeasonRewards_Reward::CMsgDOTASeasonRewards_Reward(const CMsgDOTASeasonRewards_Reward& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&itemdef_, &from.itemdef_,
    reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&itemdef_) + sizeof(effect_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonRewards.Reward)
}

void CMsgDOTASeasonRewards_Reward::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&itemdef_, 0, reinterpret_cast<char*>(&effect_index_) -
    reinterpret_cast<char*>(&itemdef_) + sizeof(effect_index_));
}

CMsgDOTASeasonRewards_Reward::~CMsgDOTASeasonRewards_Reward() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonRewards.Reward)
  SharedDtor();
}

void CMsgDOTASeasonRewards_Reward::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonRewards_Reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards_Reward::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards_Reward::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards_Reward::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonRewards_Reward* n = new CMsgDOTASeasonRewards_Reward;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonRewards_Reward::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_image()) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&itemdef_, 0, reinterpret_cast<char*>(&action_id_) -
      reinterpret_cast<char*>(&itemdef_) + sizeof(action_id_));
  }
  effect_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonRewards_Reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonRewards.Reward.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 itemdef = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_itemdef();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemdef_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 importance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_importance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &importance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_base_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 repeat_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_repeat_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeat_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonRewards_ERewardType_IsValid(value)) {
            set_reward_type(static_cast< ::proto::dota::CMsgDOTASeasonRewards_ERewardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonRewards.Reward.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_action_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effect_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_effect_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonRewards.Reward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonRewards.Reward)
  return false;
#undef DO_
}

void CMsgDOTASeasonRewards_Reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 itemdef = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemdef(), output);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->importance(), output);
  }

  // optional uint32 base_level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_level(), output);
  }

  // optional uint32 repeat_level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->repeat_level(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reward_type(), output);
  }

  // optional string image = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->image(), output);
  }

  // optional uint32 action_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action_id(), output);
  }

  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->effect_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonRewards.Reward)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards_Reward::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 itemdef = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemdef(), target);
  }

  // optional uint32 importance = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->importance(), target);
  }

  // optional uint32 base_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_level(), target);
  }

  // optional uint32 repeat_level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->repeat_level(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reward_type(), target);
  }

  // optional string image = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonRewards.Reward.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->image(), target);
  }

  // optional uint32 action_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->action_id(), target);
  }

  // optional uint32 effect_index = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->effect_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonRewards.Reward)
  return target;
}

size_t CMsgDOTASeasonRewards_Reward::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string image = 7;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 itemdef = 2;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemdef());
    }

    // optional uint32 importance = 3;
    if (has_importance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->importance());
    }

    // optional uint32 base_level = 4;
    if (has_base_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_level());
    }

    // optional uint32 repeat_level = 5;
    if (has_repeat_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeat_level());
    }

    // optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reward_type());
    }

    // optional uint32 action_id = 8;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  // optional uint32 effect_index = 9;
  if (has_effect_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards_Reward* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonRewards_Reward>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonRewards.Reward)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonRewards.Reward)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards_Reward::MergeFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000004u) {
      itemdef_ = from.itemdef_;
    }
    if (cached_has_bits & 0x00000008u) {
      importance_ = from.importance_;
    }
    if (cached_has_bits & 0x00000010u) {
      base_level_ = from.base_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeat_level_ = from.repeat_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_type_ = from.reward_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_effect_index(from.effect_index());
  }
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards_Reward::CopyFrom(const CMsgDOTASeasonRewards_Reward& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonRewards.Reward)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards_Reward::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards_Reward::Swap(CMsgDOTASeasonRewards_Reward* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonRewards_Reward::InternalSwap(CMsgDOTASeasonRewards_Reward* other) {
  name_.Swap(&other->name_);
  image_.Swap(&other->image_);
  std::swap(itemdef_, other->itemdef_);
  std::swap(importance_, other->importance_);
  std::swap(base_level_, other->base_level_);
  std::swap(repeat_level_, other->repeat_level_);
  std::swap(reward_type_, other->reward_type_);
  std::swap(action_id_, other->action_id_);
  std::swap(effect_index_, other->effect_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonRewards_Reward::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonRewards_Reward

// optional string name = 1;
bool CMsgDOTASeasonRewards_Reward::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonRewards_Reward::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTASeasonRewards_Reward::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  return name_.GetNoArena();
}
void CMsgDOTASeasonRewards_Reward::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
#if LANG_CXX11
void CMsgDOTASeasonRewards_Reward::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
#endif
void CMsgDOTASeasonRewards_Reward::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
void CMsgDOTASeasonRewards_Reward::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}
::std::string* CMsgDOTASeasonRewards_Reward::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonRewards_Reward::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonRewards.Reward.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonRewards_Reward::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonRewards.Reward.name)
}

// optional uint32 itemdef = 2;
bool CMsgDOTASeasonRewards_Reward::has_itemdef() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_itemdef() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_itemdef() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASeasonRewards_Reward::clear_itemdef() {
  itemdef_ = 0u;
  clear_has_itemdef();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::itemdef() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.itemdef)
  return itemdef_;
}
void CMsgDOTASeasonRewards_Reward::set_itemdef(::google::protobuf::uint32 value) {
  set_has_itemdef();
  itemdef_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.itemdef)
}

// optional uint32 importance = 3;
bool CMsgDOTASeasonRewards_Reward::has_importance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_importance() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_importance() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASeasonRewards_Reward::clear_importance() {
  importance_ = 0u;
  clear_has_importance();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::importance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.importance)
  return importance_;
}
void CMsgDOTASeasonRewards_Reward::set_importance(::google::protobuf::uint32 value) {
  set_has_importance();
  importance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.importance)
}

// optional uint32 base_level = 4;
bool CMsgDOTASeasonRewards_Reward::has_base_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_base_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_base_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTASeasonRewards_Reward::clear_base_level() {
  base_level_ = 0u;
  clear_has_base_level();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::base_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.base_level)
  return base_level_;
}
void CMsgDOTASeasonRewards_Reward::set_base_level(::google::protobuf::uint32 value) {
  set_has_base_level();
  base_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.base_level)
}

// optional uint32 repeat_level = 5;
bool CMsgDOTASeasonRewards_Reward::has_repeat_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_repeat_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_repeat_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTASeasonRewards_Reward::clear_repeat_level() {
  repeat_level_ = 0u;
  clear_has_repeat_level();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::repeat_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.repeat_level)
  return repeat_level_;
}
void CMsgDOTASeasonRewards_Reward::set_repeat_level(::google::protobuf::uint32 value) {
  set_has_repeat_level();
  repeat_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.repeat_level)
}

// optional .proto.dota.CMsgDOTASeasonRewards.ERewardType reward_type = 6 [default = EconItem];
bool CMsgDOTASeasonRewards_Reward::has_reward_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_reward_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_reward_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTASeasonRewards_Reward::clear_reward_type() {
  reward_type_ = 0;
  clear_has_reward_type();
}
::proto::dota::CMsgDOTASeasonRewards_ERewardType CMsgDOTASeasonRewards_Reward::reward_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.reward_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonRewards_ERewardType >(reward_type_);
}
void CMsgDOTASeasonRewards_Reward::set_reward_type(::proto::dota::CMsgDOTASeasonRewards_ERewardType value) {
  assert(::proto::dota::CMsgDOTASeasonRewards_ERewardType_IsValid(value));
  set_has_reward_type();
  reward_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.reward_type)
}

// optional string image = 7;
bool CMsgDOTASeasonRewards_Reward::has_image() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_image() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_image() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonRewards_Reward::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& CMsgDOTASeasonRewards_Reward::image() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  return image_.GetNoArena();
}
void CMsgDOTASeasonRewards_Reward::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
#if LANG_CXX11
void CMsgDOTASeasonRewards_Reward::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
#endif
void CMsgDOTASeasonRewards_Reward::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
void CMsgDOTASeasonRewards_Reward::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}
::std::string* CMsgDOTASeasonRewards_Reward::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonRewards_Reward::release_image() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonRewards.Reward.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonRewards_Reward::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonRewards.Reward.image)
}

// optional uint32 action_id = 8;
bool CMsgDOTASeasonRewards_Reward::has_action_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_action_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTASeasonRewards_Reward::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.action_id)
  return action_id_;
}
void CMsgDOTASeasonRewards_Reward::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.action_id)
}

// optional uint32 effect_index = 9;
bool CMsgDOTASeasonRewards_Reward::has_effect_index() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTASeasonRewards_Reward::set_has_effect_index() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTASeasonRewards_Reward::clear_has_effect_index() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTASeasonRewards_Reward::clear_effect_index() {
  effect_index_ = 0u;
  clear_has_effect_index();
}
::google::protobuf::uint32 CMsgDOTASeasonRewards_Reward::effect_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.Reward.effect_index)
  return effect_index_;
}
void CMsgDOTASeasonRewards_Reward::set_effect_index(::google::protobuf::uint32 value) {
  set_has_effect_index();
  effect_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonRewards.Reward.effect_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonRewards::kRewardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonRewards::CMsgDOTASeasonRewards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonRewards)
}
CMsgDOTASeasonRewards::CMsgDOTASeasonRewards(const CMsgDOTASeasonRewards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rewards_(from.rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonRewards)
}

void CMsgDOTASeasonRewards::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTASeasonRewards::~CMsgDOTASeasonRewards() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonRewards)
  SharedDtor();
}

void CMsgDOTASeasonRewards::SharedDtor() {
}

void CMsgDOTASeasonRewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonRewards::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonRewards& CMsgDOTASeasonRewards::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonRewards* CMsgDOTASeasonRewards::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonRewards* n = new CMsgDOTASeasonRewards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonRewards::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonRewards)
  rewards_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonRewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonRewards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonRewards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonRewards)
  return false;
#undef DO_
}

void CMsgDOTASeasonRewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonRewards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  for (unsigned int i = 0, n = this->rewards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonRewards)
}

::google::protobuf::uint8* CMsgDOTASeasonRewards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonRewards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  for (unsigned int i = 0, n = this->rewards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->rewards(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonRewards)
  return target;
}

size_t CMsgDOTASeasonRewards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonRewards)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
  {
    unsigned int count = this->rewards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewards(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonRewards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonRewards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonRewards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonRewards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonRewards)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonRewards::MergeFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonRewards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rewards_.MergeFrom(from.rewards_);
}

void CMsgDOTASeasonRewards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonRewards::CopyFrom(const CMsgDOTASeasonRewards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonRewards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonRewards::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonRewards::Swap(CMsgDOTASeasonRewards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonRewards::InternalSwap(CMsgDOTASeasonRewards* other) {
  rewards_.InternalSwap(&other->rewards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonRewards::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonRewards

// repeated .proto.dota.CMsgDOTASeasonRewards.Reward rewards = 1;
int CMsgDOTASeasonRewards::rewards_size() const {
  return rewards_.size();
}
void CMsgDOTASeasonRewards::clear_rewards() {
  rewards_.Clear();
}
const ::proto::dota::CMsgDOTASeasonRewards_Reward& CMsgDOTASeasonRewards::rewards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Get(index);
}
::proto::dota::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonRewards_Reward* CMsgDOTASeasonRewards::add_rewards() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >*
CMsgDOTASeasonRewards::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonRewards.rewards)
  return &rewards_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonRewards_Reward >&
CMsgDOTASeasonRewards::rewards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonRewards.rewards)
  return rewards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonAchievements_Achievement::kNameFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kDescriptionFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kImageFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kActionIdFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kMaxGrantsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kNormalPointsFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kTrackingAchievementFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementGoalFieldNumber;
const int CMsgDOTASeasonAchievements_Achievement::kAchievementLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}
CMsgDOTASeasonAchievements_Achievement::CMsgDOTASeasonAchievements_Achievement(const CMsgDOTASeasonAchievements_Achievement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  ::memcpy(&action_id_, &from.action_id_,
    reinterpret_cast<char*>(&achievement_level_) -
    reinterpret_cast<char*>(&action_id_) + sizeof(achievement_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}

void CMsgDOTASeasonAchievements_Achievement::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&action_id_, 0, reinterpret_cast<char*>(&achievement_level_) -
    reinterpret_cast<char*>(&action_id_) + sizeof(achievement_level_));
}

CMsgDOTASeasonAchievements_Achievement::~CMsgDOTASeasonAchievements_Achievement() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  SharedDtor();
}

void CMsgDOTASeasonAchievements_Achievement::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonAchievements_Achievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements_Achievement::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements_Achievement::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements_Achievement::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonAchievements_Achievement* n = new CMsgDOTASeasonAchievements_Achievement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonAchievements_Achievement::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_image()) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&action_id_, 0, reinterpret_cast<char*>(&achievement_goal_) -
      reinterpret_cast<char*>(&action_id_) + sizeof(achievement_goal_));
  }
  achievement_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonAchievements_Achievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_action_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_grants = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_grants();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_grants_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 normal_points = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_normal_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tracking_achievement = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tracking_achievement();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracking_achievement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_goal = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_achievement_goal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 achievement_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_achievement_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return false;
#undef DO_
}

void CMsgDOTASeasonAchievements_Achievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->action_id(), output);
  }

  // optional uint32 max_grants = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_grants(), output);
  }

  // optional uint32 normal_points = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->normal_points(), output);
  }

  // optional uint32 tracking_achievement = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tracking_achievement(), output);
  }

  // optional uint32 achievement_goal = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->achievement_goal(), output);
  }

  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->achievement_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonAchievements.Achievement)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements_Achievement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonAchievements.Achievement.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 action_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->action_id(), target);
  }

  // optional uint32 max_grants = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_grants(), target);
  }

  // optional uint32 normal_points = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->normal_points(), target);
  }

  // optional uint32 tracking_achievement = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tracking_achievement(), target);
  }

  // optional uint32 achievement_goal = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->achievement_goal(), target);
  }

  // optional uint32 achievement_level = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->achievement_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  return target;
}

size_t CMsgDOTASeasonAchievements_Achievement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 action_id = 4;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

    // optional uint32 max_grants = 5;
    if (has_max_grants()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_grants());
    }

    // optional uint32 normal_points = 6;
    if (has_normal_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_points());
    }

    // optional uint32 tracking_achievement = 7;
    if (has_tracking_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracking_achievement());
    }

    // optional uint32 achievement_goal = 8;
    if (has_achievement_goal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_goal());
    }

  }
  // optional uint32 achievement_level = 9;
  if (has_achievement_level()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements_Achievement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonAchievements_Achievement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonAchievements.Achievement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonAchievements.Achievement)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements_Achievement::MergeFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000008u) {
      action_id_ = from.action_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_grants_ = from.max_grants_;
    }
    if (cached_has_bits & 0x00000020u) {
      normal_points_ = from.normal_points_;
    }
    if (cached_has_bits & 0x00000040u) {
      tracking_achievement_ = from.tracking_achievement_;
    }
    if (cached_has_bits & 0x00000080u) {
      achievement_goal_ = from.achievement_goal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_achievement_level(from.achievement_level());
  }
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements_Achievement::CopyFrom(const CMsgDOTASeasonAchievements_Achievement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonAchievements.Achievement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements_Achievement::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements_Achievement::Swap(CMsgDOTASeasonAchievements_Achievement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonAchievements_Achievement::InternalSwap(CMsgDOTASeasonAchievements_Achievement* other) {
  name_.Swap(&other->name_);
  description_.Swap(&other->description_);
  image_.Swap(&other->image_);
  std::swap(action_id_, other->action_id_);
  std::swap(max_grants_, other->max_grants_);
  std::swap(normal_points_, other->normal_points_);
  std::swap(tracking_achievement_, other->tracking_achievement_);
  std::swap(achievement_goal_, other->achievement_goal_);
  std::swap(achievement_level_, other->achievement_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements_Achievement::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonAchievements_Achievement

// optional string name = 1;
bool CMsgDOTASeasonAchievements_Achievement::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTASeasonAchievements_Achievement::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  return name_.GetNoArena();
}
void CMsgDOTASeasonAchievements_Achievement::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
#if LANG_CXX11
void CMsgDOTASeasonAchievements_Achievement::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
#endif
void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
void CMsgDOTASeasonAchievements_Achievement::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}
::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonAchievements_Achievement::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonAchievements_Achievement::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.name)
}

// optional string description = 2;
bool CMsgDOTASeasonAchievements_Achievement::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CMsgDOTASeasonAchievements_Achievement::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  return description_.GetNoArena();
}
void CMsgDOTASeasonAchievements_Achievement::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
#if LANG_CXX11
void CMsgDOTASeasonAchievements_Achievement::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
#endif
void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
void CMsgDOTASeasonAchievements_Achievement::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}
::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonAchievements_Achievement::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonAchievements_Achievement::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.description)
}

// optional string image = 3;
bool CMsgDOTASeasonAchievements_Achievement::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& CMsgDOTASeasonAchievements_Achievement::image() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  return image_.GetNoArena();
}
void CMsgDOTASeasonAchievements_Achievement::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
#if LANG_CXX11
void CMsgDOTASeasonAchievements_Achievement::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
#endif
void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
void CMsgDOTASeasonAchievements_Achievement::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}
::std::string* CMsgDOTASeasonAchievements_Achievement::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonAchievements_Achievement::release_image() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonAchievements_Achievement::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonAchievements.Achievement.image)
}

// optional uint32 action_id = 4;
bool CMsgDOTASeasonAchievements_Achievement::has_action_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_action_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.action_id)
  return action_id_;
}
void CMsgDOTASeasonAchievements_Achievement::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.action_id)
}

// optional uint32 max_grants = 5;
bool CMsgDOTASeasonAchievements_Achievement::has_max_grants() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_max_grants() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_max_grants() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_max_grants() {
  max_grants_ = 0u;
  clear_has_max_grants();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::max_grants() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.max_grants)
  return max_grants_;
}
void CMsgDOTASeasonAchievements_Achievement::set_max_grants(::google::protobuf::uint32 value) {
  set_has_max_grants();
  max_grants_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.max_grants)
}

// optional uint32 normal_points = 6;
bool CMsgDOTASeasonAchievements_Achievement::has_normal_points() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_normal_points() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_normal_points() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_normal_points() {
  normal_points_ = 0u;
  clear_has_normal_points();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::normal_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.normal_points)
  return normal_points_;
}
void CMsgDOTASeasonAchievements_Achievement::set_normal_points(::google::protobuf::uint32 value) {
  set_has_normal_points();
  normal_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.normal_points)
}

// optional uint32 tracking_achievement = 7;
bool CMsgDOTASeasonAchievements_Achievement::has_tracking_achievement() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_tracking_achievement() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_tracking_achievement() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_tracking_achievement() {
  tracking_achievement_ = 0u;
  clear_has_tracking_achievement();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::tracking_achievement() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
  return tracking_achievement_;
}
void CMsgDOTASeasonAchievements_Achievement::set_tracking_achievement(::google::protobuf::uint32 value) {
  set_has_tracking_achievement();
  tracking_achievement_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.tracking_achievement)
}

// optional uint32 achievement_goal = 8;
bool CMsgDOTASeasonAchievements_Achievement::has_achievement_goal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_achievement_goal() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_achievement_goal() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_achievement_goal() {
  achievement_goal_ = 0u;
  clear_has_achievement_goal();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_goal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_goal)
  return achievement_goal_;
}
void CMsgDOTASeasonAchievements_Achievement::set_achievement_goal(::google::protobuf::uint32 value) {
  set_has_achievement_goal();
  achievement_goal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_goal)
}

// optional uint32 achievement_level = 9;
bool CMsgDOTASeasonAchievements_Achievement::has_achievement_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTASeasonAchievements_Achievement::set_has_achievement_level() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_has_achievement_level() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTASeasonAchievements_Achievement::clear_achievement_level() {
  achievement_level_ = 0u;
  clear_has_achievement_level();
}
::google::protobuf::uint32 CMsgDOTASeasonAchievements_Achievement::achievement_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_level)
  return achievement_level_;
}
void CMsgDOTASeasonAchievements_Achievement::set_achievement_level(::google::protobuf::uint32 value) {
  set_has_achievement_level();
  achievement_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonAchievements.Achievement.achievement_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonAchievements::kAchievementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonAchievements)
}
CMsgDOTASeasonAchievements::CMsgDOTASeasonAchievements(const CMsgDOTASeasonAchievements& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      achievements_(from.achievements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonAchievements)
}

void CMsgDOTASeasonAchievements::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTASeasonAchievements::~CMsgDOTASeasonAchievements() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonAchievements)
  SharedDtor();
}

void CMsgDOTASeasonAchievements::SharedDtor() {
}

void CMsgDOTASeasonAchievements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonAchievements::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonAchievements& CMsgDOTASeasonAchievements::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonAchievements* CMsgDOTASeasonAchievements::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonAchievements* n = new CMsgDOTASeasonAchievements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonAchievements::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonAchievements)
  achievements_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonAchievements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonAchievements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonAchievements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonAchievements)
  return false;
#undef DO_
}

void CMsgDOTASeasonAchievements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonAchievements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievements(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonAchievements)
}

::google::protobuf::uint8* CMsgDOTASeasonAchievements::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonAchievements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  for (unsigned int i = 0, n = this->achievements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->achievements(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonAchievements)
  return target;
}

size_t CMsgDOTASeasonAchievements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonAchievements)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
  {
    unsigned int count = this->achievements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievements(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonAchievements::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonAchievements* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonAchievements>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonAchievements)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonAchievements)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonAchievements::MergeFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonAchievements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  achievements_.MergeFrom(from.achievements_);
}

void CMsgDOTASeasonAchievements::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonAchievements::CopyFrom(const CMsgDOTASeasonAchievements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonAchievements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonAchievements::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonAchievements::Swap(CMsgDOTASeasonAchievements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonAchievements::InternalSwap(CMsgDOTASeasonAchievements* other) {
  achievements_.InternalSwap(&other->achievements_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonAchievements::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonAchievements

// repeated .proto.dota.CMsgDOTASeasonAchievements.Achievement achievements = 1;
int CMsgDOTASeasonAchievements::achievements_size() const {
  return achievements_.size();
}
void CMsgDOTASeasonAchievements::clear_achievements() {
  achievements_.Clear();
}
const ::proto::dota::CMsgDOTASeasonAchievements_Achievement& CMsgDOTASeasonAchievements::achievements(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Get(index);
}
::proto::dota::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::mutable_achievements(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonAchievements_Achievement* CMsgDOTASeasonAchievements::add_achievements() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >*
CMsgDOTASeasonAchievements::mutable_achievements() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return &achievements_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonAchievements_Achievement >&
CMsgDOTASeasonAchievements::achievements() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonAchievements.achievements)
  return achievements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Choice::kValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMinRawValueFieldNumber;
const int CMsgDOTASeasonPredictions_Choice::kMaxRawValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
}
CMsgDOTASeasonPredictions_Choice::CMsgDOTASeasonPredictions_Choice(const CMsgDOTASeasonPredictions_Choice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&value_, &from.value_,
    reinterpret_cast<char*>(&max_raw_value_) -
    reinterpret_cast<char*>(&value_) + sizeof(max_raw_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
}

void CMsgDOTASeasonPredictions_Choice::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, reinterpret_cast<char*>(&max_raw_value_) -
    reinterpret_cast<char*>(&value_) + sizeof(max_raw_value_));
}

CMsgDOTASeasonPredictions_Choice::~CMsgDOTASeasonPredictions_Choice() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Choice)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Choice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_Choice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Choice::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Choice::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Choice::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions_Choice* n = new CMsgDOTASeasonPredictions_Choice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions_Choice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&value_, 0, reinterpret_cast<char*>(&max_raw_value_) -
      reinterpret_cast<char*>(&value_) + sizeof(max_raw_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions_Choice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_raw_value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_min_raw_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_raw_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_raw_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_raw_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_raw_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Choice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 min_raw_value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->min_raw_value(), output);
  }

  // optional uint32 max_raw_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_raw_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Choice)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Choice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Choice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 min_raw_value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->min_raw_value(), target);
  }

  // optional uint32 max_raw_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_raw_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Choice)
  return target;
}

size_t CMsgDOTASeasonPredictions_Choice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 min_raw_value = 3;
    if (has_min_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_raw_value());
    }

    // optional uint32 max_raw_value = 4;
    if (has_max_raw_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_raw_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Choice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions_Choice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Choice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Choice)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Choice::MergeFrom(const CMsgDOTASeasonPredictions_Choice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_raw_value_ = from.min_raw_value_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_raw_value_ = from.max_raw_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Choice::CopyFrom(const CMsgDOTASeasonPredictions_Choice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Choice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Choice::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Choice::Swap(CMsgDOTASeasonPredictions_Choice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Choice::InternalSwap(CMsgDOTASeasonPredictions_Choice* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(min_raw_value_, other->min_raw_value_);
  std::swap(max_raw_value_, other->max_raw_value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Choice::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions_Choice

// optional uint32 value = 1;
bool CMsgDOTASeasonPredictions_Choice::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonPredictions_Choice::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonPredictions_Choice::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonPredictions_Choice::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.value)
  return value_;
}
void CMsgDOTASeasonPredictions_Choice::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.value)
}

// optional string name = 2;
bool CMsgDOTASeasonPredictions_Choice::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions_Choice::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions_Choice::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions_Choice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTASeasonPredictions_Choice::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  return name_.GetNoArena();
}
void CMsgDOTASeasonPredictions_Choice::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_Choice::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
#endif
void CMsgDOTASeasonPredictions_Choice::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
void CMsgDOTASeasonPredictions_Choice::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}
::std::string* CMsgDOTASeasonPredictions_Choice::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_Choice::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_Choice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Choice.name)
}

// optional uint32 min_raw_value = 3;
bool CMsgDOTASeasonPredictions_Choice::has_min_raw_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASeasonPredictions_Choice::set_has_min_raw_value() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASeasonPredictions_Choice::clear_has_min_raw_value() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASeasonPredictions_Choice::clear_min_raw_value() {
  min_raw_value_ = 0u;
  clear_has_min_raw_value();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::min_raw_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.min_raw_value)
  return min_raw_value_;
}
void CMsgDOTASeasonPredictions_Choice::set_min_raw_value(::google::protobuf::uint32 value) {
  set_has_min_raw_value();
  min_raw_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.min_raw_value)
}

// optional uint32 max_raw_value = 4;
bool CMsgDOTASeasonPredictions_Choice::has_max_raw_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASeasonPredictions_Choice::set_has_max_raw_value() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASeasonPredictions_Choice::clear_has_max_raw_value() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASeasonPredictions_Choice::clear_max_raw_value() {
  max_raw_value_ = 0u;
  clear_has_max_raw_value();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Choice::max_raw_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Choice.max_raw_value)
  return max_raw_value_;
}
void CMsgDOTASeasonPredictions_Choice::set_max_raw_value(::google::protobuf::uint32 value) {
  set_has_max_raw_value();
  max_raw_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Choice.max_raw_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Answers::kAnswerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
}
CMsgDOTASeasonPredictions_Answers::CMsgDOTASeasonPredictions_Answers(const CMsgDOTASeasonPredictions_Answers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_id_ = from.answer_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
}

void CMsgDOTASeasonPredictions_Answers::SharedCtor() {
  _cached_size_ = 0;
  answer_id_ = 0u;
}

CMsgDOTASeasonPredictions_Answers::~CMsgDOTASeasonPredictions_Answers() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Answers)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Answers::SharedDtor() {
}

void CMsgDOTASeasonPredictions_Answers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Answers::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Answers::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Answers::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions_Answers* n = new CMsgDOTASeasonPredictions_Answers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions_Answers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  answer_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions_Answers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 answer_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_answer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Answers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 answer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->answer_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Answers)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Answers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 answer_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->answer_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Answers)
  return target;
}

size_t CMsgDOTASeasonPredictions_Answers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 answer_id = 1;
  if (has_answer_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->answer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Answers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions_Answers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Answers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Answers)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Answers::MergeFrom(const CMsgDOTASeasonPredictions_Answers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_answer_id()) {
    set_answer_id(from.answer_id());
  }
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Answers::CopyFrom(const CMsgDOTASeasonPredictions_Answers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Answers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Answers::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Answers::Swap(CMsgDOTASeasonPredictions_Answers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Answers::InternalSwap(CMsgDOTASeasonPredictions_Answers* other) {
  std::swap(answer_id_, other->answer_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Answers::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions_Answers

// optional uint32 answer_id = 1;
bool CMsgDOTASeasonPredictions_Answers::has_answer_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions_Answers::set_has_answer_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions_Answers::clear_has_answer_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions_Answers::clear_answer_id() {
  answer_id_ = 0u;
  clear_has_answer_id();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Answers::answer_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Answers.answer_id)
  return answer_id_;
}
void CMsgDOTASeasonPredictions_Answers::set_answer_id(::google::protobuf::uint32 value) {
  set_has_answer_id();
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Answers.answer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_QueryKeyValues::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_QueryKeyValues::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}
CMsgDOTASeasonPredictions_QueryKeyValues::CMsgDOTASeasonPredictions_QueryKeyValues(const CMsgDOTASeasonPredictions_QueryKeyValues& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTASeasonPredictions_QueryKeyValues::~CMsgDOTASeasonPredictions_QueryKeyValues() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_QueryKeyValues::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_QueryKeyValues::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_QueryKeyValues::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions_QueryKeyValues* n = new CMsgDOTASeasonPredictions_QueryKeyValues;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_value()) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions_QueryKeyValues::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_QueryKeyValues::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_QueryKeyValues::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  return target;
}

size_t CMsgDOTASeasonPredictions_QueryKeyValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_QueryKeyValues* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions_QueryKeyValues>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::MergeFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_QueryKeyValues::CopyFrom(const CMsgDOTASeasonPredictions_QueryKeyValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_QueryKeyValues::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_QueryKeyValues::Swap(CMsgDOTASeasonPredictions_QueryKeyValues* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_QueryKeyValues::InternalSwap(CMsgDOTASeasonPredictions_QueryKeyValues* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_QueryKeyValues::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions_QueryKeyValues

// optional string name = 1;
bool CMsgDOTASeasonPredictions_QueryKeyValues::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return name_.GetNoArena();
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
#endif
void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}
::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.name)
}

// optional string value = 2;
bool CMsgDOTASeasonPredictions_QueryKeyValues::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonPredictions_QueryKeyValues::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
const ::std::string& CMsgDOTASeasonPredictions_QueryKeyValues::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return value_.GetNoArena();
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
#endif
void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}
::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_QueryKeyValues::release_value() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_QueryKeyValues::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_Prediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kStartDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockDateFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kRewardFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerTypeFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswerIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kAnswersFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kQueryBindParamsFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionIdFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionValueFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kLockOnSelectionSetFieldNumber;
const int CMsgDOTASeasonPredictions_Prediction::kUseAnswerValueRangesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}
CMsgDOTASeasonPredictions_Prediction::CMsgDOTASeasonPredictions_Prediction(const CMsgDOTASeasonPredictions_Prediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      choices_(from.choices_),
      answers_(from.answers_),
      query_bind_params_(from.query_bind_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_question()) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_name()) {
    query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&use_answer_value_ranges_) -
    reinterpret_cast<char*>(&type_) + sizeof(use_answer_value_ranges_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}

void CMsgDOTASeasonPredictions_Prediction::SharedCtor() {
  _cached_size_ = 0;
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&use_answer_value_ranges_) -
    reinterpret_cast<char*>(&type_) + sizeof(use_answer_value_ranges_));
}

CMsgDOTASeasonPredictions_Prediction::~CMsgDOTASeasonPredictions_Prediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_Prediction::SharedDtor() {
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_Prediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_Prediction::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions_Prediction::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions_Prediction::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions_Prediction* n = new CMsgDOTASeasonPredictions_Prediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions_Prediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  choices_.Clear();
  answers_.Clear();
  query_bind_params_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_question()) {
      GOOGLE_DCHECK(!question_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*question_.UnsafeRawStringPointer())->clear();
    }
    if (has_query_name()) {
      GOOGLE_DCHECK(!query_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&answer_type_) -
      reinterpret_cast<char*>(&type_) + sizeof(answer_type_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&answer_id_, 0, reinterpret_cast<char*>(&use_answer_value_ranges_) -
      reinterpret_cast<char*>(&answer_id_) + sizeof(use_answer_value_ranges_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions_Prediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string question = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 selection_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_selection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_start_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_date = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lock_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_reward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value)) {
            set_answer_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 answer_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_answer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), this->query_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 query_bind_params = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96u, input, this->mutable_query_bind_params())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_query_bind_params())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_on_selection_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_lock_on_selection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lock_on_selection_value = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_lock_on_selection_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_on_selection_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lock_on_selection_set = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_lock_on_selection_set();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_on_selection_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool use_answer_value_ranges = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_use_answer_value_ranges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_answer_value_ranges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_Prediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->question(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  for (unsigned int i = 0, n = this->choices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->choices(i), output);
  }

  // optional uint32 selection_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selection_id(), output);
  }

  // optional uint32 start_date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_date(), output);
  }

  // optional uint32 lock_date = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lock_date(), output);
  }

  // optional uint32 reward = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->answer_type(), output);
  }

  // optional uint32 answer_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->answer_id(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  for (unsigned int i = 0, n = this->answers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->answers(i), output);
  }

  // optional string query_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->query_name(), output);
  }

  // repeated uint32 query_bind_params = 12;
  for (int i = 0, n = this->query_bind_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->query_bind_params(i), output);
  }

  // optional uint32 lock_on_selection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lock_on_selection_id(), output);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lock_on_selection_value(), output);
  }

  // optional bool lock_on_selection_set = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->lock_on_selection_set(), output);
  }

  // optional bool use_answer_value_ranges = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_answer_value_ranges(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.Prediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_Prediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string question = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->question(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  for (unsigned int i = 0, n = this->choices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->choices(i), deterministic, target);
  }

  // optional uint32 selection_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->selection_id(), target);
  }

  // optional uint32 start_date = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_date(), target);
  }

  // optional uint32 lock_date = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lock_date(), target);
  }

  // optional uint32 reward = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->answer_type(), target);
  }

  // optional uint32 answer_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->answer_id(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  for (unsigned int i = 0, n = this->answers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->answers(i), deterministic, target);
  }

  // optional string query_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->query_name(), target);
  }

  // repeated uint32 query_bind_params = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(12, this->query_bind_params_, target);

  // optional uint32 lock_on_selection_id = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lock_on_selection_id(), target);
  }

  // optional uint32 lock_on_selection_value = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lock_on_selection_value(), target);
  }

  // optional bool lock_on_selection_set = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->lock_on_selection_set(), target);
  }

  // optional bool use_answer_value_ranges = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_answer_value_ranges(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  return target;
}

size_t CMsgDOTASeasonPredictions_Prediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
  {
    unsigned int count = this->choices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->choices(i));
    }
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
  {
    unsigned int count = this->answers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->answers(i));
    }
  }

  // repeated uint32 query_bind_params = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->query_bind_params_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->query_bind_params_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string question = 2;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string query_name = 11;
    if (has_query_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 selection_id = 4;
    if (has_selection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selection_id());
    }

    // optional uint32 start_date = 5;
    if (has_start_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_date());
    }

    // optional uint32 lock_date = 6;
    if (has_lock_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_date());
    }

    // optional uint32 reward = 7;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
    if (has_answer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_type());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 answer_id = 9;
    if (has_answer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_id());
    }

    // optional uint32 lock_on_selection_id = 13;
    if (has_lock_on_selection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_id());
    }

    // optional uint32 lock_on_selection_value = 14;
    if (has_lock_on_selection_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lock_on_selection_value());
    }

    // optional bool lock_on_selection_set = 15;
    if (has_lock_on_selection_set()) {
      total_size += 1 + 1;
    }

    // optional bool use_answer_value_ranges = 16;
    if (has_use_answer_value_ranges()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_Prediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions_Prediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.Prediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.Prediction)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_Prediction::MergeFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  answers_.MergeFrom(from.answers_);
  query_bind_params_.MergeFrom(from.query_bind_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_question();
      question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_query_name();
      query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_id_ = from.selection_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_date_ = from.start_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      lock_date_ = from.lock_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      reward_ = from.reward_;
    }
    if (cached_has_bits & 0x00000080u) {
      answer_type_ = from.answer_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      answer_id_ = from.answer_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      lock_on_selection_id_ = from.lock_on_selection_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      lock_on_selection_value_ = from.lock_on_selection_value_;
    }
    if (cached_has_bits & 0x00000800u) {
      lock_on_selection_set_ = from.lock_on_selection_set_;
    }
    if (cached_has_bits & 0x00001000u) {
      use_answer_value_ranges_ = from.use_answer_value_ranges_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_Prediction::CopyFrom(const CMsgDOTASeasonPredictions_Prediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.Prediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_Prediction::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_Prediction::Swap(CMsgDOTASeasonPredictions_Prediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_Prediction::InternalSwap(CMsgDOTASeasonPredictions_Prediction* other) {
  choices_.InternalSwap(&other->choices_);
  answers_.InternalSwap(&other->answers_);
  query_bind_params_.InternalSwap(&other->query_bind_params_);
  question_.Swap(&other->question_);
  query_name_.Swap(&other->query_name_);
  std::swap(type_, other->type_);
  std::swap(selection_id_, other->selection_id_);
  std::swap(start_date_, other->start_date_);
  std::swap(lock_date_, other->lock_date_);
  std::swap(reward_, other->reward_);
  std::swap(answer_type_, other->answer_type_);
  std::swap(answer_id_, other->answer_id_);
  std::swap(lock_on_selection_id_, other->lock_on_selection_id_);
  std::swap(lock_on_selection_value_, other->lock_on_selection_value_);
  std::swap(lock_on_selection_set_, other->lock_on_selection_set_);
  std::swap(use_answer_value_ranges_, other->use_answer_value_ranges_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_Prediction::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions_Prediction

// optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 1 [default = Generic];
bool CMsgDOTASeasonPredictions_Prediction::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::proto::dota::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_Prediction::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
void CMsgDOTASeasonPredictions_Prediction::set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.type)
}

// optional string question = 2;
bool CMsgDOTASeasonPredictions_Prediction::has_question() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_question() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_question() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_question();
}
const ::std::string& CMsgDOTASeasonPredictions_Prediction::question() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  return question_.GetNoArena();
}
void CMsgDOTASeasonPredictions_Prediction::set_question(const ::std::string& value) {
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_Prediction::set_question(::std::string&& value) {
  set_has_question();
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
#endif
void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
void CMsgDOTASeasonPredictions_Prediction::set_question(const char* value, size_t size) {
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}
::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_question() {
  set_has_question();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_Prediction::release_question() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
  clear_has_question();
  return question_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_Prediction::set_allocated_question(::std::string* question) {
  if (question != NULL) {
    set_has_question();
  } else {
    clear_has_question();
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Prediction.question)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 3;
int CMsgDOTASeasonPredictions_Prediction::choices_size() const {
  return choices_.size();
}
void CMsgDOTASeasonPredictions_Prediction::clear_choices() {
  choices_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_Prediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_Prediction::add_choices() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_Prediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return &choices_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_Prediction::choices() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.choices)
  return choices_;
}

// optional uint32 selection_id = 4;
bool CMsgDOTASeasonPredictions_Prediction::has_selection_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_selection_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_selection_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_selection_id() {
  selection_id_ = 0u;
  clear_has_selection_id();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::selection_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.selection_id)
  return selection_id_;
}
void CMsgDOTASeasonPredictions_Prediction::set_selection_id(::google::protobuf::uint32 value) {
  set_has_selection_id();
  selection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.selection_id)
}

// optional uint32 start_date = 5;
bool CMsgDOTASeasonPredictions_Prediction::has_start_date() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_start_date() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_start_date() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_start_date() {
  start_date_ = 0u;
  clear_has_start_date();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::start_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.start_date)
  return start_date_;
}
void CMsgDOTASeasonPredictions_Prediction::set_start_date(::google::protobuf::uint32 value) {
  set_has_start_date();
  start_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.start_date)
}

// optional uint32 lock_date = 6;
bool CMsgDOTASeasonPredictions_Prediction::has_lock_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_lock_date() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_lock_date() {
  lock_date_ = 0u;
  clear_has_lock_date();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_date)
  return lock_date_;
}
void CMsgDOTASeasonPredictions_Prediction::set_lock_date(::google::protobuf::uint32 value) {
  set_has_lock_date();
  lock_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_date)
}

// optional uint32 reward = 7;
bool CMsgDOTASeasonPredictions_Prediction::has_reward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_reward() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_reward() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_reward() {
  reward_ = 0u;
  clear_has_reward();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::reward() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.reward)
  return reward_;
}
void CMsgDOTASeasonPredictions_Prediction::set_reward(::google::protobuf::uint32 value) {
  set_has_reward();
  reward_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.reward)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eAnswerType answer_type = 8 [default = SingleInt];
bool CMsgDOTASeasonPredictions_Prediction::has_answer_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_answer_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_answer_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_answer_type() {
  answer_type_ = 0;
  clear_has_answer_type();
}
::proto::dota::CMsgDOTASeasonPredictions_eAnswerType CMsgDOTASeasonPredictions_Prediction::answer_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eAnswerType >(answer_type_);
}
void CMsgDOTASeasonPredictions_Prediction::set_answer_type(::proto::dota::CMsgDOTASeasonPredictions_eAnswerType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eAnswerType_IsValid(value));
  set_has_answer_type();
  answer_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_type)
}

// optional uint32 answer_id = 9;
bool CMsgDOTASeasonPredictions_Prediction::has_answer_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_answer_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_answer_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_answer_id() {
  answer_id_ = 0u;
  clear_has_answer_id();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::answer_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_id)
  return answer_id_;
}
void CMsgDOTASeasonPredictions_Prediction::set_answer_id(::google::protobuf::uint32 value) {
  set_has_answer_id();
  answer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.answer_id)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Answers answers = 10;
int CMsgDOTASeasonPredictions_Prediction::answers_size() const {
  return answers_.size();
}
void CMsgDOTASeasonPredictions_Prediction::clear_answers() {
  answers_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_Answers& CMsgDOTASeasonPredictions_Prediction::answers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::mutable_answers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Answers* CMsgDOTASeasonPredictions_Prediction::add_answers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >*
CMsgDOTASeasonPredictions_Prediction::mutable_answers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return &answers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Answers >&
CMsgDOTASeasonPredictions_Prediction::answers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.answers)
  return answers_;
}

// optional string query_name = 11;
bool CMsgDOTASeasonPredictions_Prediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_query_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_query_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_query_name() {
  query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_name();
}
const ::std::string& CMsgDOTASeasonPredictions_Prediction::query_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  return query_name_.GetNoArena();
}
void CMsgDOTASeasonPredictions_Prediction::set_query_name(const ::std::string& value) {
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_Prediction::set_query_name(::std::string&& value) {
  set_has_query_name();
  query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
#endif
void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
void CMsgDOTASeasonPredictions_Prediction::set_query_name(const char* value, size_t size) {
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}
::std::string* CMsgDOTASeasonPredictions_Prediction::mutable_query_name() {
  set_has_query_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  return query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_Prediction::release_query_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
  clear_has_query_name();
  return query_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_Prediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name != NULL) {
    set_has_query_name();
  } else {
    clear_has_query_name();
  }
  query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_name)
}

// repeated uint32 query_bind_params = 12;
int CMsgDOTASeasonPredictions_Prediction::query_bind_params_size() const {
  return query_bind_params_.size();
}
void CMsgDOTASeasonPredictions_Prediction::clear_query_bind_params() {
  query_bind_params_.Clear();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::query_bind_params(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_.Get(index);
}
void CMsgDOTASeasonPredictions_Prediction::set_query_bind_params(int index, ::google::protobuf::uint32 value) {
  query_bind_params_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
void CMsgDOTASeasonPredictions_Prediction::add_query_bind_params(::google::protobuf::uint32 value) {
  query_bind_params_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTASeasonPredictions_Prediction::query_bind_params() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return query_bind_params_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTASeasonPredictions_Prediction::mutable_query_bind_params() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.Prediction.query_bind_params)
  return &query_bind_params_;
}

// optional uint32 lock_on_selection_id = 13;
bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_id() {
  lock_on_selection_id_ = 0u;
  clear_has_lock_on_selection_id();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
  return lock_on_selection_id_;
}
void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_id(::google::protobuf::uint32 value) {
  set_has_lock_on_selection_id();
  lock_on_selection_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_id)
}

// optional uint32 lock_on_selection_value = 14;
bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_value() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_value() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_value() {
  lock_on_selection_value_ = 0u;
  clear_has_lock_on_selection_value();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_Prediction::lock_on_selection_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
  return lock_on_selection_value_;
}
void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_value(::google::protobuf::uint32 value) {
  set_has_lock_on_selection_value();
  lock_on_selection_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_value)
}

// optional bool lock_on_selection_set = 15;
bool CMsgDOTASeasonPredictions_Prediction::has_lock_on_selection_set() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_lock_on_selection_set() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_lock_on_selection_set() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_lock_on_selection_set() {
  lock_on_selection_set_ = false;
  clear_has_lock_on_selection_set();
}
bool CMsgDOTASeasonPredictions_Prediction::lock_on_selection_set() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
  return lock_on_selection_set_;
}
void CMsgDOTASeasonPredictions_Prediction::set_lock_on_selection_set(bool value) {
  set_has_lock_on_selection_set();
  lock_on_selection_set_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.lock_on_selection_set)
}

// optional bool use_answer_value_ranges = 16;
bool CMsgDOTASeasonPredictions_Prediction::has_use_answer_value_ranges() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTASeasonPredictions_Prediction::set_has_use_answer_value_ranges() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_has_use_answer_value_ranges() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTASeasonPredictions_Prediction::clear_use_answer_value_ranges() {
  use_answer_value_ranges_ = false;
  clear_has_use_answer_value_ranges();
}
bool CMsgDOTASeasonPredictions_Prediction::use_answer_value_ranges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
  return use_answer_value_ranges_;
}
void CMsgDOTASeasonPredictions_Prediction::set_use_answer_value_ranges(bool value) {
  set_has_use_answer_value_ranges();
  use_answer_value_ranges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.Prediction.use_answer_value_ranges)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions_InGamePrediction::kIdFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kGroupFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQuestionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kChoicesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRequiredHeroesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryNameFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kQueryValuesFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kAnswerResolutionTypeFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kPointsToGrantFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRewardActionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kDebugForceSelectionFieldNumber;
const int CMsgDOTASeasonPredictions_InGamePrediction::kRawValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}
CMsgDOTASeasonPredictions_InGamePrediction::CMsgDOTASeasonPredictions_InGamePrediction(const CMsgDOTASeasonPredictions_InGamePrediction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      choices_(from.choices_),
      required_heroes_(from.required_heroes_),
      query_values_(from.query_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_question()) {
    question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
  }
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_query_name()) {
    query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&raw_value_type_) -
    reinterpret_cast<char*>(&id_) + sizeof(raw_value_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&raw_value_type_) -
    reinterpret_cast<char*>(&id_) + sizeof(raw_value_type_));
}

CMsgDOTASeasonPredictions_InGamePrediction::~CMsgDOTASeasonPredictions_InGamePrediction() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  SharedDtor();
}

void CMsgDOTASeasonPredictions_InGamePrediction::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  question_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  query_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeasonPredictions_InGamePrediction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions_InGamePrediction::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions_InGamePrediction::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions_InGamePrediction::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions_InGamePrediction* n = new CMsgDOTASeasonPredictions_InGamePrediction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions_InGamePrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  choices_.Clear();
  required_heroes_.Clear();
  query_values_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_question()) {
      GOOGLE_DCHECK(!question_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*question_.UnsafeRawStringPointer())->clear();
    }
    if (has_query_name()) {
      GOOGLE_DCHECK(!query_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*query_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&points_to_grant_) -
      reinterpret_cast<char*>(&id_) + sizeof(points_to_grant_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&reward_action_, 0, reinterpret_cast<char*>(&raw_value_type_) -
      reinterpret_cast<char*>(&reward_action_) + sizeof(raw_value_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions_InGamePrediction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value)) {
            set_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value)) {
            set_group(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string question = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_question()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->question().data(), this->question().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_choices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string required_heroes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_required_heroes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->required_heroes(this->required_heroes_size() - 1).data(),
            this->required_heroes(this->required_heroes_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string query_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->query_name().data(), this->query_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_query_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value)) {
            set_answer_resolution_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 points_to_grant = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_points_to_grant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_to_grant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_action = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reward_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 debug_force_selection = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_debug_force_selection();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debug_force_selection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value)) {
            set_raw_value_type(static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions_InGamePrediction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->group(), output);
  }

  // optional string question = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->question(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  for (unsigned int i = 0, n = this->choices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->choices(i), output);
  }

  // repeated string required_heroes = 7;
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_heroes(i).data(), this->required_heroes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->required_heroes(i), output);
  }

  // optional string query_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->query_name(), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (unsigned int i = 0, n = this->query_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->query_values(i), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->answer_resolution_type(), output);
  }

  // optional uint32 points_to_grant = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->points_to_grant(), output);
  }

  // optional uint32 reward_action = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reward_action(), output);
  }

  // optional uint32 debug_force_selection = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->debug_force_selection(), output);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->raw_value_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions_InGamePrediction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->group(), target);
  }

  // optional string question = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->question().data(), this->question().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->question(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  for (unsigned int i = 0, n = this->choices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->choices(i), deterministic, target);
  }

  // repeated string required_heroes = 7;
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->required_heroes(i).data(), this->required_heroes(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->required_heroes(i), target);
  }

  // optional string query_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->query_name().data(), this->query_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->query_name(), target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  for (unsigned int i = 0, n = this->query_values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->query_values(i), deterministic, target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->answer_resolution_type(), target);
  }

  // optional uint32 points_to_grant = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->points_to_grant(), target);
  }

  // optional uint32 reward_action = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->reward_action(), target);
  }

  // optional uint32 debug_force_selection = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->debug_force_selection(), target);
  }

  // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->raw_value_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  return target;
}

size_t CMsgDOTASeasonPredictions_InGamePrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
  {
    unsigned int count = this->choices_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->choices(i));
    }
  }

  // repeated string required_heroes = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->required_heroes_size());
  for (int i = 0, n = this->required_heroes_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->required_heroes(i));
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
  {
    unsigned int count = this->query_values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->query_values(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string question = 5;
    if (has_question()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->question());
    }

    // optional string query_name = 8;
    if (has_query_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query_name());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->group());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
    if (has_answer_resolution_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->answer_resolution_type());
    }

    // optional uint32 points_to_grant = 11;
    if (has_points_to_grant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points_to_grant());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 reward_action = 12;
    if (has_reward_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_action());
    }

    // optional uint32 debug_force_selection = 13;
    if (has_debug_force_selection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debug_force_selection());
    }

    // optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
    if (has_raw_value_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->raw_value_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions_InGamePrediction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions_InGamePrediction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::MergeFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  choices_.MergeFrom(from.choices_);
  required_heroes_.MergeFrom(from.required_heroes_);
  query_values_.MergeFrom(from.query_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_question();
      question_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.question_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_query_name();
      query_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.query_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000020u) {
      group_ = from.group_;
    }
    if (cached_has_bits & 0x00000040u) {
      answer_resolution_type_ = from.answer_resolution_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      points_to_grant_ = from.points_to_grant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      reward_action_ = from.reward_action_;
    }
    if (cached_has_bits & 0x00000200u) {
      debug_force_selection_ = from.debug_force_selection_;
    }
    if (cached_has_bits & 0x00000400u) {
      raw_value_type_ = from.raw_value_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions_InGamePrediction::CopyFrom(const CMsgDOTASeasonPredictions_InGamePrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions_InGamePrediction::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions_InGamePrediction::Swap(CMsgDOTASeasonPredictions_InGamePrediction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions_InGamePrediction::InternalSwap(CMsgDOTASeasonPredictions_InGamePrediction* other) {
  choices_.InternalSwap(&other->choices_);
  required_heroes_.InternalSwap(&other->required_heroes_);
  query_values_.InternalSwap(&other->query_values_);
  name_.Swap(&other->name_);
  question_.Swap(&other->question_);
  query_name_.Swap(&other->query_name_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(group_, other->group_);
  std::swap(answer_resolution_type_, other->answer_resolution_type_);
  std::swap(points_to_grant_, other->points_to_grant_);
  std::swap(reward_action_, other->reward_action_);
  std::swap(debug_force_selection_, other->debug_force_selection_);
  std::swap(raw_value_type_, other->raw_value_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions_InGamePrediction::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions_InGamePrediction

// optional uint32 id = 1;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.id)
  return id_;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.id)
}

// optional string name = 2;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  return name_.GetNoArena();
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_InGamePrediction::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
#endif
void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.name)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.ePredictionType type = 3 [default = Generic];
bool CMsgDOTASeasonPredictions_InGamePrediction::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_type() {
  type_ = 0;
  clear_has_type();
}
::proto::dota::CMsgDOTASeasonPredictions_ePredictionType CMsgDOTASeasonPredictions_InGamePrediction::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_ePredictionType >(type_);
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_type(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_ePredictionType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.type)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eRandomSelectionGroup_t group = 4 [default = EarlyGame];
bool CMsgDOTASeasonPredictions_InGamePrediction::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_group() {
  group_ = 0;
  clear_has_group();
}
::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t CMsgDOTASeasonPredictions_InGamePrediction::group() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.group)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t >(group_);
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_group(::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eRandomSelectionGroup_t_IsValid(value));
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.group)
}

// optional string question = 5;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_question() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_question() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_question() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_question() {
  question_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_question();
}
const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::question() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  return question_.GetNoArena();
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const ::std::string& value) {
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_InGamePrediction::set_question(::std::string&& value) {
  set_has_question();
  question_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
#endif
void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_question(const char* value, size_t size) {
  set_has_question();
  question_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_question() {
  set_has_question();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  return question_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_question() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
  clear_has_question();
  return question_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_question(::std::string* question) {
  if (question != NULL) {
    set_has_question();
  } else {
    clear_has_question();
  }
  question_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), question);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.question)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.Choice choices = 6;
int CMsgDOTASeasonPredictions_InGamePrediction::choices_size() const {
  return choices_.size();
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_choices() {
  choices_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_Choice& CMsgDOTASeasonPredictions_InGamePrediction::choices(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Choice* CMsgDOTASeasonPredictions_InGamePrediction::add_choices() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_choices() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return &choices_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Choice >&
CMsgDOTASeasonPredictions_InGamePrediction::choices() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.choices)
  return choices_;
}

// repeated string required_heroes = 7;
int CMsgDOTASeasonPredictions_InGamePrediction::required_heroes_size() const {
  return required_heroes_.size();
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_required_heroes() {
  required_heroes_.Clear();
}
const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::required_heroes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Get(index);
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Mutable(index);
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  required_heroes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  required_heroes_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  required_heroes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_required_heroes(int index, const char* value, size_t size) {
  required_heroes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_.Add();
}
void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const ::std::string& value) {
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(::std::string&& value) {
  required_heroes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
#endif
void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  required_heroes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
void CMsgDOTASeasonPredictions_InGamePrediction::add_required_heroes(const char* value, size_t size) {
  required_heroes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgDOTASeasonPredictions_InGamePrediction::required_heroes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return required_heroes_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_required_heroes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.required_heroes)
  return &required_heroes_;
}

// optional string query_name = 8;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_query_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_query_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_query_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_name() {
  query_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_query_name();
}
const ::std::string& CMsgDOTASeasonPredictions_InGamePrediction::query_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return query_name_.GetNoArena();
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const ::std::string& value) {
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
#if LANG_CXX11
void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(::std::string&& value) {
  set_has_query_name();
  query_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
#endif
void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_query_name(const char* value, size_t size) {
  set_has_query_name();
  query_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_name() {
  set_has_query_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  return query_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTASeasonPredictions_InGamePrediction::release_query_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
  clear_has_query_name();
  return query_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_allocated_query_name(::std::string* query_name) {
  if (query_name != NULL) {
    set_has_query_name();
  } else {
    clear_has_query_name();
  }
  query_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), query_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_name)
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.QueryKeyValues query_values = 9;
int CMsgDOTASeasonPredictions_InGamePrediction::query_values_size() const {
  return query_values_.size();
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_query_values() {
  query_values_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues& CMsgDOTASeasonPredictions_InGamePrediction::query_values(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues* CMsgDOTASeasonPredictions_InGamePrediction::add_query_values() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >*
CMsgDOTASeasonPredictions_InGamePrediction::mutable_query_values() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return &query_values_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_QueryKeyValues >&
CMsgDOTASeasonPredictions_InGamePrediction::query_values() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.query_values)
  return query_values_;
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eResolutionType_t answer_resolution_type = 10 [default = InvalidQuery];
bool CMsgDOTASeasonPredictions_InGamePrediction::has_answer_resolution_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_answer_resolution_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_answer_resolution_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_answer_resolution_type() {
  answer_resolution_type_ = 0;
  clear_has_answer_resolution_type();
}
::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t CMsgDOTASeasonPredictions_InGamePrediction::answer_resolution_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t >(answer_resolution_type_);
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_answer_resolution_type(::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eResolutionType_t_IsValid(value));
  set_has_answer_resolution_type();
  answer_resolution_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.answer_resolution_type)
}

// optional uint32 points_to_grant = 11;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_points_to_grant() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_points_to_grant() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_points_to_grant() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_points_to_grant() {
  points_to_grant_ = 0u;
  clear_has_points_to_grant();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::points_to_grant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
  return points_to_grant_;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_points_to_grant(::google::protobuf::uint32 value) {
  set_has_points_to_grant();
  points_to_grant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.points_to_grant)
}

// optional uint32 reward_action = 12;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_reward_action() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_reward_action() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_reward_action() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_reward_action() {
  reward_action_ = 0u;
  clear_has_reward_action();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::reward_action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
  return reward_action_;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_reward_action(::google::protobuf::uint32 value) {
  set_has_reward_action();
  reward_action_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.reward_action)
}

// optional uint32 debug_force_selection = 13;
bool CMsgDOTASeasonPredictions_InGamePrediction::has_debug_force_selection() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_debug_force_selection() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_debug_force_selection() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_debug_force_selection() {
  debug_force_selection_ = 0u;
  clear_has_debug_force_selection();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions_InGamePrediction::debug_force_selection() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
  return debug_force_selection_;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_debug_force_selection(::google::protobuf::uint32 value) {
  set_has_debug_force_selection();
  debug_force_selection_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.debug_force_selection)
}

// optional .proto.dota.CMsgDOTASeasonPredictions.eRawValueType_t raw_value_type = 14 [default = Number];
bool CMsgDOTASeasonPredictions_InGamePrediction::has_raw_value_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_has_raw_value_type() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_has_raw_value_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTASeasonPredictions_InGamePrediction::clear_raw_value_type() {
  raw_value_type_ = 0;
  clear_has_raw_value_type();
}
::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t CMsgDOTASeasonPredictions_InGamePrediction::raw_value_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
  return static_cast< ::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t >(raw_value_type_);
}
void CMsgDOTASeasonPredictions_InGamePrediction::set_raw_value_type(::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t value) {
  assert(::proto::dota::CMsgDOTASeasonPredictions_eRawValueType_t_IsValid(value));
  set_has_raw_value_type();
  raw_value_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.InGamePrediction.raw_value_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeasonPredictions::kPredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionsFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionCountPerGameFieldNumber;
const int CMsgDOTASeasonPredictions::kInGamePredictionVotingPeriodMinutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeasonPredictions)
}
CMsgDOTASeasonPredictions::CMsgDOTASeasonPredictions(const CMsgDOTASeasonPredictions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      predictions_(from.predictions_),
      in_game_predictions_(from.in_game_predictions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&in_game_prediction_count_per_game_, &from.in_game_prediction_count_per_game_,
    reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_) + sizeof(in_game_prediction_voting_period_minutes_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeasonPredictions)
}

void CMsgDOTASeasonPredictions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&in_game_prediction_count_per_game_, 0, reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
    reinterpret_cast<char*>(&in_game_prediction_count_per_game_) + sizeof(in_game_prediction_voting_period_minutes_));
}

CMsgDOTASeasonPredictions::~CMsgDOTASeasonPredictions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeasonPredictions)
  SharedDtor();
}

void CMsgDOTASeasonPredictions::SharedDtor() {
}

void CMsgDOTASeasonPredictions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASeasonPredictions::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASeasonPredictions& CMsgDOTASeasonPredictions::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASeasonPredictions* CMsgDOTASeasonPredictions::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASeasonPredictions* n = new CMsgDOTASeasonPredictions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASeasonPredictions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeasonPredictions)
  predictions_.Clear();
  in_game_predictions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&in_game_prediction_count_per_game_, 0, reinterpret_cast<char*>(&in_game_prediction_voting_period_minutes_) -
      reinterpret_cast<char*>(&in_game_prediction_count_per_game_) + sizeof(in_game_prediction_voting_period_minutes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASeasonPredictions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeasonPredictions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_in_game_predictions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game_prediction_count_per_game = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_in_game_prediction_count_per_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_count_per_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 in_game_prediction_voting_period_minutes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_in_game_prediction_voting_period_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &in_game_prediction_voting_period_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeasonPredictions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeasonPredictions)
  return false;
#undef DO_
}

void CMsgDOTASeasonPredictions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeasonPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->predictions(i), output);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (unsigned int i = 0, n = this->in_game_predictions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->in_game_predictions(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 in_game_prediction_count_per_game = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->in_game_prediction_count_per_game(), output);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->in_game_prediction_voting_period_minutes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeasonPredictions)
}

::google::protobuf::uint8* CMsgDOTASeasonPredictions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeasonPredictions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  for (unsigned int i = 0, n = this->predictions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->predictions(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  for (unsigned int i = 0, n = this->in_game_predictions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->in_game_predictions(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 in_game_prediction_count_per_game = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->in_game_prediction_count_per_game(), target);
  }

  // optional uint32 in_game_prediction_voting_period_minutes = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->in_game_prediction_voting_period_minutes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeasonPredictions)
  return target;
}

size_t CMsgDOTASeasonPredictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeasonPredictions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
  {
    unsigned int count = this->predictions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictions(i));
    }
  }

  // repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
  {
    unsigned int count = this->in_game_predictions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->in_game_predictions(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 in_game_prediction_count_per_game = 3;
    if (has_in_game_prediction_count_per_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_count_per_game());
    }

    // optional uint32 in_game_prediction_voting_period_minutes = 4;
    if (has_in_game_prediction_voting_period_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->in_game_prediction_voting_period_minutes());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASeasonPredictions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeasonPredictions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASeasonPredictions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeasonPredictions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeasonPredictions)
    MergeFrom(*source);
  }
}

void CMsgDOTASeasonPredictions::MergeFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeasonPredictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  in_game_predictions_.MergeFrom(from.in_game_predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      in_game_prediction_count_per_game_ = from.in_game_prediction_count_per_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      in_game_prediction_voting_period_minutes_ = from.in_game_prediction_voting_period_minutes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeasonPredictions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeasonPredictions::CopyFrom(const CMsgDOTASeasonPredictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeasonPredictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeasonPredictions::IsInitialized() const {
  return true;
}

void CMsgDOTASeasonPredictions::Swap(CMsgDOTASeasonPredictions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeasonPredictions::InternalSwap(CMsgDOTASeasonPredictions* other) {
  predictions_.InternalSwap(&other->predictions_);
  in_game_predictions_.InternalSwap(&other->in_game_predictions_);
  std::swap(in_game_prediction_count_per_game_, other->in_game_prediction_count_per_game_);
  std::swap(in_game_prediction_voting_period_minutes_, other->in_game_prediction_voting_period_minutes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASeasonPredictions::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASeasonPredictions

// repeated .proto.dota.CMsgDOTASeasonPredictions.Prediction predictions = 1;
int CMsgDOTASeasonPredictions::predictions_size() const {
  return predictions_.size();
}
void CMsgDOTASeasonPredictions::clear_predictions() {
  predictions_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_Prediction& CMsgDOTASeasonPredictions::predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_Prediction* CMsgDOTASeasonPredictions::add_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >*
CMsgDOTASeasonPredictions::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return &predictions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_Prediction >&
CMsgDOTASeasonPredictions::predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.predictions)
  return predictions_;
}

// repeated .proto.dota.CMsgDOTASeasonPredictions.InGamePrediction in_game_predictions = 2;
int CMsgDOTASeasonPredictions::in_game_predictions_size() const {
  return in_game_predictions_.size();
}
void CMsgDOTASeasonPredictions::clear_in_game_predictions() {
  in_game_predictions_.Clear();
}
const ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction& CMsgDOTASeasonPredictions::in_game_predictions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Get(index);
}
::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::mutable_in_game_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Mutable(index);
}
::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction* CMsgDOTASeasonPredictions::add_in_game_predictions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >*
CMsgDOTASeasonPredictions::mutable_in_game_predictions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return &in_game_predictions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTASeasonPredictions_InGamePrediction >&
CMsgDOTASeasonPredictions::in_game_predictions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTASeasonPredictions.in_game_predictions)
  return in_game_predictions_;
}

// optional uint32 in_game_prediction_count_per_game = 3;
bool CMsgDOTASeasonPredictions::has_in_game_prediction_count_per_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASeasonPredictions::set_has_in_game_prediction_count_per_game() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASeasonPredictions::clear_has_in_game_prediction_count_per_game() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASeasonPredictions::clear_in_game_prediction_count_per_game() {
  in_game_prediction_count_per_game_ = 0u;
  clear_has_in_game_prediction_count_per_game();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_count_per_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
  return in_game_prediction_count_per_game_;
}
void CMsgDOTASeasonPredictions::set_in_game_prediction_count_per_game(::google::protobuf::uint32 value) {
  set_has_in_game_prediction_count_per_game();
  in_game_prediction_count_per_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_count_per_game)
}

// optional uint32 in_game_prediction_voting_period_minutes = 4;
bool CMsgDOTASeasonPredictions::has_in_game_prediction_voting_period_minutes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTASeasonPredictions::set_has_in_game_prediction_voting_period_minutes() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTASeasonPredictions::clear_has_in_game_prediction_voting_period_minutes() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTASeasonPredictions::clear_in_game_prediction_voting_period_minutes() {
  in_game_prediction_voting_period_minutes_ = 0u;
  clear_has_in_game_prediction_voting_period_minutes();
}
::google::protobuf::uint32 CMsgDOTASeasonPredictions::in_game_prediction_voting_period_minutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
  return in_game_prediction_voting_period_minutes_;
}
void CMsgDOTASeasonPredictions::set_in_game_prediction_voting_period_minutes(::google::protobuf::uint32 value) {
  set_has_in_game_prediction_voting_period_minutes();
  in_game_prediction_voting_period_minutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASeasonPredictions.in_game_prediction_voting_period_minutes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_Player_CustomGameData::kDotaTeamFieldNumber;
const int CMsgDOTAMatch_Player_CustomGameData::kWinnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}
CMsgDOTAMatch_Player_CustomGameData::CMsgDOTAMatch_Player_CustomGameData(const CMsgDOTAMatch_Player_CustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}

void CMsgDOTAMatch_Player_CustomGameData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dota_team_, 0, reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
}

CMsgDOTAMatch_Player_CustomGameData::~CMsgDOTAMatch_Player_CustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_Player_CustomGameData::SharedDtor() {
}

void CMsgDOTAMatch_Player_CustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player_CustomGameData::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player_CustomGameData::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player_CustomGameData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch_Player_CustomGameData* n = new CMsgDOTAMatch_Player_CustomGameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch_Player_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&dota_team_, 0, reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&dota_team_) + sizeof(winner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch_Player_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dota_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool winner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_winner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return false;
#undef DO_
}

void CMsgDOTAMatch_Player_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->winner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player_CustomGameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // optional bool winner = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->winner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_Player_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool winner = 2;
    if (has_winner()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player_CustomGameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch_Player_CustomGameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player_CustomGameData::MergeFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      winner_ = from.winner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player_CustomGameData::CopyFrom(const CMsgDOTAMatch_Player_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.Player.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player_CustomGameData::Swap(CMsgDOTAMatch_Player_CustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_Player_CustomGameData::InternalSwap(CMsgDOTAMatch_Player_CustomGameData* other) {
  std::swap(dota_team_, other->dota_team_);
  std::swap(winner_, other->winner_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch_Player_CustomGameData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch_Player_CustomGameData

// optional uint32 dota_team = 1;
bool CMsgDOTAMatch_Player_CustomGameData::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_Player_CustomGameData::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch_Player_CustomGameData::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch_Player_CustomGameData::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player_CustomGameData::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.CustomGameData.dota_team)
  return dota_team_;
}
void CMsgDOTAMatch_Player_CustomGameData::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.CustomGameData.dota_team)
}

// optional bool winner = 2;
bool CMsgDOTAMatch_Player_CustomGameData::has_winner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_Player_CustomGameData::set_has_winner() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch_Player_CustomGameData::clear_has_winner() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch_Player_CustomGameData::clear_winner() {
  winner_ = false;
  clear_has_winner();
}
bool CMsgDOTAMatch_Player_CustomGameData::winner() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.CustomGameData.winner)
  return winner_;
}
void CMsgDOTAMatch_Player_CustomGameData::set_winner(bool value) {
  set_has_winner();
  winner_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.CustomGameData.winner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerSlotFieldNumber;
const int CMsgDOTAMatch_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatch_Player::kItem0FieldNumber;
const int CMsgDOTAMatch_Player::kItem1FieldNumber;
const int CMsgDOTAMatch_Player::kItem2FieldNumber;
const int CMsgDOTAMatch_Player::kItem3FieldNumber;
const int CMsgDOTAMatch_Player::kItem4FieldNumber;
const int CMsgDOTAMatch_Player::kItem5FieldNumber;
const int CMsgDOTAMatch_Player::kItem6FieldNumber;
const int CMsgDOTAMatch_Player::kItem7FieldNumber;
const int CMsgDOTAMatch_Player::kItem8FieldNumber;
const int CMsgDOTAMatch_Player::kExpectedTeamContributionFieldNumber;
const int CMsgDOTAMatch_Player::kScaledMetricFieldNumber;
const int CMsgDOTAMatch_Player::kPreviousRankFieldNumber;
const int CMsgDOTAMatch_Player::kRankChangeFieldNumber;
const int CMsgDOTAMatch_Player::kSoloRankFieldNumber;
const int CMsgDOTAMatch_Player::kSeasonalRankFieldNumber;
const int CMsgDOTAMatch_Player::kKillsFieldNumber;
const int CMsgDOTAMatch_Player::kDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kLeaverStatusFieldNumber;
const int CMsgDOTAMatch_Player::kGoldFieldNumber;
const int CMsgDOTAMatch_Player::kLastHitsFieldNumber;
const int CMsgDOTAMatch_Player::kDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kGoldPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kXPPerMinFieldNumber;
const int CMsgDOTAMatch_Player::kGoldSpentFieldNumber;
const int CMsgDOTAMatch_Player::kHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kLevelFieldNumber;
const int CMsgDOTAMatch_Player::kTimeLastSeenFieldNumber;
const int CMsgDOTAMatch_Player::kPlayerNameFieldNumber;
const int CMsgDOTAMatch_Player::kSupportAbilityValueFieldNumber;
const int CMsgDOTAMatch_Player::kFeedingDetectedFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankFieldNumber;
const int CMsgDOTAMatch_Player::kSearchRankUncertaintyFieldNumber;
const int CMsgDOTAMatch_Player::kRankUncertaintyChangeFieldNumber;
const int CMsgDOTAMatch_Player::kHeroPlayCountFieldNumber;
const int CMsgDOTAMatch_Player::kPartyIdFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledTowerDamageFieldNumber;
const int CMsgDOTAMatch_Player::kScaledHeroHealingFieldNumber;
const int CMsgDOTAMatch_Player::kScaledKillsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledDeathsFieldNumber;
const int CMsgDOTAMatch_Player::kScaledAssistsFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedFarmGoldFieldNumber;
const int CMsgDOTAMatch_Player::kSupportGoldFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedDeniesFieldNumber;
const int CMsgDOTAMatch_Player::kClaimedMissesFieldNumber;
const int CMsgDOTAMatch_Player::kMissesFieldNumber;
const int CMsgDOTAMatch_Player::kAbilityUpgradesFieldNumber;
const int CMsgDOTAMatch_Player::kAdditionalUnitsInventoryFieldNumber;
const int CMsgDOTAMatch_Player::kPermanentBuffsFieldNumber;
const int CMsgDOTAMatch_Player::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch_Player::kActiveBattlePassFieldNumber;
const int CMsgDOTAMatch_Player::kNetWorthFieldNumber;
const int CMsgDOTAMatch_Player::kBotDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_Player::CMsgDOTAMatch_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.Player)
}
CMsgDOTAMatch_Player::CMsgDOTAMatch_Player(const CMsgDOTAMatch_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      ability_upgrades_(from.ability_upgrades_),
      additional_units_inventory_(from.additional_units_inventory_),
      permanent_buffs_(from.permanent_buffs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_Player_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = NULL;
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&item_8_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(item_8_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.Player)
}

void CMsgDOTAMatch_Player::SharedCtor() {
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_game_data_, 0, reinterpret_cast<char*>(&item_8_) -
    reinterpret_cast<char*>(&custom_game_data_) + sizeof(item_8_));
  _cached_size_ = 0;
}

CMsgDOTAMatch_Player::~CMsgDOTAMatch_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.Player)
  SharedDtor();
}

void CMsgDOTAMatch_Player::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete custom_game_data_;
  }
}

void CMsgDOTAMatch_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch_Player& CMsgDOTAMatch_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch_Player* CMsgDOTAMatch_Player::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch_Player* n = new CMsgDOTAMatch_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.Player)
  ability_upgrades_.Clear();
  additional_units_inventory_.Clear();
  permanent_buffs_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_player_name()) {
      GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*player_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_game_data()) {
      GOOGLE_DCHECK(custom_game_data_ != NULL);
      custom_game_data_->::proto::dota::CMsgDOTAMatch_Player_CustomGameData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&item_2_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(item_2_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&item_3_, 0, reinterpret_cast<char*>(&kills_) -
      reinterpret_cast<char*>(&item_3_) + sizeof(kills_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&deaths_, 0, reinterpret_cast<char*>(&xp_per_min_) -
      reinterpret_cast<char*>(&deaths_) + sizeof(xp_per_min_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&gold_spent_, 0, reinterpret_cast<char*>(&search_rank_) -
      reinterpret_cast<char*>(&gold_spent_) + sizeof(search_rank_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&search_rank_uncertainty_, 0, reinterpret_cast<char*>(&claimed_farm_gold_) -
      reinterpret_cast<char*>(&search_rank_uncertainty_) + sizeof(claimed_farm_gold_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&support_gold_, 0, reinterpret_cast<char*>(&active_battle_pass_) -
      reinterpret_cast<char*>(&support_gold_) + sizeof(active_battle_pass_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&net_worth_, 0, reinterpret_cast<char*>(&item_8_) -
      reinterpret_cast<char*>(&net_worth_) + sizeof(item_8_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_0 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_item_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_item_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_item_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_3 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_item_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_4 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_item_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_5 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_item_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float expected_team_contribution = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_expected_team_contribution();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &expected_team_contribution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_metric = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_scaled_metric();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_metric_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 previous_rank = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_previous_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &previous_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_rank_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_leaver_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_per_min = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_gold_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 XP_per_min = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_xp_per_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_per_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 gold_spent = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_gold_spent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_spent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_damage = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_damage = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_healing = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_hero_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_last_seen = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_time_last_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_last_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.Player.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_ability_value = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_support_ability_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_ability_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool feeding_detected = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_feeding_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feeding_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_rank = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_search_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 search_rank_uncertainty = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_search_rank_uncertainty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &search_rank_uncertainty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rank_uncertainty_change = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_rank_uncertainty_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_uncertainty_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_play_count = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_hero_play_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_play_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 party_id = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(305u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_kills = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(317u)) {
          set_has_scaled_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_deaths = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(325u)) {
          set_has_scaled_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scaled_assists = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(333u)) {
          set_has_scaled_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaled_assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_farm_gold = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_claimed_farm_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_farm_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 support_gold = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_support_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &support_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_denies = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_claimed_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 claimed_misses = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_claimed_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimed_misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 misses = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_misses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &misses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(378u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_upgrades()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(386u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additional_units_inventory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_rank = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_solo_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool active_battle_pass = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_active_battle_pass();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_battle_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(416u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool seasonal_rank = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_seasonal_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &seasonal_rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_damage = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(432u)) {
          set_has_scaled_hero_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_tower_damage = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          set_has_scaled_tower_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_tower_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scaled_hero_healing = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_scaled_hero_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scaled_hero_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(458u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_permanent_buffs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_difficulty = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_bot_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_6 = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(472u)) {
          set_has_item_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_7 = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_item_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_8 = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_item_8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.Player)
  return false;
#undef DO_
}

void CMsgDOTAMatch_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 item_0 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_0(), output);
  }

  // optional uint32 item_1 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->item_1(), output);
  }

  // optional uint32 item_2 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->item_2(), output);
  }

  // optional uint32 item_3 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->item_3(), output);
  }

  // optional uint32 item_4 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->item_4(), output);
  }

  // optional uint32 item_5 = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->item_5(), output);
  }

  // optional float expected_team_contribution = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->expected_team_contribution(), output);
  }

  // optional float scaled_metric = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->scaled_metric(), output);
  }

  // optional uint32 previous_rank = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->previous_rank(), output);
  }

  // optional sint32 rank_change = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(13, this->rank_change(), output);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kills(), output);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deaths(), output);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->assists(), output);
  }

  // optional uint32 leaver_status = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->leaver_status(), output);
  }

  // optional uint32 gold = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->gold(), output);
  }

  // optional uint32 last_hits = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->last_hits(), output);
  }

  // optional uint32 denies = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->denies(), output);
  }

  // optional uint32 gold_per_min = 21;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->gold_per_min(), output);
  }

  // optional uint32 XP_per_min = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->xp_per_min(), output);
  }

  // optional uint32 gold_spent = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold_spent(), output);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hero_damage(), output);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->tower_damage(), output);
  }

  // optional uint32 hero_healing = 26;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->hero_healing(), output);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->level(), output);
  }

  // optional uint32 time_last_seen = 28;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->time_last_seen(), output);
  }

  // optional string player_name = 29;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      29, this->player_name(), output);
  }

  // optional uint32 support_ability_value = 30;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->support_ability_value(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool feeding_detected = 32;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(32, this->feeding_detected(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_rank = 34;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->search_rank(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 search_rank_uncertainty = 35;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->search_rank_uncertainty(), output);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->rank_uncertainty_change(), output);
  }

  // optional uint32 hero_play_count = 37;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->hero_play_count(), output);
  }

  // optional fixed64 party_id = 38;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(38, this->party_id(), output);
  }

  // optional float scaled_kills = 39;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->scaled_kills(), output);
  }

  // optional float scaled_deaths = 40;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->scaled_deaths(), output);
  }

  // optional float scaled_assists = 41;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->scaled_assists(), output);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->claimed_farm_gold(), output);
  }

  // optional uint32 support_gold = 43;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->support_gold(), output);
  }

  // optional uint32 claimed_denies = 44;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->claimed_denies(), output);
  }

  // optional uint32 claimed_misses = 45;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->claimed_misses(), output);
  }

  // optional uint32 misses = 46;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->misses(), output);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (unsigned int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->ability_upgrades(i), output);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (unsigned int i = 0, n = this->additional_units_inventory_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->additional_units_inventory(i), output);
  }

  // optional bool solo_rank = 49;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->solo_rank(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, *this->custom_game_data_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool active_battle_pass = 51;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->active_battle_pass(), output);
  }

  // optional uint32 net_worth = 52;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->net_worth(), output);
  }

  // optional bool seasonal_rank = 53;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->seasonal_rank(), output);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->scaled_hero_damage(), output);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->scaled_tower_damage(), output);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->scaled_hero_healing(), output);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (unsigned int i = 0, n = this->permanent_buffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      57, this->permanent_buffs(i), output);
  }

  // optional uint32 bot_difficulty = 58;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->bot_difficulty(), output);
  }

  // optional uint32 item_6 = 59;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->item_6(), output);
  }

  // optional uint32 item_7 = 60;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->item_7(), output);
  }

  // optional uint32 item_8 = 61;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->item_8(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.Player)
}

::google::protobuf::uint8* CMsgDOTAMatch_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 item_0 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_0(), target);
  }

  // optional uint32 item_1 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->item_1(), target);
  }

  // optional uint32 item_2 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->item_2(), target);
  }

  // optional uint32 item_3 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->item_3(), target);
  }

  // optional uint32 item_4 = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->item_4(), target);
  }

  // optional uint32 item_5 = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->item_5(), target);
  }

  // optional float expected_team_contribution = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->expected_team_contribution(), target);
  }

  // optional float scaled_metric = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->scaled_metric(), target);
  }

  // optional uint32 previous_rank = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->previous_rank(), target);
  }

  // optional sint32 rank_change = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(13, this->rank_change(), target);
  }

  // optional uint32 kills = 14;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kills(), target);
  }

  // optional uint32 deaths = 15;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deaths(), target);
  }

  // optional uint32 assists = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->assists(), target);
  }

  // optional uint32 leaver_status = 17;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->leaver_status(), target);
  }

  // optional uint32 gold = 18;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->gold(), target);
  }

  // optional uint32 last_hits = 19;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->last_hits(), target);
  }

  // optional uint32 denies = 20;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->denies(), target);
  }

  // optional uint32 gold_per_min = 21;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->gold_per_min(), target);
  }

  // optional uint32 XP_per_min = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->xp_per_min(), target);
  }

  // optional uint32 gold_spent = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold_spent(), target);
  }

  // optional uint32 hero_damage = 24;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->hero_damage(), target);
  }

  // optional uint32 tower_damage = 25;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->tower_damage(), target);
  }

  // optional uint32 hero_healing = 26;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->hero_healing(), target);
  }

  // optional uint32 level = 27;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->level(), target);
  }

  // optional uint32 time_last_seen = 28;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->time_last_seen(), target);
  }

  // optional string player_name = 29;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.Player.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->player_name(), target);
  }

  // optional uint32 support_ability_value = 30;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->support_ability_value(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool feeding_detected = 32;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(32, this->feeding_detected(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_rank = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->search_rank(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 search_rank_uncertainty = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->search_rank_uncertainty(), target);
  }

  // optional int32 rank_uncertainty_change = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->rank_uncertainty_change(), target);
  }

  // optional uint32 hero_play_count = 37;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->hero_play_count(), target);
  }

  // optional fixed64 party_id = 38;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(38, this->party_id(), target);
  }

  // optional float scaled_kills = 39;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->scaled_kills(), target);
  }

  // optional float scaled_deaths = 40;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->scaled_deaths(), target);
  }

  // optional float scaled_assists = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(41, this->scaled_assists(), target);
  }

  // optional uint32 claimed_farm_gold = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->claimed_farm_gold(), target);
  }

  // optional uint32 support_gold = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->support_gold(), target);
  }

  // optional uint32 claimed_denies = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->claimed_denies(), target);
  }

  // optional uint32 claimed_misses = 45;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->claimed_misses(), target);
  }

  // optional uint32 misses = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->misses(), target);
  }

  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  for (unsigned int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        47, this->ability_upgrades(i), deterministic, target);
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  for (unsigned int i = 0, n = this->additional_units_inventory_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        48, this->additional_units_inventory(i), deterministic, target);
  }

  // optional bool solo_rank = 49;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->solo_rank(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        50, *this->custom_game_data_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool active_battle_pass = 51;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->active_battle_pass(), target);
  }

  // optional uint32 net_worth = 52;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->net_worth(), target);
  }

  // optional bool seasonal_rank = 53;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->seasonal_rank(), target);
  }

  // optional uint32 scaled_hero_damage = 54;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->scaled_hero_damage(), target);
  }

  // optional uint32 scaled_tower_damage = 55;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->scaled_tower_damage(), target);
  }

  // optional uint32 scaled_hero_healing = 56;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->scaled_hero_healing(), target);
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  for (unsigned int i = 0, n = this->permanent_buffs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        57, this->permanent_buffs(i), deterministic, target);
  }

  // optional uint32 bot_difficulty = 58;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->bot_difficulty(), target);
  }

  // optional uint32 item_6 = 59;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->item_6(), target);
  }

  // optional uint32 item_7 = 60;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->item_7(), target);
  }

  // optional uint32 item_8 = 61;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->item_8(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.Player)
  return target;
}

size_t CMsgDOTAMatch_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
  {
    unsigned int count = this->ability_upgrades_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ability_upgrades(i));
    }
  }

  // repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
  {
    unsigned int count = this->additional_units_inventory_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additional_units_inventory(i));
    }
  }

  // repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
  {
    unsigned int count = this->permanent_buffs_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->permanent_buffs(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string player_name = 29;
    if (has_player_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->custom_game_data_);
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 item_0 = 4;
    if (has_item_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_0());
    }

    // optional uint32 item_1 = 5;
    if (has_item_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_1());
    }

    // optional uint32 item_2 = 6;
    if (has_item_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_2());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 item_3 = 7;
    if (has_item_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_3());
    }

    // optional uint32 item_4 = 8;
    if (has_item_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_4());
    }

    // optional uint32 item_5 = 9;
    if (has_item_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_5());
    }

    // optional float expected_team_contribution = 10;
    if (has_expected_team_contribution()) {
      total_size += 1 + 4;
    }

    // optional float scaled_metric = 11;
    if (has_scaled_metric()) {
      total_size += 1 + 4;
    }

    // optional uint32 previous_rank = 12;
    if (has_previous_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->previous_rank());
    }

    // optional sint32 rank_change = 13;
    if (has_rank_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional uint32 kills = 14;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 deaths = 15;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 16;
    if (has_assists()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 leaver_status = 17;
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_status());
    }

    // optional uint32 gold = 18;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 last_hits = 19;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 20;
    if (has_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

    // optional uint32 gold_per_min = 21;
    if (has_gold_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_per_min());
    }

    // optional uint32 XP_per_min = 22;
    if (has_xp_per_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_per_min());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 gold_spent = 23;
    if (has_gold_spent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold_spent());
    }

    // optional uint32 hero_damage = 24;
    if (has_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_damage());
    }

    // optional uint32 tower_damage = 25;
    if (has_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_damage());
    }

    // optional uint32 hero_healing = 26;
    if (has_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_healing());
    }

    // optional uint32 level = 27;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 time_last_seen = 28;
    if (has_time_last_seen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_last_seen());
    }

    // optional uint32 support_ability_value = 30;
    if (has_support_ability_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_ability_value());
    }

    // optional uint32 search_rank = 34;
    if (has_search_rank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 search_rank_uncertainty = 35;
    if (has_search_rank_uncertainty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->search_rank_uncertainty());
    }

    // optional int32 rank_uncertainty_change = 36;
    if (has_rank_uncertainty_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_uncertainty_change());
    }

    // optional fixed64 party_id = 38;
    if (has_party_id()) {
      total_size += 2 + 8;
    }

    // optional uint32 hero_play_count = 37;
    if (has_hero_play_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_play_count());
    }

    // optional float scaled_kills = 39;
    if (has_scaled_kills()) {
      total_size += 2 + 4;
    }

    // optional float scaled_deaths = 40;
    if (has_scaled_deaths()) {
      total_size += 2 + 4;
    }

    // optional float scaled_assists = 41;
    if (has_scaled_assists()) {
      total_size += 2 + 4;
    }

    // optional uint32 claimed_farm_gold = 42;
    if (has_claimed_farm_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_farm_gold());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional uint32 support_gold = 43;
    if (has_support_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->support_gold());
    }

    // optional uint32 claimed_denies = 44;
    if (has_claimed_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_denies());
    }

    // optional uint32 claimed_misses = 45;
    if (has_claimed_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimed_misses());
    }

    // optional uint32 misses = 46;
    if (has_misses()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->misses());
    }

    // optional bool solo_rank = 49;
    if (has_solo_rank()) {
      total_size += 2 + 1;
    }

    // optional bool seasonal_rank = 53;
    if (has_seasonal_rank()) {
      total_size += 2 + 1;
    }

    // optional bool feeding_detected = 32;
    if (has_feeding_detected()) {
      total_size += 2 + 1;
    }

    // optional bool active_battle_pass = 51;
    if (has_active_battle_pass()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional uint32 net_worth = 52;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 scaled_hero_damage = 54;
    if (has_scaled_hero_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_damage());
    }

    // optional uint32 scaled_tower_damage = 55;
    if (has_scaled_tower_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_tower_damage());
    }

    // optional uint32 scaled_hero_healing = 56;
    if (has_scaled_hero_healing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scaled_hero_healing());
    }

    // optional uint32 bot_difficulty = 58;
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_difficulty());
    }

    // optional uint32 item_6 = 59;
    if (has_item_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_6());
    }

    // optional uint32 item_7 = 60;
    if (has_item_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_7());
    }

    // optional uint32 item_8 = 61;
    if (has_item_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_8());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_Player::MergeFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  additional_units_inventory_.MergeFrom(from.additional_units_inventory_);
  permanent_buffs_.MergeFrom(from.permanent_buffs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_custom_game_data()->::proto::dota::CMsgDOTAMatch_Player_CustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_0_ = from.item_0_;
    }
    if (cached_has_bits & 0x00000040u) {
      item_1_ = from.item_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_2_ = from.item_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      item_3_ = from.item_3_;
    }
    if (cached_has_bits & 0x00000200u) {
      item_4_ = from.item_4_;
    }
    if (cached_has_bits & 0x00000400u) {
      item_5_ = from.item_5_;
    }
    if (cached_has_bits & 0x00000800u) {
      expected_team_contribution_ = from.expected_team_contribution_;
    }
    if (cached_has_bits & 0x00001000u) {
      scaled_metric_ = from.scaled_metric_;
    }
    if (cached_has_bits & 0x00002000u) {
      previous_rank_ = from.previous_rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00008000u) {
      kills_ = from.kills_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00020000u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00040000u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00080000u) {
      gold_ = from.gold_;
    }
    if (cached_has_bits & 0x00100000u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00200000u) {
      denies_ = from.denies_;
    }
    if (cached_has_bits & 0x00400000u) {
      gold_per_min_ = from.gold_per_min_;
    }
    if (cached_has_bits & 0x00800000u) {
      xp_per_min_ = from.xp_per_min_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      gold_spent_ = from.gold_spent_;
    }
    if (cached_has_bits & 0x02000000u) {
      hero_damage_ = from.hero_damage_;
    }
    if (cached_has_bits & 0x04000000u) {
      tower_damage_ = from.tower_damage_;
    }
    if (cached_has_bits & 0x08000000u) {
      hero_healing_ = from.hero_healing_;
    }
    if (cached_has_bits & 0x10000000u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x20000000u) {
      time_last_seen_ = from.time_last_seen_;
    }
    if (cached_has_bits & 0x40000000u) {
      support_ability_value_ = from.support_ability_value_;
    }
    if (cached_has_bits & 0x80000000u) {
      search_rank_ = from.search_rank_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      search_rank_uncertainty_ = from.search_rank_uncertainty_;
    }
    if (cached_has_bits & 0x00000002u) {
      rank_uncertainty_change_ = from.rank_uncertainty_change_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_play_count_ = from.hero_play_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      scaled_kills_ = from.scaled_kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      scaled_deaths_ = from.scaled_deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      scaled_assists_ = from.scaled_assists_;
    }
    if (cached_has_bits & 0x00000080u) {
      claimed_farm_gold_ = from.claimed_farm_gold_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      support_gold_ = from.support_gold_;
    }
    if (cached_has_bits & 0x00000200u) {
      claimed_denies_ = from.claimed_denies_;
    }
    if (cached_has_bits & 0x00000400u) {
      claimed_misses_ = from.claimed_misses_;
    }
    if (cached_has_bits & 0x00000800u) {
      misses_ = from.misses_;
    }
    if (cached_has_bits & 0x00001000u) {
      solo_rank_ = from.solo_rank_;
    }
    if (cached_has_bits & 0x00002000u) {
      seasonal_rank_ = from.seasonal_rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      feeding_detected_ = from.feeding_detected_;
    }
    if (cached_has_bits & 0x00008000u) {
      active_battle_pass_ = from.active_battle_pass_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00020000u) {
      scaled_hero_damage_ = from.scaled_hero_damage_;
    }
    if (cached_has_bits & 0x00040000u) {
      scaled_tower_damage_ = from.scaled_tower_damage_;
    }
    if (cached_has_bits & 0x00080000u) {
      scaled_hero_healing_ = from.scaled_hero_healing_;
    }
    if (cached_has_bits & 0x00100000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00200000u) {
      item_6_ = from.item_6_;
    }
    if (cached_has_bits & 0x00400000u) {
      item_7_ = from.item_7_;
    }
    if (cached_has_bits & 0x00800000u) {
      item_8_ = from.item_8_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_Player::CopyFrom(const CMsgDOTAMatch_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_Player::Swap(CMsgDOTAMatch_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_Player::InternalSwap(CMsgDOTAMatch_Player* other) {
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  additional_units_inventory_.InternalSwap(&other->additional_units_inventory_);
  permanent_buffs_.InternalSwap(&other->permanent_buffs_);
  player_name_.Swap(&other->player_name_);
  std::swap(custom_game_data_, other->custom_game_data_);
  std::swap(account_id_, other->account_id_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(item_0_, other->item_0_);
  std::swap(item_1_, other->item_1_);
  std::swap(item_2_, other->item_2_);
  std::swap(item_3_, other->item_3_);
  std::swap(item_4_, other->item_4_);
  std::swap(item_5_, other->item_5_);
  std::swap(expected_team_contribution_, other->expected_team_contribution_);
  std::swap(scaled_metric_, other->scaled_metric_);
  std::swap(previous_rank_, other->previous_rank_);
  std::swap(rank_change_, other->rank_change_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(leaver_status_, other->leaver_status_);
  std::swap(gold_, other->gold_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(gold_per_min_, other->gold_per_min_);
  std::swap(xp_per_min_, other->xp_per_min_);
  std::swap(gold_spent_, other->gold_spent_);
  std::swap(hero_damage_, other->hero_damage_);
  std::swap(tower_damage_, other->tower_damage_);
  std::swap(hero_healing_, other->hero_healing_);
  std::swap(level_, other->level_);
  std::swap(time_last_seen_, other->time_last_seen_);
  std::swap(support_ability_value_, other->support_ability_value_);
  std::swap(search_rank_, other->search_rank_);
  std::swap(search_rank_uncertainty_, other->search_rank_uncertainty_);
  std::swap(rank_uncertainty_change_, other->rank_uncertainty_change_);
  std::swap(party_id_, other->party_id_);
  std::swap(hero_play_count_, other->hero_play_count_);
  std::swap(scaled_kills_, other->scaled_kills_);
  std::swap(scaled_deaths_, other->scaled_deaths_);
  std::swap(scaled_assists_, other->scaled_assists_);
  std::swap(claimed_farm_gold_, other->claimed_farm_gold_);
  std::swap(support_gold_, other->support_gold_);
  std::swap(claimed_denies_, other->claimed_denies_);
  std::swap(claimed_misses_, other->claimed_misses_);
  std::swap(misses_, other->misses_);
  std::swap(solo_rank_, other->solo_rank_);
  std::swap(seasonal_rank_, other->seasonal_rank_);
  std::swap(feeding_detected_, other->feeding_detected_);
  std::swap(active_battle_pass_, other->active_battle_pass_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(scaled_hero_damage_, other->scaled_hero_damage_);
  std::swap(scaled_tower_damage_, other->scaled_tower_damage_);
  std::swap(scaled_hero_healing_, other->scaled_hero_healing_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(item_6_, other->item_6_);
  std::swap(item_7_, other->item_7_);
  std::swap(item_8_, other->item_8_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch_Player

// optional uint32 account_id = 1;
bool CMsgDOTAMatch_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatch_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatch_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatch_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.account_id)
  return account_id_;
}
void CMsgDOTAMatch_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.account_id)
}

// optional uint32 player_slot = 2;
bool CMsgDOTAMatch_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAMatch_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAMatch_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAMatch_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.player_slot)
  return player_slot_;
}
void CMsgDOTAMatch_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.player_slot)
}

// optional uint32 hero_id = 3;
bool CMsgDOTAMatch_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAMatch_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAMatch_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAMatch_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_id)
  return hero_id_;
}
void CMsgDOTAMatch_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_id)
}

// optional uint32 item_0 = 4;
bool CMsgDOTAMatch_Player::has_item_0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_0() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAMatch_Player::clear_has_item_0() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAMatch_Player::clear_item_0() {
  item_0_ = 0u;
  clear_has_item_0();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_0)
  return item_0_;
}
void CMsgDOTAMatch_Player::set_item_0(::google::protobuf::uint32 value) {
  set_has_item_0();
  item_0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_0)
}

// optional uint32 item_1 = 5;
bool CMsgDOTAMatch_Player::has_item_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_1() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAMatch_Player::clear_has_item_1() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAMatch_Player::clear_item_1() {
  item_1_ = 0u;
  clear_has_item_1();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_1)
  return item_1_;
}
void CMsgDOTAMatch_Player::set_item_1(::google::protobuf::uint32 value) {
  set_has_item_1();
  item_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_1)
}

// optional uint32 item_2 = 6;
bool CMsgDOTAMatch_Player::has_item_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_2() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAMatch_Player::clear_has_item_2() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAMatch_Player::clear_item_2() {
  item_2_ = 0u;
  clear_has_item_2();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_2)
  return item_2_;
}
void CMsgDOTAMatch_Player::set_item_2(::google::protobuf::uint32 value) {
  set_has_item_2();
  item_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_2)
}

// optional uint32 item_3 = 7;
bool CMsgDOTAMatch_Player::has_item_3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_3() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAMatch_Player::clear_has_item_3() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAMatch_Player::clear_item_3() {
  item_3_ = 0u;
  clear_has_item_3();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_3)
  return item_3_;
}
void CMsgDOTAMatch_Player::set_item_3(::google::protobuf::uint32 value) {
  set_has_item_3();
  item_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_3)
}

// optional uint32 item_4 = 8;
bool CMsgDOTAMatch_Player::has_item_4() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_4() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAMatch_Player::clear_has_item_4() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAMatch_Player::clear_item_4() {
  item_4_ = 0u;
  clear_has_item_4();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_4)
  return item_4_;
}
void CMsgDOTAMatch_Player::set_item_4(::google::protobuf::uint32 value) {
  set_has_item_4();
  item_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_4)
}

// optional uint32 item_5 = 9;
bool CMsgDOTAMatch_Player::has_item_5() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_5() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAMatch_Player::clear_has_item_5() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAMatch_Player::clear_item_5() {
  item_5_ = 0u;
  clear_has_item_5();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_5)
  return item_5_;
}
void CMsgDOTAMatch_Player::set_item_5(::google::protobuf::uint32 value) {
  set_has_item_5();
  item_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_5)
}

// optional uint32 item_6 = 59;
bool CMsgDOTAMatch_Player::has_item_6() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_6() {
  _has_bits_[1] |= 0x00200000u;
}
void CMsgDOTAMatch_Player::clear_has_item_6() {
  _has_bits_[1] &= ~0x00200000u;
}
void CMsgDOTAMatch_Player::clear_item_6() {
  item_6_ = 0u;
  clear_has_item_6();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_6() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_6)
  return item_6_;
}
void CMsgDOTAMatch_Player::set_item_6(::google::protobuf::uint32 value) {
  set_has_item_6();
  item_6_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_6)
}

// optional uint32 item_7 = 60;
bool CMsgDOTAMatch_Player::has_item_7() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_7() {
  _has_bits_[1] |= 0x00400000u;
}
void CMsgDOTAMatch_Player::clear_has_item_7() {
  _has_bits_[1] &= ~0x00400000u;
}
void CMsgDOTAMatch_Player::clear_item_7() {
  item_7_ = 0u;
  clear_has_item_7();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_7() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_7)
  return item_7_;
}
void CMsgDOTAMatch_Player::set_item_7(::google::protobuf::uint32 value) {
  set_has_item_7();
  item_7_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_7)
}

// optional uint32 item_8 = 61;
bool CMsgDOTAMatch_Player::has_item_8() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_item_8() {
  _has_bits_[1] |= 0x00800000u;
}
void CMsgDOTAMatch_Player::clear_has_item_8() {
  _has_bits_[1] &= ~0x00800000u;
}
void CMsgDOTAMatch_Player::clear_item_8() {
  item_8_ = 0u;
  clear_has_item_8();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::item_8() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.item_8)
  return item_8_;
}
void CMsgDOTAMatch_Player::set_item_8(::google::protobuf::uint32 value) {
  set_has_item_8();
  item_8_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.item_8)
}

// optional float expected_team_contribution = 10;
bool CMsgDOTAMatch_Player::has_expected_team_contribution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAMatch_Player::set_has_expected_team_contribution() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAMatch_Player::clear_has_expected_team_contribution() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAMatch_Player::clear_expected_team_contribution() {
  expected_team_contribution_ = 0;
  clear_has_expected_team_contribution();
}
float CMsgDOTAMatch_Player::expected_team_contribution() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.expected_team_contribution)
  return expected_team_contribution_;
}
void CMsgDOTAMatch_Player::set_expected_team_contribution(float value) {
  set_has_expected_team_contribution();
  expected_team_contribution_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.expected_team_contribution)
}

// optional float scaled_metric = 11;
bool CMsgDOTAMatch_Player::has_scaled_metric() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_metric() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_metric() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAMatch_Player::clear_scaled_metric() {
  scaled_metric_ = 0;
  clear_has_scaled_metric();
}
float CMsgDOTAMatch_Player::scaled_metric() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_metric)
  return scaled_metric_;
}
void CMsgDOTAMatch_Player::set_scaled_metric(float value) {
  set_has_scaled_metric();
  scaled_metric_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_metric)
}

// optional uint32 previous_rank = 12;
bool CMsgDOTAMatch_Player::has_previous_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_previous_rank() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAMatch_Player::clear_has_previous_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAMatch_Player::clear_previous_rank() {
  previous_rank_ = 0u;
  clear_has_previous_rank();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::previous_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.previous_rank)
  return previous_rank_;
}
void CMsgDOTAMatch_Player::set_previous_rank(::google::protobuf::uint32 value) {
  set_has_previous_rank();
  previous_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.previous_rank)
}

// optional sint32 rank_change = 13;
bool CMsgDOTAMatch_Player::has_rank_change() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_rank_change() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAMatch_Player::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAMatch_Player::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
::google::protobuf::int32 CMsgDOTAMatch_Player::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.rank_change)
  return rank_change_;
}
void CMsgDOTAMatch_Player::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.rank_change)
}

// optional bool solo_rank = 49;
bool CMsgDOTAMatch_Player::has_solo_rank() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_solo_rank() {
  _has_bits_[1] |= 0x00001000u;
}
void CMsgDOTAMatch_Player::clear_has_solo_rank() {
  _has_bits_[1] &= ~0x00001000u;
}
void CMsgDOTAMatch_Player::clear_solo_rank() {
  solo_rank_ = false;
  clear_has_solo_rank();
}
bool CMsgDOTAMatch_Player::solo_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.solo_rank)
  return solo_rank_;
}
void CMsgDOTAMatch_Player::set_solo_rank(bool value) {
  set_has_solo_rank();
  solo_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.solo_rank)
}

// optional bool seasonal_rank = 53;
bool CMsgDOTAMatch_Player::has_seasonal_rank() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_seasonal_rank() {
  _has_bits_[1] |= 0x00002000u;
}
void CMsgDOTAMatch_Player::clear_has_seasonal_rank() {
  _has_bits_[1] &= ~0x00002000u;
}
void CMsgDOTAMatch_Player::clear_seasonal_rank() {
  seasonal_rank_ = false;
  clear_has_seasonal_rank();
}
bool CMsgDOTAMatch_Player::seasonal_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.seasonal_rank)
  return seasonal_rank_;
}
void CMsgDOTAMatch_Player::set_seasonal_rank(bool value) {
  set_has_seasonal_rank();
  seasonal_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.seasonal_rank)
}

// optional uint32 kills = 14;
bool CMsgDOTAMatch_Player::has_kills() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_kills() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAMatch_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAMatch_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.kills)
  return kills_;
}
void CMsgDOTAMatch_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.kills)
}

// optional uint32 deaths = 15;
bool CMsgDOTAMatch_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAMatch_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAMatch_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.deaths)
  return deaths_;
}
void CMsgDOTAMatch_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.deaths)
}

// optional uint32 assists = 16;
bool CMsgDOTAMatch_Player::has_assists() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_assists() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAMatch_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAMatch_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.assists)
  return assists_;
}
void CMsgDOTAMatch_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.assists)
}

// optional uint32 leaver_status = 17;
bool CMsgDOTAMatch_Player::has_leaver_status() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_leaver_status() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAMatch_Player::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAMatch_Player::clear_leaver_status() {
  leaver_status_ = 0u;
  clear_has_leaver_status();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.leaver_status)
  return leaver_status_;
}
void CMsgDOTAMatch_Player::set_leaver_status(::google::protobuf::uint32 value) {
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.leaver_status)
}

// optional uint32 gold = 18;
bool CMsgDOTAMatch_Player::has_gold() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_gold() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTAMatch_Player::clear_has_gold() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTAMatch_Player::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold)
  return gold_;
}
void CMsgDOTAMatch_Player::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold)
}

// optional uint32 last_hits = 19;
bool CMsgDOTAMatch_Player::has_last_hits() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_last_hits() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTAMatch_Player::clear_has_last_hits() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTAMatch_Player::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.last_hits)
  return last_hits_;
}
void CMsgDOTAMatch_Player::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.last_hits)
}

// optional uint32 denies = 20;
bool CMsgDOTAMatch_Player::has_denies() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_denies() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTAMatch_Player::clear_has_denies() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTAMatch_Player::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.denies)
  return denies_;
}
void CMsgDOTAMatch_Player::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.denies)
}

// optional uint32 gold_per_min = 21;
bool CMsgDOTAMatch_Player::has_gold_per_min() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_gold_per_min() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTAMatch_Player::clear_has_gold_per_min() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTAMatch_Player::clear_gold_per_min() {
  gold_per_min_ = 0u;
  clear_has_gold_per_min();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold_per_min)
  return gold_per_min_;
}
void CMsgDOTAMatch_Player::set_gold_per_min(::google::protobuf::uint32 value) {
  set_has_gold_per_min();
  gold_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold_per_min)
}

// optional uint32 XP_per_min = 22;
bool CMsgDOTAMatch_Player::has_xp_per_min() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_xp_per_min() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTAMatch_Player::clear_has_xp_per_min() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTAMatch_Player::clear_xp_per_min() {
  xp_per_min_ = 0u;
  clear_has_xp_per_min();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::xp_per_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.XP_per_min)
  return xp_per_min_;
}
void CMsgDOTAMatch_Player::set_xp_per_min(::google::protobuf::uint32 value) {
  set_has_xp_per_min();
  xp_per_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.XP_per_min)
}

// optional uint32 gold_spent = 23;
bool CMsgDOTAMatch_Player::has_gold_spent() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_gold_spent() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTAMatch_Player::clear_has_gold_spent() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTAMatch_Player::clear_gold_spent() {
  gold_spent_ = 0u;
  clear_has_gold_spent();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::gold_spent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.gold_spent)
  return gold_spent_;
}
void CMsgDOTAMatch_Player::set_gold_spent(::google::protobuf::uint32 value) {
  set_has_gold_spent();
  gold_spent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.gold_spent)
}

// optional uint32 hero_damage = 24;
bool CMsgDOTAMatch_Player::has_hero_damage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_hero_damage() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTAMatch_Player::clear_has_hero_damage() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTAMatch_Player::clear_hero_damage() {
  hero_damage_ = 0u;
  clear_has_hero_damage();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_damage)
  return hero_damage_;
}
void CMsgDOTAMatch_Player::set_hero_damage(::google::protobuf::uint32 value) {
  set_has_hero_damage();
  hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_damage)
}

// optional uint32 tower_damage = 25;
bool CMsgDOTAMatch_Player::has_tower_damage() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_tower_damage() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTAMatch_Player::clear_has_tower_damage() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTAMatch_Player::clear_tower_damage() {
  tower_damage_ = 0u;
  clear_has_tower_damage();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.tower_damage)
  return tower_damage_;
}
void CMsgDOTAMatch_Player::set_tower_damage(::google::protobuf::uint32 value) {
  set_has_tower_damage();
  tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.tower_damage)
}

// optional uint32 hero_healing = 26;
bool CMsgDOTAMatch_Player::has_hero_healing() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_hero_healing() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTAMatch_Player::clear_has_hero_healing() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTAMatch_Player::clear_hero_healing() {
  hero_healing_ = 0u;
  clear_has_hero_healing();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_healing)
  return hero_healing_;
}
void CMsgDOTAMatch_Player::set_hero_healing(::google::protobuf::uint32 value) {
  set_has_hero_healing();
  hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_healing)
}

// optional uint32 level = 27;
bool CMsgDOTAMatch_Player::has_level() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_level() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTAMatch_Player::clear_has_level() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTAMatch_Player::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.level)
  return level_;
}
void CMsgDOTAMatch_Player::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.level)
}

// optional uint32 time_last_seen = 28;
bool CMsgDOTAMatch_Player::has_time_last_seen() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_time_last_seen() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTAMatch_Player::clear_has_time_last_seen() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTAMatch_Player::clear_time_last_seen() {
  time_last_seen_ = 0u;
  clear_has_time_last_seen();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::time_last_seen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.time_last_seen)
  return time_last_seen_;
}
void CMsgDOTAMatch_Player::set_time_last_seen(::google::protobuf::uint32 value) {
  set_has_time_last_seen();
  time_last_seen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.time_last_seen)
}

// optional string player_name = 29;
bool CMsgDOTAMatch_Player::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_Player::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch_Player::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch_Player::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgDOTAMatch_Player::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.player_name)
  return player_name_.GetNoArena();
}
void CMsgDOTAMatch_Player::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.player_name)
}
#if LANG_CXX11
void CMsgDOTAMatch_Player::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.Player.player_name)
}
#endif
void CMsgDOTAMatch_Player::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.Player.player_name)
}
void CMsgDOTAMatch_Player::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.Player.player_name)
}
::std::string* CMsgDOTAMatch_Player::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_Player::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_Player::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.player_name)
}

// optional uint32 support_ability_value = 30;
bool CMsgDOTAMatch_Player::has_support_ability_value() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_support_ability_value() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTAMatch_Player::clear_has_support_ability_value() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTAMatch_Player::clear_support_ability_value() {
  support_ability_value_ = 0u;
  clear_has_support_ability_value();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::support_ability_value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.support_ability_value)
  return support_ability_value_;
}
void CMsgDOTAMatch_Player::set_support_ability_value(::google::protobuf::uint32 value) {
  set_has_support_ability_value();
  support_ability_value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.support_ability_value)
}

// optional bool feeding_detected = 32;
bool CMsgDOTAMatch_Player::has_feeding_detected() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_feeding_detected() {
  _has_bits_[1] |= 0x00004000u;
}
void CMsgDOTAMatch_Player::clear_has_feeding_detected() {
  _has_bits_[1] &= ~0x00004000u;
}
void CMsgDOTAMatch_Player::clear_feeding_detected() {
  feeding_detected_ = false;
  clear_has_feeding_detected();
}
bool CMsgDOTAMatch_Player::feeding_detected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.feeding_detected)
  return feeding_detected_;
}
void CMsgDOTAMatch_Player::set_feeding_detected(bool value) {
  set_has_feeding_detected();
  feeding_detected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.feeding_detected)
}

// optional uint32 search_rank = 34;
bool CMsgDOTAMatch_Player::has_search_rank() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_search_rank() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTAMatch_Player::clear_has_search_rank() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTAMatch_Player::clear_search_rank() {
  search_rank_ = 0u;
  clear_has_search_rank();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.search_rank)
  return search_rank_;
}
void CMsgDOTAMatch_Player::set_search_rank(::google::protobuf::uint32 value) {
  set_has_search_rank();
  search_rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.search_rank)
}

// optional uint32 search_rank_uncertainty = 35;
bool CMsgDOTAMatch_Player::has_search_rank_uncertainty() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_Player::set_has_search_rank_uncertainty() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTAMatch_Player::clear_has_search_rank_uncertainty() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTAMatch_Player::clear_search_rank_uncertainty() {
  search_rank_uncertainty_ = 0u;
  clear_has_search_rank_uncertainty();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::search_rank_uncertainty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.search_rank_uncertainty)
  return search_rank_uncertainty_;
}
void CMsgDOTAMatch_Player::set_search_rank_uncertainty(::google::protobuf::uint32 value) {
  set_has_search_rank_uncertainty();
  search_rank_uncertainty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.search_rank_uncertainty)
}

// optional int32 rank_uncertainty_change = 36;
bool CMsgDOTAMatch_Player::has_rank_uncertainty_change() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_Player::set_has_rank_uncertainty_change() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTAMatch_Player::clear_has_rank_uncertainty_change() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTAMatch_Player::clear_rank_uncertainty_change() {
  rank_uncertainty_change_ = 0;
  clear_has_rank_uncertainty_change();
}
::google::protobuf::int32 CMsgDOTAMatch_Player::rank_uncertainty_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.rank_uncertainty_change)
  return rank_uncertainty_change_;
}
void CMsgDOTAMatch_Player::set_rank_uncertainty_change(::google::protobuf::int32 value) {
  set_has_rank_uncertainty_change();
  rank_uncertainty_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.rank_uncertainty_change)
}

// optional uint32 hero_play_count = 37;
bool CMsgDOTAMatch_Player::has_hero_play_count() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTAMatch_Player::set_has_hero_play_count() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTAMatch_Player::clear_has_hero_play_count() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTAMatch_Player::clear_hero_play_count() {
  hero_play_count_ = 0u;
  clear_has_hero_play_count();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::hero_play_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.hero_play_count)
  return hero_play_count_;
}
void CMsgDOTAMatch_Player::set_hero_play_count(::google::protobuf::uint32 value) {
  set_has_hero_play_count();
  hero_play_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.hero_play_count)
}

// optional fixed64 party_id = 38;
bool CMsgDOTAMatch_Player::has_party_id() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTAMatch_Player::set_has_party_id() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTAMatch_Player::clear_has_party_id() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTAMatch_Player::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgDOTAMatch_Player::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.party_id)
  return party_id_;
}
void CMsgDOTAMatch_Player::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.party_id)
}

// optional uint32 scaled_hero_damage = 54;
bool CMsgDOTAMatch_Player::has_scaled_hero_damage() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_hero_damage() {
  _has_bits_[1] |= 0x00020000u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_hero_damage() {
  _has_bits_[1] &= ~0x00020000u;
}
void CMsgDOTAMatch_Player::clear_scaled_hero_damage() {
  scaled_hero_damage_ = 0u;
  clear_has_scaled_hero_damage();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_hero_damage)
  return scaled_hero_damage_;
}
void CMsgDOTAMatch_Player::set_scaled_hero_damage(::google::protobuf::uint32 value) {
  set_has_scaled_hero_damage();
  scaled_hero_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_hero_damage)
}

// optional uint32 scaled_tower_damage = 55;
bool CMsgDOTAMatch_Player::has_scaled_tower_damage() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_tower_damage() {
  _has_bits_[1] |= 0x00040000u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_tower_damage() {
  _has_bits_[1] &= ~0x00040000u;
}
void CMsgDOTAMatch_Player::clear_scaled_tower_damage() {
  scaled_tower_damage_ = 0u;
  clear_has_scaled_tower_damage();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_tower_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_tower_damage)
  return scaled_tower_damage_;
}
void CMsgDOTAMatch_Player::set_scaled_tower_damage(::google::protobuf::uint32 value) {
  set_has_scaled_tower_damage();
  scaled_tower_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_tower_damage)
}

// optional uint32 scaled_hero_healing = 56;
bool CMsgDOTAMatch_Player::has_scaled_hero_healing() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_hero_healing() {
  _has_bits_[1] |= 0x00080000u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_hero_healing() {
  _has_bits_[1] &= ~0x00080000u;
}
void CMsgDOTAMatch_Player::clear_scaled_hero_healing() {
  scaled_hero_healing_ = 0u;
  clear_has_scaled_hero_healing();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::scaled_hero_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_hero_healing)
  return scaled_hero_healing_;
}
void CMsgDOTAMatch_Player::set_scaled_hero_healing(::google::protobuf::uint32 value) {
  set_has_scaled_hero_healing();
  scaled_hero_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_hero_healing)
}

// optional float scaled_kills = 39;
bool CMsgDOTAMatch_Player::has_scaled_kills() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_kills() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_kills() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTAMatch_Player::clear_scaled_kills() {
  scaled_kills_ = 0;
  clear_has_scaled_kills();
}
float CMsgDOTAMatch_Player::scaled_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_kills)
  return scaled_kills_;
}
void CMsgDOTAMatch_Player::set_scaled_kills(float value) {
  set_has_scaled_kills();
  scaled_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_kills)
}

// optional float scaled_deaths = 40;
bool CMsgDOTAMatch_Player::has_scaled_deaths() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_deaths() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_deaths() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTAMatch_Player::clear_scaled_deaths() {
  scaled_deaths_ = 0;
  clear_has_scaled_deaths();
}
float CMsgDOTAMatch_Player::scaled_deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_deaths)
  return scaled_deaths_;
}
void CMsgDOTAMatch_Player::set_scaled_deaths(float value) {
  set_has_scaled_deaths();
  scaled_deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_deaths)
}

// optional float scaled_assists = 41;
bool CMsgDOTAMatch_Player::has_scaled_assists() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTAMatch_Player::set_has_scaled_assists() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTAMatch_Player::clear_has_scaled_assists() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTAMatch_Player::clear_scaled_assists() {
  scaled_assists_ = 0;
  clear_has_scaled_assists();
}
float CMsgDOTAMatch_Player::scaled_assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.scaled_assists)
  return scaled_assists_;
}
void CMsgDOTAMatch_Player::set_scaled_assists(float value) {
  set_has_scaled_assists();
  scaled_assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.scaled_assists)
}

// optional uint32 claimed_farm_gold = 42;
bool CMsgDOTAMatch_Player::has_claimed_farm_gold() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgDOTAMatch_Player::set_has_claimed_farm_gold() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgDOTAMatch_Player::clear_has_claimed_farm_gold() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgDOTAMatch_Player::clear_claimed_farm_gold() {
  claimed_farm_gold_ = 0u;
  clear_has_claimed_farm_gold();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_farm_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_farm_gold)
  return claimed_farm_gold_;
}
void CMsgDOTAMatch_Player::set_claimed_farm_gold(::google::protobuf::uint32 value) {
  set_has_claimed_farm_gold();
  claimed_farm_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_farm_gold)
}

// optional uint32 support_gold = 43;
bool CMsgDOTAMatch_Player::has_support_gold() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgDOTAMatch_Player::set_has_support_gold() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgDOTAMatch_Player::clear_has_support_gold() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgDOTAMatch_Player::clear_support_gold() {
  support_gold_ = 0u;
  clear_has_support_gold();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::support_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.support_gold)
  return support_gold_;
}
void CMsgDOTAMatch_Player::set_support_gold(::google::protobuf::uint32 value) {
  set_has_support_gold();
  support_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.support_gold)
}

// optional uint32 claimed_denies = 44;
bool CMsgDOTAMatch_Player::has_claimed_denies() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgDOTAMatch_Player::set_has_claimed_denies() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgDOTAMatch_Player::clear_has_claimed_denies() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgDOTAMatch_Player::clear_claimed_denies() {
  claimed_denies_ = 0u;
  clear_has_claimed_denies();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_denies)
  return claimed_denies_;
}
void CMsgDOTAMatch_Player::set_claimed_denies(::google::protobuf::uint32 value) {
  set_has_claimed_denies();
  claimed_denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_denies)
}

// optional uint32 claimed_misses = 45;
bool CMsgDOTAMatch_Player::has_claimed_misses() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CMsgDOTAMatch_Player::set_has_claimed_misses() {
  _has_bits_[1] |= 0x00000400u;
}
void CMsgDOTAMatch_Player::clear_has_claimed_misses() {
  _has_bits_[1] &= ~0x00000400u;
}
void CMsgDOTAMatch_Player::clear_claimed_misses() {
  claimed_misses_ = 0u;
  clear_has_claimed_misses();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::claimed_misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.claimed_misses)
  return claimed_misses_;
}
void CMsgDOTAMatch_Player::set_claimed_misses(::google::protobuf::uint32 value) {
  set_has_claimed_misses();
  claimed_misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.claimed_misses)
}

// optional uint32 misses = 46;
bool CMsgDOTAMatch_Player::has_misses() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CMsgDOTAMatch_Player::set_has_misses() {
  _has_bits_[1] |= 0x00000800u;
}
void CMsgDOTAMatch_Player::clear_has_misses() {
  _has_bits_[1] &= ~0x00000800u;
}
void CMsgDOTAMatch_Player::clear_misses() {
  misses_ = 0u;
  clear_has_misses();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::misses() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.misses)
  return misses_;
}
void CMsgDOTAMatch_Player::set_misses(::google::protobuf::uint32 value) {
  set_has_misses();
  misses_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.misses)
}

// repeated .proto.dota.CMatchPlayerAbilityUpgrade ability_upgrades = 47;
int CMsgDOTAMatch_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
void CMsgDOTAMatch_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
const ::proto::dota::CMatchPlayerAbilityUpgrade& CMsgDOTAMatch_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
::proto::dota::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::mutable_ability_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Mutable(index);
}
::proto::dota::CMatchPlayerAbilityUpgrade* CMsgDOTAMatch_Player::add_ability_upgrades() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >*
CMsgDOTAMatch_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return &ability_upgrades_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerAbilityUpgrade >&
CMsgDOTAMatch_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.ability_upgrades)
  return ability_upgrades_;
}

// repeated .proto.dota.CMatchAdditionalUnitInventory additional_units_inventory = 48;
int CMsgDOTAMatch_Player::additional_units_inventory_size() const {
  return additional_units_inventory_.size();
}
void CMsgDOTAMatch_Player::clear_additional_units_inventory() {
  additional_units_inventory_.Clear();
}
const ::proto::dota::CMatchAdditionalUnitInventory& CMsgDOTAMatch_Player::additional_units_inventory(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Get(index);
}
::proto::dota::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::mutable_additional_units_inventory(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Mutable(index);
}
::proto::dota::CMatchAdditionalUnitInventory* CMsgDOTAMatch_Player::add_additional_units_inventory() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >*
CMsgDOTAMatch_Player::mutable_additional_units_inventory() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return &additional_units_inventory_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchAdditionalUnitInventory >&
CMsgDOTAMatch_Player::additional_units_inventory() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.additional_units_inventory)
  return additional_units_inventory_;
}

// repeated .proto.dota.CMatchPlayerPermanentBuff permanent_buffs = 57;
int CMsgDOTAMatch_Player::permanent_buffs_size() const {
  return permanent_buffs_.size();
}
void CMsgDOTAMatch_Player::clear_permanent_buffs() {
  permanent_buffs_.Clear();
}
const ::proto::dota::CMatchPlayerPermanentBuff& CMsgDOTAMatch_Player::permanent_buffs(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Get(index);
}
::proto::dota::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::mutable_permanent_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Mutable(index);
}
::proto::dota::CMatchPlayerPermanentBuff* CMsgDOTAMatch_Player::add_permanent_buffs() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >*
CMsgDOTAMatch_Player::mutable_permanent_buffs() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return &permanent_buffs_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchPlayerPermanentBuff >&
CMsgDOTAMatch_Player::permanent_buffs() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.Player.permanent_buffs)
  return permanent_buffs_;
}

// optional .proto.dota.CMsgDOTAMatch.Player.CustomGameData custom_game_data = 50;
bool CMsgDOTAMatch_Player::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_Player::set_has_custom_game_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch_Player::clear_has_custom_game_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch_Player::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::proto::dota::CMsgDOTAMatch_Player_CustomGameData::Clear();
  clear_has_custom_game_data();
}
const ::proto::dota::CMsgDOTAMatch_Player_CustomGameData& CMsgDOTAMatch_Player::custom_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_
                         : *::proto::dota::CMsgDOTAMatch_Player_CustomGameData::internal_default_instance();
}
::proto::dota::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_Player_CustomGameData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  return custom_game_data_;
}
::proto::dota::CMsgDOTAMatch_Player_CustomGameData* CMsgDOTAMatch_Player::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
  clear_has_custom_game_data();
  ::proto::dota::CMsgDOTAMatch_Player_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
void CMsgDOTAMatch_Player::set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_Player_CustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.Player.custom_game_data)
}

// optional bool active_battle_pass = 51;
bool CMsgDOTAMatch_Player::has_active_battle_pass() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_active_battle_pass() {
  _has_bits_[1] |= 0x00008000u;
}
void CMsgDOTAMatch_Player::clear_has_active_battle_pass() {
  _has_bits_[1] &= ~0x00008000u;
}
void CMsgDOTAMatch_Player::clear_active_battle_pass() {
  active_battle_pass_ = false;
  clear_has_active_battle_pass();
}
bool CMsgDOTAMatch_Player::active_battle_pass() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.active_battle_pass)
  return active_battle_pass_;
}
void CMsgDOTAMatch_Player::set_active_battle_pass(bool value) {
  set_has_active_battle_pass();
  active_battle_pass_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.active_battle_pass)
}

// optional uint32 net_worth = 52;
bool CMsgDOTAMatch_Player::has_net_worth() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_net_worth() {
  _has_bits_[1] |= 0x00010000u;
}
void CMsgDOTAMatch_Player::clear_has_net_worth() {
  _has_bits_[1] &= ~0x00010000u;
}
void CMsgDOTAMatch_Player::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.net_worth)
  return net_worth_;
}
void CMsgDOTAMatch_Player::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.net_worth)
}

// optional uint32 bot_difficulty = 58;
bool CMsgDOTAMatch_Player::has_bot_difficulty() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CMsgDOTAMatch_Player::set_has_bot_difficulty() {
  _has_bits_[1] |= 0x00100000u;
}
void CMsgDOTAMatch_Player::clear_has_bot_difficulty() {
  _has_bits_[1] &= ~0x00100000u;
}
void CMsgDOTAMatch_Player::clear_bot_difficulty() {
  bot_difficulty_ = 0u;
  clear_has_bot_difficulty();
}
::google::protobuf::uint32 CMsgDOTAMatch_Player::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.Player.bot_difficulty)
  return bot_difficulty_;
}
void CMsgDOTAMatch_Player::set_bot_difficulty(::google::protobuf::uint32 value) {
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.Player.bot_difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_BroadcasterInfo::kAccountIdFieldNumber;
const int CMsgDOTAMatch_BroadcasterInfo::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}
CMsgDOTAMatch_BroadcasterInfo::CMsgDOTAMatch_BroadcasterInfo(const CMsgDOTAMatch_BroadcasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}

void CMsgDOTAMatch_BroadcasterInfo::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgDOTAMatch_BroadcasterInfo::~CMsgDOTAMatch_BroadcasterInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch_BroadcasterInfo* n = new CMsgDOTAMatch_BroadcasterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch_BroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch_BroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return false;
#undef DO_
}

void CMsgDOTAMatch_BroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch_BroadcasterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterInfo::MergeFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterInfo::CopyFrom(const CMsgDOTAMatch_BroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterInfo::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterInfo::Swap(CMsgDOTAMatch_BroadcasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_BroadcasterInfo::InternalSwap(CMsgDOTAMatch_BroadcasterInfo* other) {
  name_.Swap(&other->name_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch_BroadcasterInfo

// optional uint32 account_id = 1;
bool CMsgDOTAMatch_BroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_BroadcasterInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch_BroadcasterInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch_BroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAMatch_BroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterInfo.account_id)
  return account_id_;
}
void CMsgDOTAMatch_BroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterInfo.account_id)
}

// optional string name = 2;
bool CMsgDOTAMatch_BroadcasterInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_BroadcasterInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch_BroadcasterInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch_BroadcasterInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTAMatch_BroadcasterInfo::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  return name_.GetNoArena();
}
void CMsgDOTAMatch_BroadcasterInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
#if LANG_CXX11
void CMsgDOTAMatch_BroadcasterInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
#endif
void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
void CMsgDOTAMatch_BroadcasterInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}
::std::string* CMsgDOTAMatch_BroadcasterInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_BroadcasterInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_BroadcasterInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterInfo.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_BroadcasterChannel::kCountryCodeFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kDescriptionFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kBroadcasterInfosFieldNumber;
const int CMsgDOTAMatch_BroadcasterChannel::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}
CMsgDOTAMatch_BroadcasterChannel::CMsgDOTAMatch_BroadcasterChannel(const CMsgDOTAMatch_BroadcasterChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      broadcaster_infos_(from.broadcaster_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}

void CMsgDOTAMatch_BroadcasterChannel::SharedCtor() {
  _cached_size_ = 0;
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgDOTAMatch_BroadcasterChannel::~CMsgDOTAMatch_BroadcasterChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  SharedDtor();
}

void CMsgDOTAMatch_BroadcasterChannel::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_BroadcasterChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_BroadcasterChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch_BroadcasterChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch_BroadcasterChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch_BroadcasterChannel* n = new CMsgDOTAMatch_BroadcasterChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch_BroadcasterChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  broadcaster_infos_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_language_code()) {
      GOOGLE_DCHECK(!language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_code_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch_BroadcasterChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcaster_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return false;
#undef DO_
}

void CMsgDOTAMatch_BroadcasterChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country_code(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (unsigned int i = 0, n = this->broadcaster_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->broadcaster_infos(i), output);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
}

::google::protobuf::uint8* CMsgDOTAMatch_BroadcasterChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country_code(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  for (unsigned int i = 0, n = this->broadcaster_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->broadcaster_infos(i), deterministic, target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  return target;
}

size_t CMsgDOTAMatch_BroadcasterChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
  {
    unsigned int count = this->broadcaster_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcaster_infos(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string country_code = 1;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_BroadcasterChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch_BroadcasterChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_BroadcasterChannel::MergeFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  broadcaster_infos_.MergeFrom(from.broadcaster_infos_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_language_code();
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
  }
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_BroadcasterChannel::CopyFrom(const CMsgDOTAMatch_BroadcasterChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.BroadcasterChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_BroadcasterChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_BroadcasterChannel::Swap(CMsgDOTAMatch_BroadcasterChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_BroadcasterChannel::InternalSwap(CMsgDOTAMatch_BroadcasterChannel* other) {
  broadcaster_infos_.InternalSwap(&other->broadcaster_infos_);
  country_code_.Swap(&other->country_code_);
  description_.Swap(&other->description_);
  language_code_.Swap(&other->language_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch_BroadcasterChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch_BroadcasterChannel

// optional string country_code = 1;
bool CMsgDOTAMatch_BroadcasterChannel::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_BroadcasterChannel::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CMsgDOTAMatch_BroadcasterChannel::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  return country_code_.GetNoArena();
}
void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
#if LANG_CXX11
void CMsgDOTAMatch_BroadcasterChannel::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
#endif
void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
void CMsgDOTAMatch_BroadcasterChannel::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_BroadcasterChannel::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.country_code)
}

// optional string description = 2;
bool CMsgDOTAMatch_BroadcasterChannel::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_BroadcasterChannel::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CMsgDOTAMatch_BroadcasterChannel::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  return description_.GetNoArena();
}
void CMsgDOTAMatch_BroadcasterChannel::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
#if LANG_CXX11
void CMsgDOTAMatch_BroadcasterChannel::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
#endif
void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
void CMsgDOTAMatch_BroadcasterChannel::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_BroadcasterChannel::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.description)
}

// repeated .proto.dota.CMsgDOTAMatch.BroadcasterInfo broadcaster_infos = 3;
int CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos_size() const {
  return broadcaster_infos_.size();
}
void CMsgDOTAMatch_BroadcasterChannel::clear_broadcaster_infos() {
  broadcaster_infos_.Clear();
}
const ::proto::dota::CMsgDOTAMatch_BroadcasterInfo& CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Get(index);
}
::proto::dota::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Mutable(index);
}
::proto::dota::CMsgDOTAMatch_BroadcasterInfo* CMsgDOTAMatch_BroadcasterChannel::add_broadcaster_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >*
CMsgDOTAMatch_BroadcasterChannel::mutable_broadcaster_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return &broadcaster_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterInfo >&
CMsgDOTAMatch_BroadcasterChannel::broadcaster_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.BroadcasterChannel.broadcaster_infos)
  return broadcaster_infos_;
}

// optional string language_code = 4;
bool CMsgDOTAMatch_BroadcasterChannel::has_language_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatch_BroadcasterChannel::set_has_language_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatch_BroadcasterChannel::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
const ::std::string& CMsgDOTAMatch_BroadcasterChannel::language_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  return language_code_.GetNoArena();
}
void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
#if LANG_CXX11
void CMsgDOTAMatch_BroadcasterChannel::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
#endif
void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
void CMsgDOTAMatch_BroadcasterChannel::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_BroadcasterChannel::release_language_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_BroadcasterChannel::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.BroadcasterChannel.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch_CustomGameData::kCustomGameIdFieldNumber;
const int CMsgDOTAMatch_CustomGameData::kMapNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch.CustomGameData)
}
CMsgDOTAMatch_CustomGameData::CMsgDOTAMatch_CustomGameData(const CMsgDOTAMatch_CustomGameData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_name()) {
    map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
  }
  custom_game_id_ = from.custom_game_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch.CustomGameData)
}

void CMsgDOTAMatch_CustomGameData::SharedCtor() {
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAMatch_CustomGameData::~CMsgDOTAMatch_CustomGameData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch.CustomGameData)
  SharedDtor();
}

void CMsgDOTAMatch_CustomGameData::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatch_CustomGameData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch_CustomGameData::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch_CustomGameData::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch_CustomGameData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch_CustomGameData* n = new CMsgDOTAMatch_CustomGameData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch_CustomGameData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  if (has_map_name()) {
    GOOGLE_DCHECK(!map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*map_name_.UnsafeRawStringPointer())->clear();
  }
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch_CustomGameData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch.CustomGameData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch.CustomGameData)
  return false;
#undef DO_
}

void CMsgDOTAMatch_CustomGameData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch.CustomGameData)
}

::google::protobuf::uint8* CMsgDOTAMatch_CustomGameData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional string map_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.CustomGameData.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch.CustomGameData)
  return target;
}

size_t CMsgDOTAMatch_CustomGameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_name = 2;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional uint64 custom_game_id = 1;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch_CustomGameData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch_CustomGameData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch.CustomGameData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch.CustomGameData)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch_CustomGameData::MergeFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch_CustomGameData::CopyFrom(const CMsgDOTAMatch_CustomGameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch.CustomGameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch_CustomGameData::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch_CustomGameData::Swap(CMsgDOTAMatch_CustomGameData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch_CustomGameData::InternalSwap(CMsgDOTAMatch_CustomGameData* other) {
  map_name_.Swap(&other->map_name_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch_CustomGameData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch_CustomGameData

// optional uint64 custom_game_id = 1;
bool CMsgDOTAMatch_CustomGameData::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch_CustomGameData::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch_CustomGameData::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch_CustomGameData::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgDOTAMatch_CustomGameData::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.CustomGameData.custom_game_id)
  return custom_game_id_;
}
void CMsgDOTAMatch_CustomGameData::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.CustomGameData.custom_game_id)
}

// optional string map_name = 2;
bool CMsgDOTAMatch_CustomGameData::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch_CustomGameData::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch_CustomGameData::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch_CustomGameData::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
const ::std::string& CMsgDOTAMatch_CustomGameData::map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  return map_name_.GetNoArena();
}
void CMsgDOTAMatch_CustomGameData::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
#if LANG_CXX11
void CMsgDOTAMatch_CustomGameData::set_map_name(::std::string&& value) {
  set_has_map_name();
  map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
#endif
void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
void CMsgDOTAMatch_CustomGameData::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}
::std::string* CMsgDOTAMatch_CustomGameData::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch_CustomGameData::release_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch_CustomGameData::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.CustomGameData.map_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatch::kDurationFieldNumber;
const int CMsgDOTAMatch::kStartTimeFieldNumber;
const int CMsgDOTAMatch::kPlayersFieldNumber;
const int CMsgDOTAMatch::kMatchIdFieldNumber;
const int CMsgDOTAMatch::kTowerStatusFieldNumber;
const int CMsgDOTAMatch::kBarracksStatusFieldNumber;
const int CMsgDOTAMatch::kClusterFieldNumber;
const int CMsgDOTAMatch::kFirstBloodTimeFieldNumber;
const int CMsgDOTAMatch::kReplaySaltFieldNumber;
const int CMsgDOTAMatch::kServerIpFieldNumber;
const int CMsgDOTAMatch::kServerPortFieldNumber;
const int CMsgDOTAMatch::kLobbyTypeFieldNumber;
const int CMsgDOTAMatch::kHumanPlayersFieldNumber;
const int CMsgDOTAMatch::kAverageSkillFieldNumber;
const int CMsgDOTAMatch::kGameBalanceFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatch::kDireTeamIdFieldNumber;
const int CMsgDOTAMatch::kLeagueidFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatch::kDireTeamNameFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatch::kDireTeamLogoFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kDireTeamCompleteFieldNumber;
const int CMsgDOTAMatch::kPositiveVotesFieldNumber;
const int CMsgDOTAMatch::kNegativeVotesFieldNumber;
const int CMsgDOTAMatch::kGameModeFieldNumber;
const int CMsgDOTAMatch::kPicksBansFieldNumber;
const int CMsgDOTAMatch::kMatchSeqNumFieldNumber;
const int CMsgDOTAMatch::kReplayStateFieldNumber;
const int CMsgDOTAMatch::kRadiantGuildIdFieldNumber;
const int CMsgDOTAMatch::kDireGuildIdFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamTagFieldNumber;
const int CMsgDOTAMatch::kDireTeamTagFieldNumber;
const int CMsgDOTAMatch::kSeriesIdFieldNumber;
const int CMsgDOTAMatch::kSeriesTypeFieldNumber;
const int CMsgDOTAMatch::kBroadcasterChannelsFieldNumber;
const int CMsgDOTAMatch::kEngineFieldNumber;
const int CMsgDOTAMatch::kCustomGameDataFieldNumber;
const int CMsgDOTAMatch::kMatchFlagsFieldNumber;
const int CMsgDOTAMatch::kPrivateMetadataKeyFieldNumber;
const int CMsgDOTAMatch::kRadiantTeamScoreFieldNumber;
const int CMsgDOTAMatch::kDireTeamScoreFieldNumber;
const int CMsgDOTAMatch::kMatchOutcomeFieldNumber;
const int CMsgDOTAMatch::kTournamentIdFieldNumber;
const int CMsgDOTAMatch::kTournamentRoundFieldNumber;
const int CMsgDOTAMatch::kPreGameDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatch::CMsgDOTAMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatch)
}
CMsgDOTAMatch::CMsgDOTAMatch(const CMsgDOTAMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      tower_status_(from.tower_status_),
      barracks_status_(from.barracks_status_),
      picks_bans_(from.picks_bans_),
      broadcaster_channels_(from.broadcaster_channels_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_name()) {
    radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
  }
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_name()) {
    dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
  }
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_tag()) {
    radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
  }
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_tag()) {
    dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
  }
  if (from.has_custom_game_data()) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_CustomGameData(*from.custom_game_data_);
  } else {
    custom_game_data_ = NULL;
  }
  ::memcpy(&duration_, &from.duration_,
    reinterpret_cast<char*>(&tournament_round_) -
    reinterpret_cast<char*>(&duration_) + sizeof(tournament_round_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatch)
}

void CMsgDOTAMatch::SharedCtor() {
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&custom_game_data_, 0, reinterpret_cast<char*>(&tournament_round_) -
    reinterpret_cast<char*>(&custom_game_data_) + sizeof(tournament_round_));
  _cached_size_ = 0;
}

CMsgDOTAMatch::~CMsgDOTAMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatch)
  SharedDtor();
}

void CMsgDOTAMatch::SharedDtor() {
  radiant_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  radiant_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete custom_game_data_;
  }
}

void CMsgDOTAMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatch::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatch& CMsgDOTAMatch::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatch* CMsgDOTAMatch::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatch* n = new CMsgDOTAMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatch)
  players_.Clear();
  tower_status_.Clear();
  barracks_status_.Clear();
  picks_bans_.Clear();
  broadcaster_channels_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_radiant_team_name()) {
      GOOGLE_DCHECK(!radiant_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*radiant_team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_dire_team_name()) {
      GOOGLE_DCHECK(!dire_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dire_team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_radiant_team_tag()) {
      GOOGLE_DCHECK(!radiant_team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*radiant_team_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_dire_team_tag()) {
      GOOGLE_DCHECK(!dire_team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dire_team_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_game_data()) {
      GOOGLE_DCHECK(custom_game_data_ != NULL);
      custom_game_data_->::proto::dota::CMsgDOTAMatch_CustomGameData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 224u) {
    ::memset(&duration_, 0, reinterpret_cast<char*>(&match_id_) -
      reinterpret_cast<char*>(&duration_) + sizeof(match_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&cluster_, 0, reinterpret_cast<char*>(&average_skill_) -
      reinterpret_cast<char*>(&cluster_) + sizeof(average_skill_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&game_balance_, 0, reinterpret_cast<char*>(&dire_team_complete_) -
      reinterpret_cast<char*>(&game_balance_) + sizeof(dire_team_complete_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&positive_votes_, 0, reinterpret_cast<char*>(&series_id_) -
      reinterpret_cast<char*>(&positive_votes_) + sizeof(series_id_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&series_type_, 0, reinterpret_cast<char*>(&match_outcome_) -
      reinterpret_cast<char*>(&series_type_) + sizeof(match_outcome_));
  }
  if (_has_bits_[40 / 32] & 768u) {
    ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&tournament_round_) -
      reinterpret_cast<char*>(&tournament_id_) + sizeof(tournament_round_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 startTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_starttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &starttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tower_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_tower_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tower_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 barracks_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_barracks_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_barracks_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cluster = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cluster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cluster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_first_blood_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 replay_salt = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_replay_salt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &replay_salt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 server_ip = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_server_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &server_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_port = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_server_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 human_players = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_human_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &human_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_skill = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_average_skill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_skill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_balance = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_game_balance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_radiant_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_dire_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_leagueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_name = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), this->radiant_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.radiant_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_name = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), this->dire_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.dire_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 radiant_team_logo = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_radiant_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radiant_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dire_team_logo = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_dire_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dire_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_complete = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_radiant_team_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_complete = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_dire_team_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 positive_votes = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_positive_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positive_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 negative_votes = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_negative_votes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &negative_votes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(31, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_picks_bans()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_seq_num = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_match_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAMatch_ReplayState_IsValid(value)) {
            set_replay_state(static_cast< ::proto::dota::CMsgDOTAMatch_ReplayState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(34, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_guild_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_radiant_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_guild_id = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_dire_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_tag = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(298u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_tag().data(), this->radiant_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.radiant_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_tag = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_tag().data(), this->dire_team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatch.dire_team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(346u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcaster_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 engine = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_engine();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &engine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_game_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_flags = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_match_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 private_metadata_key = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(381u)) {
          set_has_private_metadata_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &private_metadata_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_score = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_radiant_team_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_score = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_dire_team_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(50, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_round = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(416u)) {
          set_has_tournament_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pre_game_duration = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_pre_game_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_game_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatch)
  return false;
#undef DO_
}

void CMsgDOTAMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional fixed32 startTime = 4;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->starttime(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->players(i), output);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->match_id(), output);
  }

  // repeated uint32 tower_status = 8;
  for (int i = 0, n = this->tower_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->tower_status(i), output);
  }

  // repeated uint32 barracks_status = 9;
  for (int i = 0, n = this->barracks_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->barracks_status(i), output);
  }

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cluster(), output);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->first_blood_time(), output);
  }

  // optional fixed32 replay_salt = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->replay_salt(), output);
  }

  // optional fixed32 server_ip = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->server_ip(), output);
  }

  // optional uint32 server_port = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->server_port(), output);
  }

  // optional uint32 lobby_type = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lobby_type(), output);
  }

  // optional uint32 human_players = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->human_players(), output);
  }

  // optional uint32 average_skill = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->average_skill(), output);
  }

  // optional float game_balance = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->game_balance(), output);
  }

  // optional uint32 radiant_team_id = 20;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 21;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_team_id(), output);
  }

  // optional uint32 leagueid = 22;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->leagueid(), output);
  }

  // optional string radiant_team_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->radiant_team_name(), output);
  }

  // optional string dire_team_name = 24;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->dire_team_name(), output);
  }

  // optional uint64 radiant_team_logo = 25;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(25, this->radiant_team_logo(), output);
  }

  // optional uint64 dire_team_logo = 26;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(26, this->dire_team_logo(), output);
  }

  // optional uint32 radiant_team_complete = 27;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->radiant_team_complete(), output);
  }

  // optional uint32 dire_team_complete = 28;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->dire_team_complete(), output);
  }

  // optional uint32 positive_votes = 29;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->positive_votes(), output);
  }

  // optional uint32 negative_votes = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->negative_votes(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      31, this->game_mode(), output);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->picks_bans(i), output);
  }

  // optional uint64 match_seq_num = 33;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(33, this->match_seq_num(), output);
  }

  // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      34, this->replay_state(), output);
  }

  // optional uint32 radiant_guild_id = 35;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->radiant_guild_id(), output);
  }

  // optional uint32 dire_guild_id = 36;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->dire_guild_id(), output);
  }

  // optional string radiant_team_tag = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->radiant_team_tag(), output);
  }

  // optional string dire_team_tag = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->dire_team_tag(), output);
  }

  // optional uint32 series_id = 39;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->series_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 series_type = 40;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->series_type(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (unsigned int i = 0, n = this->broadcaster_channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->broadcaster_channels(i), output);
  }

  // optional uint32 engine = 44;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->engine(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, *this->custom_game_data_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 match_flags = 46;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->match_flags(), output);
  }

  // optional fixed32 private_metadata_key = 47;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(47, this->private_metadata_key(), output);
  }

  // optional uint32 radiant_team_score = 48;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->radiant_team_score(), output);
  }

  // optional uint32 dire_team_score = 49;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->dire_team_score(), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      50, this->match_outcome(), output);
  }

  // optional uint32 tournament_id = 51;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->tournament_id(), output);
  }

  // optional uint32 tournament_round = 52;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->tournament_round(), output);
  }

  // optional uint32 pre_game_duration = 53;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->pre_game_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatch)
}

::google::protobuf::uint8* CMsgDOTAMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional fixed32 startTime = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->starttime(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->players(i), deterministic, target);
  }

  // optional uint64 match_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->match_id(), target);
  }

  // repeated uint32 tower_status = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->tower_status_, target);

  // repeated uint32 barracks_status = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->barracks_status_, target);

  // optional uint32 cluster = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cluster(), target);
  }

  // optional uint32 first_blood_time = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->first_blood_time(), target);
  }

  // optional fixed32 replay_salt = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->replay_salt(), target);
  }

  // optional fixed32 server_ip = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->server_ip(), target);
  }

  // optional uint32 server_port = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->server_port(), target);
  }

  // optional uint32 lobby_type = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lobby_type(), target);
  }

  // optional uint32 human_players = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->human_players(), target);
  }

  // optional uint32 average_skill = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->average_skill(), target);
  }

  // optional float game_balance = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->game_balance(), target);
  }

  // optional uint32 radiant_team_id = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 21;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_team_id(), target);
  }

  // optional uint32 leagueid = 22;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->leagueid(), target);
  }

  // optional string radiant_team_name = 23;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->radiant_team_name(), target);
  }

  // optional string dire_team_name = 24;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->dire_team_name(), target);
  }

  // optional uint64 radiant_team_logo = 25;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(25, this->radiant_team_logo(), target);
  }

  // optional uint64 dire_team_logo = 26;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(26, this->dire_team_logo(), target);
  }

  // optional uint32 radiant_team_complete = 27;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->radiant_team_complete(), target);
  }

  // optional uint32 dire_team_complete = 28;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->dire_team_complete(), target);
  }

  // optional uint32 positive_votes = 29;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->positive_votes(), target);
  }

  // optional uint32 negative_votes = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->negative_votes(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      31, this->game_mode(), target);
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  for (unsigned int i = 0, n = this->picks_bans_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->picks_bans(i), deterministic, target);
  }

  // optional uint64 match_seq_num = 33;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(33, this->match_seq_num(), target);
  }

  // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      34, this->replay_state(), target);
  }

  // optional uint32 radiant_guild_id = 35;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->radiant_guild_id(), target);
  }

  // optional uint32 dire_guild_id = 36;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->dire_guild_id(), target);
  }

  // optional string radiant_team_tag = 37;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_tag().data(), this->radiant_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.radiant_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->radiant_team_tag(), target);
  }

  // optional string dire_team_tag = 38;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_tag().data(), this->dire_team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatch.dire_team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->dire_team_tag(), target);
  }

  // optional uint32 series_id = 39;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->series_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 series_type = 40;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->series_type(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  for (unsigned int i = 0, n = this->broadcaster_channels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        43, this->broadcaster_channels(i), deterministic, target);
  }

  // optional uint32 engine = 44;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->engine(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, *this->custom_game_data_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 match_flags = 46;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->match_flags(), target);
  }

  // optional fixed32 private_metadata_key = 47;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(47, this->private_metadata_key(), target);
  }

  // optional uint32 radiant_team_score = 48;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->radiant_team_score(), target);
  }

  // optional uint32 dire_team_score = 49;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->dire_team_score(), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      50, this->match_outcome(), target);
  }

  // optional uint32 tournament_id = 51;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->tournament_id(), target);
  }

  // optional uint32 tournament_round = 52;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->tournament_round(), target);
  }

  // optional uint32 pre_game_duration = 53;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->pre_game_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatch)
  return target;
}

size_t CMsgDOTAMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated uint32 tower_status = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tower_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->tower_status_size());
    total_size += data_size;
  }

  // repeated uint32 barracks_status = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->barracks_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->barracks_status_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
  {
    unsigned int count = this->picks_bans_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->picks_bans(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
  {
    unsigned int count = this->broadcaster_channels_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcaster_channels(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string radiant_team_name = 23;
    if (has_radiant_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional string dire_team_name = 24;
    if (has_dire_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional string radiant_team_tag = 37;
    if (has_radiant_team_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_tag());
    }

    // optional string dire_team_tag = 38;
    if (has_dire_team_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_tag());
    }

    // optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
    if (has_custom_game_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->custom_game_data_);
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional fixed32 startTime = 4;
    if (has_starttime()) {
      total_size += 1 + 4;
    }

    // optional uint64 match_id = 6;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 cluster = 10;
    if (has_cluster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cluster());
    }

    // optional uint32 first_blood_time = 12;
    if (has_first_blood_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood_time());
    }

    // optional fixed32 replay_salt = 13;
    if (has_replay_salt()) {
      total_size += 1 + 4;
    }

    // optional fixed32 server_ip = 14;
    if (has_server_ip()) {
      total_size += 1 + 4;
    }

    // optional uint32 server_port = 15;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_port());
    }

    // optional uint32 lobby_type = 16;
    if (has_lobby_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

    // optional uint32 human_players = 17;
    if (has_human_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->human_players());
    }

    // optional uint32 average_skill = 18;
    if (has_average_skill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_skill());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float game_balance = 19;
    if (has_game_balance()) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_id = 20;
    if (has_radiant_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 21;
    if (has_dire_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

    // optional uint32 leagueid = 22;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint64 radiant_team_logo = 25;
    if (has_radiant_team_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radiant_team_logo());
    }

    // optional uint64 dire_team_logo = 26;
    if (has_dire_team_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dire_team_logo());
    }

    // optional uint32 radiant_team_complete = 27;
    if (has_radiant_team_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_complete());
    }

    // optional uint32 dire_team_complete = 28;
    if (has_dire_team_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_complete());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 positive_votes = 29;
    if (has_positive_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positive_votes());
    }

    // optional uint32 negative_votes = 30;
    if (has_negative_votes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->negative_votes());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
    if (has_replay_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->replay_state());
    }

    // optional uint64 match_seq_num = 33;
    if (has_match_seq_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_seq_num());
    }

    // optional uint32 radiant_guild_id = 35;
    if (has_radiant_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_guild_id());
    }

    // optional uint32 dire_guild_id = 36;
    if (has_dire_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_guild_id());
    }

    // optional uint32 series_id = 39;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 series_type = 40;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 engine = 44;
    if (has_engine()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->engine());
    }

    // optional uint32 match_flags = 46;
    if (has_match_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_flags());
    }

    // optional fixed32 private_metadata_key = 47;
    if (has_private_metadata_key()) {
      total_size += 2 + 4;
    }

    // optional uint32 radiant_team_score = 48;
    if (has_radiant_team_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_score());
    }

    // optional uint32 pre_game_duration = 53;
    if (has_pre_game_duration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pre_game_duration());
    }

    // optional uint32 dire_team_score = 49;
    if (has_dire_team_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_score());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

  }
  if (_has_bits_[40 / 32] & 768u) {
    // optional uint32 tournament_id = 51;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_round = 52;
    if (has_tournament_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_round());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatch::MergeFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  tower_status_.MergeFrom(from.tower_status_);
  barracks_status_.MergeFrom(from.barracks_status_);
  picks_bans_.MergeFrom(from.picks_bans_);
  broadcaster_channels_.MergeFrom(from.broadcaster_channels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_radiant_team_name();
      radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dire_team_name();
      dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_radiant_team_tag();
      radiant_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_tag_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_dire_team_tag();
      dire_team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_custom_game_data()->::proto::dota::CMsgDOTAMatch_CustomGameData::MergeFrom(from.custom_game_data());
    }
    if (cached_has_bits & 0x00000020u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      starttime_ = from.starttime_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_id_ = from.match_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      cluster_ = from.cluster_;
    }
    if (cached_has_bits & 0x00000200u) {
      first_blood_time_ = from.first_blood_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      replay_salt_ = from.replay_salt_;
    }
    if (cached_has_bits & 0x00000800u) {
      server_ip_ = from.server_ip_;
    }
    if (cached_has_bits & 0x00001000u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00002000u) {
      lobby_type_ = from.lobby_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      human_players_ = from.human_players_;
    }
    if (cached_has_bits & 0x00008000u) {
      average_skill_ = from.average_skill_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      game_balance_ = from.game_balance_;
    }
    if (cached_has_bits & 0x00020000u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      dire_team_id_ = from.dire_team_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00100000u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00200000u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    if (cached_has_bits & 0x00400000u) {
      radiant_team_complete_ = from.radiant_team_complete_;
    }
    if (cached_has_bits & 0x00800000u) {
      dire_team_complete_ = from.dire_team_complete_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      positive_votes_ = from.positive_votes_;
    }
    if (cached_has_bits & 0x02000000u) {
      negative_votes_ = from.negative_votes_;
    }
    if (cached_has_bits & 0x04000000u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x08000000u) {
      replay_state_ = from.replay_state_;
    }
    if (cached_has_bits & 0x10000000u) {
      match_seq_num_ = from.match_seq_num_;
    }
    if (cached_has_bits & 0x20000000u) {
      radiant_guild_id_ = from.radiant_guild_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      dire_guild_id_ = from.dire_guild_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      engine_ = from.engine_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_flags_ = from.match_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      private_metadata_key_ = from.private_metadata_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      radiant_team_score_ = from.radiant_team_score_;
    }
    if (cached_has_bits & 0x00000020u) {
      pre_game_duration_ = from.pre_game_duration_;
    }
    if (cached_has_bits & 0x00000040u) {
      dire_team_score_ = from.dire_team_score_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_outcome_ = from.match_outcome_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      tournament_round_ = from.tournament_round_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgDOTAMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatch::CopyFrom(const CMsgDOTAMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatch::IsInitialized() const {
  return true;
}

void CMsgDOTAMatch::Swap(CMsgDOTAMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatch::InternalSwap(CMsgDOTAMatch* other) {
  players_.InternalSwap(&other->players_);
  tower_status_.InternalSwap(&other->tower_status_);
  barracks_status_.InternalSwap(&other->barracks_status_);
  picks_bans_.InternalSwap(&other->picks_bans_);
  broadcaster_channels_.InternalSwap(&other->broadcaster_channels_);
  radiant_team_name_.Swap(&other->radiant_team_name_);
  dire_team_name_.Swap(&other->dire_team_name_);
  radiant_team_tag_.Swap(&other->radiant_team_tag_);
  dire_team_tag_.Swap(&other->dire_team_tag_);
  std::swap(custom_game_data_, other->custom_game_data_);
  std::swap(duration_, other->duration_);
  std::swap(starttime_, other->starttime_);
  std::swap(match_id_, other->match_id_);
  std::swap(cluster_, other->cluster_);
  std::swap(first_blood_time_, other->first_blood_time_);
  std::swap(replay_salt_, other->replay_salt_);
  std::swap(server_ip_, other->server_ip_);
  std::swap(server_port_, other->server_port_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(human_players_, other->human_players_);
  std::swap(average_skill_, other->average_skill_);
  std::swap(game_balance_, other->game_balance_);
  std::swap(radiant_team_id_, other->radiant_team_id_);
  std::swap(dire_team_id_, other->dire_team_id_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(radiant_team_logo_, other->radiant_team_logo_);
  std::swap(dire_team_logo_, other->dire_team_logo_);
  std::swap(radiant_team_complete_, other->radiant_team_complete_);
  std::swap(dire_team_complete_, other->dire_team_complete_);
  std::swap(positive_votes_, other->positive_votes_);
  std::swap(negative_votes_, other->negative_votes_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(replay_state_, other->replay_state_);
  std::swap(match_seq_num_, other->match_seq_num_);
  std::swap(radiant_guild_id_, other->radiant_guild_id_);
  std::swap(dire_guild_id_, other->dire_guild_id_);
  std::swap(series_id_, other->series_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(engine_, other->engine_);
  std::swap(match_flags_, other->match_flags_);
  std::swap(private_metadata_key_, other->private_metadata_key_);
  std::swap(radiant_team_score_, other->radiant_team_score_);
  std::swap(pre_game_duration_, other->pre_game_duration_);
  std::swap(dire_team_score_, other->dire_team_score_);
  std::swap(match_outcome_, other->match_outcome_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_round_, other->tournament_round_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatch

// optional uint32 duration = 3;
bool CMsgDOTAMatch::has_duration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAMatch::set_has_duration() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAMatch::clear_has_duration() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAMatch::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CMsgDOTAMatch::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.duration)
  return duration_;
}
void CMsgDOTAMatch::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.duration)
}

// optional fixed32 startTime = 4;
bool CMsgDOTAMatch::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAMatch::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAMatch::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAMatch::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
::google::protobuf::uint32 CMsgDOTAMatch::starttime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.startTime)
  return starttime_;
}
void CMsgDOTAMatch::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.startTime)
}

// repeated .proto.dota.CMsgDOTAMatch.Player players = 5;
int CMsgDOTAMatch::players_size() const {
  return players_.size();
}
void CMsgDOTAMatch::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgDOTAMatch_Player& CMsgDOTAMatch::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.players)
  return players_.Get(index);
}
::proto::dota::CMsgDOTAMatch_Player* CMsgDOTAMatch::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgDOTAMatch_Player* CMsgDOTAMatch::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >*
CMsgDOTAMatch::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_Player >&
CMsgDOTAMatch::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.players)
  return players_;
}

// optional uint64 match_id = 6;
bool CMsgDOTAMatch::has_match_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAMatch::set_has_match_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAMatch::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAMatch::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAMatch::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_id)
  return match_id_;
}
void CMsgDOTAMatch::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_id)
}

// repeated uint32 tower_status = 8;
int CMsgDOTAMatch::tower_status_size() const {
  return tower_status_.size();
}
void CMsgDOTAMatch::clear_tower_status() {
  tower_status_.Clear();
}
::google::protobuf::uint32 CMsgDOTAMatch::tower_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tower_status)
  return tower_status_.Get(index);
}
void CMsgDOTAMatch::set_tower_status(int index, ::google::protobuf::uint32 value) {
  tower_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tower_status)
}
void CMsgDOTAMatch::add_tower_status(::google::protobuf::uint32 value) {
  tower_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.tower_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::tower_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.tower_status)
  return tower_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_tower_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.tower_status)
  return &tower_status_;
}

// repeated uint32 barracks_status = 9;
int CMsgDOTAMatch::barracks_status_size() const {
  return barracks_status_.size();
}
void CMsgDOTAMatch::clear_barracks_status() {
  barracks_status_.Clear();
}
::google::protobuf::uint32 CMsgDOTAMatch::barracks_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.barracks_status)
  return barracks_status_.Get(index);
}
void CMsgDOTAMatch::set_barracks_status(int index, ::google::protobuf::uint32 value) {
  barracks_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.barracks_status)
}
void CMsgDOTAMatch::add_barracks_status(::google::protobuf::uint32 value) {
  barracks_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.barracks_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatch::barracks_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.barracks_status)
  return barracks_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatch::mutable_barracks_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.barracks_status)
  return &barracks_status_;
}

// optional uint32 cluster = 10;
bool CMsgDOTAMatch::has_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAMatch::set_has_cluster() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAMatch::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAMatch::clear_cluster() {
  cluster_ = 0u;
  clear_has_cluster();
}
::google::protobuf::uint32 CMsgDOTAMatch::cluster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.cluster)
  return cluster_;
}
void CMsgDOTAMatch::set_cluster(::google::protobuf::uint32 value) {
  set_has_cluster();
  cluster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.cluster)
}

// optional uint32 first_blood_time = 12;
bool CMsgDOTAMatch::has_first_blood_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAMatch::set_has_first_blood_time() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAMatch::clear_has_first_blood_time() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAMatch::clear_first_blood_time() {
  first_blood_time_ = 0u;
  clear_has_first_blood_time();
}
::google::protobuf::uint32 CMsgDOTAMatch::first_blood_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.first_blood_time)
  return first_blood_time_;
}
void CMsgDOTAMatch::set_first_blood_time(::google::protobuf::uint32 value) {
  set_has_first_blood_time();
  first_blood_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.first_blood_time)
}

// optional fixed32 replay_salt = 13;
bool CMsgDOTAMatch::has_replay_salt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAMatch::set_has_replay_salt() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAMatch::clear_has_replay_salt() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAMatch::clear_replay_salt() {
  replay_salt_ = 0u;
  clear_has_replay_salt();
}
::google::protobuf::uint32 CMsgDOTAMatch::replay_salt() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.replay_salt)
  return replay_salt_;
}
void CMsgDOTAMatch::set_replay_salt(::google::protobuf::uint32 value) {
  set_has_replay_salt();
  replay_salt_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.replay_salt)
}

// optional fixed32 server_ip = 14;
bool CMsgDOTAMatch::has_server_ip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAMatch::set_has_server_ip() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAMatch::clear_has_server_ip() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAMatch::clear_server_ip() {
  server_ip_ = 0u;
  clear_has_server_ip();
}
::google::protobuf::uint32 CMsgDOTAMatch::server_ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.server_ip)
  return server_ip_;
}
void CMsgDOTAMatch::set_server_ip(::google::protobuf::uint32 value) {
  set_has_server_ip();
  server_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.server_ip)
}

// optional uint32 server_port = 15;
bool CMsgDOTAMatch::has_server_port() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAMatch::set_has_server_port() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAMatch::clear_has_server_port() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAMatch::clear_server_port() {
  server_port_ = 0u;
  clear_has_server_port();
}
::google::protobuf::uint32 CMsgDOTAMatch::server_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.server_port)
  return server_port_;
}
void CMsgDOTAMatch::set_server_port(::google::protobuf::uint32 value) {
  set_has_server_port();
  server_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.server_port)
}

// optional uint32 lobby_type = 16;
bool CMsgDOTAMatch::has_lobby_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAMatch::set_has_lobby_type() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAMatch::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAMatch::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
::google::protobuf::uint32 CMsgDOTAMatch::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.lobby_type)
  return lobby_type_;
}
void CMsgDOTAMatch::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.lobby_type)
}

// optional uint32 human_players = 17;
bool CMsgDOTAMatch::has_human_players() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAMatch::set_has_human_players() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAMatch::clear_has_human_players() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAMatch::clear_human_players() {
  human_players_ = 0u;
  clear_has_human_players();
}
::google::protobuf::uint32 CMsgDOTAMatch::human_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.human_players)
  return human_players_;
}
void CMsgDOTAMatch::set_human_players(::google::protobuf::uint32 value) {
  set_has_human_players();
  human_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.human_players)
}

// optional uint32 average_skill = 18;
bool CMsgDOTAMatch::has_average_skill() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAMatch::set_has_average_skill() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAMatch::clear_has_average_skill() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAMatch::clear_average_skill() {
  average_skill_ = 0u;
  clear_has_average_skill();
}
::google::protobuf::uint32 CMsgDOTAMatch::average_skill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.average_skill)
  return average_skill_;
}
void CMsgDOTAMatch::set_average_skill(::google::protobuf::uint32 value) {
  set_has_average_skill();
  average_skill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.average_skill)
}

// optional float game_balance = 19;
bool CMsgDOTAMatch::has_game_balance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAMatch::set_has_game_balance() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAMatch::clear_has_game_balance() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAMatch::clear_game_balance() {
  game_balance_ = 0;
  clear_has_game_balance();
}
float CMsgDOTAMatch::game_balance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.game_balance)
  return game_balance_;
}
void CMsgDOTAMatch::set_game_balance(float value) {
  set_has_game_balance();
  game_balance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.game_balance)
}

// optional uint32 radiant_team_id = 20;
bool CMsgDOTAMatch::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAMatch::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAMatch::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_id)
  return radiant_team_id_;
}
void CMsgDOTAMatch::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_id)
}

// optional uint32 dire_team_id = 21;
bool CMsgDOTAMatch::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAMatch::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAMatch::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_id)
  return dire_team_id_;
}
void CMsgDOTAMatch::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_id)
}

// optional uint32 leagueid = 22;
bool CMsgDOTAMatch::has_leagueid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTAMatch::set_has_leagueid() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTAMatch::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTAMatch::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
::google::protobuf::uint32 CMsgDOTAMatch::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.leagueid)
  return leagueid_;
}
void CMsgDOTAMatch::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.leagueid)
}

// optional string radiant_team_name = 23;
bool CMsgDOTAMatch::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatch::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatch::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_name();
}
const ::std::string& CMsgDOTAMatch::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
void CMsgDOTAMatch::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
#if LANG_CXX11
void CMsgDOTAMatch::set_radiant_team_name(::std::string&& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
#endif
void CMsgDOTAMatch::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
void CMsgDOTAMatch::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.radiant_team_name)
}
::std::string* CMsgDOTAMatch::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.radiant_team_name)
  clear_has_radiant_team_name();
  return radiant_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != NULL) {
    set_has_radiant_team_name();
  } else {
    clear_has_radiant_team_name();
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.radiant_team_name)
}

// optional string dire_team_name = 24;
bool CMsgDOTAMatch::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatch::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatch::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_name();
}
const ::std::string& CMsgDOTAMatch::dire_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.GetNoArena();
}
void CMsgDOTAMatch::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_name)
}
#if LANG_CXX11
void CMsgDOTAMatch::set_dire_team_name(::std::string&& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.dire_team_name)
}
#endif
void CMsgDOTAMatch::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.dire_team_name)
}
void CMsgDOTAMatch::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.dire_team_name)
}
::std::string* CMsgDOTAMatch::mutable_dire_team_name() {
  set_has_dire_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.dire_team_name)
  clear_has_dire_team_name();
  return dire_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != NULL) {
    set_has_dire_team_name();
  } else {
    clear_has_dire_team_name();
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.dire_team_name)
}

// optional uint64 radiant_team_logo = 25;
bool CMsgDOTAMatch::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTAMatch::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTAMatch::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
::google::protobuf::uint64 CMsgDOTAMatch::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_logo)
  return radiant_team_logo_;
}
void CMsgDOTAMatch::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_logo)
}

// optional uint64 dire_team_logo = 26;
bool CMsgDOTAMatch::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTAMatch::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTAMatch::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
::google::protobuf::uint64 CMsgDOTAMatch::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_logo)
  return dire_team_logo_;
}
void CMsgDOTAMatch::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_logo)
}

// optional uint32 radiant_team_complete = 27;
bool CMsgDOTAMatch::has_radiant_team_complete() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_complete() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTAMatch::clear_has_radiant_team_complete() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTAMatch::clear_radiant_team_complete() {
  radiant_team_complete_ = 0u;
  clear_has_radiant_team_complete();
}
::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_complete)
  return radiant_team_complete_;
}
void CMsgDOTAMatch::set_radiant_team_complete(::google::protobuf::uint32 value) {
  set_has_radiant_team_complete();
  radiant_team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_complete)
}

// optional uint32 dire_team_complete = 28;
bool CMsgDOTAMatch::has_dire_team_complete() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_complete() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTAMatch::clear_has_dire_team_complete() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTAMatch::clear_dire_team_complete() {
  dire_team_complete_ = 0u;
  clear_has_dire_team_complete();
}
::google::protobuf::uint32 CMsgDOTAMatch::dire_team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_complete)
  return dire_team_complete_;
}
void CMsgDOTAMatch::set_dire_team_complete(::google::protobuf::uint32 value) {
  set_has_dire_team_complete();
  dire_team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_complete)
}

// optional uint32 positive_votes = 29;
bool CMsgDOTAMatch::has_positive_votes() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTAMatch::set_has_positive_votes() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTAMatch::clear_has_positive_votes() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTAMatch::clear_positive_votes() {
  positive_votes_ = 0u;
  clear_has_positive_votes();
}
::google::protobuf::uint32 CMsgDOTAMatch::positive_votes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.positive_votes)
  return positive_votes_;
}
void CMsgDOTAMatch::set_positive_votes(::google::protobuf::uint32 value) {
  set_has_positive_votes();
  positive_votes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.positive_votes)
}

// optional uint32 negative_votes = 30;
bool CMsgDOTAMatch::has_negative_votes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTAMatch::set_has_negative_votes() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTAMatch::clear_has_negative_votes() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTAMatch::clear_negative_votes() {
  negative_votes_ = 0u;
  clear_has_negative_votes();
}
::google::protobuf::uint32 CMsgDOTAMatch::negative_votes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.negative_votes)
  return negative_votes_;
}
void CMsgDOTAMatch::set_negative_votes(::google::protobuf::uint32 value) {
  set_has_negative_votes();
  negative_votes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.negative_votes)
}

// optional .proto.dota.DOTA_GameMode game_mode = 31 [default = DOTA_GAMEMODE_NONE];
bool CMsgDOTAMatch::has_game_mode() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTAMatch::set_has_game_mode() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTAMatch::clear_has_game_mode() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTAMatch::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::proto::dota::DOTA_GameMode CMsgDOTAMatch::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
void CMsgDOTAMatch::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.game_mode)
}

// repeated .proto.dota.CMatchHeroSelectEvent picks_bans = 32;
int CMsgDOTAMatch::picks_bans_size() const {
  return picks_bans_.size();
}
void CMsgDOTAMatch::clear_picks_bans() {
  picks_bans_.Clear();
}
const ::proto::dota::CMatchHeroSelectEvent& CMsgDOTAMatch::picks_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Get(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgDOTAMatch::mutable_picks_bans(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Mutable(index);
}
::proto::dota::CMatchHeroSelectEvent* CMsgDOTAMatch::add_picks_bans() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >*
CMsgDOTAMatch::mutable_picks_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.picks_bans)
  return &picks_bans_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMatchHeroSelectEvent >&
CMsgDOTAMatch::picks_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.picks_bans)
  return picks_bans_;
}

// optional uint64 match_seq_num = 33;
bool CMsgDOTAMatch::has_match_seq_num() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTAMatch::set_has_match_seq_num() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTAMatch::clear_has_match_seq_num() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTAMatch::clear_match_seq_num() {
  match_seq_num_ = GOOGLE_ULONGLONG(0);
  clear_has_match_seq_num();
}
::google::protobuf::uint64 CMsgDOTAMatch::match_seq_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_seq_num)
  return match_seq_num_;
}
void CMsgDOTAMatch::set_match_seq_num(::google::protobuf::uint64 value) {
  set_has_match_seq_num();
  match_seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_seq_num)
}

// optional .proto.dota.CMsgDOTAMatch.ReplayState replay_state = 34 [default = REPLAY_AVAILABLE];
bool CMsgDOTAMatch::has_replay_state() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTAMatch::set_has_replay_state() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTAMatch::clear_has_replay_state() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTAMatch::clear_replay_state() {
  replay_state_ = 0;
  clear_has_replay_state();
}
::proto::dota::CMsgDOTAMatch_ReplayState CMsgDOTAMatch::replay_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.replay_state)
  return static_cast< ::proto::dota::CMsgDOTAMatch_ReplayState >(replay_state_);
}
void CMsgDOTAMatch::set_replay_state(::proto::dota::CMsgDOTAMatch_ReplayState value) {
  assert(::proto::dota::CMsgDOTAMatch_ReplayState_IsValid(value));
  set_has_replay_state();
  replay_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.replay_state)
}

// optional uint32 radiant_guild_id = 35;
bool CMsgDOTAMatch::has_radiant_guild_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_guild_id() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTAMatch::clear_has_radiant_guild_id() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTAMatch::clear_radiant_guild_id() {
  radiant_guild_id_ = 0u;
  clear_has_radiant_guild_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::radiant_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_guild_id)
  return radiant_guild_id_;
}
void CMsgDOTAMatch::set_radiant_guild_id(::google::protobuf::uint32 value) {
  set_has_radiant_guild_id();
  radiant_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_guild_id)
}

// optional uint32 dire_guild_id = 36;
bool CMsgDOTAMatch::has_dire_guild_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTAMatch::set_has_dire_guild_id() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTAMatch::clear_has_dire_guild_id() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTAMatch::clear_dire_guild_id() {
  dire_guild_id_ = 0u;
  clear_has_dire_guild_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::dire_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_guild_id)
  return dire_guild_id_;
}
void CMsgDOTAMatch::set_dire_guild_id(::google::protobuf::uint32 value) {
  set_has_dire_guild_id();
  dire_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_guild_id)
}

// optional string radiant_team_tag = 37;
bool CMsgDOTAMatch::has_radiant_team_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatch::clear_has_radiant_team_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatch::clear_radiant_team_tag() {
  radiant_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_tag();
}
const ::std::string& CMsgDOTAMatch::radiant_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.GetNoArena();
}
void CMsgDOTAMatch::set_radiant_team_tag(const ::std::string& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
#if LANG_CXX11
void CMsgDOTAMatch::set_radiant_team_tag(::std::string&& value) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
#endif
void CMsgDOTAMatch::set_radiant_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
void CMsgDOTAMatch::set_radiant_team_tag(const char* value, size_t size) {
  set_has_radiant_team_tag();
  radiant_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}
::std::string* CMsgDOTAMatch::mutable_radiant_team_tag() {
  set_has_radiant_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  return radiant_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch::release_radiant_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.radiant_team_tag)
  clear_has_radiant_team_tag();
  return radiant_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch::set_allocated_radiant_team_tag(::std::string* radiant_team_tag) {
  if (radiant_team_tag != NULL) {
    set_has_radiant_team_tag();
  } else {
    clear_has_radiant_team_tag();
  }
  radiant_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.radiant_team_tag)
}

// optional string dire_team_tag = 38;
bool CMsgDOTAMatch::has_dire_team_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_tag() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAMatch::clear_has_dire_team_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAMatch::clear_dire_team_tag() {
  dire_team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_tag();
}
const ::std::string& CMsgDOTAMatch::dire_team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.GetNoArena();
}
void CMsgDOTAMatch::set_dire_team_tag(const ::std::string& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
#if LANG_CXX11
void CMsgDOTAMatch::set_dire_team_tag(::std::string&& value) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
#endif
void CMsgDOTAMatch::set_dire_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
void CMsgDOTAMatch::set_dire_team_tag(const char* value, size_t size) {
  set_has_dire_team_tag();
  dire_team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatch.dire_team_tag)
}
::std::string* CMsgDOTAMatch::mutable_dire_team_tag() {
  set_has_dire_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.dire_team_tag)
  return dire_team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatch::release_dire_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.dire_team_tag)
  clear_has_dire_team_tag();
  return dire_team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatch::set_allocated_dire_team_tag(::std::string* dire_team_tag) {
  if (dire_team_tag != NULL) {
    set_has_dire_team_tag();
  } else {
    clear_has_dire_team_tag();
  }
  dire_team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.dire_team_tag)
}

// optional uint32 series_id = 39;
bool CMsgDOTAMatch::has_series_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTAMatch::set_has_series_id() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTAMatch::clear_has_series_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTAMatch::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.series_id)
  return series_id_;
}
void CMsgDOTAMatch::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.series_id)
}

// optional uint32 series_type = 40;
bool CMsgDOTAMatch::has_series_type() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgDOTAMatch::set_has_series_type() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgDOTAMatch::clear_has_series_type() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgDOTAMatch::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgDOTAMatch::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.series_type)
  return series_type_;
}
void CMsgDOTAMatch::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.series_type)
}

// repeated .proto.dota.CMsgDOTAMatch.BroadcasterChannel broadcaster_channels = 43;
int CMsgDOTAMatch::broadcaster_channels_size() const {
  return broadcaster_channels_.size();
}
void CMsgDOTAMatch::clear_broadcaster_channels() {
  broadcaster_channels_.Clear();
}
const ::proto::dota::CMsgDOTAMatch_BroadcasterChannel& CMsgDOTAMatch::broadcaster_channels(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Get(index);
}
::proto::dota::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::mutable_broadcaster_channels(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Mutable(index);
}
::proto::dota::CMsgDOTAMatch_BroadcasterChannel* CMsgDOTAMatch::add_broadcaster_channels() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >*
CMsgDOTAMatch::mutable_broadcaster_channels() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return &broadcaster_channels_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch_BroadcasterChannel >&
CMsgDOTAMatch::broadcaster_channels() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatch.broadcaster_channels)
  return broadcaster_channels_;
}

// optional uint32 engine = 44;
bool CMsgDOTAMatch::has_engine() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgDOTAMatch::set_has_engine() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgDOTAMatch::clear_has_engine() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgDOTAMatch::clear_engine() {
  engine_ = 0u;
  clear_has_engine();
}
::google::protobuf::uint32 CMsgDOTAMatch::engine() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.engine)
  return engine_;
}
void CMsgDOTAMatch::set_engine(::google::protobuf::uint32 value) {
  set_has_engine();
  engine_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.engine)
}

// optional .proto.dota.CMsgDOTAMatch.CustomGameData custom_game_data = 45;
bool CMsgDOTAMatch::has_custom_game_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAMatch::set_has_custom_game_data() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAMatch::clear_has_custom_game_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAMatch::clear_custom_game_data() {
  if (custom_game_data_ != NULL) custom_game_data_->::proto::dota::CMsgDOTAMatch_CustomGameData::Clear();
  clear_has_custom_game_data();
}
const ::proto::dota::CMsgDOTAMatch_CustomGameData& CMsgDOTAMatch::custom_game_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.custom_game_data)
  return custom_game_data_ != NULL ? *custom_game_data_
                         : *::proto::dota::CMsgDOTAMatch_CustomGameData::internal_default_instance();
}
::proto::dota::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::mutable_custom_game_data() {
  set_has_custom_game_data();
  if (custom_game_data_ == NULL) {
    custom_game_data_ = new ::proto::dota::CMsgDOTAMatch_CustomGameData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatch.custom_game_data)
  return custom_game_data_;
}
::proto::dota::CMsgDOTAMatch_CustomGameData* CMsgDOTAMatch::release_custom_game_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatch.custom_game_data)
  clear_has_custom_game_data();
  ::proto::dota::CMsgDOTAMatch_CustomGameData* temp = custom_game_data_;
  custom_game_data_ = NULL;
  return temp;
}
void CMsgDOTAMatch::set_allocated_custom_game_data(::proto::dota::CMsgDOTAMatch_CustomGameData* custom_game_data) {
  delete custom_game_data_;
  custom_game_data_ = custom_game_data;
  if (custom_game_data) {
    set_has_custom_game_data();
  } else {
    clear_has_custom_game_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatch.custom_game_data)
}

// optional uint32 match_flags = 46;
bool CMsgDOTAMatch::has_match_flags() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgDOTAMatch::set_has_match_flags() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgDOTAMatch::clear_has_match_flags() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgDOTAMatch::clear_match_flags() {
  match_flags_ = 0u;
  clear_has_match_flags();
}
::google::protobuf::uint32 CMsgDOTAMatch::match_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_flags)
  return match_flags_;
}
void CMsgDOTAMatch::set_match_flags(::google::protobuf::uint32 value) {
  set_has_match_flags();
  match_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_flags)
}

// optional fixed32 private_metadata_key = 47;
bool CMsgDOTAMatch::has_private_metadata_key() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgDOTAMatch::set_has_private_metadata_key() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgDOTAMatch::clear_has_private_metadata_key() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgDOTAMatch::clear_private_metadata_key() {
  private_metadata_key_ = 0u;
  clear_has_private_metadata_key();
}
::google::protobuf::uint32 CMsgDOTAMatch::private_metadata_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.private_metadata_key)
  return private_metadata_key_;
}
void CMsgDOTAMatch::set_private_metadata_key(::google::protobuf::uint32 value) {
  set_has_private_metadata_key();
  private_metadata_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.private_metadata_key)
}

// optional uint32 radiant_team_score = 48;
bool CMsgDOTAMatch::has_radiant_team_score() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgDOTAMatch::set_has_radiant_team_score() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgDOTAMatch::clear_has_radiant_team_score() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgDOTAMatch::clear_radiant_team_score() {
  radiant_team_score_ = 0u;
  clear_has_radiant_team_score();
}
::google::protobuf::uint32 CMsgDOTAMatch::radiant_team_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.radiant_team_score)
  return radiant_team_score_;
}
void CMsgDOTAMatch::set_radiant_team_score(::google::protobuf::uint32 value) {
  set_has_radiant_team_score();
  radiant_team_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.radiant_team_score)
}

// optional uint32 dire_team_score = 49;
bool CMsgDOTAMatch::has_dire_team_score() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgDOTAMatch::set_has_dire_team_score() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgDOTAMatch::clear_has_dire_team_score() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgDOTAMatch::clear_dire_team_score() {
  dire_team_score_ = 0u;
  clear_has_dire_team_score();
}
::google::protobuf::uint32 CMsgDOTAMatch::dire_team_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.dire_team_score)
  return dire_team_score_;
}
void CMsgDOTAMatch::set_dire_team_score(::google::protobuf::uint32 value) {
  set_has_dire_team_score();
  dire_team_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.dire_team_score)
}

// optional .proto.dota.EMatchOutcome match_outcome = 50 [default = k_EMatchOutcome_Unknown];
bool CMsgDOTAMatch::has_match_outcome() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgDOTAMatch::set_has_match_outcome() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgDOTAMatch::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgDOTAMatch::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
::proto::dota::EMatchOutcome CMsgDOTAMatch::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
void CMsgDOTAMatch::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.match_outcome)
}

// optional uint32 tournament_id = 51;
bool CMsgDOTAMatch::has_tournament_id() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgDOTAMatch::set_has_tournament_id() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgDOTAMatch::clear_has_tournament_id() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgDOTAMatch::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTAMatch::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tournament_id)
  return tournament_id_;
}
void CMsgDOTAMatch::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tournament_id)
}

// optional uint32 tournament_round = 52;
bool CMsgDOTAMatch::has_tournament_round() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgDOTAMatch::set_has_tournament_round() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgDOTAMatch::clear_has_tournament_round() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgDOTAMatch::clear_tournament_round() {
  tournament_round_ = 0u;
  clear_has_tournament_round();
}
::google::protobuf::uint32 CMsgDOTAMatch::tournament_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.tournament_round)
  return tournament_round_;
}
void CMsgDOTAMatch::set_tournament_round(::google::protobuf::uint32 value) {
  set_has_tournament_round();
  tournament_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.tournament_round)
}

// optional uint32 pre_game_duration = 53;
bool CMsgDOTAMatch::has_pre_game_duration() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgDOTAMatch::set_has_pre_game_duration() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgDOTAMatch::clear_has_pre_game_duration() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgDOTAMatch::clear_pre_game_duration() {
  pre_game_duration_ = 0u;
  clear_has_pre_game_duration();
}
::google::protobuf::uint32 CMsgDOTAMatch::pre_game_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatch.pre_game_duration)
  return pre_game_duration_;
}
void CMsgDOTAMatch::set_pre_game_duration(::google::protobuf::uint32 value) {
  set_has_pre_game_duration();
  pre_game_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatch.pre_game_duration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerCard_StatModifier::kStatFieldNumber;
const int CMsgPlayerCard_StatModifier::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPlayerCard.StatModifier)
}
CMsgPlayerCard_StatModifier::CMsgPlayerCard_StatModifier(const CMsgPlayerCard_StatModifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stat_, &from.stat_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&stat_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPlayerCard.StatModifier)
}

void CMsgPlayerCard_StatModifier::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stat_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&stat_) + sizeof(value_));
}

CMsgPlayerCard_StatModifier::~CMsgPlayerCard_StatModifier() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPlayerCard.StatModifier)
  SharedDtor();
}

void CMsgPlayerCard_StatModifier::SharedDtor() {
}

void CMsgPlayerCard_StatModifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerCard_StatModifier::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerCard_StatModifier& CMsgPlayerCard_StatModifier::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPlayerCard_StatModifier* CMsgPlayerCard_StatModifier::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerCard_StatModifier* n = new CMsgPlayerCard_StatModifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerCard_StatModifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPlayerCard.StatModifier)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&stat_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&stat_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerCard_StatModifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPlayerCard.StatModifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stat = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPlayerCard.StatModifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPlayerCard.StatModifier)
  return false;
#undef DO_
}

void CMsgPlayerCard_StatModifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPlayerCard.StatModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stat(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPlayerCard.StatModifier)
}

::google::protobuf::uint8* CMsgPlayerCard_StatModifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPlayerCard.StatModifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stat(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPlayerCard.StatModifier)
  return target;
}

size_t CMsgPlayerCard_StatModifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPlayerCard.StatModifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 stat = 1;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerCard_StatModifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard_StatModifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerCard_StatModifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPlayerCard.StatModifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPlayerCard.StatModifier)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard_StatModifier::MergeFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      stat_ = from.stat_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPlayerCard_StatModifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard_StatModifier::CopyFrom(const CMsgPlayerCard_StatModifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPlayerCard.StatModifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard_StatModifier::IsInitialized() const {
  return true;
}

void CMsgPlayerCard_StatModifier::Swap(CMsgPlayerCard_StatModifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerCard_StatModifier::InternalSwap(CMsgPlayerCard_StatModifier* other) {
  std::swap(stat_, other->stat_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerCard_StatModifier::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPlayerCard_StatModifier

// optional uint32 stat = 1;
bool CMsgPlayerCard_StatModifier::has_stat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPlayerCard_StatModifier::set_has_stat() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPlayerCard_StatModifier::clear_has_stat() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPlayerCard_StatModifier::clear_stat() {
  stat_ = 0u;
  clear_has_stat();
}
::google::protobuf::uint32 CMsgPlayerCard_StatModifier::stat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.StatModifier.stat)
  return stat_;
}
void CMsgPlayerCard_StatModifier::set_stat(::google::protobuf::uint32 value) {
  set_has_stat();
  stat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.StatModifier.stat)
}

// optional uint32 value = 2;
bool CMsgPlayerCard_StatModifier::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPlayerCard_StatModifier::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPlayerCard_StatModifier::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPlayerCard_StatModifier::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 CMsgPlayerCard_StatModifier::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.StatModifier.value)
  return value_;
}
void CMsgPlayerCard_StatModifier::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.StatModifier.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPlayerCard::kAccountIdFieldNumber;
const int CMsgPlayerCard::kStatModifierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPlayerCard::CMsgPlayerCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPlayerCard)
}
CMsgPlayerCard::CMsgPlayerCard(const CMsgPlayerCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stat_modifier_(from.stat_modifier_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPlayerCard)
}

void CMsgPlayerCard::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgPlayerCard::~CMsgPlayerCard() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPlayerCard)
  SharedDtor();
}

void CMsgPlayerCard::SharedDtor() {
}

void CMsgPlayerCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPlayerCard::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPlayerCard& CMsgPlayerCard::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPlayerCard* CMsgPlayerCard::New(::google::protobuf::Arena* arena) const {
  CMsgPlayerCard* n = new CMsgPlayerCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPlayerCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPlayerCard)
  stat_modifier_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPlayerCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPlayerCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stat_modifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPlayerCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPlayerCard)
  return false;
#undef DO_
}

void CMsgPlayerCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (unsigned int i = 0, n = this->stat_modifier_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stat_modifier(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPlayerCard)
}

::google::protobuf::uint8* CMsgPlayerCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPlayerCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  for (unsigned int i = 0, n = this->stat_modifier_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stat_modifier(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPlayerCard)
  return target;
}

size_t CMsgPlayerCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPlayerCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
  {
    unsigned int count = this->stat_modifier_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stat_modifier(i));
    }
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPlayerCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPlayerCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPlayerCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPlayerCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPlayerCard)
    MergeFrom(*source);
  }
}

void CMsgPlayerCard::MergeFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPlayerCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stat_modifier_.MergeFrom(from.stat_modifier_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPlayerCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPlayerCard::CopyFrom(const CMsgPlayerCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPlayerCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPlayerCard::IsInitialized() const {
  return true;
}

void CMsgPlayerCard::Swap(CMsgPlayerCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPlayerCard::InternalSwap(CMsgPlayerCard* other) {
  stat_modifier_.InternalSwap(&other->stat_modifier_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPlayerCard::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPlayerCard

// optional uint32 account_id = 1;
bool CMsgPlayerCard::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPlayerCard::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPlayerCard::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPlayerCard::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgPlayerCard::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.account_id)
  return account_id_;
}
void CMsgPlayerCard::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPlayerCard.account_id)
}

// repeated .proto.dota.CMsgPlayerCard.StatModifier stat_modifier = 2;
int CMsgPlayerCard::stat_modifier_size() const {
  return stat_modifier_.size();
}
void CMsgPlayerCard::clear_stat_modifier() {
  stat_modifier_.Clear();
}
const ::proto::dota::CMsgPlayerCard_StatModifier& CMsgPlayerCard::stat_modifier(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Get(index);
}
::proto::dota::CMsgPlayerCard_StatModifier* CMsgPlayerCard::mutable_stat_modifier(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Mutable(index);
}
::proto::dota::CMsgPlayerCard_StatModifier* CMsgPlayerCard::add_stat_modifier() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >*
CMsgPlayerCard::mutable_stat_modifier() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPlayerCard.stat_modifier)
  return &stat_modifier_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPlayerCard_StatModifier >&
CMsgPlayerCard::stat_modifier() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPlayerCard.stat_modifier)
  return stat_modifier_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerStats::kPlayerAccountIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kMatchCompletedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kLeagueIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDelayFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesIdFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kSeriesTypeFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kDeathsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kGpmFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTowerKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRoshanKillsFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kTeamfightParticipationFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kWardsPlacedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kCampsStackedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kRunesGrabbedFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kFirstBloodFieldNumber;
const int CMsgDOTAFantasyPlayerStats::kStunsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerStats)
}
CMsgDOTAFantasyPlayerStats::CMsgDOTAFantasyPlayerStats(const CMsgDOTAFantasyPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&stuns_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(stuns_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerStats)
}

void CMsgDOTAFantasyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&stuns_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(stuns_));
}

CMsgDOTAFantasyPlayerStats::~CMsgDOTAFantasyPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerStats::SharedDtor() {
}

void CMsgDOTAFantasyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerStats* n = new CMsgDOTAFantasyPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&series_type_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(series_type_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&kills_, 0, reinterpret_cast<char*>(&wards_placed_) -
      reinterpret_cast<char*>(&kills_) + sizeof(wards_placed_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&camps_stacked_, 0, reinterpret_cast<char*>(&stuns_) -
      reinterpret_cast<char*>(&camps_stacked_) + sizeof(stuns_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool match_completed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_match_completed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &match_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cs = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_cs();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gpm = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_gpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tower_kills = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_tower_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 roshan_kills = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_roshan_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roshan_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float teamfight_participation = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_teamfight_participation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &teamfight_participation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wards_placed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_wards_placed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wards_placed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 camps_stacked = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_camps_stacked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camps_stacked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 runes_grabbed = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_runes_grabbed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runes_grabbed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_blood = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_first_blood();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_blood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float stuns = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_stuns();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stuns_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_account_id(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional bool match_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->match_completed(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 delay = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay(), output);
  }

  // optional uint32 series_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_id(), output);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 kills = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->kills(), output);
  }

  // optional uint32 deaths = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->deaths(), output);
  }

  // optional uint32 cs = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cs(), output);
  }

  // optional float gpm = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->gpm(), output);
  }

  // optional uint32 tower_kills = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->tower_kills(), output);
  }

  // optional uint32 roshan_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->roshan_kills(), output);
  }

  // optional float teamfight_participation = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->teamfight_participation(), output);
  }

  // optional uint32 wards_placed = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->wards_placed(), output);
  }

  // optional uint32 camps_stacked = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->camps_stacked(), output);
  }

  // optional uint32 runes_grabbed = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->runes_grabbed(), output);
  }

  // optional uint32 first_blood = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->first_blood(), output);
  }

  // optional float stuns = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->stuns(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_account_id(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional bool match_completed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->match_completed(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 delay = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay(), target);
  }

  // optional uint32 series_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_id(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 kills = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->kills(), target);
  }

  // optional uint32 deaths = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->deaths(), target);
  }

  // optional uint32 cs = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cs(), target);
  }

  // optional float gpm = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->gpm(), target);
  }

  // optional uint32 tower_kills = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->tower_kills(), target);
  }

  // optional uint32 roshan_kills = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->roshan_kills(), target);
  }

  // optional float teamfight_participation = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->teamfight_participation(), target);
  }

  // optional uint32 wards_placed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->wards_placed(), target);
  }

  // optional uint32 camps_stacked = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->camps_stacked(), target);
  }

  // optional uint32 runes_grabbed = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->runes_grabbed(), target);
  }

  // optional uint32 first_blood = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->first_blood(), target);
  }

  // optional float stuns = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->stuns(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 player_account_id = 1;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional bool match_completed = 3;
    if (has_match_completed()) {
      total_size += 1 + 1;
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 league_id = 5;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 delay = 6;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 series_id = 7;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 kills = 10;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 11;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 cs = 12;
    if (has_cs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cs());
    }

    // optional float gpm = 13;
    if (has_gpm()) {
      total_size += 1 + 4;
    }

    // optional uint32 tower_kills = 14;
    if (has_tower_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_kills());
    }

    // optional uint32 roshan_kills = 15;
    if (has_roshan_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roshan_kills());
    }

    // optional float teamfight_participation = 16;
    if (has_teamfight_participation()) {
      total_size += 2 + 4;
    }

    // optional uint32 wards_placed = 17;
    if (has_wards_placed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wards_placed());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional uint32 camps_stacked = 18;
    if (has_camps_stacked()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camps_stacked());
    }

    // optional uint32 runes_grabbed = 19;
    if (has_runes_grabbed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runes_grabbed());
    }

    // optional uint32 first_blood = 20;
    if (has_first_blood()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_blood());
    }

    // optional float stuns = 21;
    if (has_stuns()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerStats::MergeFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      match_completed_ = from.match_completed_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_type_ = from.series_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000200u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000400u) {
      cs_ = from.cs_;
    }
    if (cached_has_bits & 0x00000800u) {
      gpm_ = from.gpm_;
    }
    if (cached_has_bits & 0x00001000u) {
      tower_kills_ = from.tower_kills_;
    }
    if (cached_has_bits & 0x00002000u) {
      roshan_kills_ = from.roshan_kills_;
    }
    if (cached_has_bits & 0x00004000u) {
      teamfight_participation_ = from.teamfight_participation_;
    }
    if (cached_has_bits & 0x00008000u) {
      wards_placed_ = from.wards_placed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      camps_stacked_ = from.camps_stacked_;
    }
    if (cached_has_bits & 0x00020000u) {
      runes_grabbed_ = from.runes_grabbed_;
    }
    if (cached_has_bits & 0x00040000u) {
      first_blood_ = from.first_blood_;
    }
    if (cached_has_bits & 0x00080000u) {
      stuns_ = from.stuns_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerStats::CopyFrom(const CMsgDOTAFantasyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerStats::Swap(CMsgDOTAFantasyPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerStats::InternalSwap(CMsgDOTAFantasyPlayerStats* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(match_completed_, other->match_completed_);
  std::swap(team_id_, other->team_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(delay_, other->delay_);
  std::swap(series_id_, other->series_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(cs_, other->cs_);
  std::swap(gpm_, other->gpm_);
  std::swap(tower_kills_, other->tower_kills_);
  std::swap(roshan_kills_, other->roshan_kills_);
  std::swap(teamfight_participation_, other->teamfight_participation_);
  std::swap(wards_placed_, other->wards_placed_);
  std::swap(camps_stacked_, other->camps_stacked_);
  std::swap(runes_grabbed_, other->runes_grabbed_);
  std::swap(first_blood_, other->first_blood_);
  std::swap(stuns_, other->stuns_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerStats

// optional uint32 player_account_id = 1;
bool CMsgDOTAFantasyPlayerStats::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAFantasyPlayerStats::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.player_account_id)
  return player_account_id_;
}
void CMsgDOTAFantasyPlayerStats::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.player_account_id)
}

// optional uint64 match_id = 2;
bool CMsgDOTAFantasyPlayerStats::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAFantasyPlayerStats::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAFantasyPlayerStats::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.match_id)
  return match_id_;
}
void CMsgDOTAFantasyPlayerStats::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.match_id)
}

// optional bool match_completed = 3;
bool CMsgDOTAFantasyPlayerStats::has_match_completed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_match_completed() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_match_completed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAFantasyPlayerStats::clear_match_completed() {
  match_completed_ = false;
  clear_has_match_completed();
}
bool CMsgDOTAFantasyPlayerStats::match_completed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.match_completed)
  return match_completed_;
}
void CMsgDOTAFantasyPlayerStats::set_match_completed(bool value) {
  set_has_match_completed();
  match_completed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.match_completed)
}

// optional uint32 team_id = 4;
bool CMsgDOTAFantasyPlayerStats::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAFantasyPlayerStats::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.team_id)
  return team_id_;
}
void CMsgDOTAFantasyPlayerStats::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.team_id)
}

// optional uint32 league_id = 5;
bool CMsgDOTAFantasyPlayerStats::has_league_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_league_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAFantasyPlayerStats::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.league_id)
  return league_id_;
}
void CMsgDOTAFantasyPlayerStats::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.league_id)
}

// optional uint32 delay = 6;
bool CMsgDOTAFantasyPlayerStats::has_delay() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_delay() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_delay() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAFantasyPlayerStats::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.delay)
  return delay_;
}
void CMsgDOTAFantasyPlayerStats::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.delay)
}

// optional uint32 series_id = 7;
bool CMsgDOTAFantasyPlayerStats::has_series_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_series_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAFantasyPlayerStats::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.series_id)
  return series_id_;
}
void CMsgDOTAFantasyPlayerStats::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.series_id)
}

// optional uint32 series_type = 8;
bool CMsgDOTAFantasyPlayerStats::has_series_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_series_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAFantasyPlayerStats::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.series_type)
  return series_type_;
}
void CMsgDOTAFantasyPlayerStats::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.series_type)
}

// optional uint32 kills = 10;
bool CMsgDOTAFantasyPlayerStats::has_kills() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_kills() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_kills() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAFantasyPlayerStats::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.kills)
  return kills_;
}
void CMsgDOTAFantasyPlayerStats::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.kills)
}

// optional uint32 deaths = 11;
bool CMsgDOTAFantasyPlayerStats::has_deaths() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_deaths() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAFantasyPlayerStats::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.deaths)
  return deaths_;
}
void CMsgDOTAFantasyPlayerStats::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.deaths)
}

// optional uint32 cs = 12;
bool CMsgDOTAFantasyPlayerStats::has_cs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_cs() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_cs() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAFantasyPlayerStats::clear_cs() {
  cs_ = 0u;
  clear_has_cs();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::cs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.cs)
  return cs_;
}
void CMsgDOTAFantasyPlayerStats::set_cs(::google::protobuf::uint32 value) {
  set_has_cs();
  cs_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.cs)
}

// optional float gpm = 13;
bool CMsgDOTAFantasyPlayerStats::has_gpm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_gpm() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_gpm() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAFantasyPlayerStats::clear_gpm() {
  gpm_ = 0;
  clear_has_gpm();
}
float CMsgDOTAFantasyPlayerStats::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.gpm)
  return gpm_;
}
void CMsgDOTAFantasyPlayerStats::set_gpm(float value) {
  set_has_gpm();
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.gpm)
}

// optional uint32 tower_kills = 14;
bool CMsgDOTAFantasyPlayerStats::has_tower_kills() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_tower_kills() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_tower_kills() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAFantasyPlayerStats::clear_tower_kills() {
  tower_kills_ = 0u;
  clear_has_tower_kills();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::tower_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.tower_kills)
  return tower_kills_;
}
void CMsgDOTAFantasyPlayerStats::set_tower_kills(::google::protobuf::uint32 value) {
  set_has_tower_kills();
  tower_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.tower_kills)
}

// optional uint32 roshan_kills = 15;
bool CMsgDOTAFantasyPlayerStats::has_roshan_kills() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_roshan_kills() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_roshan_kills() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAFantasyPlayerStats::clear_roshan_kills() {
  roshan_kills_ = 0u;
  clear_has_roshan_kills();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::roshan_kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.roshan_kills)
  return roshan_kills_;
}
void CMsgDOTAFantasyPlayerStats::set_roshan_kills(::google::protobuf::uint32 value) {
  set_has_roshan_kills();
  roshan_kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.roshan_kills)
}

// optional float teamfight_participation = 16;
bool CMsgDOTAFantasyPlayerStats::has_teamfight_participation() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_teamfight_participation() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_teamfight_participation() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAFantasyPlayerStats::clear_teamfight_participation() {
  teamfight_participation_ = 0;
  clear_has_teamfight_participation();
}
float CMsgDOTAFantasyPlayerStats::teamfight_participation() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.teamfight_participation)
  return teamfight_participation_;
}
void CMsgDOTAFantasyPlayerStats::set_teamfight_participation(float value) {
  set_has_teamfight_participation();
  teamfight_participation_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.teamfight_participation)
}

// optional uint32 wards_placed = 17;
bool CMsgDOTAFantasyPlayerStats::has_wards_placed() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_wards_placed() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_wards_placed() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAFantasyPlayerStats::clear_wards_placed() {
  wards_placed_ = 0u;
  clear_has_wards_placed();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::wards_placed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.wards_placed)
  return wards_placed_;
}
void CMsgDOTAFantasyPlayerStats::set_wards_placed(::google::protobuf::uint32 value) {
  set_has_wards_placed();
  wards_placed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.wards_placed)
}

// optional uint32 camps_stacked = 18;
bool CMsgDOTAFantasyPlayerStats::has_camps_stacked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_camps_stacked() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_camps_stacked() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAFantasyPlayerStats::clear_camps_stacked() {
  camps_stacked_ = 0u;
  clear_has_camps_stacked();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::camps_stacked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.camps_stacked)
  return camps_stacked_;
}
void CMsgDOTAFantasyPlayerStats::set_camps_stacked(::google::protobuf::uint32 value) {
  set_has_camps_stacked();
  camps_stacked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.camps_stacked)
}

// optional uint32 runes_grabbed = 19;
bool CMsgDOTAFantasyPlayerStats::has_runes_grabbed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_runes_grabbed() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_runes_grabbed() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAFantasyPlayerStats::clear_runes_grabbed() {
  runes_grabbed_ = 0u;
  clear_has_runes_grabbed();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::runes_grabbed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.runes_grabbed)
  return runes_grabbed_;
}
void CMsgDOTAFantasyPlayerStats::set_runes_grabbed(::google::protobuf::uint32 value) {
  set_has_runes_grabbed();
  runes_grabbed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.runes_grabbed)
}

// optional uint32 first_blood = 20;
bool CMsgDOTAFantasyPlayerStats::has_first_blood() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_first_blood() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_first_blood() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAFantasyPlayerStats::clear_first_blood() {
  first_blood_ = 0u;
  clear_has_first_blood();
}
::google::protobuf::uint32 CMsgDOTAFantasyPlayerStats::first_blood() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.first_blood)
  return first_blood_;
}
void CMsgDOTAFantasyPlayerStats::set_first_blood(::google::protobuf::uint32 value) {
  set_has_first_blood();
  first_blood_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.first_blood)
}

// optional float stuns = 21;
bool CMsgDOTAFantasyPlayerStats::has_stuns() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTAFantasyPlayerStats::set_has_stuns() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTAFantasyPlayerStats::clear_has_stuns() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTAFantasyPlayerStats::clear_stuns() {
  stuns_ = 0;
  clear_has_stuns();
}
float CMsgDOTAFantasyPlayerStats::stuns() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerStats.stuns)
  return stuns_;
}
void CMsgDOTAFantasyPlayerStats::set_stuns(float value) {
  set_has_stuns();
  stuns_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAFantasyPlayerStats.stuns)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAFantasyPlayerMatchStats::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}
CMsgDOTAFantasyPlayerMatchStats::CMsgDOTAFantasyPlayerMatchStats(const CMsgDOTAFantasyPlayerMatchStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}

void CMsgDOTAFantasyPlayerMatchStats::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAFantasyPlayerMatchStats::~CMsgDOTAFantasyPlayerMatchStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  SharedDtor();
}

void CMsgDOTAFantasyPlayerMatchStats::SharedDtor() {
}

void CMsgDOTAFantasyPlayerMatchStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAFantasyPlayerMatchStats::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAFantasyPlayerMatchStats& CMsgDOTAFantasyPlayerMatchStats::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAFantasyPlayerMatchStats* CMsgDOTAFantasyPlayerMatchStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAFantasyPlayerMatchStats* n = new CMsgDOTAFantasyPlayerMatchStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAFantasyPlayerMatchStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAFantasyPlayerMatchStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return false;
#undef DO_
}

void CMsgDOTAFantasyPlayerMatchStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
}

::google::protobuf::uint8* CMsgDOTAFantasyPlayerMatchStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matches(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  return target;
}

size_t CMsgDOTAFantasyPlayerMatchStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAFantasyPlayerMatchStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAFantasyPlayerMatchStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAFantasyPlayerMatchStats::MergeFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAFantasyPlayerMatchStats::CopyFrom(const CMsgDOTAFantasyPlayerMatchStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAFantasyPlayerMatchStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAFantasyPlayerMatchStats::IsInitialized() const {
  return true;
}

void CMsgDOTAFantasyPlayerMatchStats::Swap(CMsgDOTAFantasyPlayerMatchStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAFantasyPlayerMatchStats::InternalSwap(CMsgDOTAFantasyPlayerMatchStats* other) {
  matches_.InternalSwap(&other->matches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAFantasyPlayerMatchStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAFantasyPlayerMatchStats

// repeated .proto.dota.CMsgDOTAFantasyPlayerStats matches = 1;
int CMsgDOTAFantasyPlayerMatchStats::matches_size() const {
  return matches_.size();
}
void CMsgDOTAFantasyPlayerMatchStats::clear_matches() {
  matches_.Clear();
}
const ::proto::dota::CMsgDOTAFantasyPlayerStats& CMsgDOTAFantasyPlayerMatchStats::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Get(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Mutable(index);
}
::proto::dota::CMsgDOTAFantasyPlayerStats* CMsgDOTAFantasyPlayerMatchStats::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >*
CMsgDOTAFantasyPlayerMatchStats::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAFantasyPlayerStats >&
CMsgDOTAFantasyPlayerMatchStats::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAFantasyPlayerMatchStats.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot_Mode::kModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kDesireFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetEntityFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Mode::kTargetZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}
CMsgDOTABotDebugInfo_Bot_Mode::CMsgDOTABotDebugInfo_Bot_Mode(const CMsgDOTABotDebugInfo_Bot_Mode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_id_, &from.mode_id_,
    reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&mode_id_) + sizeof(target_z_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mode_id_, 0, reinterpret_cast<char*>(&target_z_) -
    reinterpret_cast<char*>(&mode_id_) + sizeof(target_z_));
}

CMsgDOTABotDebugInfo_Bot_Mode::~CMsgDOTABotDebugInfo_Bot_Mode() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Mode::SharedDtor() {
}

void CMsgDOTABotDebugInfo_Bot_Mode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Mode::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot_Mode::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot_Mode::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABotDebugInfo_Bot_Mode* n = new CMsgDOTABotDebugInfo_Bot_Mode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABotDebugInfo_Bot_Mode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&mode_id_, 0, reinterpret_cast<char*>(&target_z_) -
      reinterpret_cast<char*>(&mode_id_) + sizeof(target_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABotDebugInfo_Bot_Mode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mode_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_mode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_desire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_entity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_entity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_x = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_target_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_y = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_target_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_z = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_target_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot_Mode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mode_id(), output);
  }

  // optional float desire = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire(), output);
  }

  // optional uint32 target_entity = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_entity(), output);
  }

  // optional uint32 target_x = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->target_x(), output);
  }

  // optional uint32 target_y = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_y(), output);
  }

  // optional uint32 target_z = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Mode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mode_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mode_id(), target);
  }

  // optional float desire = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire(), target);
  }

  // optional uint32 target_entity = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_entity(), target);
  }

  // optional uint32 target_x = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->target_x(), target);
  }

  // optional uint32 target_y = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_y(), target);
  }

  // optional uint32 target_z = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Mode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 mode_id = 1;
    if (has_mode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode_id());
    }

    // optional float desire = 2;
    if (has_desire()) {
      total_size += 1 + 4;
    }

    // optional uint32 target_entity = 3;
    if (has_target_entity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_entity());
    }

    // optional uint32 target_x = 4;
    if (has_target_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_x());
    }

    // optional uint32 target_y = 5;
    if (has_target_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_y());
    }

    // optional uint32 target_z = 6;
    if (has_target_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_z());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Mode* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABotDebugInfo_Bot_Mode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mode_id_ = from.mode_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_ = from.desire_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_entity_ = from.target_entity_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_x_ = from.target_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      target_y_ = from.target_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      target_z_ = from.target_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Mode::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Mode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Mode::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Mode::Swap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot_Mode::InternalSwap(CMsgDOTABotDebugInfo_Bot_Mode* other) {
  std::swap(mode_id_, other->mode_id_);
  std::swap(desire_, other->desire_);
  std::swap(target_entity_, other->target_entity_);
  std::swap(target_x_, other->target_x_);
  std::swap(target_y_, other->target_y_);
  std::swap(target_z_, other->target_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Mode::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABotDebugInfo_Bot_Mode

// optional uint32 mode_id = 1;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_mode_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_mode_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_mode_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_mode_id() {
  mode_id_ = 0u;
  clear_has_mode_id();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::mode_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
  return mode_id_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_mode_id(::google::protobuf::uint32 value) {
  set_has_mode_id();
  mode_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.mode_id)
}

// optional float desire = 2;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_desire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_desire() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_desire() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_desire() {
  desire_ = 0;
  clear_has_desire();
}
float CMsgDOTABotDebugInfo_Bot_Mode::desire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.desire)
  return desire_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_desire(float value) {
  set_has_desire();
  desire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.desire)
}

// optional uint32 target_entity = 3;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_entity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_entity() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_entity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_entity() {
  target_entity_ = 0u;
  clear_has_target_entity();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_entity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
  return target_entity_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_target_entity(::google::protobuf::uint32 value) {
  set_has_target_entity();
  target_entity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_entity)
}

// optional uint32 target_x = 4;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_x() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_x() {
  target_x_ = 0u;
  clear_has_target_x();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_x)
  return target_x_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_target_x(::google::protobuf::uint32 value) {
  set_has_target_x();
  target_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_x)
}

// optional uint32 target_y = 5;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_y() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_y() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_y() {
  target_y_ = 0u;
  clear_has_target_y();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_y)
  return target_y_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_target_y(::google::protobuf::uint32 value) {
  set_has_target_y();
  target_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_y)
}

// optional uint32 target_z = 6;
bool CMsgDOTABotDebugInfo_Bot_Mode::has_target_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_has_target_z() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_has_target_z() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTABotDebugInfo_Bot_Mode::clear_target_z() {
  target_z_ = 0u;
  clear_has_target_z();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Mode::target_z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_z)
  return target_z_;
}
void CMsgDOTABotDebugInfo_Bot_Mode::set_target_z(::google::protobuf::uint32 value) {
  set_has_target_z();
  target_z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Mode.target_z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot_Action::kActionIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot_Action::kActionTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}
CMsgDOTABotDebugInfo_Bot_Action::CMsgDOTABotDebugInfo_Bot_Action(const CMsgDOTABotDebugInfo_Bot_Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action_target()) {
    action_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_target_);
  }
  action_id_ = from.action_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedCtor() {
  _cached_size_ = 0;
  action_target_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  action_id_ = 0u;
}

CMsgDOTABotDebugInfo_Bot_Action::~CMsgDOTABotDebugInfo_Bot_Action() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot_Action::SharedDtor() {
  action_target_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTABotDebugInfo_Bot_Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot_Action::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot_Action::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot_Action::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABotDebugInfo_Bot_Action* n = new CMsgDOTABotDebugInfo_Bot_Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABotDebugInfo_Bot_Action::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  if (has_action_target()) {
    GOOGLE_DCHECK(!action_target_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*action_target_.UnsafeRawStringPointer())->clear();
  }
  action_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABotDebugInfo_Bot_Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 action_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_action_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string action_target = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action_target().data(), this->action_target().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot_Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->action_id(), output);
  }

  // optional string action_target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), this->action_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->action_target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot_Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 action_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->action_id(), target);
  }

  // optional string action_target = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action_target().data(), this->action_target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->action_target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot_Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string action_target = 2;
    if (has_action_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action_target());
    }

    // optional uint32 action_id = 1;
    if (has_action_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot_Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABotDebugInfo_Bot_Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_action_target();
      action_target_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_target_);
    }
    if (cached_has_bits & 0x00000002u) {
      action_id_ = from.action_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot_Action::CopyFrom(const CMsgDOTABotDebugInfo_Bot_Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot_Action::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot_Action::Swap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot_Action::InternalSwap(CMsgDOTABotDebugInfo_Bot_Action* other) {
  action_target_.Swap(&other->action_target_);
  std::swap(action_id_, other->action_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot_Action::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABotDebugInfo_Bot_Action

// optional uint32 action_id = 1;
bool CMsgDOTABotDebugInfo_Bot_Action::has_action_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Action::set_has_action_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot_Action::clear_has_action_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot_Action::clear_action_id() {
  action_id_ = 0u;
  clear_has_action_id();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot_Action::action_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_id)
  return action_id_;
}
void CMsgDOTABotDebugInfo_Bot_Action::set_action_id(::google::protobuf::uint32 value) {
  set_has_action_id();
  action_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_id)
}

// optional string action_target = 2;
bool CMsgDOTABotDebugInfo_Bot_Action::has_action_target() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABotDebugInfo_Bot_Action::set_has_action_target() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot_Action::clear_has_action_target() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot_Action::clear_action_target() {
  action_target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action_target();
}
const ::std::string& CMsgDOTABotDebugInfo_Bot_Action::action_target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return action_target_.GetNoArena();
}
void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const ::std::string& value) {
  set_has_action_target();
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
#if LANG_CXX11
void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(::std::string&& value) {
  set_has_action_target();
  action_target_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
#endif
void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action_target();
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
void CMsgDOTABotDebugInfo_Bot_Action::set_action_target(const char* value, size_t size) {
  set_has_action_target();
  action_target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}
::std::string* CMsgDOTABotDebugInfo_Bot_Action::mutable_action_target() {
  set_has_action_target();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  return action_target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTABotDebugInfo_Bot_Action::release_action_target() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
  clear_has_action_target();
  return action_target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTABotDebugInfo_Bot_Action::set_allocated_action_target(::std::string* action_target) {
  if (action_target != NULL) {
    set_has_action_target();
  } else {
    clear_has_action_target();
  }
  action_target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action_target);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABotDebugInfo.Bot.Action.action_target)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo_Bot::kPlayerOwnerIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kHeroIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kDifficultyFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerCurrentFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kPowerMaxFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetXFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetYFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kMoveTargetZFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActiveModeIdFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kExecutionTimeFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kModesFieldNumber;
const int CMsgDOTABotDebugInfo_Bot::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
}
CMsgDOTABotDebugInfo_Bot::CMsgDOTABotDebugInfo_Bot(const CMsgDOTABotDebugInfo_Bot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      modes_(from.modes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_action()) {
    action_ = new ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action(*from.action_);
  } else {
    action_ = NULL;
  }
  ::memcpy(&player_owner_id_, &from.player_owner_id_,
    reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&player_owner_id_) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
}

void CMsgDOTABotDebugInfo_Bot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&action_, 0, reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&action_) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo_Bot::~CMsgDOTABotDebugInfo_Bot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo.Bot)
  SharedDtor();
}

void CMsgDOTABotDebugInfo_Bot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete action_;
  }
}

void CMsgDOTABotDebugInfo_Bot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo_Bot::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo_Bot::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo_Bot::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABotDebugInfo_Bot* n = new CMsgDOTABotDebugInfo_Bot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABotDebugInfo_Bot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  modes_.Clear();
  if (has_action()) {
    GOOGLE_DCHECK(action_ != NULL);
    action_->::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&player_owner_id_, 0, reinterpret_cast<char*>(&move_target_y_) -
      reinterpret_cast<char*>(&player_owner_id_) + sizeof(move_target_y_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&move_target_z_, 0, reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&move_target_z_) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABotDebugInfo_Bot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_owner_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_owner_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_owner_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 power_current = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_power_current();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 power_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_power_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_move_target_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_move_target_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 move_target_z = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_move_target_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &move_target_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_mode_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_active_mode_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_mode_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float execution_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_execution_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo_Bot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_owner_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional uint32 power_current = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->power_current(), output);
  }

  // optional uint32 power_max = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power_max(), output);
  }

  // optional uint32 move_target_x = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->move_target_x(), output);
  }

  // optional uint32 move_target_y = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->move_target_y(), output);
  }

  // optional uint32 move_target_z = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->move_target_z(), output);
  }

  // optional uint32 active_mode_id = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->active_mode_id(), output);
  }

  // optional float execution_time = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->execution_time(), output);
  }

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (unsigned int i = 0, n = this->modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->modes(i), output);
  }

  // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->action_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo.Bot)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo_Bot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 player_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_owner_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional uint32 power_current = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->power_current(), target);
  }

  // optional uint32 power_max = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power_max(), target);
  }

  // optional uint32 move_target_x = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->move_target_x(), target);
  }

  // optional uint32 move_target_y = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->move_target_y(), target);
  }

  // optional uint32 move_target_z = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->move_target_z(), target);
  }

  // optional uint32 active_mode_id = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->active_mode_id(), target);
  }

  // optional float execution_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->execution_time(), target);
  }

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  for (unsigned int i = 0, n = this->modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->modes(i), deterministic, target);
  }

  // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->action_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo.Bot)
  return target;
}

size_t CMsgDOTABotDebugInfo_Bot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
  {
    unsigned int count = this->modes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modes(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->action_);
    }

    // optional uint32 player_owner_id = 1;
    if (has_player_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_owner_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint32 power_current = 4;
    if (has_power_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_current());
    }

    // optional uint32 power_max = 5;
    if (has_power_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_max());
    }

    // optional uint32 move_target_x = 6;
    if (has_move_target_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_x());
    }

    // optional uint32 move_target_y = 7;
    if (has_move_target_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_y());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 move_target_z = 8;
    if (has_move_target_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->move_target_z());
    }

    // optional uint32 active_mode_id = 9;
    if (has_active_mode_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_mode_id());
    }

    // optional float execution_time = 10;
    if (has_execution_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo_Bot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABotDebugInfo_Bot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo.Bot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo.Bot)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo_Bot::MergeFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modes_.MergeFrom(from.modes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_action()->::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::MergeFrom(from.action());
    }
    if (cached_has_bits & 0x00000002u) {
      player_owner_id_ = from.player_owner_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000010u) {
      power_current_ = from.power_current_;
    }
    if (cached_has_bits & 0x00000020u) {
      power_max_ = from.power_max_;
    }
    if (cached_has_bits & 0x00000040u) {
      move_target_x_ = from.move_target_x_;
    }
    if (cached_has_bits & 0x00000080u) {
      move_target_y_ = from.move_target_y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      move_target_z_ = from.move_target_z_;
    }
    if (cached_has_bits & 0x00000200u) {
      active_mode_id_ = from.active_mode_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo_Bot::CopyFrom(const CMsgDOTABotDebugInfo_Bot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo.Bot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo_Bot::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo_Bot::Swap(CMsgDOTABotDebugInfo_Bot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo_Bot::InternalSwap(CMsgDOTABotDebugInfo_Bot* other) {
  modes_.InternalSwap(&other->modes_);
  std::swap(action_, other->action_);
  std::swap(player_owner_id_, other->player_owner_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(power_current_, other->power_current_);
  std::swap(power_max_, other->power_max_);
  std::swap(move_target_x_, other->move_target_x_);
  std::swap(move_target_y_, other->move_target_y_);
  std::swap(move_target_z_, other->move_target_z_);
  std::swap(active_mode_id_, other->active_mode_id_);
  std::swap(execution_time_, other->execution_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo_Bot::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABotDebugInfo_Bot

// optional uint32 player_owner_id = 1;
bool CMsgDOTABotDebugInfo_Bot::has_player_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_player_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_player_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTABotDebugInfo_Bot::clear_player_owner_id() {
  player_owner_id_ = 0u;
  clear_has_player_owner_id();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::player_owner_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.player_owner_id)
  return player_owner_id_;
}
void CMsgDOTABotDebugInfo_Bot::set_player_owner_id(::google::protobuf::uint32 value) {
  set_has_player_owner_id();
  player_owner_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.player_owner_id)
}

// optional uint32 hero_id = 2;
bool CMsgDOTABotDebugInfo_Bot::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTABotDebugInfo_Bot::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.hero_id)
  return hero_id_;
}
void CMsgDOTABotDebugInfo_Bot::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.hero_id)
}

// optional uint32 difficulty = 3;
bool CMsgDOTABotDebugInfo_Bot::has_difficulty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_difficulty() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTABotDebugInfo_Bot::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.difficulty)
  return difficulty_;
}
void CMsgDOTABotDebugInfo_Bot::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.difficulty)
}

// optional uint32 power_current = 4;
bool CMsgDOTABotDebugInfo_Bot::has_power_current() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_power_current() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_power_current() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTABotDebugInfo_Bot::clear_power_current() {
  power_current_ = 0u;
  clear_has_power_current();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_current() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.power_current)
  return power_current_;
}
void CMsgDOTABotDebugInfo_Bot::set_power_current(::google::protobuf::uint32 value) {
  set_has_power_current();
  power_current_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.power_current)
}

// optional uint32 power_max = 5;
bool CMsgDOTABotDebugInfo_Bot::has_power_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_power_max() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_power_max() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTABotDebugInfo_Bot::clear_power_max() {
  power_max_ = 0u;
  clear_has_power_max();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::power_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.power_max)
  return power_max_;
}
void CMsgDOTABotDebugInfo_Bot::set_power_max(::google::protobuf::uint32 value) {
  set_has_power_max();
  power_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.power_max)
}

// optional uint32 move_target_x = 6;
bool CMsgDOTABotDebugInfo_Bot::has_move_target_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_move_target_x() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTABotDebugInfo_Bot::clear_move_target_x() {
  move_target_x_ = 0u;
  clear_has_move_target_x();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_x)
  return move_target_x_;
}
void CMsgDOTABotDebugInfo_Bot::set_move_target_x(::google::protobuf::uint32 value) {
  set_has_move_target_x();
  move_target_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_x)
}

// optional uint32 move_target_y = 7;
bool CMsgDOTABotDebugInfo_Bot::has_move_target_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_move_target_y() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_y() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTABotDebugInfo_Bot::clear_move_target_y() {
  move_target_y_ = 0u;
  clear_has_move_target_y();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_y)
  return move_target_y_;
}
void CMsgDOTABotDebugInfo_Bot::set_move_target_y(::google::protobuf::uint32 value) {
  set_has_move_target_y();
  move_target_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_y)
}

// optional uint32 move_target_z = 8;
bool CMsgDOTABotDebugInfo_Bot::has_move_target_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_move_target_z() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_move_target_z() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTABotDebugInfo_Bot::clear_move_target_z() {
  move_target_z_ = 0u;
  clear_has_move_target_z();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::move_target_z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_z)
  return move_target_z_;
}
void CMsgDOTABotDebugInfo_Bot::set_move_target_z(::google::protobuf::uint32 value) {
  set_has_move_target_z();
  move_target_z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.move_target_z)
}

// optional uint32 active_mode_id = 9;
bool CMsgDOTABotDebugInfo_Bot::has_active_mode_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_active_mode_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_active_mode_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTABotDebugInfo_Bot::clear_active_mode_id() {
  active_mode_id_ = 0u;
  clear_has_active_mode_id();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo_Bot::active_mode_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.active_mode_id)
  return active_mode_id_;
}
void CMsgDOTABotDebugInfo_Bot::set_active_mode_id(::google::protobuf::uint32 value) {
  set_has_active_mode_id();
  active_mode_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.active_mode_id)
}

// optional float execution_time = 10;
bool CMsgDOTABotDebugInfo_Bot::has_execution_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_execution_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTABotDebugInfo_Bot::clear_execution_time() {
  execution_time_ = 0;
  clear_has_execution_time();
}
float CMsgDOTABotDebugInfo_Bot::execution_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.execution_time)
  return execution_time_;
}
void CMsgDOTABotDebugInfo_Bot::set_execution_time(float value) {
  set_has_execution_time();
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.Bot.execution_time)
}

// repeated .proto.dota.CMsgDOTABotDebugInfo.Bot.Mode modes = 11;
int CMsgDOTABotDebugInfo_Bot::modes_size() const {
  return modes_.size();
}
void CMsgDOTABotDebugInfo_Bot::clear_modes() {
  modes_.Clear();
}
const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode& CMsgDOTABotDebugInfo_Bot::modes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Get(index);
}
::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::mutable_modes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Mutable(index);
}
::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode* CMsgDOTABotDebugInfo_Bot::add_modes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >*
CMsgDOTABotDebugInfo_Bot::mutable_modes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return &modes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot_Mode >&
CMsgDOTABotDebugInfo_Bot::modes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.Bot.modes)
  return modes_;
}

// optional .proto.dota.CMsgDOTABotDebugInfo.Bot.Action action = 12;
bool CMsgDOTABotDebugInfo_Bot::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABotDebugInfo_Bot::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABotDebugInfo_Bot::clear_action() {
  if (action_ != NULL) action_->::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::Clear();
  clear_has_action();
}
const ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action& CMsgDOTABotDebugInfo_Bot::action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  return action_ != NULL ? *action_
                         : *::proto::dota::CMsgDOTABotDebugInfo_Bot_Action::internal_default_instance();
}
::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::mutable_action() {
  set_has_action();
  if (action_ == NULL) {
    action_ = new ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  return action_;
}
::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* CMsgDOTABotDebugInfo_Bot::release_action() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
  clear_has_action();
  ::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* temp = action_;
  action_ = NULL;
  return temp;
}
void CMsgDOTABotDebugInfo_Bot::set_allocated_action(::proto::dota::CMsgDOTABotDebugInfo_Bot_Action* action) {
  delete action_;
  action_ = action;
  if (action) {
    set_has_action();
  } else {
    clear_has_action();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTABotDebugInfo.Bot.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTABotDebugInfo::kBotsFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesirePushLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireDefendLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneTopFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneMidFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmLaneBotFieldNumber;
const int CMsgDOTABotDebugInfo::kDesireFarmRoshanFieldNumber;
const int CMsgDOTABotDebugInfo::kExecutionTimeFieldNumber;
const int CMsgDOTABotDebugInfo::kRuneStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTABotDebugInfo)
}
CMsgDOTABotDebugInfo::CMsgDOTABotDebugInfo(const CMsgDOTABotDebugInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      bots_(from.bots_),
      rune_status_(from.rune_status_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&desire_push_lane_top_, &from.desire_push_lane_top_,
    reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&desire_push_lane_top_) + sizeof(execution_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTABotDebugInfo)
}

void CMsgDOTABotDebugInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&desire_push_lane_top_, 0, reinterpret_cast<char*>(&execution_time_) -
    reinterpret_cast<char*>(&desire_push_lane_top_) + sizeof(execution_time_));
}

CMsgDOTABotDebugInfo::~CMsgDOTABotDebugInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTABotDebugInfo)
  SharedDtor();
}

void CMsgDOTABotDebugInfo::SharedDtor() {
}

void CMsgDOTABotDebugInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTABotDebugInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTABotDebugInfo& CMsgDOTABotDebugInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTABotDebugInfo* CMsgDOTABotDebugInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTABotDebugInfo* n = new CMsgDOTABotDebugInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTABotDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTABotDebugInfo)
  bots_.Clear();
  rune_status_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&desire_push_lane_top_, 0, reinterpret_cast<char*>(&desire_farm_lane_mid_) -
      reinterpret_cast<char*>(&desire_push_lane_top_) + sizeof(desire_farm_lane_mid_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&desire_farm_lane_bot_, 0, reinterpret_cast<char*>(&execution_time_) -
      reinterpret_cast<char*>(&desire_farm_lane_bot_) + sizeof(execution_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTABotDebugInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTABotDebugInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_top = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_desire_push_lane_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_mid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_desire_push_lane_mid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_push_lane_bot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_desire_push_lane_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_push_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_top = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_desire_defend_lane_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_mid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_desire_defend_lane_mid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_defend_lane_bot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_desire_defend_lane_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_defend_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_top = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_desire_farm_lane_top();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_top_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_mid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_desire_farm_lane_mid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_lane_bot = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_desire_farm_lane_bot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_lane_bot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float desire_farm_roshan = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_desire_farm_roshan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desire_farm_roshan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float execution_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_execution_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 rune_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 104u, input, this->mutable_rune_status())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rune_status())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTABotDebugInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTABotDebugInfo)
  return false;
#undef DO_
}

void CMsgDOTABotDebugInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTABotDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  for (unsigned int i = 0, n = this->bots_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bots(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float desire_push_lane_top = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->desire_push_lane_top(), output);
  }

  // optional float desire_push_lane_mid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->desire_push_lane_mid(), output);
  }

  // optional float desire_push_lane_bot = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->desire_push_lane_bot(), output);
  }

  // optional float desire_defend_lane_top = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->desire_defend_lane_top(), output);
  }

  // optional float desire_defend_lane_mid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->desire_defend_lane_mid(), output);
  }

  // optional float desire_defend_lane_bot = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->desire_defend_lane_bot(), output);
  }

  // optional float desire_farm_lane_top = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->desire_farm_lane_top(), output);
  }

  // optional float desire_farm_lane_mid = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->desire_farm_lane_mid(), output);
  }

  // optional float desire_farm_lane_bot = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->desire_farm_lane_bot(), output);
  }

  // optional float desire_farm_roshan = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->desire_farm_roshan(), output);
  }

  // optional float execution_time = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->execution_time(), output);
  }

  // repeated uint32 rune_status = 13;
  for (int i = 0, n = this->rune_status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      13, this->rune_status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTABotDebugInfo)
}

::google::protobuf::uint8* CMsgDOTABotDebugInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTABotDebugInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  for (unsigned int i = 0, n = this->bots_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->bots(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float desire_push_lane_top = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->desire_push_lane_top(), target);
  }

  // optional float desire_push_lane_mid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->desire_push_lane_mid(), target);
  }

  // optional float desire_push_lane_bot = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->desire_push_lane_bot(), target);
  }

  // optional float desire_defend_lane_top = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->desire_defend_lane_top(), target);
  }

  // optional float desire_defend_lane_mid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->desire_defend_lane_mid(), target);
  }

  // optional float desire_defend_lane_bot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->desire_defend_lane_bot(), target);
  }

  // optional float desire_farm_lane_top = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->desire_farm_lane_top(), target);
  }

  // optional float desire_farm_lane_mid = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->desire_farm_lane_mid(), target);
  }

  // optional float desire_farm_lane_bot = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->desire_farm_lane_bot(), target);
  }

  // optional float desire_farm_roshan = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->desire_farm_roshan(), target);
  }

  // optional float execution_time = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->execution_time(), target);
  }

  // repeated uint32 rune_status = 13;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(13, this->rune_status_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTABotDebugInfo)
  return target;
}

size_t CMsgDOTABotDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTABotDebugInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
  {
    unsigned int count = this->bots_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bots(i));
    }
  }

  // repeated uint32 rune_status = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->rune_status_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->rune_status_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional float desire_push_lane_top = 2;
    if (has_desire_push_lane_top()) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_mid = 3;
    if (has_desire_push_lane_mid()) {
      total_size += 1 + 4;
    }

    // optional float desire_push_lane_bot = 4;
    if (has_desire_push_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_top = 5;
    if (has_desire_defend_lane_top()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_mid = 6;
    if (has_desire_defend_lane_mid()) {
      total_size += 1 + 4;
    }

    // optional float desire_defend_lane_bot = 7;
    if (has_desire_defend_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_top = 8;
    if (has_desire_farm_lane_top()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_lane_mid = 9;
    if (has_desire_farm_lane_mid()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional float desire_farm_lane_bot = 10;
    if (has_desire_farm_lane_bot()) {
      total_size += 1 + 4;
    }

    // optional float desire_farm_roshan = 11;
    if (has_desire_farm_roshan()) {
      total_size += 1 + 4;
    }

    // optional float execution_time = 12;
    if (has_execution_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTABotDebugInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTABotDebugInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTABotDebugInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTABotDebugInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTABotDebugInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTABotDebugInfo::MergeFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTABotDebugInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bots_.MergeFrom(from.bots_);
  rune_status_.MergeFrom(from.rune_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      desire_push_lane_top_ = from.desire_push_lane_top_;
    }
    if (cached_has_bits & 0x00000002u) {
      desire_push_lane_mid_ = from.desire_push_lane_mid_;
    }
    if (cached_has_bits & 0x00000004u) {
      desire_push_lane_bot_ = from.desire_push_lane_bot_;
    }
    if (cached_has_bits & 0x00000008u) {
      desire_defend_lane_top_ = from.desire_defend_lane_top_;
    }
    if (cached_has_bits & 0x00000010u) {
      desire_defend_lane_mid_ = from.desire_defend_lane_mid_;
    }
    if (cached_has_bits & 0x00000020u) {
      desire_defend_lane_bot_ = from.desire_defend_lane_bot_;
    }
    if (cached_has_bits & 0x00000040u) {
      desire_farm_lane_top_ = from.desire_farm_lane_top_;
    }
    if (cached_has_bits & 0x00000080u) {
      desire_farm_lane_mid_ = from.desire_farm_lane_mid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      desire_farm_lane_bot_ = from.desire_farm_lane_bot_;
    }
    if (cached_has_bits & 0x00000200u) {
      desire_farm_roshan_ = from.desire_farm_roshan_;
    }
    if (cached_has_bits & 0x00000400u) {
      execution_time_ = from.execution_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTABotDebugInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTABotDebugInfo::CopyFrom(const CMsgDOTABotDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTABotDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTABotDebugInfo::IsInitialized() const {
  return true;
}

void CMsgDOTABotDebugInfo::Swap(CMsgDOTABotDebugInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTABotDebugInfo::InternalSwap(CMsgDOTABotDebugInfo* other) {
  bots_.InternalSwap(&other->bots_);
  rune_status_.InternalSwap(&other->rune_status_);
  std::swap(desire_push_lane_top_, other->desire_push_lane_top_);
  std::swap(desire_push_lane_mid_, other->desire_push_lane_mid_);
  std::swap(desire_push_lane_bot_, other->desire_push_lane_bot_);
  std::swap(desire_defend_lane_top_, other->desire_defend_lane_top_);
  std::swap(desire_defend_lane_mid_, other->desire_defend_lane_mid_);
  std::swap(desire_defend_lane_bot_, other->desire_defend_lane_bot_);
  std::swap(desire_farm_lane_top_, other->desire_farm_lane_top_);
  std::swap(desire_farm_lane_mid_, other->desire_farm_lane_mid_);
  std::swap(desire_farm_lane_bot_, other->desire_farm_lane_bot_);
  std::swap(desire_farm_roshan_, other->desire_farm_roshan_);
  std::swap(execution_time_, other->execution_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTABotDebugInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTABotDebugInfo

// repeated .proto.dota.CMsgDOTABotDebugInfo.Bot bots = 1;
int CMsgDOTABotDebugInfo::bots_size() const {
  return bots_.size();
}
void CMsgDOTABotDebugInfo::clear_bots() {
  bots_.Clear();
}
const ::proto::dota::CMsgDOTABotDebugInfo_Bot& CMsgDOTABotDebugInfo::bots(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Get(index);
}
::proto::dota::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::mutable_bots(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Mutable(index);
}
::proto::dota::CMsgDOTABotDebugInfo_Bot* CMsgDOTABotDebugInfo::add_bots() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >*
CMsgDOTABotDebugInfo::mutable_bots() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.bots)
  return &bots_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTABotDebugInfo_Bot >&
CMsgDOTABotDebugInfo::bots() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.bots)
  return bots_;
}

// optional float desire_push_lane_top = 2;
bool CMsgDOTABotDebugInfo::has_desire_push_lane_top() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_push_lane_top() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_top() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTABotDebugInfo::clear_desire_push_lane_top() {
  desire_push_lane_top_ = 0;
  clear_has_desire_push_lane_top();
}
float CMsgDOTABotDebugInfo::desire_push_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_top)
  return desire_push_lane_top_;
}
void CMsgDOTABotDebugInfo::set_desire_push_lane_top(float value) {
  set_has_desire_push_lane_top();
  desire_push_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_top)
}

// optional float desire_push_lane_mid = 3;
bool CMsgDOTABotDebugInfo::has_desire_push_lane_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_push_lane_mid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTABotDebugInfo::clear_desire_push_lane_mid() {
  desire_push_lane_mid_ = 0;
  clear_has_desire_push_lane_mid();
}
float CMsgDOTABotDebugInfo::desire_push_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_mid)
  return desire_push_lane_mid_;
}
void CMsgDOTABotDebugInfo::set_desire_push_lane_mid(float value) {
  set_has_desire_push_lane_mid();
  desire_push_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_mid)
}

// optional float desire_push_lane_bot = 4;
bool CMsgDOTABotDebugInfo::has_desire_push_lane_bot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_push_lane_bot() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_push_lane_bot() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTABotDebugInfo::clear_desire_push_lane_bot() {
  desire_push_lane_bot_ = 0;
  clear_has_desire_push_lane_bot();
}
float CMsgDOTABotDebugInfo::desire_push_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_bot)
  return desire_push_lane_bot_;
}
void CMsgDOTABotDebugInfo::set_desire_push_lane_bot(float value) {
  set_has_desire_push_lane_bot();
  desire_push_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_push_lane_bot)
}

// optional float desire_defend_lane_top = 5;
bool CMsgDOTABotDebugInfo::has_desire_defend_lane_top() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_top() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_top() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTABotDebugInfo::clear_desire_defend_lane_top() {
  desire_defend_lane_top_ = 0;
  clear_has_desire_defend_lane_top();
}
float CMsgDOTABotDebugInfo::desire_defend_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_top)
  return desire_defend_lane_top_;
}
void CMsgDOTABotDebugInfo::set_desire_defend_lane_top(float value) {
  set_has_desire_defend_lane_top();
  desire_defend_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_top)
}

// optional float desire_defend_lane_mid = 6;
bool CMsgDOTABotDebugInfo::has_desire_defend_lane_mid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_mid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_mid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTABotDebugInfo::clear_desire_defend_lane_mid() {
  desire_defend_lane_mid_ = 0;
  clear_has_desire_defend_lane_mid();
}
float CMsgDOTABotDebugInfo::desire_defend_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_mid)
  return desire_defend_lane_mid_;
}
void CMsgDOTABotDebugInfo::set_desire_defend_lane_mid(float value) {
  set_has_desire_defend_lane_mid();
  desire_defend_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_mid)
}

// optional float desire_defend_lane_bot = 7;
bool CMsgDOTABotDebugInfo::has_desire_defend_lane_bot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_defend_lane_bot() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_defend_lane_bot() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTABotDebugInfo::clear_desire_defend_lane_bot() {
  desire_defend_lane_bot_ = 0;
  clear_has_desire_defend_lane_bot();
}
float CMsgDOTABotDebugInfo::desire_defend_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_bot)
  return desire_defend_lane_bot_;
}
void CMsgDOTABotDebugInfo::set_desire_defend_lane_bot(float value) {
  set_has_desire_defend_lane_bot();
  desire_defend_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_defend_lane_bot)
}

// optional float desire_farm_lane_top = 8;
bool CMsgDOTABotDebugInfo::has_desire_farm_lane_top() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_top() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_top() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTABotDebugInfo::clear_desire_farm_lane_top() {
  desire_farm_lane_top_ = 0;
  clear_has_desire_farm_lane_top();
}
float CMsgDOTABotDebugInfo::desire_farm_lane_top() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_top)
  return desire_farm_lane_top_;
}
void CMsgDOTABotDebugInfo::set_desire_farm_lane_top(float value) {
  set_has_desire_farm_lane_top();
  desire_farm_lane_top_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_top)
}

// optional float desire_farm_lane_mid = 9;
bool CMsgDOTABotDebugInfo::has_desire_farm_lane_mid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_mid() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_mid() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTABotDebugInfo::clear_desire_farm_lane_mid() {
  desire_farm_lane_mid_ = 0;
  clear_has_desire_farm_lane_mid();
}
float CMsgDOTABotDebugInfo::desire_farm_lane_mid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_mid)
  return desire_farm_lane_mid_;
}
void CMsgDOTABotDebugInfo::set_desire_farm_lane_mid(float value) {
  set_has_desire_farm_lane_mid();
  desire_farm_lane_mid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_mid)
}

// optional float desire_farm_lane_bot = 10;
bool CMsgDOTABotDebugInfo::has_desire_farm_lane_bot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_farm_lane_bot() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_farm_lane_bot() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTABotDebugInfo::clear_desire_farm_lane_bot() {
  desire_farm_lane_bot_ = 0;
  clear_has_desire_farm_lane_bot();
}
float CMsgDOTABotDebugInfo::desire_farm_lane_bot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_bot)
  return desire_farm_lane_bot_;
}
void CMsgDOTABotDebugInfo::set_desire_farm_lane_bot(float value) {
  set_has_desire_farm_lane_bot();
  desire_farm_lane_bot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_lane_bot)
}

// optional float desire_farm_roshan = 11;
bool CMsgDOTABotDebugInfo::has_desire_farm_roshan() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_desire_farm_roshan() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTABotDebugInfo::clear_has_desire_farm_roshan() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTABotDebugInfo::clear_desire_farm_roshan() {
  desire_farm_roshan_ = 0;
  clear_has_desire_farm_roshan();
}
float CMsgDOTABotDebugInfo::desire_farm_roshan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.desire_farm_roshan)
  return desire_farm_roshan_;
}
void CMsgDOTABotDebugInfo::set_desire_farm_roshan(float value) {
  set_has_desire_farm_roshan();
  desire_farm_roshan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.desire_farm_roshan)
}

// optional float execution_time = 12;
bool CMsgDOTABotDebugInfo::has_execution_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTABotDebugInfo::set_has_execution_time() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTABotDebugInfo::clear_has_execution_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTABotDebugInfo::clear_execution_time() {
  execution_time_ = 0;
  clear_has_execution_time();
}
float CMsgDOTABotDebugInfo::execution_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.execution_time)
  return execution_time_;
}
void CMsgDOTABotDebugInfo::set_execution_time(float value) {
  set_has_execution_time();
  execution_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.execution_time)
}

// repeated uint32 rune_status = 13;
int CMsgDOTABotDebugInfo::rune_status_size() const {
  return rune_status_.size();
}
void CMsgDOTABotDebugInfo::clear_rune_status() {
  rune_status_.Clear();
}
::google::protobuf::uint32 CMsgDOTABotDebugInfo::rune_status(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return rune_status_.Get(index);
}
void CMsgDOTABotDebugInfo::set_rune_status(int index, ::google::protobuf::uint32 value) {
  rune_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTABotDebugInfo.rune_status)
}
void CMsgDOTABotDebugInfo::add_rune_status(::google::protobuf::uint32 value) {
  rune_status_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTABotDebugInfo.rune_status)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTABotDebugInfo::rune_status() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return rune_status_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTABotDebugInfo::mutable_rune_status() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTABotDebugInfo.rune_status)
  return &rune_status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
