// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgClientToGCPrivateChatInviteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatInvite> {
} _CMsgClientToGCPrivateChatInvite_default_instance_;
class CMsgClientToGCPrivateChatKickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatKick> {
} _CMsgClientToGCPrivateChatKick_default_instance_;
class CMsgClientToGCPrivateChatPromoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatPromote> {
} _CMsgClientToGCPrivateChatPromote_default_instance_;
class CMsgClientToGCPrivateChatDemoteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatDemote> {
} _CMsgClientToGCPrivateChatDemote_default_instance_;
class CMsgGCToClientPrivateChatResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatResponse> {
} _CMsgGCToClientPrivateChatResponse_default_instance_;
class CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatInfoRequest> {
} _CMsgClientToGCPrivateChatInfoRequest_default_instance_;
class CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatInfoResponse_Member> {
} _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_;
class CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatInfoResponse> {
} _CMsgGCToClientPrivateChatInfoResponse_default_instance_;
class CMsgDOTAJoinChatChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinChatChannel> {
} _CMsgDOTAJoinChatChannel_default_instance_;
class CMsgDOTALeaveChatChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveChatChannel> {
} _CMsgDOTALeaveChatChannel_default_instance_;
class CMsgGCChatReportPublicSpamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCChatReportPublicSpam> {
} _CMsgGCChatReportPublicSpam_default_instance_;
class CMsgDOTAClientIgnoredUserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAClientIgnoredUser> {
} _CMsgDOTAClientIgnoredUser_default_instance_;
class CMsgDOTAChatMessage_DiceRollDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage_DiceRoll> {
} _CMsgDOTAChatMessage_DiceRoll_default_instance_;
class CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage_TriviaAnswered> {
} _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
class CMsgDOTAChatMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage> {
} _CMsgDOTAChatMessage_default_instance_;
class CMsgDOTAChatMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMember> {
} _CMsgDOTAChatMember_default_instance_;
class CMsgDOTAJoinChatChannelResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinChatChannelResponse> {
} _CMsgDOTAJoinChatChannelResponse_default_instance_;
class CMsgDOTAChatChannelFullUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelFullUpdate> {
} _CMsgDOTAChatChannelFullUpdate_default_instance_;
class CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAOtherJoinedChatChannel> {
} _CMsgDOTAOtherJoinedChatChannel_default_instance_;
class CMsgDOTAOtherLeftChatChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAOtherLeftChatChannel> {
} _CMsgDOTAOtherLeftChatChannel_default_instance_;
class CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelMemberUpdate_JoinedMember> {
} _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_;
class CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelMemberUpdate> {
} _CMsgDOTAChatChannelMemberUpdate_default_instance_;
class CMsgDOTARequestChatChannelListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelList> {
} _CMsgDOTARequestChatChannelList_default_instance_;
class CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelListResponse_ChatChannel> {
} _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgDOTARequestChatChannelListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelListResponse> {
} _CMsgDOTARequestChatChannelListResponse_default_instance_;
class CMsgDOTAChatGetUserListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserList> {
} _CMsgDOTAChatGetUserList_default_instance_;
class CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserListResponse_Member> {
} _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
class CMsgDOTAChatGetUserListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserListResponse> {
} _CMsgDOTAChatGetUserListResponse_default_instance_;
class CMsgDOTAChatGetMemberCountDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetMemberCount> {
} _CMsgDOTAChatGetMemberCount_default_instance_;
class CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetMemberCountResponse> {
} _CMsgDOTAChatGetMemberCountResponse_default_instance_;
class CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatRegionsEnabled_Region> {
} _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
class CMsgDOTAChatRegionsEnabledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatRegionsEnabled> {
} _CMsgDOTAChatRegionsEnabled_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[32];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInvite, invited_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatKick, kick_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatPromote, promote_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatDemote, demote_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatResponse, username_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCPrivateChatInfoRequest, private_chat_channel_name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse_Member, status_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, private_chat_channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creator_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientPrivateChatInfoResponse, creation_date_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannel, channel_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTALeaveChatChannel, channel_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCChatReportPublicSpam, channel_user_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClientIgnoredUser, ignored_account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, roll_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, roll_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_DiceRoll, result_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, question_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, answer_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, party_questions_correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, party_questions_viewed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage_TriviaAnswered, party_trivia_points_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, fantasy_draft_owner_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, fantasy_draft_player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_invite_to_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, event_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, coin_flip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_profile_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, dice_roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, share_lobby_passkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, private_chat_channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, legacy_battle_cup_victory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, battle_cup_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, badge_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_pick_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_pick_hero_role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, suggest_ban_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, terse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, ignore_muted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMessage, trivia_answer_),
  8,
  7,
  0,
  1,
  9,
  10,
  2,
  11,
  12,
  13,
  18,
  14,
  19,
  31,
  15,
  17,
  5,
  16,
  22,
  23,
  3,
  24,
  25,
  20,
  28,
  26,
  27,
  4,
  29,
  21,
  30,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatMember, status_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, response_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, max_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, gc_initiated_join_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinChatChannelResponse, welcome_message_),
  2,
  0,
  4,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelFullUpdate, members_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherJoinedChatChannel, status_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAOtherLeftChatChannel, channel_user_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate_JoinedMember, status_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, left_steam_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatChannelMemberUpdate, joined_members_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, num_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestChatChannelListResponse, channels_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserList, channel_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, persona_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, channel_user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse_Member, status_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetUserListResponse, members_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCount, channel_type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, channel_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, channel_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatGetMemberCountResponse, member_count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, min_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, max_latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, min_longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled_Region, max_longitude_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, enable_all_regions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAChatRegionsEnabled, enabled_regions_),
  0,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgClientToGCPrivateChatInvite)},
  { 9, 16, sizeof(CMsgClientToGCPrivateChatKick)},
  { 18, 25, sizeof(CMsgClientToGCPrivateChatPromote)},
  { 27, 34, sizeof(CMsgClientToGCPrivateChatDemote)},
  { 36, 44, sizeof(CMsgGCToClientPrivateChatResponse)},
  { 47, 53, sizeof(CMsgClientToGCPrivateChatInfoRequest)},
  { 54, 62, sizeof(CMsgGCToClientPrivateChatInfoResponse_Member)},
  { 65, 74, sizeof(CMsgGCToClientPrivateChatInfoResponse)},
  { 78, 85, sizeof(CMsgDOTAJoinChatChannel)},
  { 87, 93, sizeof(CMsgDOTALeaveChatChannel)},
  { 94, 101, sizeof(CMsgGCChatReportPublicSpam)},
  { 103, 109, sizeof(CMsgDOTAClientIgnoredUser)},
  { 110, 118, sizeof(CMsgDOTAChatMessage_DiceRoll)},
  { 121, 131, sizeof(CMsgDOTAChatMessage_TriviaAnswered)},
  { 136, 173, sizeof(CMsgDOTAChatMessage)},
  { 205, 214, sizeof(CMsgDOTAChatMember)},
  { 218, 233, sizeof(CMsgDOTAJoinChatChannelResponse)},
  { 243, 250, sizeof(CMsgDOTAChatChannelFullUpdate)},
  { 252, 262, sizeof(CMsgDOTAOtherJoinedChatChannel)},
  { 267, 275, sizeof(CMsgDOTAOtherLeftChatChannel)},
  { 278, 287, sizeof(CMsgDOTAChatChannelMemberUpdate_JoinedMember)},
  { 291, 299, sizeof(CMsgDOTAChatChannelMemberUpdate)},
  { 302, 307, sizeof(CMsgDOTARequestChatChannelList)},
  { 307, 315, sizeof(CMsgDOTARequestChatChannelListResponse_ChatChannel)},
  { 318, 324, sizeof(CMsgDOTARequestChatChannelListResponse)},
  { 325, 331, sizeof(CMsgDOTAChatGetUserList)},
  { 332, 341, sizeof(CMsgDOTAChatGetUserListResponse_Member)},
  { 345, 352, sizeof(CMsgDOTAChatGetUserListResponse)},
  { 354, 361, sizeof(CMsgDOTAChatGetMemberCount)},
  { 363, 371, sizeof(CMsgDOTAChatGetMemberCountResponse)},
  { 374, 383, sizeof(CMsgDOTAChatRegionsEnabled_Region)},
  { 387, 394, sizeof(CMsgDOTAChatRegionsEnabled)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCPrivateChatInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCPrivateChatKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCPrivateChatPromote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCPrivateChatDemote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPrivateChatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCPrivateChatInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientPrivateChatInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAJoinChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTALeaveChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCChatReportPublicSpam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAClientIgnoredUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatMessage_DiceRoll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatMessage_TriviaAnswered_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAJoinChatChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatChannelFullUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAOtherJoinedChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAOtherLeftChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatChannelMemberUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestChatChannelList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestChatChannelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatGetUserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatGetUserListResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatGetUserListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatGetMemberCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatGetMemberCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatRegionsEnabled_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAChatRegionsEnabled_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_chat.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 32);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgClientToGCPrivateChatInvite_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgClientToGCPrivateChatKick_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientToGCPrivateChatPromote_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgClientToGCPrivateChatDemote_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgGCToClientPrivateChatResponse_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientToGCPrivateChatInfoRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgGCToClientPrivateChatInfoResponse_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgDOTAJoinChatChannel_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgDOTALeaveChatChannel_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgGCChatReportPublicSpam_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTAClientIgnoredUser_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgDOTAChatMessage_DiceRoll_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTAChatMessage_TriviaAnswered_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTAChatMessage_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTAChatMember_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTAJoinChatChannelResponse_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTAChatChannelFullUpdate_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTAOtherJoinedChatChannel_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTAOtherLeftChatChannel_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgDOTAChatChannelMemberUpdate_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgDOTARequestChatChannelList_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgDOTARequestChatChannelListResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgDOTAChatGetUserList_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgDOTAChatGetUserListResponse_Member_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgDOTAChatGetUserListResponse_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgDOTAChatGetMemberCount_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgDOTAChatGetMemberCountResponse_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgDOTAChatRegionsEnabled_Region_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgDOTAChatRegionsEnabled_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  _CMsgClientToGCPrivateChatInvite_default_instance_.DefaultConstruct();
  _CMsgClientToGCPrivateChatKick_default_instance_.DefaultConstruct();
  _CMsgClientToGCPrivateChatPromote_default_instance_.DefaultConstruct();
  _CMsgClientToGCPrivateChatDemote_default_instance_.DefaultConstruct();
  _CMsgGCToClientPrivateChatResponse_default_instance_.DefaultConstruct();
  _CMsgClientToGCPrivateChatInfoRequest_default_instance_.DefaultConstruct();
  _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_.DefaultConstruct();
  _CMsgGCToClientPrivateChatInfoResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAJoinChatChannel_default_instance_.DefaultConstruct();
  _CMsgDOTALeaveChatChannel_default_instance_.DefaultConstruct();
  _CMsgGCChatReportPublicSpam_default_instance_.DefaultConstruct();
  _CMsgDOTAClientIgnoredUser_default_instance_.DefaultConstruct();
  _CMsgDOTAChatMessage_DiceRoll_default_instance_.DefaultConstruct();
  _CMsgDOTAChatMessage_TriviaAnswered_default_instance_.DefaultConstruct();
  _CMsgDOTAChatMessage_default_instance_.DefaultConstruct();
  _CMsgDOTAChatMember_default_instance_.DefaultConstruct();
  _CMsgDOTAJoinChatChannelResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAChatChannelFullUpdate_default_instance_.DefaultConstruct();
  _CMsgDOTAOtherJoinedChatChannel_default_instance_.DefaultConstruct();
  _CMsgDOTAOtherLeftChatChannel_default_instance_.DefaultConstruct();
  _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_.DefaultConstruct();
  _CMsgDOTAChatChannelMemberUpdate_default_instance_.DefaultConstruct();
  _CMsgDOTARequestChatChannelList_default_instance_.DefaultConstruct();
  _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_.DefaultConstruct();
  _CMsgDOTARequestChatChannelListResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAChatGetUserList_default_instance_.DefaultConstruct();
  _CMsgDOTAChatGetUserListResponse_Member_default_instance_.DefaultConstruct();
  _CMsgDOTAChatGetUserListResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAChatGetMemberCount_default_instance_.DefaultConstruct();
  _CMsgDOTAChatGetMemberCountResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAChatRegionsEnabled_Region_default_instance_.DefaultConstruct();
  _CMsgDOTAChatRegionsEnabled_default_instance_.DefaultConstruct();
  _CMsgDOTAChatMessage_default_instance_.get_mutable()->dice_roll_ = const_cast< ::proto::dota::CMsgDOTAChatMessage_DiceRoll*>(
      ::proto::dota::CMsgDOTAChatMessage_DiceRoll::internal_default_instance());
  _CMsgDOTAChatMessage_default_instance_.get_mutable()->trivia_answer_ = const_cast< ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered*>(
      ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n!dota_gcmessages_client_chat.proto\022\npro"
      "to.dota\032\027dota_shared_enums.proto\"`\n\037CMsg"
      "ClientToGCPrivateChatInvite\022!\n\031private_c"
      "hat_channel_name\030\001 \001(\t\022\032\n\022invited_accoun"
      "t_id\030\002 \001(\r\"[\n\035CMsgClientToGCPrivateChatK"
      "ick\022!\n\031private_chat_channel_name\030\001 \001(\t\022\027"
      "\n\017kick_account_id\030\002 \001(\r\"a\n CMsgClientToG"
      "CPrivateChatPromote\022!\n\031private_chat_chan"
      "nel_name\030\001 \001(\t\022\032\n\022promote_account_id\030\002 \001"
      "(\r\"_\n\037CMsgClientToGCPrivateChatDemote\022!\n"
      "\031private_chat_channel_name\030\001 \001(\t\022\031\n\021demo"
      "te_account_id\030\002 \001(\r\"\310\004\n!CMsgGCToClientPr"
      "ivateChatResponse\022!\n\031private_chat_channe"
      "l_name\030\001 \001(\t\022M\n\006result\030\002 \001(\01624.proto.dot"
      "a.CMsgGCToClientPrivateChatResponse.Resu"
      "lt:\007SUCCESS\022\020\n\010username\030\003 \001(\t\"\236\003\n\006Result"
      "\022\013\n\007SUCCESS\020\000\022\031\n\025FAILURE_CREATION_LOCK\020\001"
      "\022\033\n\027FAILURE_SQL_TRANSACTION\020\002\022\024\n\020FAILURE"
      "_SDO_LOAD\020\003\022\031\n\025FAILURE_NO_PERMISSION\020\004\022\032"
      "\n\026FAILURE_ALREADY_MEMBER\020\005\022\030\n\024FAILURE_NO"
      "T_A_MEMBER\020\007\022\037\n\033FAILURE_NO_REMAINING_ADM"
      "INS\020\010\022\023\n\017FAILURE_NO_ROOM\020\t\022!\n\035FAILURE_CR"
      "EATION_RATE_LIMITED\020\n\022 \n\034FAILURE_UNKNOWN"
      "_CHANNEL_NAME\020\013\022\030\n\024FAILURE_UNKNOWN_USER\020"
      "\014\022\031\n\025FAILURE_UNKNOWN_ERROR\020\r\022\035\n\031FAILURE_"
      "CANNOT_KICK_ADMIN\020\016\022\031\n\025FAILURE_ALREADY_A"
      "DMIN\020\017\"I\n$CMsgClientToGCPrivateChatInfoR"
      "equest\022!\n\031private_chat_channel_name\030\001 \001("
      "\t\"\371\001\n%CMsgGCToClientPrivateChatInfoRespo"
      "nse\022!\n\031private_chat_channel_name\030\001 \001(\t\022I"
      "\n\007members\030\002 \003(\01328.proto.dota.CMsgGCToCli"
      "entPrivateChatInfoResponse.Member\022\017\n\007cre"
      "ator\030\003 \001(\r\022\025\n\rcreation_date\030\004 \001(\r\032:\n\006Mem"
      "ber\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\016\n"
      "\006status\030\003 \001(\r\"\202\001\n\027CMsgDOTAJoinChatChanne"
      "l\022\024\n\014channel_name\030\002 \001(\t\022Q\n\014channel_type\030"
      "\004 \001(\0162!.proto.dota.DOTAChatChannelType_t"
      ":\030DOTAChannelType_Regional\".\n\030CMsgDOTALe"
      "aveChatChannel\022\022\n\nchannel_id\030\001 \001(\004\"I\n\032CM"
      "sgGCChatReportPublicSpam\022\022\n\nchannel_id\030\001"
      " \001(\004\022\027\n\017channel_user_id\030\002 \001(\r\"7\n\031CMsgDOT"
      "AClientIgnoredUser\022\032\n\022ignored_account_id"
      "\030\001 \001(\r\"\210\t\n\023CMsgDOTAChatMessage\022\022\n\naccoun"
      "t_id\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\004\022\024\n\014person"
      "a_name\030\003 \001(\t\022\014\n\004text\030\004 \001(\t\022\021\n\ttimestamp\030"
      "\005 \001(\r\022!\n\031suggest_invite_account_id\030\006 \001(\r"
      "\022\033\n\023suggest_invite_name\030\007 \001(\t\022&\n\036fantasy"
      "_draft_owner_account_id\030\010 \001(\r\022\'\n\037fantasy"
      "_draft_player_account_id\030\t \001(\r\022\020\n\010event_"
      "id\030\n \001(\r\022\037\n\027suggest_invite_to_lobby\030\013 \001("
      "\010\022\024\n\014event_points\030\014 \001(\r\022\021\n\tcoin_flip\030\r \001"
      "(\010\022\025\n\tplayer_id\030\016 \001(\005:\002-1\022 \n\030share_profi"
      "le_account_id\030\017 \001(\r\022\027\n\017channel_user_id\030\020"
      " \001(\r\022;\n\tdice_roll\030\021 \001(\0132(.proto.dota.CMs"
      "gDOTAChatMessage.DiceRoll\022\026\n\016share_party"
      "_id\030\022 \001(\004\022\026\n\016share_lobby_id\030\023 \001(\004\022\"\n\032sha"
      "re_lobby_custom_game_id\030\024 \001(\004\022\033\n\023share_l"
      "obby_passkey\030\025 \001(\t\022\037\n\027private_chat_chann"
      "el_id\030\026 \001(\r\022\016\n\006status\030\027 \001(\r\022!\n\031legacy_ba"
      "ttle_cup_victory\030\030 \001(\010\022\031\n\021battle_cup_str"
      "eak\030\035 \001(\r\022\023\n\013badge_level\030\031 \001(\r\022\034\n\024sugges"
      "t_pick_hero_id\030\032 \001(\r\022\036\n\026suggest_pick_her"
      "o_role\030\033 \001(\t\022\033\n\023suggest_ban_hero_id\030\036 \001("
      "\r\022\r\n\005terse\030\034 \001(\010\022\024\n\014ignore_muted\030\037 \001(\010\022E"
      "\n\rtrivia_answer\030  \001(\0132..proto.dota.CMsgD"
      "OTAChatMessage.TriviaAnswered\032>\n\010DiceRol"
      "l\022\020\n\010roll_min\030\001 \001(\005\022\020\n\010roll_max\030\002 \001(\005\022\016\n"
      "\006result\030\003 \001(\005\032\231\001\n\016TriviaAnswered\022\023\n\013ques"
      "tion_id\030\001 \001(\r\022\024\n\014answer_index\030\002 \001(\r\022\037\n\027p"
      "arty_questions_correct\030\003 \001(\r\022\036\n\026party_qu"
      "estions_viewed\030\004 \001(\r\022\033\n\023party_trivia_poi"
      "nts\030\005 \001(\r\"e\n\022CMsgDOTAChatMember\022\020\n\010steam"
      "_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017chann"
      "el_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\"\241\006\n\037CMs"
      "gDOTAJoinChatChannelResponse\022\020\n\010response"
      "\030\001 \001(\r\022\024\n\014channel_name\030\002 \001(\t\022\022\n\nchannel_"
      "id\030\003 \001(\006\022\023\n\013max_members\030\004 \001(\r\022/\n\007members"
      "\030\005 \003(\0132\036.proto.dota.CMsgDOTAChatMember\022Q"
      "\n\014channel_type\030\006 \001(\0162!.proto.dota.DOTACh"
      "atChannelType_t:\030DOTAChannelType_Regiona"
      "l\022P\n\006result\030\007 \001(\01622.proto.dota.CMsgDOTAJ"
      "oinChatChannelResponse.Result:\014JOIN_SUCC"
      "ESS\022\031\n\021gc_initiated_join\030\010 \001(\010\022\027\n\017channe"
      "l_user_id\030\t \001(\r\022\027\n\017welcome_message\030\n \001(\t"
      "\"\211\003\n\006Result\022\020\n\014JOIN_SUCCESS\020\000\022\030\n\024INVALID"
      "_CHANNEL_TYPE\020\001\022\025\n\021ACCOUNT_NOT_FOUND\020\002\022\016"
      "\n\nACH_FAILED\020\003\022\035\n\031USER_IN_TOO_MANY_CHANN"
      "ELS\020\004\022\027\n\023RATE_LIMIT_EXCEEDED\020\005\022\020\n\014CHANNE"
      "L_FULL\020\006\022\033\n\027CHANNEL_FULL_OVERFLOWED\020\007\022\026\n"
      "\022FAILED_TO_ADD_USER\020\010\022\031\n\025CHANNEL_TYPE_DI"
      "SABLED\020\t\022\036\n\032PRIVATE_CHAT_CREATE_FAILED\020\n"
      "\022\036\n\032PRIVATE_CHAT_NO_PERMISSION\020\013\022#\n\037PRIV"
      "ATE_CHAT_CREATE_LOCK_FAILED\020\014\022\027\n\023PRIVATE"
      "_CHAT_KICKED\020\r\022\024\n\020USER_NOT_ALLOWED\020\016\"d\n\035"
      "CMsgDOTAChatChannelFullUpdate\022\022\n\nchannel"
      "_id\030\001 \001(\006\022/\n\007members\030\002 \003(\0132\036.proto.dota."
      "CMsgDOTAChatMember\"\205\001\n\036CMsgDOTAOtherJoin"
      "edChatChannel\022\022\n\nchannel_id\030\001 \001(\006\022\024\n\014per"
      "sona_name\030\002 \001(\t\022\020\n\010steam_id\030\003 \001(\006\022\027\n\017cha"
      "nnel_user_id\030\004 \001(\r\022\016\n\006status\030\005 \001(\r\"]\n\034CM"
      "sgDOTAOtherLeftChatChannel\022\022\n\nchannel_id"
      "\030\001 \001(\006\022\020\n\010steam_id\030\002 \001(\006\022\027\n\017channel_user"
      "_id\030\003 \001(\r\"\200\002\n\037CMsgDOTAChatChannelMemberU"
      "pdate\022\022\n\nchannel_id\030\001 \001(\006\022\026\n\016left_steam_"
      "ids\030\002 \003(\006\022P\n\016joined_members\030\003 \003(\01328.prot"
      "o.dota.CMsgDOTAChatChannelMemberUpdate.J"
      "oinedMember\032_\n\014JoinedMember\022\020\n\010steam_id\030"
      "\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017channel_u"
      "ser_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\" \n\036CMsgDOTA"
      "RequestChatChannelList\"\210\002\n&CMsgDOTAReque"
      "stChatChannelListResponse\022P\n\010channels\030\001 "
      "\003(\0132>.proto.dota.CMsgDOTARequestChatChan"
      "nelListResponse.ChatChannel\032\213\001\n\013ChatChan"
      "nel\022\024\n\014channel_name\030\001 \001(\t\022\023\n\013num_members"
      "\030\002 \001(\r\022Q\n\014channel_type\030\003 \001(\0162!.proto.dot"
      "a.DOTAChatChannelType_t:\030DOTAChannelType"
      "_Regional\"-\n\027CMsgDOTAChatGetUserList\022\022\n\n"
      "channel_id\030\001 \001(\006\"\325\001\n\037CMsgDOTAChatGetUser"
      "ListResponse\022\022\n\nchannel_id\030\001 \001(\006\022C\n\007memb"
      "ers\030\002 \003(\01322.proto.dota.CMsgDOTAChatGetUs"
      "erListResponse.Member\032Y\n\006Member\022\020\n\010steam"
      "_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\027\n\017chann"
      "el_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\"\205\001\n\032CMs"
      "gDOTAChatGetMemberCount\022\024\n\014channel_name\030"
      "\001 \001(\t\022Q\n\014channel_type\030\002 \001(\0162!.proto.dota"
      ".DOTAChatChannelType_t:\030DOTAChannelType_"
      "Regional\"\243\001\n\"CMsgDOTAChatGetMemberCountR"
      "esponse\022\024\n\014channel_name\030\001 \001(\t\022Q\n\014channel"
      "_type\030\002 \001(\0162!.proto.dota.DOTAChatChannel"
      "Type_t:\030DOTAChannelType_Regional\022\024\n\014memb"
      "er_count\030\003 \001(\r\"\344\001\n\032CMsgDOTAChatRegionsEn"
      "abled\022\032\n\022enable_all_regions\030\001 \001(\010\022F\n\017ena"
      "bled_regions\030\002 \003(\0132-.proto.dota.CMsgDOTA"
      "ChatRegionsEnabled.Region\032b\n\006Region\022\024\n\014m"
      "in_latitude\030\001 \001(\002\022\024\n\014max_latitude\030\002 \001(\002\022"
      "\025\n\rmin_longitude\030\003 \001(\002\022\025\n\rmax_longitude\030"
      "\004 \001(\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5452);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_chat.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto

const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_enum_descriptors[0];
}
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::SUCCESS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_LOCK;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SQL_TRANSACTION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SDO_LOAD;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_PERMISSION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NOT_A_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_REMAINING_ADMINS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_ROOM;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_RATE_LIMITED;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_CHANNEL_NAME;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_USER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_ERROR;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CANNOT_KICK_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MAX;
const int CMsgGCToClientPrivateChatResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_enum_descriptors[1];
}
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::JOIN_SUCCESS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::INVALID_CHANNEL_TYPE;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACCOUNT_NOT_FOUND;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACH_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_IN_TOO_MANY_CHANNELS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::RATE_LIMIT_EXCEEDED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL_OVERFLOWED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::FAILED_TO_ADD_USER;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_TYPE_DISABLED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_NO_PERMISSION;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_LOCK_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_KICKED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_NOT_ALLOWED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MIN;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MAX;
const int CMsgDOTAJoinChatChannelResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatInvite::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatInvite::kInvitedAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatInvite)
}
CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  invited_account_id_ = from.invited_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatInvite)
}

void CMsgClientToGCPrivateChatInvite::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invited_account_id_ = 0u;
}

CMsgClientToGCPrivateChatInvite::~CMsgClientToGCPrivateChatInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatInvite)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInvite::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInvite::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCPrivateChatInvite& CMsgClientToGCPrivateChatInvite::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCPrivateChatInvite* CMsgClientToGCPrivateChatInvite::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCPrivateChatInvite* n = new CMsgClientToGCPrivateChatInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCPrivateChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  invited_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCPrivateChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 invited_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_invited_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invited_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatInvite)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invited_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatInvite)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invited_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatInvite)
  return target;
}

size_t CMsgClientToGCPrivateChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 invited_account_id = 2;
    if (has_invited_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invited_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCPrivateChatInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      invited_account_id_ = from.invited_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInvite::Swap(CMsgClientToGCPrivateChatInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatInvite::InternalSwap(CMsgClientToGCPrivateChatInvite* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(invited_account_id_, other->invited_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInvite::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCPrivateChatInvite

// optional string private_chat_channel_name = 1;
bool CMsgClientToGCPrivateChatInvite::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCPrivateChatInvite::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCPrivateChatInvite::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCPrivateChatInvite::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgClientToGCPrivateChatInvite::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
#endif
void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
void CMsgClientToGCPrivateChatInvite::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}
::std::string* CMsgClientToGCPrivateChatInvite::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCPrivateChatInvite::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCPrivateChatInvite::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name)
}

// optional uint32 invited_account_id = 2;
bool CMsgClientToGCPrivateChatInvite::has_invited_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCPrivateChatInvite::set_has_invited_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCPrivateChatInvite::clear_has_invited_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCPrivateChatInvite::clear_invited_account_id() {
  invited_account_id_ = 0u;
  clear_has_invited_account_id();
}
::google::protobuf::uint32 CMsgClientToGCPrivateChatInvite::invited_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInvite.invited_account_id)
  return invited_account_id_;
}
void CMsgClientToGCPrivateChatInvite::set_invited_account_id(::google::protobuf::uint32 value) {
  set_has_invited_account_id();
  invited_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInvite.invited_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatKick::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatKick::kKickAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatKick)
}
CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  kick_account_id_ = from.kick_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatKick)
}

void CMsgClientToGCPrivateChatKick::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_account_id_ = 0u;
}

CMsgClientToGCPrivateChatKick::~CMsgClientToGCPrivateChatKick() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatKick)
  SharedDtor();
}

void CMsgClientToGCPrivateChatKick::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatKick::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCPrivateChatKick& CMsgClientToGCPrivateChatKick::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCPrivateChatKick* CMsgClientToGCPrivateChatKick::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCPrivateChatKick* n = new CMsgClientToGCPrivateChatKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCPrivateChatKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatKick)
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  kick_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCPrivateChatKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kick_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_kick_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatKick)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatKick)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatKick)
  return target;
}

size_t CMsgClientToGCPrivateChatKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 kick_account_id = 2;
    if (has_kick_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCPrivateChatKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatKick)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      kick_account_id_ = from.kick_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatKick::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatKick::Swap(CMsgClientToGCPrivateChatKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatKick::InternalSwap(CMsgClientToGCPrivateChatKick* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(kick_account_id_, other->kick_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatKick::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCPrivateChatKick

// optional string private_chat_channel_name = 1;
bool CMsgClientToGCPrivateChatKick::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCPrivateChatKick::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCPrivateChatKick::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCPrivateChatKick::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgClientToGCPrivateChatKick::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
#endif
void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
void CMsgClientToGCPrivateChatKick::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}
::std::string* CMsgClientToGCPrivateChatKick::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCPrivateChatKick::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCPrivateChatKick::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name)
}

// optional uint32 kick_account_id = 2;
bool CMsgClientToGCPrivateChatKick::has_kick_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCPrivateChatKick::set_has_kick_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCPrivateChatKick::clear_has_kick_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCPrivateChatKick::clear_kick_account_id() {
  kick_account_id_ = 0u;
  clear_has_kick_account_id();
}
::google::protobuf::uint32 CMsgClientToGCPrivateChatKick::kick_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatKick.kick_account_id)
  return kick_account_id_;
}
void CMsgClientToGCPrivateChatKick::set_kick_account_id(::google::protobuf::uint32 value) {
  set_has_kick_account_id();
  kick_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatKick.kick_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatPromote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatPromote::kPromoteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatPromote)
}
CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  promote_account_id_ = from.promote_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatPromote)
}

void CMsgClientToGCPrivateChatPromote::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  promote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatPromote::~CMsgClientToGCPrivateChatPromote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatPromote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatPromote::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatPromote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatPromote::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCPrivateChatPromote& CMsgClientToGCPrivateChatPromote::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCPrivateChatPromote* CMsgClientToGCPrivateChatPromote::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCPrivateChatPromote* n = new CMsgClientToGCPrivateChatPromote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCPrivateChatPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  promote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCPrivateChatPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 promote_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_promote_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatPromote)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->promote_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatPromote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatPromote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->promote_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatPromote)
  return target;
}

size_t CMsgClientToGCPrivateChatPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 promote_account_id = 2;
    if (has_promote_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->promote_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatPromote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCPrivateChatPromote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatPromote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatPromote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      promote_account_id_ = from.promote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatPromote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatPromote::Swap(CMsgClientToGCPrivateChatPromote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatPromote::InternalSwap(CMsgClientToGCPrivateChatPromote* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(promote_account_id_, other->promote_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatPromote::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCPrivateChatPromote

// optional string private_chat_channel_name = 1;
bool CMsgClientToGCPrivateChatPromote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCPrivateChatPromote::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCPrivateChatPromote::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCPrivateChatPromote::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgClientToGCPrivateChatPromote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
#endif
void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
void CMsgClientToGCPrivateChatPromote::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}
::std::string* CMsgClientToGCPrivateChatPromote::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCPrivateChatPromote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCPrivateChatPromote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name)
}

// optional uint32 promote_account_id = 2;
bool CMsgClientToGCPrivateChatPromote::has_promote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCPrivateChatPromote::set_has_promote_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCPrivateChatPromote::clear_has_promote_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCPrivateChatPromote::clear_promote_account_id() {
  promote_account_id_ = 0u;
  clear_has_promote_account_id();
}
::google::protobuf::uint32 CMsgClientToGCPrivateChatPromote::promote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatPromote.promote_account_id)
  return promote_account_id_;
}
void CMsgClientToGCPrivateChatPromote::set_promote_account_id(::google::protobuf::uint32 value) {
  set_has_promote_account_id();
  promote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatPromote.promote_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatDemote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatDemote::kDemoteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatDemote)
}
CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  demote_account_id_ = from.demote_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatDemote)
}

void CMsgClientToGCPrivateChatDemote::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  demote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatDemote::~CMsgClientToGCPrivateChatDemote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatDemote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatDemote::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatDemote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatDemote::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCPrivateChatDemote& CMsgClientToGCPrivateChatDemote::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCPrivateChatDemote* CMsgClientToGCPrivateChatDemote::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCPrivateChatDemote* n = new CMsgClientToGCPrivateChatDemote;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCPrivateChatDemote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  demote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCPrivateChatDemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 demote_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_demote_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatDemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatDemote)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatDemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->demote_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatDemote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatDemote::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->demote_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatDemote)
  return target;
}

size_t CMsgClientToGCPrivateChatDemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 demote_account_id = 2;
    if (has_demote_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demote_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatDemote* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCPrivateChatDemote>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatDemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatDemote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      demote_account_id_ = from.demote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatDemote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatDemote::Swap(CMsgClientToGCPrivateChatDemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatDemote::InternalSwap(CMsgClientToGCPrivateChatDemote* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(demote_account_id_, other->demote_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatDemote::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCPrivateChatDemote

// optional string private_chat_channel_name = 1;
bool CMsgClientToGCPrivateChatDemote::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCPrivateChatDemote::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCPrivateChatDemote::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCPrivateChatDemote::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgClientToGCPrivateChatDemote::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
#endif
void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
void CMsgClientToGCPrivateChatDemote::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}
::std::string* CMsgClientToGCPrivateChatDemote::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCPrivateChatDemote::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCPrivateChatDemote::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name)
}

// optional uint32 demote_account_id = 2;
bool CMsgClientToGCPrivateChatDemote::has_demote_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCPrivateChatDemote::set_has_demote_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCPrivateChatDemote::clear_has_demote_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCPrivateChatDemote::clear_demote_account_id() {
  demote_account_id_ = 0u;
  clear_has_demote_account_id();
}
::google::protobuf::uint32 CMsgClientToGCPrivateChatDemote::demote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatDemote.demote_account_id)
  return demote_account_id_;
}
void CMsgClientToGCPrivateChatDemote::set_demote_account_id(::google::protobuf::uint32 value) {
  set_has_demote_account_id();
  demote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatDemote.demote_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kResultFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatResponse)
}
CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatResponse)
}

void CMsgGCToClientPrivateChatResponse::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgGCToClientPrivateChatResponse::~CMsgGCToClientPrivateChatResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatResponse::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPrivateChatResponse& CMsgGCToClientPrivateChatResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPrivateChatResponse* CMsgGCToClientPrivateChatResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPrivateChatResponse* n = new CMsgGCToClientPrivateChatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPrivateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_private_chat_channel_name()) {
      GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_username()) {
      GOOGLE_DCHECK(!username_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*username_.UnsafeRawStringPointer())->clear();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPrivateChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCToClientPrivateChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatResponse.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPrivateChatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_username();
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatResponse::Swap(CMsgGCToClientPrivateChatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatResponse::InternalSwap(CMsgGCToClientPrivateChatResponse* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  username_.Swap(&other->username_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPrivateChatResponse

// optional string private_chat_channel_name = 1;
bool CMsgGCToClientPrivateChatResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPrivateChatResponse::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPrivateChatResponse::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPrivateChatResponse::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgGCToClientPrivateChatResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
#endif
void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
void CMsgGCToClientPrivateChatResponse::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}
::std::string* CMsgGCToClientPrivateChatResponse::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPrivateChatResponse::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPrivateChatResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name)
}

// optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
bool CMsgGCToClientPrivateChatResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientPrivateChatResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientPrivateChatResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientPrivateChatResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.result)
  return static_cast< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result >(result_);
}
void CMsgGCToClientPrivateChatResponse::set_result(::proto::dota::CMsgGCToClientPrivateChatResponse_Result value) {
  assert(::proto::dota::CMsgGCToClientPrivateChatResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.result)
}

// optional string username = 3;
bool CMsgGCToClientPrivateChatResponse::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPrivateChatResponse::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPrivateChatResponse::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPrivateChatResponse::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_username();
}
const ::std::string& CMsgGCToClientPrivateChatResponse::username() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  return username_.GetNoArena();
}
void CMsgGCToClientPrivateChatResponse::set_username(const ::std::string& value) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
#if LANG_CXX11
void CMsgGCToClientPrivateChatResponse::set_username(::std::string&& value) {
  set_has_username();
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
#endif
void CMsgGCToClientPrivateChatResponse::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
void CMsgGCToClientPrivateChatResponse::set_username(const char* value, size_t size) {
  set_has_username();
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}
::std::string* CMsgGCToClientPrivateChatResponse::mutable_username() {
  set_has_username();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPrivateChatResponse::release_username() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatResponse.username)
  clear_has_username();
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPrivateChatResponse::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    set_has_username();
  } else {
    clear_has_username();
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatResponse.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatInfoRequest::kPrivateChatChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}
CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}

void CMsgClientToGCPrivateChatInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCPrivateChatInfoRequest::~CMsgClientToGCPrivateChatInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInfoRequest::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCPrivateChatInfoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCPrivateChatInfoRequest& CMsgClientToGCPrivateChatInfoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCPrivateChatInfoRequest* CMsgClientToGCPrivateChatInfoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCPrivateChatInfoRequest* n = new CMsgClientToGCPrivateChatInfoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCPrivateChatInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCPrivateChatInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return false;
#undef DO_
}

void CMsgClientToGCPrivateChatInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInfoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return target;
}

size_t CMsgClientToGCPrivateChatInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string private_chat_channel_name = 1;
  if (has_private_chat_channel_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_chat_channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInfoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCPrivateChatInfoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_private_chat_channel_name()) {
    set_has_private_chat_channel_name();
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInfoRequest::Swap(CMsgClientToGCPrivateChatInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatInfoRequest::InternalSwap(CMsgClientToGCPrivateChatInfoRequest* other) {
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInfoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCPrivateChatInfoRequest

// optional string private_chat_channel_name = 1;
bool CMsgClientToGCPrivateChatInfoRequest::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCPrivateChatInfoRequest::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCPrivateChatInfoRequest::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCPrivateChatInfoRequest::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgClientToGCPrivateChatInfoRequest::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
#endif
void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
void CMsgClientToGCPrivateChatInfoRequest::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}
::std::string* CMsgClientToGCPrivateChatInfoRequest::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCPrivateChatInfoRequest::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCPrivateChatInfoRequest::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatInfoResponse_Member::kAccountIdFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}
CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(status_));
}

CMsgGCToClientPrivateChatInfoResponse_Member::~CMsgGCToClientPrivateChatInfoResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse_Member::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse_Member::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse_Member::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPrivateChatInfoResponse_Member* n = new CMsgGCToClientPrivateChatInfoResponse_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPrivateChatInfoResponse_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Swap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatInfoResponse_Member::InternalSwap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  name_.Swap(&other->name_);
  std::swap(account_id_, other->account_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse_Member::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPrivateChatInfoResponse_Member

// optional uint32 account_id = 1;
bool CMsgGCToClientPrivateChatInfoResponse_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
  return account_id_;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.account_id)
}

// optional string name = 2;
bool CMsgGCToClientPrivateChatInfoResponse_Member::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgGCToClientPrivateChatInfoResponse_Member::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return name_.GetNoArena();
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
#if LANG_CXX11
void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
#endif
void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}
::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPrivateChatInfoResponse_Member::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name)
}

// optional uint32 status = 3;
bool CMsgGCToClientPrivateChatInfoResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.status)
  return status_;
}
void CMsgGCToClientPrivateChatInfoResponse_Member::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatInfoResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kMembersFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreatorFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreationDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}
CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  ::memcpy(&creator_, &from.creator_,
    reinterpret_cast<char*>(&creation_date_) -
    reinterpret_cast<char*>(&creator_) + sizeof(creation_date_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}

void CMsgGCToClientPrivateChatInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creator_, 0, reinterpret_cast<char*>(&creation_date_) -
    reinterpret_cast<char*>(&creator_) + sizeof(creation_date_));
}

CMsgGCToClientPrivateChatInfoResponse::~CMsgGCToClientPrivateChatInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientPrivateChatInfoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientPrivateChatInfoResponse& CMsgGCToClientPrivateChatInfoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientPrivateChatInfoResponse* CMsgGCToClientPrivateChatInfoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientPrivateChatInfoResponse* n = new CMsgGCToClientPrivateChatInfoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientPrivateChatInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  members_.Clear();
  if (has_private_chat_channel_name()) {
    GOOGLE_DCHECK(!private_chat_channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*private_chat_channel_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&creator_, 0, reinterpret_cast<char*>(&creation_date_) -
      reinterpret_cast<char*>(&creator_) + sizeof(creation_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientPrivateChatInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_creator();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creation_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_creation_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return false;
#undef DO_
}

void CMsgGCToClientPrivateChatInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 creator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator(), output);
  }

  // optional uint32 creation_date = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creation_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), this->private_chat_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), deterministic, target);
  }

  // optional uint32 creator = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creator(), target);
  }

  // optional uint32 creation_date = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creation_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string private_chat_channel_name = 1;
    if (has_private_chat_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 creator = 3;
    if (has_creator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator());
    }

    // optional uint32 creation_date = 4;
    if (has_creation_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientPrivateChatInfoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_chat_channel_name();
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_date_ = from.creation_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse::Swap(CMsgGCToClientPrivateChatInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatInfoResponse::InternalSwap(CMsgGCToClientPrivateChatInfoResponse* other) {
  members_.InternalSwap(&other->members_);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_);
  std::swap(creator_, other->creator_);
  std::swap(creation_date_, other->creation_date_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientPrivateChatInfoResponse

// optional string private_chat_channel_name = 1;
bool CMsgGCToClientPrivateChatInfoResponse::has_private_chat_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse::set_has_private_chat_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_has_private_chat_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_private_chat_channel_name() {
  private_chat_channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_chat_channel_name();
}
const ::std::string& CMsgGCToClientPrivateChatInfoResponse::private_chat_channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return private_chat_channel_name_.GetNoArena();
}
void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const ::std::string& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
#if LANG_CXX11
void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(::std::string&& value) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
#endif
void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
void CMsgGCToClientPrivateChatInfoResponse::set_private_chat_channel_name(const char* value, size_t size) {
  set_has_private_chat_channel_name();
  private_chat_channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}
::std::string* CMsgGCToClientPrivateChatInfoResponse::mutable_private_chat_channel_name() {
  set_has_private_chat_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  return private_chat_channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientPrivateChatInfoResponse::release_private_chat_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
  clear_has_private_chat_channel_name();
  return private_chat_channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientPrivateChatInfoResponse::set_allocated_private_chat_channel_name(::std::string* private_chat_channel_name) {
  if (private_chat_channel_name != NULL) {
    set_has_private_chat_channel_name();
  } else {
    clear_has_private_chat_channel_name();
  }
  private_chat_channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_chat_channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name)
}

// repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
int CMsgGCToClientPrivateChatInfoResponse::members_size() const {
  return members_.size();
}
void CMsgGCToClientPrivateChatInfoResponse::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Get(index);
}
::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* CMsgGCToClientPrivateChatInfoResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >*
CMsgGCToClientPrivateChatInfoResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >&
CMsgGCToClientPrivateChatInfoResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientPrivateChatInfoResponse.members)
  return members_;
}

// optional uint32 creator = 3;
bool CMsgGCToClientPrivateChatInfoResponse::has_creator() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse::set_has_creator() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_has_creator() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_creator() {
  creator_ = 0u;
  clear_has_creator();
}
::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creator() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creator)
  return creator_;
}
void CMsgGCToClientPrivateChatInfoResponse::set_creator(::google::protobuf::uint32 value) {
  set_has_creator();
  creator_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creator)
}

// optional uint32 creation_date = 4;
bool CMsgGCToClientPrivateChatInfoResponse::has_creation_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientPrivateChatInfoResponse::set_has_creation_date() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_has_creation_date() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientPrivateChatInfoResponse::clear_creation_date() {
  creation_date_ = 0u;
  clear_has_creation_date();
}
::google::protobuf::uint32 CMsgGCToClientPrivateChatInfoResponse::creation_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creation_date)
  return creation_date_;
}
void CMsgGCToClientPrivateChatInfoResponse::set_creation_date(::google::protobuf::uint32 value) {
  set_has_creation_date();
  creation_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientPrivateChatInfoResponse.creation_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinChatChannel::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinChatChannel)
}
CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinChatChannel)
}

void CMsgDOTAJoinChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

CMsgDOTAJoinChatChannel::~CMsgDOTAJoinChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinChatChannel)
  SharedDtor();
}

void CMsgDOTAJoinChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAJoinChatChannel& CMsgDOTAJoinChatChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAJoinChatChannel* CMsgDOTAJoinChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAJoinChatChannel* n = new CMsgDOTAJoinChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAJoinChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinChatChannel)
  if (has_channel_name()) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAJoinChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAJoinChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinChatChannel)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinChatChannel)
  return target;
}

size_t CMsgDOTAJoinChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAJoinChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannel::MergeFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAJoinChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannel::CopyFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannel::Swap(CMsgDOTAJoinChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinChatChannel::InternalSwap(CMsgDOTAJoinChatChannel* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAJoinChatChannel

// optional string channel_name = 2;
bool CMsgDOTAJoinChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAJoinChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAJoinChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAJoinChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& CMsgDOTAJoinChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
void CMsgDOTAJoinChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
#if LANG_CXX11
void CMsgDOTAJoinChatChannel::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
#endif
void CMsgDOTAJoinChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
void CMsgDOTAJoinChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}
::std::string* CMsgDOTAJoinChatChannel::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAJoinChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAJoinChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannel.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
bool CMsgDOTAJoinChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAJoinChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAJoinChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAJoinChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
::proto::dota::DOTAChatChannelType_t CMsgDOTAJoinChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannel.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
void CMsgDOTAJoinChatChannel::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannel.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveChatChannel::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveChatChannel)
}
CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveChatChannel)
}

void CMsgDOTALeaveChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTALeaveChatChannel::~CMsgDOTALeaveChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveChatChannel)
  SharedDtor();
}

void CMsgDOTALeaveChatChannel::SharedDtor() {
}

void CMsgDOTALeaveChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTALeaveChatChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTALeaveChatChannel& CMsgDOTALeaveChatChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTALeaveChatChannel* CMsgDOTALeaveChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTALeaveChatChannel* n = new CMsgDOTALeaveChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTALeaveChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveChatChannel)
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTALeaveChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveChatChannel)
  return false;
#undef DO_
}

void CMsgDOTALeaveChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveChatChannel)
}

::google::protobuf::uint8* CMsgDOTALeaveChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveChatChannel)
  return target;
}

size_t CMsgDOTALeaveChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTALeaveChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTALeaveChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveChatChannel::MergeFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTALeaveChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveChatChannel::CopyFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveChatChannel::Swap(CMsgDOTALeaveChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveChatChannel::InternalSwap(CMsgDOTALeaveChatChannel* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTALeaveChatChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTALeaveChatChannel

// optional uint64 channel_id = 1;
bool CMsgDOTALeaveChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTALeaveChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTALeaveChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTALeaveChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTALeaveChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTALeaveChatChannel.channel_id)
  return channel_id_;
}
void CMsgDOTALeaveChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTALeaveChatChannel.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCChatReportPublicSpam::kChannelIdFieldNumber;
const int CMsgGCChatReportPublicSpam::kChannelUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCChatReportPublicSpam)
}
CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCChatReportPublicSpam)
}

void CMsgGCChatReportPublicSpam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&channel_id_, 0, reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
}

CMsgGCChatReportPublicSpam::~CMsgGCChatReportPublicSpam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCChatReportPublicSpam)
  SharedDtor();
}

void CMsgGCChatReportPublicSpam::SharedDtor() {
}

void CMsgGCChatReportPublicSpam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCChatReportPublicSpam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCChatReportPublicSpam& CMsgGCChatReportPublicSpam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCChatReportPublicSpam* CMsgGCChatReportPublicSpam::New(::google::protobuf::Arena* arena) const {
  CMsgGCChatReportPublicSpam* n = new CMsgGCChatReportPublicSpam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCChatReportPublicSpam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCChatReportPublicSpam)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&channel_id_, 0, reinterpret_cast<char*>(&channel_user_id_) -
      reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCChatReportPublicSpam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCChatReportPublicSpam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCChatReportPublicSpam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCChatReportPublicSpam)
  return false;
#undef DO_
}

void CMsgGCChatReportPublicSpam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCChatReportPublicSpam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCChatReportPublicSpam)
}

::google::protobuf::uint8* CMsgGCChatReportPublicSpam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCChatReportPublicSpam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCChatReportPublicSpam)
  return target;
}

size_t CMsgGCChatReportPublicSpam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCChatReportPublicSpam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional uint32 channel_user_id = 2;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCChatReportPublicSpam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChatReportPublicSpam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCChatReportPublicSpam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCChatReportPublicSpam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCChatReportPublicSpam)
    MergeFrom(*source);
  }
}

void CMsgGCChatReportPublicSpam::MergeFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChatReportPublicSpam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChatReportPublicSpam::CopyFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChatReportPublicSpam::IsInitialized() const {
  return true;
}

void CMsgGCChatReportPublicSpam::Swap(CMsgGCChatReportPublicSpam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCChatReportPublicSpam::InternalSwap(CMsgGCChatReportPublicSpam* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCChatReportPublicSpam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCChatReportPublicSpam

// optional uint64 channel_id = 1;
bool CMsgGCChatReportPublicSpam::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCChatReportPublicSpam::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCChatReportPublicSpam::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCChatReportPublicSpam::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgGCChatReportPublicSpam::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCChatReportPublicSpam.channel_id)
  return channel_id_;
}
void CMsgGCChatReportPublicSpam::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCChatReportPublicSpam.channel_id)
}

// optional uint32 channel_user_id = 2;
bool CMsgGCChatReportPublicSpam::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCChatReportPublicSpam::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCChatReportPublicSpam::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCChatReportPublicSpam::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgGCChatReportPublicSpam::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCChatReportPublicSpam.channel_user_id)
  return channel_user_id_;
}
void CMsgGCChatReportPublicSpam::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCChatReportPublicSpam.channel_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAClientIgnoredUser::kIgnoredAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAClientIgnoredUser)
}
CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignored_account_id_ = from.ignored_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAClientIgnoredUser)
}

void CMsgDOTAClientIgnoredUser::SharedCtor() {
  _cached_size_ = 0;
  ignored_account_id_ = 0u;
}

CMsgDOTAClientIgnoredUser::~CMsgDOTAClientIgnoredUser() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAClientIgnoredUser)
  SharedDtor();
}

void CMsgDOTAClientIgnoredUser::SharedDtor() {
}

void CMsgDOTAClientIgnoredUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAClientIgnoredUser::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAClientIgnoredUser& CMsgDOTAClientIgnoredUser::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAClientIgnoredUser* CMsgDOTAClientIgnoredUser::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAClientIgnoredUser* n = new CMsgDOTAClientIgnoredUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAClientIgnoredUser::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ignored_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAClientIgnoredUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAClientIgnoredUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ignored_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ignored_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignored_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAClientIgnoredUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAClientIgnoredUser)
  return false;
#undef DO_
}

void CMsgDOTAClientIgnoredUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignored_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ignored_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAClientIgnoredUser)
}

::google::protobuf::uint8* CMsgDOTAClientIgnoredUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignored_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ignored_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAClientIgnoredUser)
  return target;
}

size_t CMsgDOTAClientIgnoredUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAClientIgnoredUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 ignored_account_id = 1;
  if (has_ignored_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ignored_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClientIgnoredUser* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAClientIgnoredUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAClientIgnoredUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAClientIgnoredUser)
    MergeFrom(*source);
  }
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ignored_account_id()) {
    set_ignored_account_id(from.ignored_account_id());
  }
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClientIgnoredUser::IsInitialized() const {
  return true;
}

void CMsgDOTAClientIgnoredUser::Swap(CMsgDOTAClientIgnoredUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAClientIgnoredUser::InternalSwap(CMsgDOTAClientIgnoredUser* other) {
  std::swap(ignored_account_id_, other->ignored_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAClientIgnoredUser::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAClientIgnoredUser

// optional uint32 ignored_account_id = 1;
bool CMsgDOTAClientIgnoredUser::has_ignored_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAClientIgnoredUser::set_has_ignored_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAClientIgnoredUser::clear_has_ignored_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAClientIgnoredUser::clear_ignored_account_id() {
  ignored_account_id_ = 0u;
  clear_has_ignored_account_id();
}
::google::protobuf::uint32 CMsgDOTAClientIgnoredUser::ignored_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAClientIgnoredUser.ignored_account_id)
  return ignored_account_id_;
}
void CMsgDOTAClientIgnoredUser::set_ignored_account_id(::google::protobuf::uint32 value) {
  set_has_ignored_account_id();
  ignored_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAClientIgnoredUser.ignored_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage_DiceRoll::kRollMinFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kRollMaxFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}
CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_min_, &from.roll_min_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roll_min_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}

void CMsgDOTAChatMessage_DiceRoll::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&roll_min_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roll_min_) + sizeof(result_));
}

CMsgDOTAChatMessage_DiceRoll::~CMsgDOTAChatMessage_DiceRoll() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  SharedDtor();
}

void CMsgDOTAChatMessage_DiceRoll::SharedDtor() {
}

void CMsgDOTAChatMessage_DiceRoll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage_DiceRoll::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage_DiceRoll::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage_DiceRoll::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatMessage_DiceRoll* n = new CMsgDOTAChatMessage_DiceRoll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatMessage_DiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&roll_min_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&roll_min_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatMessage_DiceRoll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roll_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_roll_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roll_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_roll_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return false;
#undef DO_
}

void CMsgDOTAChatMessage_DiceRoll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roll_min(), output);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roll_max(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}

::google::protobuf::uint8* CMsgDOTAChatMessage_DiceRoll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roll_min(), target);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roll_max(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return target;
}

size_t CMsgDOTAChatMessage_DiceRoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 roll_min = 1;
    if (has_roll_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_min());
    }

    // optional int32 roll_max = 2;
    if (has_roll_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_max());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_DiceRoll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatMessage_DiceRoll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage.DiceRoll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage.DiceRoll)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_max_ = from.roll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_DiceRoll::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_DiceRoll::Swap(CMsgDOTAChatMessage_DiceRoll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage_DiceRoll::InternalSwap(CMsgDOTAChatMessage_DiceRoll* other) {
  std::swap(roll_min_, other->roll_min_);
  std::swap(roll_max_, other->roll_max_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage_DiceRoll::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatMessage_DiceRoll

// optional int32 roll_min = 1;
bool CMsgDOTAChatMessage_DiceRoll::has_roll_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatMessage_DiceRoll::set_has_roll_min() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_has_roll_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_roll_min() {
  roll_min_ = 0;
  clear_has_roll_min();
}
::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_min)
  return roll_min_;
}
void CMsgDOTAChatMessage_DiceRoll::set_roll_min(::google::protobuf::int32 value) {
  set_has_roll_min();
  roll_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_min)
}

// optional int32 roll_max = 2;
bool CMsgDOTAChatMessage_DiceRoll::has_roll_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatMessage_DiceRoll::set_has_roll_max() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_has_roll_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_roll_max() {
  roll_max_ = 0;
  clear_has_roll_max();
}
::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::roll_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_max)
  return roll_max_;
}
void CMsgDOTAChatMessage_DiceRoll::set_roll_max(::google::protobuf::int32 value) {
  set_has_roll_max();
  roll_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.roll_max)
}

// optional int32 result = 3;
bool CMsgDOTAChatMessage_DiceRoll::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatMessage_DiceRoll::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatMessage_DiceRoll::clear_result() {
  result_ = 0;
  clear_has_result();
}
::google::protobuf::int32 CMsgDOTAChatMessage_DiceRoll::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.DiceRoll.result)
  return result_;
}
void CMsgDOTAChatMessage_DiceRoll::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.DiceRoll.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage_TriviaAnswered::kQuestionIdFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kAnswerIndexFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyQuestionsCorrectFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyQuestionsViewedFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyTriviaPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}
CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&question_id_, &from.question_id_,
    reinterpret_cast<char*>(&party_trivia_points_) -
    reinterpret_cast<char*>(&question_id_) + sizeof(party_trivia_points_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&question_id_, 0, reinterpret_cast<char*>(&party_trivia_points_) -
    reinterpret_cast<char*>(&question_id_) + sizeof(party_trivia_points_));
}

CMsgDOTAChatMessage_TriviaAnswered::~CMsgDOTAChatMessage_TriviaAnswered() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  SharedDtor();
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedDtor() {
}

void CMsgDOTAChatMessage_TriviaAnswered::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage_TriviaAnswered::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage_TriviaAnswered::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage_TriviaAnswered::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatMessage_TriviaAnswered* n = new CMsgDOTAChatMessage_TriviaAnswered;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatMessage_TriviaAnswered::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&question_id_, 0, reinterpret_cast<char*>(&party_trivia_points_) -
      reinterpret_cast<char*>(&question_id_) + sizeof(party_trivia_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatMessage_TriviaAnswered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_question_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 answer_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_answer_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_questions_correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_party_questions_correct();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_questions_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_questions_viewed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_party_questions_viewed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_questions_viewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_trivia_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_party_trivia_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_trivia_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return false;
#undef DO_
}

void CMsgDOTAChatMessage_TriviaAnswered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->question_id(), output);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answer_index(), output);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->party_questions_correct(), output);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->party_questions_viewed(), output);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->party_trivia_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}

::google::protobuf::uint8* CMsgDOTAChatMessage_TriviaAnswered::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->question_id(), target);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answer_index(), target);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->party_questions_correct(), target);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->party_questions_viewed(), target);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->party_trivia_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return target;
}

size_t CMsgDOTAChatMessage_TriviaAnswered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 question_id = 1;
    if (has_question_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 answer_index = 2;
    if (has_answer_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_index());
    }

    // optional uint32 party_questions_correct = 3;
    if (has_party_questions_correct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_questions_correct());
    }

    // optional uint32 party_questions_viewed = 4;
    if (has_party_questions_viewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_questions_viewed());
    }

    // optional uint32 party_trivia_points = 5;
    if (has_party_trivia_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_trivia_points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_TriviaAnswered* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatMessage_TriviaAnswered>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      answer_index_ = from.answer_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_questions_correct_ = from.party_questions_correct_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_questions_viewed_ = from.party_questions_viewed_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_trivia_points_ = from.party_trivia_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_TriviaAnswered::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_TriviaAnswered::Swap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage_TriviaAnswered::InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  std::swap(question_id_, other->question_id_);
  std::swap(answer_index_, other->answer_index_);
  std::swap(party_questions_correct_, other->party_questions_correct_);
  std::swap(party_questions_viewed_, other->party_questions_viewed_);
  std::swap(party_trivia_points_, other->party_trivia_points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage_TriviaAnswered::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatMessage_TriviaAnswered

// optional uint32 question_id = 1;
bool CMsgDOTAChatMessage_TriviaAnswered::has_question_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_has_question_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_has_question_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_question_id() {
  question_id_ = 0u;
  clear_has_question_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::question_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.question_id)
  return question_id_;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_question_id(::google::protobuf::uint32 value) {
  set_has_question_id();
  question_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.question_id)
}

// optional uint32 answer_index = 2;
bool CMsgDOTAChatMessage_TriviaAnswered::has_answer_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_has_answer_index() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_has_answer_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_answer_index() {
  answer_index_ = 0u;
  clear_has_answer_index();
}
::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::answer_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.answer_index)
  return answer_index_;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_answer_index(::google::protobuf::uint32 value) {
  set_has_answer_index();
  answer_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.answer_index)
}

// optional uint32 party_questions_correct = 3;
bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_correct() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_has_party_questions_correct() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_has_party_questions_correct() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_correct() {
  party_questions_correct_ = 0u;
  clear_has_party_questions_correct();
}
::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_questions_correct() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
  return party_questions_correct_;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_correct(::google::protobuf::uint32 value) {
  set_has_party_questions_correct();
  party_questions_correct_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_correct)
}

// optional uint32 party_questions_viewed = 4;
bool CMsgDOTAChatMessage_TriviaAnswered::has_party_questions_viewed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_has_party_questions_viewed() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_has_party_questions_viewed() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_party_questions_viewed() {
  party_questions_viewed_ = 0u;
  clear_has_party_questions_viewed();
}
::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_questions_viewed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
  return party_questions_viewed_;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_party_questions_viewed(::google::protobuf::uint32 value) {
  set_has_party_questions_viewed();
  party_questions_viewed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_questions_viewed)
}

// optional uint32 party_trivia_points = 5;
bool CMsgDOTAChatMessage_TriviaAnswered::has_party_trivia_points() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_has_party_trivia_points() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_has_party_trivia_points() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAChatMessage_TriviaAnswered::clear_party_trivia_points() {
  party_trivia_points_ = 0u;
  clear_has_party_trivia_points();
}
::google::protobuf::uint32 CMsgDOTAChatMessage_TriviaAnswered::party_trivia_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
  return party_trivia_points_;
}
void CMsgDOTAChatMessage_TriviaAnswered::set_party_trivia_points(::google::protobuf::uint32 value) {
  set_has_party_trivia_points();
  party_trivia_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.TriviaAnswered.party_trivia_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage::kAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kPersonaNameFieldNumber;
const int CMsgDOTAChatMessage::kTextFieldNumber;
const int CMsgDOTAChatMessage::kTimestampFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteNameFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftOwnerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftPlayerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kEventIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteToLobbyFieldNumber;
const int CMsgDOTAChatMessage::kEventPointsFieldNumber;
const int CMsgDOTAChatMessage::kCoinFlipFieldNumber;
const int CMsgDOTAChatMessage::kPlayerIdFieldNumber;
const int CMsgDOTAChatMessage::kShareProfileAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMessage::kDiceRollFieldNumber;
const int CMsgDOTAChatMessage::kSharePartyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyCustomGameIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyPasskeyFieldNumber;
const int CMsgDOTAChatMessage::kPrivateChatChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kStatusFieldNumber;
const int CMsgDOTAChatMessage::kLegacyBattleCupVictoryFieldNumber;
const int CMsgDOTAChatMessage::kBattleCupStreakFieldNumber;
const int CMsgDOTAChatMessage::kBadgeLevelFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroRoleFieldNumber;
const int CMsgDOTAChatMessage::kSuggestBanHeroIdFieldNumber;
const int CMsgDOTAChatMessage::kTerseFieldNumber;
const int CMsgDOTAChatMessage::kIgnoreMutedFieldNumber;
const int CMsgDOTAChatMessage::kTriviaAnswerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage::CMsgDOTAChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage)
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  suggest_invite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suggest_invite_name()) {
    suggest_invite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_invite_name_);
  }
  share_lobby_passkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_share_lobby_passkey()) {
    share_lobby_passkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_lobby_passkey_);
  }
  suggest_pick_hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suggest_pick_hero_role()) {
    suggest_pick_hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_pick_hero_role_);
  }
  if (from.has_dice_roll()) {
    dice_roll_ = new ::proto::dota::CMsgDOTAChatMessage_DiceRoll(*from.dice_roll_);
  } else {
    dice_roll_ = NULL;
  }
  if (from.has_trivia_answer()) {
    trivia_answer_ = new ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered(*from.trivia_answer_);
  } else {
    trivia_answer_ = NULL;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage)
}

void CMsgDOTAChatMessage::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_invite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_lobby_passkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_pick_hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dice_roll_, 0, reinterpret_cast<char*>(&ignore_muted_) -
    reinterpret_cast<char*>(&dice_roll_) + sizeof(ignore_muted_));
  player_id_ = -1;
}

CMsgDOTAChatMessage::~CMsgDOTAChatMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage)
  SharedDtor();
}

void CMsgDOTAChatMessage::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_invite_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_lobby_passkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_pick_hero_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete dice_roll_;
  }
  if (this != internal_default_instance()) {
    delete trivia_answer_;
  }
}

void CMsgDOTAChatMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMessage::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatMessage& CMsgDOTAChatMessage::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatMessage* CMsgDOTAChatMessage::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatMessage* n = new CMsgDOTAChatMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_persona_name()) {
      GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*persona_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_text()) {
      GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*text_.UnsafeRawStringPointer())->clear();
    }
    if (has_suggest_invite_name()) {
      GOOGLE_DCHECK(!suggest_invite_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*suggest_invite_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_share_lobby_passkey()) {
      GOOGLE_DCHECK(!share_lobby_passkey_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*share_lobby_passkey_.UnsafeRawStringPointer())->clear();
    }
    if (has_suggest_pick_hero_role()) {
      GOOGLE_DCHECK(!suggest_pick_hero_role_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*suggest_pick_hero_role_.UnsafeRawStringPointer())->clear();
    }
    if (has_dice_roll()) {
      GOOGLE_DCHECK(dice_roll_ != NULL);
      dice_roll_->::proto::dota::CMsgDOTAChatMessage_DiceRoll::Clear();
    }
    if (has_trivia_answer()) {
      GOOGLE_DCHECK(trivia_answer_ != NULL);
      trivia_answer_->::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::Clear();
    }
  }
  channel_id_ = GOOGLE_ULONGLONG(0);
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&share_profile_account_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(share_profile_account_id_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&share_party_id_, 0, reinterpret_cast<char*>(&share_lobby_custom_game_id_) -
      reinterpret_cast<char*>(&share_party_id_) + sizeof(share_lobby_custom_game_id_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&private_chat_channel_id_, 0, reinterpret_cast<char*>(&ignore_muted_) -
      reinterpret_cast<char*>(&private_chat_channel_id_) + sizeof(ignore_muted_));
    player_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_invite_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_suggest_invite_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_invite_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suggest_invite_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_invite_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_invite_name().data(), this->suggest_invite_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_fantasy_draft_owner_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_fantasy_draft_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suggest_invite_to_lobby = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_suggest_invite_to_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_invite_to_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_event_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool coin_flip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_coin_flip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coin_flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 14 [default = -1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 share_profile_account_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_share_profile_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_profile_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_party_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_share_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_lobby_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_share_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_lobby_custom_game_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_share_lobby_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string share_lobby_passkey = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_lobby_passkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 private_chat_channel_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_private_chat_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &private_chat_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_battle_cup_victory = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_legacy_battle_cup_victory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_battle_cup_victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_level = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_badge_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_pick_hero_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_suggest_pick_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_pick_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suggest_pick_hero_role = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_pick_hero_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool terse = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_terse();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 battle_cup_streak = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_battle_cup_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_cup_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_ban_hero_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_suggest_ban_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_ban_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_muted = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_ignore_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(258u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trivia_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage)
  return false;
#undef DO_
}

void CMsgDOTAChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_id(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suggest_invite_account_id(), output);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), this->suggest_invite_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->suggest_invite_name(), output);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fantasy_draft_owner_account_id(), output);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fantasy_draft_player_account_id(), output);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->event_id(), output);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->suggest_invite_to_lobby(), output);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->event_points(), output);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->coin_flip(), output);
  }

  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->player_id(), output);
  }

  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->share_profile_account_id(), output);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->channel_user_id(), output);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->dice_roll_, output);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->share_party_id(), output);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->share_lobby_id(), output);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->share_lobby_custom_game_id(), output);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->share_lobby_passkey(), output);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->private_chat_channel_id(), output);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->status(), output);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->legacy_battle_cup_victory(), output);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->badge_level(), output);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->suggest_pick_hero_id(), output);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->suggest_pick_hero_role(), output);
  }

  // optional bool terse = 28;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->terse(), output);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->battle_cup_streak(), output);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->suggest_ban_hero_id(), output);
  }

  // optional bool ignore_muted = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->ignore_muted(), output);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *this->trivia_answer_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage)
}

::google::protobuf::uint8* CMsgDOTAChatMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_id(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suggest_invite_account_id(), target);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), this->suggest_invite_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->suggest_invite_name(), target);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fantasy_draft_owner_account_id(), target);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fantasy_draft_player_account_id(), target);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->event_id(), target);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->suggest_invite_to_lobby(), target);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->event_points(), target);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->coin_flip(), target);
  }

  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->player_id(), target);
  }

  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->share_profile_account_id(), target);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->channel_user_id(), target);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->dice_roll_, deterministic, target);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->share_party_id(), target);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->share_lobby_id(), target);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->share_lobby_custom_game_id(), target);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), this->share_lobby_passkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->share_lobby_passkey(), target);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->private_chat_channel_id(), target);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->status(), target);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->legacy_battle_cup_victory(), target);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->badge_level(), target);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->suggest_pick_hero_id(), target);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), this->suggest_pick_hero_role().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->suggest_pick_hero_role(), target);
  }

  // optional bool terse = 28;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->terse(), target);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->battle_cup_streak(), target);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->suggest_ban_hero_id(), target);
  }

  // optional bool ignore_muted = 31;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->ignore_muted(), target);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *this->trivia_answer_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage)
  return target;
}

size_t CMsgDOTAChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string persona_name = 3;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string suggest_invite_name = 7;
    if (has_suggest_invite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_invite_name());
    }

    // optional string share_lobby_passkey = 21;
    if (has_share_lobby_passkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share_lobby_passkey());
    }

    // optional string suggest_pick_hero_role = 27;
    if (has_suggest_pick_hero_role()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_pick_hero_role());
    }

    // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
    if (has_dice_roll()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dice_roll_);
    }

    // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
    if (has_trivia_answer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trivia_answer_);
    }

    // optional uint64 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 suggest_invite_account_id = 6;
    if (has_suggest_invite_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_invite_account_id());
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;
    if (has_fantasy_draft_owner_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_owner_account_id());
    }

    // optional uint32 fantasy_draft_player_account_id = 9;
    if (has_fantasy_draft_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_player_account_id());
    }

    // optional uint32 event_id = 10;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 event_points = 12;
    if (has_event_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 share_profile_account_id = 15;
    if (has_share_profile_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_profile_account_id());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 share_party_id = 18;
    if (has_share_party_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_party_id());
    }

    // optional uint32 channel_user_id = 16;
    if (has_channel_user_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional bool suggest_invite_to_lobby = 11;
    if (has_suggest_invite_to_lobby()) {
      total_size += 1 + 1;
    }

    // optional bool coin_flip = 13;
    if (has_coin_flip()) {
      total_size += 1 + 1;
    }

    // optional bool legacy_battle_cup_victory = 24;
    if (has_legacy_battle_cup_victory()) {
      total_size += 2 + 1;
    }

    // optional bool terse = 28;
    if (has_terse()) {
      total_size += 2 + 1;
    }

    // optional uint64 share_lobby_id = 19;
    if (has_share_lobby_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_id());
    }

    // optional uint64 share_lobby_custom_game_id = 20;
    if (has_share_lobby_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_custom_game_id());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 private_chat_channel_id = 22;
    if (has_private_chat_channel_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->private_chat_channel_id());
    }

    // optional uint32 status = 23;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 badge_level = 25;
    if (has_badge_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

    // optional uint32 suggest_pick_hero_id = 26;
    if (has_suggest_pick_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_pick_hero_id());
    }

    // optional uint32 battle_cup_streak = 29;
    if (has_battle_cup_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_cup_streak());
    }

    // optional uint32 suggest_ban_hero_id = 30;
    if (has_suggest_ban_hero_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_ban_hero_id());
    }

    // optional bool ignore_muted = 31;
    if (has_ignore_muted()) {
      total_size += 2 + 1;
    }

    // optional int32 player_id = 14 [default = -1];
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage::MergeFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_suggest_invite_name();
      suggest_invite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_invite_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_share_lobby_passkey();
      share_lobby_passkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_lobby_passkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_suggest_pick_hero_role();
      suggest_pick_hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_pick_hero_role_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dice_roll()->::proto::dota::CMsgDOTAChatMessage_DiceRoll::MergeFrom(from.dice_roll());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_trivia_answer()->::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(from.trivia_answer());
    }
    if (cached_has_bits & 0x00000080u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      suggest_invite_account_id_ = from.suggest_invite_account_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      fantasy_draft_owner_account_id_ = from.fantasy_draft_owner_account_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      fantasy_draft_player_account_id_ = from.fantasy_draft_player_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00008000u) {
      share_profile_account_id_ = from.share_profile_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      share_party_id_ = from.share_party_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      suggest_invite_to_lobby_ = from.suggest_invite_to_lobby_;
    }
    if (cached_has_bits & 0x00080000u) {
      coin_flip_ = from.coin_flip_;
    }
    if (cached_has_bits & 0x00100000u) {
      legacy_battle_cup_victory_ = from.legacy_battle_cup_victory_;
    }
    if (cached_has_bits & 0x00200000u) {
      terse_ = from.terse_;
    }
    if (cached_has_bits & 0x00400000u) {
      share_lobby_id_ = from.share_lobby_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      share_lobby_custom_game_id_ = from.share_lobby_custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      private_chat_channel_id_ = from.private_chat_channel_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x04000000u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      suggest_pick_hero_id_ = from.suggest_pick_hero_id_;
    }
    if (cached_has_bits & 0x10000000u) {
      battle_cup_streak_ = from.battle_cup_streak_;
    }
    if (cached_has_bits & 0x20000000u) {
      suggest_ban_hero_id_ = from.suggest_ban_hero_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      ignore_muted_ = from.ignore_muted_;
    }
    if (cached_has_bits & 0x80000000u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage::CopyFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage::Swap(CMsgDOTAChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage::InternalSwap(CMsgDOTAChatMessage* other) {
  persona_name_.Swap(&other->persona_name_);
  text_.Swap(&other->text_);
  suggest_invite_name_.Swap(&other->suggest_invite_name_);
  share_lobby_passkey_.Swap(&other->share_lobby_passkey_);
  suggest_pick_hero_role_.Swap(&other->suggest_pick_hero_role_);
  std::swap(dice_roll_, other->dice_roll_);
  std::swap(trivia_answer_, other->trivia_answer_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(suggest_invite_account_id_, other->suggest_invite_account_id_);
  std::swap(fantasy_draft_owner_account_id_, other->fantasy_draft_owner_account_id_);
  std::swap(fantasy_draft_player_account_id_, other->fantasy_draft_player_account_id_);
  std::swap(event_id_, other->event_id_);
  std::swap(event_points_, other->event_points_);
  std::swap(share_profile_account_id_, other->share_profile_account_id_);
  std::swap(share_party_id_, other->share_party_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(suggest_invite_to_lobby_, other->suggest_invite_to_lobby_);
  std::swap(coin_flip_, other->coin_flip_);
  std::swap(legacy_battle_cup_victory_, other->legacy_battle_cup_victory_);
  std::swap(terse_, other->terse_);
  std::swap(share_lobby_id_, other->share_lobby_id_);
  std::swap(share_lobby_custom_game_id_, other->share_lobby_custom_game_id_);
  std::swap(private_chat_channel_id_, other->private_chat_channel_id_);
  std::swap(status_, other->status_);
  std::swap(badge_level_, other->badge_level_);
  std::swap(suggest_pick_hero_id_, other->suggest_pick_hero_id_);
  std::swap(battle_cup_streak_, other->battle_cup_streak_);
  std::swap(suggest_ban_hero_id_, other->suggest_ban_hero_id_);
  std::swap(ignore_muted_, other->ignore_muted_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatMessage

// optional uint32 account_id = 1;
bool CMsgDOTAChatMessage::has_account_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAChatMessage::set_has_account_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAChatMessage::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAChatMessage::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.account_id)
  return account_id_;
}
void CMsgDOTAChatMessage::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.account_id)
}

// optional uint64 channel_id = 2;
bool CMsgDOTAChatMessage::has_channel_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAChatMessage::set_has_channel_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAChatMessage::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAChatMessage::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAChatMessage::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.channel_id)
  return channel_id_;
}
void CMsgDOTAChatMessage::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.channel_id)
}

// optional string persona_name = 3;
bool CMsgDOTAChatMessage::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatMessage::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatMessage::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatMessage::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgDOTAChatMessage::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgDOTAChatMessage::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.persona_name)
}
#if LANG_CXX11
void CMsgDOTAChatMessage::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.persona_name)
}
#endif
void CMsgDOTAChatMessage::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.persona_name)
}
void CMsgDOTAChatMessage::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.persona_name)
}
::std::string* CMsgDOTAChatMessage::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMessage::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMessage::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.persona_name)
}

// optional string text = 4;
bool CMsgDOTAChatMessage::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatMessage::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CMsgDOTAChatMessage::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.text)
  return text_.GetNoArena();
}
void CMsgDOTAChatMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.text)
}
#if LANG_CXX11
void CMsgDOTAChatMessage::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.text)
}
#endif
void CMsgDOTAChatMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.text)
}
void CMsgDOTAChatMessage::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.text)
}
::std::string* CMsgDOTAChatMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMessage::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.text)
}

// optional uint32 timestamp = 5;
bool CMsgDOTAChatMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAChatMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAChatMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAChatMessage::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.timestamp)
  return timestamp_;
}
void CMsgDOTAChatMessage::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.timestamp)
}

// optional uint32 suggest_invite_account_id = 6;
bool CMsgDOTAChatMessage::has_suggest_invite_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_invite_account_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAChatMessage::clear_has_suggest_invite_account_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAChatMessage::clear_suggest_invite_account_id() {
  suggest_invite_account_id_ = 0u;
  clear_has_suggest_invite_account_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_invite_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_account_id)
  return suggest_invite_account_id_;
}
void CMsgDOTAChatMessage::set_suggest_invite_account_id(::google::protobuf::uint32 value) {
  set_has_suggest_invite_account_id();
  suggest_invite_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_account_id)
}

// optional string suggest_invite_name = 7;
bool CMsgDOTAChatMessage::has_suggest_invite_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_invite_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatMessage::clear_has_suggest_invite_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatMessage::clear_suggest_invite_name() {
  suggest_invite_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suggest_invite_name();
}
const ::std::string& CMsgDOTAChatMessage::suggest_invite_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.GetNoArena();
}
void CMsgDOTAChatMessage::set_suggest_invite_name(const ::std::string& value) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
#if LANG_CXX11
void CMsgDOTAChatMessage::set_suggest_invite_name(::std::string&& value) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
#endif
void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
void CMsgDOTAChatMessage::set_suggest_invite_name(const char* value, size_t size) {
  set_has_suggest_invite_name();
  suggest_invite_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}
::std::string* CMsgDOTAChatMessage::mutable_suggest_invite_name() {
  set_has_suggest_invite_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  return suggest_invite_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMessage::release_suggest_invite_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
  clear_has_suggest_invite_name();
  return suggest_invite_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMessage::set_allocated_suggest_invite_name(::std::string* suggest_invite_name) {
  if (suggest_invite_name != NULL) {
    set_has_suggest_invite_name();
  } else {
    clear_has_suggest_invite_name();
  }
  suggest_invite_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest_invite_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.suggest_invite_name)
}

// optional uint32 fantasy_draft_owner_account_id = 8;
bool CMsgDOTAChatMessage::has_fantasy_draft_owner_account_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAChatMessage::set_has_fantasy_draft_owner_account_id() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAChatMessage::clear_has_fantasy_draft_owner_account_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAChatMessage::clear_fantasy_draft_owner_account_id() {
  fantasy_draft_owner_account_id_ = 0u;
  clear_has_fantasy_draft_owner_account_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_owner_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
  return fantasy_draft_owner_account_id_;
}
void CMsgDOTAChatMessage::set_fantasy_draft_owner_account_id(::google::protobuf::uint32 value) {
  set_has_fantasy_draft_owner_account_id();
  fantasy_draft_owner_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.fantasy_draft_owner_account_id)
}

// optional uint32 fantasy_draft_player_account_id = 9;
bool CMsgDOTAChatMessage::has_fantasy_draft_player_account_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAChatMessage::set_has_fantasy_draft_player_account_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAChatMessage::clear_has_fantasy_draft_player_account_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAChatMessage::clear_fantasy_draft_player_account_id() {
  fantasy_draft_player_account_id_ = 0u;
  clear_has_fantasy_draft_player_account_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::fantasy_draft_player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.fantasy_draft_player_account_id)
  return fantasy_draft_player_account_id_;
}
void CMsgDOTAChatMessage::set_fantasy_draft_player_account_id(::google::protobuf::uint32 value) {
  set_has_fantasy_draft_player_account_id();
  fantasy_draft_player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.fantasy_draft_player_account_id)
}

// optional uint32 event_id = 10;
bool CMsgDOTAChatMessage::has_event_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTAChatMessage::set_has_event_id() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTAChatMessage::clear_has_event_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTAChatMessage::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.event_id)
  return event_id_;
}
void CMsgDOTAChatMessage::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.event_id)
}

// optional bool suggest_invite_to_lobby = 11;
bool CMsgDOTAChatMessage::has_suggest_invite_to_lobby() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_invite_to_lobby() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTAChatMessage::clear_has_suggest_invite_to_lobby() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTAChatMessage::clear_suggest_invite_to_lobby() {
  suggest_invite_to_lobby_ = false;
  clear_has_suggest_invite_to_lobby();
}
bool CMsgDOTAChatMessage::suggest_invite_to_lobby() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_invite_to_lobby)
  return suggest_invite_to_lobby_;
}
void CMsgDOTAChatMessage::set_suggest_invite_to_lobby(bool value) {
  set_has_suggest_invite_to_lobby();
  suggest_invite_to_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_invite_to_lobby)
}

// optional uint32 event_points = 12;
bool CMsgDOTAChatMessage::has_event_points() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTAChatMessage::set_has_event_points() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTAChatMessage::clear_has_event_points() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTAChatMessage::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.event_points)
  return event_points_;
}
void CMsgDOTAChatMessage::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.event_points)
}

// optional bool coin_flip = 13;
bool CMsgDOTAChatMessage::has_coin_flip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTAChatMessage::set_has_coin_flip() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTAChatMessage::clear_has_coin_flip() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTAChatMessage::clear_coin_flip() {
  coin_flip_ = false;
  clear_has_coin_flip();
}
bool CMsgDOTAChatMessage::coin_flip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.coin_flip)
  return coin_flip_;
}
void CMsgDOTAChatMessage::set_coin_flip(bool value) {
  set_has_coin_flip();
  coin_flip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.coin_flip)
}

// optional int32 player_id = 14 [default = -1];
bool CMsgDOTAChatMessage::has_player_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_player_id() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgDOTAChatMessage::clear_has_player_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgDOTAChatMessage::clear_player_id() {
  player_id_ = -1;
  clear_has_player_id();
}
::google::protobuf::int32 CMsgDOTAChatMessage::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.player_id)
  return player_id_;
}
void CMsgDOTAChatMessage::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.player_id)
}

// optional uint32 share_profile_account_id = 15;
bool CMsgDOTAChatMessage::has_share_profile_account_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTAChatMessage::set_has_share_profile_account_id() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTAChatMessage::clear_has_share_profile_account_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTAChatMessage::clear_share_profile_account_id() {
  share_profile_account_id_ = 0u;
  clear_has_share_profile_account_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::share_profile_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_profile_account_id)
  return share_profile_account_id_;
}
void CMsgDOTAChatMessage::set_share_profile_account_id(::google::protobuf::uint32 value) {
  set_has_share_profile_account_id();
  share_profile_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_profile_account_id)
}

// optional uint32 channel_user_id = 16;
bool CMsgDOTAChatMessage::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTAChatMessage::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTAChatMessage::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTAChatMessage::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAChatMessage::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.channel_user_id)
}

// optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
bool CMsgDOTAChatMessage::has_dice_roll() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAChatMessage::set_has_dice_roll() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAChatMessage::clear_has_dice_roll() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAChatMessage::clear_dice_roll() {
  if (dice_roll_ != NULL) dice_roll_->::proto::dota::CMsgDOTAChatMessage_DiceRoll::Clear();
  clear_has_dice_roll();
}
const ::proto::dota::CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage::dice_roll() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.dice_roll)
  return dice_roll_ != NULL ? *dice_roll_
                         : *::proto::dota::CMsgDOTAChatMessage_DiceRoll::internal_default_instance();
}
::proto::dota::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::mutable_dice_roll() {
  set_has_dice_roll();
  if (dice_roll_ == NULL) {
    dice_roll_ = new ::proto::dota::CMsgDOTAChatMessage_DiceRoll;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.dice_roll)
  return dice_roll_;
}
::proto::dota::CMsgDOTAChatMessage_DiceRoll* CMsgDOTAChatMessage::release_dice_roll() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.dice_roll)
  clear_has_dice_roll();
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll* temp = dice_roll_;
  dice_roll_ = NULL;
  return temp;
}
void CMsgDOTAChatMessage::set_allocated_dice_roll(::proto::dota::CMsgDOTAChatMessage_DiceRoll* dice_roll) {
  delete dice_roll_;
  dice_roll_ = dice_roll;
  if (dice_roll) {
    set_has_dice_roll();
  } else {
    clear_has_dice_roll();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.dice_roll)
}

// optional uint64 share_party_id = 18;
bool CMsgDOTAChatMessage::has_share_party_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTAChatMessage::set_has_share_party_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTAChatMessage::clear_has_share_party_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTAChatMessage::clear_share_party_id() {
  share_party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_party_id();
}
::google::protobuf::uint64 CMsgDOTAChatMessage::share_party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_party_id)
  return share_party_id_;
}
void CMsgDOTAChatMessage::set_share_party_id(::google::protobuf::uint64 value) {
  set_has_share_party_id();
  share_party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_party_id)
}

// optional uint64 share_lobby_id = 19;
bool CMsgDOTAChatMessage::has_share_lobby_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTAChatMessage::set_has_share_lobby_id() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTAChatMessage::clear_has_share_lobby_id() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTAChatMessage::clear_share_lobby_id() {
  share_lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_lobby_id();
}
::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_id)
  return share_lobby_id_;
}
void CMsgDOTAChatMessage::set_share_lobby_id(::google::protobuf::uint64 value) {
  set_has_share_lobby_id();
  share_lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_id)
}

// optional uint64 share_lobby_custom_game_id = 20;
bool CMsgDOTAChatMessage::has_share_lobby_custom_game_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTAChatMessage::set_has_share_lobby_custom_game_id() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTAChatMessage::clear_has_share_lobby_custom_game_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTAChatMessage::clear_share_lobby_custom_game_id() {
  share_lobby_custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_share_lobby_custom_game_id();
}
::google::protobuf::uint64 CMsgDOTAChatMessage::share_lobby_custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_custom_game_id)
  return share_lobby_custom_game_id_;
}
void CMsgDOTAChatMessage::set_share_lobby_custom_game_id(::google::protobuf::uint64 value) {
  set_has_share_lobby_custom_game_id();
  share_lobby_custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_custom_game_id)
}

// optional string share_lobby_passkey = 21;
bool CMsgDOTAChatMessage::has_share_lobby_passkey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatMessage::set_has_share_lobby_passkey() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatMessage::clear_has_share_lobby_passkey() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatMessage::clear_share_lobby_passkey() {
  share_lobby_passkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_share_lobby_passkey();
}
const ::std::string& CMsgDOTAChatMessage::share_lobby_passkey() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  return share_lobby_passkey_.GetNoArena();
}
void CMsgDOTAChatMessage::set_share_lobby_passkey(const ::std::string& value) {
  set_has_share_lobby_passkey();
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
#if LANG_CXX11
void CMsgDOTAChatMessage::set_share_lobby_passkey(::std::string&& value) {
  set_has_share_lobby_passkey();
  share_lobby_passkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
#endif
void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_share_lobby_passkey();
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
void CMsgDOTAChatMessage::set_share_lobby_passkey(const char* value, size_t size) {
  set_has_share_lobby_passkey();
  share_lobby_passkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}
::std::string* CMsgDOTAChatMessage::mutable_share_lobby_passkey() {
  set_has_share_lobby_passkey();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  return share_lobby_passkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMessage::release_share_lobby_passkey() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
  clear_has_share_lobby_passkey();
  return share_lobby_passkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMessage::set_allocated_share_lobby_passkey(::std::string* share_lobby_passkey) {
  if (share_lobby_passkey != NULL) {
    set_has_share_lobby_passkey();
  } else {
    clear_has_share_lobby_passkey();
  }
  share_lobby_passkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_lobby_passkey);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.share_lobby_passkey)
}

// optional uint32 private_chat_channel_id = 22;
bool CMsgDOTAChatMessage::has_private_chat_channel_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_private_chat_channel_id() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTAChatMessage::clear_has_private_chat_channel_id() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTAChatMessage::clear_private_chat_channel_id() {
  private_chat_channel_id_ = 0u;
  clear_has_private_chat_channel_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::private_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.private_chat_channel_id)
  return private_chat_channel_id_;
}
void CMsgDOTAChatMessage::set_private_chat_channel_id(::google::protobuf::uint32 value) {
  set_has_private_chat_channel_id();
  private_chat_channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.private_chat_channel_id)
}

// optional uint32 status = 23;
bool CMsgDOTAChatMessage::has_status() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_status() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTAChatMessage::clear_has_status() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTAChatMessage::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.status)
  return status_;
}
void CMsgDOTAChatMessage::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.status)
}

// optional bool legacy_battle_cup_victory = 24;
bool CMsgDOTAChatMessage::has_legacy_battle_cup_victory() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTAChatMessage::set_has_legacy_battle_cup_victory() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTAChatMessage::clear_has_legacy_battle_cup_victory() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTAChatMessage::clear_legacy_battle_cup_victory() {
  legacy_battle_cup_victory_ = false;
  clear_has_legacy_battle_cup_victory();
}
bool CMsgDOTAChatMessage::legacy_battle_cup_victory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.legacy_battle_cup_victory)
  return legacy_battle_cup_victory_;
}
void CMsgDOTAChatMessage::set_legacy_battle_cup_victory(bool value) {
  set_has_legacy_battle_cup_victory();
  legacy_battle_cup_victory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.legacy_battle_cup_victory)
}

// optional uint32 battle_cup_streak = 29;
bool CMsgDOTAChatMessage::has_battle_cup_streak() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_battle_cup_streak() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgDOTAChatMessage::clear_has_battle_cup_streak() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgDOTAChatMessage::clear_battle_cup_streak() {
  battle_cup_streak_ = 0u;
  clear_has_battle_cup_streak();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::battle_cup_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.battle_cup_streak)
  return battle_cup_streak_;
}
void CMsgDOTAChatMessage::set_battle_cup_streak(::google::protobuf::uint32 value) {
  set_has_battle_cup_streak();
  battle_cup_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.battle_cup_streak)
}

// optional uint32 badge_level = 25;
bool CMsgDOTAChatMessage::has_badge_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_badge_level() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgDOTAChatMessage::clear_has_badge_level() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgDOTAChatMessage::clear_badge_level() {
  badge_level_ = 0u;
  clear_has_badge_level();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::badge_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.badge_level)
  return badge_level_;
}
void CMsgDOTAChatMessage::set_badge_level(::google::protobuf::uint32 value) {
  set_has_badge_level();
  badge_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.badge_level)
}

// optional uint32 suggest_pick_hero_id = 26;
bool CMsgDOTAChatMessage::has_suggest_pick_hero_id() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_pick_hero_id() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgDOTAChatMessage::clear_has_suggest_pick_hero_id() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgDOTAChatMessage::clear_suggest_pick_hero_id() {
  suggest_pick_hero_id_ = 0u;
  clear_has_suggest_pick_hero_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_pick_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_id)
  return suggest_pick_hero_id_;
}
void CMsgDOTAChatMessage::set_suggest_pick_hero_id(::google::protobuf::uint32 value) {
  set_has_suggest_pick_hero_id();
  suggest_pick_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_id)
}

// optional string suggest_pick_hero_role = 27;
bool CMsgDOTAChatMessage::has_suggest_pick_hero_role() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_pick_hero_role() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAChatMessage::clear_has_suggest_pick_hero_role() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAChatMessage::clear_suggest_pick_hero_role() {
  suggest_pick_hero_role_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_suggest_pick_hero_role();
}
const ::std::string& CMsgDOTAChatMessage::suggest_pick_hero_role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  return suggest_pick_hero_role_.GetNoArena();
}
void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const ::std::string& value) {
  set_has_suggest_pick_hero_role();
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
#if LANG_CXX11
void CMsgDOTAChatMessage::set_suggest_pick_hero_role(::std::string&& value) {
  set_has_suggest_pick_hero_role();
  suggest_pick_hero_role_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
#endif
void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_suggest_pick_hero_role();
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
void CMsgDOTAChatMessage::set_suggest_pick_hero_role(const char* value, size_t size) {
  set_has_suggest_pick_hero_role();
  suggest_pick_hero_role_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}
::std::string* CMsgDOTAChatMessage::mutable_suggest_pick_hero_role() {
  set_has_suggest_pick_hero_role();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  return suggest_pick_hero_role_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMessage::release_suggest_pick_hero_role() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
  clear_has_suggest_pick_hero_role();
  return suggest_pick_hero_role_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMessage::set_allocated_suggest_pick_hero_role(::std::string* suggest_pick_hero_role) {
  if (suggest_pick_hero_role != NULL) {
    set_has_suggest_pick_hero_role();
  } else {
    clear_has_suggest_pick_hero_role();
  }
  suggest_pick_hero_role_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), suggest_pick_hero_role);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role)
}

// optional uint32 suggest_ban_hero_id = 30;
bool CMsgDOTAChatMessage::has_suggest_ban_hero_id() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_suggest_ban_hero_id() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgDOTAChatMessage::clear_has_suggest_ban_hero_id() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgDOTAChatMessage::clear_suggest_ban_hero_id() {
  suggest_ban_hero_id_ = 0u;
  clear_has_suggest_ban_hero_id();
}
::google::protobuf::uint32 CMsgDOTAChatMessage::suggest_ban_hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.suggest_ban_hero_id)
  return suggest_ban_hero_id_;
}
void CMsgDOTAChatMessage::set_suggest_ban_hero_id(::google::protobuf::uint32 value) {
  set_has_suggest_ban_hero_id();
  suggest_ban_hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.suggest_ban_hero_id)
}

// optional bool terse = 28;
bool CMsgDOTAChatMessage::has_terse() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTAChatMessage::set_has_terse() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTAChatMessage::clear_has_terse() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTAChatMessage::clear_terse() {
  terse_ = false;
  clear_has_terse();
}
bool CMsgDOTAChatMessage::terse() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.terse)
  return terse_;
}
void CMsgDOTAChatMessage::set_terse(bool value) {
  set_has_terse();
  terse_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.terse)
}

// optional bool ignore_muted = 31;
bool CMsgDOTAChatMessage::has_ignore_muted() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgDOTAChatMessage::set_has_ignore_muted() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgDOTAChatMessage::clear_has_ignore_muted() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgDOTAChatMessage::clear_ignore_muted() {
  ignore_muted_ = false;
  clear_has_ignore_muted();
}
bool CMsgDOTAChatMessage::ignore_muted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.ignore_muted)
  return ignore_muted_;
}
void CMsgDOTAChatMessage::set_ignore_muted(bool value) {
  set_has_ignore_muted();
  ignore_muted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMessage.ignore_muted)
}

// optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
bool CMsgDOTAChatMessage::has_trivia_answer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAChatMessage::set_has_trivia_answer() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAChatMessage::clear_has_trivia_answer() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAChatMessage::clear_trivia_answer() {
  if (trivia_answer_ != NULL) trivia_answer_->::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::Clear();
  clear_has_trivia_answer();
}
const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage::trivia_answer() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  return trivia_answer_ != NULL ? *trivia_answer_
                         : *::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::internal_default_instance();
}
::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::mutable_trivia_answer() {
  set_has_trivia_answer();
  if (trivia_answer_ == NULL) {
    trivia_answer_ = new ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  return trivia_answer_;
}
::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* CMsgDOTAChatMessage::release_trivia_answer() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMessage.trivia_answer)
  clear_has_trivia_answer();
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* temp = trivia_answer_;
  trivia_answer_ = NULL;
  return temp;
}
void CMsgDOTAChatMessage::set_allocated_trivia_answer(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* trivia_answer) {
  delete trivia_answer_;
  trivia_answer_ = trivia_answer;
  if (trivia_answer) {
    set_has_trivia_answer();
  } else {
    clear_has_trivia_answer();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMessage.trivia_answer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMember::kSteamIdFieldNumber;
const int CMsgDOTAChatMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMember::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMember::CMsgDOTAChatMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMember)
}
CMsgDOTAChatMember::CMsgDOTAChatMember(const CMsgDOTAChatMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMember)
}

void CMsgDOTAChatMember::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
}

CMsgDOTAChatMember::~CMsgDOTAChatMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMember)
  SharedDtor();
}

void CMsgDOTAChatMember::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatMember::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatMember& CMsgDOTAChatMember::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatMember* CMsgDOTAChatMember::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatMember* n = new CMsgDOTAChatMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMember)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMember.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMember)
  return false;
#undef DO_
}

void CMsgDOTAChatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMember.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMember)
}

::google::protobuf::uint8* CMsgDOTAChatMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMember.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMember)
  return target;
}

size_t CMsgDOTAChatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMember::MergeFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMember::CopyFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMember::Swap(CMsgDOTAChatMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMember::InternalSwap(CMsgDOTAChatMember* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatMember

// optional fixed64 steam_id = 1;
bool CMsgDOTAChatMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAChatMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.steam_id)
  return steam_id_;
}
void CMsgDOTAChatMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.steam_id)
}

// optional string persona_name = 2;
bool CMsgDOTAChatMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatMember::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatMember::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatMember::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgDOTAChatMember::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgDOTAChatMember::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.persona_name)
}
#if LANG_CXX11
void CMsgDOTAChatMember::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatMember.persona_name)
}
#endif
void CMsgDOTAChatMember::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatMember.persona_name)
}
void CMsgDOTAChatMember::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatMember.persona_name)
}
::std::string* CMsgDOTAChatMember::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatMember.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatMember.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatMember.persona_name)
}

// optional uint32 channel_user_id = 3;
bool CMsgDOTAChatMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatMember::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatMember::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAChatMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAChatMember::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.channel_user_id)
}

// optional uint32 status = 4;
bool CMsgDOTAChatMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatMember::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatMember::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatMember::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAChatMember::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatMember.status)
  return status_;
}
void CMsgDOTAChatMember::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatMember.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinChatChannelResponse::kResponseFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMaxMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelTypeFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kResultFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kGcInitiatedJoinFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelUserIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kWelcomeMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
}
CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  welcome_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_welcome_message()) {
    welcome_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_message_);
  }
  ::memcpy(&response_, &from.response_,
    reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&response_) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
}

void CMsgDOTAJoinChatChannelResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  welcome_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&response_) + sizeof(channel_user_id_));
}

CMsgDOTAJoinChatChannelResponse::~CMsgDOTAJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
  SharedDtor();
}

void CMsgDOTAJoinChatChannelResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  welcome_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannelResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinChatChannelResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAJoinChatChannelResponse& CMsgDOTAJoinChatChannelResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAJoinChatChannelResponse* CMsgDOTAJoinChatChannelResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAJoinChatChannelResponse* n = new CMsgDOTAJoinChatChannelResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAJoinChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  members_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_channel_name()) {
      GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*channel_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_welcome_message()) {
      GOOGLE_DCHECK(!welcome_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*welcome_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&response_, 0, reinterpret_cast<char*>(&gc_initiated_join_) -
      reinterpret_cast<char*>(&response_) + sizeof(gc_initiated_join_));
  }
  channel_user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAJoinChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_response();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatMember members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gc_initiated_join = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_gc_initiated_join();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gc_initiated_join_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string welcome_message = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_message().data(), this->welcome_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return false;
#undef DO_
}

void CMsgDOTAJoinChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->channel_id(), output);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_members(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->channel_type(), output);
  }

  // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gc_initiated_join(), output);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel_user_id(), output);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), this->welcome_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->welcome_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinChatChannelResponse)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannelResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_members(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->members(i), deterministic, target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->channel_type(), target);
  }

  // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gc_initiated_join(), target);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel_user_id(), target);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), this->welcome_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->welcome_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return target;
}

size_t CMsgDOTAJoinChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string channel_name = 2;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string welcome_message = 10;
    if (has_welcome_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_message());
    }

    // optional uint32 response = 1;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional uint32 max_members = 4;
    if (has_max_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_members());
    }

    // optional fixed64 channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool gc_initiated_join = 8;
    if (has_gc_initiated_join()) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 channel_user_id = 9;
  if (has_channel_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannelResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAJoinChatChannelResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinChatChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinChatChannelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_welcome_message();
      welcome_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      gc_initiated_join_ = from.gc_initiated_join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_channel_user_id(from.channel_user_id());
  }
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannelResponse::Swap(CMsgDOTAJoinChatChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinChatChannelResponse::InternalSwap(CMsgDOTAJoinChatChannelResponse* other) {
  members_.InternalSwap(&other->members_);
  channel_name_.Swap(&other->channel_name_);
  welcome_message_.Swap(&other->welcome_message_);
  std::swap(response_, other->response_);
  std::swap(max_members_, other->max_members_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(result_, other->result_);
  std::swap(gc_initiated_join_, other->gc_initiated_join_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannelResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAJoinChatChannelResponse

// optional uint32 response = 1;
bool CMsgDOTAJoinChatChannelResponse::has_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_response() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_response() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAJoinChatChannelResponse::clear_response() {
  response_ = 0u;
  clear_has_response();
}
::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::response() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.response)
  return response_;
}
void CMsgDOTAJoinChatChannelResponse::set_response(::google::protobuf::uint32 value) {
  set_has_response();
  response_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.response)
}

// optional string channel_name = 2;
bool CMsgDOTAJoinChatChannelResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAJoinChatChannelResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& CMsgDOTAJoinChatChannelResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.GetNoArena();
}
void CMsgDOTAJoinChatChannelResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
#if LANG_CXX11
void CMsgDOTAJoinChatChannelResponse::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
#endif
void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
void CMsgDOTAJoinChatChannelResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}
::std::string* CMsgDOTAJoinChatChannelResponse::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAJoinChatChannelResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAJoinChatChannelResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name)
}

// optional fixed64 channel_id = 3;
bool CMsgDOTAJoinChatChannelResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAJoinChatChannelResponse::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAJoinChatChannelResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_id)
  return channel_id_;
}
void CMsgDOTAJoinChatChannelResponse::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_id)
}

// optional uint32 max_members = 4;
bool CMsgDOTAJoinChatChannelResponse::has_max_members() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_max_members() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_max_members() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAJoinChatChannelResponse::clear_max_members() {
  max_members_ = 0u;
  clear_has_max_members();
}
::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::max_members() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.max_members)
  return max_members_;
}
void CMsgDOTAJoinChatChannelResponse::set_max_members(::google::protobuf::uint32 value) {
  set_has_max_members();
  max_members_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.max_members)
}

// repeated .proto.dota.CMsgDOTAChatMember members = 5;
int CMsgDOTAJoinChatChannelResponse::members_size() const {
  return members_.size();
}
void CMsgDOTAJoinChatChannelResponse::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTAChatMember& CMsgDOTAJoinChatChannelResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTAChatMember* CMsgDOTAJoinChatChannelResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
CMsgDOTAJoinChatChannelResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
CMsgDOTAJoinChatChannelResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAJoinChatChannelResponse.members)
  return members_;
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
bool CMsgDOTAJoinChatChannelResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_channel_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAJoinChatChannelResponse::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
::proto::dota::DOTAChatChannelType_t CMsgDOTAJoinChatChannelResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
void CMsgDOTAJoinChatChannelResponse::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_type)
}

// optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
bool CMsgDOTAJoinChatChannelResponse::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAJoinChatChannelResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result >(result_);
}
void CMsgDOTAJoinChatChannelResponse::set_result(::proto::dota::CMsgDOTAJoinChatChannelResponse_Result value) {
  assert(::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.result)
}

// optional bool gc_initiated_join = 8;
bool CMsgDOTAJoinChatChannelResponse::has_gc_initiated_join() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_gc_initiated_join() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_gc_initiated_join() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAJoinChatChannelResponse::clear_gc_initiated_join() {
  gc_initiated_join_ = false;
  clear_has_gc_initiated_join();
}
bool CMsgDOTAJoinChatChannelResponse::gc_initiated_join() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
  return gc_initiated_join_;
}
void CMsgDOTAJoinChatChannelResponse::set_gc_initiated_join(bool value) {
  set_has_gc_initiated_join();
  gc_initiated_join_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.gc_initiated_join)
}

// optional uint32 channel_user_id = 9;
bool CMsgDOTAJoinChatChannelResponse::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAJoinChatChannelResponse::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAJoinChatChannelResponse::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAJoinChatChannelResponse::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.channel_user_id)
}

// optional string welcome_message = 10;
bool CMsgDOTAJoinChatChannelResponse::has_welcome_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAJoinChatChannelResponse::set_has_welcome_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAJoinChatChannelResponse::clear_has_welcome_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAJoinChatChannelResponse::clear_welcome_message() {
  welcome_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_welcome_message();
}
const ::std::string& CMsgDOTAJoinChatChannelResponse::welcome_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  return welcome_message_.GetNoArena();
}
void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const ::std::string& value) {
  set_has_welcome_message();
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
#if LANG_CXX11
void CMsgDOTAJoinChatChannelResponse::set_welcome_message(::std::string&& value) {
  set_has_welcome_message();
  welcome_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
#endif
void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_welcome_message();
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
void CMsgDOTAJoinChatChannelResponse::set_welcome_message(const char* value, size_t size) {
  set_has_welcome_message();
  welcome_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}
::std::string* CMsgDOTAJoinChatChannelResponse::mutable_welcome_message() {
  set_has_welcome_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  return welcome_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAJoinChatChannelResponse::release_welcome_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
  clear_has_welcome_message();
  return welcome_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAJoinChatChannelResponse::set_allocated_welcome_message(::std::string* welcome_message) {
  if (welcome_message != NULL) {
    set_has_welcome_message();
  } else {
    clear_has_welcome_message();
  }
  welcome_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), welcome_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelFullUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelFullUpdate::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
}
CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
}

void CMsgDOTAChatChannelFullUpdate::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAChatChannelFullUpdate::~CMsgDOTAChatChannelFullUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelFullUpdate::SharedDtor() {
}

void CMsgDOTAChatChannelFullUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelFullUpdate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatChannelFullUpdate& CMsgDOTAChatChannelFullUpdate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatChannelFullUpdate* CMsgDOTAChatChannelFullUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatChannelFullUpdate* n = new CMsgDOTAChatChannelFullUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatChannelFullUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  members_.Clear();
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatChannelFullUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelFullUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelFullUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelFullUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return target;
}

size_t CMsgDOTAChatChannelFullUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelFullUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatChannelFullUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelFullUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelFullUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelFullUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelFullUpdate::Swap(CMsgDOTAChatChannelFullUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelFullUpdate::InternalSwap(CMsgDOTAChatChannelFullUpdate* other) {
  members_.InternalSwap(&other->members_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelFullUpdate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatChannelFullUpdate

// optional fixed64 channel_id = 1;
bool CMsgDOTAChatChannelFullUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatChannelFullUpdate::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatChannelFullUpdate::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatChannelFullUpdate::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAChatChannelFullUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelFullUpdate.channel_id)
  return channel_id_;
}
void CMsgDOTAChatChannelFullUpdate::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelFullUpdate.channel_id)
}

// repeated .proto.dota.CMsgDOTAChatMember members = 2;
int CMsgDOTAChatChannelFullUpdate::members_size() const {
  return members_.size();
}
void CMsgDOTAChatChannelFullUpdate::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTAChatMember& CMsgDOTAChatChannelFullUpdate::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTAChatMember* CMsgDOTAChatChannelFullUpdate::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >*
CMsgDOTAChatChannelFullUpdate::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatMember >&
CMsgDOTAChatChannelFullUpdate::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelFullUpdate.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAOtherJoinedChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kPersonaNameFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kChannelUserIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}
CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}

void CMsgDOTAOtherJoinedChatChannel::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(status_));
}

CMsgDOTAOtherJoinedChatChannel::~CMsgDOTAOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherJoinedChatChannel::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAOtherJoinedChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAOtherJoinedChatChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAOtherJoinedChatChannel& CMsgDOTAOtherJoinedChatChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAOtherJoinedChatChannel* CMsgDOTAOtherJoinedChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAOtherJoinedChatChannel* n = new CMsgDOTAOtherJoinedChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAOtherJoinedChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&channel_id_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&channel_id_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAOtherJoinedChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAOtherJoinedChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_user_id(), output);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherJoinedChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_user_id(), target);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return target;
}

size_t CMsgDOTAOtherJoinedChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 4;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherJoinedChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAOtherJoinedChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAOtherJoinedChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAOtherJoinedChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherJoinedChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherJoinedChatChannel::Swap(CMsgDOTAOtherJoinedChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAOtherJoinedChatChannel::InternalSwap(CMsgDOTAOtherJoinedChatChannel* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAOtherJoinedChatChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAOtherJoinedChatChannel

// optional fixed64 channel_id = 1;
bool CMsgDOTAOtherJoinedChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAOtherJoinedChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_id)
  return channel_id_;
}
void CMsgDOTAOtherJoinedChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_id)
}

// optional string persona_name = 2;
bool CMsgDOTAOtherJoinedChatChannel::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAOtherJoinedChatChannel::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgDOTAOtherJoinedChatChannel::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#if LANG_CXX11
void CMsgDOTAOtherJoinedChatChannel::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
#endif
void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
void CMsgDOTAOtherJoinedChatChannel::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}
::std::string* CMsgDOTAOtherJoinedChatChannel::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAOtherJoinedChatChannel::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAOtherJoinedChatChannel::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name)
}

// optional fixed64 steam_id = 3;
bool CMsgDOTAOtherJoinedChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAOtherJoinedChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAOtherJoinedChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.steam_id)
  return steam_id_;
}
void CMsgDOTAOtherJoinedChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.steam_id)
}

// optional uint32 channel_user_id = 4;
bool CMsgDOTAOtherJoinedChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAOtherJoinedChatChannel::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAOtherJoinedChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.channel_user_id)
}

// optional uint32 status = 5;
bool CMsgDOTAOtherJoinedChatChannel::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAOtherJoinedChatChannel::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAOtherJoinedChatChannel::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAOtherJoinedChatChannel::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherJoinedChatChannel.status)
  return status_;
}
void CMsgDOTAOtherJoinedChatChannel::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherJoinedChatChannel.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAOtherLeftChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kChannelUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
}
CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
}

void CMsgDOTAOtherLeftChatChannel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&channel_id_, 0, reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
}

CMsgDOTAOtherLeftChatChannel::~CMsgDOTAOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherLeftChatChannel::SharedDtor() {
}

void CMsgDOTAOtherLeftChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAOtherLeftChatChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAOtherLeftChatChannel& CMsgDOTAOtherLeftChatChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAOtherLeftChatChannel* CMsgDOTAOtherLeftChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAOtherLeftChatChannel* n = new CMsgDOTAOtherLeftChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAOtherLeftChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&channel_id_, 0, reinterpret_cast<char*>(&channel_user_id_) -
      reinterpret_cast<char*>(&channel_id_) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAOtherLeftChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return false;
#undef DO_
}

void CMsgDOTAOtherLeftChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAOtherLeftChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherLeftChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return target;
}

size_t CMsgDOTAOtherLeftChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional fixed64 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherLeftChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAOtherLeftChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAOtherLeftChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAOtherLeftChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherLeftChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherLeftChatChannel::Swap(CMsgDOTAOtherLeftChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAOtherLeftChatChannel::InternalSwap(CMsgDOTAOtherLeftChatChannel* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAOtherLeftChatChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAOtherLeftChatChannel

// optional fixed64 channel_id = 1;
bool CMsgDOTAOtherLeftChatChannel::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAOtherLeftChatChannel::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAOtherLeftChatChannel::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAOtherLeftChatChannel::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_id)
  return channel_id_;
}
void CMsgDOTAOtherLeftChatChannel::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_id)
}

// optional fixed64 steam_id = 2;
bool CMsgDOTAOtherLeftChatChannel::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAOtherLeftChatChannel::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAOtherLeftChatChannel::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAOtherLeftChatChannel::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAOtherLeftChatChannel::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.steam_id)
  return steam_id_;
}
void CMsgDOTAOtherLeftChatChannel::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.steam_id)
}

// optional uint32 channel_user_id = 3;
bool CMsgDOTAOtherLeftChatChannel::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAOtherLeftChatChannel::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAOtherLeftChatChannel::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAOtherLeftChatChannel::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAOtherLeftChatChannel::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAOtherLeftChatChannel::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAOtherLeftChatChannel.channel_user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kSteamIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}
CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember::~CMsgDOTAChatChannelMemberUpdate_JoinedMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate_JoinedMember::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate_JoinedMember::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatChannelMemberUpdate_JoinedMember* n = new CMsgDOTAChatChannelMemberUpdate_JoinedMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate_JoinedMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate_JoinedMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate_JoinedMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatChannelMemberUpdate_JoinedMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::InternalSwap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate_JoinedMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatChannelMemberUpdate_JoinedMember

// optional fixed64 steam_id = 1;
bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate_JoinedMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
  return steam_id_;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.steam_id)
}

// optional string persona_name = 2;
bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgDOTAChatChannelMemberUpdate_JoinedMember::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
#if LANG_CXX11
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
#endif
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}
::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatChannelMemberUpdate_JoinedMember::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name)
}

// optional uint32 channel_user_id = 3;
bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.channel_user_id)
}

// optional uint32 status = 4;
bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAChatChannelMemberUpdate_JoinedMember::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
  return status_;
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelMemberUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kLeftSteamIdsFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kJoinedMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}
CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      left_steam_ids_(from.left_steam_ids_),
      joined_members_(from.joined_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}

void CMsgDOTAChatChannelMemberUpdate::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAChatChannelMemberUpdate::~CMsgDOTAChatChannelMemberUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate::SharedDtor() {
}

void CMsgDOTAChatChannelMemberUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatChannelMemberUpdate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatChannelMemberUpdate& CMsgDOTAChatChannelMemberUpdate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatChannelMemberUpdate* CMsgDOTAChatChannelMemberUpdate::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatChannelMemberUpdate* n = new CMsgDOTAChatChannelMemberUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatChannelMemberUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  left_steam_ids_.Clear();
  joined_members_.Clear();
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatChannelMemberUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 left_steam_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_left_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_left_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joined_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return false;
#undef DO_
}

void CMsgDOTAChatChannelMemberUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated fixed64 left_steam_ids = 2;
  for (int i = 0, n = this->left_steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->left_steam_ids(i), output);
  }

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (unsigned int i = 0, n = this->joined_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->joined_members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated fixed64 left_steam_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->left_steam_ids_, target);

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (unsigned int i = 0, n = this->joined_members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->joined_members(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 left_steam_ids = 2;
  {
    unsigned int count = this->left_steam_ids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->left_steam_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  {
    unsigned int count = this->joined_members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->joined_members(i));
    }
  }

  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatChannelMemberUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelMemberUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelMemberUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_steam_ids_.MergeFrom(from.left_steam_ids_);
  joined_members_.MergeFrom(from.joined_members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate::Swap(CMsgDOTAChatChannelMemberUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelMemberUpdate::InternalSwap(CMsgDOTAChatChannelMemberUpdate* other) {
  left_steam_ids_.InternalSwap(&other->left_steam_ids_);
  joined_members_.InternalSwap(&other->joined_members_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatChannelMemberUpdate

// optional fixed64 channel_id = 1;
bool CMsgDOTAChatChannelMemberUpdate::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatChannelMemberUpdate::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatChannelMemberUpdate::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatChannelMemberUpdate::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.channel_id)
  return channel_id_;
}
void CMsgDOTAChatChannelMemberUpdate::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.channel_id)
}

// repeated fixed64 left_steam_ids = 2;
int CMsgDOTAChatChannelMemberUpdate::left_steam_ids_size() const {
  return left_steam_ids_.size();
}
void CMsgDOTAChatChannelMemberUpdate::clear_left_steam_ids() {
  left_steam_ids_.Clear();
}
::google::protobuf::uint64 CMsgDOTAChatChannelMemberUpdate::left_steam_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_.Get(index);
}
void CMsgDOTAChatChannelMemberUpdate::set_left_steam_ids(int index, ::google::protobuf::uint64 value) {
  left_steam_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
void CMsgDOTAChatChannelMemberUpdate::add_left_steam_ids(::google::protobuf::uint64 value) {
  left_steam_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTAChatChannelMemberUpdate::left_steam_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return left_steam_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTAChatChannelMemberUpdate::mutable_left_steam_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.left_steam_ids)
  return &left_steam_ids_;
}

// repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
int CMsgDOTAChatChannelMemberUpdate::joined_members_size() const {
  return joined_members_.size();
}
void CMsgDOTAChatChannelMemberUpdate::clear_joined_members() {
  joined_members_.Clear();
}
const ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate::joined_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Get(index);
}
::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::mutable_joined_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Mutable(index);
}
::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* CMsgDOTAChatChannelMemberUpdate::add_joined_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >*
CMsgDOTAChatChannelMemberUpdate::mutable_joined_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return &joined_members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >&
CMsgDOTAChatChannelMemberUpdate::joined_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatChannelMemberUpdate.joined_members)
  return joined_members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelList)
}
CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelList)
}

void CMsgDOTARequestChatChannelList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARequestChatChannelList::~CMsgDOTARequestChatChannelList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelList)
  SharedDtor();
}

void CMsgDOTARequestChatChannelList::SharedDtor() {
}

void CMsgDOTARequestChatChannelList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelList::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestChatChannelList& CMsgDOTARequestChatChannelList::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestChatChannelList* CMsgDOTARequestChatChannelList::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestChatChannelList* n = new CMsgDOTARequestChatChannelList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestChatChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelList)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestChatChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelList)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelList)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelList)
  return target;
}

size_t CMsgDOTARequestChatChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestChatChannelList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelList)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelList::MergeFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTARequestChatChannelList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelList::CopyFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelList::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelList::Swap(CMsgDOTARequestChatChannelList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelList::InternalSwap(CMsgDOTARequestChatChannelList* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestChatChannelList

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelNameFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kNumMembersFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}
CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&num_members_, &from.num_members_,
    reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_members_, 0, reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_) + sizeof(channel_type_));
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::~CMsgDOTARequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse_ChatChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse_ChatChannel::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestChatChannelListResponse_ChatChannel* n = new CMsgDOTARequestChatChannelListResponse_ChatChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (has_channel_name()) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&num_members_, 0, reinterpret_cast<char*>(&channel_type_) -
      reinterpret_cast<char*>(&num_members_) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_members();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_members(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_members(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse_ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 num_members = 2;
    if (has_num_members()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_members());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse_ChatChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestChatChannelListResponse_ChatChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(num_members_, other->num_members_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestChatChannelListResponse_ChatChannel

// optional string channel_name = 1;
bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.GetNoArena();
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#if LANG_CXX11
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
#endif
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}
::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTARequestChatChannelListResponse_ChatChannel::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name)
}

// optional uint32 num_members = 2;
bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_num_members() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_num_members() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_num_members() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_num_members() {
  num_members_ = 0u;
  clear_has_num_members();
}
::google::protobuf::uint32 CMsgDOTARequestChatChannelListResponse_ChatChannel::num_members() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
  return num_members_;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_num_members(::google::protobuf::uint32 value) {
  set_has_num_members();
  num_members_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.num_members)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
bool CMsgDOTARequestChatChannelListResponse_ChatChannel::has_channel_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_has_channel_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
::proto::dota::DOTAChatChannelType_t CMsgDOTARequestChatChannelListResponse_ChatChannel::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestChatChannelListResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
}
CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
}

void CMsgDOTARequestChatChannelListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARequestChatChannelListResponse::~CMsgDOTARequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse::SharedDtor() {
}

void CMsgDOTARequestChatChannelListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestChatChannelListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestChatChannelListResponse& CMsgDOTARequestChatChannelListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestChatChannelListResponse* CMsgDOTARequestChatChannelListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestChatChannelListResponse* n = new CMsgDOTARequestChatChannelListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestChatChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  channels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestChatChannelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return false;
#undef DO_
}

void CMsgDOTARequestChatChannelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->channels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelListResponse)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0, n = this->channels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->channels(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  {
    unsigned int count = this->channels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->channels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestChatChannelListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse::Swap(CMsgDOTARequestChatChannelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelListResponse::InternalSwap(CMsgDOTARequestChatChannelListResponse* other) {
  channels_.InternalSwap(&other->channels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestChatChannelListResponse

// repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
int CMsgDOTARequestChatChannelListResponse::channels_size() const {
  return channels_.size();
}
void CMsgDOTARequestChatChannelListResponse::clear_channels() {
  channels_.Clear();
}
const ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Get(index);
}
::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Mutable(index);
}
::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* CMsgDOTARequestChatChannelListResponse::add_channels() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >*
CMsgDOTARequestChatChannelListResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return &channels_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >&
CMsgDOTARequestChatChannelListResponse::channels() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTARequestChatChannelListResponse.channels)
  return channels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserList::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserList)
}
CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserList)
}

void CMsgDOTAChatGetUserList::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAChatGetUserList::~CMsgDOTAChatGetUserList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserList)
  SharedDtor();
}

void CMsgDOTAChatGetUserList::SharedDtor() {
}

void CMsgDOTAChatGetUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserList::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatGetUserList& CMsgDOTAChatGetUserList::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatGetUserList* CMsgDOTAChatGetUserList::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatGetUserList* n = new CMsgDOTAChatGetUserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatGetUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserList)
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatGetUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserList)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserList)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserList)
  return target;
}

size_t CMsgDOTAChatGetUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatGetUserList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserList)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserList::MergeFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatGetUserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserList::CopyFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserList::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserList::Swap(CMsgDOTAChatGetUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserList::InternalSwap(CMsgDOTAChatGetUserList* other) {
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatGetUserList

// optional fixed64 channel_id = 1;
bool CMsgDOTAChatGetUserList::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatGetUserList::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatGetUserList::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatGetUserList::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAChatGetUserList::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserList.channel_id)
  return channel_id_;
}
void CMsgDOTAChatGetUserList::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserList.channel_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserListResponse_Member::kSteamIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kPersonaNameFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kChannelUserIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}
CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}

void CMsgDOTAChatGetUserListResponse_Member::SharedCtor() {
  _cached_size_ = 0;
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
}

CMsgDOTAChatGetUserListResponse_Member::~CMsgDOTAChatGetUserListResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetUserListResponse_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse_Member::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse_Member::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse_Member::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatGetUserListResponse_Member* n = new CMsgDOTAChatGetUserListResponse_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatGetUserListResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  if (has_persona_name()) {
    GOOGLE_DCHECK(!persona_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*persona_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatGetUserListResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), this->persona_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_channel_user_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserListResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), this->persona_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string persona_name = 2;
    if (has_persona_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (has_channel_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatGetUserListResponse_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_persona_name();
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse_Member::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse_Member::Swap(CMsgDOTAChatGetUserListResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserListResponse_Member::InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other) {
  persona_name_.Swap(&other->persona_name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(channel_user_id_, other->channel_user_id_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse_Member::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatGetUserListResponse_Member

// optional fixed64 steam_id = 1;
bool CMsgDOTAChatGetUserListResponse_Member::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatGetUserListResponse_Member::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse_Member::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.steam_id)
  return steam_id_;
}
void CMsgDOTAChatGetUserListResponse_Member::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.steam_id)
}

// optional string persona_name = 2;
bool CMsgDOTAChatGetUserListResponse_Member::has_persona_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatGetUserListResponse_Member::set_has_persona_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_has_persona_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_persona_name() {
  persona_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_persona_name();
}
const ::std::string& CMsgDOTAChatGetUserListResponse_Member::persona_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return persona_name_.GetNoArena();
}
void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const ::std::string& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
#if LANG_CXX11
void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(::std::string&& value) {
  set_has_persona_name();
  persona_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
#endif
void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
void CMsgDOTAChatGetUserListResponse_Member::set_persona_name(const char* value, size_t size) {
  set_has_persona_name();
  persona_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}
::std::string* CMsgDOTAChatGetUserListResponse_Member::mutable_persona_name() {
  set_has_persona_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  return persona_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatGetUserListResponse_Member::release_persona_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
  clear_has_persona_name();
  return persona_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatGetUserListResponse_Member::set_allocated_persona_name(::std::string* persona_name) {
  if (persona_name != NULL) {
    set_has_persona_name();
  } else {
    clear_has_persona_name();
  }
  persona_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), persona_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name)
}

// optional uint32 channel_user_id = 3;
bool CMsgDOTAChatGetUserListResponse_Member::has_channel_user_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatGetUserListResponse_Member::set_has_channel_user_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_has_channel_user_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_channel_user_id() {
  channel_user_id_ = 0u;
  clear_has_channel_user_id();
}
::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::channel_user_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
  return channel_user_id_;
}
void CMsgDOTAChatGetUserListResponse_Member::set_channel_user_id(::google::protobuf::uint32 value) {
  set_has_channel_user_id();
  channel_user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.channel_user_id)
}

// optional uint32 status = 4;
bool CMsgDOTAChatGetUserListResponse_Member::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatGetUserListResponse_Member::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatGetUserListResponse_Member::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgDOTAChatGetUserListResponse_Member::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.Member.status)
  return status_;
}
void CMsgDOTAChatGetUserListResponse_Member::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.Member.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserListResponse::kChannelIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserListResponse)
}
CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserListResponse)
}

void CMsgDOTAChatGetUserListResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAChatGetUserListResponse::~CMsgDOTAChatGetUserListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserListResponse)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse::SharedDtor() {
}

void CMsgDOTAChatGetUserListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetUserListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatGetUserListResponse& CMsgDOTAChatGetUserListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatGetUserListResponse* CMsgDOTAChatGetUserListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatGetUserListResponse* n = new CMsgDOTAChatGetUserListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatGetUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  members_.Clear();
  channel_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatGetUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserListResponse)
  return false;
#undef DO_
}

void CMsgDOTAChatGetUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserListResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserListResponse)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // optional fixed64 channel_id = 1;
  if (has_channel_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatGetUserListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse::Swap(CMsgDOTAChatGetUserListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserListResponse::InternalSwap(CMsgDOTAChatGetUserListResponse* other) {
  members_.InternalSwap(&other->members_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatGetUserListResponse

// optional fixed64 channel_id = 1;
bool CMsgDOTAChatGetUserListResponse::has_channel_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatGetUserListResponse::set_has_channel_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatGetUserListResponse::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatGetUserListResponse::clear_channel_id() {
  channel_id_ = GOOGLE_ULONGLONG(0);
  clear_has_channel_id();
}
::google::protobuf::uint64 CMsgDOTAChatGetUserListResponse::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.channel_id)
  return channel_id_;
}
void CMsgDOTAChatGetUserListResponse::set_channel_id(::google::protobuf::uint64 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetUserListResponse.channel_id)
}

// repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
int CMsgDOTAChatGetUserListResponse::members_size() const {
  return members_.size();
}
void CMsgDOTAChatGetUserListResponse::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTAChatGetUserListResponse_Member* CMsgDOTAChatGetUserListResponse::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >*
CMsgDOTAChatGetUserListResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >&
CMsgDOTAChatGetUserListResponse::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatGetUserListResponse.members)
  return members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetMemberCount::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCount::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetMemberCount)
}
CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetMemberCount)
}

void CMsgDOTAChatGetMemberCount::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

CMsgDOTAChatGetMemberCount::~CMsgDOTAChatGetMemberCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetMemberCount)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCount::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCount::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatGetMemberCount& CMsgDOTAChatGetMemberCount::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatGetMemberCount* CMsgDOTAChatGetMemberCount::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatGetMemberCount* n = new CMsgDOTAChatGetMemberCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatGetMemberCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetMemberCount)
  if (has_channel_name()) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatGetMemberCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetMemberCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetMemberCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetMemberCount)
  return false;
#undef DO_
}

void CMsgDOTAChatGetMemberCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetMemberCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetMemberCount)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetMemberCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetMemberCount)
  return target;
}

size_t CMsgDOTAChatGetMemberCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetMemberCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatGetMemberCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetMemberCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetMemberCount)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCount::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCount::Swap(CMsgDOTAChatGetMemberCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetMemberCount::InternalSwap(CMsgDOTAChatGetMemberCount* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCount::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatGetMemberCount

// optional string channel_name = 1;
bool CMsgDOTAChatGetMemberCount::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatGetMemberCount::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatGetMemberCount::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatGetMemberCount::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& CMsgDOTAChatGetMemberCount::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  return channel_name_.GetNoArena();
}
void CMsgDOTAChatGetMemberCount::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
#if LANG_CXX11
void CMsgDOTAChatGetMemberCount::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
#endif
void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
void CMsgDOTAChatGetMemberCount::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}
::std::string* CMsgDOTAChatGetMemberCount::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatGetMemberCount::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatGetMemberCount::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetMemberCount.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
bool CMsgDOTAChatGetMemberCount::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatGetMemberCount::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatGetMemberCount::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatGetMemberCount::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
::proto::dota::DOTAChatChannelType_t CMsgDOTAChatGetMemberCount::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCount.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
void CMsgDOTAChatGetMemberCount::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCount.channel_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetMemberCountResponse::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kChannelTypeFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kMemberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}
CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&channel_type_, &from.channel_type_,
    reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&channel_type_) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}

void CMsgDOTAChatGetMemberCountResponse::SharedCtor() {
  _cached_size_ = 0;
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_type_, 0, reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&channel_type_) + sizeof(member_count_));
}

CMsgDOTAChatGetMemberCountResponse::~CMsgDOTAChatGetMemberCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCountResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatGetMemberCountResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatGetMemberCountResponse& CMsgDOTAChatGetMemberCountResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatGetMemberCountResponse* CMsgDOTAChatGetMemberCountResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatGetMemberCountResponse* n = new CMsgDOTAChatGetMemberCountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatGetMemberCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  if (has_channel_name()) {
    GOOGLE_DCHECK(!channel_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*channel_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&channel_type_, 0, reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&channel_type_) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatGetMemberCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), this->channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return false;
#undef DO_
}

void CMsgDOTAChatGetMemberCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), this->channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->member_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return target;
}

size_t CMsgDOTAChatGetMemberCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string channel_name = 1;
    if (has_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (has_channel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional uint32 member_count = 3;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatGetMemberCountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetMemberCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetMemberCountResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_channel_name();
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCountResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCountResponse::Swap(CMsgDOTAChatGetMemberCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetMemberCountResponse::InternalSwap(CMsgDOTAChatGetMemberCountResponse* other) {
  channel_name_.Swap(&other->channel_name_);
  std::swap(channel_type_, other->channel_type_);
  std::swap(member_count_, other->member_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCountResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatGetMemberCountResponse

// optional string channel_name = 1;
bool CMsgDOTAChatGetMemberCountResponse::has_channel_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatGetMemberCountResponse::set_has_channel_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_has_channel_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_channel_name() {
  channel_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_channel_name();
}
const ::std::string& CMsgDOTAChatGetMemberCountResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  return channel_name_.GetNoArena();
}
void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const ::std::string& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
#if LANG_CXX11
void CMsgDOTAChatGetMemberCountResponse::set_channel_name(::std::string&& value) {
  set_has_channel_name();
  channel_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
#endif
void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
void CMsgDOTAChatGetMemberCountResponse::set_channel_name(const char* value, size_t size) {
  set_has_channel_name();
  channel_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}
::std::string* CMsgDOTAChatGetMemberCountResponse::mutable_channel_name() {
  set_has_channel_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  return channel_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAChatGetMemberCountResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
  clear_has_channel_name();
  return channel_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAChatGetMemberCountResponse::set_allocated_channel_name(::std::string* channel_name) {
  if (channel_name != NULL) {
    set_has_channel_name();
  } else {
    clear_has_channel_name();
  }
  channel_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), channel_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name)
}

// optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
bool CMsgDOTAChatGetMemberCountResponse::has_channel_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatGetMemberCountResponse::set_has_channel_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_has_channel_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_channel_type() {
  channel_type_ = 0;
  clear_has_channel_type();
}
::proto::dota::DOTAChatChannelType_t CMsgDOTAChatGetMemberCountResponse::channel_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_type)
  return static_cast< ::proto::dota::DOTAChatChannelType_t >(channel_type_);
}
void CMsgDOTAChatGetMemberCountResponse::set_channel_type(::proto::dota::DOTAChatChannelType_t value) {
  assert(::proto::dota::DOTAChatChannelType_t_IsValid(value));
  set_has_channel_type();
  channel_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_type)
}

// optional uint32 member_count = 3;
bool CMsgDOTAChatGetMemberCountResponse::has_member_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatGetMemberCountResponse::set_has_member_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatGetMemberCountResponse::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
::google::protobuf::uint32 CMsgDOTAChatGetMemberCountResponse::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatGetMemberCountResponse.member_count)
  return member_count_;
}
void CMsgDOTAChatGetMemberCountResponse::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatGetMemberCountResponse.member_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatRegionsEnabled_Region::kMinLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMinLongitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}
CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_latitude_, &from.min_latitude_,
    reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_) + sizeof(max_longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}

void CMsgDOTAChatRegionsEnabled_Region::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_latitude_, 0, reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_) + sizeof(max_longitude_));
}

CMsgDOTAChatRegionsEnabled_Region::~CMsgDOTAChatRegionsEnabled_Region() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled_Region::SharedDtor() {
}

void CMsgDOTAChatRegionsEnabled_Region::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled_Region::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled_Region::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled_Region::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatRegionsEnabled_Region* n = new CMsgDOTAChatRegionsEnabled_Region;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatRegionsEnabled_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&min_latitude_, 0, reinterpret_cast<char*>(&max_longitude_) -
      reinterpret_cast<char*>(&min_latitude_) + sizeof(max_longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatRegionsEnabled_Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_min_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_max_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_min_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_max_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return false;
#undef DO_
}

void CMsgDOTAChatRegionsEnabled_Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_latitude(), output);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_latitude(), output);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_longitude(), output);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled_Region::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_latitude(), target);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_latitude(), target);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_longitude(), target);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float min_latitude = 1;
    if (has_min_latitude()) {
      total_size += 1 + 4;
    }

    // optional float max_latitude = 2;
    if (has_max_latitude()) {
      total_size += 1 + 4;
    }

    // optional float min_longitude = 3;
    if (has_min_longitude()) {
      total_size += 1 + 4;
    }

    // optional float max_longitude = 4;
    if (has_max_longitude()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled_Region* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatRegionsEnabled_Region>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_latitude_ = from.min_latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_latitude_ = from.max_latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_longitude_ = from.min_longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_longitude_ = from.max_longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled_Region::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled_Region::Swap(CMsgDOTAChatRegionsEnabled_Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatRegionsEnabled_Region::InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other) {
  std::swap(min_latitude_, other->min_latitude_);
  std::swap(max_latitude_, other->max_latitude_);
  std::swap(min_longitude_, other->min_longitude_);
  std::swap(max_longitude_, other->max_longitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled_Region::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatRegionsEnabled_Region

// optional float min_latitude = 1;
bool CMsgDOTAChatRegionsEnabled_Region::has_min_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatRegionsEnabled_Region::set_has_min_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_has_min_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_min_latitude() {
  min_latitude_ = 0;
  clear_has_min_latitude();
}
float CMsgDOTAChatRegionsEnabled_Region::min_latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_latitude)
  return min_latitude_;
}
void CMsgDOTAChatRegionsEnabled_Region::set_min_latitude(float value) {
  set_has_min_latitude();
  min_latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_latitude)
}

// optional float max_latitude = 2;
bool CMsgDOTAChatRegionsEnabled_Region::has_max_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAChatRegionsEnabled_Region::set_has_max_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_has_max_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_max_latitude() {
  max_latitude_ = 0;
  clear_has_max_latitude();
}
float CMsgDOTAChatRegionsEnabled_Region::max_latitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_latitude)
  return max_latitude_;
}
void CMsgDOTAChatRegionsEnabled_Region::set_max_latitude(float value) {
  set_has_max_latitude();
  max_latitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_latitude)
}

// optional float min_longitude = 3;
bool CMsgDOTAChatRegionsEnabled_Region::has_min_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAChatRegionsEnabled_Region::set_has_min_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_has_min_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_min_longitude() {
  min_longitude_ = 0;
  clear_has_min_longitude();
}
float CMsgDOTAChatRegionsEnabled_Region::min_longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_longitude)
  return min_longitude_;
}
void CMsgDOTAChatRegionsEnabled_Region::set_min_longitude(float value) {
  set_has_min_longitude();
  min_longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.min_longitude)
}

// optional float max_longitude = 4;
bool CMsgDOTAChatRegionsEnabled_Region::has_max_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAChatRegionsEnabled_Region::set_has_max_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_has_max_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAChatRegionsEnabled_Region::clear_max_longitude() {
  max_longitude_ = 0;
  clear_has_max_longitude();
}
float CMsgDOTAChatRegionsEnabled_Region::max_longitude() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_longitude)
  return max_longitude_;
}
void CMsgDOTAChatRegionsEnabled_Region::set_max_longitude(float value) {
  set_has_max_longitude();
  max_longitude_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.Region.max_longitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatRegionsEnabled::kEnableAllRegionsFieldNumber;
const int CMsgDOTAChatRegionsEnabled::kEnabledRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatRegionsEnabled)
}
CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      enabled_regions_(from.enabled_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_all_regions_ = from.enable_all_regions_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatRegionsEnabled)
}

void CMsgDOTAChatRegionsEnabled::SharedCtor() {
  _cached_size_ = 0;
  enable_all_regions_ = false;
}

CMsgDOTAChatRegionsEnabled::~CMsgDOTAChatRegionsEnabled() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatRegionsEnabled)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled::SharedDtor() {
}

void CMsgDOTAChatRegionsEnabled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAChatRegionsEnabled::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAChatRegionsEnabled& CMsgDOTAChatRegionsEnabled::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAChatRegionsEnabled* CMsgDOTAChatRegionsEnabled::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAChatRegionsEnabled* n = new CMsgDOTAChatRegionsEnabled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAChatRegionsEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  enabled_regions_.Clear();
  enable_all_regions_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAChatRegionsEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_all_regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enable_all_regions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_all_regions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enabled_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatRegionsEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatRegionsEnabled)
  return false;
#undef DO_
}

void CMsgDOTAChatRegionsEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_all_regions(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned int i = 0, n = this->enabled_regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enabled_regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatRegionsEnabled)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_all_regions(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned int i = 0, n = this->enabled_regions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->enabled_regions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatRegionsEnabled)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  {
    unsigned int count = this->enabled_regions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enabled_regions(i));
    }
  }

  // optional bool enable_all_regions = 1;
  if (has_enable_all_regions()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAChatRegionsEnabled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatRegionsEnabled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatRegionsEnabled)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_regions_.MergeFrom(from.enabled_regions_);
  if (from.has_enable_all_regions()) {
    set_enable_all_regions(from.enable_all_regions());
  }
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled::Swap(CMsgDOTAChatRegionsEnabled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatRegionsEnabled::InternalSwap(CMsgDOTAChatRegionsEnabled* other) {
  enabled_regions_.InternalSwap(&other->enabled_regions_);
  std::swap(enable_all_regions_, other->enable_all_regions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fchat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAChatRegionsEnabled

// optional bool enable_all_regions = 1;
bool CMsgDOTAChatRegionsEnabled::has_enable_all_regions() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAChatRegionsEnabled::set_has_enable_all_regions() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAChatRegionsEnabled::clear_has_enable_all_regions() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAChatRegionsEnabled::clear_enable_all_regions() {
  enable_all_regions_ = false;
  clear_has_enable_all_regions();
}
bool CMsgDOTAChatRegionsEnabled::enable_all_regions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.enable_all_regions)
  return enable_all_regions_;
}
void CMsgDOTAChatRegionsEnabled::set_enable_all_regions(bool value) {
  set_has_enable_all_regions();
  enable_all_regions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAChatRegionsEnabled.enable_all_regions)
}

// repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
int CMsgDOTAChatRegionsEnabled::enabled_regions_size() const {
  return enabled_regions_.size();
}
void CMsgDOTAChatRegionsEnabled::clear_enabled_regions() {
  enabled_regions_.Clear();
}
const ::proto::dota::CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled::enabled_regions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Get(index);
}
::proto::dota::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::mutable_enabled_regions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Mutable(index);
}
::proto::dota::CMsgDOTAChatRegionsEnabled_Region* CMsgDOTAChatRegionsEnabled::add_enabled_regions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >*
CMsgDOTAChatRegionsEnabled::mutable_enabled_regions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return &enabled_regions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >&
CMsgDOTAChatRegionsEnabled::enabled_regions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAChatRegionsEnabled.enabled_regions)
  return enabled_regions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
