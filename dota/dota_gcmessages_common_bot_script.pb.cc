// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_bot_script.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common_bot_script.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgBotWorldState_VectorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_Vector> {
} _CMsgBotWorldState_Vector_default_instance_;
class CMsgBotWorldState_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_Player> {
} _CMsgBotWorldState_Player_default_instance_;
class CMsgBotWorldState_AbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_Ability> {
} _CMsgBotWorldState_Ability_default_instance_;
class CMsgBotWorldState_DroppedItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_DroppedItem> {
} _CMsgBotWorldState_DroppedItem_default_instance_;
class CMsgBotWorldState_RuneInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_RuneInfo> {
} _CMsgBotWorldState_RuneInfo_default_instance_;
class CMsgBotWorldState_TeleportInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_TeleportInfo> {
} _CMsgBotWorldState_TeleportInfo_default_instance_;
class CMsgBotWorldState_ModifierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_Modifier> {
} _CMsgBotWorldState_Modifier_default_instance_;
class CMsgBotWorldState_LinearProjectileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_LinearProjectile> {
} _CMsgBotWorldState_LinearProjectile_default_instance_;
class CMsgBotWorldState_TrackingProjectileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_TrackingProjectile> {
} _CMsgBotWorldState_TrackingProjectile_default_instance_;
class CMsgBotWorldState_AvoidanceZoneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_AvoidanceZone> {
} _CMsgBotWorldState_AvoidanceZone_default_instance_;
class CMsgBotWorldState_EventAbilityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_EventAbility> {
} _CMsgBotWorldState_EventAbility_default_instance_;
class CMsgBotWorldState_EventDamageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_EventDamage> {
} _CMsgBotWorldState_EventDamage_default_instance_;
class CMsgBotWorldState_EventCourierKilledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_EventCourierKilled> {
} _CMsgBotWorldState_EventCourierKilled_default_instance_;
class CMsgBotWorldState_EventRoshanKilledDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_EventRoshanKilled> {
} _CMsgBotWorldState_EventRoshanKilled_default_instance_;
class CMsgBotWorldState_EventTreeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_EventTree> {
} _CMsgBotWorldState_EventTree_default_instance_;
class CMsgBotWorldState_UnitDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState_Unit> {
} _CMsgBotWorldState_Unit_default_instance_;
class CMsgBotWorldStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotWorldState> {
} _CMsgBotWorldState_default_instance_;

namespace protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[17];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Vector, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Vector, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Vector, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Vector, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, is_alive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, respawn_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Player, assists_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, caster_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, cast_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, channel_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, cooldown_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_activated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_toggled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_in_ability_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_channeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_stolen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, charges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, secondary_charges_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, is_combined_locked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Ability, power_treads_stat_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  10,
  11,
  12,
  15,
  13,
  14,
  16,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_DroppedItem, location_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_RuneInfo, time_since_seen_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TeleportInfo, time_remaning_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, stack_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, ability_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, remaining_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Modifier, auxiliary_units_handles_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, caster_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, caster_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, ability_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_LinearProjectile, radius_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, caster_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, caster_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, ability_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, is_dodgeable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_TrackingProjectile, is_attack_),
  1,
  2,
  3,
  4,
  0,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, caster_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, caster_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, ability_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_AvoidanceZone, radius_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, ability_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, unit_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventAbility, is_channel_start_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, victim_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, victim_unit_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, attacker_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, attacker_unit_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventDamage, ability_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, courier_unit_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, killer_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventCourierKilled, killer_unit_handle_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, killer_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventRoshanKilled, killer_unit_handle_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, tree_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, destroyed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, respawned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_EventTree, delayed_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, unit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_alive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, bounding_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, facing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, ground_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, vision_range_daytime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, vision_range_nighttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, health_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, health_regen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, mana_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, mana_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, mana_regen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, base_movement_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, current_movement_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, anim_activity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, anim_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, base_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, base_damage_variance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, bonus_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_anim_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_acquisition_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_projectile_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, attack_target_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, bounty_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, bounty_gold_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, bounty_gold_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_channeling_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, active_ability_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_attack_immune_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_blind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_block_disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_disarmed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_dominated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_evade_disabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_hexed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_invisible_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_invulnerable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_magic_immune_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_muted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_nightmared_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_rooted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_silenced_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_specially_deniable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_stunned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_unable_to_miss_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, has_scepter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, abilities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, modifiers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, incoming_tracking_projectiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, ability_target_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, primary_attribute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_illusion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, respawn_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, buyback_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, buyback_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, spell_amplification_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, armor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, magic_resist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, evasion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, xp_needed_to_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, ability_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, reliable_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, unreliable_gold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, last_hits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, denies_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, strength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, agility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, intelligence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, remaining_lifespan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, flying_courier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, shrine_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState_Unit, is_shrine_healing_),
  2,
  3,
  0,
  4,
  5,
  1,
  32,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  36,
  37,
  38,
  33,
  39,
  34,
  35,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  56,
  57,
  58,
  77,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  78,
  80,
  79,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, dota_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, hero_pick_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, time_of_day_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, glyph_cooldown_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, glyph_cooldown_enemy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, units_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, dropped_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, rune_infos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, incoming_teleports_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, linear_projectiles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, avoidance_zones_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, ability_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, damage_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, courier_killed_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, roshan_killed_events_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotWorldState, tree_events_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgBotWorldState_Vector)},
  { 11, 23, sizeof(CMsgBotWorldState_Player)},
  { 30, 52, sizeof(CMsgBotWorldState_Ability)},
  { 69, 76, sizeof(CMsgBotWorldState_DroppedItem)},
  { 78, 87, sizeof(CMsgBotWorldState_RuneInfo)},
  { 91, 99, sizeof(CMsgBotWorldState_TeleportInfo)},
  { 102, 113, sizeof(CMsgBotWorldState_Modifier)},
  { 119, 132, sizeof(CMsgBotWorldState_LinearProjectile)},
  { 140, 153, sizeof(CMsgBotWorldState_TrackingProjectile)},
  { 161, 172, sizeof(CMsgBotWorldState_AvoidanceZone)},
  { 178, 188, sizeof(CMsgBotWorldState_EventAbility)},
  { 193, 204, sizeof(CMsgBotWorldState_EventDamage)},
  { 210, 219, sizeof(CMsgBotWorldState_EventCourierKilled)},
  { 223, 230, sizeof(CMsgBotWorldState_EventRoshanKilled)},
  { 232, 242, sizeof(CMsgBotWorldState_EventTree)},
  { 247, 337, sizeof(CMsgBotWorldState_Unit)},
  { 422, 447, sizeof(CMsgBotWorldState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_Vector_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_Ability_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_DroppedItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_RuneInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_TeleportInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_Modifier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_LinearProjectile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_TrackingProjectile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_AvoidanceZone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_EventAbility_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_EventDamage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_EventCourierKilled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_EventRoshanKilled_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_EventTree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_Unit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotWorldState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_common_bot_script.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgBotWorldState_Vector_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgBotWorldState_Player_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgBotWorldState_Ability_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgBotWorldState_DroppedItem_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgBotWorldState_RuneInfo_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgBotWorldState_TeleportInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgBotWorldState_Modifier_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgBotWorldState_LinearProjectile_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgBotWorldState_TrackingProjectile_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgBotWorldState_AvoidanceZone_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgBotWorldState_EventAbility_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgBotWorldState_EventDamage_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgBotWorldState_EventCourierKilled_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgBotWorldState_EventRoshanKilled_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgBotWorldState_EventTree_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgBotWorldState_Unit_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgBotWorldState_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgBotWorldState_Vector_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_Player_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_Ability_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_DroppedItem_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_RuneInfo_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_TeleportInfo_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_Modifier_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_LinearProjectile_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_TrackingProjectile_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_AvoidanceZone_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_EventAbility_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_EventDamage_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_EventCourierKilled_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_EventRoshanKilled_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_EventTree_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_Unit_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_default_instance_.DefaultConstruct();
  _CMsgBotWorldState_DroppedItem_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_RuneInfo_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_TeleportInfo_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_LinearProjectile_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_LinearProjectile_default_instance_.get_mutable()->velocity_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_TrackingProjectile_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_AvoidanceZone_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_EventAbility_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_EventTree_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
  _CMsgBotWorldState_Unit_default_instance_.get_mutable()->location_ = const_cast< ::proto::dota::CMsgBotWorldState_Vector*>(
      ::proto::dota::CMsgBotWorldState_Vector::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'dota_gcmessages_common_bot_script.prot"
      "o\022\nproto.dota\"\376,\n\021CMsgBotWorldState\022\017\n\007t"
      "eam_id\030\001 \001(\r\022\021\n\tgame_time\030\002 \001(\002\022\021\n\tdota_"
      "time\030\003 \001(\002\022\022\n\ngame_state\030\004 \001(\r\022\027\n\017hero_p"
      "ick_state\030\005 \001(\r\022\023\n\013time_of_day\030\006 \001(\002\022\026\n\016"
      "glyph_cooldown\030\007 \001(\002\022\034\n\024glyph_cooldown_e"
      "nemy\030\010 \001(\r\0225\n\007players\030\n \003(\0132$.proto.dota"
      ".CMsgBotWorldState.Player\0221\n\005units\030\013 \003(\013"
      "2\".proto.dota.CMsgBotWorldState.Unit\022@\n\r"
      "dropped_items\030\014 \003(\0132).proto.dota.CMsgBot"
      "WorldState.DroppedItem\022:\n\nrune_infos\030\r \003"
      "(\0132&.proto.dota.CMsgBotWorldState.RuneIn"
      "fo\022F\n\022incoming_teleports\030\016 \003(\0132*.proto.d"
      "ota.CMsgBotWorldState.TeleportInfo\022J\n\022li"
      "near_projectiles\030\017 \003(\0132..proto.dota.CMsg"
      "BotWorldState.LinearProjectile\022D\n\017avoida"
      "nce_zones\030\020 \003(\0132+.proto.dota.CMsgBotWorl"
      "dState.AvoidanceZone\022B\n\016ability_events\030\024"
      " \003(\0132*.proto.dota.CMsgBotWorldState.Even"
      "tAbility\022@\n\rdamage_events\030\025 \003(\0132).proto."
      "dota.CMsgBotWorldState.EventDamage\022O\n\025co"
      "urier_killed_events\030\026 \003(\01320.proto.dota.C"
      "MsgBotWorldState.EventCourierKilled\022M\n\024r"
      "oshan_killed_events\030\027 \003(\0132/.proto.dota.C"
      "MsgBotWorldState.EventRoshanKilled\022<\n\013tr"
      "ee_events\030\030 \003(\0132\'.proto.dota.CMsgBotWorl"
      "dState.EventTree\032)\n\006Vector\022\t\n\001x\030\001 \002(\002\022\t\n"
      "\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\032\204\001\n\006Player\022\021\n\tplayer"
      "_id\030\001 \001(\005\022\017\n\007hero_id\030\002 \001(\r\022\020\n\010is_alive\030\003"
      " \001(\010\022\024\n\014respawn_time\030\004 \001(\002\022\r\n\005kills\030\005 \001("
      "\r\022\016\n\006deaths\030\006 \001(\r\022\017\n\007assists\030\007 \001(\r\032\373\002\n\007A"
      "bility\022\016\n\006handle\030\001 \001(\r\022\022\n\nability_id\030\002 \001"
      "(\r\022\014\n\004slot\030\003 \001(\r\022\025\n\rcaster_handle\030\005 \001(\r\022"
      "\r\n\005level\030\006 \001(\r\022\022\n\ncast_range\030\n \001(\r\022\024\n\014ch"
      "annel_time\030\013 \001(\002\022\032\n\022cooldown_remaining\030\014"
      " \001(\002\022\024\n\014is_activated\030\024 \001(\010\022\022\n\nis_toggled"
      "\030\025 \001(\010\022\033\n\023is_in_ability_phase\030\026 \001(\010\022\025\n\ri"
      "s_channeling\030\027 \001(\010\022\021\n\tis_stolen\030\030 \001(\010\022\017\n"
      "\007charges\030\036 \001(\r\022\031\n\021secondary_charges\030\037 \001("
      "\r\022\032\n\022is_combined_locked\030( \001(\010\022\031\n\021power_t"
      "reads_stat\0302 \001(\r\032V\n\013DroppedItem\022\017\n\007item_"
      "id\030\001 \001(\r\0226\n\010location\030\002 \001(\0132$.proto.dota."
      "CMsgBotWorldState.Vector\032y\n\010RuneInfo\022\014\n\004"
      "type\030\001 \001(\005\0226\n\010location\030\002 \001(\0132$.proto.dot"
      "a.CMsgBotWorldState.Vector\022\016\n\006status\030\003 \001"
      "(\r\022\027\n\017time_since_seen\030\004 \001(\002\032p\n\014TeleportI"
      "nfo\022\021\n\tplayer_id\030\001 \001(\005\0226\n\010location\030\002 \001(\013"
      "2$.proto.dota.CMsgBotWorldState.Vector\022\025"
      "\n\rtime_remaning\030\003 \001(\002\032\226\001\n\010Modifier\022\014\n\004na"
      "me\030\001 \001(\t\022\023\n\013stack_count\030\002 \001(\r\022\026\n\016ability"
      "_handle\030\003 \001(\r\022\022\n\nability_id\030\004 \001(\r\022\032\n\022rem"
      "aining_duration\030\005 \001(\002\022\037\n\027auxiliary_units"
      "_handles\030\006 \003(\r\032\377\001\n\020LinearProjectile\022\016\n\006h"
      "andle\030\001 \001(\r\022\025\n\rcaster_handle\030\002 \001(\r\022\030\n\020ca"
      "ster_player_id\030\003 \001(\005\022\026\n\016ability_handle\030\004"
      " \001(\r\022\022\n\nability_id\030\005 \001(\r\0226\n\010location\030\006 \001"
      "(\0132$.proto.dota.CMsgBotWorldState.Vector"
      "\0226\n\010velocity\030\007 \001(\0132$.proto.dota.CMsgBotW"
      "orldState.Vector\022\016\n\006radius\030\010 \001(\r\032\344\001\n\022Tra"
      "ckingProjectile\022\025\n\rcaster_handle\030\001 \001(\r\022\030"
      "\n\020caster_player_id\030\002 \001(\005\022\026\n\016ability_hand"
      "le\030\003 \001(\r\022\022\n\nability_id\030\004 \001(\r\0226\n\010location"
      "\030\005 \001(\0132$.proto.dota.CMsgBotWorldState.Ve"
      "ctor\022\020\n\010velocity\030\006 \001(\r\022\024\n\014is_dodgeable\030\007"
      " \001(\010\022\021\n\tis_attack\030\010 \001(\010\032\264\001\n\rAvoidanceZon"
      "e\0226\n\010location\030\001 \001(\0132$.proto.dota.CMsgBot"
      "WorldState.Vector\022\025\n\rcaster_handle\030\002 \001(\r"
      "\022\030\n\020caster_player_id\030\003 \001(\005\022\026\n\016ability_ha"
      "ndle\030\004 \001(\r\022\022\n\nability_id\030\005 \001(\r\022\016\n\006radius"
      "\030\006 \001(\r\032\234\001\n\014EventAbility\022\022\n\nability_id\030\001 "
      "\001(\r\022\021\n\tplayer_id\030\002 \001(\005\022\023\n\013unit_handle\030\003 "
      "\001(\r\0226\n\010location\030\004 \001(\0132$.proto.dota.CMsgB"
      "otWorldState.Vector\022\030\n\020is_channel_start\030"
      "\005 \001(\010\032\241\001\n\013EventDamage\022\016\n\006damage\030\001 \001(\r\022\030\n"
      "\020victim_player_id\030\002 \001(\005\022\032\n\022victim_unit_h"
      "andle\030\003 \001(\r\022\032\n\022attacker_player_id\030\004 \001(\005\022"
      "\034\n\024attacker_unit_handle\030\005 \001(\r\022\022\n\nability"
      "_id\030\006 \001(\r\032x\n\022EventCourierKilled\022\017\n\007team_"
      "id\030\001 \001(\r\022\033\n\023courier_unit_handle\030\002 \001(\r\022\030\n"
      "\020killer_player_id\030\003 \001(\005\022\032\n\022killer_unit_h"
      "andle\030\004 \001(\r\032I\n\021EventRoshanKilled\022\030\n\020kill"
      "er_player_id\030\001 \001(\005\022\032\n\022killer_unit_handle"
      "\030\002 \001(\r\032\213\001\n\tEventTree\022\017\n\007tree_id\030\001 \001(\r\022\021\n"
      "\tdestroyed\030\002 \001(\010\022\021\n\trespawned\030\003 \001(\010\0226\n\010l"
      "ocation\030\004 \001(\0132$.proto.dota.CMsgBotWorldS"
      "tate.Vector\022\017\n\007delayed\030\005 \001(\010\032\231\021\n\004Unit\022\016\n"
      "\006handle\030\001 \001(\r\022B\n\tunit_type\030\002 \001(\0162&.proto"
      ".dota.CMsgBotWorldState.UnitType:\007INVALI"
      "D\022\014\n\004name\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\r\022\r\n\005leve"
      "l\030\005 \001(\r\0226\n\010location\030\006 \001(\0132$.proto.dota.C"
      "MsgBotWorldState.Vector\022\020\n\010is_alive\030\007 \001("
      "\010\022\021\n\tplayer_id\030\010 \001(\005\022\027\n\017bounding_radius\030"
      "\n \001(\r\022\016\n\006facing\030\013 \001(\r\022\025\n\rground_height\030\014"
      " \001(\r\022\034\n\024vision_range_daytime\030\017 \001(\r\022\036\n\026vi"
      "sion_range_nighttime\030\020 \001(\r\022\016\n\006health\030\024 \001"
      "(\r\022\022\n\nhealth_max\030\025 \001(\r\022\024\n\014health_regen\030\026"
      " \001(\002\022\014\n\004mana\030\031 \001(\r\022\020\n\010mana_max\030\032 \001(\r\022\022\n\n"
      "mana_regen\030\033 \001(\002\022\033\n\023base_movement_speed\030"
      "\036 \001(\r\022\036\n\026current_movement_speed\030\037 \001(\r\022\025\n"
      "\ranim_activity\030# \001(\005\022\022\n\nanim_cycle\030$ \001(\002"
      "\022\023\n\013base_damage\030( \001(\r\022\034\n\024base_damage_var"
      "iance\030) \001(\r\022\024\n\014bonus_damage\030* \001(\r\022\025\n\ratt"
      "ack_damage\030+ \001(\r\022\024\n\014attack_range\030, \001(\r\022\024"
      "\n\014attack_speed\030- \001(\002\022\031\n\021attack_anim_poin"
      "t\030. \001(\002\022 \n\030attack_acquisition_range\030/ \001("
      "\r\022\037\n\027attack_projectile_speed\0300 \001(\r\022\034\n\024at"
      "tack_target_handle\0301 \001(\r\022\021\n\tbounty_xp\030< "
      "\001(\r\022\027\n\017bounty_gold_min\030= \001(\r\022\027\n\017bounty_g"
      "old_max\030> \001(\r\022\025\n\ris_channeling\030A \001(\010\022\035\n\025"
      "active_ability_handle\030B \001(\r\022\030\n\020is_attack"
      "_immune\030F \001(\010\022\020\n\010is_blind\030G \001(\010\022\031\n\021is_bl"
      "ock_disabled\030H \001(\010\022\023\n\013is_disarmed\030I \001(\010\022"
      "\024\n\014is_dominated\030J \001(\010\022\031\n\021is_evade_disabl"
      "ed\030K \001(\010\022\020\n\010is_hexed\030L \001(\010\022\024\n\014is_invisib"
      "le\030M \001(\010\022\027\n\017is_invulnerable\030N \001(\010\022\027\n\017is_"
      "magic_immune\030O \001(\010\022\020\n\010is_muted\030P \001(\010\022\025\n\r"
      "is_nightmared\030R \001(\010\022\021\n\tis_rooted\030S \001(\010\022\023"
      "\n\013is_silenced\030T \001(\010\022\035\n\025is_specially_deni"
      "able\030U \001(\010\022\022\n\nis_stunned\030V \001(\010\022\031\n\021is_una"
      "ble_to_miss\030W \001(\010\022\023\n\013has_scepter\030X \001(\010\0228"
      "\n\tabilities\030Z \003(\0132%.proto.dota.CMsgBotWo"
      "rldState.Ability\0224\n\005items\030[ \003(\0132%.proto."
      "dota.CMsgBotWorldState.Ability\0229\n\tmodifi"
      "ers\030\\ \003(\0132&.proto.dota.CMsgBotWorldState"
      ".Modifier\022W\n\035incoming_tracking_projectil"
      "es\030] \003(\01320.proto.dota.CMsgBotWorldState."
      "TrackingProjectile\022\023\n\013action_type\030d \001(\r\022"
      "\035\n\025ability_target_handle\030e \001(\r\022\031\n\021primar"
      "y_attribute\030n \001(\r\022\023\n\013is_illusion\030o \001(\010\022\024"
      "\n\014respawn_time\030p \001(\r\022\024\n\014buyback_cost\030q \001"
      "(\r\022\030\n\020buyback_cooldown\030r \001(\002\022\033\n\023spell_am"
      "plification\030s \001(\002\022\r\n\005armor\030t \001(\002\022\024\n\014magi"
      "c_resist\030u \001(\002\022\017\n\007evasion\030v \001(\002\022\032\n\022xp_ne"
      "eded_to_level\030x \001(\r\022\026\n\016ability_points\030y "
      "\001(\r\022\025\n\rreliable_gold\030z \001(\r\022\027\n\017unreliable"
      "_gold\030{ \001(\r\022\021\n\tlast_hits\030| \001(\r\022\016\n\006denies"
      "\030} \001(\r\022\021\n\tnet_worth\030~ \001(\r\022\020\n\010strength\030\177 "
      "\001(\r\022\020\n\007agility\030\200\001 \001(\r\022\025\n\014intelligence\030\201\001"
      " \001(\r\022\033\n\022remaining_lifespan\030\202\001 \001(\002\022\027\n\016fly"
      "ing_courier\030\214\001 \001(\010\022\030\n\017shrine_cooldown\030\226\001"
      " \001(\002\022\032\n\021is_shrine_healing\030\227\001 \001(\010\"\263\001\n\010Uni"
      "tType\022\013\n\007INVALID\020\000\022\010\n\004HERO\020\001\022\016\n\nCREEP_HE"
      "RO\020\002\022\016\n\nLANE_CREEP\020\003\022\020\n\014JUNGLE_CREEP\020\004\022\n"
      "\n\006ROSHAN\020\005\022\t\n\005TOWER\020\006\022\014\n\010BARRACKS\020\007\022\n\n\006S"
      "HRINE\020\010\022\010\n\004FORT\020\t\022\014\n\010BUILDING\020\n\022\013\n\007COURI"
      "ER\020\013\022\010\n\004WARD\020\014B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5821);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common_bot_script.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto

const ::google::protobuf::EnumDescriptor* CMsgBotWorldState_UnitType_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_enum_descriptors[0];
}
bool CMsgBotWorldState_UnitType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgBotWorldState_UnitType CMsgBotWorldState::INVALID;
const CMsgBotWorldState_UnitType CMsgBotWorldState::HERO;
const CMsgBotWorldState_UnitType CMsgBotWorldState::CREEP_HERO;
const CMsgBotWorldState_UnitType CMsgBotWorldState::LANE_CREEP;
const CMsgBotWorldState_UnitType CMsgBotWorldState::JUNGLE_CREEP;
const CMsgBotWorldState_UnitType CMsgBotWorldState::ROSHAN;
const CMsgBotWorldState_UnitType CMsgBotWorldState::TOWER;
const CMsgBotWorldState_UnitType CMsgBotWorldState::BARRACKS;
const CMsgBotWorldState_UnitType CMsgBotWorldState::SHRINE;
const CMsgBotWorldState_UnitType CMsgBotWorldState::FORT;
const CMsgBotWorldState_UnitType CMsgBotWorldState::BUILDING;
const CMsgBotWorldState_UnitType CMsgBotWorldState::COURIER;
const CMsgBotWorldState_UnitType CMsgBotWorldState::WARD;
const CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MIN;
const CMsgBotWorldState_UnitType CMsgBotWorldState::UnitType_MAX;
const int CMsgBotWorldState::UnitType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_Vector::kXFieldNumber;
const int CMsgBotWorldState_Vector::kYFieldNumber;
const int CMsgBotWorldState_Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_Vector::CMsgBotWorldState_Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.Vector)
}
CMsgBotWorldState_Vector::CMsgBotWorldState_Vector(const CMsgBotWorldState_Vector& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.Vector)
}

void CMsgBotWorldState_Vector::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

CMsgBotWorldState_Vector::~CMsgBotWorldState_Vector() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.Vector)
  SharedDtor();
}

void CMsgBotWorldState_Vector::SharedDtor() {
}

void CMsgBotWorldState_Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_Vector::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_Vector& CMsgBotWorldState_Vector::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_Vector* CMsgBotWorldState_Vector::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_Vector* n = new CMsgBotWorldState_Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.Vector)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.Vector)
  return false;
#undef DO_
}

void CMsgBotWorldState_Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.Vector)
}

::google::protobuf::uint8* CMsgBotWorldState_Vector::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.Vector)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.Vector)
  return target;
}

size_t CMsgBotWorldState_Vector::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CMsgBotWorldState.Vector)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t CMsgBotWorldState_Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.Vector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_Vector::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Vector* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_Vector>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.Vector)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.Vector)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Vector::MergeFrom(const CMsgBotWorldState_Vector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.Vector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Vector::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Vector::CopyFrom(const CMsgBotWorldState_Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CMsgBotWorldState_Vector::Swap(CMsgBotWorldState_Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_Vector::InternalSwap(CMsgBotWorldState_Vector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_Vector::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Vector

// required float x = 1;
bool CMsgBotWorldState_Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
float CMsgBotWorldState_Vector::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.x)
  return x_;
}
void CMsgBotWorldState_Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.x)
}

// required float y = 2;
bool CMsgBotWorldState_Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
float CMsgBotWorldState_Vector::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.y)
  return y_;
}
void CMsgBotWorldState_Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.y)
}

// required float z = 3;
bool CMsgBotWorldState_Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
float CMsgBotWorldState_Vector::z() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Vector.z)
  return z_;
}
void CMsgBotWorldState_Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Vector.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_Player::kPlayerIdFieldNumber;
const int CMsgBotWorldState_Player::kHeroIdFieldNumber;
const int CMsgBotWorldState_Player::kIsAliveFieldNumber;
const int CMsgBotWorldState_Player::kRespawnTimeFieldNumber;
const int CMsgBotWorldState_Player::kKillsFieldNumber;
const int CMsgBotWorldState_Player::kDeathsFieldNumber;
const int CMsgBotWorldState_Player::kAssistsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_Player::CMsgBotWorldState_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.Player)
}
CMsgBotWorldState_Player::CMsgBotWorldState_Player(const CMsgBotWorldState_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(assists_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.Player)
}

void CMsgBotWorldState_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&player_id_, 0, reinterpret_cast<char*>(&assists_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(assists_));
}

CMsgBotWorldState_Player::~CMsgBotWorldState_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.Player)
  SharedDtor();
}

void CMsgBotWorldState_Player::SharedDtor() {
}

void CMsgBotWorldState_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_Player& CMsgBotWorldState_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_Player* CMsgBotWorldState_Player::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_Player* n = new CMsgBotWorldState_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.Player)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&assists_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(assists_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_alive = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_alive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float respawn_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_respawn_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &respawn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.Player)
  return false;
#undef DO_
}

void CMsgBotWorldState_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional bool is_alive = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_alive(), output);
  }

  // optional float respawn_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->respawn_time(), output);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kills(), output);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deaths(), output);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->assists(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.Player)
}

::google::protobuf::uint8* CMsgBotWorldState_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional bool is_alive = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_alive(), target);
  }

  // optional float respawn_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->respawn_time(), target);
  }

  // optional uint32 kills = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kills(), target);
  }

  // optional uint32 deaths = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deaths(), target);
  }

  // optional uint32 assists = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->assists(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.Player)
  return target;
}

size_t CMsgBotWorldState_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional bool is_alive = 3;
    if (has_is_alive()) {
      total_size += 1 + 1;
    }

    // optional float respawn_time = 4;
    if (has_respawn_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 6;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 7;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.Player)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Player::MergeFrom(const CMsgBotWorldState_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_alive_ = from.is_alive_;
    }
    if (cached_has_bits & 0x00000008u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000020u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000040u) {
      assists_ = from.assists_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Player::CopyFrom(const CMsgBotWorldState_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Player::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Player::Swap(CMsgBotWorldState_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_Player::InternalSwap(CMsgBotWorldState_Player* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(is_alive_, other->is_alive_);
  std::swap(respawn_time_, other->respawn_time_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Player

// optional int32 player_id = 1;
bool CMsgBotWorldState_Player::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Player::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_Player::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_Player::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_Player::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.player_id)
  return player_id_;
}
void CMsgBotWorldState_Player::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.player_id)
}

// optional uint32 hero_id = 2;
bool CMsgBotWorldState_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgBotWorldState_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.hero_id)
  return hero_id_;
}
void CMsgBotWorldState_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.hero_id)
}

// optional bool is_alive = 3;
bool CMsgBotWorldState_Player::has_is_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Player::set_has_is_alive() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_Player::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_Player::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
bool CMsgBotWorldState_Player::is_alive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.is_alive)
  return is_alive_;
}
void CMsgBotWorldState_Player::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.is_alive)
}

// optional float respawn_time = 4;
bool CMsgBotWorldState_Player::has_respawn_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Player::set_has_respawn_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_Player::clear_has_respawn_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_Player::clear_respawn_time() {
  respawn_time_ = 0;
  clear_has_respawn_time();
}
float CMsgBotWorldState_Player::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.respawn_time)
  return respawn_time_;
}
void CMsgBotWorldState_Player::set_respawn_time(float value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.respawn_time)
}

// optional uint32 kills = 5;
bool CMsgBotWorldState_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgBotWorldState_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.kills)
  return kills_;
}
void CMsgBotWorldState_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.kills)
}

// optional uint32 deaths = 6;
bool CMsgBotWorldState_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgBotWorldState_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.deaths)
  return deaths_;
}
void CMsgBotWorldState_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.deaths)
}

// optional uint32 assists = 7;
bool CMsgBotWorldState_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgBotWorldState_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Player.assists)
  return assists_;
}
void CMsgBotWorldState_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Player.assists)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_Ability::kHandleFieldNumber;
const int CMsgBotWorldState_Ability::kAbilityIdFieldNumber;
const int CMsgBotWorldState_Ability::kSlotFieldNumber;
const int CMsgBotWorldState_Ability::kCasterHandleFieldNumber;
const int CMsgBotWorldState_Ability::kLevelFieldNumber;
const int CMsgBotWorldState_Ability::kCastRangeFieldNumber;
const int CMsgBotWorldState_Ability::kChannelTimeFieldNumber;
const int CMsgBotWorldState_Ability::kCooldownRemainingFieldNumber;
const int CMsgBotWorldState_Ability::kIsActivatedFieldNumber;
const int CMsgBotWorldState_Ability::kIsToggledFieldNumber;
const int CMsgBotWorldState_Ability::kIsInAbilityPhaseFieldNumber;
const int CMsgBotWorldState_Ability::kIsChannelingFieldNumber;
const int CMsgBotWorldState_Ability::kIsStolenFieldNumber;
const int CMsgBotWorldState_Ability::kChargesFieldNumber;
const int CMsgBotWorldState_Ability::kSecondaryChargesFieldNumber;
const int CMsgBotWorldState_Ability::kIsCombinedLockedFieldNumber;
const int CMsgBotWorldState_Ability::kPowerTreadsStatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_Ability::CMsgBotWorldState_Ability()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.Ability)
}
CMsgBotWorldState_Ability::CMsgBotWorldState_Ability(const CMsgBotWorldState_Ability& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&handle_, &from.handle_,
    reinterpret_cast<char*>(&is_combined_locked_) -
    reinterpret_cast<char*>(&handle_) + sizeof(is_combined_locked_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.Ability)
}

void CMsgBotWorldState_Ability::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&handle_, 0, reinterpret_cast<char*>(&is_combined_locked_) -
    reinterpret_cast<char*>(&handle_) + sizeof(is_combined_locked_));
}

CMsgBotWorldState_Ability::~CMsgBotWorldState_Ability() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.Ability)
  SharedDtor();
}

void CMsgBotWorldState_Ability::SharedDtor() {
}

void CMsgBotWorldState_Ability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_Ability::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_Ability& CMsgBotWorldState_Ability::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_Ability* CMsgBotWorldState_Ability::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_Ability* n = new CMsgBotWorldState_Ability;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_Ability::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.Ability)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&handle_, 0, reinterpret_cast<char*>(&cooldown_remaining_) -
      reinterpret_cast<char*>(&handle_) + sizeof(cooldown_remaining_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&power_treads_stat_, 0, reinterpret_cast<char*>(&is_stolen_) -
      reinterpret_cast<char*>(&power_treads_stat_) + sizeof(is_stolen_));
  }
  is_combined_locked_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_Ability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.Ability)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 caster_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_caster_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caster_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cast_range = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cast_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cast_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float channel_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_channel_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cooldown_remaining = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_cooldown_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_activated = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_is_activated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_activated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_toggled = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_is_toggled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_toggled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_in_ability_phase = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_is_in_ability_phase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_in_ability_phase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_channeling = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_is_channeling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_channeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stolen = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_is_stolen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stolen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 charges = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_charges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 secondary_charges = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_secondary_charges();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &secondary_charges_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_combined_locked = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_is_combined_locked();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_combined_locked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 power_treads_stat = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_power_treads_stat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_treads_stat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.Ability)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.Ability)
  return false;
#undef DO_
}

void CMsgBotWorldState_Ability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.Ability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ability_id(), output);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slot(), output);
  }

  // optional uint32 caster_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->caster_handle(), output);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 cast_range = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cast_range(), output);
  }

  // optional float channel_time = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->channel_time(), output);
  }

  // optional float cooldown_remaining = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->cooldown_remaining(), output);
  }

  // optional bool is_activated = 20;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_activated(), output);
  }

  // optional bool is_toggled = 21;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_toggled(), output);
  }

  // optional bool is_in_ability_phase = 22;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->is_in_ability_phase(), output);
  }

  // optional bool is_channeling = 23;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_channeling(), output);
  }

  // optional bool is_stolen = 24;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_stolen(), output);
  }

  // optional uint32 charges = 30;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->charges(), output);
  }

  // optional uint32 secondary_charges = 31;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->secondary_charges(), output);
  }

  // optional bool is_combined_locked = 40;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->is_combined_locked(), output);
  }

  // optional uint32 power_treads_stat = 50;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->power_treads_stat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.Ability)
}

::google::protobuf::uint8* CMsgBotWorldState_Ability::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.Ability)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  // optional uint32 ability_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ability_id(), target);
  }

  // optional uint32 slot = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slot(), target);
  }

  // optional uint32 caster_handle = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->caster_handle(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 cast_range = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cast_range(), target);
  }

  // optional float channel_time = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->channel_time(), target);
  }

  // optional float cooldown_remaining = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->cooldown_remaining(), target);
  }

  // optional bool is_activated = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_activated(), target);
  }

  // optional bool is_toggled = 21;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_toggled(), target);
  }

  // optional bool is_in_ability_phase = 22;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->is_in_ability_phase(), target);
  }

  // optional bool is_channeling = 23;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_channeling(), target);
  }

  // optional bool is_stolen = 24;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_stolen(), target);
  }

  // optional uint32 charges = 30;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->charges(), target);
  }

  // optional uint32 secondary_charges = 31;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->secondary_charges(), target);
  }

  // optional bool is_combined_locked = 40;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->is_combined_locked(), target);
  }

  // optional uint32 power_treads_stat = 50;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->power_treads_stat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.Ability)
  return target;
}

size_t CMsgBotWorldState_Ability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.Ability)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional uint32 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 caster_handle = 5;
    if (has_caster_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caster_handle());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 cast_range = 10;
    if (has_cast_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cast_range());
    }

    // optional float channel_time = 11;
    if (has_channel_time()) {
      total_size += 1 + 4;
    }

    // optional float cooldown_remaining = 12;
    if (has_cooldown_remaining()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 power_treads_stat = 50;
    if (has_power_treads_stat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power_treads_stat());
    }

    // optional bool is_activated = 20;
    if (has_is_activated()) {
      total_size += 2 + 1;
    }

    // optional bool is_toggled = 21;
    if (has_is_toggled()) {
      total_size += 2 + 1;
    }

    // optional bool is_in_ability_phase = 22;
    if (has_is_in_ability_phase()) {
      total_size += 2 + 1;
    }

    // optional bool is_channeling = 23;
    if (has_is_channeling()) {
      total_size += 2 + 1;
    }

    // optional uint32 charges = 30;
    if (has_charges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charges());
    }

    // optional uint32 secondary_charges = 31;
    if (has_secondary_charges()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->secondary_charges());
    }

    // optional bool is_stolen = 24;
    if (has_is_stolen()) {
      total_size += 2 + 1;
    }

  }
  // optional bool is_combined_locked = 40;
  if (has_is_combined_locked()) {
    total_size += 2 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_Ability::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Ability* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_Ability>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.Ability)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.Ability)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Ability::MergeFrom(const CMsgBotWorldState_Ability& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.Ability)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000020u) {
      cast_range_ = from.cast_range_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_time_ = from.channel_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      cooldown_remaining_ = from.cooldown_remaining_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      power_treads_stat_ = from.power_treads_stat_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_activated_ = from.is_activated_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_toggled_ = from.is_toggled_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_in_ability_phase_ = from.is_in_ability_phase_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_channeling_ = from.is_channeling_;
    }
    if (cached_has_bits & 0x00002000u) {
      charges_ = from.charges_;
    }
    if (cached_has_bits & 0x00004000u) {
      secondary_charges_ = from.secondary_charges_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_stolen_ = from.is_stolen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_is_combined_locked(from.is_combined_locked());
  }
}

void CMsgBotWorldState_Ability::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Ability::CopyFrom(const CMsgBotWorldState_Ability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.Ability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Ability::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Ability::Swap(CMsgBotWorldState_Ability* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_Ability::InternalSwap(CMsgBotWorldState_Ability* other) {
  std::swap(handle_, other->handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(slot_, other->slot_);
  std::swap(caster_handle_, other->caster_handle_);
  std::swap(level_, other->level_);
  std::swap(cast_range_, other->cast_range_);
  std::swap(channel_time_, other->channel_time_);
  std::swap(cooldown_remaining_, other->cooldown_remaining_);
  std::swap(power_treads_stat_, other->power_treads_stat_);
  std::swap(is_activated_, other->is_activated_);
  std::swap(is_toggled_, other->is_toggled_);
  std::swap(is_in_ability_phase_, other->is_in_ability_phase_);
  std::swap(is_channeling_, other->is_channeling_);
  std::swap(charges_, other->charges_);
  std::swap(secondary_charges_, other->secondary_charges_);
  std::swap(is_stolen_, other->is_stolen_);
  std::swap(is_combined_locked_, other->is_combined_locked_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_Ability::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Ability

// optional uint32 handle = 1;
bool CMsgBotWorldState_Ability::has_handle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Ability::set_has_handle() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_Ability::clear_has_handle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_Ability::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.handle)
  return handle_;
}
void CMsgBotWorldState_Ability::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.handle)
}

// optional uint32 ability_id = 2;
bool CMsgBotWorldState_Ability::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Ability::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_Ability::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_Ability::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_Ability::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.ability_id)
}

// optional uint32 slot = 3;
bool CMsgBotWorldState_Ability::has_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Ability::set_has_slot() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_Ability::clear_has_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_Ability::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.slot)
  return slot_;
}
void CMsgBotWorldState_Ability::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.slot)
}

// optional uint32 caster_handle = 5;
bool CMsgBotWorldState_Ability::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Ability::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_Ability::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_Ability::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.caster_handle)
  return caster_handle_;
}
void CMsgBotWorldState_Ability::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.caster_handle)
}

// optional uint32 level = 6;
bool CMsgBotWorldState_Ability::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Ability::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_Ability::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_Ability::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.level)
  return level_;
}
void CMsgBotWorldState_Ability::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.level)
}

// optional uint32 cast_range = 10;
bool CMsgBotWorldState_Ability::has_cast_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_Ability::set_has_cast_range() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_Ability::clear_has_cast_range() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_Ability::clear_cast_range() {
  cast_range_ = 0u;
  clear_has_cast_range();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::cast_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.cast_range)
  return cast_range_;
}
void CMsgBotWorldState_Ability::set_cast_range(::google::protobuf::uint32 value) {
  set_has_cast_range();
  cast_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.cast_range)
}

// optional float channel_time = 11;
bool CMsgBotWorldState_Ability::has_channel_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState_Ability::set_has_channel_time() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState_Ability::clear_has_channel_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState_Ability::clear_channel_time() {
  channel_time_ = 0;
  clear_has_channel_time();
}
float CMsgBotWorldState_Ability::channel_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.channel_time)
  return channel_time_;
}
void CMsgBotWorldState_Ability::set_channel_time(float value) {
  set_has_channel_time();
  channel_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.channel_time)
}

// optional float cooldown_remaining = 12;
bool CMsgBotWorldState_Ability::has_cooldown_remaining() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBotWorldState_Ability::set_has_cooldown_remaining() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBotWorldState_Ability::clear_has_cooldown_remaining() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBotWorldState_Ability::clear_cooldown_remaining() {
  cooldown_remaining_ = 0;
  clear_has_cooldown_remaining();
}
float CMsgBotWorldState_Ability::cooldown_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.cooldown_remaining)
  return cooldown_remaining_;
}
void CMsgBotWorldState_Ability::set_cooldown_remaining(float value) {
  set_has_cooldown_remaining();
  cooldown_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.cooldown_remaining)
}

// optional bool is_activated = 20;
bool CMsgBotWorldState_Ability::has_is_activated() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_activated() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgBotWorldState_Ability::clear_has_is_activated() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgBotWorldState_Ability::clear_is_activated() {
  is_activated_ = false;
  clear_has_is_activated();
}
bool CMsgBotWorldState_Ability::is_activated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_activated)
  return is_activated_;
}
void CMsgBotWorldState_Ability::set_is_activated(bool value) {
  set_has_is_activated();
  is_activated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_activated)
}

// optional bool is_toggled = 21;
bool CMsgBotWorldState_Ability::has_is_toggled() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_toggled() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgBotWorldState_Ability::clear_has_is_toggled() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgBotWorldState_Ability::clear_is_toggled() {
  is_toggled_ = false;
  clear_has_is_toggled();
}
bool CMsgBotWorldState_Ability::is_toggled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_toggled)
  return is_toggled_;
}
void CMsgBotWorldState_Ability::set_is_toggled(bool value) {
  set_has_is_toggled();
  is_toggled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_toggled)
}

// optional bool is_in_ability_phase = 22;
bool CMsgBotWorldState_Ability::has_is_in_ability_phase() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_in_ability_phase() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgBotWorldState_Ability::clear_has_is_in_ability_phase() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgBotWorldState_Ability::clear_is_in_ability_phase() {
  is_in_ability_phase_ = false;
  clear_has_is_in_ability_phase();
}
bool CMsgBotWorldState_Ability::is_in_ability_phase() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_in_ability_phase)
  return is_in_ability_phase_;
}
void CMsgBotWorldState_Ability::set_is_in_ability_phase(bool value) {
  set_has_is_in_ability_phase();
  is_in_ability_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_in_ability_phase)
}

// optional bool is_channeling = 23;
bool CMsgBotWorldState_Ability::has_is_channeling() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_channeling() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgBotWorldState_Ability::clear_has_is_channeling() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgBotWorldState_Ability::clear_is_channeling() {
  is_channeling_ = false;
  clear_has_is_channeling();
}
bool CMsgBotWorldState_Ability::is_channeling() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_channeling)
  return is_channeling_;
}
void CMsgBotWorldState_Ability::set_is_channeling(bool value) {
  set_has_is_channeling();
  is_channeling_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_channeling)
}

// optional bool is_stolen = 24;
bool CMsgBotWorldState_Ability::has_is_stolen() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_stolen() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgBotWorldState_Ability::clear_has_is_stolen() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgBotWorldState_Ability::clear_is_stolen() {
  is_stolen_ = false;
  clear_has_is_stolen();
}
bool CMsgBotWorldState_Ability::is_stolen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_stolen)
  return is_stolen_;
}
void CMsgBotWorldState_Ability::set_is_stolen(bool value) {
  set_has_is_stolen();
  is_stolen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_stolen)
}

// optional uint32 charges = 30;
bool CMsgBotWorldState_Ability::has_charges() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgBotWorldState_Ability::set_has_charges() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgBotWorldState_Ability::clear_has_charges() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgBotWorldState_Ability::clear_charges() {
  charges_ = 0u;
  clear_has_charges();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::charges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.charges)
  return charges_;
}
void CMsgBotWorldState_Ability::set_charges(::google::protobuf::uint32 value) {
  set_has_charges();
  charges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.charges)
}

// optional uint32 secondary_charges = 31;
bool CMsgBotWorldState_Ability::has_secondary_charges() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgBotWorldState_Ability::set_has_secondary_charges() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgBotWorldState_Ability::clear_has_secondary_charges() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgBotWorldState_Ability::clear_secondary_charges() {
  secondary_charges_ = 0u;
  clear_has_secondary_charges();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::secondary_charges() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.secondary_charges)
  return secondary_charges_;
}
void CMsgBotWorldState_Ability::set_secondary_charges(::google::protobuf::uint32 value) {
  set_has_secondary_charges();
  secondary_charges_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.secondary_charges)
}

// optional bool is_combined_locked = 40;
bool CMsgBotWorldState_Ability::has_is_combined_locked() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgBotWorldState_Ability::set_has_is_combined_locked() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgBotWorldState_Ability::clear_has_is_combined_locked() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgBotWorldState_Ability::clear_is_combined_locked() {
  is_combined_locked_ = false;
  clear_has_is_combined_locked();
}
bool CMsgBotWorldState_Ability::is_combined_locked() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.is_combined_locked)
  return is_combined_locked_;
}
void CMsgBotWorldState_Ability::set_is_combined_locked(bool value) {
  set_has_is_combined_locked();
  is_combined_locked_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.is_combined_locked)
}

// optional uint32 power_treads_stat = 50;
bool CMsgBotWorldState_Ability::has_power_treads_stat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgBotWorldState_Ability::set_has_power_treads_stat() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgBotWorldState_Ability::clear_has_power_treads_stat() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgBotWorldState_Ability::clear_power_treads_stat() {
  power_treads_stat_ = 0u;
  clear_has_power_treads_stat();
}
::google::protobuf::uint32 CMsgBotWorldState_Ability::power_treads_stat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Ability.power_treads_stat)
  return power_treads_stat_;
}
void CMsgBotWorldState_Ability::set_power_treads_stat(::google::protobuf::uint32 value) {
  set_has_power_treads_stat();
  power_treads_stat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Ability.power_treads_stat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_DroppedItem::kItemIdFieldNumber;
const int CMsgBotWorldState_DroppedItem::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.DroppedItem)
}
CMsgBotWorldState_DroppedItem::CMsgBotWorldState_DroppedItem(const CMsgBotWorldState_DroppedItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  item_id_ = from.item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.DroppedItem)
}

void CMsgBotWorldState_DroppedItem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&location_) + sizeof(item_id_));
}

CMsgBotWorldState_DroppedItem::~CMsgBotWorldState_DroppedItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.DroppedItem)
  SharedDtor();
}

void CMsgBotWorldState_DroppedItem::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_DroppedItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_DroppedItem::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_DroppedItem& CMsgBotWorldState_DroppedItem::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_DroppedItem* CMsgBotWorldState_DroppedItem::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_DroppedItem* n = new CMsgBotWorldState_DroppedItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_DroppedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.DroppedItem)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  item_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_DroppedItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.DroppedItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.DroppedItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.DroppedItem)
  return false;
#undef DO_
}

void CMsgBotWorldState_DroppedItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.DroppedItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.DroppedItem)
}

::google::protobuf::uint8* CMsgBotWorldState_DroppedItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.DroppedItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.DroppedItem)
  return target;
}

size_t CMsgBotWorldState_DroppedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.DroppedItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_DroppedItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_DroppedItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_DroppedItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.DroppedItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.DroppedItem)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_DroppedItem::MergeFrom(const CMsgBotWorldState_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.DroppedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_DroppedItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_DroppedItem::CopyFrom(const CMsgBotWorldState_DroppedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.DroppedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_DroppedItem::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_DroppedItem::Swap(CMsgBotWorldState_DroppedItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_DroppedItem::InternalSwap(CMsgBotWorldState_DroppedItem* other) {
  std::swap(location_, other->location_);
  std::swap(item_id_, other->item_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_DroppedItem::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_DroppedItem

// optional uint32 item_id = 1;
bool CMsgBotWorldState_DroppedItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_DroppedItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_DroppedItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_DroppedItem::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CMsgBotWorldState_DroppedItem::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.DroppedItem.item_id)
  return item_id_;
}
void CMsgBotWorldState_DroppedItem::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.DroppedItem.item_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
bool CMsgBotWorldState_DroppedItem::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_DroppedItem::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_DroppedItem::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_DroppedItem::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_DroppedItem::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.DroppedItem.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.DroppedItem.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_DroppedItem::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.DroppedItem.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_DroppedItem::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.DroppedItem.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_RuneInfo::kTypeFieldNumber;
const int CMsgBotWorldState_RuneInfo::kLocationFieldNumber;
const int CMsgBotWorldState_RuneInfo::kStatusFieldNumber;
const int CMsgBotWorldState_RuneInfo::kTimeSinceSeenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.RuneInfo)
}
CMsgBotWorldState_RuneInfo::CMsgBotWorldState_RuneInfo(const CMsgBotWorldState_RuneInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&time_since_seen_) -
    reinterpret_cast<char*>(&type_) + sizeof(time_since_seen_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.RuneInfo)
}

void CMsgBotWorldState_RuneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&time_since_seen_) -
    reinterpret_cast<char*>(&location_) + sizeof(time_since_seen_));
}

CMsgBotWorldState_RuneInfo::~CMsgBotWorldState_RuneInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.RuneInfo)
  SharedDtor();
}

void CMsgBotWorldState_RuneInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_RuneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_RuneInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_RuneInfo& CMsgBotWorldState_RuneInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_RuneInfo* CMsgBotWorldState_RuneInfo::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_RuneInfo* n = new CMsgBotWorldState_RuneInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_RuneInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.RuneInfo)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&time_since_seen_) -
      reinterpret_cast<char*>(&type_) + sizeof(time_since_seen_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_RuneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.RuneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_since_seen = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_time_since_seen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_since_seen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.RuneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.RuneInfo)
  return false;
#undef DO_
}

void CMsgBotWorldState_RuneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.RuneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional float time_since_seen = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->time_since_seen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.RuneInfo)
}

::google::protobuf::uint8* CMsgBotWorldState_RuneInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.RuneInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional float time_since_seen = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->time_since_seen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.RuneInfo)
  return target;
}

size_t CMsgBotWorldState_RuneInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.RuneInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional float time_since_seen = 4;
    if (has_time_since_seen()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_RuneInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.RuneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_RuneInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_RuneInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.RuneInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.RuneInfo)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_RuneInfo::MergeFrom(const CMsgBotWorldState_RuneInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.RuneInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_since_seen_ = from.time_since_seen_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_RuneInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.RuneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_RuneInfo::CopyFrom(const CMsgBotWorldState_RuneInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.RuneInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_RuneInfo::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_RuneInfo::Swap(CMsgBotWorldState_RuneInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_RuneInfo::InternalSwap(CMsgBotWorldState_RuneInfo* other) {
  std::swap(location_, other->location_);
  std::swap(type_, other->type_);
  std::swap(status_, other->status_);
  std::swap(time_since_seen_, other->time_since_seen_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_RuneInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_RuneInfo

// optional int32 type = 1;
bool CMsgBotWorldState_RuneInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_RuneInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_RuneInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_RuneInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
::google::protobuf::int32 CMsgBotWorldState_RuneInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.type)
  return type_;
}
void CMsgBotWorldState_RuneInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.type)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
bool CMsgBotWorldState_RuneInfo::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_RuneInfo::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_RuneInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_RuneInfo::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_RuneInfo::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.RuneInfo.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_RuneInfo::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.RuneInfo.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_RuneInfo::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.RuneInfo.location)
}

// optional uint32 status = 3;
bool CMsgBotWorldState_RuneInfo::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_RuneInfo::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_RuneInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_RuneInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
::google::protobuf::uint32 CMsgBotWorldState_RuneInfo::status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.status)
  return status_;
}
void CMsgBotWorldState_RuneInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.status)
}

// optional float time_since_seen = 4;
bool CMsgBotWorldState_RuneInfo::has_time_since_seen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_RuneInfo::set_has_time_since_seen() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_RuneInfo::clear_has_time_since_seen() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_RuneInfo::clear_time_since_seen() {
  time_since_seen_ = 0;
  clear_has_time_since_seen();
}
float CMsgBotWorldState_RuneInfo::time_since_seen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.RuneInfo.time_since_seen)
  return time_since_seen_;
}
void CMsgBotWorldState_RuneInfo::set_time_since_seen(float value) {
  set_has_time_since_seen();
  time_since_seen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.RuneInfo.time_since_seen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_TeleportInfo::kPlayerIdFieldNumber;
const int CMsgBotWorldState_TeleportInfo::kLocationFieldNumber;
const int CMsgBotWorldState_TeleportInfo::kTimeRemaningFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.TeleportInfo)
}
CMsgBotWorldState_TeleportInfo::CMsgBotWorldState_TeleportInfo(const CMsgBotWorldState_TeleportInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&player_id_, &from.player_id_,
    reinterpret_cast<char*>(&time_remaning_) -
    reinterpret_cast<char*>(&player_id_) + sizeof(time_remaning_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.TeleportInfo)
}

void CMsgBotWorldState_TeleportInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&time_remaning_) -
    reinterpret_cast<char*>(&location_) + sizeof(time_remaning_));
}

CMsgBotWorldState_TeleportInfo::~CMsgBotWorldState_TeleportInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.TeleportInfo)
  SharedDtor();
}

void CMsgBotWorldState_TeleportInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_TeleportInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_TeleportInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_TeleportInfo& CMsgBotWorldState_TeleportInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_TeleportInfo* CMsgBotWorldState_TeleportInfo::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_TeleportInfo* n = new CMsgBotWorldState_TeleportInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_TeleportInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&player_id_, 0, reinterpret_cast<char*>(&time_remaning_) -
      reinterpret_cast<char*>(&player_id_) + sizeof(time_remaning_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_TeleportInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_remaning = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_time_remaning();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_remaning_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.TeleportInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.TeleportInfo)
  return false;
#undef DO_
}

void CMsgBotWorldState_TeleportInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // optional float time_remaning = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time_remaning(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.TeleportInfo)
}

::google::protobuf::uint8* CMsgBotWorldState_TeleportInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, deterministic, target);
  }

  // optional float time_remaning = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time_remaning(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.TeleportInfo)
  return target;
}

size_t CMsgBotWorldState_TeleportInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional float time_remaning = 3;
    if (has_time_remaning()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_TeleportInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_TeleportInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_TeleportInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.TeleportInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.TeleportInfo)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_TeleportInfo::MergeFrom(const CMsgBotWorldState_TeleportInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_remaning_ = from.time_remaning_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_TeleportInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_TeleportInfo::CopyFrom(const CMsgBotWorldState_TeleportInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.TeleportInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TeleportInfo::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_TeleportInfo::Swap(CMsgBotWorldState_TeleportInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_TeleportInfo::InternalSwap(CMsgBotWorldState_TeleportInfo* other) {
  std::swap(location_, other->location_);
  std::swap(player_id_, other->player_id_);
  std::swap(time_remaning_, other->time_remaning_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_TeleportInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_TeleportInfo

// optional int32 player_id = 1;
bool CMsgBotWorldState_TeleportInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_TeleportInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_TeleportInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_TeleportInfo::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_TeleportInfo::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.player_id)
  return player_id_;
}
void CMsgBotWorldState_TeleportInfo::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TeleportInfo.player_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 2;
bool CMsgBotWorldState_TeleportInfo::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_TeleportInfo::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_TeleportInfo::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_TeleportInfo::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_TeleportInfo::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TeleportInfo::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.TeleportInfo.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_TeleportInfo::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.TeleportInfo.location)
}

// optional float time_remaning = 3;
bool CMsgBotWorldState_TeleportInfo::has_time_remaning() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_TeleportInfo::set_has_time_remaning() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_TeleportInfo::clear_has_time_remaning() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_TeleportInfo::clear_time_remaning() {
  time_remaning_ = 0;
  clear_has_time_remaning();
}
float CMsgBotWorldState_TeleportInfo::time_remaning() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TeleportInfo.time_remaning)
  return time_remaning_;
}
void CMsgBotWorldState_TeleportInfo::set_time_remaning(float value) {
  set_has_time_remaning();
  time_remaning_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TeleportInfo.time_remaning)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_Modifier::kNameFieldNumber;
const int CMsgBotWorldState_Modifier::kStackCountFieldNumber;
const int CMsgBotWorldState_Modifier::kAbilityHandleFieldNumber;
const int CMsgBotWorldState_Modifier::kAbilityIdFieldNumber;
const int CMsgBotWorldState_Modifier::kRemainingDurationFieldNumber;
const int CMsgBotWorldState_Modifier::kAuxiliaryUnitsHandlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.Modifier)
}
CMsgBotWorldState_Modifier::CMsgBotWorldState_Modifier(const CMsgBotWorldState_Modifier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      auxiliary_units_handles_(from.auxiliary_units_handles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&stack_count_, &from.stack_count_,
    reinterpret_cast<char*>(&remaining_duration_) -
    reinterpret_cast<char*>(&stack_count_) + sizeof(remaining_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.Modifier)
}

void CMsgBotWorldState_Modifier::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stack_count_, 0, reinterpret_cast<char*>(&remaining_duration_) -
    reinterpret_cast<char*>(&stack_count_) + sizeof(remaining_duration_));
}

CMsgBotWorldState_Modifier::~CMsgBotWorldState_Modifier() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.Modifier)
  SharedDtor();
}

void CMsgBotWorldState_Modifier::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotWorldState_Modifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_Modifier::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_Modifier& CMsgBotWorldState_Modifier::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_Modifier* CMsgBotWorldState_Modifier::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_Modifier* n = new CMsgBotWorldState_Modifier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_Modifier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.Modifier)
  auxiliary_units_handles_.Clear();
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&stack_count_, 0, reinterpret_cast<char*>(&remaining_duration_) -
      reinterpret_cast<char*>(&stack_count_) + sizeof(remaining_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_Modifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.Modifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgBotWorldState.Modifier.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 stack_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_stack_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stack_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ability_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float remaining_duration = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_remaining_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 auxiliary_units_handles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_auxiliary_units_handles())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_auxiliary_units_handles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.Modifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.Modifier)
  return false;
#undef DO_
}

void CMsgBotWorldState_Modifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.Modifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotWorldState.Modifier.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stack_count(), output);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ability_handle(), output);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ability_id(), output);
  }

  // optional float remaining_duration = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->remaining_duration(), output);
  }

  // repeated uint32 auxiliary_units_handles = 6;
  for (int i = 0, n = this->auxiliary_units_handles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->auxiliary_units_handles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.Modifier)
}

::google::protobuf::uint8* CMsgBotWorldState_Modifier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.Modifier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotWorldState.Modifier.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 stack_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stack_count(), target);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ability_handle(), target);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ability_id(), target);
  }

  // optional float remaining_duration = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->remaining_duration(), target);
  }

  // repeated uint32 auxiliary_units_handles = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->auxiliary_units_handles_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.Modifier)
  return target;
}

size_t CMsgBotWorldState_Modifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.Modifier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 auxiliary_units_handles = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->auxiliary_units_handles_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->auxiliary_units_handles_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 stack_count = 2;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stack_count());
    }

    // optional uint32 ability_handle = 3;
    if (has_ability_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_handle());
    }

    // optional uint32 ability_id = 4;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional float remaining_duration = 5;
    if (has_remaining_duration()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_Modifier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Modifier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_Modifier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.Modifier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.Modifier)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Modifier::MergeFrom(const CMsgBotWorldState_Modifier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.Modifier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auxiliary_units_handles_.MergeFrom(from.auxiliary_units_handles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      stack_count_ = from.stack_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      remaining_duration_ = from.remaining_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_Modifier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Modifier::CopyFrom(const CMsgBotWorldState_Modifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.Modifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Modifier::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_Modifier::Swap(CMsgBotWorldState_Modifier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_Modifier::InternalSwap(CMsgBotWorldState_Modifier* other) {
  auxiliary_units_handles_.InternalSwap(&other->auxiliary_units_handles_);
  name_.Swap(&other->name_);
  std::swap(stack_count_, other->stack_count_);
  std::swap(ability_handle_, other->ability_handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(remaining_duration_, other->remaining_duration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_Modifier::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Modifier

// optional string name = 1;
bool CMsgBotWorldState_Modifier::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Modifier::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_Modifier::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_Modifier::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgBotWorldState_Modifier::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.name)
  return name_.GetNoArena();
}
void CMsgBotWorldState_Modifier::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.name)
}
#if LANG_CXX11
void CMsgBotWorldState_Modifier::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgBotWorldState.Modifier.name)
}
#endif
void CMsgBotWorldState_Modifier::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgBotWorldState.Modifier.name)
}
void CMsgBotWorldState_Modifier::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgBotWorldState.Modifier.name)
}
::std::string* CMsgBotWorldState_Modifier::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Modifier.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBotWorldState_Modifier::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Modifier.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBotWorldState_Modifier::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Modifier.name)
}

// optional uint32 stack_count = 2;
bool CMsgBotWorldState_Modifier::has_stack_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Modifier::set_has_stack_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_Modifier::clear_has_stack_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_Modifier::clear_stack_count() {
  stack_count_ = 0u;
  clear_has_stack_count();
}
::google::protobuf::uint32 CMsgBotWorldState_Modifier::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.stack_count)
  return stack_count_;
}
void CMsgBotWorldState_Modifier::set_stack_count(::google::protobuf::uint32 value) {
  set_has_stack_count();
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.stack_count)
}

// optional uint32 ability_handle = 3;
bool CMsgBotWorldState_Modifier::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Modifier::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_Modifier::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_Modifier::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Modifier::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.ability_handle)
  return ability_handle_;
}
void CMsgBotWorldState_Modifier::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.ability_handle)
}

// optional uint32 ability_id = 4;
bool CMsgBotWorldState_Modifier::has_ability_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Modifier::set_has_ability_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_Modifier::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_Modifier::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_Modifier::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_Modifier::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.ability_id)
}

// optional float remaining_duration = 5;
bool CMsgBotWorldState_Modifier::has_remaining_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Modifier::set_has_remaining_duration() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_Modifier::clear_has_remaining_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_Modifier::clear_remaining_duration() {
  remaining_duration_ = 0;
  clear_has_remaining_duration();
}
float CMsgBotWorldState_Modifier::remaining_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.remaining_duration)
  return remaining_duration_;
}
void CMsgBotWorldState_Modifier::set_remaining_duration(float value) {
  set_has_remaining_duration();
  remaining_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.remaining_duration)
}

// repeated uint32 auxiliary_units_handles = 6;
int CMsgBotWorldState_Modifier::auxiliary_units_handles_size() const {
  return auxiliary_units_handles_.size();
}
void CMsgBotWorldState_Modifier::clear_auxiliary_units_handles() {
  auxiliary_units_handles_.Clear();
}
::google::protobuf::uint32 CMsgBotWorldState_Modifier::auxiliary_units_handles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return auxiliary_units_handles_.Get(index);
}
void CMsgBotWorldState_Modifier::set_auxiliary_units_handles(int index, ::google::protobuf::uint32 value) {
  auxiliary_units_handles_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
void CMsgBotWorldState_Modifier::add_auxiliary_units_handles(::google::protobuf::uint32 value) {
  auxiliary_units_handles_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgBotWorldState_Modifier::auxiliary_units_handles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return auxiliary_units_handles_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgBotWorldState_Modifier::mutable_auxiliary_units_handles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Modifier.auxiliary_units_handles)
  return &auxiliary_units_handles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_LinearProjectile::kHandleFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kCasterHandleFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kCasterPlayerIdFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kAbilityHandleFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kAbilityIdFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kLocationFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kVelocityFieldNumber;
const int CMsgBotWorldState_LinearProjectile::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.LinearProjectile)
}
CMsgBotWorldState_LinearProjectile::CMsgBotWorldState_LinearProjectile(const CMsgBotWorldState_LinearProjectile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&handle_, &from.handle_,
    reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&handle_) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.LinearProjectile)
}

void CMsgBotWorldState_LinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&location_) + sizeof(radius_));
}

CMsgBotWorldState_LinearProjectile::~CMsgBotWorldState_LinearProjectile() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.LinearProjectile)
  SharedDtor();
}

void CMsgBotWorldState_LinearProjectile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void CMsgBotWorldState_LinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_LinearProjectile::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_LinearProjectile& CMsgBotWorldState_LinearProjectile::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_LinearProjectile* CMsgBotWorldState_LinearProjectile::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_LinearProjectile* n = new CMsgBotWorldState_LinearProjectile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_LinearProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::proto::dota::CMsgBotWorldState_Vector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&handle_, 0, reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&handle_) + sizeof(radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_LinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 caster_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_caster_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caster_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_caster_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ability_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radius = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.LinearProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.LinearProjectile)
  return false;
#undef DO_
}

void CMsgBotWorldState_LinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->caster_handle(), output);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caster_player_id(), output);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ability_handle(), output);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ability_id(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->velocity_, output);
  }

  // optional uint32 radius = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.LinearProjectile)
}

::google::protobuf::uint8* CMsgBotWorldState_LinearProjectile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ability_handle(), target);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ability_id(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, deterministic, target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->velocity_, deterministic, target);
  }

  // optional uint32 radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.LinearProjectile)
  return target;
}

size_t CMsgBotWorldState_LinearProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional uint32 caster_handle = 2;
    if (has_caster_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caster_handle());
    }

    // optional int32 caster_player_id = 3;
    if (has_caster_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_player_id());
    }

    // optional uint32 ability_handle = 4;
    if (has_ability_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_handle());
    }

    // optional uint32 ability_id = 5;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 radius = 8;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_LinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_LinearProjectile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_LinearProjectile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.LinearProjectile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.LinearProjectile)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_LinearProjectile::MergeFrom(const CMsgBotWorldState_LinearProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_LinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_LinearProjectile::CopyFrom(const CMsgBotWorldState_LinearProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.LinearProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_LinearProjectile::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_LinearProjectile::Swap(CMsgBotWorldState_LinearProjectile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_LinearProjectile::InternalSwap(CMsgBotWorldState_LinearProjectile* other) {
  std::swap(location_, other->location_);
  std::swap(velocity_, other->velocity_);
  std::swap(handle_, other->handle_);
  std::swap(caster_handle_, other->caster_handle_);
  std::swap(caster_player_id_, other->caster_player_id_);
  std::swap(ability_handle_, other->ability_handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_LinearProjectile::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_LinearProjectile

// optional uint32 handle = 1;
bool CMsgBotWorldState_LinearProjectile::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_LinearProjectile::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.handle)
  return handle_;
}
void CMsgBotWorldState_LinearProjectile::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.handle)
}

// optional uint32 caster_handle = 2;
bool CMsgBotWorldState_LinearProjectile::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_LinearProjectile::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.caster_handle)
  return caster_handle_;
}
void CMsgBotWorldState_LinearProjectile::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.caster_handle)
}

// optional int32 caster_player_id = 3;
bool CMsgBotWorldState_LinearProjectile::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_LinearProjectile::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_LinearProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.caster_player_id)
  return caster_player_id_;
}
void CMsgBotWorldState_LinearProjectile::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.caster_player_id)
}

// optional uint32 ability_handle = 4;
bool CMsgBotWorldState_LinearProjectile::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_LinearProjectile::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.ability_handle)
  return ability_handle_;
}
void CMsgBotWorldState_LinearProjectile::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.ability_handle)
}

// optional uint32 ability_id = 5;
bool CMsgBotWorldState_LinearProjectile::has_ability_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_ability_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState_LinearProjectile::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_LinearProjectile::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.ability_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 6;
bool CMsgBotWorldState_LinearProjectile::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_LinearProjectile::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.LinearProjectile.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_LinearProjectile::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.LinearProjectile.location)
}

// optional .proto.dota.CMsgBotWorldState.Vector velocity = 7;
bool CMsgBotWorldState_LinearProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_LinearProjectile::clear_velocity() {
  if (velocity_ != NULL) velocity_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_velocity();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_LinearProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  return velocity_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_LinearProjectile::release_velocity() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
  clear_has_velocity();
  ::proto::dota::CMsgBotWorldState_Vector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CMsgBotWorldState_LinearProjectile::set_allocated_velocity(::proto::dota::CMsgBotWorldState_Vector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.LinearProjectile.velocity)
}

// optional uint32 radius = 8;
bool CMsgBotWorldState_LinearProjectile::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBotWorldState_LinearProjectile::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBotWorldState_LinearProjectile::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBotWorldState_LinearProjectile::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
::google::protobuf::uint32 CMsgBotWorldState_LinearProjectile::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.LinearProjectile.radius)
  return radius_;
}
void CMsgBotWorldState_LinearProjectile::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.LinearProjectile.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_TrackingProjectile::kCasterHandleFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kCasterPlayerIdFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kAbilityHandleFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kAbilityIdFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kLocationFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kVelocityFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kIsDodgeableFieldNumber;
const int CMsgBotWorldState_TrackingProjectile::kIsAttackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.TrackingProjectile)
}
CMsgBotWorldState_TrackingProjectile::CMsgBotWorldState_TrackingProjectile(const CMsgBotWorldState_TrackingProjectile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&caster_handle_, &from.caster_handle_,
    reinterpret_cast<char*>(&is_attack_) -
    reinterpret_cast<char*>(&caster_handle_) + sizeof(is_attack_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.TrackingProjectile)
}

void CMsgBotWorldState_TrackingProjectile::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&is_attack_) -
    reinterpret_cast<char*>(&location_) + sizeof(is_attack_));
}

CMsgBotWorldState_TrackingProjectile::~CMsgBotWorldState_TrackingProjectile() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.TrackingProjectile)
  SharedDtor();
}

void CMsgBotWorldState_TrackingProjectile::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_TrackingProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_TrackingProjectile::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_TrackingProjectile& CMsgBotWorldState_TrackingProjectile::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_TrackingProjectile::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_TrackingProjectile* n = new CMsgBotWorldState_TrackingProjectile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_TrackingProjectile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&caster_handle_, 0, reinterpret_cast<char*>(&is_attack_) -
      reinterpret_cast<char*>(&caster_handle_) + sizeof(is_attack_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_TrackingProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 caster_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_caster_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caster_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_caster_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ability_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 velocity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dodgeable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_dodgeable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dodgeable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attack = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_attack();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.TrackingProjectile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.TrackingProjectile)
  return false;
#undef DO_
}

void CMsgBotWorldState_TrackingProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 caster_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->caster_handle(), output);
  }

  // optional int32 caster_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->caster_player_id(), output);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ability_handle(), output);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ability_id(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->location_, output);
  }

  // optional uint32 velocity = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->velocity(), output);
  }

  // optional bool is_dodgeable = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_dodgeable(), output);
  }

  // optional bool is_attack = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_attack(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.TrackingProjectile)
}

::google::protobuf::uint8* CMsgBotWorldState_TrackingProjectile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 caster_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->caster_handle(), target);
  }

  // optional int32 caster_player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->caster_player_id(), target);
  }

  // optional uint32 ability_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ability_handle(), target);
  }

  // optional uint32 ability_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ability_id(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->location_, deterministic, target);
  }

  // optional uint32 velocity = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->velocity(), target);
  }

  // optional bool is_dodgeable = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_dodgeable(), target);
  }

  // optional bool is_attack = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_attack(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.TrackingProjectile)
  return target;
}

size_t CMsgBotWorldState_TrackingProjectile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 5;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 caster_handle = 1;
    if (has_caster_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caster_handle());
    }

    // optional int32 caster_player_id = 2;
    if (has_caster_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_player_id());
    }

    // optional uint32 ability_handle = 3;
    if (has_ability_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_handle());
    }

    // optional uint32 ability_id = 4;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 velocity = 6;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->velocity());
    }

    // optional bool is_dodgeable = 7;
    if (has_is_dodgeable()) {
      total_size += 1 + 1;
    }

    // optional bool is_attack = 8;
    if (has_is_attack()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_TrackingProjectile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_TrackingProjectile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_TrackingProjectile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.TrackingProjectile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.TrackingProjectile)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_TrackingProjectile::MergeFrom(const CMsgBotWorldState_TrackingProjectile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      velocity_ = from.velocity_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_dodgeable_ = from.is_dodgeable_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_attack_ = from.is_attack_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_TrackingProjectile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_TrackingProjectile::CopyFrom(const CMsgBotWorldState_TrackingProjectile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.TrackingProjectile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_TrackingProjectile::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_TrackingProjectile::Swap(CMsgBotWorldState_TrackingProjectile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_TrackingProjectile::InternalSwap(CMsgBotWorldState_TrackingProjectile* other) {
  std::swap(location_, other->location_);
  std::swap(caster_handle_, other->caster_handle_);
  std::swap(caster_player_id_, other->caster_player_id_);
  std::swap(ability_handle_, other->ability_handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(velocity_, other->velocity_);
  std::swap(is_dodgeable_, other->is_dodgeable_);
  std::swap(is_attack_, other->is_attack_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_TrackingProjectile::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_TrackingProjectile

// optional uint32 caster_handle = 1;
bool CMsgBotWorldState_TrackingProjectile::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_TrackingProjectile::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_handle)
  return caster_handle_;
}
void CMsgBotWorldState_TrackingProjectile::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_handle)
}

// optional int32 caster_player_id = 2;
bool CMsgBotWorldState_TrackingProjectile::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_TrackingProjectile::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_TrackingProjectile::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_player_id)
  return caster_player_id_;
}
void CMsgBotWorldState_TrackingProjectile::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.caster_player_id)
}

// optional uint32 ability_handle = 3;
bool CMsgBotWorldState_TrackingProjectile::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_TrackingProjectile::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_handle)
  return ability_handle_;
}
void CMsgBotWorldState_TrackingProjectile::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_handle)
}

// optional uint32 ability_id = 4;
bool CMsgBotWorldState_TrackingProjectile::has_ability_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_ability_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_TrackingProjectile::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_TrackingProjectile::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.ability_id)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 5;
bool CMsgBotWorldState_TrackingProjectile::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_TrackingProjectile::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_TrackingProjectile::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_TrackingProjectile::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_TrackingProjectile::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.TrackingProjectile.location)
}

// optional uint32 velocity = 6;
bool CMsgBotWorldState_TrackingProjectile::has_velocity() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_velocity() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_TrackingProjectile::clear_velocity() {
  velocity_ = 0u;
  clear_has_velocity();
}
::google::protobuf::uint32 CMsgBotWorldState_TrackingProjectile::velocity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.velocity)
  return velocity_;
}
void CMsgBotWorldState_TrackingProjectile::set_velocity(::google::protobuf::uint32 value) {
  set_has_velocity();
  velocity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.velocity)
}

// optional bool is_dodgeable = 7;
bool CMsgBotWorldState_TrackingProjectile::has_is_dodgeable() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_is_dodgeable() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_is_dodgeable() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState_TrackingProjectile::clear_is_dodgeable() {
  is_dodgeable_ = false;
  clear_has_is_dodgeable();
}
bool CMsgBotWorldState_TrackingProjectile::is_dodgeable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.is_dodgeable)
  return is_dodgeable_;
}
void CMsgBotWorldState_TrackingProjectile::set_is_dodgeable(bool value) {
  set_has_is_dodgeable();
  is_dodgeable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.is_dodgeable)
}

// optional bool is_attack = 8;
bool CMsgBotWorldState_TrackingProjectile::has_is_attack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBotWorldState_TrackingProjectile::set_has_is_attack() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBotWorldState_TrackingProjectile::clear_has_is_attack() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBotWorldState_TrackingProjectile::clear_is_attack() {
  is_attack_ = false;
  clear_has_is_attack();
}
bool CMsgBotWorldState_TrackingProjectile::is_attack() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.TrackingProjectile.is_attack)
  return is_attack_;
}
void CMsgBotWorldState_TrackingProjectile::set_is_attack(bool value) {
  set_has_is_attack();
  is_attack_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.TrackingProjectile.is_attack)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_AvoidanceZone::kLocationFieldNumber;
const int CMsgBotWorldState_AvoidanceZone::kCasterHandleFieldNumber;
const int CMsgBotWorldState_AvoidanceZone::kCasterPlayerIdFieldNumber;
const int CMsgBotWorldState_AvoidanceZone::kAbilityHandleFieldNumber;
const int CMsgBotWorldState_AvoidanceZone::kAbilityIdFieldNumber;
const int CMsgBotWorldState_AvoidanceZone::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.AvoidanceZone)
}
CMsgBotWorldState_AvoidanceZone::CMsgBotWorldState_AvoidanceZone(const CMsgBotWorldState_AvoidanceZone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&caster_handle_, &from.caster_handle_,
    reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&caster_handle_) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.AvoidanceZone)
}

void CMsgBotWorldState_AvoidanceZone::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&location_) + sizeof(radius_));
}

CMsgBotWorldState_AvoidanceZone::~CMsgBotWorldState_AvoidanceZone() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.AvoidanceZone)
  SharedDtor();
}

void CMsgBotWorldState_AvoidanceZone::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_AvoidanceZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_AvoidanceZone::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_AvoidanceZone& CMsgBotWorldState_AvoidanceZone::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState_AvoidanceZone::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_AvoidanceZone* n = new CMsgBotWorldState_AvoidanceZone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_AvoidanceZone::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&caster_handle_, 0, reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&caster_handle_) + sizeof(radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_AvoidanceZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgBotWorldState.Vector location = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 caster_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_caster_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &caster_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 caster_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_caster_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ability_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.AvoidanceZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.AvoidanceZone)
  return false;
#undef DO_
}

void CMsgBotWorldState_AvoidanceZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgBotWorldState.Vector location = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->location_, output);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->caster_handle(), output);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caster_player_id(), output);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ability_handle(), output);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ability_id(), output);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.AvoidanceZone)
}

::google::protobuf::uint8* CMsgBotWorldState_AvoidanceZone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgBotWorldState.Vector location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->location_, deterministic, target);
  }

  // optional uint32 caster_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->caster_handle(), target);
  }

  // optional int32 caster_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caster_player_id(), target);
  }

  // optional uint32 ability_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ability_handle(), target);
  }

  // optional uint32 ability_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ability_id(), target);
  }

  // optional uint32 radius = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.AvoidanceZone)
  return target;
}

size_t CMsgBotWorldState_AvoidanceZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 caster_handle = 2;
    if (has_caster_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->caster_handle());
    }

    // optional int32 caster_player_id = 3;
    if (has_caster_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster_player_id());
    }

    // optional uint32 ability_handle = 4;
    if (has_ability_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_handle());
    }

    // optional uint32 ability_id = 5;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional uint32 radius = 6;
    if (has_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radius());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_AvoidanceZone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_AvoidanceZone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_AvoidanceZone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.AvoidanceZone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.AvoidanceZone)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_AvoidanceZone::MergeFrom(const CMsgBotWorldState_AvoidanceZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      caster_handle_ = from.caster_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      caster_player_id_ = from.caster_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_handle_ = from.ability_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_AvoidanceZone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_AvoidanceZone::CopyFrom(const CMsgBotWorldState_AvoidanceZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.AvoidanceZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_AvoidanceZone::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_AvoidanceZone::Swap(CMsgBotWorldState_AvoidanceZone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_AvoidanceZone::InternalSwap(CMsgBotWorldState_AvoidanceZone* other) {
  std::swap(location_, other->location_);
  std::swap(caster_handle_, other->caster_handle_);
  std::swap(caster_player_id_, other->caster_player_id_);
  std::swap(ability_handle_, other->ability_handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_AvoidanceZone::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_AvoidanceZone

// optional .proto.dota.CMsgBotWorldState.Vector location = 1;
bool CMsgBotWorldState_AvoidanceZone::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_AvoidanceZone::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_AvoidanceZone::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_AvoidanceZone::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_AvoidanceZone::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.AvoidanceZone.location)
}

// optional uint32 caster_handle = 2;
bool CMsgBotWorldState_AvoidanceZone::has_caster_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_caster_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_caster_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_AvoidanceZone::clear_caster_handle() {
  caster_handle_ = 0u;
  clear_has_caster_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::caster_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_handle)
  return caster_handle_;
}
void CMsgBotWorldState_AvoidanceZone::set_caster_handle(::google::protobuf::uint32 value) {
  set_has_caster_handle();
  caster_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_handle)
}

// optional int32 caster_player_id = 3;
bool CMsgBotWorldState_AvoidanceZone::has_caster_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_caster_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_caster_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_AvoidanceZone::clear_caster_player_id() {
  caster_player_id_ = 0;
  clear_has_caster_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_AvoidanceZone::caster_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_player_id)
  return caster_player_id_;
}
void CMsgBotWorldState_AvoidanceZone::set_caster_player_id(::google::protobuf::int32 value) {
  set_has_caster_player_id();
  caster_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.caster_player_id)
}

// optional uint32 ability_handle = 4;
bool CMsgBotWorldState_AvoidanceZone::has_ability_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_ability_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_ability_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_AvoidanceZone::clear_ability_handle() {
  ability_handle_ = 0u;
  clear_has_ability_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_handle)
  return ability_handle_;
}
void CMsgBotWorldState_AvoidanceZone::set_ability_handle(::google::protobuf::uint32 value) {
  set_has_ability_handle();
  ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_handle)
}

// optional uint32 ability_id = 5;
bool CMsgBotWorldState_AvoidanceZone::has_ability_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_ability_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_AvoidanceZone::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_AvoidanceZone::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.ability_id)
}

// optional uint32 radius = 6;
bool CMsgBotWorldState_AvoidanceZone::has_radius() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_AvoidanceZone::set_has_radius() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_AvoidanceZone::clear_has_radius() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_AvoidanceZone::clear_radius() {
  radius_ = 0u;
  clear_has_radius();
}
::google::protobuf::uint32 CMsgBotWorldState_AvoidanceZone::radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.AvoidanceZone.radius)
  return radius_;
}
void CMsgBotWorldState_AvoidanceZone::set_radius(::google::protobuf::uint32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.AvoidanceZone.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_EventAbility::kAbilityIdFieldNumber;
const int CMsgBotWorldState_EventAbility::kPlayerIdFieldNumber;
const int CMsgBotWorldState_EventAbility::kUnitHandleFieldNumber;
const int CMsgBotWorldState_EventAbility::kLocationFieldNumber;
const int CMsgBotWorldState_EventAbility::kIsChannelStartFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.EventAbility)
}
CMsgBotWorldState_EventAbility::CMsgBotWorldState_EventAbility(const CMsgBotWorldState_EventAbility& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&ability_id_, &from.ability_id_,
    reinterpret_cast<char*>(&is_channel_start_) -
    reinterpret_cast<char*>(&ability_id_) + sizeof(is_channel_start_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.EventAbility)
}

void CMsgBotWorldState_EventAbility::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&is_channel_start_) -
    reinterpret_cast<char*>(&location_) + sizeof(is_channel_start_));
}

CMsgBotWorldState_EventAbility::~CMsgBotWorldState_EventAbility() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.EventAbility)
  SharedDtor();
}

void CMsgBotWorldState_EventAbility::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_EventAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_EventAbility::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_EventAbility& CMsgBotWorldState_EventAbility::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_EventAbility* CMsgBotWorldState_EventAbility::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_EventAbility* n = new CMsgBotWorldState_EventAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_EventAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.EventAbility)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&ability_id_, 0, reinterpret_cast<char*>(&is_channel_start_) -
      reinterpret_cast<char*>(&ability_id_) + sizeof(is_channel_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_EventAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.EventAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unit_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_channel_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_channel_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_channel_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.EventAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.EventAbility)
  return false;
#undef DO_
}

void CMsgBotWorldState_EventAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.EventAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->player_id(), output);
  }

  // optional uint32 unit_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unit_handle(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // optional bool is_channel_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_channel_start(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.EventAbility)
}

::google::protobuf::uint8* CMsgBotWorldState_EventAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.EventAbility)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ability_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional int32 player_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->player_id(), target);
  }

  // optional uint32 unit_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unit_handle(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // optional bool is_channel_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_channel_start(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.EventAbility)
  return target;
}

size_t CMsgBotWorldState_EventAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.EventAbility)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional int32 player_id = 2;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 unit_handle = 3;
    if (has_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_handle());
    }

    // optional bool is_channel_start = 5;
    if (has_is_channel_start()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_EventAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.EventAbility)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventAbility* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_EventAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.EventAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.EventAbility)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventAbility::MergeFrom(const CMsgBotWorldState_EventAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.EventAbility)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      ability_id_ = from.ability_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      unit_handle_ = from.unit_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_channel_start_ = from.is_channel_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.EventAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventAbility::CopyFrom(const CMsgBotWorldState_EventAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.EventAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventAbility::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_EventAbility::Swap(CMsgBotWorldState_EventAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_EventAbility::InternalSwap(CMsgBotWorldState_EventAbility* other) {
  std::swap(location_, other->location_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(player_id_, other->player_id_);
  std::swap(unit_handle_, other->unit_handle_);
  std::swap(is_channel_start_, other->is_channel_start_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_EventAbility::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_EventAbility

// optional uint32 ability_id = 1;
bool CMsgBotWorldState_EventAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_EventAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_EventAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_EventAbility::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_EventAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_EventAbility::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.ability_id)
}

// optional int32 player_id = 2;
bool CMsgBotWorldState_EventAbility::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_EventAbility::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_EventAbility::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_EventAbility::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_EventAbility::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.player_id)
  return player_id_;
}
void CMsgBotWorldState_EventAbility::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.player_id)
}

// optional uint32 unit_handle = 3;
bool CMsgBotWorldState_EventAbility::has_unit_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_EventAbility::set_has_unit_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_EventAbility::clear_has_unit_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_EventAbility::clear_unit_handle() {
  unit_handle_ = 0u;
  clear_has_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventAbility::unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.unit_handle)
  return unit_handle_;
}
void CMsgBotWorldState_EventAbility::set_unit_handle(::google::protobuf::uint32 value) {
  set_has_unit_handle();
  unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.unit_handle)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 4;
bool CMsgBotWorldState_EventAbility::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_EventAbility::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_EventAbility::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_EventAbility::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_EventAbility::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.EventAbility.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventAbility::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.EventAbility.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_EventAbility::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.EventAbility.location)
}

// optional bool is_channel_start = 5;
bool CMsgBotWorldState_EventAbility::has_is_channel_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_EventAbility::set_has_is_channel_start() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_EventAbility::clear_has_is_channel_start() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_EventAbility::clear_is_channel_start() {
  is_channel_start_ = false;
  clear_has_is_channel_start();
}
bool CMsgBotWorldState_EventAbility::is_channel_start() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventAbility.is_channel_start)
  return is_channel_start_;
}
void CMsgBotWorldState_EventAbility::set_is_channel_start(bool value) {
  set_has_is_channel_start();
  is_channel_start_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventAbility.is_channel_start)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_EventDamage::kDamageFieldNumber;
const int CMsgBotWorldState_EventDamage::kVictimPlayerIdFieldNumber;
const int CMsgBotWorldState_EventDamage::kVictimUnitHandleFieldNumber;
const int CMsgBotWorldState_EventDamage::kAttackerPlayerIdFieldNumber;
const int CMsgBotWorldState_EventDamage::kAttackerUnitHandleFieldNumber;
const int CMsgBotWorldState_EventDamage::kAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.EventDamage)
}
CMsgBotWorldState_EventDamage::CMsgBotWorldState_EventDamage(const CMsgBotWorldState_EventDamage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&damage_, &from.damage_,
    reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&damage_) + sizeof(ability_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.EventDamage)
}

void CMsgBotWorldState_EventDamage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&damage_, 0, reinterpret_cast<char*>(&ability_id_) -
    reinterpret_cast<char*>(&damage_) + sizeof(ability_id_));
}

CMsgBotWorldState_EventDamage::~CMsgBotWorldState_EventDamage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.EventDamage)
  SharedDtor();
}

void CMsgBotWorldState_EventDamage::SharedDtor() {
}

void CMsgBotWorldState_EventDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_EventDamage::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_EventDamage& CMsgBotWorldState_EventDamage::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_EventDamage* CMsgBotWorldState_EventDamage::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_EventDamage* n = new CMsgBotWorldState_EventDamage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_EventDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.EventDamage)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&damage_, 0, reinterpret_cast<char*>(&ability_id_) -
      reinterpret_cast<char*>(&damage_) + sizeof(ability_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_EventDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.EventDamage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 damage = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 victim_player_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_victim_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &victim_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 victim_unit_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_victim_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attacker_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_attacker_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attacker_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attacker_unit_handle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_attacker_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ability_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.EventDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.EventDamage)
  return false;
#undef DO_
}

void CMsgBotWorldState_EventDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.EventDamage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 damage = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->damage(), output);
  }

  // optional int32 victim_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->victim_player_id(), output);
  }

  // optional uint32 victim_unit_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->victim_unit_handle(), output);
  }

  // optional int32 attacker_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attacker_player_id(), output);
  }

  // optional uint32 attacker_unit_handle = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attacker_unit_handle(), output);
  }

  // optional uint32 ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.EventDamage)
}

::google::protobuf::uint8* CMsgBotWorldState_EventDamage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.EventDamage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 damage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->damage(), target);
  }

  // optional int32 victim_player_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->victim_player_id(), target);
  }

  // optional uint32 victim_unit_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->victim_unit_handle(), target);
  }

  // optional int32 attacker_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attacker_player_id(), target);
  }

  // optional uint32 attacker_unit_handle = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->attacker_unit_handle(), target);
  }

  // optional uint32 ability_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.EventDamage)
  return target;
}

size_t CMsgBotWorldState_EventDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.EventDamage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 damage = 1;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional int32 victim_player_id = 2;
    if (has_victim_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->victim_player_id());
    }

    // optional uint32 victim_unit_handle = 3;
    if (has_victim_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_unit_handle());
    }

    // optional int32 attacker_player_id = 4;
    if (has_attacker_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attacker_player_id());
    }

    // optional uint32 attacker_unit_handle = 5;
    if (has_attacker_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_unit_handle());
    }

    // optional uint32 ability_id = 6;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_EventDamage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.EventDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventDamage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_EventDamage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.EventDamage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.EventDamage)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventDamage::MergeFrom(const CMsgBotWorldState_EventDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.EventDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      damage_ = from.damage_;
    }
    if (cached_has_bits & 0x00000002u) {
      victim_player_id_ = from.victim_player_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      victim_unit_handle_ = from.victim_unit_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attacker_player_id_ = from.attacker_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      attacker_unit_handle_ = from.attacker_unit_handle_;
    }
    if (cached_has_bits & 0x00000020u) {
      ability_id_ = from.ability_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventDamage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.EventDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventDamage::CopyFrom(const CMsgBotWorldState_EventDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.EventDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventDamage::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventDamage::Swap(CMsgBotWorldState_EventDamage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_EventDamage::InternalSwap(CMsgBotWorldState_EventDamage* other) {
  std::swap(damage_, other->damage_);
  std::swap(victim_player_id_, other->victim_player_id_);
  std::swap(victim_unit_handle_, other->victim_unit_handle_);
  std::swap(attacker_player_id_, other->attacker_player_id_);
  std::swap(attacker_unit_handle_, other->attacker_unit_handle_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_EventDamage::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_EventDamage

// optional uint32 damage = 1;
bool CMsgBotWorldState_EventDamage::has_damage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_damage() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_EventDamage::clear_has_damage() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_EventDamage::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
::google::protobuf::uint32 CMsgBotWorldState_EventDamage::damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.damage)
  return damage_;
}
void CMsgBotWorldState_EventDamage::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.damage)
}

// optional int32 victim_player_id = 2;
bool CMsgBotWorldState_EventDamage::has_victim_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_victim_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_EventDamage::clear_has_victim_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_EventDamage::clear_victim_player_id() {
  victim_player_id_ = 0;
  clear_has_victim_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_EventDamage::victim_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.victim_player_id)
  return victim_player_id_;
}
void CMsgBotWorldState_EventDamage::set_victim_player_id(::google::protobuf::int32 value) {
  set_has_victim_player_id();
  victim_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.victim_player_id)
}

// optional uint32 victim_unit_handle = 3;
bool CMsgBotWorldState_EventDamage::has_victim_unit_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_victim_unit_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_EventDamage::clear_has_victim_unit_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_EventDamage::clear_victim_unit_handle() {
  victim_unit_handle_ = 0u;
  clear_has_victim_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventDamage::victim_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.victim_unit_handle)
  return victim_unit_handle_;
}
void CMsgBotWorldState_EventDamage::set_victim_unit_handle(::google::protobuf::uint32 value) {
  set_has_victim_unit_handle();
  victim_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.victim_unit_handle)
}

// optional int32 attacker_player_id = 4;
bool CMsgBotWorldState_EventDamage::has_attacker_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_attacker_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_EventDamage::clear_has_attacker_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_EventDamage::clear_attacker_player_id() {
  attacker_player_id_ = 0;
  clear_has_attacker_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_EventDamage::attacker_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.attacker_player_id)
  return attacker_player_id_;
}
void CMsgBotWorldState_EventDamage::set_attacker_player_id(::google::protobuf::int32 value) {
  set_has_attacker_player_id();
  attacker_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.attacker_player_id)
}

// optional uint32 attacker_unit_handle = 5;
bool CMsgBotWorldState_EventDamage::has_attacker_unit_handle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_attacker_unit_handle() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_EventDamage::clear_has_attacker_unit_handle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_EventDamage::clear_attacker_unit_handle() {
  attacker_unit_handle_ = 0u;
  clear_has_attacker_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventDamage::attacker_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.attacker_unit_handle)
  return attacker_unit_handle_;
}
void CMsgBotWorldState_EventDamage::set_attacker_unit_handle(::google::protobuf::uint32 value) {
  set_has_attacker_unit_handle();
  attacker_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.attacker_unit_handle)
}

// optional uint32 ability_id = 6;
bool CMsgBotWorldState_EventDamage::has_ability_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_EventDamage::set_has_ability_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_EventDamage::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_EventDamage::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
::google::protobuf::uint32 CMsgBotWorldState_EventDamage::ability_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventDamage.ability_id)
  return ability_id_;
}
void CMsgBotWorldState_EventDamage::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventDamage.ability_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_EventCourierKilled::kTeamIdFieldNumber;
const int CMsgBotWorldState_EventCourierKilled::kCourierUnitHandleFieldNumber;
const int CMsgBotWorldState_EventCourierKilled::kKillerPlayerIdFieldNumber;
const int CMsgBotWorldState_EventCourierKilled::kKillerUnitHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.EventCourierKilled)
}
CMsgBotWorldState_EventCourierKilled::CMsgBotWorldState_EventCourierKilled(const CMsgBotWorldState_EventCourierKilled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.EventCourierKilled)
}

void CMsgBotWorldState_EventCourierKilled::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(killer_unit_handle_));
}

CMsgBotWorldState_EventCourierKilled::~CMsgBotWorldState_EventCourierKilled() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.EventCourierKilled)
  SharedDtor();
}

void CMsgBotWorldState_EventCourierKilled::SharedDtor() {
}

void CMsgBotWorldState_EventCourierKilled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_EventCourierKilled::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_EventCourierKilled& CMsgBotWorldState_EventCourierKilled::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState_EventCourierKilled::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_EventCourierKilled* n = new CMsgBotWorldState_EventCourierKilled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_EventCourierKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&killer_unit_handle_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(killer_unit_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_EventCourierKilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 courier_unit_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_courier_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &courier_unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 killer_player_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_killer_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killer_unit_handle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_killer_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.EventCourierKilled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.EventCourierKilled)
  return false;
#undef DO_
}

void CMsgBotWorldState_EventCourierKilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional uint32 courier_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->courier_unit_handle(), output);
  }

  // optional int32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killer_player_id(), output);
  }

  // optional uint32 killer_unit_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killer_unit_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.EventCourierKilled)
}

::google::protobuf::uint8* CMsgBotWorldState_EventCourierKilled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional uint32 courier_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->courier_unit_handle(), target);
  }

  // optional int32 killer_player_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killer_unit_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.EventCourierKilled)
  return target;
}

size_t CMsgBotWorldState_EventCourierKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 courier_unit_handle = 2;
    if (has_courier_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->courier_unit_handle());
    }

    // optional int32 killer_player_id = 3;
    if (has_killer_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer_player_id());
    }

    // optional uint32 killer_unit_handle = 4;
    if (has_killer_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_unit_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_EventCourierKilled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventCourierKilled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_EventCourierKilled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.EventCourierKilled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.EventCourierKilled)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventCourierKilled::MergeFrom(const CMsgBotWorldState_EventCourierKilled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      courier_unit_handle_ = from.courier_unit_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      killer_player_id_ = from.killer_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      killer_unit_handle_ = from.killer_unit_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventCourierKilled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventCourierKilled::CopyFrom(const CMsgBotWorldState_EventCourierKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.EventCourierKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventCourierKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventCourierKilled::Swap(CMsgBotWorldState_EventCourierKilled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_EventCourierKilled::InternalSwap(CMsgBotWorldState_EventCourierKilled* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(courier_unit_handle_, other->courier_unit_handle_);
  std::swap(killer_player_id_, other->killer_player_id_);
  std::swap(killer_unit_handle_, other->killer_unit_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_EventCourierKilled::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_EventCourierKilled

// optional uint32 team_id = 1;
bool CMsgBotWorldState_EventCourierKilled::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_EventCourierKilled::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_EventCourierKilled::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_EventCourierKilled::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.team_id)
  return team_id_;
}
void CMsgBotWorldState_EventCourierKilled::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.team_id)
}

// optional uint32 courier_unit_handle = 2;
bool CMsgBotWorldState_EventCourierKilled::has_courier_unit_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_EventCourierKilled::set_has_courier_unit_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_EventCourierKilled::clear_has_courier_unit_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_EventCourierKilled::clear_courier_unit_handle() {
  courier_unit_handle_ = 0u;
  clear_has_courier_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::courier_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
  return courier_unit_handle_;
}
void CMsgBotWorldState_EventCourierKilled::set_courier_unit_handle(::google::protobuf::uint32 value) {
  set_has_courier_unit_handle();
  courier_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.courier_unit_handle)
}

// optional int32 killer_player_id = 3;
bool CMsgBotWorldState_EventCourierKilled::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_EventCourierKilled::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_EventCourierKilled::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_EventCourierKilled::clear_killer_player_id() {
  killer_player_id_ = 0;
  clear_has_killer_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_EventCourierKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_player_id)
  return killer_player_id_;
}
void CMsgBotWorldState_EventCourierKilled::set_killer_player_id(::google::protobuf::int32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 4;
bool CMsgBotWorldState_EventCourierKilled::has_killer_unit_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_EventCourierKilled::set_has_killer_unit_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_EventCourierKilled::clear_has_killer_unit_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_EventCourierKilled::clear_killer_unit_handle() {
  killer_unit_handle_ = 0u;
  clear_has_killer_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventCourierKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
  return killer_unit_handle_;
}
void CMsgBotWorldState_EventCourierKilled::set_killer_unit_handle(::google::protobuf::uint32 value) {
  set_has_killer_unit_handle();
  killer_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventCourierKilled.killer_unit_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_EventRoshanKilled::kKillerPlayerIdFieldNumber;
const int CMsgBotWorldState_EventRoshanKilled::kKillerUnitHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.EventRoshanKilled)
}
CMsgBotWorldState_EventRoshanKilled::CMsgBotWorldState_EventRoshanKilled(const CMsgBotWorldState_EventRoshanKilled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killer_player_id_, &from.killer_player_id_,
    reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&killer_player_id_) + sizeof(killer_unit_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.EventRoshanKilled)
}

void CMsgBotWorldState_EventRoshanKilled::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&killer_player_id_, 0, reinterpret_cast<char*>(&killer_unit_handle_) -
    reinterpret_cast<char*>(&killer_player_id_) + sizeof(killer_unit_handle_));
}

CMsgBotWorldState_EventRoshanKilled::~CMsgBotWorldState_EventRoshanKilled() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  SharedDtor();
}

void CMsgBotWorldState_EventRoshanKilled::SharedDtor() {
}

void CMsgBotWorldState_EventRoshanKilled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_EventRoshanKilled::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_EventRoshanKilled& CMsgBotWorldState_EventRoshanKilled::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState_EventRoshanKilled::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_EventRoshanKilled* n = new CMsgBotWorldState_EventRoshanKilled;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_EventRoshanKilled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&killer_player_id_, 0, reinterpret_cast<char*>(&killer_unit_handle_) -
      reinterpret_cast<char*>(&killer_player_id_) + sizeof(killer_unit_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_EventRoshanKilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 killer_player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_killer_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 killer_unit_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_killer_unit_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_unit_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  return false;
#undef DO_
}

void CMsgBotWorldState_EventRoshanKilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 killer_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killer_player_id(), output);
  }

  // optional uint32 killer_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killer_unit_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.EventRoshanKilled)
}

::google::protobuf::uint8* CMsgBotWorldState_EventRoshanKilled::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 killer_player_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killer_player_id(), target);
  }

  // optional uint32 killer_unit_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killer_unit_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  return target;
}

size_t CMsgBotWorldState_EventRoshanKilled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 killer_player_id = 1;
    if (has_killer_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer_player_id());
    }

    // optional uint32 killer_unit_handle = 2;
    if (has_killer_unit_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_unit_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_EventRoshanKilled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventRoshanKilled* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_EventRoshanKilled>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.EventRoshanKilled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.EventRoshanKilled)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventRoshanKilled::MergeFrom(const CMsgBotWorldState_EventRoshanKilled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      killer_player_id_ = from.killer_player_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      killer_unit_handle_ = from.killer_unit_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventRoshanKilled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventRoshanKilled::CopyFrom(const CMsgBotWorldState_EventRoshanKilled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.EventRoshanKilled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventRoshanKilled::IsInitialized() const {
  return true;
}

void CMsgBotWorldState_EventRoshanKilled::Swap(CMsgBotWorldState_EventRoshanKilled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_EventRoshanKilled::InternalSwap(CMsgBotWorldState_EventRoshanKilled* other) {
  std::swap(killer_player_id_, other->killer_player_id_);
  std::swap(killer_unit_handle_, other->killer_unit_handle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_EventRoshanKilled::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_EventRoshanKilled

// optional int32 killer_player_id = 1;
bool CMsgBotWorldState_EventRoshanKilled::has_killer_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_EventRoshanKilled::set_has_killer_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_EventRoshanKilled::clear_has_killer_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_EventRoshanKilled::clear_killer_player_id() {
  killer_player_id_ = 0;
  clear_has_killer_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_EventRoshanKilled::killer_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_player_id)
  return killer_player_id_;
}
void CMsgBotWorldState_EventRoshanKilled::set_killer_player_id(::google::protobuf::int32 value) {
  set_has_killer_player_id();
  killer_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_player_id)
}

// optional uint32 killer_unit_handle = 2;
bool CMsgBotWorldState_EventRoshanKilled::has_killer_unit_handle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_EventRoshanKilled::set_has_killer_unit_handle() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_EventRoshanKilled::clear_has_killer_unit_handle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_EventRoshanKilled::clear_killer_unit_handle() {
  killer_unit_handle_ = 0u;
  clear_has_killer_unit_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_EventRoshanKilled::killer_unit_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
  return killer_unit_handle_;
}
void CMsgBotWorldState_EventRoshanKilled::set_killer_unit_handle(::google::protobuf::uint32 value) {
  set_has_killer_unit_handle();
  killer_unit_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventRoshanKilled.killer_unit_handle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_EventTree::kTreeIdFieldNumber;
const int CMsgBotWorldState_EventTree::kDestroyedFieldNumber;
const int CMsgBotWorldState_EventTree::kRespawnedFieldNumber;
const int CMsgBotWorldState_EventTree::kLocationFieldNumber;
const int CMsgBotWorldState_EventTree::kDelayedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.EventTree)
}
CMsgBotWorldState_EventTree::CMsgBotWorldState_EventTree(const CMsgBotWorldState_EventTree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&tree_id_, &from.tree_id_,
    reinterpret_cast<char*>(&delayed_) -
    reinterpret_cast<char*>(&tree_id_) + sizeof(delayed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.EventTree)
}

void CMsgBotWorldState_EventTree::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&location_, 0, reinterpret_cast<char*>(&delayed_) -
    reinterpret_cast<char*>(&location_) + sizeof(delayed_));
}

CMsgBotWorldState_EventTree::~CMsgBotWorldState_EventTree() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.EventTree)
  SharedDtor();
}

void CMsgBotWorldState_EventTree::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_EventTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_EventTree::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_EventTree& CMsgBotWorldState_EventTree::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_EventTree* CMsgBotWorldState_EventTree::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_EventTree* n = new CMsgBotWorldState_EventTree;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_EventTree::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.EventTree)
  if (has_location()) {
    GOOGLE_DCHECK(location_ != NULL);
    location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&tree_id_, 0, reinterpret_cast<char*>(&delayed_) -
      reinterpret_cast<char*>(&tree_id_) + sizeof(delayed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_EventTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.EventTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tree_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tree_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tree_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool destroyed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_destroyed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroyed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool respawned = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_respawned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &respawned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool delayed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_delayed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delayed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.EventTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.EventTree)
  return false;
#undef DO_
}

void CMsgBotWorldState_EventTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.EventTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tree_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tree_id(), output);
  }

  // optional bool destroyed = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->destroyed(), output);
  }

  // optional bool respawned = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->respawned(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->location_, output);
  }

  // optional bool delayed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->delayed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.EventTree)
}

::google::protobuf::uint8* CMsgBotWorldState_EventTree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.EventTree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tree_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tree_id(), target);
  }

  // optional bool destroyed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->destroyed(), target);
  }

  // optional bool respawned = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->respawned(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->location_, deterministic, target);
  }

  // optional bool delayed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->delayed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.EventTree)
  return target;
}

size_t CMsgBotWorldState_EventTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.EventTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .proto.dota.CMsgBotWorldState.Vector location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 tree_id = 1;
    if (has_tree_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tree_id());
    }

    // optional bool destroyed = 2;
    if (has_destroyed()) {
      total_size += 1 + 1;
    }

    // optional bool respawned = 3;
    if (has_respawned()) {
      total_size += 1 + 1;
    }

    // optional bool delayed = 5;
    if (has_delayed()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_EventTree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.EventTree)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_EventTree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_EventTree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.EventTree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.EventTree)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_EventTree::MergeFrom(const CMsgBotWorldState_EventTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.EventTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      tree_id_ = from.tree_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      destroyed_ = from.destroyed_;
    }
    if (cached_has_bits & 0x00000008u) {
      respawned_ = from.respawned_;
    }
    if (cached_has_bits & 0x00000010u) {
      delayed_ = from.delayed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState_EventTree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.EventTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_EventTree::CopyFrom(const CMsgBotWorldState_EventTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.EventTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_EventTree::IsInitialized() const {
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_EventTree::Swap(CMsgBotWorldState_EventTree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_EventTree::InternalSwap(CMsgBotWorldState_EventTree* other) {
  std::swap(location_, other->location_);
  std::swap(tree_id_, other->tree_id_);
  std::swap(destroyed_, other->destroyed_);
  std::swap(respawned_, other->respawned_);
  std::swap(delayed_, other->delayed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_EventTree::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_EventTree

// optional uint32 tree_id = 1;
bool CMsgBotWorldState_EventTree::has_tree_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_EventTree::set_has_tree_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_EventTree::clear_has_tree_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_EventTree::clear_tree_id() {
  tree_id_ = 0u;
  clear_has_tree_id();
}
::google::protobuf::uint32 CMsgBotWorldState_EventTree::tree_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.tree_id)
  return tree_id_;
}
void CMsgBotWorldState_EventTree::set_tree_id(::google::protobuf::uint32 value) {
  set_has_tree_id();
  tree_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.tree_id)
}

// optional bool destroyed = 2;
bool CMsgBotWorldState_EventTree::has_destroyed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_EventTree::set_has_destroyed() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_EventTree::clear_has_destroyed() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_EventTree::clear_destroyed() {
  destroyed_ = false;
  clear_has_destroyed();
}
bool CMsgBotWorldState_EventTree::destroyed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.destroyed)
  return destroyed_;
}
void CMsgBotWorldState_EventTree::set_destroyed(bool value) {
  set_has_destroyed();
  destroyed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.destroyed)
}

// optional bool respawned = 3;
bool CMsgBotWorldState_EventTree::has_respawned() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_EventTree::set_has_respawned() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_EventTree::clear_has_respawned() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_EventTree::clear_respawned() {
  respawned_ = false;
  clear_has_respawned();
}
bool CMsgBotWorldState_EventTree::respawned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.respawned)
  return respawned_;
}
void CMsgBotWorldState_EventTree::set_respawned(bool value) {
  set_has_respawned();
  respawned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.respawned)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 4;
bool CMsgBotWorldState_EventTree::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_EventTree::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_EventTree::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_EventTree::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_EventTree::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.EventTree.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_EventTree::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.EventTree.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_EventTree::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.EventTree.location)
}

// optional bool delayed = 5;
bool CMsgBotWorldState_EventTree::has_delayed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_EventTree::set_has_delayed() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_EventTree::clear_has_delayed() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_EventTree::clear_delayed() {
  delayed_ = false;
  clear_has_delayed();
}
bool CMsgBotWorldState_EventTree::delayed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.EventTree.delayed)
  return delayed_;
}
void CMsgBotWorldState_EventTree::set_delayed(bool value) {
  set_has_delayed();
  delayed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.EventTree.delayed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState_Unit::kHandleFieldNumber;
const int CMsgBotWorldState_Unit::kUnitTypeFieldNumber;
const int CMsgBotWorldState_Unit::kNameFieldNumber;
const int CMsgBotWorldState_Unit::kTeamIdFieldNumber;
const int CMsgBotWorldState_Unit::kLevelFieldNumber;
const int CMsgBotWorldState_Unit::kLocationFieldNumber;
const int CMsgBotWorldState_Unit::kIsAliveFieldNumber;
const int CMsgBotWorldState_Unit::kPlayerIdFieldNumber;
const int CMsgBotWorldState_Unit::kBoundingRadiusFieldNumber;
const int CMsgBotWorldState_Unit::kFacingFieldNumber;
const int CMsgBotWorldState_Unit::kGroundHeightFieldNumber;
const int CMsgBotWorldState_Unit::kVisionRangeDaytimeFieldNumber;
const int CMsgBotWorldState_Unit::kVisionRangeNighttimeFieldNumber;
const int CMsgBotWorldState_Unit::kHealthFieldNumber;
const int CMsgBotWorldState_Unit::kHealthMaxFieldNumber;
const int CMsgBotWorldState_Unit::kHealthRegenFieldNumber;
const int CMsgBotWorldState_Unit::kManaFieldNumber;
const int CMsgBotWorldState_Unit::kManaMaxFieldNumber;
const int CMsgBotWorldState_Unit::kManaRegenFieldNumber;
const int CMsgBotWorldState_Unit::kBaseMovementSpeedFieldNumber;
const int CMsgBotWorldState_Unit::kCurrentMovementSpeedFieldNumber;
const int CMsgBotWorldState_Unit::kAnimActivityFieldNumber;
const int CMsgBotWorldState_Unit::kAnimCycleFieldNumber;
const int CMsgBotWorldState_Unit::kBaseDamageFieldNumber;
const int CMsgBotWorldState_Unit::kBaseDamageVarianceFieldNumber;
const int CMsgBotWorldState_Unit::kBonusDamageFieldNumber;
const int CMsgBotWorldState_Unit::kAttackDamageFieldNumber;
const int CMsgBotWorldState_Unit::kAttackRangeFieldNumber;
const int CMsgBotWorldState_Unit::kAttackSpeedFieldNumber;
const int CMsgBotWorldState_Unit::kAttackAnimPointFieldNumber;
const int CMsgBotWorldState_Unit::kAttackAcquisitionRangeFieldNumber;
const int CMsgBotWorldState_Unit::kAttackProjectileSpeedFieldNumber;
const int CMsgBotWorldState_Unit::kAttackTargetHandleFieldNumber;
const int CMsgBotWorldState_Unit::kBountyXpFieldNumber;
const int CMsgBotWorldState_Unit::kBountyGoldMinFieldNumber;
const int CMsgBotWorldState_Unit::kBountyGoldMaxFieldNumber;
const int CMsgBotWorldState_Unit::kIsChannelingFieldNumber;
const int CMsgBotWorldState_Unit::kActiveAbilityHandleFieldNumber;
const int CMsgBotWorldState_Unit::kIsAttackImmuneFieldNumber;
const int CMsgBotWorldState_Unit::kIsBlindFieldNumber;
const int CMsgBotWorldState_Unit::kIsBlockDisabledFieldNumber;
const int CMsgBotWorldState_Unit::kIsDisarmedFieldNumber;
const int CMsgBotWorldState_Unit::kIsDominatedFieldNumber;
const int CMsgBotWorldState_Unit::kIsEvadeDisabledFieldNumber;
const int CMsgBotWorldState_Unit::kIsHexedFieldNumber;
const int CMsgBotWorldState_Unit::kIsInvisibleFieldNumber;
const int CMsgBotWorldState_Unit::kIsInvulnerableFieldNumber;
const int CMsgBotWorldState_Unit::kIsMagicImmuneFieldNumber;
const int CMsgBotWorldState_Unit::kIsMutedFieldNumber;
const int CMsgBotWorldState_Unit::kIsNightmaredFieldNumber;
const int CMsgBotWorldState_Unit::kIsRootedFieldNumber;
const int CMsgBotWorldState_Unit::kIsSilencedFieldNumber;
const int CMsgBotWorldState_Unit::kIsSpeciallyDeniableFieldNumber;
const int CMsgBotWorldState_Unit::kIsStunnedFieldNumber;
const int CMsgBotWorldState_Unit::kIsUnableToMissFieldNumber;
const int CMsgBotWorldState_Unit::kHasScepterFieldNumber;
const int CMsgBotWorldState_Unit::kAbilitiesFieldNumber;
const int CMsgBotWorldState_Unit::kItemsFieldNumber;
const int CMsgBotWorldState_Unit::kModifiersFieldNumber;
const int CMsgBotWorldState_Unit::kIncomingTrackingProjectilesFieldNumber;
const int CMsgBotWorldState_Unit::kActionTypeFieldNumber;
const int CMsgBotWorldState_Unit::kAbilityTargetHandleFieldNumber;
const int CMsgBotWorldState_Unit::kPrimaryAttributeFieldNumber;
const int CMsgBotWorldState_Unit::kIsIllusionFieldNumber;
const int CMsgBotWorldState_Unit::kRespawnTimeFieldNumber;
const int CMsgBotWorldState_Unit::kBuybackCostFieldNumber;
const int CMsgBotWorldState_Unit::kBuybackCooldownFieldNumber;
const int CMsgBotWorldState_Unit::kSpellAmplificationFieldNumber;
const int CMsgBotWorldState_Unit::kArmorFieldNumber;
const int CMsgBotWorldState_Unit::kMagicResistFieldNumber;
const int CMsgBotWorldState_Unit::kEvasionFieldNumber;
const int CMsgBotWorldState_Unit::kXpNeededToLevelFieldNumber;
const int CMsgBotWorldState_Unit::kAbilityPointsFieldNumber;
const int CMsgBotWorldState_Unit::kReliableGoldFieldNumber;
const int CMsgBotWorldState_Unit::kUnreliableGoldFieldNumber;
const int CMsgBotWorldState_Unit::kLastHitsFieldNumber;
const int CMsgBotWorldState_Unit::kDeniesFieldNumber;
const int CMsgBotWorldState_Unit::kNetWorthFieldNumber;
const int CMsgBotWorldState_Unit::kStrengthFieldNumber;
const int CMsgBotWorldState_Unit::kAgilityFieldNumber;
const int CMsgBotWorldState_Unit::kIntelligenceFieldNumber;
const int CMsgBotWorldState_Unit::kRemainingLifespanFieldNumber;
const int CMsgBotWorldState_Unit::kFlyingCourierFieldNumber;
const int CMsgBotWorldState_Unit::kShrineCooldownFieldNumber;
const int CMsgBotWorldState_Unit::kIsShrineHealingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState_Unit::CMsgBotWorldState_Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState.Unit)
}
CMsgBotWorldState_Unit::CMsgBotWorldState_Unit(const CMsgBotWorldState_Unit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      abilities_(from.abilities_),
      items_(from.items_),
      modifiers_(from.modifiers_),
      incoming_tracking_projectiles_(from.incoming_tracking_projectiles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_location()) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector(*from.location_);
  } else {
    location_ = NULL;
  }
  ::memcpy(&handle_, &from.handle_,
    reinterpret_cast<char*>(&shrine_cooldown_) -
    reinterpret_cast<char*>(&handle_) + sizeof(shrine_cooldown_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState.Unit)
}

void CMsgBotWorldState_Unit::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, reinterpret_cast<char*>(&shrine_cooldown_) -
    reinterpret_cast<char*>(&location_) + sizeof(shrine_cooldown_));
}

CMsgBotWorldState_Unit::~CMsgBotWorldState_Unit() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState.Unit)
  SharedDtor();
}

void CMsgBotWorldState_Unit::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void CMsgBotWorldState_Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState_Unit::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState_Unit& CMsgBotWorldState_Unit::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState_Unit* CMsgBotWorldState_Unit::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState_Unit* n = new CMsgBotWorldState_Unit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState_Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState.Unit)
  abilities_.Clear();
  items_.Clear();
  modifiers_.Clear();
  incoming_tracking_projectiles_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_location()) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&handle_, 0, reinterpret_cast<char*>(&bounding_radius_) -
      reinterpret_cast<char*>(&handle_) + sizeof(bounding_radius_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&facing_, 0, reinterpret_cast<char*>(&mana_) -
      reinterpret_cast<char*>(&facing_) + sizeof(mana_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&mana_max_, 0, reinterpret_cast<char*>(&base_damage_variance_) -
      reinterpret_cast<char*>(&mana_max_) + sizeof(base_damage_variance_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&bonus_damage_, 0, reinterpret_cast<char*>(&attack_target_handle_) -
      reinterpret_cast<char*>(&bonus_damage_) + sizeof(attack_target_handle_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&is_alive_, 0, reinterpret_cast<char*>(&active_ability_handle_) -
      reinterpret_cast<char*>(&is_alive_) + sizeof(active_ability_handle_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&is_block_disabled_, 0, reinterpret_cast<char*>(&is_magic_immune_) -
      reinterpret_cast<char*>(&is_block_disabled_) + sizeof(is_magic_immune_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&is_muted_, 0, reinterpret_cast<char*>(&has_scepter_) -
      reinterpret_cast<char*>(&is_muted_) + sizeof(has_scepter_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&action_type_, 0, reinterpret_cast<char*>(&armor_) -
      reinterpret_cast<char*>(&action_type_) + sizeof(armor_));
  }
  if (_has_bits_[64 / 32] & 255u) {
    ::memset(&magic_resist_, 0, reinterpret_cast<char*>(&denies_) -
      reinterpret_cast<char*>(&magic_resist_) + sizeof(denies_));
  }
  if (_has_bits_[72 / 32] & 65280u) {
    ::memset(&net_worth_, 0, reinterpret_cast<char*>(&is_shrine_healing_) -
      reinterpret_cast<char*>(&net_worth_) + sizeof(is_shrine_healing_));
  }
  shrine_cooldown_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState.Unit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgBotWorldState_UnitType_IsValid(value)) {
            set_unit_type(static_cast< ::proto::dota::CMsgBotWorldState_UnitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgBotWorldState.Unit.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_alive = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_alive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounding_radius = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_bounding_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounding_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 facing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_facing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ground_height = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_ground_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ground_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vision_range_daytime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_vision_range_daytime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_range_daytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vision_range_nighttime = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_vision_range_nighttime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_range_nighttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_health();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 health_max = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_health_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float health_regen = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_health_regen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_regen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mana = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_mana();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mana_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 mana_max = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_mana_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mana_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mana_regen = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u)) {
          set_has_mana_regen();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mana_regen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_movement_speed = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_base_movement_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_movement_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_movement_speed = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_current_movement_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_movement_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 anim_activity = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_anim_activity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &anim_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float anim_cycle = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(293u)) {
          set_has_anim_cycle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anim_cycle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_damage = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_base_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 base_damage_variance = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_base_damage_variance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_damage_variance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_damage = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_bonus_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attack_damage = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_attack_damage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attack_range = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_attack_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attack_speed = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(365u)) {
          set_has_attack_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float attack_anim_point = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(373u)) {
          set_has_attack_anim_point();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &attack_anim_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attack_acquisition_range = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_attack_acquisition_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_acquisition_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attack_projectile_speed = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_attack_projectile_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_projectile_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attack_target_handle = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_attack_target_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_target_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounty_xp = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_bounty_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounty_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounty_gold_min = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_bounty_gold_min();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounty_gold_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bounty_gold_max = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_bounty_gold_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bounty_gold_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_channeling = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_is_channeling();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_channeling_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 active_ability_handle = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(528u)) {
          set_has_active_ability_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_ability_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_attack_immune = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {
          set_has_is_attack_immune();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_attack_immune_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_blind = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(568u)) {
          set_has_is_blind();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blind_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_block_disabled = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(576u)) {
          set_has_is_block_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_block_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_disarmed = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(584u)) {
          set_has_is_disarmed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_disarmed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_dominated = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(592u)) {
          set_has_is_dominated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dominated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_evade_disabled = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(600u)) {
          set_has_is_evade_disabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_evade_disabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_hexed = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(608u)) {
          set_has_is_hexed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hexed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_invisible = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(616u)) {
          set_has_is_invisible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invisible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_invulnerable = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(624u)) {
          set_has_is_invulnerable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_invulnerable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_magic_immune = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(632u)) {
          set_has_is_magic_immune();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_magic_immune_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_muted = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(640u)) {
          set_has_is_muted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_muted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_nightmared = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(656u)) {
          set_has_is_nightmared();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_nightmared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_rooted = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(664u)) {
          set_has_is_rooted();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_rooted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_silenced = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(672u)) {
          set_has_is_silenced();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_silenced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_specially_deniable = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(680u)) {
          set_has_is_specially_deniable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_specially_deniable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_stunned = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(688u)) {
          set_has_is_stunned();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stunned_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_unable_to_miss = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(696u)) {
          set_has_is_unable_to_miss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_unable_to_miss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_scepter = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(704u)) {
          set_has_has_scepter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_scepter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(722u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(730u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(738u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_modifiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(746u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incoming_tracking_projectiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action_type = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_action_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_target_handle = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          set_has_ability_target_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_target_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 primary_attribute = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(880u)) {
          set_has_primary_attribute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &primary_attribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_illusion = 111;
      case 111: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(888u)) {
          set_has_is_illusion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_illusion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 respawn_time = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(896u)) {
          set_has_respawn_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &respawn_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buyback_cost = 113;
      case 113: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(904u)) {
          set_has_buyback_cost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyback_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float buyback_cooldown = 114;
      case 114: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(917u)) {
          set_has_buyback_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &buyback_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float spell_amplification = 115;
      case 115: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(925u)) {
          set_has_spell_amplification();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spell_amplification_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float armor = 116;
      case 116: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(933u)) {
          set_has_armor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float magic_resist = 117;
      case 117: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(941u)) {
          set_has_magic_resist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &magic_resist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float evasion = 118;
      case 118: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(949u)) {
          set_has_evasion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &evasion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 xp_needed_to_level = 120;
      case 120: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(960u)) {
          set_has_xp_needed_to_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &xp_needed_to_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ability_points = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(968u)) {
          set_has_ability_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reliable_gold = 122;
      case 122: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(976u)) {
          set_has_reliable_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reliable_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 unreliable_gold = 123;
      case 123: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(984u)) {
          set_has_unreliable_gold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unreliable_gold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 last_hits = 124;
      case 124: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(992u)) {
          set_has_last_hits();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 denies = 125;
      case 125: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1000u)) {
          set_has_denies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &denies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 net_worth = 126;
      case 126: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1008u)) {
          set_has_net_worth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_worth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 strength = 127;
      case 127: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1016u)) {
          set_has_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 agility = 128;
      case 128: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1024u)) {
          set_has_agility();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 intelligence = 129;
      case 129: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1032u)) {
          set_has_intelligence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intelligence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float remaining_lifespan = 130;
      case 130: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1045u)) {
          set_has_remaining_lifespan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remaining_lifespan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool flying_courier = 140;
      case 140: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1120u)) {
          set_has_flying_courier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flying_courier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float shrine_cooldown = 150;
      case 150: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1205u)) {
          set_has_shrine_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shrine_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_shrine_healing = 151;
      case 151: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1208u)) {
          set_has_is_shrine_healing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shrine_healing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState.Unit)
  return false;
#undef DO_
}

void CMsgBotWorldState_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->handle(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unit_type(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotWorldState.Unit.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->location_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_alive = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_alive(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->player_id(), output);
  }

  // optional uint32 bounding_radius = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bounding_radius(), output);
  }

  // optional uint32 facing = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->facing(), output);
  }

  // optional uint32 ground_height = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ground_height(), output);
  }

  // optional uint32 vision_range_daytime = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->vision_range_daytime(), output);
  }

  // optional uint32 vision_range_nighttime = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->vision_range_nighttime(), output);
  }

  // optional uint32 health = 20;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->health(), output);
  }

  // optional uint32 health_max = 21;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->health_max(), output);
  }

  // optional float health_regen = 22;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->health_regen(), output);
  }

  // optional uint32 mana = 25;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->mana(), output);
  }

  // optional uint32 mana_max = 26;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->mana_max(), output);
  }

  // optional float mana_regen = 27;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->mana_regen(), output);
  }

  // optional uint32 base_movement_speed = 30;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->base_movement_speed(), output);
  }

  // optional uint32 current_movement_speed = 31;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->current_movement_speed(), output);
  }

  // optional int32 anim_activity = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->anim_activity(), output);
  }

  // optional float anim_cycle = 36;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->anim_cycle(), output);
  }

  // optional uint32 base_damage = 40;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->base_damage(), output);
  }

  // optional uint32 base_damage_variance = 41;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->base_damage_variance(), output);
  }

  // optional uint32 bonus_damage = 42;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->bonus_damage(), output);
  }

  // optional uint32 attack_damage = 43;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->attack_damage(), output);
  }

  // optional uint32 attack_range = 44;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->attack_range(), output);
  }

  // optional float attack_speed = 45;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->attack_speed(), output);
  }

  // optional float attack_anim_point = 46;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->attack_anim_point(), output);
  }

  // optional uint32 attack_acquisition_range = 47;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->attack_acquisition_range(), output);
  }

  // optional uint32 attack_projectile_speed = 48;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->attack_projectile_speed(), output);
  }

  // optional uint32 attack_target_handle = 49;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->attack_target_handle(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bounty_xp = 60;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->bounty_xp(), output);
  }

  // optional uint32 bounty_gold_min = 61;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->bounty_gold_min(), output);
  }

  // optional uint32 bounty_gold_max = 62;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->bounty_gold_max(), output);
  }

  // optional bool is_channeling = 65;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->is_channeling(), output);
  }

  // optional uint32 active_ability_handle = 66;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(66, this->active_ability_handle(), output);
  }

  // optional bool is_attack_immune = 70;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(70, this->is_attack_immune(), output);
  }

  // optional bool is_blind = 71;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(71, this->is_blind(), output);
  }

  // optional bool is_block_disabled = 72;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(72, this->is_block_disabled(), output);
  }

  // optional bool is_disarmed = 73;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->is_disarmed(), output);
  }

  // optional bool is_dominated = 74;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(74, this->is_dominated(), output);
  }

  // optional bool is_evade_disabled = 75;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->is_evade_disabled(), output);
  }

  // optional bool is_hexed = 76;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(76, this->is_hexed(), output);
  }

  // optional bool is_invisible = 77;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->is_invisible(), output);
  }

  // optional bool is_invulnerable = 78;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->is_invulnerable(), output);
  }

  // optional bool is_magic_immune = 79;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(79, this->is_magic_immune(), output);
  }

  // optional bool is_muted = 80;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(80, this->is_muted(), output);
  }

  // optional bool is_nightmared = 82;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(82, this->is_nightmared(), output);
  }

  // optional bool is_rooted = 83;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->is_rooted(), output);
  }

  // optional bool is_silenced = 84;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(84, this->is_silenced(), output);
  }

  // optional bool is_specially_deniable = 85;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->is_specially_deniable(), output);
  }

  // optional bool is_stunned = 86;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(86, this->is_stunned(), output);
  }

  // optional bool is_unable_to_miss = 87;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(87, this->is_unable_to_miss(), output);
  }

  // optional bool has_scepter = 88;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(88, this->has_scepter(), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      90, this->abilities(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      91, this->items(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
  for (unsigned int i = 0, n = this->modifiers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      92, this->modifiers(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
  for (unsigned int i = 0, n = this->incoming_tracking_projectiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      93, this->incoming_tracking_projectiles(i), output);
  }

  // optional uint32 action_type = 100;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(100, this->action_type(), output);
  }

  // optional uint32 ability_target_handle = 101;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(101, this->ability_target_handle(), output);
  }

  // optional uint32 primary_attribute = 110;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(110, this->primary_attribute(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool is_illusion = 111;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(111, this->is_illusion(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 respawn_time = 112;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(112, this->respawn_time(), output);
  }

  // optional uint32 buyback_cost = 113;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(113, this->buyback_cost(), output);
  }

  // optional float buyback_cooldown = 114;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(114, this->buyback_cooldown(), output);
  }

  // optional float spell_amplification = 115;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(115, this->spell_amplification(), output);
  }

  // optional float armor = 116;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(116, this->armor(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional float magic_resist = 117;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(117, this->magic_resist(), output);
  }

  // optional float evasion = 118;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(118, this->evasion(), output);
  }

  // optional uint32 xp_needed_to_level = 120;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(120, this->xp_needed_to_level(), output);
  }

  // optional uint32 ability_points = 121;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(121, this->ability_points(), output);
  }

  // optional uint32 reliable_gold = 122;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(122, this->reliable_gold(), output);
  }

  // optional uint32 unreliable_gold = 123;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(123, this->unreliable_gold(), output);
  }

  // optional uint32 last_hits = 124;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(124, this->last_hits(), output);
  }

  // optional uint32 denies = 125;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(125, this->denies(), output);
  }

  // optional uint32 net_worth = 126;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(126, this->net_worth(), output);
  }

  // optional uint32 strength = 127;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(127, this->strength(), output);
  }

  // optional uint32 agility = 128;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(128, this->agility(), output);
  }

  // optional uint32 intelligence = 129;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(129, this->intelligence(), output);
  }

  // optional float remaining_lifespan = 130;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(130, this->remaining_lifespan(), output);
  }

  // optional bool flying_courier = 140;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(140, this->flying_courier(), output);
  }

  // optional float shrine_cooldown = 150;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(150, this->shrine_cooldown(), output);
  }

  // optional bool is_shrine_healing = 151;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(151, this->is_shrine_healing(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState.Unit)
}

::google::protobuf::uint8* CMsgBotWorldState_Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState.Unit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 handle = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->handle(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unit_type(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotWorldState.Unit.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 level = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->location_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool is_alive = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_alive(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 player_id = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->player_id(), target);
  }

  // optional uint32 bounding_radius = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bounding_radius(), target);
  }

  // optional uint32 facing = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->facing(), target);
  }

  // optional uint32 ground_height = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ground_height(), target);
  }

  // optional uint32 vision_range_daytime = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->vision_range_daytime(), target);
  }

  // optional uint32 vision_range_nighttime = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->vision_range_nighttime(), target);
  }

  // optional uint32 health = 20;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->health(), target);
  }

  // optional uint32 health_max = 21;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->health_max(), target);
  }

  // optional float health_regen = 22;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->health_regen(), target);
  }

  // optional uint32 mana = 25;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->mana(), target);
  }

  // optional uint32 mana_max = 26;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->mana_max(), target);
  }

  // optional float mana_regen = 27;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->mana_regen(), target);
  }

  // optional uint32 base_movement_speed = 30;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->base_movement_speed(), target);
  }

  // optional uint32 current_movement_speed = 31;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->current_movement_speed(), target);
  }

  // optional int32 anim_activity = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->anim_activity(), target);
  }

  // optional float anim_cycle = 36;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->anim_cycle(), target);
  }

  // optional uint32 base_damage = 40;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->base_damage(), target);
  }

  // optional uint32 base_damage_variance = 41;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->base_damage_variance(), target);
  }

  // optional uint32 bonus_damage = 42;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->bonus_damage(), target);
  }

  // optional uint32 attack_damage = 43;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->attack_damage(), target);
  }

  // optional uint32 attack_range = 44;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->attack_range(), target);
  }

  // optional float attack_speed = 45;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(45, this->attack_speed(), target);
  }

  // optional float attack_anim_point = 46;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(46, this->attack_anim_point(), target);
  }

  // optional uint32 attack_acquisition_range = 47;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->attack_acquisition_range(), target);
  }

  // optional uint32 attack_projectile_speed = 48;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->attack_projectile_speed(), target);
  }

  // optional uint32 attack_target_handle = 49;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->attack_target_handle(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bounty_xp = 60;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->bounty_xp(), target);
  }

  // optional uint32 bounty_gold_min = 61;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->bounty_gold_min(), target);
  }

  // optional uint32 bounty_gold_max = 62;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->bounty_gold_max(), target);
  }

  // optional bool is_channeling = 65;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->is_channeling(), target);
  }

  // optional uint32 active_ability_handle = 66;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(66, this->active_ability_handle(), target);
  }

  // optional bool is_attack_immune = 70;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(70, this->is_attack_immune(), target);
  }

  // optional bool is_blind = 71;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(71, this->is_blind(), target);
  }

  // optional bool is_block_disabled = 72;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(72, this->is_block_disabled(), target);
  }

  // optional bool is_disarmed = 73;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(73, this->is_disarmed(), target);
  }

  // optional bool is_dominated = 74;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(74, this->is_dominated(), target);
  }

  // optional bool is_evade_disabled = 75;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(75, this->is_evade_disabled(), target);
  }

  // optional bool is_hexed = 76;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(76, this->is_hexed(), target);
  }

  // optional bool is_invisible = 77;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->is_invisible(), target);
  }

  // optional bool is_invulnerable = 78;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->is_invulnerable(), target);
  }

  // optional bool is_magic_immune = 79;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(79, this->is_magic_immune(), target);
  }

  // optional bool is_muted = 80;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(80, this->is_muted(), target);
  }

  // optional bool is_nightmared = 82;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(82, this->is_nightmared(), target);
  }

  // optional bool is_rooted = 83;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->is_rooted(), target);
  }

  // optional bool is_silenced = 84;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(84, this->is_silenced(), target);
  }

  // optional bool is_specially_deniable = 85;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(85, this->is_specially_deniable(), target);
  }

  // optional bool is_stunned = 86;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(86, this->is_stunned(), target);
  }

  // optional bool is_unable_to_miss = 87;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(87, this->is_unable_to_miss(), target);
  }

  // optional bool has_scepter = 88;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(88, this->has_scepter(), target);
  }

  // repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        90, this->abilities(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        91, this->items(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
  for (unsigned int i = 0, n = this->modifiers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        92, this->modifiers(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
  for (unsigned int i = 0, n = this->incoming_tracking_projectiles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        93, this->incoming_tracking_projectiles(i), deterministic, target);
  }

  // optional uint32 action_type = 100;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(100, this->action_type(), target);
  }

  // optional uint32 ability_target_handle = 101;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(101, this->ability_target_handle(), target);
  }

  // optional uint32 primary_attribute = 110;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(110, this->primary_attribute(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool is_illusion = 111;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(111, this->is_illusion(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 respawn_time = 112;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(112, this->respawn_time(), target);
  }

  // optional uint32 buyback_cost = 113;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(113, this->buyback_cost(), target);
  }

  // optional float buyback_cooldown = 114;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(114, this->buyback_cooldown(), target);
  }

  // optional float spell_amplification = 115;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(115, this->spell_amplification(), target);
  }

  // optional float armor = 116;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(116, this->armor(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional float magic_resist = 117;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(117, this->magic_resist(), target);
  }

  // optional float evasion = 118;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(118, this->evasion(), target);
  }

  // optional uint32 xp_needed_to_level = 120;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(120, this->xp_needed_to_level(), target);
  }

  // optional uint32 ability_points = 121;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(121, this->ability_points(), target);
  }

  // optional uint32 reliable_gold = 122;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(122, this->reliable_gold(), target);
  }

  // optional uint32 unreliable_gold = 123;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(123, this->unreliable_gold(), target);
  }

  // optional uint32 last_hits = 124;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(124, this->last_hits(), target);
  }

  // optional uint32 denies = 125;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(125, this->denies(), target);
  }

  // optional uint32 net_worth = 126;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(126, this->net_worth(), target);
  }

  // optional uint32 strength = 127;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(127, this->strength(), target);
  }

  // optional uint32 agility = 128;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(128, this->agility(), target);
  }

  // optional uint32 intelligence = 129;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(129, this->intelligence(), target);
  }

  // optional float remaining_lifespan = 130;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(130, this->remaining_lifespan(), target);
  }

  // optional bool flying_courier = 140;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(140, this->flying_courier(), target);
  }

  // optional float shrine_cooldown = 150;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(150, this->shrine_cooldown(), target);
  }

  // optional bool is_shrine_healing = 151;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(151, this->is_shrine_healing(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState.Unit)
  return target;
}

size_t CMsgBotWorldState_Unit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState.Unit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
  {
    unsigned int count = this->abilities_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abilities(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
  {
    unsigned int count = this->items_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
  {
    unsigned int count = this->modifiers_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modifiers(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
  {
    unsigned int count = this->incoming_tracking_projectiles_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incoming_tracking_projectiles(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .proto.dota.CMsgBotWorldState.Vector location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->location_);
    }

    // optional uint32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle());
    }

    // optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_type());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 player_id = 8;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional uint32 bounding_radius = 10;
    if (has_bounding_radius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounding_radius());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 facing = 11;
    if (has_facing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facing());
    }

    // optional uint32 ground_height = 12;
    if (has_ground_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ground_height());
    }

    // optional uint32 vision_range_daytime = 15;
    if (has_vision_range_daytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vision_range_daytime());
    }

    // optional uint32 vision_range_nighttime = 16;
    if (has_vision_range_nighttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vision_range_nighttime());
    }

    // optional uint32 health = 20;
    if (has_health()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional uint32 health_max = 21;
    if (has_health_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health_max());
    }

    // optional float health_regen = 22;
    if (has_health_regen()) {
      total_size += 2 + 4;
    }

    // optional uint32 mana = 25;
    if (has_mana()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mana());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 mana_max = 26;
    if (has_mana_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mana_max());
    }

    // optional float mana_regen = 27;
    if (has_mana_regen()) {
      total_size += 2 + 4;
    }

    // optional uint32 base_movement_speed = 30;
    if (has_base_movement_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_movement_speed());
    }

    // optional uint32 current_movement_speed = 31;
    if (has_current_movement_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_movement_speed());
    }

    // optional int32 anim_activity = 35;
    if (has_anim_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->anim_activity());
    }

    // optional float anim_cycle = 36;
    if (has_anim_cycle()) {
      total_size += 2 + 4;
    }

    // optional uint32 base_damage = 40;
    if (has_base_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage());
    }

    // optional uint32 base_damage_variance = 41;
    if (has_base_damage_variance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_damage_variance());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 bonus_damage = 42;
    if (has_bonus_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_damage());
    }

    // optional uint32 attack_damage = 43;
    if (has_attack_damage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_damage());
    }

    // optional uint32 attack_range = 44;
    if (has_attack_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_range());
    }

    // optional float attack_speed = 45;
    if (has_attack_speed()) {
      total_size += 2 + 4;
    }

    // optional float attack_anim_point = 46;
    if (has_attack_anim_point()) {
      total_size += 2 + 4;
    }

    // optional uint32 attack_acquisition_range = 47;
    if (has_attack_acquisition_range()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_acquisition_range());
    }

    // optional uint32 attack_projectile_speed = 48;
    if (has_attack_projectile_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_projectile_speed());
    }

    // optional uint32 attack_target_handle = 49;
    if (has_attack_target_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_target_handle());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional bool is_alive = 7;
    if (has_is_alive()) {
      total_size += 1 + 1;
    }

    // optional bool is_channeling = 65;
    if (has_is_channeling()) {
      total_size += 2 + 1;
    }

    // optional bool is_attack_immune = 70;
    if (has_is_attack_immune()) {
      total_size += 2 + 1;
    }

    // optional bool is_blind = 71;
    if (has_is_blind()) {
      total_size += 2 + 1;
    }

    // optional uint32 bounty_xp = 60;
    if (has_bounty_xp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounty_xp());
    }

    // optional uint32 bounty_gold_min = 61;
    if (has_bounty_gold_min()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounty_gold_min());
    }

    // optional uint32 bounty_gold_max = 62;
    if (has_bounty_gold_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bounty_gold_max());
    }

    // optional uint32 active_ability_handle = 66;
    if (has_active_ability_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active_ability_handle());
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool is_block_disabled = 72;
    if (has_is_block_disabled()) {
      total_size += 2 + 1;
    }

    // optional bool is_disarmed = 73;
    if (has_is_disarmed()) {
      total_size += 2 + 1;
    }

    // optional bool is_dominated = 74;
    if (has_is_dominated()) {
      total_size += 2 + 1;
    }

    // optional bool is_evade_disabled = 75;
    if (has_is_evade_disabled()) {
      total_size += 2 + 1;
    }

    // optional bool is_hexed = 76;
    if (has_is_hexed()) {
      total_size += 2 + 1;
    }

    // optional bool is_invisible = 77;
    if (has_is_invisible()) {
      total_size += 2 + 1;
    }

    // optional bool is_invulnerable = 78;
    if (has_is_invulnerable()) {
      total_size += 2 + 1;
    }

    // optional bool is_magic_immune = 79;
    if (has_is_magic_immune()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional bool is_muted = 80;
    if (has_is_muted()) {
      total_size += 2 + 1;
    }

    // optional bool is_nightmared = 82;
    if (has_is_nightmared()) {
      total_size += 2 + 1;
    }

    // optional bool is_rooted = 83;
    if (has_is_rooted()) {
      total_size += 2 + 1;
    }

    // optional bool is_silenced = 84;
    if (has_is_silenced()) {
      total_size += 2 + 1;
    }

    // optional bool is_specially_deniable = 85;
    if (has_is_specially_deniable()) {
      total_size += 2 + 1;
    }

    // optional bool is_stunned = 86;
    if (has_is_stunned()) {
      total_size += 2 + 1;
    }

    // optional bool is_unable_to_miss = 87;
    if (has_is_unable_to_miss()) {
      total_size += 2 + 1;
    }

    // optional bool has_scepter = 88;
    if (has_has_scepter()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional uint32 action_type = 100;
    if (has_action_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action_type());
    }

    // optional uint32 ability_target_handle = 101;
    if (has_ability_target_handle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_target_handle());
    }

    // optional uint32 primary_attribute = 110;
    if (has_primary_attribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->primary_attribute());
    }

    // optional uint32 respawn_time = 112;
    if (has_respawn_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->respawn_time());
    }

    // optional uint32 buyback_cost = 113;
    if (has_buyback_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyback_cost());
    }

    // optional float buyback_cooldown = 114;
    if (has_buyback_cooldown()) {
      total_size += 2 + 4;
    }

    // optional float spell_amplification = 115;
    if (has_spell_amplification()) {
      total_size += 2 + 4;
    }

    // optional float armor = 116;
    if (has_armor()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional float magic_resist = 117;
    if (has_magic_resist()) {
      total_size += 2 + 4;
    }

    // optional float evasion = 118;
    if (has_evasion()) {
      total_size += 2 + 4;
    }

    // optional uint32 xp_needed_to_level = 120;
    if (has_xp_needed_to_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->xp_needed_to_level());
    }

    // optional uint32 ability_points = 121;
    if (has_ability_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_points());
    }

    // optional uint32 reliable_gold = 122;
    if (has_reliable_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reliable_gold());
    }

    // optional uint32 unreliable_gold = 123;
    if (has_unreliable_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unreliable_gold());
    }

    // optional uint32 last_hits = 124;
    if (has_last_hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_hits());
    }

    // optional uint32 denies = 125;
    if (has_denies()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->denies());
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional uint32 net_worth = 126;
    if (has_net_worth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_worth());
    }

    // optional uint32 strength = 127;
    if (has_strength()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strength());
    }

    // optional uint32 agility = 128;
    if (has_agility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agility());
    }

    // optional uint32 intelligence = 129;
    if (has_intelligence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intelligence());
    }

    // optional float remaining_lifespan = 130;
    if (has_remaining_lifespan()) {
      total_size += 2 + 4;
    }

    // optional bool is_illusion = 111;
    if (has_is_illusion()) {
      total_size += 2 + 1;
    }

    // optional bool flying_courier = 140;
    if (has_flying_courier()) {
      total_size += 2 + 1;
    }

    // optional bool is_shrine_healing = 151;
    if (has_is_shrine_healing()) {
      total_size += 2 + 1;
    }

  }
  // optional float shrine_cooldown = 150;
  if (has_shrine_cooldown()) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState_Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState_Unit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState_Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState.Unit)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState_Unit::MergeFrom(const CMsgBotWorldState_Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState.Unit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  abilities_.MergeFrom(from.abilities_);
  items_.MergeFrom(from.items_);
  modifiers_.MergeFrom(from.modifiers_);
  incoming_tracking_projectiles_.MergeFrom(from.incoming_tracking_projectiles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_location()->::proto::dota::CMsgBotWorldState_Vector::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000004u) {
      handle_ = from.handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      unit_type_ = from.unit_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000040u) {
      player_id_ = from.player_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      bounding_radius_ = from.bounding_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      facing_ = from.facing_;
    }
    if (cached_has_bits & 0x00000200u) {
      ground_height_ = from.ground_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      vision_range_daytime_ = from.vision_range_daytime_;
    }
    if (cached_has_bits & 0x00000800u) {
      vision_range_nighttime_ = from.vision_range_nighttime_;
    }
    if (cached_has_bits & 0x00001000u) {
      health_ = from.health_;
    }
    if (cached_has_bits & 0x00002000u) {
      health_max_ = from.health_max_;
    }
    if (cached_has_bits & 0x00004000u) {
      health_regen_ = from.health_regen_;
    }
    if (cached_has_bits & 0x00008000u) {
      mana_ = from.mana_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      mana_max_ = from.mana_max_;
    }
    if (cached_has_bits & 0x00020000u) {
      mana_regen_ = from.mana_regen_;
    }
    if (cached_has_bits & 0x00040000u) {
      base_movement_speed_ = from.base_movement_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      current_movement_speed_ = from.current_movement_speed_;
    }
    if (cached_has_bits & 0x00100000u) {
      anim_activity_ = from.anim_activity_;
    }
    if (cached_has_bits & 0x00200000u) {
      anim_cycle_ = from.anim_cycle_;
    }
    if (cached_has_bits & 0x00400000u) {
      base_damage_ = from.base_damage_;
    }
    if (cached_has_bits & 0x00800000u) {
      base_damage_variance_ = from.base_damage_variance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      bonus_damage_ = from.bonus_damage_;
    }
    if (cached_has_bits & 0x02000000u) {
      attack_damage_ = from.attack_damage_;
    }
    if (cached_has_bits & 0x04000000u) {
      attack_range_ = from.attack_range_;
    }
    if (cached_has_bits & 0x08000000u) {
      attack_speed_ = from.attack_speed_;
    }
    if (cached_has_bits & 0x10000000u) {
      attack_anim_point_ = from.attack_anim_point_;
    }
    if (cached_has_bits & 0x20000000u) {
      attack_acquisition_range_ = from.attack_acquisition_range_;
    }
    if (cached_has_bits & 0x40000000u) {
      attack_projectile_speed_ = from.attack_projectile_speed_;
    }
    if (cached_has_bits & 0x80000000u) {
      attack_target_handle_ = from.attack_target_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      is_alive_ = from.is_alive_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_channeling_ = from.is_channeling_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_attack_immune_ = from.is_attack_immune_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_blind_ = from.is_blind_;
    }
    if (cached_has_bits & 0x00000010u) {
      bounty_xp_ = from.bounty_xp_;
    }
    if (cached_has_bits & 0x00000020u) {
      bounty_gold_min_ = from.bounty_gold_min_;
    }
    if (cached_has_bits & 0x00000040u) {
      bounty_gold_max_ = from.bounty_gold_max_;
    }
    if (cached_has_bits & 0x00000080u) {
      active_ability_handle_ = from.active_ability_handle_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      is_block_disabled_ = from.is_block_disabled_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_disarmed_ = from.is_disarmed_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_dominated_ = from.is_dominated_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_evade_disabled_ = from.is_evade_disabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_hexed_ = from.is_hexed_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_invisible_ = from.is_invisible_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_invulnerable_ = from.is_invulnerable_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_magic_immune_ = from.is_magic_immune_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      is_muted_ = from.is_muted_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_nightmared_ = from.is_nightmared_;
    }
    if (cached_has_bits & 0x00040000u) {
      is_rooted_ = from.is_rooted_;
    }
    if (cached_has_bits & 0x00080000u) {
      is_silenced_ = from.is_silenced_;
    }
    if (cached_has_bits & 0x00100000u) {
      is_specially_deniable_ = from.is_specially_deniable_;
    }
    if (cached_has_bits & 0x00200000u) {
      is_stunned_ = from.is_stunned_;
    }
    if (cached_has_bits & 0x00400000u) {
      is_unable_to_miss_ = from.is_unable_to_miss_;
    }
    if (cached_has_bits & 0x00800000u) {
      has_scepter_ = from.has_scepter_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      action_type_ = from.action_type_;
    }
    if (cached_has_bits & 0x02000000u) {
      ability_target_handle_ = from.ability_target_handle_;
    }
    if (cached_has_bits & 0x04000000u) {
      primary_attribute_ = from.primary_attribute_;
    }
    if (cached_has_bits & 0x08000000u) {
      respawn_time_ = from.respawn_time_;
    }
    if (cached_has_bits & 0x10000000u) {
      buyback_cost_ = from.buyback_cost_;
    }
    if (cached_has_bits & 0x20000000u) {
      buyback_cooldown_ = from.buyback_cooldown_;
    }
    if (cached_has_bits & 0x40000000u) {
      spell_amplification_ = from.spell_amplification_;
    }
    if (cached_has_bits & 0x80000000u) {
      armor_ = from.armor_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      magic_resist_ = from.magic_resist_;
    }
    if (cached_has_bits & 0x00000002u) {
      evasion_ = from.evasion_;
    }
    if (cached_has_bits & 0x00000004u) {
      xp_needed_to_level_ = from.xp_needed_to_level_;
    }
    if (cached_has_bits & 0x00000008u) {
      ability_points_ = from.ability_points_;
    }
    if (cached_has_bits & 0x00000010u) {
      reliable_gold_ = from.reliable_gold_;
    }
    if (cached_has_bits & 0x00000020u) {
      unreliable_gold_ = from.unreliable_gold_;
    }
    if (cached_has_bits & 0x00000040u) {
      last_hits_ = from.last_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      denies_ = from.denies_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      net_worth_ = from.net_worth_;
    }
    if (cached_has_bits & 0x00000200u) {
      strength_ = from.strength_;
    }
    if (cached_has_bits & 0x00000400u) {
      agility_ = from.agility_;
    }
    if (cached_has_bits & 0x00000800u) {
      intelligence_ = from.intelligence_;
    }
    if (cached_has_bits & 0x00001000u) {
      remaining_lifespan_ = from.remaining_lifespan_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_illusion_ = from.is_illusion_;
    }
    if (cached_has_bits & 0x00004000u) {
      flying_courier_ = from.flying_courier_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_shrine_healing_ = from.is_shrine_healing_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_shrine_cooldown(from.shrine_cooldown());
  }
}

void CMsgBotWorldState_Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState_Unit::CopyFrom(const CMsgBotWorldState_Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState_Unit::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->incoming_tracking_projectiles())) return false;
  if (has_location()) {
    if (!this->location_->IsInitialized()) return false;
  }
  return true;
}

void CMsgBotWorldState_Unit::Swap(CMsgBotWorldState_Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState_Unit::InternalSwap(CMsgBotWorldState_Unit* other) {
  abilities_.InternalSwap(&other->abilities_);
  items_.InternalSwap(&other->items_);
  modifiers_.InternalSwap(&other->modifiers_);
  incoming_tracking_projectiles_.InternalSwap(&other->incoming_tracking_projectiles_);
  name_.Swap(&other->name_);
  std::swap(location_, other->location_);
  std::swap(handle_, other->handle_);
  std::swap(unit_type_, other->unit_type_);
  std::swap(team_id_, other->team_id_);
  std::swap(level_, other->level_);
  std::swap(player_id_, other->player_id_);
  std::swap(bounding_radius_, other->bounding_radius_);
  std::swap(facing_, other->facing_);
  std::swap(ground_height_, other->ground_height_);
  std::swap(vision_range_daytime_, other->vision_range_daytime_);
  std::swap(vision_range_nighttime_, other->vision_range_nighttime_);
  std::swap(health_, other->health_);
  std::swap(health_max_, other->health_max_);
  std::swap(health_regen_, other->health_regen_);
  std::swap(mana_, other->mana_);
  std::swap(mana_max_, other->mana_max_);
  std::swap(mana_regen_, other->mana_regen_);
  std::swap(base_movement_speed_, other->base_movement_speed_);
  std::swap(current_movement_speed_, other->current_movement_speed_);
  std::swap(anim_activity_, other->anim_activity_);
  std::swap(anim_cycle_, other->anim_cycle_);
  std::swap(base_damage_, other->base_damage_);
  std::swap(base_damage_variance_, other->base_damage_variance_);
  std::swap(bonus_damage_, other->bonus_damage_);
  std::swap(attack_damage_, other->attack_damage_);
  std::swap(attack_range_, other->attack_range_);
  std::swap(attack_speed_, other->attack_speed_);
  std::swap(attack_anim_point_, other->attack_anim_point_);
  std::swap(attack_acquisition_range_, other->attack_acquisition_range_);
  std::swap(attack_projectile_speed_, other->attack_projectile_speed_);
  std::swap(attack_target_handle_, other->attack_target_handle_);
  std::swap(is_alive_, other->is_alive_);
  std::swap(is_channeling_, other->is_channeling_);
  std::swap(is_attack_immune_, other->is_attack_immune_);
  std::swap(is_blind_, other->is_blind_);
  std::swap(bounty_xp_, other->bounty_xp_);
  std::swap(bounty_gold_min_, other->bounty_gold_min_);
  std::swap(bounty_gold_max_, other->bounty_gold_max_);
  std::swap(active_ability_handle_, other->active_ability_handle_);
  std::swap(is_block_disabled_, other->is_block_disabled_);
  std::swap(is_disarmed_, other->is_disarmed_);
  std::swap(is_dominated_, other->is_dominated_);
  std::swap(is_evade_disabled_, other->is_evade_disabled_);
  std::swap(is_hexed_, other->is_hexed_);
  std::swap(is_invisible_, other->is_invisible_);
  std::swap(is_invulnerable_, other->is_invulnerable_);
  std::swap(is_magic_immune_, other->is_magic_immune_);
  std::swap(is_muted_, other->is_muted_);
  std::swap(is_nightmared_, other->is_nightmared_);
  std::swap(is_rooted_, other->is_rooted_);
  std::swap(is_silenced_, other->is_silenced_);
  std::swap(is_specially_deniable_, other->is_specially_deniable_);
  std::swap(is_stunned_, other->is_stunned_);
  std::swap(is_unable_to_miss_, other->is_unable_to_miss_);
  std::swap(has_scepter_, other->has_scepter_);
  std::swap(action_type_, other->action_type_);
  std::swap(ability_target_handle_, other->ability_target_handle_);
  std::swap(primary_attribute_, other->primary_attribute_);
  std::swap(respawn_time_, other->respawn_time_);
  std::swap(buyback_cost_, other->buyback_cost_);
  std::swap(buyback_cooldown_, other->buyback_cooldown_);
  std::swap(spell_amplification_, other->spell_amplification_);
  std::swap(armor_, other->armor_);
  std::swap(magic_resist_, other->magic_resist_);
  std::swap(evasion_, other->evasion_);
  std::swap(xp_needed_to_level_, other->xp_needed_to_level_);
  std::swap(ability_points_, other->ability_points_);
  std::swap(reliable_gold_, other->reliable_gold_);
  std::swap(unreliable_gold_, other->unreliable_gold_);
  std::swap(last_hits_, other->last_hits_);
  std::swap(denies_, other->denies_);
  std::swap(net_worth_, other->net_worth_);
  std::swap(strength_, other->strength_);
  std::swap(agility_, other->agility_);
  std::swap(intelligence_, other->intelligence_);
  std::swap(remaining_lifespan_, other->remaining_lifespan_);
  std::swap(is_illusion_, other->is_illusion_);
  std::swap(flying_courier_, other->flying_courier_);
  std::swap(is_shrine_healing_, other->is_shrine_healing_);
  std::swap(shrine_cooldown_, other->shrine_cooldown_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState_Unit::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState_Unit

// optional uint32 handle = 1;
bool CMsgBotWorldState_Unit::has_handle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Unit::set_has_handle() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState_Unit::clear_has_handle() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState_Unit::clear_handle() {
  handle_ = 0u;
  clear_has_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.handle)
  return handle_;
}
void CMsgBotWorldState_Unit::set_handle(::google::protobuf::uint32 value) {
  set_has_handle();
  handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.handle)
}

// optional .proto.dota.CMsgBotWorldState.UnitType unit_type = 2 [default = INVALID];
bool CMsgBotWorldState_Unit::has_unit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Unit::set_has_unit_type() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState_Unit::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState_Unit::clear_unit_type() {
  unit_type_ = 0;
  clear_has_unit_type();
}
::proto::dota::CMsgBotWorldState_UnitType CMsgBotWorldState_Unit::unit_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.unit_type)
  return static_cast< ::proto::dota::CMsgBotWorldState_UnitType >(unit_type_);
}
void CMsgBotWorldState_Unit::set_unit_type(::proto::dota::CMsgBotWorldState_UnitType value) {
  assert(::proto::dota::CMsgBotWorldState_UnitType_IsValid(value));
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.unit_type)
}

// optional string name = 3;
bool CMsgBotWorldState_Unit::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Unit::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState_Unit::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState_Unit::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgBotWorldState_Unit::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.name)
  return name_.GetNoArena();
}
void CMsgBotWorldState_Unit::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.name)
}
#if LANG_CXX11
void CMsgBotWorldState_Unit::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgBotWorldState.Unit.name)
}
#endif
void CMsgBotWorldState_Unit::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgBotWorldState.Unit.name)
}
void CMsgBotWorldState_Unit::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgBotWorldState.Unit.name)
}
::std::string* CMsgBotWorldState_Unit::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBotWorldState_Unit::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Unit.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBotWorldState_Unit::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Unit.name)
}

// optional uint32 team_id = 4;
bool CMsgBotWorldState_Unit::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Unit::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState_Unit::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState_Unit::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.team_id)
  return team_id_;
}
void CMsgBotWorldState_Unit::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.team_id)
}

// optional uint32 level = 5;
bool CMsgBotWorldState_Unit::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState_Unit::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState_Unit::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState_Unit::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.level)
  return level_;
}
void CMsgBotWorldState_Unit::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.level)
}

// optional .proto.dota.CMsgBotWorldState.Vector location = 6;
bool CMsgBotWorldState_Unit::has_location() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Unit::set_has_location() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState_Unit::clear_has_location() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState_Unit::clear_location() {
  if (location_ != NULL) location_->::proto::dota::CMsgBotWorldState_Vector::Clear();
  clear_has_location();
}
const ::proto::dota::CMsgBotWorldState_Vector& CMsgBotWorldState_Unit::location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.location)
  return location_ != NULL ? *location_
                         : *::proto::dota::CMsgBotWorldState_Vector::internal_default_instance();
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    location_ = new ::proto::dota::CMsgBotWorldState_Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.location)
  return location_;
}
::proto::dota::CMsgBotWorldState_Vector* CMsgBotWorldState_Unit::release_location() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotWorldState.Unit.location)
  clear_has_location();
  ::proto::dota::CMsgBotWorldState_Vector* temp = location_;
  location_ = NULL;
  return temp;
}
void CMsgBotWorldState_Unit::set_allocated_location(::proto::dota::CMsgBotWorldState_Vector* location) {
  delete location_;
  location_ = location;
  if (location) {
    set_has_location();
  } else {
    clear_has_location();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotWorldState.Unit.location)
}

// optional bool is_alive = 7;
bool CMsgBotWorldState_Unit::has_is_alive() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_alive() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgBotWorldState_Unit::clear_has_is_alive() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgBotWorldState_Unit::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
bool CMsgBotWorldState_Unit::is_alive() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_alive)
  return is_alive_;
}
void CMsgBotWorldState_Unit::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_alive)
}

// optional int32 player_id = 8;
bool CMsgBotWorldState_Unit::has_player_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState_Unit::set_has_player_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState_Unit::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState_Unit::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
::google::protobuf::int32 CMsgBotWorldState_Unit::player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.player_id)
  return player_id_;
}
void CMsgBotWorldState_Unit::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.player_id)
}

// optional uint32 bounding_radius = 10;
bool CMsgBotWorldState_Unit::has_bounding_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBotWorldState_Unit::set_has_bounding_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBotWorldState_Unit::clear_has_bounding_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBotWorldState_Unit::clear_bounding_radius() {
  bounding_radius_ = 0u;
  clear_has_bounding_radius();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::bounding_radius() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounding_radius)
  return bounding_radius_;
}
void CMsgBotWorldState_Unit::set_bounding_radius(::google::protobuf::uint32 value) {
  set_has_bounding_radius();
  bounding_radius_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounding_radius)
}

// optional uint32 facing = 11;
bool CMsgBotWorldState_Unit::has_facing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgBotWorldState_Unit::set_has_facing() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgBotWorldState_Unit::clear_has_facing() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgBotWorldState_Unit::clear_facing() {
  facing_ = 0u;
  clear_has_facing();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::facing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.facing)
  return facing_;
}
void CMsgBotWorldState_Unit::set_facing(::google::protobuf::uint32 value) {
  set_has_facing();
  facing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.facing)
}

// optional uint32 ground_height = 12;
bool CMsgBotWorldState_Unit::has_ground_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgBotWorldState_Unit::set_has_ground_height() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgBotWorldState_Unit::clear_has_ground_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgBotWorldState_Unit::clear_ground_height() {
  ground_height_ = 0u;
  clear_has_ground_height();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::ground_height() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ground_height)
  return ground_height_;
}
void CMsgBotWorldState_Unit::set_ground_height(::google::protobuf::uint32 value) {
  set_has_ground_height();
  ground_height_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ground_height)
}

// optional uint32 vision_range_daytime = 15;
bool CMsgBotWorldState_Unit::has_vision_range_daytime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgBotWorldState_Unit::set_has_vision_range_daytime() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgBotWorldState_Unit::clear_has_vision_range_daytime() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgBotWorldState_Unit::clear_vision_range_daytime() {
  vision_range_daytime_ = 0u;
  clear_has_vision_range_daytime();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::vision_range_daytime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.vision_range_daytime)
  return vision_range_daytime_;
}
void CMsgBotWorldState_Unit::set_vision_range_daytime(::google::protobuf::uint32 value) {
  set_has_vision_range_daytime();
  vision_range_daytime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.vision_range_daytime)
}

// optional uint32 vision_range_nighttime = 16;
bool CMsgBotWorldState_Unit::has_vision_range_nighttime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgBotWorldState_Unit::set_has_vision_range_nighttime() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgBotWorldState_Unit::clear_has_vision_range_nighttime() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgBotWorldState_Unit::clear_vision_range_nighttime() {
  vision_range_nighttime_ = 0u;
  clear_has_vision_range_nighttime();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::vision_range_nighttime() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.vision_range_nighttime)
  return vision_range_nighttime_;
}
void CMsgBotWorldState_Unit::set_vision_range_nighttime(::google::protobuf::uint32 value) {
  set_has_vision_range_nighttime();
  vision_range_nighttime_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.vision_range_nighttime)
}

// optional uint32 health = 20;
bool CMsgBotWorldState_Unit::has_health() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_health() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgBotWorldState_Unit::clear_has_health() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgBotWorldState_Unit::clear_health() {
  health_ = 0u;
  clear_has_health();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health)
  return health_;
}
void CMsgBotWorldState_Unit::set_health(::google::protobuf::uint32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health)
}

// optional uint32 health_max = 21;
bool CMsgBotWorldState_Unit::has_health_max() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_health_max() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgBotWorldState_Unit::clear_has_health_max() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgBotWorldState_Unit::clear_health_max() {
  health_max_ = 0u;
  clear_has_health_max();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::health_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health_max)
  return health_max_;
}
void CMsgBotWorldState_Unit::set_health_max(::google::protobuf::uint32 value) {
  set_has_health_max();
  health_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health_max)
}

// optional float health_regen = 22;
bool CMsgBotWorldState_Unit::has_health_regen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_health_regen() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgBotWorldState_Unit::clear_has_health_regen() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgBotWorldState_Unit::clear_health_regen() {
  health_regen_ = 0;
  clear_has_health_regen();
}
float CMsgBotWorldState_Unit::health_regen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.health_regen)
  return health_regen_;
}
void CMsgBotWorldState_Unit::set_health_regen(float value) {
  set_has_health_regen();
  health_regen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.health_regen)
}

// optional uint32 mana = 25;
bool CMsgBotWorldState_Unit::has_mana() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_mana() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgBotWorldState_Unit::clear_has_mana() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgBotWorldState_Unit::clear_mana() {
  mana_ = 0u;
  clear_has_mana();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::mana() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana)
  return mana_;
}
void CMsgBotWorldState_Unit::set_mana(::google::protobuf::uint32 value) {
  set_has_mana();
  mana_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana)
}

// optional uint32 mana_max = 26;
bool CMsgBotWorldState_Unit::has_mana_max() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_mana_max() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgBotWorldState_Unit::clear_has_mana_max() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgBotWorldState_Unit::clear_mana_max() {
  mana_max_ = 0u;
  clear_has_mana_max();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::mana_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana_max)
  return mana_max_;
}
void CMsgBotWorldState_Unit::set_mana_max(::google::protobuf::uint32 value) {
  set_has_mana_max();
  mana_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana_max)
}

// optional float mana_regen = 27;
bool CMsgBotWorldState_Unit::has_mana_regen() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_mana_regen() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgBotWorldState_Unit::clear_has_mana_regen() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgBotWorldState_Unit::clear_mana_regen() {
  mana_regen_ = 0;
  clear_has_mana_regen();
}
float CMsgBotWorldState_Unit::mana_regen() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.mana_regen)
  return mana_regen_;
}
void CMsgBotWorldState_Unit::set_mana_regen(float value) {
  set_has_mana_regen();
  mana_regen_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.mana_regen)
}

// optional uint32 base_movement_speed = 30;
bool CMsgBotWorldState_Unit::has_base_movement_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_base_movement_speed() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgBotWorldState_Unit::clear_has_base_movement_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgBotWorldState_Unit::clear_base_movement_speed() {
  base_movement_speed_ = 0u;
  clear_has_base_movement_speed();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::base_movement_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_movement_speed)
  return base_movement_speed_;
}
void CMsgBotWorldState_Unit::set_base_movement_speed(::google::protobuf::uint32 value) {
  set_has_base_movement_speed();
  base_movement_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_movement_speed)
}

// optional uint32 current_movement_speed = 31;
bool CMsgBotWorldState_Unit::has_current_movement_speed() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_current_movement_speed() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgBotWorldState_Unit::clear_has_current_movement_speed() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgBotWorldState_Unit::clear_current_movement_speed() {
  current_movement_speed_ = 0u;
  clear_has_current_movement_speed();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::current_movement_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.current_movement_speed)
  return current_movement_speed_;
}
void CMsgBotWorldState_Unit::set_current_movement_speed(::google::protobuf::uint32 value) {
  set_has_current_movement_speed();
  current_movement_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.current_movement_speed)
}

// optional int32 anim_activity = 35;
bool CMsgBotWorldState_Unit::has_anim_activity() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_anim_activity() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgBotWorldState_Unit::clear_has_anim_activity() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgBotWorldState_Unit::clear_anim_activity() {
  anim_activity_ = 0;
  clear_has_anim_activity();
}
::google::protobuf::int32 CMsgBotWorldState_Unit::anim_activity() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.anim_activity)
  return anim_activity_;
}
void CMsgBotWorldState_Unit::set_anim_activity(::google::protobuf::int32 value) {
  set_has_anim_activity();
  anim_activity_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.anim_activity)
}

// optional float anim_cycle = 36;
bool CMsgBotWorldState_Unit::has_anim_cycle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_anim_cycle() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgBotWorldState_Unit::clear_has_anim_cycle() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgBotWorldState_Unit::clear_anim_cycle() {
  anim_cycle_ = 0;
  clear_has_anim_cycle();
}
float CMsgBotWorldState_Unit::anim_cycle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.anim_cycle)
  return anim_cycle_;
}
void CMsgBotWorldState_Unit::set_anim_cycle(float value) {
  set_has_anim_cycle();
  anim_cycle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.anim_cycle)
}

// optional uint32 base_damage = 40;
bool CMsgBotWorldState_Unit::has_base_damage() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_base_damage() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgBotWorldState_Unit::clear_has_base_damage() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgBotWorldState_Unit::clear_base_damage() {
  base_damage_ = 0u;
  clear_has_base_damage();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::base_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_damage)
  return base_damage_;
}
void CMsgBotWorldState_Unit::set_base_damage(::google::protobuf::uint32 value) {
  set_has_base_damage();
  base_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_damage)
}

// optional uint32 base_damage_variance = 41;
bool CMsgBotWorldState_Unit::has_base_damage_variance() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_base_damage_variance() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgBotWorldState_Unit::clear_has_base_damage_variance() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgBotWorldState_Unit::clear_base_damage_variance() {
  base_damage_variance_ = 0u;
  clear_has_base_damage_variance();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::base_damage_variance() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.base_damage_variance)
  return base_damage_variance_;
}
void CMsgBotWorldState_Unit::set_base_damage_variance(::google::protobuf::uint32 value) {
  set_has_base_damage_variance();
  base_damage_variance_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.base_damage_variance)
}

// optional uint32 bonus_damage = 42;
bool CMsgBotWorldState_Unit::has_bonus_damage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_bonus_damage() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgBotWorldState_Unit::clear_has_bonus_damage() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgBotWorldState_Unit::clear_bonus_damage() {
  bonus_damage_ = 0u;
  clear_has_bonus_damage();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::bonus_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bonus_damage)
  return bonus_damage_;
}
void CMsgBotWorldState_Unit::set_bonus_damage(::google::protobuf::uint32 value) {
  set_has_bonus_damage();
  bonus_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bonus_damage)
}

// optional uint32 attack_damage = 43;
bool CMsgBotWorldState_Unit::has_attack_damage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_damage() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_damage() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgBotWorldState_Unit::clear_attack_damage() {
  attack_damage_ = 0u;
  clear_has_attack_damage();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_damage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_damage)
  return attack_damage_;
}
void CMsgBotWorldState_Unit::set_attack_damage(::google::protobuf::uint32 value) {
  set_has_attack_damage();
  attack_damage_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_damage)
}

// optional uint32 attack_range = 44;
bool CMsgBotWorldState_Unit::has_attack_range() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_range() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_range() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgBotWorldState_Unit::clear_attack_range() {
  attack_range_ = 0u;
  clear_has_attack_range();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_range)
  return attack_range_;
}
void CMsgBotWorldState_Unit::set_attack_range(::google::protobuf::uint32 value) {
  set_has_attack_range();
  attack_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_range)
}

// optional float attack_speed = 45;
bool CMsgBotWorldState_Unit::has_attack_speed() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_speed() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_speed() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgBotWorldState_Unit::clear_attack_speed() {
  attack_speed_ = 0;
  clear_has_attack_speed();
}
float CMsgBotWorldState_Unit::attack_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_speed)
  return attack_speed_;
}
void CMsgBotWorldState_Unit::set_attack_speed(float value) {
  set_has_attack_speed();
  attack_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_speed)
}

// optional float attack_anim_point = 46;
bool CMsgBotWorldState_Unit::has_attack_anim_point() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_anim_point() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_anim_point() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgBotWorldState_Unit::clear_attack_anim_point() {
  attack_anim_point_ = 0;
  clear_has_attack_anim_point();
}
float CMsgBotWorldState_Unit::attack_anim_point() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_anim_point)
  return attack_anim_point_;
}
void CMsgBotWorldState_Unit::set_attack_anim_point(float value) {
  set_has_attack_anim_point();
  attack_anim_point_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_anim_point)
}

// optional uint32 attack_acquisition_range = 47;
bool CMsgBotWorldState_Unit::has_attack_acquisition_range() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_acquisition_range() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_acquisition_range() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgBotWorldState_Unit::clear_attack_acquisition_range() {
  attack_acquisition_range_ = 0u;
  clear_has_attack_acquisition_range();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_acquisition_range() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_acquisition_range)
  return attack_acquisition_range_;
}
void CMsgBotWorldState_Unit::set_attack_acquisition_range(::google::protobuf::uint32 value) {
  set_has_attack_acquisition_range();
  attack_acquisition_range_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_acquisition_range)
}

// optional uint32 attack_projectile_speed = 48;
bool CMsgBotWorldState_Unit::has_attack_projectile_speed() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_projectile_speed() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_projectile_speed() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgBotWorldState_Unit::clear_attack_projectile_speed() {
  attack_projectile_speed_ = 0u;
  clear_has_attack_projectile_speed();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_projectile_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_projectile_speed)
  return attack_projectile_speed_;
}
void CMsgBotWorldState_Unit::set_attack_projectile_speed(::google::protobuf::uint32 value) {
  set_has_attack_projectile_speed();
  attack_projectile_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_projectile_speed)
}

// optional uint32 attack_target_handle = 49;
bool CMsgBotWorldState_Unit::has_attack_target_handle() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_attack_target_handle() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgBotWorldState_Unit::clear_has_attack_target_handle() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgBotWorldState_Unit::clear_attack_target_handle() {
  attack_target_handle_ = 0u;
  clear_has_attack_target_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::attack_target_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.attack_target_handle)
  return attack_target_handle_;
}
void CMsgBotWorldState_Unit::set_attack_target_handle(::google::protobuf::uint32 value) {
  set_has_attack_target_handle();
  attack_target_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.attack_target_handle)
}

// optional uint32 bounty_xp = 60;
bool CMsgBotWorldState_Unit::has_bounty_xp() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Unit::set_has_bounty_xp() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgBotWorldState_Unit::clear_has_bounty_xp() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgBotWorldState_Unit::clear_bounty_xp() {
  bounty_xp_ = 0u;
  clear_has_bounty_xp();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_xp)
  return bounty_xp_;
}
void CMsgBotWorldState_Unit::set_bounty_xp(::google::protobuf::uint32 value) {
  set_has_bounty_xp();
  bounty_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_xp)
}

// optional uint32 bounty_gold_min = 61;
bool CMsgBotWorldState_Unit::has_bounty_gold_min() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgBotWorldState_Unit::set_has_bounty_gold_min() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgBotWorldState_Unit::clear_has_bounty_gold_min() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgBotWorldState_Unit::clear_bounty_gold_min() {
  bounty_gold_min_ = 0u;
  clear_has_bounty_gold_min();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_gold_min() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_gold_min)
  return bounty_gold_min_;
}
void CMsgBotWorldState_Unit::set_bounty_gold_min(::google::protobuf::uint32 value) {
  set_has_bounty_gold_min();
  bounty_gold_min_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_gold_min)
}

// optional uint32 bounty_gold_max = 62;
bool CMsgBotWorldState_Unit::has_bounty_gold_max() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgBotWorldState_Unit::set_has_bounty_gold_max() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgBotWorldState_Unit::clear_has_bounty_gold_max() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgBotWorldState_Unit::clear_bounty_gold_max() {
  bounty_gold_max_ = 0u;
  clear_has_bounty_gold_max();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::bounty_gold_max() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.bounty_gold_max)
  return bounty_gold_max_;
}
void CMsgBotWorldState_Unit::set_bounty_gold_max(::google::protobuf::uint32 value) {
  set_has_bounty_gold_max();
  bounty_gold_max_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.bounty_gold_max)
}

// optional bool is_channeling = 65;
bool CMsgBotWorldState_Unit::has_is_channeling() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_channeling() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgBotWorldState_Unit::clear_has_is_channeling() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgBotWorldState_Unit::clear_is_channeling() {
  is_channeling_ = false;
  clear_has_is_channeling();
}
bool CMsgBotWorldState_Unit::is_channeling() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_channeling)
  return is_channeling_;
}
void CMsgBotWorldState_Unit::set_is_channeling(bool value) {
  set_has_is_channeling();
  is_channeling_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_channeling)
}

// optional uint32 active_ability_handle = 66;
bool CMsgBotWorldState_Unit::has_active_ability_handle() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgBotWorldState_Unit::set_has_active_ability_handle() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgBotWorldState_Unit::clear_has_active_ability_handle() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgBotWorldState_Unit::clear_active_ability_handle() {
  active_ability_handle_ = 0u;
  clear_has_active_ability_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::active_ability_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.active_ability_handle)
  return active_ability_handle_;
}
void CMsgBotWorldState_Unit::set_active_ability_handle(::google::protobuf::uint32 value) {
  set_has_active_ability_handle();
  active_ability_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.active_ability_handle)
}

// optional bool is_attack_immune = 70;
bool CMsgBotWorldState_Unit::has_is_attack_immune() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_attack_immune() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgBotWorldState_Unit::clear_has_is_attack_immune() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgBotWorldState_Unit::clear_is_attack_immune() {
  is_attack_immune_ = false;
  clear_has_is_attack_immune();
}
bool CMsgBotWorldState_Unit::is_attack_immune() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_attack_immune)
  return is_attack_immune_;
}
void CMsgBotWorldState_Unit::set_is_attack_immune(bool value) {
  set_has_is_attack_immune();
  is_attack_immune_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_attack_immune)
}

// optional bool is_blind = 71;
bool CMsgBotWorldState_Unit::has_is_blind() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_blind() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgBotWorldState_Unit::clear_has_is_blind() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgBotWorldState_Unit::clear_is_blind() {
  is_blind_ = false;
  clear_has_is_blind();
}
bool CMsgBotWorldState_Unit::is_blind() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_blind)
  return is_blind_;
}
void CMsgBotWorldState_Unit::set_is_blind(bool value) {
  set_has_is_blind();
  is_blind_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_blind)
}

// optional bool is_block_disabled = 72;
bool CMsgBotWorldState_Unit::has_is_block_disabled() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_block_disabled() {
  _has_bits_[1] |= 0x00000100u;
}
void CMsgBotWorldState_Unit::clear_has_is_block_disabled() {
  _has_bits_[1] &= ~0x00000100u;
}
void CMsgBotWorldState_Unit::clear_is_block_disabled() {
  is_block_disabled_ = false;
  clear_has_is_block_disabled();
}
bool CMsgBotWorldState_Unit::is_block_disabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_block_disabled)
  return is_block_disabled_;
}
void CMsgBotWorldState_Unit::set_is_block_disabled(bool value) {
  set_has_is_block_disabled();
  is_block_disabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_block_disabled)
}

// optional bool is_disarmed = 73;
bool CMsgBotWorldState_Unit::has_is_disarmed() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_disarmed() {
  _has_bits_[1] |= 0x00000200u;
}
void CMsgBotWorldState_Unit::clear_has_is_disarmed() {
  _has_bits_[1] &= ~0x00000200u;
}
void CMsgBotWorldState_Unit::clear_is_disarmed() {
  is_disarmed_ = false;
  clear_has_is_disarmed();
}
bool CMsgBotWorldState_Unit::is_disarmed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_disarmed)
  return is_disarmed_;
}
void CMsgBotWorldState_Unit::set_is_disarmed(bool value) {
  set_has_is_disarmed();
  is_disarmed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_disarmed)
}

// optional bool is_dominated = 74;
bool CMsgBotWorldState_Unit::has_is_dominated() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_dominated() {
  _has_bits_[1] |= 0x00000400u;
}
void CMsgBotWorldState_Unit::clear_has_is_dominated() {
  _has_bits_[1] &= ~0x00000400u;
}
void CMsgBotWorldState_Unit::clear_is_dominated() {
  is_dominated_ = false;
  clear_has_is_dominated();
}
bool CMsgBotWorldState_Unit::is_dominated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_dominated)
  return is_dominated_;
}
void CMsgBotWorldState_Unit::set_is_dominated(bool value) {
  set_has_is_dominated();
  is_dominated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_dominated)
}

// optional bool is_evade_disabled = 75;
bool CMsgBotWorldState_Unit::has_is_evade_disabled() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_evade_disabled() {
  _has_bits_[1] |= 0x00000800u;
}
void CMsgBotWorldState_Unit::clear_has_is_evade_disabled() {
  _has_bits_[1] &= ~0x00000800u;
}
void CMsgBotWorldState_Unit::clear_is_evade_disabled() {
  is_evade_disabled_ = false;
  clear_has_is_evade_disabled();
}
bool CMsgBotWorldState_Unit::is_evade_disabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_evade_disabled)
  return is_evade_disabled_;
}
void CMsgBotWorldState_Unit::set_is_evade_disabled(bool value) {
  set_has_is_evade_disabled();
  is_evade_disabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_evade_disabled)
}

// optional bool is_hexed = 76;
bool CMsgBotWorldState_Unit::has_is_hexed() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_hexed() {
  _has_bits_[1] |= 0x00001000u;
}
void CMsgBotWorldState_Unit::clear_has_is_hexed() {
  _has_bits_[1] &= ~0x00001000u;
}
void CMsgBotWorldState_Unit::clear_is_hexed() {
  is_hexed_ = false;
  clear_has_is_hexed();
}
bool CMsgBotWorldState_Unit::is_hexed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_hexed)
  return is_hexed_;
}
void CMsgBotWorldState_Unit::set_is_hexed(bool value) {
  set_has_is_hexed();
  is_hexed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_hexed)
}

// optional bool is_invisible = 77;
bool CMsgBotWorldState_Unit::has_is_invisible() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_invisible() {
  _has_bits_[1] |= 0x00002000u;
}
void CMsgBotWorldState_Unit::clear_has_is_invisible() {
  _has_bits_[1] &= ~0x00002000u;
}
void CMsgBotWorldState_Unit::clear_is_invisible() {
  is_invisible_ = false;
  clear_has_is_invisible();
}
bool CMsgBotWorldState_Unit::is_invisible() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_invisible)
  return is_invisible_;
}
void CMsgBotWorldState_Unit::set_is_invisible(bool value) {
  set_has_is_invisible();
  is_invisible_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_invisible)
}

// optional bool is_invulnerable = 78;
bool CMsgBotWorldState_Unit::has_is_invulnerable() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_invulnerable() {
  _has_bits_[1] |= 0x00004000u;
}
void CMsgBotWorldState_Unit::clear_has_is_invulnerable() {
  _has_bits_[1] &= ~0x00004000u;
}
void CMsgBotWorldState_Unit::clear_is_invulnerable() {
  is_invulnerable_ = false;
  clear_has_is_invulnerable();
}
bool CMsgBotWorldState_Unit::is_invulnerable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_invulnerable)
  return is_invulnerable_;
}
void CMsgBotWorldState_Unit::set_is_invulnerable(bool value) {
  set_has_is_invulnerable();
  is_invulnerable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_invulnerable)
}

// optional bool is_magic_immune = 79;
bool CMsgBotWorldState_Unit::has_is_magic_immune() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_magic_immune() {
  _has_bits_[1] |= 0x00008000u;
}
void CMsgBotWorldState_Unit::clear_has_is_magic_immune() {
  _has_bits_[1] &= ~0x00008000u;
}
void CMsgBotWorldState_Unit::clear_is_magic_immune() {
  is_magic_immune_ = false;
  clear_has_is_magic_immune();
}
bool CMsgBotWorldState_Unit::is_magic_immune() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_magic_immune)
  return is_magic_immune_;
}
void CMsgBotWorldState_Unit::set_is_magic_immune(bool value) {
  set_has_is_magic_immune();
  is_magic_immune_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_magic_immune)
}

// optional bool is_muted = 80;
bool CMsgBotWorldState_Unit::has_is_muted() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_muted() {
  _has_bits_[1] |= 0x00010000u;
}
void CMsgBotWorldState_Unit::clear_has_is_muted() {
  _has_bits_[1] &= ~0x00010000u;
}
void CMsgBotWorldState_Unit::clear_is_muted() {
  is_muted_ = false;
  clear_has_is_muted();
}
bool CMsgBotWorldState_Unit::is_muted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_muted)
  return is_muted_;
}
void CMsgBotWorldState_Unit::set_is_muted(bool value) {
  set_has_is_muted();
  is_muted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_muted)
}

// optional bool is_nightmared = 82;
bool CMsgBotWorldState_Unit::has_is_nightmared() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_nightmared() {
  _has_bits_[1] |= 0x00020000u;
}
void CMsgBotWorldState_Unit::clear_has_is_nightmared() {
  _has_bits_[1] &= ~0x00020000u;
}
void CMsgBotWorldState_Unit::clear_is_nightmared() {
  is_nightmared_ = false;
  clear_has_is_nightmared();
}
bool CMsgBotWorldState_Unit::is_nightmared() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_nightmared)
  return is_nightmared_;
}
void CMsgBotWorldState_Unit::set_is_nightmared(bool value) {
  set_has_is_nightmared();
  is_nightmared_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_nightmared)
}

// optional bool is_rooted = 83;
bool CMsgBotWorldState_Unit::has_is_rooted() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_rooted() {
  _has_bits_[1] |= 0x00040000u;
}
void CMsgBotWorldState_Unit::clear_has_is_rooted() {
  _has_bits_[1] &= ~0x00040000u;
}
void CMsgBotWorldState_Unit::clear_is_rooted() {
  is_rooted_ = false;
  clear_has_is_rooted();
}
bool CMsgBotWorldState_Unit::is_rooted() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_rooted)
  return is_rooted_;
}
void CMsgBotWorldState_Unit::set_is_rooted(bool value) {
  set_has_is_rooted();
  is_rooted_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_rooted)
}

// optional bool is_silenced = 84;
bool CMsgBotWorldState_Unit::has_is_silenced() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_silenced() {
  _has_bits_[1] |= 0x00080000u;
}
void CMsgBotWorldState_Unit::clear_has_is_silenced() {
  _has_bits_[1] &= ~0x00080000u;
}
void CMsgBotWorldState_Unit::clear_is_silenced() {
  is_silenced_ = false;
  clear_has_is_silenced();
}
bool CMsgBotWorldState_Unit::is_silenced() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_silenced)
  return is_silenced_;
}
void CMsgBotWorldState_Unit::set_is_silenced(bool value) {
  set_has_is_silenced();
  is_silenced_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_silenced)
}

// optional bool is_specially_deniable = 85;
bool CMsgBotWorldState_Unit::has_is_specially_deniable() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_specially_deniable() {
  _has_bits_[1] |= 0x00100000u;
}
void CMsgBotWorldState_Unit::clear_has_is_specially_deniable() {
  _has_bits_[1] &= ~0x00100000u;
}
void CMsgBotWorldState_Unit::clear_is_specially_deniable() {
  is_specially_deniable_ = false;
  clear_has_is_specially_deniable();
}
bool CMsgBotWorldState_Unit::is_specially_deniable() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_specially_deniable)
  return is_specially_deniable_;
}
void CMsgBotWorldState_Unit::set_is_specially_deniable(bool value) {
  set_has_is_specially_deniable();
  is_specially_deniable_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_specially_deniable)
}

// optional bool is_stunned = 86;
bool CMsgBotWorldState_Unit::has_is_stunned() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_stunned() {
  _has_bits_[1] |= 0x00200000u;
}
void CMsgBotWorldState_Unit::clear_has_is_stunned() {
  _has_bits_[1] &= ~0x00200000u;
}
void CMsgBotWorldState_Unit::clear_is_stunned() {
  is_stunned_ = false;
  clear_has_is_stunned();
}
bool CMsgBotWorldState_Unit::is_stunned() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_stunned)
  return is_stunned_;
}
void CMsgBotWorldState_Unit::set_is_stunned(bool value) {
  set_has_is_stunned();
  is_stunned_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_stunned)
}

// optional bool is_unable_to_miss = 87;
bool CMsgBotWorldState_Unit::has_is_unable_to_miss() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_unable_to_miss() {
  _has_bits_[1] |= 0x00400000u;
}
void CMsgBotWorldState_Unit::clear_has_is_unable_to_miss() {
  _has_bits_[1] &= ~0x00400000u;
}
void CMsgBotWorldState_Unit::clear_is_unable_to_miss() {
  is_unable_to_miss_ = false;
  clear_has_is_unable_to_miss();
}
bool CMsgBotWorldState_Unit::is_unable_to_miss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_unable_to_miss)
  return is_unable_to_miss_;
}
void CMsgBotWorldState_Unit::set_is_unable_to_miss(bool value) {
  set_has_is_unable_to_miss();
  is_unable_to_miss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_unable_to_miss)
}

// optional bool has_scepter = 88;
bool CMsgBotWorldState_Unit::has_has_scepter() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_has_scepter() {
  _has_bits_[1] |= 0x00800000u;
}
void CMsgBotWorldState_Unit::clear_has_has_scepter() {
  _has_bits_[1] &= ~0x00800000u;
}
void CMsgBotWorldState_Unit::clear_has_scepter() {
  has_scepter_ = false;
  clear_has_has_scepter();
}
bool CMsgBotWorldState_Unit::has_scepter() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.has_scepter)
  return has_scepter_;
}
void CMsgBotWorldState_Unit::set_has_scepter(bool value) {
  set_has_has_scepter();
  has_scepter_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.has_scepter)
}

// repeated .proto.dota.CMsgBotWorldState.Ability abilities = 90;
int CMsgBotWorldState_Unit::abilities_size() const {
  return abilities_.size();
}
void CMsgBotWorldState_Unit::clear_abilities() {
  abilities_.Clear();
}
const ::proto::dota::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::abilities(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Get(index);
}
::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_abilities() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::abilities() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.abilities)
  return abilities_;
}

// repeated .proto.dota.CMsgBotWorldState.Ability items = 91;
int CMsgBotWorldState_Unit::items_size() const {
  return items_.size();
}
void CMsgBotWorldState_Unit::clear_items() {
  items_.Clear();
}
const ::proto::dota::CMsgBotWorldState_Ability& CMsgBotWorldState_Unit::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Get(index);
}
::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_Ability* CMsgBotWorldState_Unit::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >*
CMsgBotWorldState_Unit::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Ability >&
CMsgBotWorldState_Unit::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.items)
  return items_;
}

// repeated .proto.dota.CMsgBotWorldState.Modifier modifiers = 92;
int CMsgBotWorldState_Unit::modifiers_size() const {
  return modifiers_.size();
}
void CMsgBotWorldState_Unit::clear_modifiers() {
  modifiers_.Clear();
}
const ::proto::dota::CMsgBotWorldState_Modifier& CMsgBotWorldState_Unit::modifiers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Get(index);
}
::proto::dota::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::mutable_modifiers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_Modifier* CMsgBotWorldState_Unit::add_modifiers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >*
CMsgBotWorldState_Unit::mutable_modifiers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return &modifiers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Modifier >&
CMsgBotWorldState_Unit::modifiers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.modifiers)
  return modifiers_;
}

// repeated .proto.dota.CMsgBotWorldState.TrackingProjectile incoming_tracking_projectiles = 93;
int CMsgBotWorldState_Unit::incoming_tracking_projectiles_size() const {
  return incoming_tracking_projectiles_.size();
}
void CMsgBotWorldState_Unit::clear_incoming_tracking_projectiles() {
  incoming_tracking_projectiles_.Clear();
}
const ::proto::dota::CMsgBotWorldState_TrackingProjectile& CMsgBotWorldState_Unit::incoming_tracking_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Get(index);
}
::proto::dota::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_TrackingProjectile* CMsgBotWorldState_Unit::add_incoming_tracking_projectiles() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >*
CMsgBotWorldState_Unit::mutable_incoming_tracking_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return &incoming_tracking_projectiles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TrackingProjectile >&
CMsgBotWorldState_Unit::incoming_tracking_projectiles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.Unit.incoming_tracking_projectiles)
  return incoming_tracking_projectiles_;
}

// optional uint32 action_type = 100;
bool CMsgBotWorldState_Unit::has_action_type() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_action_type() {
  _has_bits_[1] |= 0x01000000u;
}
void CMsgBotWorldState_Unit::clear_has_action_type() {
  _has_bits_[1] &= ~0x01000000u;
}
void CMsgBotWorldState_Unit::clear_action_type() {
  action_type_ = 0u;
  clear_has_action_type();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::action_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.action_type)
  return action_type_;
}
void CMsgBotWorldState_Unit::set_action_type(::google::protobuf::uint32 value) {
  set_has_action_type();
  action_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.action_type)
}

// optional uint32 ability_target_handle = 101;
bool CMsgBotWorldState_Unit::has_ability_target_handle() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_ability_target_handle() {
  _has_bits_[1] |= 0x02000000u;
}
void CMsgBotWorldState_Unit::clear_has_ability_target_handle() {
  _has_bits_[1] &= ~0x02000000u;
}
void CMsgBotWorldState_Unit::clear_ability_target_handle() {
  ability_target_handle_ = 0u;
  clear_has_ability_target_handle();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::ability_target_handle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ability_target_handle)
  return ability_target_handle_;
}
void CMsgBotWorldState_Unit::set_ability_target_handle(::google::protobuf::uint32 value) {
  set_has_ability_target_handle();
  ability_target_handle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ability_target_handle)
}

// optional uint32 primary_attribute = 110;
bool CMsgBotWorldState_Unit::has_primary_attribute() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_primary_attribute() {
  _has_bits_[1] |= 0x04000000u;
}
void CMsgBotWorldState_Unit::clear_has_primary_attribute() {
  _has_bits_[1] &= ~0x04000000u;
}
void CMsgBotWorldState_Unit::clear_primary_attribute() {
  primary_attribute_ = 0u;
  clear_has_primary_attribute();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::primary_attribute() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.primary_attribute)
  return primary_attribute_;
}
void CMsgBotWorldState_Unit::set_primary_attribute(::google::protobuf::uint32 value) {
  set_has_primary_attribute();
  primary_attribute_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.primary_attribute)
}

// optional bool is_illusion = 111;
bool CMsgBotWorldState_Unit::has_is_illusion() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_illusion() {
  _has_bits_[2] |= 0x00002000u;
}
void CMsgBotWorldState_Unit::clear_has_is_illusion() {
  _has_bits_[2] &= ~0x00002000u;
}
void CMsgBotWorldState_Unit::clear_is_illusion() {
  is_illusion_ = false;
  clear_has_is_illusion();
}
bool CMsgBotWorldState_Unit::is_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_illusion)
  return is_illusion_;
}
void CMsgBotWorldState_Unit::set_is_illusion(bool value) {
  set_has_is_illusion();
  is_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_illusion)
}

// optional uint32 respawn_time = 112;
bool CMsgBotWorldState_Unit::has_respawn_time() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_respawn_time() {
  _has_bits_[1] |= 0x08000000u;
}
void CMsgBotWorldState_Unit::clear_has_respawn_time() {
  _has_bits_[1] &= ~0x08000000u;
}
void CMsgBotWorldState_Unit::clear_respawn_time() {
  respawn_time_ = 0u;
  clear_has_respawn_time();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::respawn_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.respawn_time)
  return respawn_time_;
}
void CMsgBotWorldState_Unit::set_respawn_time(::google::protobuf::uint32 value) {
  set_has_respawn_time();
  respawn_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.respawn_time)
}

// optional uint32 buyback_cost = 113;
bool CMsgBotWorldState_Unit::has_buyback_cost() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_buyback_cost() {
  _has_bits_[1] |= 0x10000000u;
}
void CMsgBotWorldState_Unit::clear_has_buyback_cost() {
  _has_bits_[1] &= ~0x10000000u;
}
void CMsgBotWorldState_Unit::clear_buyback_cost() {
  buyback_cost_ = 0u;
  clear_has_buyback_cost();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::buyback_cost() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.buyback_cost)
  return buyback_cost_;
}
void CMsgBotWorldState_Unit::set_buyback_cost(::google::protobuf::uint32 value) {
  set_has_buyback_cost();
  buyback_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.buyback_cost)
}

// optional float buyback_cooldown = 114;
bool CMsgBotWorldState_Unit::has_buyback_cooldown() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_buyback_cooldown() {
  _has_bits_[1] |= 0x20000000u;
}
void CMsgBotWorldState_Unit::clear_has_buyback_cooldown() {
  _has_bits_[1] &= ~0x20000000u;
}
void CMsgBotWorldState_Unit::clear_buyback_cooldown() {
  buyback_cooldown_ = 0;
  clear_has_buyback_cooldown();
}
float CMsgBotWorldState_Unit::buyback_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.buyback_cooldown)
  return buyback_cooldown_;
}
void CMsgBotWorldState_Unit::set_buyback_cooldown(float value) {
  set_has_buyback_cooldown();
  buyback_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.buyback_cooldown)
}

// optional float spell_amplification = 115;
bool CMsgBotWorldState_Unit::has_spell_amplification() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_spell_amplification() {
  _has_bits_[1] |= 0x40000000u;
}
void CMsgBotWorldState_Unit::clear_has_spell_amplification() {
  _has_bits_[1] &= ~0x40000000u;
}
void CMsgBotWorldState_Unit::clear_spell_amplification() {
  spell_amplification_ = 0;
  clear_has_spell_amplification();
}
float CMsgBotWorldState_Unit::spell_amplification() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.spell_amplification)
  return spell_amplification_;
}
void CMsgBotWorldState_Unit::set_spell_amplification(float value) {
  set_has_spell_amplification();
  spell_amplification_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.spell_amplification)
}

// optional float armor = 116;
bool CMsgBotWorldState_Unit::has_armor() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_armor() {
  _has_bits_[1] |= 0x80000000u;
}
void CMsgBotWorldState_Unit::clear_has_armor() {
  _has_bits_[1] &= ~0x80000000u;
}
void CMsgBotWorldState_Unit::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
float CMsgBotWorldState_Unit::armor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.armor)
  return armor_;
}
void CMsgBotWorldState_Unit::set_armor(float value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.armor)
}

// optional float magic_resist = 117;
bool CMsgBotWorldState_Unit::has_magic_resist() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void CMsgBotWorldState_Unit::set_has_magic_resist() {
  _has_bits_[2] |= 0x00000001u;
}
void CMsgBotWorldState_Unit::clear_has_magic_resist() {
  _has_bits_[2] &= ~0x00000001u;
}
void CMsgBotWorldState_Unit::clear_magic_resist() {
  magic_resist_ = 0;
  clear_has_magic_resist();
}
float CMsgBotWorldState_Unit::magic_resist() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.magic_resist)
  return magic_resist_;
}
void CMsgBotWorldState_Unit::set_magic_resist(float value) {
  set_has_magic_resist();
  magic_resist_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.magic_resist)
}

// optional float evasion = 118;
bool CMsgBotWorldState_Unit::has_evasion() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void CMsgBotWorldState_Unit::set_has_evasion() {
  _has_bits_[2] |= 0x00000002u;
}
void CMsgBotWorldState_Unit::clear_has_evasion() {
  _has_bits_[2] &= ~0x00000002u;
}
void CMsgBotWorldState_Unit::clear_evasion() {
  evasion_ = 0;
  clear_has_evasion();
}
float CMsgBotWorldState_Unit::evasion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.evasion)
  return evasion_;
}
void CMsgBotWorldState_Unit::set_evasion(float value) {
  set_has_evasion();
  evasion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.evasion)
}

// optional uint32 xp_needed_to_level = 120;
bool CMsgBotWorldState_Unit::has_xp_needed_to_level() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void CMsgBotWorldState_Unit::set_has_xp_needed_to_level() {
  _has_bits_[2] |= 0x00000004u;
}
void CMsgBotWorldState_Unit::clear_has_xp_needed_to_level() {
  _has_bits_[2] &= ~0x00000004u;
}
void CMsgBotWorldState_Unit::clear_xp_needed_to_level() {
  xp_needed_to_level_ = 0u;
  clear_has_xp_needed_to_level();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::xp_needed_to_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.xp_needed_to_level)
  return xp_needed_to_level_;
}
void CMsgBotWorldState_Unit::set_xp_needed_to_level(::google::protobuf::uint32 value) {
  set_has_xp_needed_to_level();
  xp_needed_to_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.xp_needed_to_level)
}

// optional uint32 ability_points = 121;
bool CMsgBotWorldState_Unit::has_ability_points() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void CMsgBotWorldState_Unit::set_has_ability_points() {
  _has_bits_[2] |= 0x00000008u;
}
void CMsgBotWorldState_Unit::clear_has_ability_points() {
  _has_bits_[2] &= ~0x00000008u;
}
void CMsgBotWorldState_Unit::clear_ability_points() {
  ability_points_ = 0u;
  clear_has_ability_points();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::ability_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.ability_points)
  return ability_points_;
}
void CMsgBotWorldState_Unit::set_ability_points(::google::protobuf::uint32 value) {
  set_has_ability_points();
  ability_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.ability_points)
}

// optional uint32 reliable_gold = 122;
bool CMsgBotWorldState_Unit::has_reliable_gold() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void CMsgBotWorldState_Unit::set_has_reliable_gold() {
  _has_bits_[2] |= 0x00000010u;
}
void CMsgBotWorldState_Unit::clear_has_reliable_gold() {
  _has_bits_[2] &= ~0x00000010u;
}
void CMsgBotWorldState_Unit::clear_reliable_gold() {
  reliable_gold_ = 0u;
  clear_has_reliable_gold();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::reliable_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.reliable_gold)
  return reliable_gold_;
}
void CMsgBotWorldState_Unit::set_reliable_gold(::google::protobuf::uint32 value) {
  set_has_reliable_gold();
  reliable_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.reliable_gold)
}

// optional uint32 unreliable_gold = 123;
bool CMsgBotWorldState_Unit::has_unreliable_gold() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void CMsgBotWorldState_Unit::set_has_unreliable_gold() {
  _has_bits_[2] |= 0x00000020u;
}
void CMsgBotWorldState_Unit::clear_has_unreliable_gold() {
  _has_bits_[2] &= ~0x00000020u;
}
void CMsgBotWorldState_Unit::clear_unreliable_gold() {
  unreliable_gold_ = 0u;
  clear_has_unreliable_gold();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::unreliable_gold() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.unreliable_gold)
  return unreliable_gold_;
}
void CMsgBotWorldState_Unit::set_unreliable_gold(::google::protobuf::uint32 value) {
  set_has_unreliable_gold();
  unreliable_gold_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.unreliable_gold)
}

// optional uint32 last_hits = 124;
bool CMsgBotWorldState_Unit::has_last_hits() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void CMsgBotWorldState_Unit::set_has_last_hits() {
  _has_bits_[2] |= 0x00000040u;
}
void CMsgBotWorldState_Unit::clear_has_last_hits() {
  _has_bits_[2] &= ~0x00000040u;
}
void CMsgBotWorldState_Unit::clear_last_hits() {
  last_hits_ = 0u;
  clear_has_last_hits();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.last_hits)
  return last_hits_;
}
void CMsgBotWorldState_Unit::set_last_hits(::google::protobuf::uint32 value) {
  set_has_last_hits();
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.last_hits)
}

// optional uint32 denies = 125;
bool CMsgBotWorldState_Unit::has_denies() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void CMsgBotWorldState_Unit::set_has_denies() {
  _has_bits_[2] |= 0x00000080u;
}
void CMsgBotWorldState_Unit::clear_has_denies() {
  _has_bits_[2] &= ~0x00000080u;
}
void CMsgBotWorldState_Unit::clear_denies() {
  denies_ = 0u;
  clear_has_denies();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::denies() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.denies)
  return denies_;
}
void CMsgBotWorldState_Unit::set_denies(::google::protobuf::uint32 value) {
  set_has_denies();
  denies_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.denies)
}

// optional uint32 net_worth = 126;
bool CMsgBotWorldState_Unit::has_net_worth() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void CMsgBotWorldState_Unit::set_has_net_worth() {
  _has_bits_[2] |= 0x00000100u;
}
void CMsgBotWorldState_Unit::clear_has_net_worth() {
  _has_bits_[2] &= ~0x00000100u;
}
void CMsgBotWorldState_Unit::clear_net_worth() {
  net_worth_ = 0u;
  clear_has_net_worth();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::net_worth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.net_worth)
  return net_worth_;
}
void CMsgBotWorldState_Unit::set_net_worth(::google::protobuf::uint32 value) {
  set_has_net_worth();
  net_worth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.net_worth)
}

// optional uint32 strength = 127;
bool CMsgBotWorldState_Unit::has_strength() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void CMsgBotWorldState_Unit::set_has_strength() {
  _has_bits_[2] |= 0x00000200u;
}
void CMsgBotWorldState_Unit::clear_has_strength() {
  _has_bits_[2] &= ~0x00000200u;
}
void CMsgBotWorldState_Unit::clear_strength() {
  strength_ = 0u;
  clear_has_strength();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::strength() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.strength)
  return strength_;
}
void CMsgBotWorldState_Unit::set_strength(::google::protobuf::uint32 value) {
  set_has_strength();
  strength_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.strength)
}

// optional uint32 agility = 128;
bool CMsgBotWorldState_Unit::has_agility() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void CMsgBotWorldState_Unit::set_has_agility() {
  _has_bits_[2] |= 0x00000400u;
}
void CMsgBotWorldState_Unit::clear_has_agility() {
  _has_bits_[2] &= ~0x00000400u;
}
void CMsgBotWorldState_Unit::clear_agility() {
  agility_ = 0u;
  clear_has_agility();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::agility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.agility)
  return agility_;
}
void CMsgBotWorldState_Unit::set_agility(::google::protobuf::uint32 value) {
  set_has_agility();
  agility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.agility)
}

// optional uint32 intelligence = 129;
bool CMsgBotWorldState_Unit::has_intelligence() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void CMsgBotWorldState_Unit::set_has_intelligence() {
  _has_bits_[2] |= 0x00000800u;
}
void CMsgBotWorldState_Unit::clear_has_intelligence() {
  _has_bits_[2] &= ~0x00000800u;
}
void CMsgBotWorldState_Unit::clear_intelligence() {
  intelligence_ = 0u;
  clear_has_intelligence();
}
::google::protobuf::uint32 CMsgBotWorldState_Unit::intelligence() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.intelligence)
  return intelligence_;
}
void CMsgBotWorldState_Unit::set_intelligence(::google::protobuf::uint32 value) {
  set_has_intelligence();
  intelligence_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.intelligence)
}

// optional float remaining_lifespan = 130;
bool CMsgBotWorldState_Unit::has_remaining_lifespan() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_remaining_lifespan() {
  _has_bits_[2] |= 0x00001000u;
}
void CMsgBotWorldState_Unit::clear_has_remaining_lifespan() {
  _has_bits_[2] &= ~0x00001000u;
}
void CMsgBotWorldState_Unit::clear_remaining_lifespan() {
  remaining_lifespan_ = 0;
  clear_has_remaining_lifespan();
}
float CMsgBotWorldState_Unit::remaining_lifespan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.remaining_lifespan)
  return remaining_lifespan_;
}
void CMsgBotWorldState_Unit::set_remaining_lifespan(float value) {
  set_has_remaining_lifespan();
  remaining_lifespan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.remaining_lifespan)
}

// optional bool flying_courier = 140;
bool CMsgBotWorldState_Unit::has_flying_courier() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_flying_courier() {
  _has_bits_[2] |= 0x00004000u;
}
void CMsgBotWorldState_Unit::clear_has_flying_courier() {
  _has_bits_[2] &= ~0x00004000u;
}
void CMsgBotWorldState_Unit::clear_flying_courier() {
  flying_courier_ = false;
  clear_has_flying_courier();
}
bool CMsgBotWorldState_Unit::flying_courier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.flying_courier)
  return flying_courier_;
}
void CMsgBotWorldState_Unit::set_flying_courier(bool value) {
  set_has_flying_courier();
  flying_courier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.flying_courier)
}

// optional float shrine_cooldown = 150;
bool CMsgBotWorldState_Unit::has_shrine_cooldown() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_shrine_cooldown() {
  _has_bits_[2] |= 0x00010000u;
}
void CMsgBotWorldState_Unit::clear_has_shrine_cooldown() {
  _has_bits_[2] &= ~0x00010000u;
}
void CMsgBotWorldState_Unit::clear_shrine_cooldown() {
  shrine_cooldown_ = 0;
  clear_has_shrine_cooldown();
}
float CMsgBotWorldState_Unit::shrine_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.shrine_cooldown)
  return shrine_cooldown_;
}
void CMsgBotWorldState_Unit::set_shrine_cooldown(float value) {
  set_has_shrine_cooldown();
  shrine_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.shrine_cooldown)
}

// optional bool is_shrine_healing = 151;
bool CMsgBotWorldState_Unit::has_is_shrine_healing() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void CMsgBotWorldState_Unit::set_has_is_shrine_healing() {
  _has_bits_[2] |= 0x00008000u;
}
void CMsgBotWorldState_Unit::clear_has_is_shrine_healing() {
  _has_bits_[2] &= ~0x00008000u;
}
void CMsgBotWorldState_Unit::clear_is_shrine_healing() {
  is_shrine_healing_ = false;
  clear_has_is_shrine_healing();
}
bool CMsgBotWorldState_Unit::is_shrine_healing() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.Unit.is_shrine_healing)
  return is_shrine_healing_;
}
void CMsgBotWorldState_Unit::set_is_shrine_healing(bool value) {
  set_has_is_shrine_healing();
  is_shrine_healing_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.Unit.is_shrine_healing)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotWorldState::kTeamIdFieldNumber;
const int CMsgBotWorldState::kGameTimeFieldNumber;
const int CMsgBotWorldState::kDotaTimeFieldNumber;
const int CMsgBotWorldState::kGameStateFieldNumber;
const int CMsgBotWorldState::kHeroPickStateFieldNumber;
const int CMsgBotWorldState::kTimeOfDayFieldNumber;
const int CMsgBotWorldState::kGlyphCooldownFieldNumber;
const int CMsgBotWorldState::kGlyphCooldownEnemyFieldNumber;
const int CMsgBotWorldState::kPlayersFieldNumber;
const int CMsgBotWorldState::kUnitsFieldNumber;
const int CMsgBotWorldState::kDroppedItemsFieldNumber;
const int CMsgBotWorldState::kRuneInfosFieldNumber;
const int CMsgBotWorldState::kIncomingTeleportsFieldNumber;
const int CMsgBotWorldState::kLinearProjectilesFieldNumber;
const int CMsgBotWorldState::kAvoidanceZonesFieldNumber;
const int CMsgBotWorldState::kAbilityEventsFieldNumber;
const int CMsgBotWorldState::kDamageEventsFieldNumber;
const int CMsgBotWorldState::kCourierKilledEventsFieldNumber;
const int CMsgBotWorldState::kRoshanKilledEventsFieldNumber;
const int CMsgBotWorldState::kTreeEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotWorldState::CMsgBotWorldState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotWorldState)
}
CMsgBotWorldState::CMsgBotWorldState(const CMsgBotWorldState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      units_(from.units_),
      dropped_items_(from.dropped_items_),
      rune_infos_(from.rune_infos_),
      incoming_teleports_(from.incoming_teleports_),
      linear_projectiles_(from.linear_projectiles_),
      avoidance_zones_(from.avoidance_zones_),
      ability_events_(from.ability_events_),
      damage_events_(from.damage_events_),
      courier_killed_events_(from.courier_killed_events_),
      roshan_killed_events_(from.roshan_killed_events_),
      tree_events_(from.tree_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(glyph_cooldown_enemy_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotWorldState)
}

void CMsgBotWorldState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(glyph_cooldown_enemy_));
}

CMsgBotWorldState::~CMsgBotWorldState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotWorldState)
  SharedDtor();
}

void CMsgBotWorldState::SharedDtor() {
}

void CMsgBotWorldState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotWorldState::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotWorldState& CMsgBotWorldState::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotWorldState* CMsgBotWorldState::New(::google::protobuf::Arena* arena) const {
  CMsgBotWorldState* n = new CMsgBotWorldState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotWorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotWorldState)
  players_.Clear();
  units_.Clear();
  dropped_items_.Clear();
  rune_infos_.Clear();
  incoming_teleports_.Clear();
  linear_projectiles_.Clear();
  avoidance_zones_.Clear();
  ability_events_.Clear();
  damage_events_.Clear();
  courier_killed_events_.Clear();
  roshan_killed_events_.Clear();
  tree_events_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&glyph_cooldown_enemy_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(glyph_cooldown_enemy_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotWorldState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotWorldState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dota_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_dota_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dota_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_pick_state = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_hero_pick_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_pick_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time_of_day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_time_of_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_of_day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float glyph_cooldown = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_glyph_cooldown();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &glyph_cooldown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 glyph_cooldown_enemy = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_glyph_cooldown_enemy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &glyph_cooldown_enemy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.Player players = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropped_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rune_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_incoming_teleports()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linear_projectiles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avoidance_zones()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ability_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_courier_killed_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roshan_killed_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tree_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotWorldState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotWorldState)
  return false;
#undef DO_
}

void CMsgBotWorldState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotWorldState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional float game_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->game_time(), output);
  }

  // optional float dota_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dota_time(), output);
  }

  // optional uint32 game_state = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_state(), output);
  }

  // optional uint32 hero_pick_state = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hero_pick_state(), output);
  }

  // optional float time_of_day = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->time_of_day(), output);
  }

  // optional float glyph_cooldown = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->glyph_cooldown(), output);
  }

  // optional uint32 glyph_cooldown_enemy = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->glyph_cooldown_enemy(), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.Player players = 10;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->units(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
  for (unsigned int i = 0, n = this->dropped_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dropped_items(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
  for (unsigned int i = 0, n = this->rune_infos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rune_infos(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  for (unsigned int i = 0, n = this->incoming_teleports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->incoming_teleports(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
  for (unsigned int i = 0, n = this->linear_projectiles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->linear_projectiles(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  for (unsigned int i = 0, n = this->avoidance_zones_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->avoidance_zones(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
  for (unsigned int i = 0, n = this->ability_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ability_events(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
  for (unsigned int i = 0, n = this->damage_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->damage_events(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  for (unsigned int i = 0, n = this->courier_killed_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->courier_killed_events(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  for (unsigned int i = 0, n = this->roshan_killed_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->roshan_killed_events(i), output);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
  for (unsigned int i = 0, n = this->tree_events_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->tree_events(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotWorldState)
}

::google::protobuf::uint8* CMsgBotWorldState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotWorldState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional float game_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->game_time(), target);
  }

  // optional float dota_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dota_time(), target);
  }

  // optional uint32 game_state = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_state(), target);
  }

  // optional uint32 hero_pick_state = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->hero_pick_state(), target);
  }

  // optional float time_of_day = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->time_of_day(), target);
  }

  // optional float glyph_cooldown = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->glyph_cooldown(), target);
  }

  // optional uint32 glyph_cooldown_enemy = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->glyph_cooldown_enemy(), target);
  }

  // repeated .proto.dota.CMsgBotWorldState.Player players = 10;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->players(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->units(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
  for (unsigned int i = 0, n = this->dropped_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->dropped_items(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
  for (unsigned int i = 0, n = this->rune_infos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->rune_infos(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  for (unsigned int i = 0, n = this->incoming_teleports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->incoming_teleports(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
  for (unsigned int i = 0, n = this->linear_projectiles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->linear_projectiles(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  for (unsigned int i = 0, n = this->avoidance_zones_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->avoidance_zones(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
  for (unsigned int i = 0, n = this->ability_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, this->ability_events(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
  for (unsigned int i = 0, n = this->damage_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->damage_events(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  for (unsigned int i = 0, n = this->courier_killed_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->courier_killed_events(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  for (unsigned int i = 0, n = this->roshan_killed_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->roshan_killed_events(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
  for (unsigned int i = 0, n = this->tree_events_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->tree_events(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotWorldState)
  return target;
}

size_t CMsgBotWorldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotWorldState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgBotWorldState.Player players = 10;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
  {
    unsigned int count = this->units_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->units(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
  {
    unsigned int count = this->dropped_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dropped_items(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
  {
    unsigned int count = this->rune_infos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rune_infos(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
  {
    unsigned int count = this->incoming_teleports_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->incoming_teleports(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
  {
    unsigned int count = this->linear_projectiles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_projectiles(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
  {
    unsigned int count = this->avoidance_zones_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avoidance_zones(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
  {
    unsigned int count = this->ability_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ability_events(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
  {
    unsigned int count = this->damage_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damage_events(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
  {
    unsigned int count = this->courier_killed_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->courier_killed_events(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
  {
    unsigned int count = this->roshan_killed_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roshan_killed_events(i));
    }
  }

  // repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
  {
    unsigned int count = this->tree_events_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tree_events(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional float game_time = 2;
    if (has_game_time()) {
      total_size += 1 + 4;
    }

    // optional float dota_time = 3;
    if (has_dota_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 game_state = 4;
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_state());
    }

    // optional uint32 hero_pick_state = 5;
    if (has_hero_pick_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_pick_state());
    }

    // optional float time_of_day = 6;
    if (has_time_of_day()) {
      total_size += 1 + 4;
    }

    // optional float glyph_cooldown = 7;
    if (has_glyph_cooldown()) {
      total_size += 1 + 4;
    }

    // optional uint32 glyph_cooldown_enemy = 8;
    if (has_glyph_cooldown_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->glyph_cooldown_enemy());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotWorldState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotWorldState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotWorldState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotWorldState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotWorldState)
    MergeFrom(*source);
  }
}

void CMsgBotWorldState::MergeFrom(const CMsgBotWorldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotWorldState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  units_.MergeFrom(from.units_);
  dropped_items_.MergeFrom(from.dropped_items_);
  rune_infos_.MergeFrom(from.rune_infos_);
  incoming_teleports_.MergeFrom(from.incoming_teleports_);
  linear_projectiles_.MergeFrom(from.linear_projectiles_);
  avoidance_zones_.MergeFrom(from.avoidance_zones_);
  ability_events_.MergeFrom(from.ability_events_);
  damage_events_.MergeFrom(from.damage_events_);
  courier_killed_events_.MergeFrom(from.courier_killed_events_);
  roshan_killed_events_.MergeFrom(from.roshan_killed_events_);
  tree_events_.MergeFrom(from.tree_events_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      dota_time_ = from.dota_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000010u) {
      hero_pick_state_ = from.hero_pick_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_of_day_ = from.time_of_day_;
    }
    if (cached_has_bits & 0x00000040u) {
      glyph_cooldown_ = from.glyph_cooldown_;
    }
    if (cached_has_bits & 0x00000080u) {
      glyph_cooldown_enemy_ = from.glyph_cooldown_enemy_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotWorldState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotWorldState::CopyFrom(const CMsgBotWorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotWorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotWorldState::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->units())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->dropped_items())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->rune_infos())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->incoming_teleports())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->linear_projectiles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->avoidance_zones())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ability_events())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->tree_events())) return false;
  return true;
}

void CMsgBotWorldState::Swap(CMsgBotWorldState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotWorldState::InternalSwap(CMsgBotWorldState* other) {
  players_.InternalSwap(&other->players_);
  units_.InternalSwap(&other->units_);
  dropped_items_.InternalSwap(&other->dropped_items_);
  rune_infos_.InternalSwap(&other->rune_infos_);
  incoming_teleports_.InternalSwap(&other->incoming_teleports_);
  linear_projectiles_.InternalSwap(&other->linear_projectiles_);
  avoidance_zones_.InternalSwap(&other->avoidance_zones_);
  ability_events_.InternalSwap(&other->ability_events_);
  damage_events_.InternalSwap(&other->damage_events_);
  courier_killed_events_.InternalSwap(&other->courier_killed_events_);
  roshan_killed_events_.InternalSwap(&other->roshan_killed_events_);
  tree_events_.InternalSwap(&other->tree_events_);
  std::swap(team_id_, other->team_id_);
  std::swap(game_time_, other->game_time_);
  std::swap(dota_time_, other->dota_time_);
  std::swap(game_state_, other->game_state_);
  std::swap(hero_pick_state_, other->hero_pick_state_);
  std::swap(time_of_day_, other->time_of_day_);
  std::swap(glyph_cooldown_, other->glyph_cooldown_);
  std::swap(glyph_cooldown_enemy_, other->glyph_cooldown_enemy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotWorldState::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fbot_5fscript_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotWorldState

// optional uint32 team_id = 1;
bool CMsgBotWorldState::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotWorldState::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotWorldState::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotWorldState::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgBotWorldState::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.team_id)
  return team_id_;
}
void CMsgBotWorldState::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.team_id)
}

// optional float game_time = 2;
bool CMsgBotWorldState::has_game_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotWorldState::set_has_game_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotWorldState::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotWorldState::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
float CMsgBotWorldState::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.game_time)
  return game_time_;
}
void CMsgBotWorldState::set_game_time(float value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.game_time)
}

// optional float dota_time = 3;
bool CMsgBotWorldState::has_dota_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotWorldState::set_has_dota_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotWorldState::clear_has_dota_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotWorldState::clear_dota_time() {
  dota_time_ = 0;
  clear_has_dota_time();
}
float CMsgBotWorldState::dota_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.dota_time)
  return dota_time_;
}
void CMsgBotWorldState::set_dota_time(float value) {
  set_has_dota_time();
  dota_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.dota_time)
}

// optional uint32 game_state = 4;
bool CMsgBotWorldState::has_game_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotWorldState::set_has_game_state() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotWorldState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotWorldState::clear_game_state() {
  game_state_ = 0u;
  clear_has_game_state();
}
::google::protobuf::uint32 CMsgBotWorldState::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.game_state)
  return game_state_;
}
void CMsgBotWorldState::set_game_state(::google::protobuf::uint32 value) {
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.game_state)
}

// optional uint32 hero_pick_state = 5;
bool CMsgBotWorldState::has_hero_pick_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotWorldState::set_has_hero_pick_state() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotWorldState::clear_has_hero_pick_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotWorldState::clear_hero_pick_state() {
  hero_pick_state_ = 0u;
  clear_has_hero_pick_state();
}
::google::protobuf::uint32 CMsgBotWorldState::hero_pick_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.hero_pick_state)
  return hero_pick_state_;
}
void CMsgBotWorldState::set_hero_pick_state(::google::protobuf::uint32 value) {
  set_has_hero_pick_state();
  hero_pick_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.hero_pick_state)
}

// optional float time_of_day = 6;
bool CMsgBotWorldState::has_time_of_day() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotWorldState::set_has_time_of_day() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotWorldState::clear_has_time_of_day() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotWorldState::clear_time_of_day() {
  time_of_day_ = 0;
  clear_has_time_of_day();
}
float CMsgBotWorldState::time_of_day() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.time_of_day)
  return time_of_day_;
}
void CMsgBotWorldState::set_time_of_day(float value) {
  set_has_time_of_day();
  time_of_day_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.time_of_day)
}

// optional float glyph_cooldown = 7;
bool CMsgBotWorldState::has_glyph_cooldown() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgBotWorldState::set_has_glyph_cooldown() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgBotWorldState::clear_has_glyph_cooldown() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgBotWorldState::clear_glyph_cooldown() {
  glyph_cooldown_ = 0;
  clear_has_glyph_cooldown();
}
float CMsgBotWorldState::glyph_cooldown() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.glyph_cooldown)
  return glyph_cooldown_;
}
void CMsgBotWorldState::set_glyph_cooldown(float value) {
  set_has_glyph_cooldown();
  glyph_cooldown_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.glyph_cooldown)
}

// optional uint32 glyph_cooldown_enemy = 8;
bool CMsgBotWorldState::has_glyph_cooldown_enemy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgBotWorldState::set_has_glyph_cooldown_enemy() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgBotWorldState::clear_has_glyph_cooldown_enemy() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgBotWorldState::clear_glyph_cooldown_enemy() {
  glyph_cooldown_enemy_ = 0u;
  clear_has_glyph_cooldown_enemy();
}
::google::protobuf::uint32 CMsgBotWorldState::glyph_cooldown_enemy() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.glyph_cooldown_enemy)
  return glyph_cooldown_enemy_;
}
void CMsgBotWorldState::set_glyph_cooldown_enemy(::google::protobuf::uint32 value) {
  set_has_glyph_cooldown_enemy();
  glyph_cooldown_enemy_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotWorldState.glyph_cooldown_enemy)
}

// repeated .proto.dota.CMsgBotWorldState.Player players = 10;
int CMsgBotWorldState::players_size() const {
  return players_.size();
}
void CMsgBotWorldState::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgBotWorldState_Player& CMsgBotWorldState::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.players)
  return players_.Get(index);
}
::proto::dota::CMsgBotWorldState_Player* CMsgBotWorldState::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_Player* CMsgBotWorldState::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >*
CMsgBotWorldState::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Player >&
CMsgBotWorldState::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.players)
  return players_;
}

// repeated .proto.dota.CMsgBotWorldState.Unit units = 11;
int CMsgBotWorldState::units_size() const {
  return units_.size();
}
void CMsgBotWorldState::clear_units() {
  units_.Clear();
}
const ::proto::dota::CMsgBotWorldState_Unit& CMsgBotWorldState::units(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.units)
  return units_.Get(index);
}
::proto::dota::CMsgBotWorldState_Unit* CMsgBotWorldState::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.units)
  return units_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_Unit* CMsgBotWorldState::add_units() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >*
CMsgBotWorldState::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_Unit >&
CMsgBotWorldState::units() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.units)
  return units_;
}

// repeated .proto.dota.CMsgBotWorldState.DroppedItem dropped_items = 12;
int CMsgBotWorldState::dropped_items_size() const {
  return dropped_items_.size();
}
void CMsgBotWorldState::clear_dropped_items() {
  dropped_items_.Clear();
}
const ::proto::dota::CMsgBotWorldState_DroppedItem& CMsgBotWorldState::dropped_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Get(index);
}
::proto::dota::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::mutable_dropped_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_DroppedItem* CMsgBotWorldState::add_dropped_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >*
CMsgBotWorldState::mutable_dropped_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.dropped_items)
  return &dropped_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_DroppedItem >&
CMsgBotWorldState::dropped_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.dropped_items)
  return dropped_items_;
}

// repeated .proto.dota.CMsgBotWorldState.RuneInfo rune_infos = 13;
int CMsgBotWorldState::rune_infos_size() const {
  return rune_infos_.size();
}
void CMsgBotWorldState::clear_rune_infos() {
  rune_infos_.Clear();
}
const ::proto::dota::CMsgBotWorldState_RuneInfo& CMsgBotWorldState::rune_infos(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Get(index);
}
::proto::dota::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::mutable_rune_infos(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_RuneInfo* CMsgBotWorldState::add_rune_infos() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >*
CMsgBotWorldState::mutable_rune_infos() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.rune_infos)
  return &rune_infos_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_RuneInfo >&
CMsgBotWorldState::rune_infos() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.rune_infos)
  return rune_infos_;
}

// repeated .proto.dota.CMsgBotWorldState.TeleportInfo incoming_teleports = 14;
int CMsgBotWorldState::incoming_teleports_size() const {
  return incoming_teleports_.size();
}
void CMsgBotWorldState::clear_incoming_teleports() {
  incoming_teleports_.Clear();
}
const ::proto::dota::CMsgBotWorldState_TeleportInfo& CMsgBotWorldState::incoming_teleports(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Get(index);
}
::proto::dota::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::mutable_incoming_teleports(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_TeleportInfo* CMsgBotWorldState::add_incoming_teleports() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >*
CMsgBotWorldState::mutable_incoming_teleports() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.incoming_teleports)
  return &incoming_teleports_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_TeleportInfo >&
CMsgBotWorldState::incoming_teleports() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.incoming_teleports)
  return incoming_teleports_;
}

// repeated .proto.dota.CMsgBotWorldState.LinearProjectile linear_projectiles = 15;
int CMsgBotWorldState::linear_projectiles_size() const {
  return linear_projectiles_.size();
}
void CMsgBotWorldState::clear_linear_projectiles() {
  linear_projectiles_.Clear();
}
const ::proto::dota::CMsgBotWorldState_LinearProjectile& CMsgBotWorldState::linear_projectiles(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Get(index);
}
::proto::dota::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::mutable_linear_projectiles(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_LinearProjectile* CMsgBotWorldState::add_linear_projectiles() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >*
CMsgBotWorldState::mutable_linear_projectiles() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.linear_projectiles)
  return &linear_projectiles_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_LinearProjectile >&
CMsgBotWorldState::linear_projectiles() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.linear_projectiles)
  return linear_projectiles_;
}

// repeated .proto.dota.CMsgBotWorldState.AvoidanceZone avoidance_zones = 16;
int CMsgBotWorldState::avoidance_zones_size() const {
  return avoidance_zones_.size();
}
void CMsgBotWorldState::clear_avoidance_zones() {
  avoidance_zones_.Clear();
}
const ::proto::dota::CMsgBotWorldState_AvoidanceZone& CMsgBotWorldState::avoidance_zones(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Get(index);
}
::proto::dota::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::mutable_avoidance_zones(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_AvoidanceZone* CMsgBotWorldState::add_avoidance_zones() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >*
CMsgBotWorldState::mutable_avoidance_zones() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.avoidance_zones)
  return &avoidance_zones_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_AvoidanceZone >&
CMsgBotWorldState::avoidance_zones() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.avoidance_zones)
  return avoidance_zones_;
}

// repeated .proto.dota.CMsgBotWorldState.EventAbility ability_events = 20;
int CMsgBotWorldState::ability_events_size() const {
  return ability_events_.size();
}
void CMsgBotWorldState::clear_ability_events() {
  ability_events_.Clear();
}
const ::proto::dota::CMsgBotWorldState_EventAbility& CMsgBotWorldState::ability_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Get(index);
}
::proto::dota::CMsgBotWorldState_EventAbility* CMsgBotWorldState::mutable_ability_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_EventAbility* CMsgBotWorldState::add_ability_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >*
CMsgBotWorldState::mutable_ability_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.ability_events)
  return &ability_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventAbility >&
CMsgBotWorldState::ability_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.ability_events)
  return ability_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventDamage damage_events = 21;
int CMsgBotWorldState::damage_events_size() const {
  return damage_events_.size();
}
void CMsgBotWorldState::clear_damage_events() {
  damage_events_.Clear();
}
const ::proto::dota::CMsgBotWorldState_EventDamage& CMsgBotWorldState::damage_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Get(index);
}
::proto::dota::CMsgBotWorldState_EventDamage* CMsgBotWorldState::mutable_damage_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_EventDamage* CMsgBotWorldState::add_damage_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >*
CMsgBotWorldState::mutable_damage_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.damage_events)
  return &damage_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventDamage >&
CMsgBotWorldState::damage_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.damage_events)
  return damage_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventCourierKilled courier_killed_events = 22;
int CMsgBotWorldState::courier_killed_events_size() const {
  return courier_killed_events_.size();
}
void CMsgBotWorldState::clear_courier_killed_events() {
  courier_killed_events_.Clear();
}
const ::proto::dota::CMsgBotWorldState_EventCourierKilled& CMsgBotWorldState::courier_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Get(index);
}
::proto::dota::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::mutable_courier_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_EventCourierKilled* CMsgBotWorldState::add_courier_killed_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >*
CMsgBotWorldState::mutable_courier_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.courier_killed_events)
  return &courier_killed_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventCourierKilled >&
CMsgBotWorldState::courier_killed_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.courier_killed_events)
  return courier_killed_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventRoshanKilled roshan_killed_events = 23;
int CMsgBotWorldState::roshan_killed_events_size() const {
  return roshan_killed_events_.size();
}
void CMsgBotWorldState::clear_roshan_killed_events() {
  roshan_killed_events_.Clear();
}
const ::proto::dota::CMsgBotWorldState_EventRoshanKilled& CMsgBotWorldState::roshan_killed_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Get(index);
}
::proto::dota::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::mutable_roshan_killed_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_EventRoshanKilled* CMsgBotWorldState::add_roshan_killed_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >*
CMsgBotWorldState::mutable_roshan_killed_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return &roshan_killed_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventRoshanKilled >&
CMsgBotWorldState::roshan_killed_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.roshan_killed_events)
  return roshan_killed_events_;
}

// repeated .proto.dota.CMsgBotWorldState.EventTree tree_events = 24;
int CMsgBotWorldState::tree_events_size() const {
  return tree_events_.size();
}
void CMsgBotWorldState::clear_tree_events() {
  tree_events_.Clear();
}
const ::proto::dota::CMsgBotWorldState_EventTree& CMsgBotWorldState::tree_events(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Get(index);
}
::proto::dota::CMsgBotWorldState_EventTree* CMsgBotWorldState::mutable_tree_events(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Mutable(index);
}
::proto::dota::CMsgBotWorldState_EventTree* CMsgBotWorldState::add_tree_events() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >*
CMsgBotWorldState::mutable_tree_events() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgBotWorldState.tree_events)
  return &tree_events_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgBotWorldState_EventTree >&
CMsgBotWorldState::tree_events() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgBotWorldState.tree_events)
  return tree_events_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
