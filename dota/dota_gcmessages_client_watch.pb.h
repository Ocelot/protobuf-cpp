// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#ifndef PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED
#define PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dota_shared_enums.pb.h"
#include "dota_gcmessages_common.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace dota {
class CAdditionalEquipSlot;
class CAdditionalEquipSlotDefaultTypeInternal;
extern CAdditionalEquipSlotDefaultTypeInternal _CAdditionalEquipSlot_default_instance_;
class CCompendiumGameList;
class CCompendiumGameListDefaultTypeInternal;
extern CCompendiumGameListDefaultTypeInternal _CCompendiumGameList_default_instance_;
class CCompendiumGameTimeline;
class CCompendiumGameTimelineDefaultTypeInternal;
extern CCompendiumGameTimelineDefaultTypeInternal _CCompendiumGameTimeline_default_instance_;
class CCompendiumTimestampedData;
class CCompendiumTimestampedDataDefaultTypeInternal;
extern CCompendiumTimestampedDataDefaultTypeInternal _CCompendiumTimestampedData_default_instance_;
class CDOTABroadcasterInfo;
class CDOTABroadcasterInfoDefaultTypeInternal;
extern CDOTABroadcasterInfoDefaultTypeInternal _CDOTABroadcasterInfo_default_instance_;
class CDOTAClientHardwareSpecs;
class CDOTAClientHardwareSpecsDefaultTypeInternal;
extern CDOTAClientHardwareSpecsDefaultTypeInternal _CDOTAClientHardwareSpecs_default_instance_;
class CDOTAReplayDownloadInfo;
class CDOTAReplayDownloadInfoDefaultTypeInternal;
extern CDOTAReplayDownloadInfoDefaultTypeInternal _CDOTAReplayDownloadInfo_default_instance_;
class CDOTAReplayDownloadInfo_Highlight;
class CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal;
extern CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal _CDOTAReplayDownloadInfo_Highlight_default_instance_;
class CDOTASaveGame;
class CDOTASaveGameDefaultTypeInternal;
extern CDOTASaveGameDefaultTypeInternal _CDOTASaveGame_default_instance_;
class CDOTASaveGame_Player;
class CDOTASaveGame_PlayerDefaultTypeInternal;
extern CDOTASaveGame_PlayerDefaultTypeInternal _CDOTASaveGame_Player_default_instance_;
class CDOTASaveGame_SaveInstance;
class CDOTASaveGame_SaveInstanceDefaultTypeInternal;
extern CDOTASaveGame_SaveInstanceDefaultTypeInternal _CDOTASaveGame_SaveInstance_default_instance_;
class CDOTASaveGame_SaveInstance_PlayerPositions;
class CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal;
extern CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_;
class CMatchAdditionalUnitInventory;
class CMatchAdditionalUnitInventoryDefaultTypeInternal;
extern CMatchAdditionalUnitInventoryDefaultTypeInternal _CMatchAdditionalUnitInventory_default_instance_;
class CMatchHeroSelectEvent;
class CMatchHeroSelectEventDefaultTypeInternal;
extern CMatchHeroSelectEventDefaultTypeInternal _CMatchHeroSelectEvent_default_instance_;
class CMatchPlayerAbilityUpgrade;
class CMatchPlayerAbilityUpgradeDefaultTypeInternal;
extern CMatchPlayerAbilityUpgradeDefaultTypeInternal _CMatchPlayerAbilityUpgrade_default_instance_;
class CMatchPlayerPermanentBuff;
class CMatchPlayerPermanentBuffDefaultTypeInternal;
extern CMatchPlayerPermanentBuffDefaultTypeInternal _CMatchPlayerPermanentBuff_default_instance_;
class CMsgBattleCupVictory;
class CMsgBattleCupVictoryDefaultTypeInternal;
extern CMsgBattleCupVictoryDefaultTypeInternal _CMsgBattleCupVictory_default_instance_;
class CMsgCancelWatchGame;
class CMsgCancelWatchGameDefaultTypeInternal;
extern CMsgCancelWatchGameDefaultTypeInternal _CMsgCancelWatchGame_default_instance_;
class CMsgClientToGCFindTopMatches;
class CMsgClientToGCFindTopMatchesDefaultTypeInternal;
extern CMsgClientToGCFindTopMatchesDefaultTypeInternal _CMsgClientToGCFindTopMatches_default_instance_;
class CMsgClientToGCFindTopSourceTVGames;
class CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal;
extern CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal _CMsgClientToGCFindTopSourceTVGames_default_instance_;
class CMsgClientToGCMatchesMinimalRequest;
class CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal _CMsgClientToGCMatchesMinimalRequest_default_instance_;
class CMsgClientToGCMatchesMinimalResponse;
class CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal;
extern CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal _CMsgClientToGCMatchesMinimalResponse_default_instance_;
class CMsgClientToGCRerollPlayerChallenge;
class CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal;
extern CMsgClientToGCRerollPlayerChallengeDefaultTypeInternal _CMsgClientToGCRerollPlayerChallenge_default_instance_;
class CMsgClientToGCTopFriendMatchesRequest;
class CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
class CMsgClientToGCTopLeagueMatchesRequest;
class CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
class CMsgClientToGCTopMatchesRequest;
class CMsgClientToGCTopMatchesRequestDefaultTypeInternal;
extern CMsgClientToGCTopMatchesRequestDefaultTypeInternal _CMsgClientToGCTopMatchesRequest_default_instance_;
class CMsgDOTABotDebugInfo;
class CMsgDOTABotDebugInfoDefaultTypeInternal;
extern CMsgDOTABotDebugInfoDefaultTypeInternal _CMsgDOTABotDebugInfo_default_instance_;
class CMsgDOTABotDebugInfo_Bot;
class CMsgDOTABotDebugInfo_BotDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_BotDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Action;
class CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ActionDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Action_default_instance_;
class CMsgDOTABotDebugInfo_Bot_Mode;
class CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal;
extern CMsgDOTABotDebugInfo_Bot_ModeDefaultTypeInternal _CMsgDOTABotDebugInfo_Bot_Mode_default_instance_;
class CMsgDOTABroadcastNotification;
class CMsgDOTABroadcastNotificationDefaultTypeInternal;
extern CMsgDOTABroadcastNotificationDefaultTypeInternal _CMsgDOTABroadcastNotification_default_instance_;
class CMsgDOTACombatLogEntry;
class CMsgDOTACombatLogEntryDefaultTypeInternal;
extern CMsgDOTACombatLogEntryDefaultTypeInternal _CMsgDOTACombatLogEntry_default_instance_;
class CMsgDOTAFantasyPlayerMatchStats;
class CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerMatchStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerMatchStats_default_instance_;
class CMsgDOTAFantasyPlayerStats;
class CMsgDOTAFantasyPlayerStatsDefaultTypeInternal;
extern CMsgDOTAFantasyPlayerStatsDefaultTypeInternal _CMsgDOTAFantasyPlayerStats_default_instance_;
class CMsgDOTAHasItemDefsQuery;
class CMsgDOTAHasItemDefsQueryDefaultTypeInternal;
extern CMsgDOTAHasItemDefsQueryDefaultTypeInternal _CMsgDOTAHasItemDefsQuery_default_instance_;
class CMsgDOTAHasItemDefsResponse;
class CMsgDOTAHasItemDefsResponseDefaultTypeInternal;
extern CMsgDOTAHasItemDefsResponseDefaultTypeInternal _CMsgDOTAHasItemDefsResponse_default_instance_;
class CMsgDOTAHasItemQuery;
class CMsgDOTAHasItemQueryDefaultTypeInternal;
extern CMsgDOTAHasItemQueryDefaultTypeInternal _CMsgDOTAHasItemQuery_default_instance_;
class CMsgDOTAHasItemResponse;
class CMsgDOTAHasItemResponseDefaultTypeInternal;
extern CMsgDOTAHasItemResponseDefaultTypeInternal _CMsgDOTAHasItemResponse_default_instance_;
class CMsgDOTAMatch;
class CMsgDOTAMatchDefaultTypeInternal;
extern CMsgDOTAMatchDefaultTypeInternal _CMsgDOTAMatch_default_instance_;
class CMsgDOTAMatchMinimal;
class CMsgDOTAMatchMinimalDefaultTypeInternal;
extern CMsgDOTAMatchMinimalDefaultTypeInternal _CMsgDOTAMatchMinimal_default_instance_;
class CMsgDOTAMatchMinimal_Player;
class CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal _CMsgDOTAMatchMinimal_Player_default_instance_;
class CMsgDOTAMatchMinimal_Tourney;
class CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal;
extern CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal _CMsgDOTAMatchMinimal_Tourney_default_instance_;
class CMsgDOTAMatch_BroadcasterChannel;
class CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterChannelDefaultTypeInternal _CMsgDOTAMatch_BroadcasterChannel_default_instance_;
class CMsgDOTAMatch_BroadcasterInfo;
class CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal;
extern CMsgDOTAMatch_BroadcasterInfoDefaultTypeInternal _CMsgDOTAMatch_BroadcasterInfo_default_instance_;
class CMsgDOTAMatch_CustomGameData;
class CMsgDOTAMatch_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_CustomGameData_default_instance_;
class CMsgDOTAMatch_Player;
class CMsgDOTAMatch_PlayerDefaultTypeInternal;
extern CMsgDOTAMatch_PlayerDefaultTypeInternal _CMsgDOTAMatch_Player_default_instance_;
class CMsgDOTAMatch_Player_CustomGameData;
class CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal;
extern CMsgDOTAMatch_Player_CustomGameDataDefaultTypeInternal _CMsgDOTAMatch_Player_CustomGameData_default_instance_;
class CMsgDOTAProcessFantasyScheduledEvent;
class CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal;
extern CMsgDOTAProcessFantasyScheduledEventDefaultTypeInternal _CMsgDOTAProcessFantasyScheduledEvent_default_instance_;
class CMsgDOTAProfileCard;
class CMsgDOTAProfileCardDefaultTypeInternal;
extern CMsgDOTAProfileCardDefaultTypeInternal _CMsgDOTAProfileCard_default_instance_;
class CMsgDOTAProfileCard_Slot;
class CMsgDOTAProfileCard_SlotDefaultTypeInternal;
extern CMsgDOTAProfileCard_SlotDefaultTypeInternal _CMsgDOTAProfileCard_Slot_default_instance_;
class CMsgDOTAProfileCard_Slot_Emoticon;
class CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_EmoticonDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Emoticon_default_instance_;
class CMsgDOTAProfileCard_Slot_Hero;
class CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_HeroDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Hero_default_instance_;
class CMsgDOTAProfileCard_Slot_Item;
class CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_ItemDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Item_default_instance_;
class CMsgDOTAProfileCard_Slot_Stat;
class CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_StatDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Stat_default_instance_;
class CMsgDOTAProfileCard_Slot_Team;
class CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TeamDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Team_default_instance_;
class CMsgDOTAProfileCard_Slot_Trophy;
class CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal;
extern CMsgDOTAProfileCard_Slot_TrophyDefaultTypeInternal _CMsgDOTAProfileCard_Slot_Trophy_default_instance_;
class CMsgDOTARealtimeGameStats;
class CMsgDOTARealtimeGameStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_default_instance_;
class CMsgDOTARealtimeGameStatsTerse;
class CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerseDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetails;
class CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_GraphData;
class CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_GraphData_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_MatchDetails;
class CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetails;
class CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStatsTerse_TeamDetails;
class CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStatsTerse_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStatsTerse_TeamDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityDetails;
class CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityDetails_default_instance_;
class CMsgDOTARealtimeGameStats_AbilityList;
class CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_AbilityListDefaultTypeInternal _CMsgDOTARealtimeGameStats_AbilityList_default_instance_;
class CMsgDOTARealtimeGameStats_BroadcasterDetails;
class CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BroadcasterDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BroadcasterDetails_default_instance_;
class CMsgDOTARealtimeGameStats_BuildingDetails;
class CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_BuildingDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_BuildingDetails_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData;
class CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphDataDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_LocationStats;
class CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_LocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_LocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats;
class CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_GraphData_TeamLocationStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_GraphData_TeamLocationStats_default_instance_;
class CMsgDOTARealtimeGameStats_HeroToHeroStats;
class CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_HeroToHeroStatsDefaultTypeInternal _CMsgDOTARealtimeGameStats_HeroToHeroStats_default_instance_;
class CMsgDOTARealtimeGameStats_ItemDetails;
class CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_ItemDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_ItemDetails_default_instance_;
class CMsgDOTARealtimeGameStats_KillDetails;
class CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_KillDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_KillDetails_default_instance_;
class CMsgDOTARealtimeGameStats_MatchDetails;
class CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_MatchDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_MatchDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PickBanDetails;
class CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PickBanDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PickBanDetails_default_instance_;
class CMsgDOTARealtimeGameStats_PlayerDetails;
class CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_PlayerDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_PlayerDetails_default_instance_;
class CMsgDOTARealtimeGameStats_TeamDetails;
class CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal;
extern CMsgDOTARealtimeGameStats_TeamDetailsDefaultTypeInternal _CMsgDOTARealtimeGameStats_TeamDetails_default_instance_;
class CMsgDOTASDOHeroStatsHistory;
class CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal;
extern CMsgDOTASDOHeroStatsHistoryDefaultTypeInternal _CMsgDOTASDOHeroStatsHistory_default_instance_;
class CMsgDOTASeasonAchievements;
class CMsgDOTASeasonAchievementsDefaultTypeInternal;
extern CMsgDOTASeasonAchievementsDefaultTypeInternal _CMsgDOTASeasonAchievements_default_instance_;
class CMsgDOTASeasonAchievements_Achievement;
class CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal;
extern CMsgDOTASeasonAchievements_AchievementDefaultTypeInternal _CMsgDOTASeasonAchievements_Achievement_default_instance_;
class CMsgDOTASeasonPredictions;
class CMsgDOTASeasonPredictionsDefaultTypeInternal;
extern CMsgDOTASeasonPredictionsDefaultTypeInternal _CMsgDOTASeasonPredictions_default_instance_;
class CMsgDOTASeasonPredictions_Answers;
class CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_AnswersDefaultTypeInternal _CMsgDOTASeasonPredictions_Answers_default_instance_;
class CMsgDOTASeasonPredictions_Choice;
class CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_ChoiceDefaultTypeInternal _CMsgDOTASeasonPredictions_Choice_default_instance_;
class CMsgDOTASeasonPredictions_InGamePrediction;
class CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_InGamePredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_InGamePrediction_default_instance_;
class CMsgDOTASeasonPredictions_Prediction;
class CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_PredictionDefaultTypeInternal _CMsgDOTASeasonPredictions_Prediction_default_instance_;
class CMsgDOTASeasonPredictions_QueryKeyValues;
class CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal;
extern CMsgDOTASeasonPredictions_QueryKeyValuesDefaultTypeInternal _CMsgDOTASeasonPredictions_QueryKeyValues_default_instance_;
class CMsgDOTASeasonRewards;
class CMsgDOTASeasonRewardsDefaultTypeInternal;
extern CMsgDOTASeasonRewardsDefaultTypeInternal _CMsgDOTASeasonRewards_default_instance_;
class CMsgDOTASeasonRewards_Reward;
class CMsgDOTASeasonRewards_RewardDefaultTypeInternal;
extern CMsgDOTASeasonRewards_RewardDefaultTypeInternal _CMsgDOTASeasonRewards_Reward_default_instance_;
class CMsgGCGetPlayerCardItemInfo;
class CMsgGCGetPlayerCardItemInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfo_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse;
class CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponseDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_default_instance_;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo;
class CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal;
extern CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfoDefaultTypeInternal _CMsgGCGetPlayerCardItemInfoResponse_PlayerCardInfo_default_instance_;
class CMsgGCIsProQuery;
class CMsgGCIsProQueryDefaultTypeInternal;
extern CMsgGCIsProQueryDefaultTypeInternal _CMsgGCIsProQuery_default_instance_;
class CMsgGCIsProResponse;
class CMsgGCIsProResponseDefaultTypeInternal;
extern CMsgGCIsProResponseDefaultTypeInternal _CMsgGCIsProResponse_default_instance_;
class CMsgGCRerollPlayerChallengeResponse;
class CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal;
extern CMsgGCRerollPlayerChallengeResponseDefaultTypeInternal _CMsgGCRerollPlayerChallengeResponse_default_instance_;
class CMsgGCToClientFindTopLeagueMatchesResponse;
class CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientFindTopSourceTVGamesResponse;
class CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal;
extern CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
class CMsgGCToClientMatchGroupsVersion;
class CMsgGCToClientMatchGroupsVersionDefaultTypeInternal;
extern CMsgGCToClientMatchGroupsVersionDefaultTypeInternal _CMsgGCToClientMatchGroupsVersion_default_instance_;
class CMsgGCToClientTopFriendMatchesResponse;
class CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
class CMsgGCToClientTopLeagueMatchesResponse;
class CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal;
extern CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientTopWeekendTourneyGames;
class CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal;
extern CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
class CMsgGCToGCFantasySetMatchLeague;
class CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal;
extern CMsgGCToGCFantasySetMatchLeagueDefaultTypeInternal _CMsgGCToGCFantasySetMatchLeague_default_instance_;
class CMsgGCTopCustomGamesList;
class CMsgGCTopCustomGamesListDefaultTypeInternal;
extern CMsgGCTopCustomGamesListDefaultTypeInternal _CMsgGCTopCustomGamesList_default_instance_;
class CMsgLeagueAdminList;
class CMsgLeagueAdminListDefaultTypeInternal;
extern CMsgLeagueAdminListDefaultTypeInternal _CMsgLeagueAdminList_default_instance_;
class CMsgLobbyBattleCupVictoryList;
class CMsgLobbyBattleCupVictoryListDefaultTypeInternal;
extern CMsgLobbyBattleCupVictoryListDefaultTypeInternal _CMsgLobbyBattleCupVictoryList_default_instance_;
class CMsgLobbyEventPoints;
class CMsgLobbyEventPointsDefaultTypeInternal;
extern CMsgLobbyEventPointsDefaultTypeInternal _CMsgLobbyEventPoints_default_instance_;
class CMsgLobbyEventPoints_AccountPoints;
class CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal;
extern CMsgLobbyEventPoints_AccountPointsDefaultTypeInternal _CMsgLobbyEventPoints_AccountPoints_default_instance_;
class CMsgLobbyEventPoints_ChatWheelMessageRange;
class CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal;
extern CMsgLobbyEventPoints_ChatWheelMessageRangeDefaultTypeInternal _CMsgLobbyEventPoints_ChatWheelMessageRange_default_instance_;
class CMsgPartyLeaderWatchGamePrompt;
class CMsgPartyLeaderWatchGamePromptDefaultTypeInternal;
extern CMsgPartyLeaderWatchGamePromptDefaultTypeInternal _CMsgPartyLeaderWatchGamePrompt_default_instance_;
class CMsgPlayerCard;
class CMsgPlayerCardDefaultTypeInternal;
extern CMsgPlayerCardDefaultTypeInternal _CMsgPlayerCard_default_instance_;
class CMsgPlayerCard_StatModifier;
class CMsgPlayerCard_StatModifierDefaultTypeInternal;
extern CMsgPlayerCard_StatModifierDefaultTypeInternal _CMsgPlayerCard_StatModifier_default_instance_;
class CMsgSpectateFriendGame;
class CMsgSpectateFriendGameDefaultTypeInternal;
extern CMsgSpectateFriendGameDefaultTypeInternal _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponse;
class CMsgSpectateFriendGameResponseDefaultTypeInternal;
extern CMsgSpectateFriendGameResponseDefaultTypeInternal _CMsgSpectateFriendGameResponse_default_instance_;
class CMsgWatchGame;
class CMsgWatchGameDefaultTypeInternal;
extern CMsgWatchGameDefaultTypeInternal _CMsgWatchGame_default_instance_;
class CMsgWatchGameResponse;
class CMsgWatchGameResponseDefaultTypeInternal;
extern CMsgWatchGameResponseDefaultTypeInternal _CMsgWatchGameResponse_default_instance_;
class CProtoItemHeroStatue;
class CProtoItemHeroStatueDefaultTypeInternal;
extern CProtoItemHeroStatueDefaultTypeInternal _CProtoItemHeroStatue_default_instance_;
class CProtoItemTeamShowcase;
class CProtoItemTeamShowcaseDefaultTypeInternal;
extern CProtoItemTeamShowcaseDefaultTypeInternal _CProtoItemTeamShowcase_default_instance_;
class CSODOTAGameAccountClient;
class CSODOTAGameAccountClientDefaultTypeInternal;
extern CSODOTAGameAccountClientDefaultTypeInternal _CSODOTAGameAccountClient_default_instance_;
class CSODOTAMapLocationState;
class CSODOTAMapLocationStateDefaultTypeInternal;
extern CSODOTAMapLocationStateDefaultTypeInternal _CSODOTAMapLocationState_default_instance_;
class CSODOTAPlayerChallenge;
class CSODOTAPlayerChallengeDefaultTypeInternal;
extern CSODOTAPlayerChallengeDefaultTypeInternal _CSODOTAPlayerChallenge_default_instance_;
class CSourceTVGameSmall;
class CSourceTVGameSmallDefaultTypeInternal;
extern CSourceTVGameSmallDefaultTypeInternal _CSourceTVGameSmall_default_instance_;
class CSourceTVGameSmall_Player;
class CSourceTVGameSmall_PlayerDefaultTypeInternal;
extern CSourceTVGameSmall_PlayerDefaultTypeInternal _CSourceTVGameSmall_Player_default_instance_;
}  // namespace dota
}  // namespace proto

namespace proto {
namespace dota {

namespace protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto

enum CMsgWatchGameResponse_WatchGameResult {
  CMsgWatchGameResponse_WatchGameResult_PENDING = 0,
  CMsgWatchGameResponse_WatchGameResult_READY = 1,
  CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND = 2,
  CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE = 3,
  CMsgWatchGameResponse_WatchGameResult_CANCELLED = 4,
  CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION = 5,
  CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION = 6,
  CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND = 7
};
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value);
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN = CMsgWatchGameResponse_WatchGameResult_PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX = CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
const int CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE = CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor();
inline const ::std::string& CMsgWatchGameResponse_WatchGameResult_Name(CMsgWatchGameResponse_WatchGameResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), value);
}
inline bool CMsgWatchGameResponse_WatchGameResult_Parse(
    const ::std::string& name, CMsgWatchGameResponse_WatchGameResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgWatchGameResponse_WatchGameResult>(
    CMsgWatchGameResponse_WatchGameResult_descriptor(), name, value);
}
// ===================================================================

class CSourceTVGameSmall_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSourceTVGameSmall.Player) */ {
 public:
  CSourceTVGameSmall_Player();
  virtual ~CSourceTVGameSmall_Player();

  CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from);

  inline CSourceTVGameSmall_Player& operator=(const CSourceTVGameSmall_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGameSmall_Player& default_instance();

  static inline const CSourceTVGameSmall_Player* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall_Player*>(
               &_CSourceTVGameSmall_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CSourceTVGameSmall_Player* other);

  // implements Message ----------------------------------------------

  inline CSourceTVGameSmall_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CSourceTVGameSmall_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSourceTVGameSmall_Player& from);
  void MergeFrom(const CSourceTVGameSmall_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSourceTVGameSmall_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSourceTVGameSmall.Player)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CSourceTVGameSmall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CSourceTVGameSmall) */ {
 public:
  CSourceTVGameSmall();
  virtual ~CSourceTVGameSmall();

  CSourceTVGameSmall(const CSourceTVGameSmall& from);

  inline CSourceTVGameSmall& operator=(const CSourceTVGameSmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSourceTVGameSmall& default_instance();

  static inline const CSourceTVGameSmall* internal_default_instance() {
    return reinterpret_cast<const CSourceTVGameSmall*>(
               &_CSourceTVGameSmall_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CSourceTVGameSmall* other);

  // implements Message ----------------------------------------------

  inline CSourceTVGameSmall* New() const PROTOBUF_FINAL { return New(NULL); }

  CSourceTVGameSmall* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CSourceTVGameSmall& from);
  void MergeFrom(const CSourceTVGameSmall& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CSourceTVGameSmall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CSourceTVGameSmall_Player Player;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 22;
  const ::proto::dota::CSourceTVGameSmall_Player& players(int index) const;
  ::proto::dota::CSourceTVGameSmall_Player* mutable_players(int index);
  ::proto::dota::CSourceTVGameSmall_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >&
      players() const;

  // optional string team_name_radiant = 15;
  bool has_team_name_radiant() const;
  void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 15;
  const ::std::string& team_name_radiant() const;
  void set_team_name_radiant(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_radiant(::std::string&& value);
  #endif
  void set_team_name_radiant(const char* value);
  void set_team_name_radiant(const char* value, size_t size);
  ::std::string* mutable_team_name_radiant();
  ::std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 16;
  bool has_team_name_dire() const;
  void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 16;
  const ::std::string& team_name_dire() const;
  void set_team_name_dire(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_dire(::std::string&& value);
  #endif
  void set_team_name_dire(const char* value);
  void set_team_name_dire(const char* value, size_t size);
  ::std::string* mutable_team_name_dire();
  ::std::string* release_team_name_dire();
  void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional uint32 activate_time = 1;
  bool has_activate_time() const;
  void clear_activate_time();
  static const int kActivateTimeFieldNumber = 1;
  ::google::protobuf::uint32 activate_time() const;
  void set_activate_time(::google::protobuf::uint32 value);

  // optional uint32 deactivate_time = 2;
  bool has_deactivate_time() const;
  void clear_deactivate_time();
  static const int kDeactivateTimeFieldNumber = 2;
  ::google::protobuf::uint32 deactivate_time() const;
  void set_deactivate_time(::google::protobuf::uint32 value);

  // optional uint64 server_steam_id = 3;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 3;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 league_id = 5;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 5;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 lobby_type = 6;
  bool has_lobby_type() const;
  void clear_lobby_type();
  static const int kLobbyTypeFieldNumber = 6;
  ::google::protobuf::uint32 lobby_type() const;
  void set_lobby_type(::google::protobuf::uint32 value);

  // optional int32 game_time = 7;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 7;
  ::google::protobuf::int32 game_time() const;
  void set_game_time(::google::protobuf::int32 value);

  // optional uint32 delay = 8;
  bool has_delay() const;
  void clear_delay();
  static const int kDelayFieldNumber = 8;
  ::google::protobuf::uint32 delay() const;
  void set_delay(::google::protobuf::uint32 value);

  // optional uint32 spectators = 9;
  bool has_spectators() const;
  void clear_spectators();
  static const int kSpectatorsFieldNumber = 9;
  ::google::protobuf::uint32 spectators() const;
  void set_spectators(::google::protobuf::uint32 value);

  // optional uint32 game_mode = 10;
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 10;
  ::google::protobuf::uint32 game_mode() const;
  void set_game_mode(::google::protobuf::uint32 value);

  // optional uint32 average_mmr = 11;
  bool has_average_mmr() const;
  void clear_average_mmr();
  static const int kAverageMmrFieldNumber = 11;
  ::google::protobuf::uint32 average_mmr() const;
  void set_average_mmr(::google::protobuf::uint32 value);

  // optional uint32 sort_score = 17;
  bool has_sort_score() const;
  void clear_sort_score();
  static const int kSortScoreFieldNumber = 17;
  ::google::protobuf::uint32 sort_score() const;
  void set_sort_score(::google::protobuf::uint32 value);

  // optional float last_update_time = 18;
  bool has_last_update_time() const;
  void clear_last_update_time();
  static const int kLastUpdateTimeFieldNumber = 18;
  float last_update_time() const;
  void set_last_update_time(float value);

  // optional int32 radiant_lead = 19;
  bool has_radiant_lead() const;
  void clear_radiant_lead();
  static const int kRadiantLeadFieldNumber = 19;
  ::google::protobuf::int32 radiant_lead() const;
  void set_radiant_lead(::google::protobuf::int32 value);

  // optional uint32 radiant_score = 20;
  bool has_radiant_score() const;
  void clear_radiant_score();
  static const int kRadiantScoreFieldNumber = 20;
  ::google::protobuf::uint32 radiant_score() const;
  void set_radiant_score(::google::protobuf::uint32 value);

  // optional uint32 dire_score = 21;
  bool has_dire_score() const;
  void clear_dire_score();
  static const int kDireScoreFieldNumber = 21;
  ::google::protobuf::uint32 dire_score() const;
  void set_dire_score(::google::protobuf::uint32 value);

  // optional fixed64 team_logo_radiant = 24;
  bool has_team_logo_radiant() const;
  void clear_team_logo_radiant();
  static const int kTeamLogoRadiantFieldNumber = 24;
  ::google::protobuf::uint64 team_logo_radiant() const;
  void set_team_logo_radiant(::google::protobuf::uint64 value);

  // optional fixed32 building_state = 23;
  bool has_building_state() const;
  void clear_building_state();
  static const int kBuildingStateFieldNumber = 23;
  ::google::protobuf::uint32 building_state() const;
  void set_building_state(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_tournament_id = 26;
  bool has_weekend_tourney_tournament_id() const;
  void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 26;
  ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional fixed64 team_logo_dire = 25;
  bool has_team_logo_dire() const;
  void clear_team_logo_dire();
  static const int kTeamLogoDireFieldNumber = 25;
  ::google::protobuf::uint64 team_logo_dire() const;
  void set_team_logo_dire(::google::protobuf::uint64 value);

  // optional uint32 weekend_tourney_bracket_round = 29;
  bool has_weekend_tourney_bracket_round() const;
  void clear_weekend_tourney_bracket_round();
  static const int kWeekendTourneyBracketRoundFieldNumber = 29;
  ::google::protobuf::uint32 weekend_tourney_bracket_round() const;
  void set_weekend_tourney_bracket_round(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 27;
  bool has_weekend_tourney_division() const;
  void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 27;
  ::google::protobuf::uint32 weekend_tourney_division() const;
  void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 28;
  bool has_weekend_tourney_skill_level() const;
  void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 28;
  ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CSourceTVGameSmall)
 private:
  void set_has_activate_time();
  void clear_has_activate_time();
  void set_has_deactivate_time();
  void clear_has_deactivate_time();
  void set_has_server_steam_id();
  void clear_has_server_steam_id();
  void set_has_lobby_id();
  void clear_has_lobby_id();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_lobby_type();
  void clear_has_lobby_type();
  void set_has_game_time();
  void clear_has_game_time();
  void set_has_delay();
  void clear_has_delay();
  void set_has_spectators();
  void clear_has_spectators();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_average_mmr();
  void clear_has_average_mmr();
  void set_has_team_name_radiant();
  void clear_has_team_name_radiant();
  void set_has_team_name_dire();
  void clear_has_team_name_dire();
  void set_has_team_logo_radiant();
  void clear_has_team_logo_radiant();
  void set_has_team_logo_dire();
  void clear_has_team_logo_dire();
  void set_has_sort_score();
  void clear_has_sort_score();
  void set_has_last_update_time();
  void clear_has_last_update_time();
  void set_has_radiant_lead();
  void clear_has_radiant_lead();
  void set_has_radiant_score();
  void clear_has_radiant_score();
  void set_has_dire_score();
  void clear_has_dire_score();
  void set_has_building_state();
  void clear_has_building_state();
  void set_has_weekend_tourney_tournament_id();
  void clear_has_weekend_tourney_tournament_id();
  void set_has_weekend_tourney_division();
  void clear_has_weekend_tourney_division();
  void set_has_weekend_tourney_skill_level();
  void clear_has_weekend_tourney_skill_level();
  void set_has_weekend_tourney_bracket_round();
  void clear_has_weekend_tourney_bracket_round();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player > players_;
  ::google::protobuf::internal::ArenaStringPtr team_name_radiant_;
  ::google::protobuf::internal::ArenaStringPtr team_name_dire_;
  ::google::protobuf::uint32 activate_time_;
  ::google::protobuf::uint32 deactivate_time_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 lobby_type_;
  ::google::protobuf::int32 game_time_;
  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 spectators_;
  ::google::protobuf::uint32 game_mode_;
  ::google::protobuf::uint32 average_mmr_;
  ::google::protobuf::uint32 sort_score_;
  float last_update_time_;
  ::google::protobuf::int32 radiant_lead_;
  ::google::protobuf::uint32 radiant_score_;
  ::google::protobuf::uint32 dire_score_;
  ::google::protobuf::uint64 team_logo_radiant_;
  ::google::protobuf::uint32 building_state_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint64 team_logo_dire_;
  ::google::protobuf::uint32 weekend_tourney_bracket_round_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopSourceTVGames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCFindTopSourceTVGames) */ {
 public:
  CMsgClientToGCFindTopSourceTVGames();
  virtual ~CMsgClientToGCFindTopSourceTVGames();

  CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from);

  inline CMsgClientToGCFindTopSourceTVGames& operator=(const CMsgClientToGCFindTopSourceTVGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCFindTopSourceTVGames& default_instance();

  static inline const CMsgClientToGCFindTopSourceTVGames* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFindTopSourceTVGames*>(
               &_CMsgClientToGCFindTopSourceTVGames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CMsgClientToGCFindTopSourceTVGames* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCFindTopSourceTVGames* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCFindTopSourceTVGames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  void MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCFindTopSourceTVGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 lobby_ids = 6;
  int lobby_ids_size() const;
  void clear_lobby_ids();
  static const int kLobbyIdsFieldNumber = 6;
  ::google::protobuf::uint64 lobby_ids(int index) const;
  void set_lobby_ids(int index, ::google::protobuf::uint64 value);
  void add_lobby_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      lobby_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_lobby_ids();

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 5;
  bool has_game_list_index() const;
  void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 5;
  ::google::protobuf::uint32 game_list_index() const;
  void set_game_list_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCFindTopSourceTVGames)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_start_game();
  void clear_has_start_game();
  void set_has_game_list_index();
  void clear_has_game_list_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > lobby_ids_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 game_list_index_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopSourceTVGamesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse) */ {
 public:
  CMsgGCToClientFindTopSourceTVGamesResponse();
  virtual ~CMsgGCToClientFindTopSourceTVGamesResponse();

  CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from);

  inline CMsgGCToClientFindTopSourceTVGamesResponse& operator=(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientFindTopSourceTVGamesResponse& default_instance();

  static inline const CMsgGCToClientFindTopSourceTVGamesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFindTopSourceTVGamesResponse*>(
               &_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgGCToClientFindTopSourceTVGamesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToClientFindTopSourceTVGamesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  int game_list_size() const;
  void clear_game_list();
  static const int kGameListFieldNumber = 7;
  const ::proto::dota::CSourceTVGameSmall& game_list(int index) const;
  ::proto::dota::CSourceTVGameSmall* mutable_game_list(int index);
  ::proto::dota::CSourceTVGameSmall* add_game_list();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
      mutable_game_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
      game_list() const;

  // optional string search_key = 1;
  bool has_search_key() const;
  void clear_search_key();
  static const int kSearchKeyFieldNumber = 1;
  const ::std::string& search_key() const;
  void set_search_key(const ::std::string& value);
  #if LANG_CXX11
  void set_search_key(::std::string&& value);
  #endif
  void set_search_key(const char* value);
  void set_search_key(const char* value, size_t size);
  ::std::string* mutable_search_key();
  ::std::string* release_search_key();
  void set_allocated_search_key(::std::string* search_key);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 start_game = 4;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 4;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 num_games = 5;
  bool has_num_games() const;
  void clear_num_games();
  static const int kNumGamesFieldNumber = 5;
  ::google::protobuf::uint32 num_games() const;
  void set_num_games(::google::protobuf::uint32 value);

  // optional uint32 game_list_index = 6;
  bool has_game_list_index() const;
  void clear_game_list_index();
  static const int kGameListIndexFieldNumber = 6;
  ::google::protobuf::uint32 game_list_index() const;
  void set_game_list_index(::google::protobuf::uint32 value);

  // optional bool specific_games = 8;
  bool has_specific_games() const;
  void clear_specific_games();
  static const int kSpecificGamesFieldNumber = 8;
  bool specific_games() const;
  void set_specific_games(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
 private:
  void set_has_search_key();
  void clear_has_search_key();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_start_game();
  void clear_has_start_game();
  void set_has_num_games();
  void clear_has_num_games();
  void set_has_game_list_index();
  void clear_has_game_list_index();
  void set_has_specific_games();
  void clear_has_specific_games();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall > game_list_;
  ::google::protobuf::internal::ArenaStringPtr search_key_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 num_games_;
  ::google::protobuf::uint32 game_list_index_;
  bool specific_games_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopWeekendTourneyGames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopWeekendTourneyGames) */ {
 public:
  CMsgGCToClientTopWeekendTourneyGames();
  virtual ~CMsgGCToClientTopWeekendTourneyGames();

  CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from);

  inline CMsgGCToClientTopWeekendTourneyGames& operator=(const CMsgGCToClientTopWeekendTourneyGames& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopWeekendTourneyGames& default_instance();

  static inline const CMsgGCToClientTopWeekendTourneyGames* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopWeekendTourneyGames*>(
               &_CMsgGCToClientTopWeekendTourneyGames_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CMsgGCToClientTopWeekendTourneyGames* other);

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopWeekendTourneyGames* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToClientTopWeekendTourneyGames* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  void MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  int live_games_size() const;
  void clear_live_games();
  static const int kLiveGamesFieldNumber = 1;
  const ::proto::dota::CSourceTVGameSmall& live_games(int index) const;
  ::proto::dota::CSourceTVGameSmall* mutable_live_games(int index);
  ::proto::dota::CSourceTVGameSmall* add_live_games();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
      mutable_live_games();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
      live_games() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall > live_games_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopMatchesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopMatchesRequest) */ {
 public:
  CMsgClientToGCTopMatchesRequest();
  virtual ~CMsgClientToGCTopMatchesRequest();

  CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from);

  inline CMsgClientToGCTopMatchesRequest& operator=(const CMsgClientToGCTopMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopMatchesRequest& default_instance();

  static inline const CMsgClientToGCTopMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopMatchesRequest*>(
               &_CMsgClientToGCTopMatchesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(CMsgClientToGCTopMatchesRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopMatchesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCTopMatchesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCTopMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopMatchesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCTopMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 hero_id = 1;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 player_account_id = 2;
  bool has_player_account_id() const;
  void clear_player_account_id();
  static const int kPlayerAccountIdFieldNumber = 2;
  ::google::protobuf::uint32 player_account_id() const;
  void set_player_account_id(::google::protobuf::uint32 value);

  // optional uint32 team_id = 3;
  bool has_team_id() const;
  void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  ::google::protobuf::uint32 team_id() const;
  void set_team_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopMatchesRequest)
 private:
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_player_account_id();
  void clear_has_player_account_id();
  void set_has_team_id();
  void clear_has_team_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 player_account_id_;
  ::google::protobuf::uint32 team_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopLeagueMatchesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopLeagueMatchesRequest) */ {
 public:
  CMsgClientToGCTopLeagueMatchesRequest();
  virtual ~CMsgClientToGCTopLeagueMatchesRequest();

  CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from);

  inline CMsgClientToGCTopLeagueMatchesRequest& operator=(const CMsgClientToGCTopLeagueMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopLeagueMatchesRequest& default_instance();

  static inline const CMsgClientToGCTopLeagueMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopLeagueMatchesRequest*>(
               &_CMsgClientToGCTopLeagueMatchesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CMsgClientToGCTopLeagueMatchesRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopLeagueMatchesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCTopLeagueMatchesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCTopLeagueMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCTopFriendMatchesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCTopFriendMatchesRequest) */ {
 public:
  CMsgClientToGCTopFriendMatchesRequest();
  virtual ~CMsgClientToGCTopFriendMatchesRequest();

  CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from);

  inline CMsgClientToGCTopFriendMatchesRequest& operator=(const CMsgClientToGCTopFriendMatchesRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCTopFriendMatchesRequest& default_instance();

  static inline const CMsgClientToGCTopFriendMatchesRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCTopFriendMatchesRequest*>(
               &_CMsgClientToGCTopFriendMatchesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CMsgClientToGCTopFriendMatchesRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCTopFriendMatchesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCTopFriendMatchesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  void MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCTopFriendMatchesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCMatchesMinimalRequest) */ {
 public:
  CMsgClientToGCMatchesMinimalRequest();
  virtual ~CMsgClientToGCMatchesMinimalRequest();

  CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from);

  inline CMsgClientToGCMatchesMinimalRequest& operator=(const CMsgClientToGCMatchesMinimalRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCMatchesMinimalRequest& default_instance();

  static inline const CMsgClientToGCMatchesMinimalRequest* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalRequest*>(
               &_CMsgClientToGCMatchesMinimalRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CMsgClientToGCMatchesMinimalRequest* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCMatchesMinimalRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCMatchesMinimalRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCMatchesMinimalRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 match_ids = 1;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 1;
  ::google::protobuf::uint64 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint64 value);
  void add_match_ids(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_match_ids();

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCMatchesMinimalRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > match_ids_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCMatchesMinimalResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCMatchesMinimalResponse) */ {
 public:
  CMsgClientToGCMatchesMinimalResponse();
  virtual ~CMsgClientToGCMatchesMinimalResponse();

  CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from);

  inline CMsgClientToGCMatchesMinimalResponse& operator=(const CMsgClientToGCMatchesMinimalResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCMatchesMinimalResponse& default_instance();

  static inline const CMsgClientToGCMatchesMinimalResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCMatchesMinimalResponse*>(
               &_CMsgClientToGCMatchesMinimalResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CMsgClientToGCMatchesMinimalResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCMatchesMinimalResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCMatchesMinimalResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  void MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCMatchesMinimalResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // optional bool last_match = 2;
  bool has_last_match() const;
  void clear_last_match();
  static const int kLastMatchFieldNumber = 2;
  bool last_match() const;
  void set_last_match(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCMatchesMinimalResponse)
 private:
  void set_has_last_match();
  void clear_has_last_match();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  bool last_match_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopLeagueMatchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopLeagueMatchesResponse) */ {
 public:
  CMsgGCToClientTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientTopLeagueMatchesResponse();

  CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from);

  inline CMsgGCToClientTopLeagueMatchesResponse& operator=(const CMsgGCToClientTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopLeagueMatchesResponse& default_instance();

  static inline const CMsgGCToClientTopLeagueMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopLeagueMatchesResponse*>(
               &_CMsgGCToClientTopLeagueMatchesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(CMsgGCToClientTopLeagueMatchesResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopLeagueMatchesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToClientTopLeagueMatchesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 2;
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgGCToClientTopFriendMatchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientTopFriendMatchesResponse) */ {
 public:
  CMsgGCToClientTopFriendMatchesResponse();
  virtual ~CMsgGCToClientTopFriendMatchesResponse();

  CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from);

  inline CMsgGCToClientTopFriendMatchesResponse& operator=(const CMsgGCToClientTopFriendMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientTopFriendMatchesResponse& default_instance();

  static inline const CMsgGCToClientTopFriendMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientTopFriendMatchesResponse*>(
               &_CMsgGCToClientTopFriendMatchesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(CMsgGCToClientTopFriendMatchesResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgGCToClientTopFriendMatchesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToClientTopFriendMatchesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 1;
  const ::proto::dota::CMsgDOTAMatchMinimal& matches(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_matches(int index);
  ::proto::dota::CMsgDOTAMatchMinimal* add_matches();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
      matches() const;

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal > matches_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgClientToGCFindTopMatches : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgClientToGCFindTopMatches) */ {
 public:
  CMsgClientToGCFindTopMatches();
  virtual ~CMsgClientToGCFindTopMatches();

  CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from);

  inline CMsgClientToGCFindTopMatches& operator=(const CMsgClientToGCFindTopMatches& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgClientToGCFindTopMatches& default_instance();

  static inline const CMsgClientToGCFindTopMatches* internal_default_instance() {
    return reinterpret_cast<const CMsgClientToGCFindTopMatches*>(
               &_CMsgClientToGCFindTopMatches_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(CMsgClientToGCFindTopMatches* other);

  // implements Message ----------------------------------------------

  inline CMsgClientToGCFindTopMatches* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgClientToGCFindTopMatches* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgClientToGCFindTopMatches& from);
  void MergeFrom(const CMsgClientToGCFindTopMatches& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgClientToGCFindTopMatches* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 start_game = 1;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 friend_id = 4;
  bool has_friend_id() const;
  void clear_friend_id();
  static const int kFriendIdFieldNumber = 4;
  ::google::protobuf::uint32 friend_id() const;
  void set_friend_id(::google::protobuf::uint32 value);

  // optional bool friend_list = 5;
  bool has_friend_list() const;
  void clear_friend_list();
  static const int kFriendListFieldNumber = 5;
  bool friend_list() const;
  void set_friend_list(bool value);

  // optional bool league_list = 6;
  bool has_league_list() const;
  void clear_league_list();
  static const int kLeagueListFieldNumber = 6;
  bool league_list() const;
  void set_league_list(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgClientToGCFindTopMatches)
 private:
  void set_has_start_game();
  void clear_has_start_game();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_friend_id();
  void clear_has_friend_id();
  void set_has_friend_list();
  void clear_has_friend_list();
  void set_has_league_list();
  void clear_has_league_list();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 friend_id_;
  bool friend_list_;
  bool league_list_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgGCToClientFindTopLeagueMatchesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse) */ {
 public:
  CMsgGCToClientFindTopLeagueMatchesResponse();
  virtual ~CMsgGCToClientFindTopLeagueMatchesResponse();

  CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from);

  inline CMsgGCToClientFindTopLeagueMatchesResponse& operator=(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgGCToClientFindTopLeagueMatchesResponse& default_instance();

  static inline const CMsgGCToClientFindTopLeagueMatchesResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgGCToClientFindTopLeagueMatchesResponse*>(
               &_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgGCToClientFindTopLeagueMatchesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgGCToClientFindTopLeagueMatchesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  void MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgGCToClientFindTopLeagueMatchesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 match_ids = 4;
  int match_ids_size() const;
  void clear_match_ids();
  static const int kMatchIdsFieldNumber = 4;
  ::google::protobuf::uint32 match_ids(int index) const;
  void set_match_ids(int index, ::google::protobuf::uint32 value);
  void add_match_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      match_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_match_ids();

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  int matches_size() const;
  void clear_matches();
  static const int kMatchesFieldNumber = 5;
  const ::proto::dota::CMsgDOTAMatch& matches(int index) const;
  ::proto::dota::CMsgDOTAMatch* mutable_matches(int index);
  ::proto::dota::CMsgDOTAMatch* add_matches();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >*
      mutable_matches();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >&
      matches() const;

  // optional uint32 start_game = 1;
  bool has_start_game() const;
  void clear_start_game();
  static const int kStartGameFieldNumber = 1;
  ::google::protobuf::uint32 start_game() const;
  void set_start_game(::google::protobuf::uint32 value);

  // optional uint32 league_id = 2;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 2;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 3;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 3;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
 private:
  void set_has_start_game();
  void clear_has_start_game();
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_hero_id();
  void clear_has_hero_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > match_ids_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch > matches_;
  ::google::protobuf::uint32 start_game_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 hero_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgSpectateFriendGame) */ {
 public:
  CMsgSpectateFriendGame();
  virtual ~CMsgSpectateFriendGame();

  CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from);

  inline CMsgSpectateFriendGame& operator=(const CMsgSpectateFriendGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGame& default_instance();

  static inline const CMsgSpectateFriendGame* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGame*>(
               &_CMsgSpectateFriendGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(CMsgSpectateFriendGame* other);

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectateFriendGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectateFriendGame& from);
  void MergeFrom(const CMsgSpectateFriendGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectateFriendGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 steam_id = 1;
  bool has_steam_id() const;
  void clear_steam_id();
  static const int kSteamIdFieldNumber = 1;
  ::google::protobuf::uint64 steam_id() const;
  void set_steam_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgSpectateFriendGame)
 private:
  void set_has_steam_id();
  void clear_has_steam_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 steam_id_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgSpectateFriendGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgSpectateFriendGameResponse) */ {
 public:
  CMsgSpectateFriendGameResponse();
  virtual ~CMsgSpectateFriendGameResponse();

  CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from);

  inline CMsgSpectateFriendGameResponse& operator=(const CMsgSpectateFriendGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgSpectateFriendGameResponse& default_instance();

  static inline const CMsgSpectateFriendGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgSpectateFriendGameResponse*>(
               &_CMsgSpectateFriendGameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(CMsgSpectateFriendGameResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgSpectateFriendGameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgSpectateFriendGameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgSpectateFriendGameResponse& from);
  void MergeFrom(const CMsgSpectateFriendGameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgSpectateFriendGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 server_steamid = 4;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 4;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgSpectateFriendGameResponse)
 private:
  void set_has_server_steamid();
  void clear_has_server_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 server_steamid_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Player : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal.Player) */ {
 public:
  CMsgDOTAMatchMinimal_Player();
  virtual ~CMsgDOTAMatchMinimal_Player();

  CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from);

  inline CMsgDOTAMatchMinimal_Player& operator=(const CMsgDOTAMatchMinimal_Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal_Player& default_instance();

  static inline const CMsgDOTAMatchMinimal_Player* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Player*>(
               &_CMsgDOTAMatchMinimal_Player_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(CMsgDOTAMatchMinimal_Player* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal_Player* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchMinimal_Player* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchMinimal_Player& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Player& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchMinimal_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 items = 6;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 6;
  ::google::protobuf::uint32 items(int index) const;
  void set_items(int index, ::google::protobuf::uint32 value);
  void add_items(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      items() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_items();

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional uint32 hero_id = 2;
  bool has_hero_id() const;
  void clear_hero_id();
  static const int kHeroIdFieldNumber = 2;
  ::google::protobuf::uint32 hero_id() const;
  void set_hero_id(::google::protobuf::uint32 value);

  // optional uint32 kills = 3;
  bool has_kills() const;
  void clear_kills();
  static const int kKillsFieldNumber = 3;
  ::google::protobuf::uint32 kills() const;
  void set_kills(::google::protobuf::uint32 value);

  // optional uint32 deaths = 4;
  bool has_deaths() const;
  void clear_deaths();
  static const int kDeathsFieldNumber = 4;
  ::google::protobuf::uint32 deaths() const;
  void set_deaths(::google::protobuf::uint32 value);

  // optional uint32 assists = 5;
  bool has_assists() const;
  void clear_assists();
  static const int kAssistsFieldNumber = 5;
  ::google::protobuf::uint32 assists() const;
  void set_assists(::google::protobuf::uint32 value);

  // optional uint32 player_slot = 7;
  bool has_player_slot() const;
  void clear_player_slot();
  static const int kPlayerSlotFieldNumber = 7;
  ::google::protobuf::uint32 player_slot() const;
  void set_player_slot(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal.Player)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_hero_id();
  void clear_has_hero_id();
  void set_has_kills();
  void clear_has_kills();
  void set_has_deaths();
  void clear_has_deaths();
  void set_has_assists();
  void clear_has_assists();
  void set_has_player_slot();
  void clear_has_player_slot();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > items_;
  ::google::protobuf::uint32 account_id_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 kills_;
  ::google::protobuf::uint32 deaths_;
  ::google::protobuf::uint32 assists_;
  ::google::protobuf::uint32 player_slot_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal_Tourney : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal.Tourney) */ {
 public:
  CMsgDOTAMatchMinimal_Tourney();
  virtual ~CMsgDOTAMatchMinimal_Tourney();

  CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from);

  inline CMsgDOTAMatchMinimal_Tourney& operator=(const CMsgDOTAMatchMinimal_Tourney& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal_Tourney& default_instance();

  static inline const CMsgDOTAMatchMinimal_Tourney* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal_Tourney*>(
               &_CMsgDOTAMatchMinimal_Tourney_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(CMsgDOTAMatchMinimal_Tourney* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal_Tourney* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchMinimal_Tourney* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  void MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchMinimal_Tourney* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string radiant_team_name = 3;
  bool has_radiant_team_name() const;
  void clear_radiant_team_name();
  static const int kRadiantTeamNameFieldNumber = 3;
  const ::std::string& radiant_team_name() const;
  void set_radiant_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_radiant_team_name(::std::string&& value);
  #endif
  void set_radiant_team_name(const char* value);
  void set_radiant_team_name(const char* value, size_t size);
  ::std::string* mutable_radiant_team_name();
  ::std::string* release_radiant_team_name();
  void set_allocated_radiant_team_name(::std::string* radiant_team_name);

  // optional string dire_team_name = 6;
  bool has_dire_team_name() const;
  void clear_dire_team_name();
  static const int kDireTeamNameFieldNumber = 6;
  const ::std::string& dire_team_name() const;
  void set_dire_team_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dire_team_name(::std::string&& value);
  #endif
  void set_dire_team_name(const char* value);
  void set_dire_team_name(const char* value, size_t size);
  ::std::string* mutable_dire_team_name();
  ::std::string* release_dire_team_name();
  void set_allocated_dire_team_name(::std::string* dire_team_name);

  // optional uint32 league_id = 1;
  bool has_league_id() const;
  void clear_league_id();
  static const int kLeagueIdFieldNumber = 1;
  ::google::protobuf::uint32 league_id() const;
  void set_league_id(::google::protobuf::uint32 value);

  // optional uint32 radiant_team_id = 2;
  bool has_radiant_team_id() const;
  void clear_radiant_team_id();
  static const int kRadiantTeamIdFieldNumber = 2;
  ::google::protobuf::uint32 radiant_team_id() const;
  void set_radiant_team_id(::google::protobuf::uint32 value);

  // optional fixed64 radiant_team_logo = 4;
  bool has_radiant_team_logo() const;
  void clear_radiant_team_logo();
  static const int kRadiantTeamLogoFieldNumber = 4;
  ::google::protobuf::uint64 radiant_team_logo() const;
  void set_radiant_team_logo(::google::protobuf::uint64 value);

  // optional uint32 dire_team_id = 5;
  bool has_dire_team_id() const;
  void clear_dire_team_id();
  static const int kDireTeamIdFieldNumber = 5;
  ::google::protobuf::uint32 dire_team_id() const;
  void set_dire_team_id(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional fixed64 dire_team_logo = 7;
  bool has_dire_team_logo() const;
  void clear_dire_team_logo();
  static const int kDireTeamLogoFieldNumber = 7;
  ::google::protobuf::uint64 dire_team_logo() const;
  void set_dire_team_logo(::google::protobuf::uint64 value);

  // optional uint32 series_game = 9;
  bool has_series_game() const;
  void clear_series_game();
  static const int kSeriesGameFieldNumber = 9;
  ::google::protobuf::uint32 series_game() const;
  void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_tournament_id = 10;
  bool has_weekend_tourney_tournament_id() const;
  void clear_weekend_tourney_tournament_id();
  static const int kWeekendTourneyTournamentIdFieldNumber = 10;
  ::google::protobuf::uint32 weekend_tourney_tournament_id() const;
  void set_weekend_tourney_tournament_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  bool has_weekend_tourney_season_trophy_id() const;
  void clear_weekend_tourney_season_trophy_id();
  static const int kWeekendTourneySeasonTrophyIdFieldNumber = 11;
  ::google::protobuf::uint32 weekend_tourney_season_trophy_id() const;
  void set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_division = 12;
  bool has_weekend_tourney_division() const;
  void clear_weekend_tourney_division();
  static const int kWeekendTourneyDivisionFieldNumber = 12;
  ::google::protobuf::uint32 weekend_tourney_division() const;
  void set_weekend_tourney_division(::google::protobuf::uint32 value);

  // optional uint32 weekend_tourney_skill_level = 13;
  bool has_weekend_tourney_skill_level() const;
  void clear_weekend_tourney_skill_level();
  static const int kWeekendTourneySkillLevelFieldNumber = 13;
  ::google::protobuf::uint32 weekend_tourney_skill_level() const;
  void set_weekend_tourney_skill_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal.Tourney)
 private:
  void set_has_league_id();
  void clear_has_league_id();
  void set_has_series_type();
  void clear_has_series_type();
  void set_has_series_game();
  void clear_has_series_game();
  void set_has_weekend_tourney_tournament_id();
  void clear_has_weekend_tourney_tournament_id();
  void set_has_weekend_tourney_season_trophy_id();
  void clear_has_weekend_tourney_season_trophy_id();
  void set_has_weekend_tourney_division();
  void clear_has_weekend_tourney_division();
  void set_has_weekend_tourney_skill_level();
  void clear_has_weekend_tourney_skill_level();
  void set_has_radiant_team_id();
  void clear_has_radiant_team_id();
  void set_has_radiant_team_name();
  void clear_has_radiant_team_name();
  void set_has_radiant_team_logo();
  void clear_has_radiant_team_logo();
  void set_has_dire_team_id();
  void clear_has_dire_team_id();
  void set_has_dire_team_name();
  void clear_has_dire_team_name();
  void set_has_dire_team_logo();
  void clear_has_dire_team_logo();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr radiant_team_name_;
  ::google::protobuf::internal::ArenaStringPtr dire_team_name_;
  ::google::protobuf::uint32 league_id_;
  ::google::protobuf::uint32 radiant_team_id_;
  ::google::protobuf::uint64 radiant_team_logo_;
  ::google::protobuf::uint32 dire_team_id_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint64 dire_team_logo_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 weekend_tourney_tournament_id_;
  ::google::protobuf::uint32 weekend_tourney_season_trophy_id_;
  ::google::protobuf::uint32 weekend_tourney_division_;
  ::google::protobuf::uint32 weekend_tourney_skill_level_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgDOTAMatchMinimal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTAMatchMinimal) */ {
 public:
  CMsgDOTAMatchMinimal();
  virtual ~CMsgDOTAMatchMinimal();

  CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from);

  inline CMsgDOTAMatchMinimal& operator=(const CMsgDOTAMatchMinimal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgDOTAMatchMinimal& default_instance();

  static inline const CMsgDOTAMatchMinimal* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTAMatchMinimal*>(
               &_CMsgDOTAMatchMinimal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(CMsgDOTAMatchMinimal* other);

  // implements Message ----------------------------------------------

  inline CMsgDOTAMatchMinimal* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgDOTAMatchMinimal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgDOTAMatchMinimal& from);
  void MergeFrom(const CMsgDOTAMatchMinimal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgDOTAMatchMinimal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgDOTAMatchMinimal_Player Player;
  typedef CMsgDOTAMatchMinimal_Tourney Tourney;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 6;
  const ::proto::dota::CMsgDOTAMatchMinimal_Player& players(int index) const;
  ::proto::dota::CMsgDOTAMatchMinimal_Player* mutable_players(int index);
  ::proto::dota::CMsgDOTAMatchMinimal_Player* add_players();
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >*
      mutable_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >&
      players() const;

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  bool has_tourney() const;
  void clear_tourney();
  static const int kTourneyFieldNumber = 7;
  const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& tourney() const;
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* mutable_tourney();
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* release_tourney();
  void set_allocated_tourney(::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney);

  // optional uint64 match_id = 1;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional fixed32 start_time = 2;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // optional uint32 duration = 3;
  bool has_duration() const;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  bool has_game_mode() const;
  void clear_game_mode();
  static const int kGameModeFieldNumber = 4;
  ::proto::dota::DOTA_GameMode game_mode() const;
  void set_game_mode(::proto::dota::DOTA_GameMode value);

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  bool has_match_outcome() const;
  void clear_match_outcome();
  static const int kMatchOutcomeFieldNumber = 8;
  ::proto::dota::EMatchOutcome match_outcome() const;
  void set_match_outcome(::proto::dota::EMatchOutcome value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTAMatchMinimal)
 private:
  void set_has_match_id();
  void clear_has_match_id();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_duration();
  void clear_has_duration();
  void set_has_game_mode();
  void clear_has_game_mode();
  void set_has_tourney();
  void clear_has_tourney();
  void set_has_match_outcome();
  void clear_has_match_outcome();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player > players_;
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 duration_;
  int game_mode_;
  int match_outcome_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo_Highlight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAReplayDownloadInfo.Highlight) */ {
 public:
  CDOTAReplayDownloadInfo_Highlight();
  virtual ~CDOTAReplayDownloadInfo_Highlight();

  CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from);

  inline CDOTAReplayDownloadInfo_Highlight& operator=(const CDOTAReplayDownloadInfo_Highlight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAReplayDownloadInfo_Highlight& default_instance();

  static inline const CDOTAReplayDownloadInfo_Highlight* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo_Highlight*>(
               &_CDOTAReplayDownloadInfo_Highlight_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CDOTAReplayDownloadInfo_Highlight* other);

  // implements Message ----------------------------------------------

  inline CDOTAReplayDownloadInfo_Highlight* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAReplayDownloadInfo_Highlight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  void MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAReplayDownloadInfo_Highlight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string description = 2;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional uint32 timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAReplayDownloadInfo.Highlight)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_description();
  void clear_has_description();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::uint32 timestamp_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDOTAReplayDownloadInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAReplayDownloadInfo) */ {
 public:
  CDOTAReplayDownloadInfo();
  virtual ~CDOTAReplayDownloadInfo();

  CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from);

  inline CDOTAReplayDownloadInfo& operator=(const CDOTAReplayDownloadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTAReplayDownloadInfo& default_instance();

  static inline const CDOTAReplayDownloadInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTAReplayDownloadInfo*>(
               &_CDOTAReplayDownloadInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(CDOTAReplayDownloadInfo* other);

  // implements Message ----------------------------------------------

  inline CDOTAReplayDownloadInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTAReplayDownloadInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTAReplayDownloadInfo& from);
  void MergeFrom(const CDOTAReplayDownloadInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTAReplayDownloadInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CDOTAReplayDownloadInfo_Highlight Highlight;

  // accessors -------------------------------------------------------

  // repeated string tags = 5;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 5;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string title = 2;
  bool has_title() const;
  void clear_title();
  static const int kTitleFieldNumber = 2;
  const ::std::string& title() const;
  void set_title(const ::std::string& value);
  #if LANG_CXX11
  void set_title(::std::string&& value);
  #endif
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  ::std::string* mutable_title();
  ::std::string* release_title();
  void set_allocated_title(::std::string* title);

  // optional string description = 3;
  bool has_description() const;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  bool has_match() const;
  void clear_match();
  static const int kMatchFieldNumber = 1;
  const ::proto::dota::CMsgDOTAMatchMinimal& match() const;
  ::proto::dota::CMsgDOTAMatchMinimal* mutable_match();
  ::proto::dota::CMsgDOTAMatchMinimal* release_match();
  void set_allocated_match(::proto::dota::CMsgDOTAMatchMinimal* match);

  // optional uint32 size = 4;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint32 size() const;
  void set_size(::google::protobuf::uint32 value);

  // optional bool exists_on_disk = 6;
  bool has_exists_on_disk() const;
  void clear_exists_on_disk();
  static const int kExistsOnDiskFieldNumber = 6;
  bool exists_on_disk() const;
  void set_exists_on_disk(bool value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAReplayDownloadInfo)
 private:
  void set_has_match();
  void clear_has_match();
  void set_has_title();
  void clear_has_title();
  void set_has_description();
  void clear_has_description();
  void set_has_size();
  void clear_has_size();
  void set_has_exists_on_disk();
  void clear_has_exists_on_disk();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr title_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::proto::dota::CMsgDOTAMatchMinimal* match_;
  ::google::protobuf::uint32 size_;
  bool exists_on_disk_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgWatchGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgWatchGame) */ {
 public:
  CMsgWatchGame();
  virtual ~CMsgWatchGame();

  CMsgWatchGame(const CMsgWatchGame& from);

  inline CMsgWatchGame& operator=(const CMsgWatchGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGame& default_instance();

  static inline const CMsgWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGame*>(
               &_CMsgWatchGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(CMsgWatchGame* other);

  // implements Message ----------------------------------------------

  inline CMsgWatchGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgWatchGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgWatchGame& from);
  void MergeFrom(const CMsgWatchGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 regions = 5;
  int regions_size() const;
  void clear_regions();
  static const int kRegionsFieldNumber = 5;
  ::google::protobuf::uint32 regions(int index) const;
  void set_regions(int index, ::google::protobuf::uint32 value);
  void add_regions(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      regions() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_regions();

  // optional fixed64 server_steamid = 1;
  bool has_server_steamid() const;
  void clear_server_steamid();
  static const int kServerSteamidFieldNumber = 1;
  ::google::protobuf::uint64 server_steamid() const;
  void set_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 3;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 3;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional uint64 lobby_id = 4;
  bool has_lobby_id() const;
  void clear_lobby_id();
  static const int kLobbyIdFieldNumber = 4;
  ::google::protobuf::uint64 lobby_id() const;
  void set_lobby_id(::google::protobuf::uint64 value);

  // optional uint32 client_version = 2;
  bool has_client_version() const;
  void clear_client_version();
  static const int kClientVersionFieldNumber = 2;
  ::google::protobuf::uint32 client_version() const;
  void set_client_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgWatchGame)
 private:
  void set_has_server_steamid();
  void clear_has_server_steamid();
  void set_has_client_version();
  void clear_has_client_version();
  void set_has_watch_server_steamid();
  void clear_has_watch_server_steamid();
  void set_has_lobby_id();
  void clear_has_lobby_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > regions_;
  ::google::protobuf::uint64 server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 lobby_id_;
  ::google::protobuf::uint32 client_version_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgCancelWatchGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgCancelWatchGame) */ {
 public:
  CMsgCancelWatchGame();
  virtual ~CMsgCancelWatchGame();

  CMsgCancelWatchGame(const CMsgCancelWatchGame& from);

  inline CMsgCancelWatchGame& operator=(const CMsgCancelWatchGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgCancelWatchGame& default_instance();

  static inline const CMsgCancelWatchGame* internal_default_instance() {
    return reinterpret_cast<const CMsgCancelWatchGame*>(
               &_CMsgCancelWatchGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(CMsgCancelWatchGame* other);

  // implements Message ----------------------------------------------

  inline CMsgCancelWatchGame* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgCancelWatchGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgCancelWatchGame& from);
  void MergeFrom(const CMsgCancelWatchGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgCancelWatchGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgCancelWatchGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgWatchGameResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgWatchGameResponse) */ {
 public:
  CMsgWatchGameResponse();
  virtual ~CMsgWatchGameResponse();

  CMsgWatchGameResponse(const CMsgWatchGameResponse& from);

  inline CMsgWatchGameResponse& operator=(const CMsgWatchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgWatchGameResponse& default_instance();

  static inline const CMsgWatchGameResponse* internal_default_instance() {
    return reinterpret_cast<const CMsgWatchGameResponse*>(
               &_CMsgWatchGameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(CMsgWatchGameResponse* other);

  // implements Message ----------------------------------------------

  inline CMsgWatchGameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgWatchGameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgWatchGameResponse& from);
  void MergeFrom(const CMsgWatchGameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgWatchGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CMsgWatchGameResponse_WatchGameResult WatchGameResult;
  static const WatchGameResult PENDING =
    CMsgWatchGameResponse_WatchGameResult_PENDING;
  static const WatchGameResult READY =
    CMsgWatchGameResponse_WatchGameResult_READY;
  static const WatchGameResult GAMESERVERNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_GAMESERVERNOTFOUND;
  static const WatchGameResult UNAVAILABLE =
    CMsgWatchGameResponse_WatchGameResult_UNAVAILABLE;
  static const WatchGameResult CANCELLED =
    CMsgWatchGameResponse_WatchGameResult_CANCELLED;
  static const WatchGameResult INCOMPATIBLEVERSION =
    CMsgWatchGameResponse_WatchGameResult_INCOMPATIBLEVERSION;
  static const WatchGameResult MISSINGLEAGUESUBSCRIPTION =
    CMsgWatchGameResponse_WatchGameResult_MISSINGLEAGUESUBSCRIPTION;
  static const WatchGameResult LOBBYNOTFOUND =
    CMsgWatchGameResponse_WatchGameResult_LOBBYNOTFOUND;
  static inline bool WatchGameResult_IsValid(int value) {
    return CMsgWatchGameResponse_WatchGameResult_IsValid(value);
  }
  static const WatchGameResult WatchGameResult_MIN =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MIN;
  static const WatchGameResult WatchGameResult_MAX =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_MAX;
  static const int WatchGameResult_ARRAYSIZE =
    CMsgWatchGameResponse_WatchGameResult_WatchGameResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  WatchGameResult_descriptor() {
    return CMsgWatchGameResponse_WatchGameResult_descriptor();
  }
  static inline const ::std::string& WatchGameResult_Name(WatchGameResult value) {
    return CMsgWatchGameResponse_WatchGameResult_Name(value);
  }
  static inline bool WatchGameResult_Parse(const ::std::string& name,
      WatchGameResult* value) {
    return CMsgWatchGameResponse_WatchGameResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  bool has_watch_game_result() const;
  void clear_watch_game_result();
  static const int kWatchGameResultFieldNumber = 1;
  ::proto::dota::CMsgWatchGameResponse_WatchGameResult watch_game_result() const;
  void set_watch_game_result(::proto::dota::CMsgWatchGameResponse_WatchGameResult value);

  // optional uint32 source_tv_public_addr = 2;
  bool has_source_tv_public_addr() const;
  void clear_source_tv_public_addr();
  static const int kSourceTvPublicAddrFieldNumber = 2;
  ::google::protobuf::uint32 source_tv_public_addr() const;
  void set_source_tv_public_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_private_addr = 3;
  bool has_source_tv_private_addr() const;
  void clear_source_tv_private_addr();
  static const int kSourceTvPrivateAddrFieldNumber = 3;
  ::google::protobuf::uint32 source_tv_private_addr() const;
  void set_source_tv_private_addr(::google::protobuf::uint32 value);

  // optional uint32 source_tv_port = 4;
  bool has_source_tv_port() const;
  void clear_source_tv_port();
  static const int kSourceTvPortFieldNumber = 4;
  ::google::protobuf::uint32 source_tv_port() const;
  void set_source_tv_port(::google::protobuf::uint32 value);

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  ::google::protobuf::uint64 game_server_steamid() const;
  void set_game_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_server_steamid = 6;
  bool has_watch_server_steamid() const;
  void clear_watch_server_steamid();
  static const int kWatchServerSteamidFieldNumber = 6;
  ::google::protobuf::uint64 watch_server_steamid() const;
  void set_watch_server_steamid(::google::protobuf::uint64 value);

  // optional fixed64 watch_tv_unique_secret_code = 7;
  bool has_watch_tv_unique_secret_code() const;
  void clear_watch_tv_unique_secret_code();
  static const int kWatchTvUniqueSecretCodeFieldNumber = 7;
  ::google::protobuf::uint64 watch_tv_unique_secret_code() const;
  void set_watch_tv_unique_secret_code(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgWatchGameResponse)
 private:
  void set_has_watch_game_result();
  void clear_has_watch_game_result();
  void set_has_source_tv_public_addr();
  void clear_has_source_tv_public_addr();
  void set_has_source_tv_private_addr();
  void clear_has_source_tv_private_addr();
  void set_has_source_tv_port();
  void clear_has_source_tv_port();
  void set_has_game_server_steamid();
  void clear_has_game_server_steamid();
  void set_has_watch_server_steamid();
  void clear_has_watch_server_steamid();
  void set_has_watch_tv_unique_secret_code();
  void clear_has_watch_tv_unique_secret_code();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int watch_game_result_;
  ::google::protobuf::uint32 source_tv_public_addr_;
  ::google::protobuf::uint32 source_tv_private_addr_;
  ::google::protobuf::uint32 source_tv_port_;
  ::google::protobuf::uint64 game_server_steamid_;
  ::google::protobuf::uint64 watch_server_steamid_;
  ::google::protobuf::uint64 watch_tv_unique_secret_code_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CMsgPartyLeaderWatchGamePrompt : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgPartyLeaderWatchGamePrompt) */ {
 public:
  CMsgPartyLeaderWatchGamePrompt();
  virtual ~CMsgPartyLeaderWatchGamePrompt();

  CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from);

  inline CMsgPartyLeaderWatchGamePrompt& operator=(const CMsgPartyLeaderWatchGamePrompt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CMsgPartyLeaderWatchGamePrompt& default_instance();

  static inline const CMsgPartyLeaderWatchGamePrompt* internal_default_instance() {
    return reinterpret_cast<const CMsgPartyLeaderWatchGamePrompt*>(
               &_CMsgPartyLeaderWatchGamePrompt_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(CMsgPartyLeaderWatchGamePrompt* other);

  // implements Message ----------------------------------------------

  inline CMsgPartyLeaderWatchGamePrompt* New() const PROTOBUF_FINAL { return New(NULL); }

  CMsgPartyLeaderWatchGamePrompt* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  void MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CMsgPartyLeaderWatchGamePrompt* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 game_server_steamid = 5;
  bool has_game_server_steamid() const;
  void clear_game_server_steamid();
  static const int kGameServerSteamidFieldNumber = 5;
  ::google::protobuf::uint64 game_server_steamid() const;
  void set_game_server_steamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgPartyLeaderWatchGamePrompt)
 private:
  void set_has_game_server_steamid();
  void clear_has_game_server_steamid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint64 game_server_steamid_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CDOTABroadcasterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTABroadcasterInfo) */ {
 public:
  CDOTABroadcasterInfo();
  virtual ~CDOTABroadcasterInfo();

  CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from);

  inline CDOTABroadcasterInfo& operator=(const CDOTABroadcasterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CDOTABroadcasterInfo& default_instance();

  static inline const CDOTABroadcasterInfo* internal_default_instance() {
    return reinterpret_cast<const CDOTABroadcasterInfo*>(
               &_CDOTABroadcasterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(CDOTABroadcasterInfo* other);

  // implements Message ----------------------------------------------

  inline CDOTABroadcasterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CDOTABroadcasterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CDOTABroadcasterInfo& from);
  void MergeFrom(const CDOTABroadcasterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CDOTABroadcasterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string team_name_radiant = 4;
  bool has_team_name_radiant() const;
  void clear_team_name_radiant();
  static const int kTeamNameRadiantFieldNumber = 4;
  const ::std::string& team_name_radiant() const;
  void set_team_name_radiant(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_radiant(::std::string&& value);
  #endif
  void set_team_name_radiant(const char* value);
  void set_team_name_radiant(const char* value, size_t size);
  ::std::string* mutable_team_name_radiant();
  ::std::string* release_team_name_radiant();
  void set_allocated_team_name_radiant(::std::string* team_name_radiant);

  // optional string team_name_dire = 5;
  bool has_team_name_dire() const;
  void clear_team_name_dire();
  static const int kTeamNameDireFieldNumber = 5;
  const ::std::string& team_name_dire() const;
  void set_team_name_dire(const ::std::string& value);
  #if LANG_CXX11
  void set_team_name_dire(::std::string&& value);
  #endif
  void set_team_name_dire(const char* value);
  void set_team_name_dire(const char* value, size_t size);
  ::std::string* mutable_team_name_dire();
  ::std::string* release_team_name_dire();
  void set_allocated_team_name_dire(::std::string* team_name_dire);

  // optional string stage_name = 6;
  bool has_stage_name() const;
  void clear_stage_name();
  static const int kStageNameFieldNumber = 6;
  const ::std::string& stage_name() const;
  void set_stage_name(const ::std::string& value);
  #if LANG_CXX11
  void set_stage_name(::std::string&& value);
  #endif
  void set_stage_name(const char* value);
  void set_stage_name(const char* value, size_t size);
  ::std::string* mutable_stage_name();
  ::std::string* release_stage_name();
  void set_allocated_stage_name(::std::string* stage_name);

  // optional fixed64 server_steam_id = 2;
  bool has_server_steam_id() const;
  void clear_server_steam_id();
  static const int kServerSteamIdFieldNumber = 2;
  ::google::protobuf::uint64 server_steam_id() const;
  void set_server_steam_id(::google::protobuf::uint64 value);

  // optional uint32 account_id = 1;
  bool has_account_id() const;
  void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  ::google::protobuf::uint32 account_id() const;
  void set_account_id(::google::protobuf::uint32 value);

  // optional bool live = 3;
  bool has_live() const;
  void clear_live();
  static const int kLiveFieldNumber = 3;
  bool live() const;
  void set_live(bool value);

  // optional bool allow_live_video = 10;
  bool has_allow_live_video() const;
  void clear_allow_live_video();
  static const int kAllowLiveVideoFieldNumber = 10;
  bool allow_live_video() const;
  void set_allow_live_video(bool value);

  // optional uint32 series_game = 7;
  bool has_series_game() const;
  void clear_series_game();
  static const int kSeriesGameFieldNumber = 7;
  ::google::protobuf::uint32 series_game() const;
  void set_series_game(::google::protobuf::uint32 value);

  // optional uint32 series_type = 8;
  bool has_series_type() const;
  void clear_series_type();
  static const int kSeriesTypeFieldNumber = 8;
  ::google::protobuf::uint32 series_type() const;
  void set_series_type(::google::protobuf::uint32 value);

  // optional uint32 upcoming_broadcast_timestamp = 9;
  bool has_upcoming_broadcast_timestamp() const;
  void clear_upcoming_broadcast_timestamp();
  static const int kUpcomingBroadcastTimestampFieldNumber = 9;
  ::google::protobuf::uint32 upcoming_broadcast_timestamp() const;
  void set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTABroadcasterInfo)
 private:
  void set_has_account_id();
  void clear_has_account_id();
  void set_has_server_steam_id();
  void clear_has_server_steam_id();
  void set_has_live();
  void clear_has_live();
  void set_has_team_name_radiant();
  void clear_has_team_name_radiant();
  void set_has_team_name_dire();
  void clear_has_team_name_dire();
  void set_has_stage_name();
  void clear_has_stage_name();
  void set_has_series_game();
  void clear_has_series_game();
  void set_has_series_type();
  void clear_has_series_type();
  void set_has_upcoming_broadcast_timestamp();
  void clear_has_upcoming_broadcast_timestamp();
  void set_has_allow_live_video();
  void clear_has_allow_live_video();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_radiant_;
  ::google::protobuf::internal::ArenaStringPtr team_name_dire_;
  ::google::protobuf::internal::ArenaStringPtr stage_name_;
  ::google::protobuf::uint64 server_steam_id_;
  ::google::protobuf::uint32 account_id_;
  bool live_;
  bool allow_live_video_;
  ::google::protobuf::uint32 series_game_;
  ::google::protobuf::uint32 series_type_;
  ::google::protobuf::uint32 upcoming_broadcast_timestamp_;
  friend struct protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CSourceTVGameSmall_Player

// optional uint32 account_id = 1;
inline bool CSourceTVGameSmall_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGameSmall_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGameSmall_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.account_id)
  return account_id_;
}
inline void CSourceTVGameSmall_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CSourceTVGameSmall_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGameSmall_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGameSmall_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.hero_id)
  return hero_id_;
}
inline void CSourceTVGameSmall_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.hero_id)
}

// -------------------------------------------------------------------

// CSourceTVGameSmall

// optional uint32 activate_time = 1;
inline bool CSourceTVGameSmall::has_activate_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSourceTVGameSmall::set_has_activate_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSourceTVGameSmall::clear_has_activate_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSourceTVGameSmall::clear_activate_time() {
  activate_time_ = 0u;
  clear_has_activate_time();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::activate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.activate_time)
  return activate_time_;
}
inline void CSourceTVGameSmall::set_activate_time(::google::protobuf::uint32 value) {
  set_has_activate_time();
  activate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.activate_time)
}

// optional uint32 deactivate_time = 2;
inline bool CSourceTVGameSmall::has_deactivate_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSourceTVGameSmall::set_has_deactivate_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSourceTVGameSmall::clear_has_deactivate_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSourceTVGameSmall::clear_deactivate_time() {
  deactivate_time_ = 0u;
  clear_has_deactivate_time();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::deactivate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.deactivate_time)
  return deactivate_time_;
}
inline void CSourceTVGameSmall::set_deactivate_time(::google::protobuf::uint32 value) {
  set_has_deactivate_time();
  deactivate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.deactivate_time)
}

// optional uint64 server_steam_id = 3;
inline bool CSourceTVGameSmall::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSourceTVGameSmall::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSourceTVGameSmall::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSourceTVGameSmall::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.server_steam_id)
  return server_steam_id_;
}
inline void CSourceTVGameSmall::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.server_steam_id)
}

// optional uint64 lobby_id = 4;
inline bool CSourceTVGameSmall::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSourceTVGameSmall::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSourceTVGameSmall::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSourceTVGameSmall::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_id)
  return lobby_id_;
}
inline void CSourceTVGameSmall::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_id)
}

// optional uint32 league_id = 5;
inline bool CSourceTVGameSmall::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSourceTVGameSmall::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSourceTVGameSmall::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSourceTVGameSmall::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.league_id)
  return league_id_;
}
inline void CSourceTVGameSmall::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.league_id)
}

// optional uint32 lobby_type = 6;
inline bool CSourceTVGameSmall::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSourceTVGameSmall::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSourceTVGameSmall::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSourceTVGameSmall::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_type)
  return lobby_type_;
}
inline void CSourceTVGameSmall::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_type)
}

// optional int32 game_time = 7;
inline bool CSourceTVGameSmall::has_game_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSourceTVGameSmall::set_has_game_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSourceTVGameSmall::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSourceTVGameSmall::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
inline ::google::protobuf::int32 CSourceTVGameSmall::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_time)
  return game_time_;
}
inline void CSourceTVGameSmall::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_time)
}

// optional uint32 delay = 8;
inline bool CSourceTVGameSmall::has_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSourceTVGameSmall::set_has_delay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSourceTVGameSmall::clear_has_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSourceTVGameSmall::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.delay)
  return delay_;
}
inline void CSourceTVGameSmall::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.delay)
}

// optional uint32 spectators = 9;
inline bool CSourceTVGameSmall::has_spectators() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSourceTVGameSmall::set_has_spectators() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSourceTVGameSmall::clear_has_spectators() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSourceTVGameSmall::clear_spectators() {
  spectators_ = 0u;
  clear_has_spectators();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::spectators() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.spectators)
  return spectators_;
}
inline void CSourceTVGameSmall::set_spectators(::google::protobuf::uint32 value) {
  set_has_spectators();
  spectators_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.spectators)
}

// optional uint32 game_mode = 10;
inline bool CSourceTVGameSmall::has_game_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSourceTVGameSmall::set_has_game_mode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSourceTVGameSmall::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSourceTVGameSmall::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_mode)
  return game_mode_;
}
inline void CSourceTVGameSmall::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_mode)
}

// optional uint32 average_mmr = 11;
inline bool CSourceTVGameSmall::has_average_mmr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSourceTVGameSmall::set_has_average_mmr() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSourceTVGameSmall::clear_has_average_mmr() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSourceTVGameSmall::clear_average_mmr() {
  average_mmr_ = 0u;
  clear_has_average_mmr();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::average_mmr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.average_mmr)
  return average_mmr_;
}
inline void CSourceTVGameSmall::set_average_mmr(::google::protobuf::uint32 value) {
  set_has_average_mmr();
  average_mmr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.average_mmr)
}

// optional string team_name_radiant = 15;
inline bool CSourceTVGameSmall::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSourceTVGameSmall::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSourceTVGameSmall::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_radiant();
}
inline const ::std::string& CSourceTVGameSmall::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
inline void CSourceTVGameSmall::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#if LANG_CXX11
inline void CSourceTVGameSmall::set_team_name_radiant(::std::string&& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#endif
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
inline void CSourceTVGameSmall::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGameSmall::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_radiant)
  clear_has_team_name_radiant();
  return team_name_radiant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGameSmall::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != NULL) {
    set_has_team_name_radiant();
  } else {
    clear_has_team_name_radiant();
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_radiant)
}

// optional string team_name_dire = 16;
inline bool CSourceTVGameSmall::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSourceTVGameSmall::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSourceTVGameSmall::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_dire();
}
inline const ::std::string& CSourceTVGameSmall::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.GetNoArena();
}
inline void CSourceTVGameSmall::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#if LANG_CXX11
inline void CSourceTVGameSmall::set_team_name_dire(::std::string&& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#endif
inline void CSourceTVGameSmall::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_dire)
}
inline void CSourceTVGameSmall::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_dire)
}
inline ::std::string* CSourceTVGameSmall::mutable_team_name_dire() {
  set_has_team_name_dire();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CSourceTVGameSmall::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_dire)
  clear_has_team_name_dire();
  return team_name_dire_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CSourceTVGameSmall::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != NULL) {
    set_has_team_name_dire();
  } else {
    clear_has_team_name_dire();
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_dire)
}

// optional fixed64 team_logo_radiant = 24;
inline bool CSourceTVGameSmall::has_team_logo_radiant() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_logo_radiant() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSourceTVGameSmall::clear_has_team_logo_radiant() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSourceTVGameSmall::clear_team_logo_radiant() {
  team_logo_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_radiant();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_radiant)
  return team_logo_radiant_;
}
inline void CSourceTVGameSmall::set_team_logo_radiant(::google::protobuf::uint64 value) {
  set_has_team_logo_radiant();
  team_logo_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_radiant)
}

// optional fixed64 team_logo_dire = 25;
inline bool CSourceTVGameSmall::has_team_logo_dire() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSourceTVGameSmall::set_has_team_logo_dire() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSourceTVGameSmall::clear_has_team_logo_dire() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSourceTVGameSmall::clear_team_logo_dire() {
  team_logo_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_dire();
}
inline ::google::protobuf::uint64 CSourceTVGameSmall::team_logo_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_dire)
  return team_logo_dire_;
}
inline void CSourceTVGameSmall::set_team_logo_dire(::google::protobuf::uint64 value) {
  set_has_team_logo_dire();
  team_logo_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_dire)
}

// optional uint32 sort_score = 17;
inline bool CSourceTVGameSmall::has_sort_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSourceTVGameSmall::set_has_sort_score() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSourceTVGameSmall::clear_has_sort_score() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSourceTVGameSmall::clear_sort_score() {
  sort_score_ = 0u;
  clear_has_sort_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::sort_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.sort_score)
  return sort_score_;
}
inline void CSourceTVGameSmall::set_sort_score(::google::protobuf::uint32 value) {
  set_has_sort_score();
  sort_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.sort_score)
}

// optional float last_update_time = 18;
inline bool CSourceTVGameSmall::has_last_update_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSourceTVGameSmall::set_has_last_update_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSourceTVGameSmall::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSourceTVGameSmall::clear_last_update_time() {
  last_update_time_ = 0;
  clear_has_last_update_time();
}
inline float CSourceTVGameSmall::last_update_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.last_update_time)
  return last_update_time_;
}
inline void CSourceTVGameSmall::set_last_update_time(float value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.last_update_time)
}

// optional int32 radiant_lead = 19;
inline bool CSourceTVGameSmall::has_radiant_lead() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSourceTVGameSmall::set_has_radiant_lead() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSourceTVGameSmall::clear_has_radiant_lead() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSourceTVGameSmall::clear_radiant_lead() {
  radiant_lead_ = 0;
  clear_has_radiant_lead();
}
inline ::google::protobuf::int32 CSourceTVGameSmall::radiant_lead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_lead)
  return radiant_lead_;
}
inline void CSourceTVGameSmall::set_radiant_lead(::google::protobuf::int32 value) {
  set_has_radiant_lead();
  radiant_lead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_lead)
}

// optional uint32 radiant_score = 20;
inline bool CSourceTVGameSmall::has_radiant_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSourceTVGameSmall::set_has_radiant_score() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSourceTVGameSmall::clear_has_radiant_score() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSourceTVGameSmall::clear_radiant_score() {
  radiant_score_ = 0u;
  clear_has_radiant_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::radiant_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_score)
  return radiant_score_;
}
inline void CSourceTVGameSmall::set_radiant_score(::google::protobuf::uint32 value) {
  set_has_radiant_score();
  radiant_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_score)
}

// optional uint32 dire_score = 21;
inline bool CSourceTVGameSmall::has_dire_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSourceTVGameSmall::set_has_dire_score() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSourceTVGameSmall::clear_has_dire_score() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSourceTVGameSmall::clear_dire_score() {
  dire_score_ = 0u;
  clear_has_dire_score();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::dire_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.dire_score)
  return dire_score_;
}
inline void CSourceTVGameSmall::set_dire_score(::google::protobuf::uint32 value) {
  set_has_dire_score();
  dire_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.dire_score)
}

// repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
inline int CSourceTVGameSmall::players_size() const {
  return players_.size();
}
inline void CSourceTVGameSmall::clear_players() {
  players_.Clear();
}
inline const ::proto::dota::CSourceTVGameSmall_Player& CSourceTVGameSmall::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.players)
  return players_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.players)
  return players_.Mutable(index);
}
inline ::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CSourceTVGameSmall.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >*
CSourceTVGameSmall::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSourceTVGameSmall.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >&
CSourceTVGameSmall::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSourceTVGameSmall.players)
  return players_;
}

// optional fixed32 building_state = 23;
inline bool CSourceTVGameSmall::has_building_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSourceTVGameSmall::set_has_building_state() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSourceTVGameSmall::clear_has_building_state() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSourceTVGameSmall::clear_building_state() {
  building_state_ = 0u;
  clear_has_building_state();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::building_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.building_state)
  return building_state_;
}
inline void CSourceTVGameSmall::set_building_state(::google::protobuf::uint32 value) {
  set_has_building_state();
  building_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.building_state)
}

// optional uint32 weekend_tourney_tournament_id = 26;
inline bool CSourceTVGameSmall::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_division = 27;
inline bool CSourceTVGameSmall::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 28;
inline bool CSourceTVGameSmall::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 29;
inline bool CSourceTVGameSmall::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSourceTVGameSmall::set_has_weekend_tourney_bracket_round() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSourceTVGameSmall::clear_has_weekend_tourney_bracket_round() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSourceTVGameSmall::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  clear_has_weekend_tourney_bracket_round();
}
inline ::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
inline void CSourceTVGameSmall::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_bracket_round();
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopSourceTVGames

// optional string search_key = 1;
inline bool CMsgClientToGCFindTopSourceTVGames::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CMsgClientToGCFindTopSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#if LANG_CXX11
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#endif
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgClientToGCFindTopSourceTVGames::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgClientToGCFindTopSourceTVGames::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopSourceTVGames::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopSourceTVGames::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgClientToGCFindTopSourceTVGames::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
}

// optional uint32 game_list_index = 5;
inline bool CMsgClientToGCFindTopSourceTVGames::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
  return game_list_index_;
}
inline void CMsgClientToGCFindTopSourceTVGames::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
}

// repeated uint64 lobby_ids = 6;
inline int CMsgClientToGCFindTopSourceTVGames::lobby_ids_size() const {
  return lobby_ids_.size();
}
inline void CMsgClientToGCFindTopSourceTVGames::clear_lobby_ids() {
  lobby_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCFindTopSourceTVGames::lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_.Get(index);
}
inline void CMsgClientToGCFindTopSourceTVGames::set_lobby_ids(int index, ::google::protobuf::uint64 value) {
  lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline void CMsgClientToGCFindTopSourceTVGames::add_lobby_ids(::google::protobuf::uint64 value) {
  lobby_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCFindTopSourceTVGames::lobby_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCFindTopSourceTVGames::mutable_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return &lobby_ids_;
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopSourceTVGamesResponse

// optional string search_key = 1;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
inline const ::std::string& CMsgGCToClientFindTopSourceTVGamesResponse::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.GetNoArena();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#if LANG_CXX11
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#endif
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
}

// optional uint32 start_game = 4;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
}

// optional uint32 num_games = 5;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_num_games() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_num_games() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_num_games() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_num_games() {
  num_games_ = 0u;
  clear_has_num_games();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::num_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
  return num_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_num_games(::google::protobuf::uint32 value) {
  set_has_num_games();
  num_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
}

// optional uint32 game_list_index = 6;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
  return game_list_index_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
}

// repeated .proto.dota.CSourceTVGameSmall game_list = 7;
inline int CMsgGCToClientFindTopSourceTVGamesResponse::game_list_size() const {
  return game_list_.size();
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list() {
  game_list_.Clear();
}
inline const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::game_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Mutable(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::add_game_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return &game_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientFindTopSourceTVGamesResponse::game_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_;
}

// optional bool specific_games = 8;
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::has_specific_games() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_specific_games() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_specific_games() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::clear_specific_games() {
  specific_games_ = false;
  clear_has_specific_games();
}
inline bool CMsgGCToClientFindTopSourceTVGamesResponse::specific_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
  return specific_games_;
}
inline void CMsgGCToClientFindTopSourceTVGamesResponse::set_specific_games(bool value) {
  set_has_specific_games();
  specific_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopWeekendTourneyGames

// repeated .proto.dota.CSourceTVGameSmall live_games = 1;
inline int CMsgGCToClientTopWeekendTourneyGames::live_games_size() const {
  return live_games_.size();
}
inline void CMsgGCToClientTopWeekendTourneyGames::clear_live_games() {
  live_games_.Clear();
}
inline const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::live_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Get(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::mutable_live_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Mutable(index);
}
inline ::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::add_live_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientTopWeekendTourneyGames::mutable_live_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return &live_games_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientTopWeekendTourneyGames::live_games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_;
}

// -------------------------------------------------------------------

// CMsgClientToGCTopMatchesRequest

// optional uint32 hero_id = 1;
inline bool CMsgClientToGCTopMatchesRequest::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
}

// optional uint32 player_account_id = 2;
inline bool CMsgClientToGCTopMatchesRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
  return player_account_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
}

// optional uint32 team_id = 3;
inline bool CMsgClientToGCTopMatchesRequest::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCTopMatchesRequest::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCTopMatchesRequest::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
  return team_id_;
}
inline void CMsgClientToGCTopMatchesRequest::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
}

// -------------------------------------------------------------------

// CMsgClientToGCTopLeagueMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCTopFriendMatchesRequest

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalRequest

// repeated uint64 match_ids = 1;
inline int CMsgClientToGCMatchesMinimalRequest::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgClientToGCMatchesMinimalRequest::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint64 CMsgClientToGCMatchesMinimalRequest::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgClientToGCMatchesMinimalRequest::set_match_ids(int index, ::google::protobuf::uint64 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline void CMsgClientToGCMatchesMinimalRequest::add_match_ids(::google::protobuf::uint64 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCMatchesMinimalRequest::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCMatchesMinimalRequest::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return &match_ids_;
}

// -------------------------------------------------------------------

// CMsgClientToGCMatchesMinimalResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
inline int CMsgClientToGCMatchesMinimalResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  matches_.Clear();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgClientToGCMatchesMinimalResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgClientToGCMatchesMinimalResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_;
}

// optional bool last_match = 2;
inline bool CMsgClientToGCMatchesMinimalResponse::has_last_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_has_last_match() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_has_last_match() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCMatchesMinimalResponse::clear_last_match() {
  last_match_ = false;
  clear_has_last_match();
}
inline bool CMsgClientToGCMatchesMinimalResponse::last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
  return last_match_;
}
inline void CMsgClientToGCMatchesMinimalResponse::set_last_match(bool value) {
  set_has_last_match();
  last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
}

// -------------------------------------------------------------------

// CMsgGCToClientTopLeagueMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
inline int CMsgGCToClientTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgGCToClientTopFriendMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
inline int CMsgGCToClientTopFriendMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopFriendMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopFriendMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgClientToGCFindTopMatches

// optional uint32 start_game = 1;
inline bool CMsgClientToGCFindTopMatches::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgClientToGCFindTopMatches::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.start_game)
  return start_game_;
}
inline void CMsgClientToGCFindTopMatches::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgClientToGCFindTopMatches::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgClientToGCFindTopMatches::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_id)
  return league_id_;
}
inline void CMsgClientToGCFindTopMatches::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgClientToGCFindTopMatches::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgClientToGCFindTopMatches::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
  return hero_id_;
}
inline void CMsgClientToGCFindTopMatches::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
}

// optional uint32 friend_id = 4;
inline bool CMsgClientToGCFindTopMatches::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 CMsgClientToGCFindTopMatches::friend_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
  return friend_id_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
}

// optional bool friend_list = 5;
inline bool CMsgClientToGCFindTopMatches::has_friend_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_friend_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_friend_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgClientToGCFindTopMatches::clear_friend_list() {
  friend_list_ = false;
  clear_has_friend_list();
}
inline bool CMsgClientToGCFindTopMatches::friend_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
  return friend_list_;
}
inline void CMsgClientToGCFindTopMatches::set_friend_list(bool value) {
  set_has_friend_list();
  friend_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
}

// optional bool league_list = 6;
inline bool CMsgClientToGCFindTopMatches::has_league_list() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgClientToGCFindTopMatches::set_has_league_list() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgClientToGCFindTopMatches::clear_has_league_list() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgClientToGCFindTopMatches::clear_league_list() {
  league_list_ = false;
  clear_has_league_list();
}
inline bool CMsgClientToGCFindTopMatches::league_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_list)
  return league_list_;
}
inline void CMsgClientToGCFindTopMatches::set_league_list(bool value) {
  set_has_league_list();
  league_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_list)
}

// -------------------------------------------------------------------

// CMsgGCToClientFindTopLeagueMatchesResponse

// optional uint32 start_game = 1;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
  return start_game_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
}

// optional uint32 league_id = 2;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
  return league_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
}

// optional uint32 hero_id = 3;
inline bool CMsgGCToClientFindTopLeagueMatchesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
  return hero_id_;
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
}

// repeated uint32 match_ids = 4;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::match_ids_size() const {
  return match_ids_.size();
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_match_ids() {
  match_ids_.Clear();
}
inline ::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_.Get(index);
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToClientFindTopLeagueMatchesResponse::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return &match_ids_;
}

// repeated .proto.dota.CMsgDOTAMatch matches = 5;
inline int CMsgGCToClientFindTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
inline void CMsgGCToClientFindTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
inline const ::proto::dota::CMsgDOTAMatch& CMsgGCToClientFindTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return &matches_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >&
CMsgGCToClientFindTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_;
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
inline bool CMsgSpectateFriendGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGame.steam_id)
  return steam_id_;
}
inline void CMsgSpectateFriendGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGame.steam_id)
}

// -------------------------------------------------------------------

// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
inline bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSpectateFriendGameResponse::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
  return server_steamid_;
}
inline void CMsgSpectateFriendGameResponse::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Player

// optional uint32 account_id = 1;
inline bool CMsgDOTAMatchMinimal_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
  return account_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
}

// optional uint32 hero_id = 2;
inline bool CMsgDOTAMatchMinimal_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
  return hero_id_;
}
inline void CMsgDOTAMatchMinimal_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
}

// optional uint32 kills = 3;
inline bool CMsgDOTAMatchMinimal_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
  return kills_;
}
inline void CMsgDOTAMatchMinimal_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
}

// optional uint32 deaths = 4;
inline bool CMsgDOTAMatchMinimal_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
  return deaths_;
}
inline void CMsgDOTAMatchMinimal_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
}

// optional uint32 assists = 5;
inline bool CMsgDOTAMatchMinimal_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
  return assists_;
}
inline void CMsgDOTAMatchMinimal_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
}

// repeated uint32 items = 6;
inline int CMsgDOTAMatchMinimal_Player::items_size() const {
  return items_.size();
}
inline void CMsgDOTAMatchMinimal_Player::clear_items() {
  items_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_.Get(index);
}
inline void CMsgDOTAMatchMinimal_Player::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
inline void CMsgDOTAMatchMinimal_Player::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchMinimal_Player::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchMinimal_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return &items_;
}

// optional uint32 player_slot = 7;
inline bool CMsgDOTAMatchMinimal_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
  return player_slot_;
}
inline void CMsgDOTAMatchMinimal_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal_Tourney

// optional uint32 league_id = 1;
inline bool CMsgDOTAMatchMinimal_Tourney::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
  return league_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
}

// optional uint32 series_type = 8;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_series_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
  return series_type_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
}

// optional uint32 series_game = 9;
inline bool CMsgDOTAMatchMinimal_Tourney::has_series_game() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_series_game() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
  return series_game_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
}

// optional uint32 weekend_tourney_tournament_id = 10;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_season_trophy_id = 11;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_season_trophy_id() {
  weekend_tourney_season_trophy_id_ = 0u;
  clear_has_weekend_tourney_season_trophy_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
  return weekend_tourney_season_trophy_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_season_trophy_id();
  weekend_tourney_season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
}

// optional uint32 weekend_tourney_division = 12;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
  return weekend_tourney_division_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 13;
inline bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
}

// optional uint32 radiant_team_id = 2;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
  return radiant_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
}

// optional string radiant_team_name = 3;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_name();
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(::std::string&& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  clear_has_radiant_team_name();
  return radiant_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != NULL) {
    set_has_radiant_team_name();
  } else {
    clear_has_radiant_team_name();
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}

// optional fixed64 radiant_team_logo = 4;
inline bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
  return radiant_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
}

// optional uint32 dire_team_id = 5;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
  return dire_team_id_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
}

// optional string dire_team_name = 6;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_name();
}
inline const ::std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.GetNoArena();
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#if LANG_CXX11
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(::std::string&& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#endif
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_name() {
  set_has_dire_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  clear_has_dire_team_name();
  return dire_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != NULL) {
    set_has_dire_team_name();
  } else {
    clear_has_dire_team_name();
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}

// optional fixed64 dire_team_logo = 7;
inline bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
  return dire_team_logo_;
}
inline void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
}

// -------------------------------------------------------------------

// CMsgDOTAMatchMinimal

// optional uint64 match_id = 1;
inline bool CMsgDOTAMatchMinimal::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgDOTAMatchMinimal::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgDOTAMatchMinimal::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
inline ::google::protobuf::uint64 CMsgDOTAMatchMinimal::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_id)
  return match_id_;
}
inline void CMsgDOTAMatchMinimal::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_id)
}

// optional fixed32 start_time = 2;
inline bool CMsgDOTAMatchMinimal::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgDOTAMatchMinimal::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgDOTAMatchMinimal::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.start_time)
  return start_time_;
}
inline void CMsgDOTAMatchMinimal::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.start_time)
}

// optional uint32 duration = 3;
inline bool CMsgDOTAMatchMinimal::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgDOTAMatchMinimal::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgDOTAMatchMinimal::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
inline ::google::protobuf::uint32 CMsgDOTAMatchMinimal::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.duration)
  return duration_;
}
inline void CMsgDOTAMatchMinimal::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.duration)
}

// optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
inline bool CMsgDOTAMatchMinimal::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgDOTAMatchMinimal::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgDOTAMatchMinimal::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::proto::dota::DOTA_GameMode CMsgDOTAMatchMinimal::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
inline void CMsgDOTAMatchMinimal::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.game_mode)
}

// repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
inline int CMsgDOTAMatchMinimal::players_size() const {
  return players_.size();
}
inline void CMsgDOTAMatchMinimal::clear_players() {
  players_.Clear();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Get(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Mutable(index);
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >*
CMsgDOTAMatchMinimal::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return &players_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >&
CMsgDOTAMatchMinimal::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_;
}

// optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
inline bool CMsgDOTAMatchMinimal::has_tourney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_tourney() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgDOTAMatchMinimal::clear_has_tourney() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgDOTAMatchMinimal::clear_tourney() {
  if (tourney_ != NULL) tourney_->::proto::dota::CMsgDOTAMatchMinimal_Tourney::Clear();
  clear_has_tourney();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::tourney() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return tourney_ != NULL ? *tourney_
                         : *::proto::dota::CMsgDOTAMatchMinimal_Tourney::internal_default_instance();
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::mutable_tourney() {
  set_has_tourney();
  if (tourney_ == NULL) {
    tourney_ = new ::proto::dota::CMsgDOTAMatchMinimal_Tourney;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return tourney_;
}
inline ::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::release_tourney() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.tourney)
  clear_has_tourney();
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* temp = tourney_;
  tourney_ = NULL;
  return temp;
}
inline void CMsgDOTAMatchMinimal::set_allocated_tourney(::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney) {
  delete tourney_;
  tourney_ = tourney;
  if (tourney) {
    set_has_tourney();
  } else {
    clear_has_tourney();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.tourney)
}

// optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
inline bool CMsgDOTAMatchMinimal::has_match_outcome() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTAMatchMinimal::set_has_match_outcome() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgDOTAMatchMinimal::clear_has_match_outcome() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgDOTAMatchMinimal::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
inline ::proto::dota::EMatchOutcome CMsgDOTAMatchMinimal::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
inline void CMsgDOTAMatchMinimal::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo_Highlight

// optional uint32 timestamp = 1;
inline bool CDOTAReplayDownloadInfo_Highlight::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo_Highlight::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
  return timestamp_;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
}

// optional string description = 2;
inline bool CDOTAReplayDownloadInfo_Highlight::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo_Highlight::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAReplayDownloadInfo_Highlight::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CDOTAReplayDownloadInfo_Highlight::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo_Highlight::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#endif
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
inline void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo_Highlight::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo_Highlight::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}

// -------------------------------------------------------------------

// CDOTAReplayDownloadInfo

// optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
inline bool CDOTAReplayDownloadInfo::has_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_match() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTAReplayDownloadInfo::clear_has_match() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTAReplayDownloadInfo::clear_match() {
  if (match_ != NULL) match_->::proto::dota::CMsgDOTAMatchMinimal::Clear();
  clear_has_match();
}
inline const ::proto::dota::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.match)
  return match_ != NULL ? *match_
                         : *::proto::dota::CMsgDOTAMatchMinimal::internal_default_instance();
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::proto::dota::CMsgDOTAMatchMinimal;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.match)
  return match_;
}
inline ::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.match)
  clear_has_match();
  ::proto::dota::CMsgDOTAMatchMinimal* temp = match_;
  match_ = NULL;
  return temp;
}
inline void CDOTAReplayDownloadInfo::set_allocated_match(::proto::dota::CMsgDOTAMatchMinimal* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.match)
}

// optional string title = 2;
inline bool CDOTAReplayDownloadInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTAReplayDownloadInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTAReplayDownloadInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
inline const ::std::string& CDOTAReplayDownloadInfo::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.title)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.title)
}
#endif
inline void CDOTAReplayDownloadInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.title)
}
inline void CDOTAReplayDownloadInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.title)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.title)
}

// optional string description = 3;
inline bool CDOTAReplayDownloadInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTAReplayDownloadInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTAReplayDownloadInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
inline const ::std::string& CDOTAReplayDownloadInfo::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.GetNoArena();
}
inline void CDOTAReplayDownloadInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.description)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.description)
}
#endif
inline void CDOTAReplayDownloadInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.description)
}
inline void CDOTAReplayDownloadInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.description)
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTAReplayDownloadInfo::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTAReplayDownloadInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.description)
}

// optional uint32 size = 4;
inline bool CDOTAReplayDownloadInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTAReplayDownloadInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTAReplayDownloadInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
inline ::google::protobuf::uint32 CDOTAReplayDownloadInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.size)
  return size_;
}
inline void CDOTAReplayDownloadInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.size)
}

// repeated string tags = 5;
inline int CDOTAReplayDownloadInfo::tags_size() const {
  return tags_.size();
}
inline void CDOTAReplayDownloadInfo::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& CDOTAReplayDownloadInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Get(index);
}
inline ::std::string* CDOTAReplayDownloadInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Mutable(index);
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline ::std::string* CDOTAReplayDownloadInfo::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Add();
}
inline void CDOTAReplayDownloadInfo::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#if LANG_CXX11
inline void CDOTAReplayDownloadInfo::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#endif
inline void CDOTAReplayDownloadInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline void CDOTAReplayDownloadInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAReplayDownloadInfo::tags() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAReplayDownloadInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return &tags_;
}

// optional bool exists_on_disk = 6;
inline bool CDOTAReplayDownloadInfo::has_exists_on_disk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAReplayDownloadInfo::set_has_exists_on_disk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTAReplayDownloadInfo::clear_has_exists_on_disk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTAReplayDownloadInfo::clear_exists_on_disk() {
  exists_on_disk_ = false;
  clear_has_exists_on_disk();
}
inline bool CDOTAReplayDownloadInfo::exists_on_disk() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
  return exists_on_disk_;
}
inline void CDOTAReplayDownloadInfo::set_exists_on_disk(bool value) {
  set_has_exists_on_disk();
  exists_on_disk_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
}

// -------------------------------------------------------------------

// CMsgWatchGame

// optional fixed64 server_steamid = 1;
inline bool CMsgWatchGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGame::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGame::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGame::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.server_steamid)
  return server_steamid_;
}
inline void CMsgWatchGame::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
inline bool CMsgWatchGame::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGame::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGame::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGame::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
inline ::google::protobuf::uint32 CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.client_version)
  return client_version_;
}
inline void CMsgWatchGame::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
inline bool CMsgWatchGame::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGame::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGame::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGame::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGame::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
inline bool CMsgWatchGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
inline ::google::protobuf::uint64 CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.lobby_id)
  return lobby_id_;
}
inline void CMsgWatchGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.lobby_id)
}

// repeated uint32 regions = 5;
inline int CMsgWatchGame::regions_size() const {
  return regions_.size();
}
inline void CMsgWatchGame::clear_regions() {
  regions_.Clear();
}
inline ::google::protobuf::uint32 CMsgWatchGame::regions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.regions)
  return regions_.Get(index);
}
inline void CMsgWatchGame::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.regions)
}
inline void CMsgWatchGame::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgWatchGame.regions)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgWatchGame::regions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgWatchGame.regions)
  return regions_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgWatchGame::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgWatchGame.regions)
  return &regions_;
}

// -------------------------------------------------------------------

// CMsgCancelWatchGame

// -------------------------------------------------------------------

// CMsgWatchGameResponse

// optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
inline bool CMsgWatchGameResponse::has_watch_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgWatchGameResponse::clear_has_watch_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgWatchGameResponse::clear_watch_game_result() {
  watch_game_result_ = 0;
  clear_has_watch_game_result();
}
inline ::proto::dota::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_game_result)
  return static_cast< ::proto::dota::CMsgWatchGameResponse_WatchGameResult >(watch_game_result_);
}
inline void CMsgWatchGameResponse::set_watch_game_result(::proto::dota::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  set_has_watch_game_result();
  watch_game_result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
inline bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
  return source_tv_public_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
inline bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
  return source_tv_private_addr_;
}
inline void CMsgWatchGameResponse::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
inline bool CMsgWatchGameResponse::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgWatchGameResponse::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMsgWatchGameResponse::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMsgWatchGameResponse::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
inline ::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_port)
  return source_tv_port_;
}
inline void CMsgWatchGameResponse::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
inline bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgWatchGameResponse::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMsgWatchGameResponse::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMsgWatchGameResponse::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgWatchGameResponse::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
inline bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMsgWatchGameResponse::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMsgWatchGameResponse::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
  return watch_server_steamid_;
}
inline void CMsgWatchGameResponse::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
inline bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgWatchGameResponse::set_has_watch_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMsgWatchGameResponse::clear_has_watch_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  watch_tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_tv_unique_secret_code();
}
inline ::google::protobuf::uint64 CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return watch_tv_unique_secret_code_;
}
inline void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_watch_tv_unique_secret_code();
  watch_tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

// -------------------------------------------------------------------

// CMsgPartyLeaderWatchGamePrompt

// optional fixed64 game_server_steamid = 5;
inline bool CMsgPartyLeaderWatchGamePrompt::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMsgPartyLeaderWatchGamePrompt::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
inline ::google::protobuf::uint64 CMsgPartyLeaderWatchGamePrompt::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
  return game_server_steamid_;
}
inline void CMsgPartyLeaderWatchGamePrompt::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
}

// -------------------------------------------------------------------

// CDOTABroadcasterInfo

// optional uint32 account_id = 1;
inline bool CDOTABroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDOTABroadcasterInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDOTABroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.account_id)
  return account_id_;
}
inline void CDOTABroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.account_id)
}

// optional fixed64 server_steam_id = 2;
inline bool CDOTABroadcasterInfo::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDOTABroadcasterInfo::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDOTABroadcasterInfo::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
inline ::google::protobuf::uint64 CDOTABroadcasterInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.server_steam_id)
  return server_steam_id_;
}
inline void CDOTABroadcasterInfo::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.server_steam_id)
}

// optional bool live = 3;
inline bool CDOTABroadcasterInfo::has_live() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_live() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDOTABroadcasterInfo::clear_has_live() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDOTABroadcasterInfo::clear_live() {
  live_ = false;
  clear_has_live();
}
inline bool CDOTABroadcasterInfo::live() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.live)
  return live_;
}
inline void CDOTABroadcasterInfo::set_live(bool value) {
  set_has_live();
  live_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.live)
}

// optional string team_name_radiant = 4;
inline bool CDOTABroadcasterInfo::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDOTABroadcasterInfo::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDOTABroadcasterInfo::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_radiant();
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_team_name_radiant(::std::string&& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#endif
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
inline void CDOTABroadcasterInfo::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  clear_has_team_name_radiant();
  return team_name_radiant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != NULL) {
    set_has_team_name_radiant();
  } else {
    clear_has_team_name_radiant();
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}

// optional string team_name_dire = 5;
inline bool CDOTABroadcasterInfo::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDOTABroadcasterInfo::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDOTABroadcasterInfo::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_dire();
}
inline const ::std::string& CDOTABroadcasterInfo::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_team_name_dire(::std::string&& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#endif
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
inline void CDOTABroadcasterInfo::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_team_name_dire() {
  set_has_team_name_dire();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  clear_has_team_name_dire();
  return team_name_dire_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != NULL) {
    set_has_team_name_dire();
  } else {
    clear_has_team_name_dire();
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}

// optional string stage_name = 6;
inline bool CDOTABroadcasterInfo::has_stage_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_stage_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDOTABroadcasterInfo::clear_has_stage_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDOTABroadcasterInfo::clear_stage_name() {
  stage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stage_name();
}
inline const ::std::string& CDOTABroadcasterInfo::stage_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.stage_name)
  return stage_name_.GetNoArena();
}
inline void CDOTABroadcasterInfo::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.stage_name)
}
#if LANG_CXX11
inline void CDOTABroadcasterInfo::set_stage_name(::std::string&& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.stage_name)
}
#endif
inline void CDOTABroadcasterInfo::set_stage_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.stage_name)
}
inline void CDOTABroadcasterInfo::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.stage_name)
}
inline ::std::string* CDOTABroadcasterInfo::mutable_stage_name() {
  set_has_stage_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.stage_name)
  return stage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTABroadcasterInfo::release_stage_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.stage_name)
  clear_has_stage_name();
  return stage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTABroadcasterInfo::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name != NULL) {
    set_has_stage_name();
  } else {
    clear_has_stage_name();
  }
  stage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stage_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.stage_name)
}

// optional uint32 series_game = 7;
inline bool CDOTABroadcasterInfo::has_series_game() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_series_game() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDOTABroadcasterInfo::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDOTABroadcasterInfo::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.series_game)
  return series_game_;
}
inline void CDOTABroadcasterInfo::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.series_game)
}

// optional uint32 series_type = 8;
inline bool CDOTABroadcasterInfo::has_series_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_series_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CDOTABroadcasterInfo::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CDOTABroadcasterInfo::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.series_type)
  return series_type_;
}
inline void CDOTABroadcasterInfo::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.series_type)
}

// optional uint32 upcoming_broadcast_timestamp = 9;
inline bool CDOTABroadcasterInfo::has_upcoming_broadcast_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CDOTABroadcasterInfo::clear_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CDOTABroadcasterInfo::clear_upcoming_broadcast_timestamp() {
  upcoming_broadcast_timestamp_ = 0u;
  clear_has_upcoming_broadcast_timestamp();
}
inline ::google::protobuf::uint32 CDOTABroadcasterInfo::upcoming_broadcast_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
  return upcoming_broadcast_timestamp_;
}
inline void CDOTABroadcasterInfo::set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value) {
  set_has_upcoming_broadcast_timestamp();
  upcoming_broadcast_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
}

// optional bool allow_live_video = 10;
inline bool CDOTABroadcasterInfo::has_allow_live_video() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDOTABroadcasterInfo::set_has_allow_live_video() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDOTABroadcasterInfo::clear_has_allow_live_video() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDOTABroadcasterInfo::clear_allow_live_video() {
  allow_live_video_ = false;
  clear_has_allow_live_video();
}
inline bool CDOTABroadcasterInfo::allow_live_video() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.allow_live_video)
  return allow_live_video_;
}
inline void CDOTABroadcasterInfo::set_allow_live_video(bool value) {
  set_has_allow_live_video();
  allow_live_video_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.allow_live_video)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dota
}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::CMsgWatchGameResponse_WatchGameResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::CMsgWatchGameResponse_WatchGameResult>() {
  return ::proto::dota::CMsgWatchGameResponse_WatchGameResult_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dota_5fgcmessages_5fclient_5fwatch_2eproto__INCLUDED
