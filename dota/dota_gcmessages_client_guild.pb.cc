// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgDOTAGuildSDO_MemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildSDO_Member> {
} _CMsgDOTAGuildSDO_Member_default_instance_;
class CMsgDOTAGuildSDO_InvitationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildSDO_Invitation> {
} _CMsgDOTAGuildSDO_Invitation_default_instance_;
class CMsgDOTAGuildSDODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildSDO> {
} _CMsgDOTAGuildSDO_default_instance_;
class CMsgDOTAGuildAuditSDO_EntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildAuditSDO_Entry> {
} _CMsgDOTAGuildAuditSDO_Entry_default_instance_;
class CMsgDOTAGuildAuditSDODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildAuditSDO> {
} _CMsgDOTAGuildAuditSDO_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDO_MembershipDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAccountGuildMembershipsSDO_Membership> {
} _CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDO_InvitationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAccountGuildMembershipsSDO_Invitation> {
} _CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_;
class CMsgDOTAAccountGuildMembershipsSDODefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAAccountGuildMembershipsSDO> {
} _CMsgDOTAAccountGuildMembershipsSDO_default_instance_;
class CMsgDOTAGuildCreateRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildCreateRequest> {
} _CMsgDOTAGuildCreateRequest_default_instance_;
class CMsgDOTAGuildCreateResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildCreateResponse> {
} _CMsgDOTAGuildCreateResponse_default_instance_;
class CMsgDOTAGuildSetAccountRoleRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildSetAccountRoleRequest> {
} _CMsgDOTAGuildSetAccountRoleRequest_default_instance_;
class CMsgDOTAGuildSetAccountRoleResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildSetAccountRoleResponse> {
} _CMsgDOTAGuildSetAccountRoleResponse_default_instance_;
class CMsgDOTAGuildInviteAccountRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildInviteAccountRequest> {
} _CMsgDOTAGuildInviteAccountRequest_default_instance_;
class CMsgDOTAGuildInviteAccountResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildInviteAccountResponse> {
} _CMsgDOTAGuildInviteAccountResponse_default_instance_;
class CMsgDOTAGuildCancelInviteRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildCancelInviteRequest> {
} _CMsgDOTAGuildCancelInviteRequest_default_instance_;
class CMsgDOTAGuildCancelInviteResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildCancelInviteResponse> {
} _CMsgDOTAGuildCancelInviteResponse_default_instance_;
class CMsgDOTAGuildUpdateDetailsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildUpdateDetailsRequest> {
} _CMsgDOTAGuildUpdateDetailsRequest_default_instance_;
class CMsgDOTAGuildUpdateDetailsResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildUpdateDetailsResponse> {
} _CMsgDOTAGuildUpdateDetailsResponse_default_instance_;
class CMsgDOTAGCToGCUpdateOpenGuildPartyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGCToGCUpdateOpenGuildPartyRequest> {
} _CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_;
class CMsgDOTAGCToGCUpdateOpenGuildPartyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGCToGCUpdateOpenGuildPartyResponse> {
} _CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_;
class CMsgDOTAGCToGCDestroyOpenGuildPartyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGCToGCDestroyOpenGuildPartyRequest> {
} _CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_;
class CMsgDOTAGCToGCDestroyOpenGuildPartyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGCToGCDestroyOpenGuildPartyResponse> {
} _CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_;
class CMsgDOTAPartySetOpenGuildRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPartySetOpenGuildRequest> {
} _CMsgDOTAPartySetOpenGuildRequest_default_instance_;
class CMsgDOTAPartySetOpenGuildResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPartySetOpenGuildResponse> {
} _CMsgDOTAPartySetOpenGuildResponse_default_instance_;
class CMsgDOTAJoinOpenGuildPartyRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinOpenGuildPartyRequest> {
} _CMsgDOTAJoinOpenGuildPartyRequest_default_instance_;
class CMsgDOTAJoinOpenGuildPartyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinOpenGuildPartyResponse> {
} _CMsgDOTAJoinOpenGuildPartyResponse_default_instance_;
class CMsgDOTAGuildOpenPartyRefresh_OpenPartyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildOpenPartyRefresh_OpenParty> {
} _CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_;
class CMsgDOTAGuildOpenPartyRefreshDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildOpenPartyRefresh> {
} _CMsgDOTAGuildOpenPartyRefresh_default_instance_;
class CMsgDOTARequestGuildDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestGuildData> {
} _CMsgDOTARequestGuildData_default_instance_;
class CMsgDOTAGuildInviteDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildInviteData> {
} _CMsgDOTAGuildInviteData_default_instance_;
class CMsgDOTAGuildUpdateMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildUpdateMessage> {
} _CMsgDOTAGuildUpdateMessage_default_instance_;
class CMsgDOTAGuildEditLogoRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildEditLogoRequest> {
} _CMsgDOTAGuildEditLogoRequest_default_instance_;
class CMsgDOTAGuildEditLogoResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGuildEditLogoResponse> {
} _CMsgDOTAGuildEditLogoResponse_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[33];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, time_joined_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Member, role_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, time_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO_Invitation, account_id_sender_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, time_disbanded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, invitations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSDO, incremental_),
  3,
  0,
  1,
  4,
  8,
  5,
  6,
  7,
  ~0u,
  ~0u,
  2,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, event_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, account_id_requestor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, account_id_target_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, reference_data_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO_Entry, reference_data_b_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildAuditSDO, entries_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Membership, role_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, time_sent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO_Invitation, account_id_sender_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, memberships_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAAccountGuildMembershipsSDO, invitations_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateRequest, banner_logo_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCreateResponse, errors_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, target_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleRequest, target_role_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildSetAccountRoleResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountRequest, target_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteAccountResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteRequest, target_account_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildCancelInviteResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsRequest, banner_logo_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateDetailsResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, member_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest, description_),
  1,
  2,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse, maintain_association_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest, guild_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildRequest, description_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartySetOpenGuildResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyRequest, party_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAJoinOpenGuildPartyResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, member_account_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, time_created_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh_OpenParty, description_),
  1,
  ~0u,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildOpenPartyRefresh, open_parties_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestGuildData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTARequestGuildData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, invited_to_guild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, guild_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, inviter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, inviter_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildInviteData, member_count_),
  3,
  4,
  0,
  1,
  5,
  6,
  2,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildUpdateMessage, guild_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoRequest, logo_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGuildEditLogoResponse, result_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(CMsgDOTAGuildSDO_Member)},
  { 11, 19, sizeof(CMsgDOTAGuildSDO_Invitation)},
  { 22, 39, sizeof(CMsgDOTAGuildSDO)},
  { 51, 63, sizeof(CMsgDOTAGuildAuditSDO_Entry)},
  { 70, 77, sizeof(CMsgDOTAGuildAuditSDO)},
  { 79, 86, sizeof(CMsgDOTAAccountGuildMembershipsSDO_Membership)},
  { 88, 96, sizeof(CMsgDOTAAccountGuildMembershipsSDO_Invitation)},
  { 99, 107, sizeof(CMsgDOTAAccountGuildMembershipsSDO)},
  { 110, 120, sizeof(CMsgDOTAGuildCreateRequest)},
  { 125, 132, sizeof(CMsgDOTAGuildCreateResponse)},
  { 134, 142, sizeof(CMsgDOTAGuildSetAccountRoleRequest)},
  { 145, 151, sizeof(CMsgDOTAGuildSetAccountRoleResponse)},
  { 152, 159, sizeof(CMsgDOTAGuildInviteAccountRequest)},
  { 161, 167, sizeof(CMsgDOTAGuildInviteAccountResponse)},
  { 168, 175, sizeof(CMsgDOTAGuildCancelInviteRequest)},
  { 177, 183, sizeof(CMsgDOTAGuildCancelInviteResponse)},
  { 184, 193, sizeof(CMsgDOTAGuildUpdateDetailsRequest)},
  { 197, 203, sizeof(CMsgDOTAGuildUpdateDetailsResponse)},
  { 204, 213, sizeof(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)},
  { 217, 223, sizeof(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)},
  { 224, 231, sizeof(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)},
  { 233, 238, sizeof(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)},
  { 238, 245, sizeof(CMsgDOTAPartySetOpenGuildRequest)},
  { 247, 253, sizeof(CMsgDOTAPartySetOpenGuildResponse)},
  { 254, 260, sizeof(CMsgDOTAJoinOpenGuildPartyRequest)},
  { 261, 267, sizeof(CMsgDOTAJoinOpenGuildPartyResponse)},
  { 268, 277, sizeof(CMsgDOTAGuildOpenPartyRefresh_OpenParty)},
  { 281, 288, sizeof(CMsgDOTAGuildOpenPartyRefresh)},
  { 290, 295, sizeof(CMsgDOTARequestGuildData)},
  { 295, 308, sizeof(CMsgDOTAGuildInviteData)},
  { 316, 323, sizeof(CMsgDOTAGuildUpdateMessage)},
  { 325, 332, sizeof(CMsgDOTAGuildEditLogoRequest)},
  { 334, 341, sizeof(CMsgDOTAGuildEditLogoResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildSDO_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildSDO_Invitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildAuditSDO_Entry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildAuditSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAAccountGuildMembershipsSDO_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildCreateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildCreateResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildSetAccountRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildSetAccountRoleResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildInviteAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildInviteAccountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildCancelInviteRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildCancelInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildUpdateDetailsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildUpdateDetailsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPartySetOpenGuildRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPartySetOpenGuildResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAJoinOpenGuildPartyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAJoinOpenGuildPartyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildOpenPartyRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTARequestGuildData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildInviteData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildUpdateMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildEditLogoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGuildEditLogoResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_guild.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 33);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgDOTAGuildSDO_Member_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgDOTAGuildSDO_Invitation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgDOTAGuildSDO_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgDOTAGuildAuditSDO_Entry_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgDOTAGuildAuditSDO_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgDOTAAccountGuildMembershipsSDO_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgDOTAGuildCreateRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgDOTAGuildCreateResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgDOTAGuildSetAccountRoleRequest_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTAGuildSetAccountRoleResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgDOTAGuildInviteAccountRequest_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTAGuildInviteAccountResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTAGuildCancelInviteRequest_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTAGuildCancelInviteResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTAGuildUpdateDetailsRequest_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTAGuildUpdateDetailsResponse_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgDOTAPartySetOpenGuildRequest_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgDOTAPartySetOpenGuildResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgDOTAJoinOpenGuildPartyRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgDOTAJoinOpenGuildPartyResponse_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgDOTAGuildOpenPartyRefresh_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgDOTARequestGuildData_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgDOTAGuildInviteData_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgDOTAGuildUpdateMessage_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgDOTAGuildEditLogoRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgDOTAGuildEditLogoResponse_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CMsgDOTAGuildSDO_Member_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildSDO_Invitation_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildSDO_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildAuditSDO_Entry_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildAuditSDO_default_instance_.DefaultConstruct();
  _CMsgDOTAAccountGuildMembershipsSDO_Membership_default_instance_.DefaultConstruct();
  _CMsgDOTAAccountGuildMembershipsSDO_Invitation_default_instance_.DefaultConstruct();
  _CMsgDOTAAccountGuildMembershipsSDO_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildCreateRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildCreateResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildSetAccountRoleRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildSetAccountRoleResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildInviteAccountRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildInviteAccountResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildCancelInviteRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildCancelInviteResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildUpdateDetailsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildUpdateDetailsResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGCToGCUpdateOpenGuildPartyRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGCToGCUpdateOpenGuildPartyResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGCToGCDestroyOpenGuildPartyRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGCToGCDestroyOpenGuildPartyResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAPartySetOpenGuildRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAPartySetOpenGuildResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAJoinOpenGuildPartyRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAJoinOpenGuildPartyResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildOpenPartyRefresh_OpenParty_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildOpenPartyRefresh_default_instance_.DefaultConstruct();
  _CMsgDOTARequestGuildData_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildInviteData_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildUpdateMessage_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildEditLogoRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAGuildEditLogoResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\"dota_gcmessages_client_guild.proto\022\npr"
      "oto.dota\"\316\003\n\020CMsgDOTAGuildSDO\022\020\n\010guild_i"
      "d\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\022\024\n\014ti"
      "me_created\030\004 \001(\r\022\026\n\016time_disbanded\030\005 \001(\r"
      "\022\014\n\004logo\030\006 \001(\004\022\021\n\tbase_logo\030\007 \001(\004\022\023\n\013ban"
      "ner_logo\030\010 \001(\004\0224\n\007members\030\t \003(\0132#.proto."
      "dota.CMsgDOTAGuildSDO.Member\022<\n\013invitati"
      "ons\030\n \003(\0132\'.proto.dota.CMsgDOTAGuildSDO."
      "Invitation\022\017\n\007message\030\013 \001(\t\022\023\n\013increment"
      "al\030\014 \001(\010\032\?\n\006Member\022\022\n\naccount_id\030\001 \001(\r\022\023"
      "\n\013time_joined\030\002 \001(\r\022\014\n\004role\030\003 \001(\r\032N\n\nInv"
      "itation\022\022\n\naccount_id\030\001 \001(\r\022\021\n\ttime_sent"
      "\030\002 \001(\r\022\031\n\021account_id_sender\030\003 \001(\r\"\222\002\n\025CM"
      "sgDOTAGuildAuditSDO\022\020\n\010guild_id\030\001 \001(\r\0228\n"
      "\007entries\030\002 \003(\0132\'.proto.dota.CMsgDOTAGuil"
      "dAuditSDO.Entry\032\254\001\n\005Entry\022\023\n\013event_index"
      "\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\r\022\016\n\006action\030\003 \001("
      "\r\022\034\n\024account_id_requestor\030\004 \001(\r\022\031\n\021accou"
      "nt_id_target\030\005 \001(\r\022\030\n\020reference_data_a\030\006"
      " \001(\r\022\030\n\020reference_data_b\030\007 \001(\r\"\324\002\n\"CMsgD"
      "OTAAccountGuildMembershipsSDO\022\022\n\naccount"
      "_id\030\001 \001(\r\022N\n\013memberships\030\002 \003(\01329.proto.d"
      "ota.CMsgDOTAAccountGuildMembershipsSDO.M"
      "embership\022N\n\013invitations\030\003 \003(\01329.proto.d"
      "ota.CMsgDOTAAccountGuildMembershipsSDO.I"
      "nvitation\032,\n\nMembership\022\020\n\010guild_id\030\001 \001("
      "\r\022\014\n\004role\030\002 \001(\r\032L\n\nInvitation\022\020\n\010guild_i"
      "d\030\001 \001(\r\022\021\n\ttime_sent\030\002 \001(\r\022\031\n\021account_id"
      "_sender\030\003 \001(\r\"m\n\032CMsgDOTAGuildCreateRequ"
      "est\022\014\n\004name\030\001 \001(\t\022\013\n\003tag\030\002 \001(\t\022\014\n\004logo\030\003"
      " \001(\004\022\021\n\tbase_logo\030\004 \001(\004\022\023\n\013banner_logo\030\005"
      " \001(\004\"\305\002\n\033CMsgDOTAGuildCreateResponse\022\020\n\010"
      "guild_id\030\001 \001(\r\022>\n\006errors\030\002 \003(\0162..proto.d"
      "ota.CMsgDOTAGuildCreateResponse.EError\"\323"
      "\001\n\006EError\022\017\n\013UNSPECIFIED\020\000\022\016\n\nNAME_EMPTY"
      "\020\001\022\027\n\023NAME_BAD_CHARACTERS\020\002\022\021\n\rNAME_TOO_"
      "LONG\020\003\022\016\n\nNAME_TAKEN\020\004\022\r\n\tTAG_EMPTY\020\005\022\026\n"
      "\022TAG_BAD_CHARACTERS\020\006\022\020\n\014TAG_TOO_LONG\020\007\022"
      "\033\n\027ACCOUNT_TOO_MANY_GUILDS\020\010\022\026\n\022LOGO_UPL"
      "OAD_FAILED\020\t\"f\n\"CMsgDOTAGuildSetAccountR"
      "oleRequest\022\020\n\010guild_id\030\001 \001(\r\022\031\n\021target_a"
      "ccount_id\030\002 \001(\r\022\023\n\013target_role\030\003 \001(\r\"\240\002\n"
      "#CMsgDOTAGuildSetAccountRoleResponse\022P\n\006"
      "result\030\001 \001(\01627.proto.dota.CMsgDOTAGuildS"
      "etAccountRoleResponse.EResult:\007SUCCESS\"\246"
      "\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECI"
      "FIED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\022\031\n\025ERROR"
      "_NO_OTHER_LEADER\020\003\022!\n\035ERROR_ACCOUNT_TOO_"
      "MANY_GUILDS\020\004\022 \n\034ERROR_GUILD_TOO_MANY_ME"
      "MBERS\020\005\"P\n!CMsgDOTAGuildInviteAccountReq"
      "uest\022\020\n\010guild_id\030\001 \001(\r\022\031\n\021target_account"
      "_id\030\002 \001(\r\"\356\002\n\"CMsgDOTAGuildInviteAccount"
      "Response\022O\n\006result\030\001 \001(\01626.proto.dota.CM"
      "sgDOTAGuildInviteAccountResponse.EResult"
      ":\007SUCCESS\"\366\001\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ER"
      "ROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PERMISSION"
      "\020\002\022!\n\035ERROR_ACCOUNT_ALREADY_INVITED\020\003\022\"\n"
      "\036ERROR_ACCOUNT_ALREADY_IN_GUILD\020\004\022\"\n\036ERR"
      "OR_ACCOUNT_TOO_MANY_INVITES\020\005\022 \n\034ERROR_G"
      "UILD_TOO_MANY_INVITES\020\006\022!\n\035ERROR_ACCOUNT"
      "_TOO_MANY_GUILDS\020\007\"O\n CMsgDOTAGuildCance"
      "lInviteRequest\022\020\n\010guild_id\030\001 \001(\r\022\031\n\021targ"
      "et_account_id\030\002 \001(\r\"\273\001\n!CMsgDOTAGuildCan"
      "celInviteResponse\022N\n\006result\030\001 \001(\01625.prot"
      "o.dota.CMsgDOTAGuildCancelInviteResponse"
      ".EResult:\007SUCCESS\"F\n\007EResult\022\013\n\007SUCCESS\020"
      "\000\022\025\n\021ERROR_UNSPECIFIED\020\001\022\027\n\023ERROR_NO_PER"
      "MISSION\020\002\"k\n!CMsgDOTAGuildUpdateDetailsR"
      "equest\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004logo\030\002 \001(\004\022\021"
      "\n\tbase_logo\030\003 \001(\004\022\023\n\013banner_logo\030\004 \001(\004\"\275"
      "\001\n\"CMsgDOTAGuildUpdateDetailsResponse\022O\n"
      "\006result\030\001 \001(\01626.proto.dota.CMsgDOTAGuild"
      "UpdateDetailsResponse.EResult:\007SUCCESS\"F"
      "\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECIF"
      "IED\020\001\022\027\n\023ERROR_NO_PERMISSION\020\002\"\200\001\n)CMsgD"
      "OTAGCToGCUpdateOpenGuildPartyRequest\022\020\n\010"
      "party_id\030\001 \001(\004\022\020\n\010guild_id\030\002 \001(\r\022\032\n\022memb"
      "er_account_ids\030\003 \003(\r\022\023\n\013description\030\004 \001("
      "\t\"J\n*CMsgDOTAGCToGCUpdateOpenGuildPartyR"
      "esponse\022\034\n\024maintain_association\030\001 \001(\010\"P\n"
      "*CMsgDOTAGCToGCDestroyOpenGuildPartyRequ"
      "est\022\020\n\010party_id\030\001 \001(\004\022\020\n\010guild_id\030\002 \001(\r\""
      "-\n+CMsgDOTAGCToGCDestroyOpenGuildPartyRe"
      "sponse\"I\n CMsgDOTAPartySetOpenGuildReque"
      "st\022\020\n\010guild_id\030\001 \001(\r\022\023\n\013description\030\002 \001("
      "\t\"\242\001\n!CMsgDOTAPartySetOpenGuildResponse\022"
      "N\n\006result\030\001 \001(\01625.proto.dota.CMsgDOTAPar"
      "tySetOpenGuildResponse.EResult:\007SUCCESS\""
      "-\n\007EResult\022\013\n\007SUCCESS\020\000\022\025\n\021ERROR_UNSPECI"
      "FIED\020\001\"5\n!CMsgDOTAJoinOpenGuildPartyRequ"
      "est\022\020\n\010party_id\030\001 \001(\004\"\244\001\n\"CMsgDOTAJoinOp"
      "enGuildPartyResponse\022O\n\006result\030\001 \001(\01626.p"
      "roto.dota.CMsgDOTAJoinOpenGuildPartyResp"
      "onse.EResult:\007SUCCESS\"-\n\007EResult\022\013\n\007SUCC"
      "ESS\020\000\022\025\n\021ERROR_UNSPECIFIED\020\001\"\342\001\n\035CMsgDOT"
      "AGuildOpenPartyRefresh\022\020\n\010guild_id\030\001 \001(\r"
      "\022I\n\014open_parties\030\002 \003(\01323.proto.dota.CMsg"
      "DOTAGuildOpenPartyRefresh.OpenParty\032d\n\tO"
      "penParty\022\020\n\010party_id\030\001 \001(\004\022\032\n\022member_acc"
      "ount_ids\030\002 \003(\r\022\024\n\014time_created\030\003 \001(\r\022\023\n\013"
      "description\030\004 \001(\t\"\032\n\030CMsgDOTARequestGuil"
      "dData\"\267\001\n\027CMsgDOTAGuildInviteData\022\030\n\020inv"
      "ited_to_guild\030\001 \001(\010\022\020\n\010guild_id\030\002 \001(\r\022\022\n"
      "\nguild_name\030\003 \001(\t\022\021\n\tguild_tag\030\004 \001(\t\022\014\n\004"
      "logo\030\005 \001(\004\022\017\n\007inviter\030\006 \001(\r\022\024\n\014inviter_n"
      "ame\030\007 \001(\t\022\024\n\014member_count\030\010 \001(\r\"\?\n\032CMsgD"
      "OTAGuildUpdateMessage\022\017\n\007message\030\001 \001(\t\022\020"
      "\n\010guild_id\030\002 \001(\r\">\n\034CMsgDOTAGuildEditLog"
      "oRequest\022\020\n\010guild_id\030\001 \001(\r\022\014\n\004logo\030\002 \001(\004"
      "\"\327\001\n\035CMsgDOTAGuildEditLogoResponse\022\020\n\010gu"
      "ild_id\030\001 \001(\r\022J\n\006result\030\002 \001(\01621.proto.dot"
      "a.CMsgDOTAGuildEditLogoResponse.EResult:"
      "\007SUCCESS\"X\n\007EResult\022\013\n\007SUCCESS\020\000\022\021\n\rNO_P"
      "ERMISSION\020\001\022\026\n\022LOGO_UPLOAD_FAILED\020\002\022\025\n\021U"
      "NSPECIFIED_ERROR\020\003B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4585);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_guild.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto

const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCreateResponse_EError_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[0];
}
bool CMsgDOTAGuildCreateResponse_EError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::UNSPECIFIED;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_EMPTY;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_BAD_CHARACTERS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_TOO_LONG;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::NAME_TAKEN;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_EMPTY;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_BAD_CHARACTERS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::TAG_TOO_LONG;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::EError_MIN;
const CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::EError_MAX;
const int CMsgDOTAGuildCreateResponse::EError_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildSetAccountRoleResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[1];
}
bool CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::SUCCESS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_NO_OTHER_LEADER;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::ERROR_GUILD_TOO_MANY_MEMBERS;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::EResult_MIN;
const CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::EResult_MAX;
const int CMsgDOTAGuildSetAccountRoleResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildInviteAccountResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[2];
}
bool CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::SUCCESS;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_ALREADY_INVITED;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_ALREADY_IN_GUILD;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_TOO_MANY_INVITES;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_GUILD_TOO_MANY_INVITES;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::ERROR_ACCOUNT_TOO_MANY_GUILDS;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::EResult_MIN;
const CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::EResult_MAX;
const int CMsgDOTAGuildInviteAccountResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildCancelInviteResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[3];
}
bool CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::SUCCESS;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::EResult_MIN;
const CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::EResult_MAX;
const int CMsgDOTAGuildCancelInviteResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildUpdateDetailsResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[4];
}
bool CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::SUCCESS;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::ERROR_UNSPECIFIED;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::ERROR_NO_PERMISSION;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::EResult_MIN;
const CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::EResult_MAX;
const int CMsgDOTAGuildUpdateDetailsResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAPartySetOpenGuildResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[5];
}
bool CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::SUCCESS;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::ERROR_UNSPECIFIED;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::EResult_MIN;
const CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::EResult_MAX;
const int CMsgDOTAPartySetOpenGuildResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinOpenGuildPartyResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[6];
}
bool CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::SUCCESS;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::ERROR_UNSPECIFIED;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::EResult_MIN;
const CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::EResult_MAX;
const int CMsgDOTAJoinOpenGuildPartyResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAGuildEditLogoResponse_EResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_enum_descriptors[7];
}
bool CMsgDOTAGuildEditLogoResponse_EResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::SUCCESS;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::NO_PERMISSION;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::LOGO_UPLOAD_FAILED;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::UNSPECIFIED_ERROR;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::EResult_MIN;
const CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::EResult_MAX;
const int CMsgDOTAGuildEditLogoResponse::EResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildSDO_Member::kAccountIdFieldNumber;
const int CMsgDOTAGuildSDO_Member::kTimeJoinedFieldNumber;
const int CMsgDOTAGuildSDO_Member::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildSDO_Member::CMsgDOTAGuildSDO_Member()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildSDO.Member)
}
CMsgDOTAGuildSDO_Member::CMsgDOTAGuildSDO_Member(const CMsgDOTAGuildSDO_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildSDO.Member)
}

void CMsgDOTAGuildSDO_Member::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(role_));
}

CMsgDOTAGuildSDO_Member::~CMsgDOTAGuildSDO_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildSDO.Member)
  SharedDtor();
}

void CMsgDOTAGuildSDO_Member::SharedDtor() {
}

void CMsgDOTAGuildSDO_Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Member::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildSDO_Member& CMsgDOTAGuildSDO_Member::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO_Member::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildSDO_Member* n = new CMsgDOTAGuildSDO_Member;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildSDO_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildSDO.Member)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildSDO_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildSDO.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_joined = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_joined();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_joined_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildSDO.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildSDO.Member)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildSDO.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_joined(), output);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildSDO.Member)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO_Member::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildSDO.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_joined = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_joined(), target);
  }

  // optional uint32 role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildSDO.Member)
  return target;
}

size_t CMsgDOTAGuildSDO_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildSDO.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_joined = 2;
    if (has_time_joined()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_joined());
    }

    // optional uint32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildSDO.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildSDO_Member* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildSDO_Member>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildSDO.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildSDO.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO_Member::MergeFrom(const CMsgDOTAGuildSDO_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildSDO.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_joined_ = from.time_joined_;
    }
    if (cached_has_bits & 0x00000004u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildSDO_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildSDO.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO_Member::CopyFrom(const CMsgDOTAGuildSDO_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildSDO.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO_Member::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildSDO_Member::Swap(CMsgDOTAGuildSDO_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildSDO_Member::InternalSwap(CMsgDOTAGuildSDO_Member* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(time_joined_, other->time_joined_);
  std::swap(role_, other->role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildSDO_Member::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildSDO_Member

// optional uint32 account_id = 1;
bool CMsgDOTAGuildSDO_Member::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildSDO_Member::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildSDO_Member::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildSDO_Member::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Member.account_id)
  return account_id_;
}
void CMsgDOTAGuildSDO_Member::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Member.account_id)
}

// optional uint32 time_joined = 2;
bool CMsgDOTAGuildSDO_Member::has_time_joined() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildSDO_Member::set_has_time_joined() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildSDO_Member::clear_has_time_joined() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildSDO_Member::clear_time_joined() {
  time_joined_ = 0u;
  clear_has_time_joined();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::time_joined() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Member.time_joined)
  return time_joined_;
}
void CMsgDOTAGuildSDO_Member::set_time_joined(::google::protobuf::uint32 value) {
  set_has_time_joined();
  time_joined_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Member.time_joined)
}

// optional uint32 role = 3;
bool CMsgDOTAGuildSDO_Member::has_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildSDO_Member::set_has_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildSDO_Member::clear_has_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildSDO_Member::clear_role() {
  role_ = 0u;
  clear_has_role();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Member::role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Member.role)
  return role_;
}
void CMsgDOTAGuildSDO_Member::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Member.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildSDO_Invitation::kAccountIdFieldNumber;
const int CMsgDOTAGuildSDO_Invitation::kTimeSentFieldNumber;
const int CMsgDOTAGuildSDO_Invitation::kAccountIdSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildSDO_Invitation::CMsgDOTAGuildSDO_Invitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildSDO.Invitation)
}
CMsgDOTAGuildSDO_Invitation::CMsgDOTAGuildSDO_Invitation(const CMsgDOTAGuildSDO_Invitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&account_id_sender_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(account_id_sender_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildSDO.Invitation)
}

void CMsgDOTAGuildSDO_Invitation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&account_id_sender_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(account_id_sender_));
}

CMsgDOTAGuildSDO_Invitation::~CMsgDOTAGuildSDO_Invitation() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildSDO.Invitation)
  SharedDtor();
}

void CMsgDOTAGuildSDO_Invitation::SharedDtor() {
}

void CMsgDOTAGuildSDO_Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO_Invitation::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildSDO_Invitation& CMsgDOTAGuildSDO_Invitation::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO_Invitation::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildSDO_Invitation* n = new CMsgDOTAGuildSDO_Invitation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildSDO_Invitation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&account_id_sender_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(account_id_sender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildSDO_Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_account_id_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildSDO.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildSDO.Invitation)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO_Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 time_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_sent(), output);
  }

  // optional uint32 account_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id_sender(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildSDO.Invitation)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO_Invitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 time_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_sent(), target);
  }

  // optional uint32 account_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id_sender(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildSDO.Invitation)
  return target;
}

size_t CMsgDOTAGuildSDO_Invitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 time_sent = 2;
    if (has_time_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_sent());
    }

    // optional uint32 account_id_sender = 3;
    if (has_account_id_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_sender());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO_Invitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildSDO_Invitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildSDO_Invitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildSDO.Invitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildSDO.Invitation)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO_Invitation::MergeFrom(const CMsgDOTAGuildSDO_Invitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_sent_ = from.time_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_sender_ = from.account_id_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildSDO_Invitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO_Invitation::CopyFrom(const CMsgDOTAGuildSDO_Invitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildSDO.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO_Invitation::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildSDO_Invitation::Swap(CMsgDOTAGuildSDO_Invitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildSDO_Invitation::InternalSwap(CMsgDOTAGuildSDO_Invitation* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(time_sent_, other->time_sent_);
  std::swap(account_id_sender_, other->account_id_sender_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildSDO_Invitation::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildSDO_Invitation

// optional uint32 account_id = 1;
bool CMsgDOTAGuildSDO_Invitation::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildSDO_Invitation::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildSDO_Invitation::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildSDO_Invitation::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Invitation.account_id)
  return account_id_;
}
void CMsgDOTAGuildSDO_Invitation::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Invitation.account_id)
}

// optional uint32 time_sent = 2;
bool CMsgDOTAGuildSDO_Invitation::has_time_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildSDO_Invitation::set_has_time_sent() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildSDO_Invitation::clear_has_time_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildSDO_Invitation::clear_time_sent() {
  time_sent_ = 0u;
  clear_has_time_sent();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::time_sent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Invitation.time_sent)
  return time_sent_;
}
void CMsgDOTAGuildSDO_Invitation::set_time_sent(::google::protobuf::uint32 value) {
  set_has_time_sent();
  time_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Invitation.time_sent)
}

// optional uint32 account_id_sender = 3;
bool CMsgDOTAGuildSDO_Invitation::has_account_id_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildSDO_Invitation::set_has_account_id_sender() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildSDO_Invitation::clear_has_account_id_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildSDO_Invitation::clear_account_id_sender() {
  account_id_sender_ = 0u;
  clear_has_account_id_sender();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO_Invitation::account_id_sender() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.Invitation.account_id_sender)
  return account_id_sender_;
}
void CMsgDOTAGuildSDO_Invitation::set_account_id_sender(::google::protobuf::uint32 value) {
  set_has_account_id_sender();
  account_id_sender_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.Invitation.account_id_sender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildSDO::kGuildIdFieldNumber;
const int CMsgDOTAGuildSDO::kNameFieldNumber;
const int CMsgDOTAGuildSDO::kTagFieldNumber;
const int CMsgDOTAGuildSDO::kTimeCreatedFieldNumber;
const int CMsgDOTAGuildSDO::kTimeDisbandedFieldNumber;
const int CMsgDOTAGuildSDO::kLogoFieldNumber;
const int CMsgDOTAGuildSDO::kBaseLogoFieldNumber;
const int CMsgDOTAGuildSDO::kBannerLogoFieldNumber;
const int CMsgDOTAGuildSDO::kMembersFieldNumber;
const int CMsgDOTAGuildSDO::kInvitationsFieldNumber;
const int CMsgDOTAGuildSDO::kMessageFieldNumber;
const int CMsgDOTAGuildSDO::kIncrementalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildSDO::CMsgDOTAGuildSDO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildSDO)
}
CMsgDOTAGuildSDO::CMsgDOTAGuildSDO(const CMsgDOTAGuildSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      invitations_(from.invitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(incremental_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildSDO)
}

void CMsgDOTAGuildSDO::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&incremental_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(incremental_));
}

CMsgDOTAGuildSDO::~CMsgDOTAGuildSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildSDO)
  SharedDtor();
}

void CMsgDOTAGuildSDO::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGuildSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSDO::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildSDO& CMsgDOTAGuildSDO::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildSDO* CMsgDOTAGuildSDO::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildSDO* n = new CMsgDOTAGuildSDO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildSDO)
  members_.Clear();
  invitations_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&banner_logo_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(banner_logo_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&time_disbanded_, 0, reinterpret_cast<char*>(&incremental_) -
      reinterpret_cast<char*>(&time_disbanded_) + sizeof(incremental_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildSDO.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildSDO.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_disbanded = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_time_disbanded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_disbanded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAGuildSDO.Member members = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAGuildSDO.Invitation invitations = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildSDO.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incremental = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_incremental();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildSDO)
  return false;
#undef DO_
}

void CMsgDOTAGuildSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_created(), output);
  }

  // optional uint32 time_disbanded = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time_disbanded(), output);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->logo(), output);
  }

  // optional uint64 base_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->banner_logo(), output);
  }

  // repeated .proto.dota.CMsgDOTAGuildSDO.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->members(i), output);
  }

  // repeated .proto.dota.CMsgDOTAGuildSDO.Invitation invitations = 10;
  for (unsigned int i = 0, n = this->invitations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->invitations(i), output);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->message(), output);
  }

  // optional bool incremental = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->incremental(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildSDO)
}

::google::protobuf::uint8* CMsgDOTAGuildSDO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint32 time_created = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_created(), target);
  }

  // optional uint32 time_disbanded = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time_disbanded(), target);
  }

  // optional uint64 logo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->logo(), target);
  }

  // optional uint64 base_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->banner_logo(), target);
  }

  // repeated .proto.dota.CMsgDOTAGuildSDO.Member members = 9;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->members(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTAGuildSDO.Invitation invitations = 10;
  for (unsigned int i = 0, n = this->invitations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->invitations(i), deterministic, target);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildSDO.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }

  // optional bool incremental = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->incremental(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildSDO)
  return target;
}

size_t CMsgDOTAGuildSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAGuildSDO.Member members = 9;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAGuildSDO.Invitation invitations = 10;
  {
    unsigned int count = this->invitations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitations(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 time_created = 4;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

    // optional uint64 logo = 6;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 7;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 8;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 time_disbanded = 5;
    if (has_time_disbanded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_disbanded());
    }

    // optional bool incremental = 12;
    if (has_incremental()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildSDO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildSDO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSDO::MergeFrom(const CMsgDOTAGuildSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  invitations_.MergeFrom(from.invitations_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000008u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      banner_logo_ = from.banner_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      time_disbanded_ = from.time_disbanded_;
    }
    if (cached_has_bits & 0x00000200u) {
      incremental_ = from.incremental_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSDO::CopyFrom(const CMsgDOTAGuildSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSDO::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildSDO::Swap(CMsgDOTAGuildSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildSDO::InternalSwap(CMsgDOTAGuildSDO* other) {
  members_.InternalSwap(&other->members_);
  invitations_.InternalSwap(&other->invitations_);
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  message_.Swap(&other->message_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(time_disbanded_, other->time_disbanded_);
  std::swap(incremental_, other->incremental_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildSDO::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildSDO

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildSDO::has_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAGuildSDO::set_has_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAGuildSDO::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAGuildSDO::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildSDO::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.guild_id)
}

// optional string name = 2;
bool CMsgDOTAGuildSDO::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildSDO::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildSDO::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildSDO::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTAGuildSDO::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.name)
  return name_.GetNoArena();
}
void CMsgDOTAGuildSDO::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.name)
}
#if LANG_CXX11
void CMsgDOTAGuildSDO::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildSDO.name)
}
#endif
void CMsgDOTAGuildSDO::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildSDO.name)
}
void CMsgDOTAGuildSDO::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildSDO.name)
}
::std::string* CMsgDOTAGuildSDO::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildSDO.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildSDO::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildSDO.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildSDO::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildSDO.name)
}

// optional string tag = 3;
bool CMsgDOTAGuildSDO::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildSDO::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildSDO::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildSDO::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTAGuildSDO::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.tag)
  return tag_.GetNoArena();
}
void CMsgDOTAGuildSDO::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.tag)
}
#if LANG_CXX11
void CMsgDOTAGuildSDO::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildSDO.tag)
}
#endif
void CMsgDOTAGuildSDO::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildSDO.tag)
}
void CMsgDOTAGuildSDO::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildSDO.tag)
}
::std::string* CMsgDOTAGuildSDO::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildSDO.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildSDO::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildSDO.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildSDO::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildSDO.tag)
}

// optional uint32 time_created = 4;
bool CMsgDOTAGuildSDO::has_time_created() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAGuildSDO::set_has_time_created() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAGuildSDO::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAGuildSDO::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.time_created)
  return time_created_;
}
void CMsgDOTAGuildSDO::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.time_created)
}

// optional uint32 time_disbanded = 5;
bool CMsgDOTAGuildSDO::has_time_disbanded() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAGuildSDO::set_has_time_disbanded() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAGuildSDO::clear_has_time_disbanded() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAGuildSDO::clear_time_disbanded() {
  time_disbanded_ = 0u;
  clear_has_time_disbanded();
}
::google::protobuf::uint32 CMsgDOTAGuildSDO::time_disbanded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.time_disbanded)
  return time_disbanded_;
}
void CMsgDOTAGuildSDO::set_time_disbanded(::google::protobuf::uint32 value) {
  set_has_time_disbanded();
  time_disbanded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.time_disbanded)
}

// optional uint64 logo = 6;
bool CMsgDOTAGuildSDO::has_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAGuildSDO::set_has_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAGuildSDO::clear_has_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAGuildSDO::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildSDO::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.logo)
  return logo_;
}
void CMsgDOTAGuildSDO::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.logo)
}

// optional uint64 base_logo = 7;
bool CMsgDOTAGuildSDO::has_base_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAGuildSDO::set_has_base_logo() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAGuildSDO::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAGuildSDO::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildSDO::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.base_logo)
  return base_logo_;
}
void CMsgDOTAGuildSDO::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.base_logo)
}

// optional uint64 banner_logo = 8;
bool CMsgDOTAGuildSDO::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAGuildSDO::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAGuildSDO::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAGuildSDO::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildSDO::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.banner_logo)
  return banner_logo_;
}
void CMsgDOTAGuildSDO::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.banner_logo)
}

// repeated .proto.dota.CMsgDOTAGuildSDO.Member members = 9;
int CMsgDOTAGuildSDO::members_size() const {
  return members_.size();
}
void CMsgDOTAGuildSDO::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgDOTAGuildSDO_Member& CMsgDOTAGuildSDO::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.members)
  return members_.Get(index);
}
::proto::dota::CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildSDO.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgDOTAGuildSDO_Member* CMsgDOTAGuildSDO::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildSDO.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildSDO_Member >*
CMsgDOTAGuildSDO::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildSDO.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildSDO_Member >&
CMsgDOTAGuildSDO::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildSDO.members)
  return members_;
}

// repeated .proto.dota.CMsgDOTAGuildSDO.Invitation invitations = 10;
int CMsgDOTAGuildSDO::invitations_size() const {
  return invitations_.size();
}
void CMsgDOTAGuildSDO::clear_invitations() {
  invitations_.Clear();
}
const ::proto::dota::CMsgDOTAGuildSDO_Invitation& CMsgDOTAGuildSDO::invitations(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.invitations)
  return invitations_.Get(index);
}
::proto::dota::CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO::mutable_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildSDO.invitations)
  return invitations_.Mutable(index);
}
::proto::dota::CMsgDOTAGuildSDO_Invitation* CMsgDOTAGuildSDO::add_invitations() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildSDO.invitations)
  return invitations_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildSDO_Invitation >*
CMsgDOTAGuildSDO::mutable_invitations() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildSDO.invitations)
  return &invitations_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildSDO_Invitation >&
CMsgDOTAGuildSDO::invitations() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildSDO.invitations)
  return invitations_;
}

// optional string message = 11;
bool CMsgDOTAGuildSDO::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildSDO::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildSDO::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildSDO::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgDOTAGuildSDO::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.message)
  return message_.GetNoArena();
}
void CMsgDOTAGuildSDO::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.message)
}
#if LANG_CXX11
void CMsgDOTAGuildSDO::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildSDO.message)
}
#endif
void CMsgDOTAGuildSDO::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildSDO.message)
}
void CMsgDOTAGuildSDO::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildSDO.message)
}
::std::string* CMsgDOTAGuildSDO::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildSDO.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildSDO::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildSDO.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildSDO::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildSDO.message)
}

// optional bool incremental = 12;
bool CMsgDOTAGuildSDO::has_incremental() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAGuildSDO::set_has_incremental() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAGuildSDO::clear_has_incremental() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAGuildSDO::clear_incremental() {
  incremental_ = false;
  clear_has_incremental();
}
bool CMsgDOTAGuildSDO::incremental() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSDO.incremental)
  return incremental_;
}
void CMsgDOTAGuildSDO::set_incremental(bool value) {
  set_has_incremental();
  incremental_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSDO.incremental)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildAuditSDO_Entry::kEventIndexFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kTimestampFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kActionFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kAccountIdRequestorFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kAccountIdTargetFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kReferenceDataAFieldNumber;
const int CMsgDOTAGuildAuditSDO_Entry::kReferenceDataBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildAuditSDO_Entry::CMsgDOTAGuildAuditSDO_Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
}
CMsgDOTAGuildAuditSDO_Entry::CMsgDOTAGuildAuditSDO_Entry(const CMsgDOTAGuildAuditSDO_Entry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&event_index_, &from.event_index_,
    reinterpret_cast<char*>(&reference_data_b_) -
    reinterpret_cast<char*>(&event_index_) + sizeof(reference_data_b_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
}

void CMsgDOTAGuildAuditSDO_Entry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&event_index_, 0, reinterpret_cast<char*>(&reference_data_b_) -
    reinterpret_cast<char*>(&event_index_) + sizeof(reference_data_b_));
}

CMsgDOTAGuildAuditSDO_Entry::~CMsgDOTAGuildAuditSDO_Entry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  SharedDtor();
}

void CMsgDOTAGuildAuditSDO_Entry::SharedDtor() {
}

void CMsgDOTAGuildAuditSDO_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO_Entry::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildAuditSDO_Entry& CMsgDOTAGuildAuditSDO_Entry::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO_Entry::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildAuditSDO_Entry* n = new CMsgDOTAGuildAuditSDO_Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildAuditSDO_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&event_index_, 0, reinterpret_cast<char*>(&reference_data_b_) -
      reinterpret_cast<char*>(&event_index_) + sizeof(reference_data_b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildAuditSDO_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_event_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 action = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_action();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_requestor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_account_id_requestor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_requestor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_target = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_account_id_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_target_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reference_data_a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reference_data_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reference_data_b = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_reference_data_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reference_data_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  return false;
#undef DO_
}

void CMsgDOTAGuildAuditSDO_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_index(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional uint32 action = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action(), output);
  }

  // optional uint32 account_id_requestor = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account_id_requestor(), output);
  }

  // optional uint32 account_id_target = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id_target(), output);
  }

  // optional uint32 reference_data_a = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->reference_data_a(), output);
  }

  // optional uint32 reference_data_b = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reference_data_b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
}

::google::protobuf::uint8* CMsgDOTAGuildAuditSDO_Entry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 event_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_index(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional uint32 action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->action(), target);
  }

  // optional uint32 account_id_requestor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account_id_requestor(), target);
  }

  // optional uint32 account_id_target = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id_target(), target);
  }

  // optional uint32 reference_data_a = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->reference_data_a(), target);
  }

  // optional uint32 reference_data_b = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reference_data_b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  return target;
}

size_t CMsgDOTAGuildAuditSDO_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 event_index = 1;
    if (has_event_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_index());
    }

    // optional uint32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional uint32 account_id_requestor = 4;
    if (has_account_id_requestor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_requestor());
    }

    // optional uint32 account_id_target = 5;
    if (has_account_id_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_target());
    }

    // optional uint32 reference_data_a = 6;
    if (has_reference_data_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data_a());
    }

    // optional uint32 reference_data_b = 7;
    if (has_reference_data_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reference_data_b());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildAuditSDO_Entry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildAuditSDO_Entry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildAuditSDO_Entry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildAuditSDO_Entry::MergeFrom(const CMsgDOTAGuildAuditSDO_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      event_index_ = from.event_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_requestor_ = from.account_id_requestor_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_target_ = from.account_id_target_;
    }
    if (cached_has_bits & 0x00000020u) {
      reference_data_a_ = from.reference_data_a_;
    }
    if (cached_has_bits & 0x00000040u) {
      reference_data_b_ = from.reference_data_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildAuditSDO_Entry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildAuditSDO_Entry::CopyFrom(const CMsgDOTAGuildAuditSDO_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildAuditSDO.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildAuditSDO_Entry::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildAuditSDO_Entry::Swap(CMsgDOTAGuildAuditSDO_Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildAuditSDO_Entry::InternalSwap(CMsgDOTAGuildAuditSDO_Entry* other) {
  std::swap(event_index_, other->event_index_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(action_, other->action_);
  std::swap(account_id_requestor_, other->account_id_requestor_);
  std::swap(account_id_target_, other->account_id_target_);
  std::swap(reference_data_a_, other->reference_data_a_);
  std::swap(reference_data_b_, other->reference_data_b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildAuditSDO_Entry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildAuditSDO_Entry

// optional uint32 event_index = 1;
bool CMsgDOTAGuildAuditSDO_Entry::has_event_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_event_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_event_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_event_index() {
  event_index_ = 0u;
  clear_has_event_index();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::event_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.event_index)
  return event_index_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_event_index(::google::protobuf::uint32 value) {
  set_has_event_index();
  event_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.event_index)
}

// optional uint32 timestamp = 2;
bool CMsgDOTAGuildAuditSDO_Entry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.timestamp)
  return timestamp_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.timestamp)
}

// optional uint32 action = 3;
bool CMsgDOTAGuildAuditSDO_Entry::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_action() {
  action_ = 0u;
  clear_has_action();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::action() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.action)
  return action_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_action(::google::protobuf::uint32 value) {
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.action)
}

// optional uint32 account_id_requestor = 4;
bool CMsgDOTAGuildAuditSDO_Entry::has_account_id_requestor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_account_id_requestor() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_account_id_requestor() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_account_id_requestor() {
  account_id_requestor_ = 0u;
  clear_has_account_id_requestor();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::account_id_requestor() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.account_id_requestor)
  return account_id_requestor_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_account_id_requestor(::google::protobuf::uint32 value) {
  set_has_account_id_requestor();
  account_id_requestor_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.account_id_requestor)
}

// optional uint32 account_id_target = 5;
bool CMsgDOTAGuildAuditSDO_Entry::has_account_id_target() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_account_id_target() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_account_id_target() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_account_id_target() {
  account_id_target_ = 0u;
  clear_has_account_id_target();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::account_id_target() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.account_id_target)
  return account_id_target_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_account_id_target(::google::protobuf::uint32 value) {
  set_has_account_id_target();
  account_id_target_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.account_id_target)
}

// optional uint32 reference_data_a = 6;
bool CMsgDOTAGuildAuditSDO_Entry::has_reference_data_a() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_reference_data_a() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_reference_data_a() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_reference_data_a() {
  reference_data_a_ = 0u;
  clear_has_reference_data_a();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::reference_data_a() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.reference_data_a)
  return reference_data_a_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_reference_data_a(::google::protobuf::uint32 value) {
  set_has_reference_data_a();
  reference_data_a_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.reference_data_a)
}

// optional uint32 reference_data_b = 7;
bool CMsgDOTAGuildAuditSDO_Entry::has_reference_data_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAGuildAuditSDO_Entry::set_has_reference_data_b() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_has_reference_data_b() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAGuildAuditSDO_Entry::clear_reference_data_b() {
  reference_data_b_ = 0u;
  clear_has_reference_data_b();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO_Entry::reference_data_b() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.Entry.reference_data_b)
  return reference_data_b_;
}
void CMsgDOTAGuildAuditSDO_Entry::set_reference_data_b(::google::protobuf::uint32 value) {
  set_has_reference_data_b();
  reference_data_b_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.Entry.reference_data_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildAuditSDO::kGuildIdFieldNumber;
const int CMsgDOTAGuildAuditSDO::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildAuditSDO::CMsgDOTAGuildAuditSDO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildAuditSDO)
}
CMsgDOTAGuildAuditSDO::CMsgDOTAGuildAuditSDO(const CMsgDOTAGuildAuditSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildAuditSDO)
}

void CMsgDOTAGuildAuditSDO::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
}

CMsgDOTAGuildAuditSDO::~CMsgDOTAGuildAuditSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildAuditSDO)
  SharedDtor();
}

void CMsgDOTAGuildAuditSDO::SharedDtor() {
}

void CMsgDOTAGuildAuditSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildAuditSDO::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildAuditSDO& CMsgDOTAGuildAuditSDO::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildAuditSDO* CMsgDOTAGuildAuditSDO::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildAuditSDO* n = new CMsgDOTAGuildAuditSDO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildAuditSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildAuditSDO)
  entries_.Clear();
  guild_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildAuditSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildAuditSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAGuildAuditSDO.Entry entries = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildAuditSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildAuditSDO)
  return false;
#undef DO_
}

void CMsgDOTAGuildAuditSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildAuditSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAGuildAuditSDO.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entries(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildAuditSDO)
}

::google::protobuf::uint8* CMsgDOTAGuildAuditSDO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildAuditSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAGuildAuditSDO.Entry entries = 2;
  for (unsigned int i = 0, n = this->entries_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->entries(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildAuditSDO)
  return target;
}

size_t CMsgDOTAGuildAuditSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildAuditSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAGuildAuditSDO.Entry entries = 2;
  {
    unsigned int count = this->entries_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entries(i));
    }
  }

  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guild_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildAuditSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildAuditSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildAuditSDO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildAuditSDO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildAuditSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildAuditSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildAuditSDO::MergeFrom(const CMsgDOTAGuildAuditSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildAuditSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.has_guild_id()) {
    set_guild_id(from.guild_id());
  }
}

void CMsgDOTAGuildAuditSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildAuditSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildAuditSDO::CopyFrom(const CMsgDOTAGuildAuditSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildAuditSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildAuditSDO::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildAuditSDO::Swap(CMsgDOTAGuildAuditSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildAuditSDO::InternalSwap(CMsgDOTAGuildAuditSDO* other) {
  entries_.InternalSwap(&other->entries_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildAuditSDO::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildAuditSDO

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildAuditSDO::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildAuditSDO::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildAuditSDO::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildAuditSDO::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildAuditSDO::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildAuditSDO::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildAuditSDO.guild_id)
}

// repeated .proto.dota.CMsgDOTAGuildAuditSDO.Entry entries = 2;
int CMsgDOTAGuildAuditSDO::entries_size() const {
  return entries_.size();
}
void CMsgDOTAGuildAuditSDO::clear_entries() {
  entries_.Clear();
}
const ::proto::dota::CMsgDOTAGuildAuditSDO_Entry& CMsgDOTAGuildAuditSDO::entries(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildAuditSDO.entries)
  return entries_.Get(index);
}
::proto::dota::CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildAuditSDO.entries)
  return entries_.Mutable(index);
}
::proto::dota::CMsgDOTAGuildAuditSDO_Entry* CMsgDOTAGuildAuditSDO::add_entries() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildAuditSDO.entries)
  return entries_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildAuditSDO_Entry >*
CMsgDOTAGuildAuditSDO::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildAuditSDO.entries)
  return &entries_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildAuditSDO_Entry >&
CMsgDOTAGuildAuditSDO::entries() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildAuditSDO.entries)
  return entries_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAccountGuildMembershipsSDO_Membership::kGuildIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Membership::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAccountGuildMembershipsSDO_Membership::CMsgDOTAAccountGuildMembershipsSDO_Membership()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
}
CMsgDOTAAccountGuildMembershipsSDO_Membership::CMsgDOTAAccountGuildMembershipsSDO_Membership(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(role_));
}

CMsgDOTAAccountGuildMembershipsSDO_Membership::~CMsgDOTAAccountGuildMembershipsSDO_Membership() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SharedDtor() {
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Membership::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAAccountGuildMembershipsSDO_Membership& CMsgDOTAAccountGuildMembershipsSDO_Membership::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO_Membership::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAAccountGuildMembershipsSDO_Membership* n = new CMsgDOTAAccountGuildMembershipsSDO_Membership;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO_Membership::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 role = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 role = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO_Membership::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 role = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  return target;
}

size_t CMsgDOTAAccountGuildMembershipsSDO_Membership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 role = 2;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO_Membership* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAAccountGuildMembershipsSDO_Membership>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      role_ = from.role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Membership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO_Membership::IsInitialized() const {
  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO_Membership::Swap(CMsgDOTAAccountGuildMembershipsSDO_Membership* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::InternalSwap(CMsgDOTAAccountGuildMembershipsSDO_Membership* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(role_, other->role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO_Membership::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAAccountGuildMembershipsSDO_Membership

// optional uint32 guild_id = 1;
bool CMsgDOTAAccountGuildMembershipsSDO_Membership::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Membership::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership.guild_id)
  return guild_id_;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership.guild_id)
}

// optional uint32 role = 2;
bool CMsgDOTAAccountGuildMembershipsSDO_Membership::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::clear_role() {
  role_ = 0u;
  clear_has_role();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Membership::role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership.role)
  return role_;
}
void CMsgDOTAAccountGuildMembershipsSDO_Membership::set_role(::google::protobuf::uint32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership.role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kGuildIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kTimeSentFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO_Invitation::kAccountIdSenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAccountGuildMembershipsSDO_Invitation::CMsgDOTAAccountGuildMembershipsSDO_Invitation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}
CMsgDOTAAccountGuildMembershipsSDO_Invitation::CMsgDOTAAccountGuildMembershipsSDO_Invitation(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&account_id_sender_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(account_id_sender_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&account_id_sender_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(account_id_sender_));
}

CMsgDOTAAccountGuildMembershipsSDO_Invitation::~CMsgDOTAAccountGuildMembershipsSDO_Invitation() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SharedDtor() {
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO_Invitation::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAAccountGuildMembershipsSDO_Invitation& CMsgDOTAAccountGuildMembershipsSDO_Invitation::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO_Invitation::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAAccountGuildMembershipsSDO_Invitation* n = new CMsgDOTAAccountGuildMembershipsSDO_Invitation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&account_id_sender_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(account_id_sender_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_sent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_sent();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_sent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id_sender = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_account_id_sender();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_sender_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 time_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_sent(), output);
  }

  // optional uint32 account_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id_sender(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO_Invitation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 time_sent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_sent(), target);
  }

  // optional uint32 account_id_sender = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id_sender(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  return target;
}

size_t CMsgDOTAAccountGuildMembershipsSDO_Invitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 time_sent = 2;
    if (has_time_sent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_sent());
    }

    // optional uint32 account_id_sender = 3;
    if (has_account_id_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id_sender());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO_Invitation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAAccountGuildMembershipsSDO_Invitation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_sent_ = from.time_sent_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_sender_ = from.account_id_sender_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO_Invitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::IsInitialized() const {
  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO_Invitation::Swap(CMsgDOTAAccountGuildMembershipsSDO_Invitation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::InternalSwap(CMsgDOTAAccountGuildMembershipsSDO_Invitation* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(time_sent_, other->time_sent_);
  std::swap(account_id_sender_, other->account_id_sender_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO_Invitation::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAAccountGuildMembershipsSDO_Invitation

// optional uint32 guild_id = 1;
bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.guild_id)
  return guild_id_;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.guild_id)
}

// optional uint32 time_sent = 2;
bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_time_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_time_sent() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_time_sent() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_time_sent() {
  time_sent_ = 0u;
  clear_has_time_sent();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::time_sent() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.time_sent)
  return time_sent_;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_time_sent(::google::protobuf::uint32 value) {
  set_has_time_sent();
  time_sent_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.time_sent)
}

// optional uint32 account_id_sender = 3;
bool CMsgDOTAAccountGuildMembershipsSDO_Invitation::has_account_id_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_has_account_id_sender() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_has_account_id_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::clear_account_id_sender() {
  account_id_sender_ = 0u;
  clear_has_account_id_sender();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO_Invitation::account_id_sender() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.account_id_sender)
  return account_id_sender_;
}
void CMsgDOTAAccountGuildMembershipsSDO_Invitation::set_account_id_sender(::google::protobuf::uint32 value) {
  set_has_account_id_sender();
  account_id_sender_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation.account_id_sender)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAAccountGuildMembershipsSDO::kAccountIdFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO::kMembershipsFieldNumber;
const int CMsgDOTAAccountGuildMembershipsSDO::kInvitationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAAccountGuildMembershipsSDO::CMsgDOTAAccountGuildMembershipsSDO()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
}
CMsgDOTAAccountGuildMembershipsSDO::CMsgDOTAAccountGuildMembershipsSDO(const CMsgDOTAAccountGuildMembershipsSDO& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      memberships_(from.memberships_),
      invitations_(from.invitations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
}

void CMsgDOTAAccountGuildMembershipsSDO::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgDOTAAccountGuildMembershipsSDO::~CMsgDOTAAccountGuildMembershipsSDO() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  SharedDtor();
}

void CMsgDOTAAccountGuildMembershipsSDO::SharedDtor() {
}

void CMsgDOTAAccountGuildMembershipsSDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAAccountGuildMembershipsSDO::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAAccountGuildMembershipsSDO& CMsgDOTAAccountGuildMembershipsSDO::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAAccountGuildMembershipsSDO* CMsgDOTAAccountGuildMembershipsSDO::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAAccountGuildMembershipsSDO* n = new CMsgDOTAAccountGuildMembershipsSDO;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAAccountGuildMembershipsSDO::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  memberships_.Clear();
  invitations_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAAccountGuildMembershipsSDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberships()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  return false;
#undef DO_
}

void CMsgDOTAAccountGuildMembershipsSDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  for (unsigned int i = 0, n = this->memberships_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberships(i), output);
  }

  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  for (unsigned int i = 0, n = this->invitations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invitations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
}

::google::protobuf::uint8* CMsgDOTAAccountGuildMembershipsSDO::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  for (unsigned int i = 0, n = this->memberships_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->memberships(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  for (unsigned int i = 0, n = this->invitations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->invitations(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  return target;
}

size_t CMsgDOTAAccountGuildMembershipsSDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
  {
    unsigned int count = this->memberships_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberships(i));
    }
  }

  // repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
  {
    unsigned int count = this->invitations_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitations(i));
    }
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAAccountGuildMembershipsSDO::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAAccountGuildMembershipsSDO* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAAccountGuildMembershipsSDO>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
    MergeFrom(*source);
  }
}

void CMsgDOTAAccountGuildMembershipsSDO::MergeFrom(const CMsgDOTAAccountGuildMembershipsSDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memberships_.MergeFrom(from.memberships_);
  invitations_.MergeFrom(from.invitations_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTAAccountGuildMembershipsSDO::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAAccountGuildMembershipsSDO::CopyFrom(const CMsgDOTAAccountGuildMembershipsSDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAAccountGuildMembershipsSDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAAccountGuildMembershipsSDO::IsInitialized() const {
  return true;
}

void CMsgDOTAAccountGuildMembershipsSDO::Swap(CMsgDOTAAccountGuildMembershipsSDO* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAAccountGuildMembershipsSDO::InternalSwap(CMsgDOTAAccountGuildMembershipsSDO* other) {
  memberships_.InternalSwap(&other->memberships_);
  invitations_.InternalSwap(&other->invitations_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAAccountGuildMembershipsSDO::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAAccountGuildMembershipsSDO

// optional uint32 account_id = 1;
bool CMsgDOTAAccountGuildMembershipsSDO::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAAccountGuildMembershipsSDO::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAAccountGuildMembershipsSDO::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAAccountGuildMembershipsSDO::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.account_id)
  return account_id_;
}
void CMsgDOTAAccountGuildMembershipsSDO::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.account_id)
}

// repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Membership memberships = 2;
int CMsgDOTAAccountGuildMembershipsSDO::memberships_size() const {
  return memberships_.size();
}
void CMsgDOTAAccountGuildMembershipsSDO::clear_memberships() {
  memberships_.Clear();
}
const ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Membership& CMsgDOTAAccountGuildMembershipsSDO::memberships(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Get(index);
}
::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO::mutable_memberships(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Mutable(index);
}
::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Membership* CMsgDOTAAccountGuildMembershipsSDO::add_memberships() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Membership >*
CMsgDOTAAccountGuildMembershipsSDO::mutable_memberships() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return &memberships_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Membership >&
CMsgDOTAAccountGuildMembershipsSDO::memberships() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.memberships)
  return memberships_;
}

// repeated .proto.dota.CMsgDOTAAccountGuildMembershipsSDO.Invitation invitations = 3;
int CMsgDOTAAccountGuildMembershipsSDO::invitations_size() const {
  return invitations_.size();
}
void CMsgDOTAAccountGuildMembershipsSDO::clear_invitations() {
  invitations_.Clear();
}
const ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Invitation& CMsgDOTAAccountGuildMembershipsSDO::invitations(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Get(index);
}
::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO::mutable_invitations(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Mutable(index);
}
::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Invitation* CMsgDOTAAccountGuildMembershipsSDO::add_invitations() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Invitation >*
CMsgDOTAAccountGuildMembershipsSDO::mutable_invitations() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return &invitations_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAAccountGuildMembershipsSDO_Invitation >&
CMsgDOTAAccountGuildMembershipsSDO::invitations() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAAccountGuildMembershipsSDO.invitations)
  return invitations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildCreateRequest::kNameFieldNumber;
const int CMsgDOTAGuildCreateRequest::kTagFieldNumber;
const int CMsgDOTAGuildCreateRequest::kLogoFieldNumber;
const int CMsgDOTAGuildCreateRequest::kBaseLogoFieldNumber;
const int CMsgDOTAGuildCreateRequest::kBannerLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildCreateRequest::CMsgDOTAGuildCreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildCreateRequest)
}
CMsgDOTAGuildCreateRequest::CMsgDOTAGuildCreateRequest(const CMsgDOTAGuildCreateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&banner_logo_) -
    reinterpret_cast<char*>(&logo_) + sizeof(banner_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildCreateRequest)
}

void CMsgDOTAGuildCreateRequest::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&logo_, 0, reinterpret_cast<char*>(&banner_logo_) -
    reinterpret_cast<char*>(&logo_) + sizeof(banner_logo_));
}

CMsgDOTAGuildCreateRequest::~CMsgDOTAGuildCreateRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildCreateRequest)
  SharedDtor();
}

void CMsgDOTAGuildCreateRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGuildCreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildCreateRequest& CMsgDOTAGuildCreateRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildCreateRequest* CMsgDOTAGuildCreateRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildCreateRequest* n = new CMsgDOTAGuildCreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildCreateRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&banner_logo_) -
      reinterpret_cast<char*>(&logo_) + sizeof(banner_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildCreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildCreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildCreateRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildCreateRequest.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildCreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildCreateRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildCreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildCreateRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildCreateRequest.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag(), output);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->logo(), output);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->banner_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildCreateRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildCreateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildCreateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildCreateRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string tag = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildCreateRequest.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag(), target);
  }

  // optional uint64 logo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->logo(), target);
  }

  // optional uint64 base_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->banner_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildCreateRequest)
  return target;
}

size_t CMsgDOTAGuildCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildCreateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint64 logo = 3;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 4;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 5;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildCreateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildCreateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildCreateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildCreateRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCreateRequest::MergeFrom(const CMsgDOTAGuildCreateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildCreateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      banner_logo_ = from.banner_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildCreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCreateRequest::CopyFrom(const CMsgDOTAGuildCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCreateRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildCreateRequest::Swap(CMsgDOTAGuildCreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildCreateRequest::InternalSwap(CMsgDOTAGuildCreateRequest* other) {
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildCreateRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildCreateRequest

// optional string name = 1;
bool CMsgDOTAGuildCreateRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildCreateRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildCreateRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildCreateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTAGuildCreateRequest::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateRequest.name)
  return name_.GetNoArena();
}
void CMsgDOTAGuildCreateRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateRequest.name)
}
#if LANG_CXX11
void CMsgDOTAGuildCreateRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildCreateRequest.name)
}
#endif
void CMsgDOTAGuildCreateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildCreateRequest.name)
}
void CMsgDOTAGuildCreateRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildCreateRequest.name)
}
::std::string* CMsgDOTAGuildCreateRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildCreateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildCreateRequest::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildCreateRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildCreateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildCreateRequest.name)
}

// optional string tag = 2;
bool CMsgDOTAGuildCreateRequest::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildCreateRequest::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildCreateRequest::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildCreateRequest::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTAGuildCreateRequest::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateRequest.tag)
  return tag_.GetNoArena();
}
void CMsgDOTAGuildCreateRequest::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateRequest.tag)
}
#if LANG_CXX11
void CMsgDOTAGuildCreateRequest::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildCreateRequest.tag)
}
#endif
void CMsgDOTAGuildCreateRequest::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildCreateRequest.tag)
}
void CMsgDOTAGuildCreateRequest::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildCreateRequest.tag)
}
::std::string* CMsgDOTAGuildCreateRequest::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildCreateRequest.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildCreateRequest::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildCreateRequest.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildCreateRequest::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildCreateRequest.tag)
}

// optional uint64 logo = 3;
bool CMsgDOTAGuildCreateRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildCreateRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildCreateRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildCreateRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateRequest.logo)
  return logo_;
}
void CMsgDOTAGuildCreateRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateRequest.logo)
}

// optional uint64 base_logo = 4;
bool CMsgDOTAGuildCreateRequest::has_base_logo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAGuildCreateRequest::set_has_base_logo() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAGuildCreateRequest::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAGuildCreateRequest::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateRequest.base_logo)
  return base_logo_;
}
void CMsgDOTAGuildCreateRequest::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateRequest.base_logo)
}

// optional uint64 banner_logo = 5;
bool CMsgDOTAGuildCreateRequest::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAGuildCreateRequest::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAGuildCreateRequest::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAGuildCreateRequest::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildCreateRequest::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateRequest.banner_logo)
  return banner_logo_;
}
void CMsgDOTAGuildCreateRequest::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateRequest.banner_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildCreateResponse::kGuildIdFieldNumber;
const int CMsgDOTAGuildCreateResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildCreateResponse::CMsgDOTAGuildCreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildCreateResponse)
}
CMsgDOTAGuildCreateResponse::CMsgDOTAGuildCreateResponse(const CMsgDOTAGuildCreateResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildCreateResponse)
}

void CMsgDOTAGuildCreateResponse::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
}

CMsgDOTAGuildCreateResponse::~CMsgDOTAGuildCreateResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildCreateResponse)
  SharedDtor();
}

void CMsgDOTAGuildCreateResponse::SharedDtor() {
}

void CMsgDOTAGuildCreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCreateResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildCreateResponse& CMsgDOTAGuildCreateResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildCreateResponse* CMsgDOTAGuildCreateResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildCreateResponse* n = new CMsgDOTAGuildCreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildCreateResponse)
  errors_.Clear();
  guild_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildCreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildCreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAGuildCreateResponse.EError errors = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildCreateResponse_EError_IsValid(value)) {
            add_errors(static_cast< ::proto::dota::CMsgDOTAGuildCreateResponse_EError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 2,
                 ::proto::dota::CMsgDOTAGuildCreateResponse_EError_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_errors())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildCreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildCreateResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildCreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAGuildCreateResponse.EError errors = 2;
  for (int i = 0, n = this->errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errors(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildCreateResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildCreateResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildCreateResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAGuildCreateResponse.EError errors = 2;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    2, this->errors_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildCreateResponse)
  return target;
}

size_t CMsgDOTAGuildCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildCreateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAGuildCreateResponse.EError errors = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->errors_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->errors(i));
    }
    total_size += (1UL * count) + data_size;
  }

  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guild_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildCreateResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildCreateResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildCreateResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildCreateResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCreateResponse::MergeFrom(const CMsgDOTAGuildCreateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildCreateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_guild_id()) {
    set_guild_id(from.guild_id());
  }
}

void CMsgDOTAGuildCreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCreateResponse::CopyFrom(const CMsgDOTAGuildCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCreateResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildCreateResponse::Swap(CMsgDOTAGuildCreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildCreateResponse::InternalSwap(CMsgDOTAGuildCreateResponse* other) {
  errors_.InternalSwap(&other->errors_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildCreateResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildCreateResponse

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildCreateResponse::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildCreateResponse::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildCreateResponse::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildCreateResponse::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildCreateResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateResponse.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildCreateResponse::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateResponse.guild_id)
}

// repeated .proto.dota.CMsgDOTAGuildCreateResponse.EError errors = 2;
int CMsgDOTAGuildCreateResponse::errors_size() const {
  return errors_.size();
}
void CMsgDOTAGuildCreateResponse::clear_errors() {
  errors_.Clear();
}
::proto::dota::CMsgDOTAGuildCreateResponse_EError CMsgDOTAGuildCreateResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCreateResponse.errors)
  return static_cast< ::proto::dota::CMsgDOTAGuildCreateResponse_EError >(errors_.Get(index));
}
void CMsgDOTAGuildCreateResponse::set_errors(int index, ::proto::dota::CMsgDOTAGuildCreateResponse_EError value) {
  assert(::proto::dota::CMsgDOTAGuildCreateResponse_EError_IsValid(value));
  errors_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCreateResponse.errors)
}
void CMsgDOTAGuildCreateResponse::add_errors(::proto::dota::CMsgDOTAGuildCreateResponse_EError value) {
  assert(::proto::dota::CMsgDOTAGuildCreateResponse_EError_IsValid(value));
  errors_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildCreateResponse.errors)
}
const ::google::protobuf::RepeatedField<int>&
CMsgDOTAGuildCreateResponse::errors() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildCreateResponse.errors)
  return errors_;
}
::google::protobuf::RepeatedField<int>*
CMsgDOTAGuildCreateResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildCreateResponse.errors)
  return &errors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildSetAccountRoleRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildSetAccountRoleRequest::kTargetAccountIdFieldNumber;
const int CMsgDOTAGuildSetAccountRoleRequest::kTargetRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildSetAccountRoleRequest::CMsgDOTAGuildSetAccountRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
}
CMsgDOTAGuildSetAccountRoleRequest::CMsgDOTAGuildSetAccountRoleRequest(const CMsgDOTAGuildSetAccountRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&target_role_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_role_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
}

void CMsgDOTAGuildSetAccountRoleRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_role_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_role_));
}

CMsgDOTAGuildSetAccountRoleRequest::~CMsgDOTAGuildSetAccountRoleRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  SharedDtor();
}

void CMsgDOTAGuildSetAccountRoleRequest::SharedDtor() {
}

void CMsgDOTAGuildSetAccountRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildSetAccountRoleRequest& CMsgDOTAGuildSetAccountRoleRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildSetAccountRoleRequest* CMsgDOTAGuildSetAccountRoleRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildSetAccountRoleRequest* n = new CMsgDOTAGuildSetAccountRoleRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildSetAccountRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_role_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(target_role_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildSetAccountRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildSetAccountRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  // optional uint32 target_role = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildSetAccountRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  // optional uint32 target_role = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  return target;
}

size_t CMsgDOTAGuildSetAccountRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

    // optional uint32 target_role = 3;
    if (has_target_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_role());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSetAccountRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildSetAccountRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildSetAccountRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSetAccountRoleRequest::MergeFrom(const CMsgDOTAGuildSetAccountRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_role_ = from.target_role_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildSetAccountRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSetAccountRoleRequest::CopyFrom(const CMsgDOTAGuildSetAccountRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSetAccountRoleRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildSetAccountRoleRequest::Swap(CMsgDOTAGuildSetAccountRoleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildSetAccountRoleRequest::InternalSwap(CMsgDOTAGuildSetAccountRoleRequest* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(target_account_id_, other->target_account_id_);
  std::swap(target_role_, other->target_role_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildSetAccountRoleRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildSetAccountRoleRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildSetAccountRoleRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.guild_id)
}

// optional uint32 target_account_id = 2;
bool CMsgDOTAGuildSetAccountRoleRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.target_account_id)
  return target_account_id_;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.target_account_id)
}

// optional uint32 target_role = 3;
bool CMsgDOTAGuildSetAccountRoleRequest::has_target_role() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_has_target_role() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_has_target_role() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildSetAccountRoleRequest::clear_target_role() {
  target_role_ = 0u;
  clear_has_target_role();
}
::google::protobuf::uint32 CMsgDOTAGuildSetAccountRoleRequest::target_role() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.target_role)
  return target_role_;
}
void CMsgDOTAGuildSetAccountRoleRequest::set_target_role(::google::protobuf::uint32 value) {
  set_has_target_role();
  target_role_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSetAccountRoleRequest.target_role)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildSetAccountRoleResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildSetAccountRoleResponse::CMsgDOTAGuildSetAccountRoleResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
}
CMsgDOTAGuildSetAccountRoleResponse::CMsgDOTAGuildSetAccountRoleResponse(const CMsgDOTAGuildSetAccountRoleResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
}

void CMsgDOTAGuildSetAccountRoleResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAGuildSetAccountRoleResponse::~CMsgDOTAGuildSetAccountRoleResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  SharedDtor();
}

void CMsgDOTAGuildSetAccountRoleResponse::SharedDtor() {
}

void CMsgDOTAGuildSetAccountRoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildSetAccountRoleResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildSetAccountRoleResponse& CMsgDOTAGuildSetAccountRoleResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildSetAccountRoleResponse* CMsgDOTAGuildSetAccountRoleResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildSetAccountRoleResponse* n = new CMsgDOTAGuildSetAccountRoleResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildSetAccountRoleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildSetAccountRoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildSetAccountRoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildSetAccountRoleResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  return target;
}

size_t CMsgDOTAGuildSetAccountRoleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildSetAccountRoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildSetAccountRoleResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildSetAccountRoleResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildSetAccountRoleResponse::MergeFrom(const CMsgDOTAGuildSetAccountRoleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGuildSetAccountRoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildSetAccountRoleResponse::CopyFrom(const CMsgDOTAGuildSetAccountRoleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildSetAccountRoleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildSetAccountRoleResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildSetAccountRoleResponse::Swap(CMsgDOTAGuildSetAccountRoleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildSetAccountRoleResponse::InternalSwap(CMsgDOTAGuildSetAccountRoleResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildSetAccountRoleResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildSetAccountRoleResponse

// optional .proto.dota.CMsgDOTAGuildSetAccountRoleResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAGuildSetAccountRoleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildSetAccountRoleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildSetAccountRoleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildSetAccountRoleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult CMsgDOTAGuildSetAccountRoleResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildSetAccountRoleResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult >(result_);
}
void CMsgDOTAGuildSetAccountRoleResponse::set_result(::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAGuildSetAccountRoleResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildSetAccountRoleResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildInviteAccountRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildInviteAccountRequest::kTargetAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildInviteAccountRequest::CMsgDOTAGuildInviteAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildInviteAccountRequest)
}
CMsgDOTAGuildInviteAccountRequest::CMsgDOTAGuildInviteAccountRequest(const CMsgDOTAGuildInviteAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildInviteAccountRequest)
}

void CMsgDOTAGuildInviteAccountRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
}

CMsgDOTAGuildInviteAccountRequest::~CMsgDOTAGuildInviteAccountRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  SharedDtor();
}

void CMsgDOTAGuildInviteAccountRequest::SharedDtor() {
}

void CMsgDOTAGuildInviteAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildInviteAccountRequest& CMsgDOTAGuildInviteAccountRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildInviteAccountRequest* CMsgDOTAGuildInviteAccountRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildInviteAccountRequest* n = new CMsgDOTAGuildInviteAccountRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildInviteAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_account_id_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildInviteAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildInviteAccountRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  return target;
}

size_t CMsgDOTAGuildInviteAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildInviteAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildInviteAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildInviteAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildInviteAccountRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteAccountRequest::MergeFrom(const CMsgDOTAGuildInviteAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildInviteAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteAccountRequest::CopyFrom(const CMsgDOTAGuildInviteAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildInviteAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteAccountRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildInviteAccountRequest::Swap(CMsgDOTAGuildInviteAccountRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildInviteAccountRequest::InternalSwap(CMsgDOTAGuildInviteAccountRequest* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(target_account_id_, other->target_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildInviteAccountRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildInviteAccountRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildInviteAccountRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildInviteAccountRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildInviteAccountRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildInviteAccountRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildInviteAccountRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteAccountRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildInviteAccountRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteAccountRequest.guild_id)
}

// optional uint32 target_account_id = 2;
bool CMsgDOTAGuildInviteAccountRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildInviteAccountRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildInviteAccountRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildInviteAccountRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
::google::protobuf::uint32 CMsgDOTAGuildInviteAccountRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteAccountRequest.target_account_id)
  return target_account_id_;
}
void CMsgDOTAGuildInviteAccountRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteAccountRequest.target_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildInviteAccountResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildInviteAccountResponse::CMsgDOTAGuildInviteAccountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildInviteAccountResponse)
}
CMsgDOTAGuildInviteAccountResponse::CMsgDOTAGuildInviteAccountResponse(const CMsgDOTAGuildInviteAccountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildInviteAccountResponse)
}

void CMsgDOTAGuildInviteAccountResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAGuildInviteAccountResponse::~CMsgDOTAGuildInviteAccountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  SharedDtor();
}

void CMsgDOTAGuildInviteAccountResponse::SharedDtor() {
}

void CMsgDOTAGuildInviteAccountResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteAccountResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildInviteAccountResponse& CMsgDOTAGuildInviteAccountResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildInviteAccountResponse* CMsgDOTAGuildInviteAccountResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildInviteAccountResponse* n = new CMsgDOTAGuildInviteAccountResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildInviteAccountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildInviteAccountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteAccountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildInviteAccountResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteAccountResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  return target;
}

size_t CMsgDOTAGuildInviteAccountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteAccountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildInviteAccountResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildInviteAccountResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildInviteAccountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildInviteAccountResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteAccountResponse::MergeFrom(const CMsgDOTAGuildInviteAccountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGuildInviteAccountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteAccountResponse::CopyFrom(const CMsgDOTAGuildInviteAccountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildInviteAccountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteAccountResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildInviteAccountResponse::Swap(CMsgDOTAGuildInviteAccountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildInviteAccountResponse::InternalSwap(CMsgDOTAGuildInviteAccountResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildInviteAccountResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildInviteAccountResponse

// optional .proto.dota.CMsgDOTAGuildInviteAccountResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAGuildInviteAccountResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildInviteAccountResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildInviteAccountResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildInviteAccountResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult CMsgDOTAGuildInviteAccountResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteAccountResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult >(result_);
}
void CMsgDOTAGuildInviteAccountResponse::set_result(::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAGuildInviteAccountResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteAccountResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildCancelInviteRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildCancelInviteRequest::kTargetAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildCancelInviteRequest::CMsgDOTAGuildCancelInviteRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildCancelInviteRequest)
}
CMsgDOTAGuildCancelInviteRequest::CMsgDOTAGuildCancelInviteRequest(const CMsgDOTAGuildCancelInviteRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildCancelInviteRequest)
}

void CMsgDOTAGuildCancelInviteRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_account_id_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
}

CMsgDOTAGuildCancelInviteRequest::~CMsgDOTAGuildCancelInviteRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  SharedDtor();
}

void CMsgDOTAGuildCancelInviteRequest::SharedDtor() {
}

void CMsgDOTAGuildCancelInviteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildCancelInviteRequest& CMsgDOTAGuildCancelInviteRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildCancelInviteRequest* CMsgDOTAGuildCancelInviteRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildCancelInviteRequest* n = new CMsgDOTAGuildCancelInviteRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildCancelInviteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&target_account_id_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(target_account_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildCancelInviteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 target_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_target_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildCancelInviteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildCancelInviteRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildCancelInviteRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 target_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  return target;
}

size_t CMsgDOTAGuildCancelInviteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 target_account_id = 2;
    if (has_target_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCancelInviteRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildCancelInviteRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildCancelInviteRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildCancelInviteRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildCancelInviteRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCancelInviteRequest::MergeFrom(const CMsgDOTAGuildCancelInviteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_account_id_ = from.target_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildCancelInviteRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCancelInviteRequest::CopyFrom(const CMsgDOTAGuildCancelInviteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildCancelInviteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCancelInviteRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildCancelInviteRequest::Swap(CMsgDOTAGuildCancelInviteRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildCancelInviteRequest::InternalSwap(CMsgDOTAGuildCancelInviteRequest* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(target_account_id_, other->target_account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildCancelInviteRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildCancelInviteRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildCancelInviteRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildCancelInviteRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildCancelInviteRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildCancelInviteRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildCancelInviteRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCancelInviteRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildCancelInviteRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCancelInviteRequest.guild_id)
}

// optional uint32 target_account_id = 2;
bool CMsgDOTAGuildCancelInviteRequest::has_target_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildCancelInviteRequest::set_has_target_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildCancelInviteRequest::clear_has_target_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildCancelInviteRequest::clear_target_account_id() {
  target_account_id_ = 0u;
  clear_has_target_account_id();
}
::google::protobuf::uint32 CMsgDOTAGuildCancelInviteRequest::target_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCancelInviteRequest.target_account_id)
  return target_account_id_;
}
void CMsgDOTAGuildCancelInviteRequest::set_target_account_id(::google::protobuf::uint32 value) {
  set_has_target_account_id();
  target_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCancelInviteRequest.target_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildCancelInviteResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildCancelInviteResponse::CMsgDOTAGuildCancelInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildCancelInviteResponse)
}
CMsgDOTAGuildCancelInviteResponse::CMsgDOTAGuildCancelInviteResponse(const CMsgDOTAGuildCancelInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildCancelInviteResponse)
}

void CMsgDOTAGuildCancelInviteResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAGuildCancelInviteResponse::~CMsgDOTAGuildCancelInviteResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  SharedDtor();
}

void CMsgDOTAGuildCancelInviteResponse::SharedDtor() {
}

void CMsgDOTAGuildCancelInviteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildCancelInviteResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildCancelInviteResponse& CMsgDOTAGuildCancelInviteResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildCancelInviteResponse* CMsgDOTAGuildCancelInviteResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildCancelInviteResponse* n = new CMsgDOTAGuildCancelInviteResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildCancelInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildCancelInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildCancelInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildCancelInviteResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildCancelInviteResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  return target;
}

size_t CMsgDOTAGuildCancelInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildCancelInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildCancelInviteResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildCancelInviteResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildCancelInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildCancelInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildCancelInviteResponse::MergeFrom(const CMsgDOTAGuildCancelInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGuildCancelInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildCancelInviteResponse::CopyFrom(const CMsgDOTAGuildCancelInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildCancelInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildCancelInviteResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildCancelInviteResponse::Swap(CMsgDOTAGuildCancelInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildCancelInviteResponse::InternalSwap(CMsgDOTAGuildCancelInviteResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildCancelInviteResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildCancelInviteResponse

// optional .proto.dota.CMsgDOTAGuildCancelInviteResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAGuildCancelInviteResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildCancelInviteResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildCancelInviteResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildCancelInviteResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult CMsgDOTAGuildCancelInviteResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildCancelInviteResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult >(result_);
}
void CMsgDOTAGuildCancelInviteResponse::set_result(::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAGuildCancelInviteResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildCancelInviteResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildUpdateDetailsRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kLogoFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kBaseLogoFieldNumber;
const int CMsgDOTAGuildUpdateDetailsRequest::kBannerLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildUpdateDetailsRequest::CMsgDOTAGuildUpdateDetailsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
}
CMsgDOTAGuildUpdateDetailsRequest::CMsgDOTAGuildUpdateDetailsRequest(const CMsgDOTAGuildUpdateDetailsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
}

void CMsgDOTAGuildUpdateDetailsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logo_, 0, reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
}

CMsgDOTAGuildUpdateDetailsRequest::~CMsgDOTAGuildUpdateDetailsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  SharedDtor();
}

void CMsgDOTAGuildUpdateDetailsRequest::SharedDtor() {
}

void CMsgDOTAGuildUpdateDetailsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildUpdateDetailsRequest& CMsgDOTAGuildUpdateDetailsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildUpdateDetailsRequest* CMsgDOTAGuildUpdateDetailsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildUpdateDetailsRequest* n = new CMsgDOTAGuildUpdateDetailsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildUpdateDetailsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildUpdateDetailsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 banner_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateDetailsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint64 logo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logo(), output);
  }

  // optional uint64 base_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->base_logo(), output);
  }

  // optional uint64 banner_logo = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->banner_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateDetailsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint64 logo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logo(), target);
  }

  // optional uint64 base_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->base_logo(), target);
  }

  // optional uint64 banner_logo = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->banner_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  return target;
}

size_t CMsgDOTAGuildUpdateDetailsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint64 logo = 2;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint64 base_logo = 3;
    if (has_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->base_logo());
    }

    // optional uint64 banner_logo = 4;
    if (has_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->banner_logo());
    }

    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateDetailsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateDetailsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildUpdateDetailsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateDetailsRequest::MergeFrom(const CMsgDOTAGuildUpdateDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000002u) {
      base_logo_ = from.base_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      banner_logo_ = from.banner_logo_;
    }
    if (cached_has_bits & 0x00000008u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildUpdateDetailsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateDetailsRequest::CopyFrom(const CMsgDOTAGuildUpdateDetailsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateDetailsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildUpdateDetailsRequest::Swap(CMsgDOTAGuildUpdateDetailsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildUpdateDetailsRequest::InternalSwap(CMsgDOTAGuildUpdateDetailsRequest* other) {
  std::swap(logo_, other->logo_);
  std::swap(base_logo_, other->base_logo_);
  std::swap(banner_logo_, other->banner_logo_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateDetailsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildUpdateDetailsRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildUpdateDetailsRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildUpdateDetailsRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.guild_id)
}

// optional uint64 logo = 2;
bool CMsgDOTAGuildUpdateDetailsRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.logo)
  return logo_;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.logo)
}

// optional uint64 base_logo = 3;
bool CMsgDOTAGuildUpdateDetailsRequest::has_base_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_has_base_logo() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_has_base_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_base_logo() {
  base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_base_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.base_logo)
  return base_logo_;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_base_logo(::google::protobuf::uint64 value) {
  set_has_base_logo();
  base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.base_logo)
}

// optional uint64 banner_logo = 4;
bool CMsgDOTAGuildUpdateDetailsRequest::has_banner_logo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_has_banner_logo() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_has_banner_logo() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildUpdateDetailsRequest::clear_banner_logo() {
  banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_banner_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildUpdateDetailsRequest::banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.banner_logo)
  return banner_logo_;
}
void CMsgDOTAGuildUpdateDetailsRequest::set_banner_logo(::google::protobuf::uint64 value) {
  set_has_banner_logo();
  banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateDetailsRequest.banner_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildUpdateDetailsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildUpdateDetailsResponse::CMsgDOTAGuildUpdateDetailsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
}
CMsgDOTAGuildUpdateDetailsResponse::CMsgDOTAGuildUpdateDetailsResponse(const CMsgDOTAGuildUpdateDetailsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
}

void CMsgDOTAGuildUpdateDetailsResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAGuildUpdateDetailsResponse::~CMsgDOTAGuildUpdateDetailsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  SharedDtor();
}

void CMsgDOTAGuildUpdateDetailsResponse::SharedDtor() {
}

void CMsgDOTAGuildUpdateDetailsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateDetailsResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildUpdateDetailsResponse& CMsgDOTAGuildUpdateDetailsResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildUpdateDetailsResponse* CMsgDOTAGuildUpdateDetailsResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildUpdateDetailsResponse* n = new CMsgDOTAGuildUpdateDetailsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildUpdateDetailsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildUpdateDetailsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateDetailsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateDetailsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  return target;
}

size_t CMsgDOTAGuildUpdateDetailsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateDetailsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateDetailsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildUpdateDetailsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateDetailsResponse::MergeFrom(const CMsgDOTAGuildUpdateDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGuildUpdateDetailsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateDetailsResponse::CopyFrom(const CMsgDOTAGuildUpdateDetailsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildUpdateDetailsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateDetailsResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildUpdateDetailsResponse::Swap(CMsgDOTAGuildUpdateDetailsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildUpdateDetailsResponse::InternalSwap(CMsgDOTAGuildUpdateDetailsResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateDetailsResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildUpdateDetailsResponse

// optional .proto.dota.CMsgDOTAGuildUpdateDetailsResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAGuildUpdateDetailsResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildUpdateDetailsResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildUpdateDetailsResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildUpdateDetailsResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult CMsgDOTAGuildUpdateDetailsResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateDetailsResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult >(result_);
}
void CMsgDOTAGuildUpdateDetailsResponse::set_result(::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAGuildUpdateDetailsResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateDetailsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kPartyIdFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kGuildIdFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kMemberAccountIdsFieldNumber;
const int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CMsgDOTAGCToGCUpdateOpenGuildPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}
CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CMsgDOTAGCToGCUpdateOpenGuildPartyRequest(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_account_ids_(from.member_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&party_id_, &from.party_id_,
    reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&party_id_, 0, reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
}

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::~CMsgDOTAGCToGCUpdateOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* n = new CMsgDOTAGCToGCUpdateOpenGuildPartyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  member_account_ids_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&party_id_, 0, reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 member_account_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_member_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // repeated uint32 member_account_ids = 3;
  for (int i = 0, n = this->member_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->member_account_ids(i), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // repeated uint32 member_account_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->member_account_ids_, target);

  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  return target;
}

size_t CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 member_account_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->member_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->member_account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_account_ids_.MergeFrom(from.member_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::InternalSwap(CMsgDOTAGCToGCUpdateOpenGuildPartyRequest* other) {
  member_account_ids_.InternalSwap(&other->member_account_ids_);
  description_.Swap(&other->description_);
  std::swap(party_id_, other->party_id_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGCToGCUpdateOpenGuildPartyRequest

// optional uint64 party_id = 1;
bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.party_id)
  return party_id_;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.party_id)
}

// optional uint32 guild_id = 2;
bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.guild_id)
}

// repeated uint32 member_account_ids = 3;
int CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids_size() const {
  return member_account_ids_.size();
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_member_account_ids() {
  member_account_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return member_account_ids_.Get(index);
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_member_account_ids(int index, ::google::protobuf::uint32 value) {
  member_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::add_member_account_ids(::google::protobuf::uint32 value) {
  member_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::member_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return member_account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::mutable_member_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.member_account_ids)
  return &member_account_ids_;
}

// optional string description = 4;
bool CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  return description_.GetNoArena();
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
#if LANG_CXX11
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
#endif
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}
::std::string* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyRequest.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::kMaintainAssociationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CMsgDOTAGCToGCUpdateOpenGuildPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}
CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CMsgDOTAGCToGCUpdateOpenGuildPartyResponse(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  maintain_association_ = from.maintain_association_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
  maintain_association_ = false;
}

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::~CMsgDOTAGCToGCUpdateOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SharedDtor() {
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* n = new CMsgDOTAGCToGCUpdateOpenGuildPartyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  maintain_association_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool maintain_association = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_maintain_association();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maintain_association_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool maintain_association = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->maintain_association(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool maintain_association = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->maintain_association(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  return target;
}

size_t CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool maintain_association = 1;
  if (has_maintain_association()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::MergeFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_maintain_association()) {
    set_maintain_association(from.maintain_association());
  }
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::CopyFrom(const CMsgDOTAGCToGCUpdateOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::Swap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::InternalSwap(CMsgDOTAGCToGCUpdateOpenGuildPartyResponse* other) {
  std::swap(maintain_association_, other->maintain_association_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGCToGCUpdateOpenGuildPartyResponse

// optional bool maintain_association = 1;
bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::has_maintain_association() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::set_has_maintain_association() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::clear_has_maintain_association() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::clear_maintain_association() {
  maintain_association_ = false;
  clear_has_maintain_association();
}
bool CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::maintain_association() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse.maintain_association)
  return maintain_association_;
}
void CMsgDOTAGCToGCUpdateOpenGuildPartyResponse::set_maintain_association(bool value) {
  set_has_maintain_association();
  maintain_association_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCUpdateOpenGuildPartyResponse.maintain_association)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::kPartyIdFieldNumber;
const int CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CMsgDOTAGCToGCDestroyOpenGuildPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}
CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CMsgDOTAGCToGCDestroyOpenGuildPartyRequest(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&party_id_, &from.party_id_,
    reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&party_id_, 0, reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
}

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::~CMsgDOTAGCToGCDestroyOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SharedDtor() {
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* n = new CMsgDOTAGCToGCDestroyOpenGuildPartyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&party_id_, 0, reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&party_id_) + sizeof(guild_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  return target;
}

size_t CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::InternalSwap(CMsgDOTAGCToGCDestroyOpenGuildPartyRequest* other) {
  std::swap(party_id_, other->party_id_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGCToGCDestroyOpenGuildPartyRequest

// optional uint64 party_id = 1;
bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.party_id)
  return party_id_;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.party_id)
}

// optional uint32 guild_id = 2;
bool CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyRequest.guild_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CMsgDOTAGCToGCDestroyOpenGuildPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}
CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CMsgDOTAGCToGCDestroyOpenGuildPartyResponse(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::~CMsgDOTAGCToGCDestroyOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SharedDtor() {
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* n = new CMsgDOTAGCToGCDestroyOpenGuildPartyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  return target;
}

size_t CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::MergeFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::CopyFrom(const CMsgDOTAGCToGCDestroyOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGCToGCDestroyOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::Swap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::InternalSwap(CMsgDOTAGCToGCDestroyOpenGuildPartyResponse* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGCToGCDestroyOpenGuildPartyResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGCToGCDestroyOpenGuildPartyResponse

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPartySetOpenGuildRequest::kGuildIdFieldNumber;
const int CMsgDOTAPartySetOpenGuildRequest::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPartySetOpenGuildRequest::CMsgDOTAPartySetOpenGuildRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
}
CMsgDOTAPartySetOpenGuildRequest::CMsgDOTAPartySetOpenGuildRequest(const CMsgDOTAPartySetOpenGuildRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
}

void CMsgDOTAPartySetOpenGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = 0u;
}

CMsgDOTAPartySetOpenGuildRequest::~CMsgDOTAPartySetOpenGuildRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  SharedDtor();
}

void CMsgDOTAPartySetOpenGuildRequest::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAPartySetOpenGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPartySetOpenGuildRequest& CMsgDOTAPartySetOpenGuildRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPartySetOpenGuildRequest* CMsgDOTAPartySetOpenGuildRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPartySetOpenGuildRequest* n = new CMsgDOTAPartySetOpenGuildRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPartySetOpenGuildRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  guild_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPartySetOpenGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAPartySetOpenGuildRequest.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  return false;
#undef DO_
}

void CMsgDOTAPartySetOpenGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPartySetOpenGuildRequest.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
}

::google::protobuf::uint8* CMsgDOTAPartySetOpenGuildRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAPartySetOpenGuildRequest.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  return target;
}

size_t CMsgDOTAPartySetOpenGuildRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartySetOpenGuildRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPartySetOpenGuildRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPartySetOpenGuildRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAPartySetOpenGuildRequest::MergeFrom(const CMsgDOTAPartySetOpenGuildRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAPartySetOpenGuildRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartySetOpenGuildRequest::CopyFrom(const CMsgDOTAPartySetOpenGuildRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPartySetOpenGuildRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartySetOpenGuildRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAPartySetOpenGuildRequest::Swap(CMsgDOTAPartySetOpenGuildRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPartySetOpenGuildRequest::InternalSwap(CMsgDOTAPartySetOpenGuildRequest* other) {
  description_.Swap(&other->description_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPartySetOpenGuildRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPartySetOpenGuildRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAPartySetOpenGuildRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAPartySetOpenGuildRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAPartySetOpenGuildRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAPartySetOpenGuildRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAPartySetOpenGuildRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPartySetOpenGuildRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAPartySetOpenGuildRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPartySetOpenGuildRequest.guild_id)
}

// optional string description = 2;
bool CMsgDOTAPartySetOpenGuildRequest::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPartySetOpenGuildRequest::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPartySetOpenGuildRequest::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPartySetOpenGuildRequest::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CMsgDOTAPartySetOpenGuildRequest::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
  return description_.GetNoArena();
}
void CMsgDOTAPartySetOpenGuildRequest::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
}
#if LANG_CXX11
void CMsgDOTAPartySetOpenGuildRequest::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
}
#endif
void CMsgDOTAPartySetOpenGuildRequest::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
}
void CMsgDOTAPartySetOpenGuildRequest::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
}
::std::string* CMsgDOTAPartySetOpenGuildRequest::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAPartySetOpenGuildRequest::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAPartySetOpenGuildRequest::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAPartySetOpenGuildRequest.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPartySetOpenGuildResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPartySetOpenGuildResponse::CMsgDOTAPartySetOpenGuildResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
}
CMsgDOTAPartySetOpenGuildResponse::CMsgDOTAPartySetOpenGuildResponse(const CMsgDOTAPartySetOpenGuildResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
}

void CMsgDOTAPartySetOpenGuildResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAPartySetOpenGuildResponse::~CMsgDOTAPartySetOpenGuildResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  SharedDtor();
}

void CMsgDOTAPartySetOpenGuildResponse::SharedDtor() {
}

void CMsgDOTAPartySetOpenGuildResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartySetOpenGuildResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPartySetOpenGuildResponse& CMsgDOTAPartySetOpenGuildResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPartySetOpenGuildResponse* CMsgDOTAPartySetOpenGuildResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPartySetOpenGuildResponse* n = new CMsgDOTAPartySetOpenGuildResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPartySetOpenGuildResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPartySetOpenGuildResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  return false;
#undef DO_
}

void CMsgDOTAPartySetOpenGuildResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
}

::google::protobuf::uint8* CMsgDOTAPartySetOpenGuildResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  return target;
}

size_t CMsgDOTAPartySetOpenGuildResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartySetOpenGuildResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPartySetOpenGuildResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPartySetOpenGuildResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAPartySetOpenGuildResponse::MergeFrom(const CMsgDOTAPartySetOpenGuildResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAPartySetOpenGuildResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartySetOpenGuildResponse::CopyFrom(const CMsgDOTAPartySetOpenGuildResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPartySetOpenGuildResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartySetOpenGuildResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAPartySetOpenGuildResponse::Swap(CMsgDOTAPartySetOpenGuildResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPartySetOpenGuildResponse::InternalSwap(CMsgDOTAPartySetOpenGuildResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPartySetOpenGuildResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPartySetOpenGuildResponse

// optional .proto.dota.CMsgDOTAPartySetOpenGuildResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAPartySetOpenGuildResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPartySetOpenGuildResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPartySetOpenGuildResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPartySetOpenGuildResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult CMsgDOTAPartySetOpenGuildResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPartySetOpenGuildResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult >(result_);
}
void CMsgDOTAPartySetOpenGuildResponse::set_result(::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAPartySetOpenGuildResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPartySetOpenGuildResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinOpenGuildPartyRequest::kPartyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinOpenGuildPartyRequest::CMsgDOTAJoinOpenGuildPartyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
}
CMsgDOTAJoinOpenGuildPartyRequest::CMsgDOTAJoinOpenGuildPartyRequest(const CMsgDOTAJoinOpenGuildPartyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  party_id_ = from.party_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
}

void CMsgDOTAJoinOpenGuildPartyRequest::SharedCtor() {
  _cached_size_ = 0;
  party_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAJoinOpenGuildPartyRequest::~CMsgDOTAJoinOpenGuildPartyRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  SharedDtor();
}

void CMsgDOTAJoinOpenGuildPartyRequest::SharedDtor() {
}

void CMsgDOTAJoinOpenGuildPartyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAJoinOpenGuildPartyRequest& CMsgDOTAJoinOpenGuildPartyRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAJoinOpenGuildPartyRequest* CMsgDOTAJoinOpenGuildPartyRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAJoinOpenGuildPartyRequest* n = new CMsgDOTAJoinOpenGuildPartyRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAJoinOpenGuildPartyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  party_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAJoinOpenGuildPartyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  return false;
#undef DO_
}

void CMsgDOTAJoinOpenGuildPartyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
}

::google::protobuf::uint8* CMsgDOTAJoinOpenGuildPartyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  return target;
}

size_t CMsgDOTAJoinOpenGuildPartyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint64 party_id = 1;
  if (has_party_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->party_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinOpenGuildPartyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinOpenGuildPartyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAJoinOpenGuildPartyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinOpenGuildPartyRequest::MergeFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_party_id()) {
    set_party_id(from.party_id());
  }
}

void CMsgDOTAJoinOpenGuildPartyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinOpenGuildPartyRequest::CopyFrom(const CMsgDOTAJoinOpenGuildPartyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinOpenGuildPartyRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinOpenGuildPartyRequest::Swap(CMsgDOTAJoinOpenGuildPartyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinOpenGuildPartyRequest::InternalSwap(CMsgDOTAJoinOpenGuildPartyRequest* other) {
  std::swap(party_id_, other->party_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAJoinOpenGuildPartyRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAJoinOpenGuildPartyRequest

// optional uint64 party_id = 1;
bool CMsgDOTAJoinOpenGuildPartyRequest::has_party_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAJoinOpenGuildPartyRequest::set_has_party_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAJoinOpenGuildPartyRequest::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAJoinOpenGuildPartyRequest::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgDOTAJoinOpenGuildPartyRequest::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest.party_id)
  return party_id_;
}
void CMsgDOTAJoinOpenGuildPartyRequest::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinOpenGuildPartyRequest.party_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinOpenGuildPartyResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinOpenGuildPartyResponse::CMsgDOTAJoinOpenGuildPartyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
}
CMsgDOTAJoinOpenGuildPartyResponse::CMsgDOTAJoinOpenGuildPartyResponse(const CMsgDOTAJoinOpenGuildPartyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
}

void CMsgDOTAJoinOpenGuildPartyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAJoinOpenGuildPartyResponse::~CMsgDOTAJoinOpenGuildPartyResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  SharedDtor();
}

void CMsgDOTAJoinOpenGuildPartyResponse::SharedDtor() {
}

void CMsgDOTAJoinOpenGuildPartyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAJoinOpenGuildPartyResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAJoinOpenGuildPartyResponse& CMsgDOTAJoinOpenGuildPartyResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAJoinOpenGuildPartyResponse* CMsgDOTAJoinOpenGuildPartyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAJoinOpenGuildPartyResponse* n = new CMsgDOTAJoinOpenGuildPartyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAJoinOpenGuildPartyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAJoinOpenGuildPartyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  return false;
#undef DO_
}

void CMsgDOTAJoinOpenGuildPartyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
}

::google::protobuf::uint8* CMsgDOTAJoinOpenGuildPartyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  return target;
}

size_t CMsgDOTAJoinOpenGuildPartyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAJoinOpenGuildPartyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinOpenGuildPartyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAJoinOpenGuildPartyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinOpenGuildPartyResponse::MergeFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAJoinOpenGuildPartyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinOpenGuildPartyResponse::CopyFrom(const CMsgDOTAJoinOpenGuildPartyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinOpenGuildPartyResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinOpenGuildPartyResponse::Swap(CMsgDOTAJoinOpenGuildPartyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinOpenGuildPartyResponse::InternalSwap(CMsgDOTAJoinOpenGuildPartyResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAJoinOpenGuildPartyResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAJoinOpenGuildPartyResponse

// optional .proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.EResult result = 1 [default = SUCCESS];
bool CMsgDOTAJoinOpenGuildPartyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAJoinOpenGuildPartyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAJoinOpenGuildPartyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAJoinOpenGuildPartyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult CMsgDOTAJoinOpenGuildPartyResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult >(result_);
}
void CMsgDOTAJoinOpenGuildPartyResponse::set_result(::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAJoinOpenGuildPartyResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAJoinOpenGuildPartyResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kPartyIdFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kMemberAccountIdsFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kTimeCreatedFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh_OpenParty::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildOpenPartyRefresh_OpenParty::CMsgDOTAGuildOpenPartyRefresh_OpenParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}
CMsgDOTAGuildOpenPartyRefresh_OpenParty::CMsgDOTAGuildOpenPartyRefresh_OpenParty(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      member_account_ids_(from.member_account_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  ::memcpy(&party_id_, &from.party_id_,
    reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(time_created_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&party_id_, 0, reinterpret_cast<char*>(&time_created_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(time_created_));
}

CMsgDOTAGuildOpenPartyRefresh_OpenParty::~CMsgDOTAGuildOpenPartyRefresh_OpenParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  SharedDtor();
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh_OpenParty::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildOpenPartyRefresh_OpenParty& CMsgDOTAGuildOpenPartyRefresh_OpenParty::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh_OpenParty::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildOpenPartyRefresh_OpenParty* n = new CMsgDOTAGuildOpenPartyRefresh_OpenParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  member_account_ids_.Clear();
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&party_id_, 0, reinterpret_cast<char*>(&time_created_) -
      reinterpret_cast<char*>(&party_id_) + sizeof(time_created_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 member_account_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_member_account_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_member_account_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_created = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_created();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return false;
#undef DO_
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // repeated uint32 member_account_ids = 2;
  for (int i = 0, n = this->member_account_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->member_account_ids(i), output);
  }

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_created(), output);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
}

::google::protobuf::uint8* CMsgDOTAGuildOpenPartyRefresh_OpenParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // repeated uint32 member_account_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->member_account_ids_, target);

  // optional uint32 time_created = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_created(), target);
  }

  // optional string description = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  return target;
}

size_t CMsgDOTAGuildOpenPartyRefresh_OpenParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 member_account_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->member_account_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->member_account_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint64 party_id = 1;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional uint32 time_created = 3;
    if (has_time_created()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_created());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildOpenPartyRefresh_OpenParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildOpenPartyRefresh_OpenParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::MergeFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_account_ids_.MergeFrom(from.member_account_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_created_ = from.time_created_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::CopyFrom(const CMsgDOTAGuildOpenPartyRefresh_OpenParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildOpenPartyRefresh_OpenParty::Swap(CMsgDOTAGuildOpenPartyRefresh_OpenParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::InternalSwap(CMsgDOTAGuildOpenPartyRefresh_OpenParty* other) {
  member_account_ids_.InternalSwap(&other->member_account_ids_);
  description_.Swap(&other->description_);
  std::swap(party_id_, other->party_id_);
  std::swap(time_created_, other->time_created_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildOpenPartyRefresh_OpenParty::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildOpenPartyRefresh_OpenParty

// optional uint64 party_id = 1;
bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CMsgDOTAGuildOpenPartyRefresh_OpenParty::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.party_id)
  return party_id_;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.party_id)
}

// repeated uint32 member_account_ids = 2;
int CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids_size() const {
  return member_account_ids_.size();
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_member_account_ids() {
  member_account_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return member_account_ids_.Get(index);
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_member_account_ids(int index, ::google::protobuf::uint32 value) {
  member_account_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::add_member_account_ids(::google::protobuf::uint32 value) {
  member_account_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAGuildOpenPartyRefresh_OpenParty::member_account_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return member_account_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAGuildOpenPartyRefresh_OpenParty::mutable_member_account_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.member_account_ids)
  return &member_account_ids_;
}

// optional uint32 time_created = 3;
bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_time_created() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_time_created() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_time_created() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_time_created() {
  time_created_ = 0u;
  clear_has_time_created();
}
::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh_OpenParty::time_created() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.time_created)
  return time_created_;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_time_created(::google::protobuf::uint32 value) {
  set_has_time_created();
  time_created_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.time_created)
}

// optional string description = 4;
bool CMsgDOTAGuildOpenPartyRefresh_OpenParty::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CMsgDOTAGuildOpenPartyRefresh_OpenParty::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  return description_.GetNoArena();
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
#if LANG_CXX11
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
#endif
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}
::std::string* CMsgDOTAGuildOpenPartyRefresh_OpenParty::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildOpenPartyRefresh_OpenParty::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildOpenPartyRefresh_OpenParty::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildOpenPartyRefresh::kGuildIdFieldNumber;
const int CMsgDOTAGuildOpenPartyRefresh::kOpenPartiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildOpenPartyRefresh::CMsgDOTAGuildOpenPartyRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
}
CMsgDOTAGuildOpenPartyRefresh::CMsgDOTAGuildOpenPartyRefresh(const CMsgDOTAGuildOpenPartyRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      open_parties_(from.open_parties_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
}

void CMsgDOTAGuildOpenPartyRefresh::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
}

CMsgDOTAGuildOpenPartyRefresh::~CMsgDOTAGuildOpenPartyRefresh() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  SharedDtor();
}

void CMsgDOTAGuildOpenPartyRefresh::SharedDtor() {
}

void CMsgDOTAGuildOpenPartyRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildOpenPartyRefresh::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildOpenPartyRefresh& CMsgDOTAGuildOpenPartyRefresh::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildOpenPartyRefresh* CMsgDOTAGuildOpenPartyRefresh::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildOpenPartyRefresh* n = new CMsgDOTAGuildOpenPartyRefresh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildOpenPartyRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  open_parties_.Clear();
  guild_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildOpenPartyRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_open_parties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  return false;
#undef DO_
}

void CMsgDOTAGuildOpenPartyRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  for (unsigned int i = 0, n = this->open_parties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->open_parties(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
}

::google::protobuf::uint8* CMsgDOTAGuildOpenPartyRefresh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  for (unsigned int i = 0, n = this->open_parties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->open_parties(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  return target;
}

size_t CMsgDOTAGuildOpenPartyRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
  {
    unsigned int count = this->open_parties_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_parties(i));
    }
  }

  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guild_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildOpenPartyRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildOpenPartyRefresh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildOpenPartyRefresh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildOpenPartyRefresh::MergeFrom(const CMsgDOTAGuildOpenPartyRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  open_parties_.MergeFrom(from.open_parties_);
  if (from.has_guild_id()) {
    set_guild_id(from.guild_id());
  }
}

void CMsgDOTAGuildOpenPartyRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildOpenPartyRefresh::CopyFrom(const CMsgDOTAGuildOpenPartyRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildOpenPartyRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildOpenPartyRefresh::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildOpenPartyRefresh::Swap(CMsgDOTAGuildOpenPartyRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildOpenPartyRefresh::InternalSwap(CMsgDOTAGuildOpenPartyRefresh* other) {
  open_parties_.InternalSwap(&other->open_parties_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildOpenPartyRefresh::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildOpenPartyRefresh

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildOpenPartyRefresh::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildOpenPartyRefresh::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildOpenPartyRefresh::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildOpenPartyRefresh::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildOpenPartyRefresh::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildOpenPartyRefresh::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildOpenPartyRefresh.guild_id)
}

// repeated .proto.dota.CMsgDOTAGuildOpenPartyRefresh.OpenParty open_parties = 2;
int CMsgDOTAGuildOpenPartyRefresh::open_parties_size() const {
  return open_parties_.size();
}
void CMsgDOTAGuildOpenPartyRefresh::clear_open_parties() {
  open_parties_.Clear();
}
const ::proto::dota::CMsgDOTAGuildOpenPartyRefresh_OpenParty& CMsgDOTAGuildOpenPartyRefresh::open_parties(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Get(index);
}
::proto::dota::CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh::mutable_open_parties(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Mutable(index);
}
::proto::dota::CMsgDOTAGuildOpenPartyRefresh_OpenParty* CMsgDOTAGuildOpenPartyRefresh::add_open_parties() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildOpenPartyRefresh_OpenParty >*
CMsgDOTAGuildOpenPartyRefresh::mutable_open_parties() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return &open_parties_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAGuildOpenPartyRefresh_OpenParty >&
CMsgDOTAGuildOpenPartyRefresh::open_parties() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAGuildOpenPartyRefresh.open_parties)
  return open_parties_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestGuildData::CMsgDOTARequestGuildData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestGuildData)
}
CMsgDOTARequestGuildData::CMsgDOTARequestGuildData(const CMsgDOTARequestGuildData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestGuildData)
}

void CMsgDOTARequestGuildData::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTARequestGuildData::~CMsgDOTARequestGuildData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestGuildData)
  SharedDtor();
}

void CMsgDOTARequestGuildData::SharedDtor() {
}

void CMsgDOTARequestGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTARequestGuildData::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTARequestGuildData& CMsgDOTARequestGuildData::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTARequestGuildData* CMsgDOTARequestGuildData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTARequestGuildData* n = new CMsgDOTARequestGuildData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTARequestGuildData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestGuildData)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTARequestGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestGuildData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestGuildData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestGuildData)
  return false;
#undef DO_
}

void CMsgDOTARequestGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestGuildData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestGuildData)
}

::google::protobuf::uint8* CMsgDOTARequestGuildData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestGuildData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestGuildData)
  return target;
}

size_t CMsgDOTARequestGuildData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestGuildData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTARequestGuildData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestGuildData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestGuildData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTARequestGuildData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestGuildData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestGuildData)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestGuildData::MergeFrom(const CMsgDOTARequestGuildData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestGuildData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTARequestGuildData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestGuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestGuildData::CopyFrom(const CMsgDOTARequestGuildData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestGuildData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestGuildData::IsInitialized() const {
  return true;
}

void CMsgDOTARequestGuildData::Swap(CMsgDOTARequestGuildData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestGuildData::InternalSwap(CMsgDOTARequestGuildData* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTARequestGuildData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTARequestGuildData

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildInviteData::kInvitedToGuildFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildIdFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildNameFieldNumber;
const int CMsgDOTAGuildInviteData::kGuildTagFieldNumber;
const int CMsgDOTAGuildInviteData::kLogoFieldNumber;
const int CMsgDOTAGuildInviteData::kInviterFieldNumber;
const int CMsgDOTAGuildInviteData::kInviterNameFieldNumber;
const int CMsgDOTAGuildInviteData::kMemberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildInviteData::CMsgDOTAGuildInviteData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildInviteData)
}
CMsgDOTAGuildInviteData::CMsgDOTAGuildInviteData(const CMsgDOTAGuildInviteData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_tag()) {
    guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
  }
  inviter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_inviter_name()) {
    inviter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
  }
  ::memcpy(&invited_to_guild_, &from.invited_to_guild_,
    reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&invited_to_guild_) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildInviteData)
}

void CMsgDOTAGuildInviteData::SharedCtor() {
  _cached_size_ = 0;
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&invited_to_guild_, 0, reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&invited_to_guild_) + sizeof(member_count_));
}

CMsgDOTAGuildInviteData::~CMsgDOTAGuildInviteData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildInviteData)
  SharedDtor();
}

void CMsgDOTAGuildInviteData::SharedDtor() {
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inviter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGuildInviteData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildInviteData::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildInviteData& CMsgDOTAGuildInviteData::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildInviteData* CMsgDOTAGuildInviteData::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildInviteData* n = new CMsgDOTAGuildInviteData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildInviteData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildInviteData)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_guild_name()) {
      GOOGLE_DCHECK(!guild_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guild_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_guild_tag()) {
      GOOGLE_DCHECK(!guild_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guild_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_inviter_name()) {
      GOOGLE_DCHECK(!inviter_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*inviter_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&invited_to_guild_, 0, reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&invited_to_guild_) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildInviteData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildInviteData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool invited_to_guild = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_invited_to_guild();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invited_to_guild_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildInviteData.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildInviteData.guild_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inviter = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_inviter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string inviter_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inviter_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inviter_name().data(), this->inviter_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildInviteData.inviter_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildInviteData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildInviteData)
  return false;
#undef DO_
}

void CMsgDOTAGuildInviteData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildInviteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invited_to_guild = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->invited_to_guild(), output);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  // optional string guild_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guild_name(), output);
  }

  // optional string guild_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guild_tag(), output);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->logo(), output);
  }

  // optional uint32 inviter = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inviter(), output);
  }

  // optional string inviter_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.inviter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->inviter_name(), output);
  }

  // optional uint32 member_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->member_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildInviteData)
}

::google::protobuf::uint8* CMsgDOTAGuildInviteData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildInviteData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool invited_to_guild = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->invited_to_guild(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  // optional string guild_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  // optional string guild_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guild_tag(), target);
  }

  // optional uint64 logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->logo(), target);
  }

  // optional uint32 inviter = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inviter(), target);
  }

  // optional string inviter_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inviter_name().data(), this->inviter_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildInviteData.inviter_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->inviter_name(), target);
  }

  // optional uint32 member_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->member_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildInviteData)
  return target;
}

size_t CMsgDOTAGuildInviteData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildInviteData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string guild_tag = 4;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional string inviter_name = 7;
    if (has_inviter_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inviter_name());
    }

    // optional bool invited_to_guild = 1;
    if (has_invited_to_guild()) {
      total_size += 1 + 1;
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 logo = 5;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 inviter = 6;
    if (has_inviter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviter());
    }

    // optional uint32 member_count = 8;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildInviteData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildInviteData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildInviteData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildInviteData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildInviteData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildInviteData)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildInviteData::MergeFrom(const CMsgDOTAGuildInviteData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildInviteData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_guild_tag();
      guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_inviter_name();
      inviter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.inviter_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      invited_to_guild_ = from.invited_to_guild_;
    }
    if (cached_has_bits & 0x00000010u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      inviter_ = from.inviter_;
    }
    if (cached_has_bits & 0x00000080u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildInviteData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildInviteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildInviteData::CopyFrom(const CMsgDOTAGuildInviteData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildInviteData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildInviteData::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildInviteData::Swap(CMsgDOTAGuildInviteData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildInviteData::InternalSwap(CMsgDOTAGuildInviteData* other) {
  guild_name_.Swap(&other->guild_name_);
  guild_tag_.Swap(&other->guild_tag_);
  inviter_name_.Swap(&other->inviter_name_);
  std::swap(invited_to_guild_, other->invited_to_guild_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(logo_, other->logo_);
  std::swap(inviter_, other->inviter_);
  std::swap(member_count_, other->member_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildInviteData::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildInviteData

// optional bool invited_to_guild = 1;
bool CMsgDOTAGuildInviteData::has_invited_to_guild() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_invited_to_guild() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAGuildInviteData::clear_has_invited_to_guild() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAGuildInviteData::clear_invited_to_guild() {
  invited_to_guild_ = false;
  clear_has_invited_to_guild();
}
bool CMsgDOTAGuildInviteData::invited_to_guild() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.invited_to_guild)
  return invited_to_guild_;
}
void CMsgDOTAGuildInviteData::set_invited_to_guild(bool value) {
  set_has_invited_to_guild();
  invited_to_guild_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.invited_to_guild)
}

// optional uint32 guild_id = 2;
bool CMsgDOTAGuildInviteData::has_guild_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_guild_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAGuildInviteData::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAGuildInviteData::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildInviteData::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildInviteData::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.guild_id)
}

// optional string guild_name = 3;
bool CMsgDOTAGuildInviteData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildInviteData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildInviteData::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
const ::std::string& CMsgDOTAGuildInviteData::guild_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.guild_name)
  return guild_name_.GetNoArena();
}
void CMsgDOTAGuildInviteData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.guild_name)
}
#if LANG_CXX11
void CMsgDOTAGuildInviteData::set_guild_name(::std::string&& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildInviteData.guild_name)
}
#endif
void CMsgDOTAGuildInviteData::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildInviteData.guild_name)
}
void CMsgDOTAGuildInviteData::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildInviteData.guild_name)
}
::std::string* CMsgDOTAGuildInviteData::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildInviteData.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildInviteData::release_guild_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildInviteData.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildInviteData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildInviteData.guild_name)
}

// optional string guild_tag = 4;
bool CMsgDOTAGuildInviteData::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildInviteData::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildInviteData::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_tag();
}
const ::std::string& CMsgDOTAGuildInviteData::guild_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
  return guild_tag_.GetNoArena();
}
void CMsgDOTAGuildInviteData::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
}
#if LANG_CXX11
void CMsgDOTAGuildInviteData::set_guild_tag(::std::string&& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
}
#endif
void CMsgDOTAGuildInviteData::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
}
void CMsgDOTAGuildInviteData::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
}
::std::string* CMsgDOTAGuildInviteData::mutable_guild_tag() {
  set_has_guild_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildInviteData::release_guild_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
  clear_has_guild_tag();
  return guild_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildInviteData::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != NULL) {
    set_has_guild_tag();
  } else {
    clear_has_guild_tag();
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildInviteData.guild_tag)
}

// optional uint64 logo = 5;
bool CMsgDOTAGuildInviteData::has_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAGuildInviteData::clear_has_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAGuildInviteData::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildInviteData::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.logo)
  return logo_;
}
void CMsgDOTAGuildInviteData::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.logo)
}

// optional uint32 inviter = 6;
bool CMsgDOTAGuildInviteData::has_inviter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_inviter() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAGuildInviteData::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAGuildInviteData::clear_inviter() {
  inviter_ = 0u;
  clear_has_inviter();
}
::google::protobuf::uint32 CMsgDOTAGuildInviteData::inviter() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.inviter)
  return inviter_;
}
void CMsgDOTAGuildInviteData::set_inviter(::google::protobuf::uint32 value) {
  set_has_inviter();
  inviter_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.inviter)
}

// optional string inviter_name = 7;
bool CMsgDOTAGuildInviteData::has_inviter_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_inviter_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAGuildInviteData::clear_has_inviter_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAGuildInviteData::clear_inviter_name() {
  inviter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inviter_name();
}
const ::std::string& CMsgDOTAGuildInviteData::inviter_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
  return inviter_name_.GetNoArena();
}
void CMsgDOTAGuildInviteData::set_inviter_name(const ::std::string& value) {
  set_has_inviter_name();
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
}
#if LANG_CXX11
void CMsgDOTAGuildInviteData::set_inviter_name(::std::string&& value) {
  set_has_inviter_name();
  inviter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
}
#endif
void CMsgDOTAGuildInviteData::set_inviter_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inviter_name();
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
}
void CMsgDOTAGuildInviteData::set_inviter_name(const char* value, size_t size) {
  set_has_inviter_name();
  inviter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
}
::std::string* CMsgDOTAGuildInviteData::mutable_inviter_name() {
  set_has_inviter_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
  return inviter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildInviteData::release_inviter_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
  clear_has_inviter_name();
  return inviter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildInviteData::set_allocated_inviter_name(::std::string* inviter_name) {
  if (inviter_name != NULL) {
    set_has_inviter_name();
  } else {
    clear_has_inviter_name();
  }
  inviter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inviter_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildInviteData.inviter_name)
}

// optional uint32 member_count = 8;
bool CMsgDOTAGuildInviteData::has_member_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAGuildInviteData::set_has_member_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAGuildInviteData::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAGuildInviteData::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
::google::protobuf::uint32 CMsgDOTAGuildInviteData::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildInviteData.member_count)
  return member_count_;
}
void CMsgDOTAGuildInviteData::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildInviteData.member_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildUpdateMessage::kMessageFieldNumber;
const int CMsgDOTAGuildUpdateMessage::kGuildIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildUpdateMessage::CMsgDOTAGuildUpdateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildUpdateMessage)
}
CMsgDOTAGuildUpdateMessage::CMsgDOTAGuildUpdateMessage(const CMsgDOTAGuildUpdateMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  guild_id_ = from.guild_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildUpdateMessage)
}

void CMsgDOTAGuildUpdateMessage::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_id_ = 0u;
}

CMsgDOTAGuildUpdateMessage::~CMsgDOTAGuildUpdateMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildUpdateMessage)
  SharedDtor();
}

void CMsgDOTAGuildUpdateMessage::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAGuildUpdateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildUpdateMessage::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildUpdateMessage& CMsgDOTAGuildUpdateMessage::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildUpdateMessage* CMsgDOTAGuildUpdateMessage::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildUpdateMessage* n = new CMsgDOTAGuildUpdateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildUpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  guild_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildUpdateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAGuildUpdateMessage.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildUpdateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildUpdateMessage)
  return false;
#undef DO_
}

void CMsgDOTAGuildUpdateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildUpdateMessage.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guild_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildUpdateMessage)
}

::google::protobuf::uint8* CMsgDOTAGuildUpdateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAGuildUpdateMessage.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  // optional uint32 guild_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guild_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildUpdateMessage)
  return target;
}

size_t CMsgDOTAGuildUpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 guild_id = 2;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildUpdateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildUpdateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildUpdateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildUpdateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildUpdateMessage)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildUpdateMessage::MergeFrom(const CMsgDOTAGuildUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildUpdateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildUpdateMessage::CopyFrom(const CMsgDOTAGuildUpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildUpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildUpdateMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildUpdateMessage::Swap(CMsgDOTAGuildUpdateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildUpdateMessage::InternalSwap(CMsgDOTAGuildUpdateMessage* other) {
  message_.Swap(&other->message_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildUpdateMessage::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildUpdateMessage

// optional string message = 1;
bool CMsgDOTAGuildUpdateMessage::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildUpdateMessage::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildUpdateMessage::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildUpdateMessage::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgDOTAGuildUpdateMessage::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateMessage.message)
  return message_.GetNoArena();
}
void CMsgDOTAGuildUpdateMessage::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateMessage.message)
}
#if LANG_CXX11
void CMsgDOTAGuildUpdateMessage::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAGuildUpdateMessage.message)
}
#endif
void CMsgDOTAGuildUpdateMessage::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAGuildUpdateMessage.message)
}
void CMsgDOTAGuildUpdateMessage::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAGuildUpdateMessage.message)
}
::std::string* CMsgDOTAGuildUpdateMessage::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAGuildUpdateMessage.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAGuildUpdateMessage::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAGuildUpdateMessage.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAGuildUpdateMessage::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAGuildUpdateMessage.message)
}

// optional uint32 guild_id = 2;
bool CMsgDOTAGuildUpdateMessage::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildUpdateMessage::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildUpdateMessage::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildUpdateMessage::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildUpdateMessage::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildUpdateMessage.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildUpdateMessage::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildUpdateMessage.guild_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildEditLogoRequest::kGuildIdFieldNumber;
const int CMsgDOTAGuildEditLogoRequest::kLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildEditLogoRequest::CMsgDOTAGuildEditLogoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildEditLogoRequest)
}
CMsgDOTAGuildEditLogoRequest::CMsgDOTAGuildEditLogoRequest(const CMsgDOTAGuildEditLogoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logo_, &from.logo_,
    reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildEditLogoRequest)
}

void CMsgDOTAGuildEditLogoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&logo_, 0, reinterpret_cast<char*>(&guild_id_) -
    reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
}

CMsgDOTAGuildEditLogoRequest::~CMsgDOTAGuildEditLogoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildEditLogoRequest)
  SharedDtor();
}

void CMsgDOTAGuildEditLogoRequest::SharedDtor() {
}

void CMsgDOTAGuildEditLogoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildEditLogoRequest& CMsgDOTAGuildEditLogoRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildEditLogoRequest* CMsgDOTAGuildEditLogoRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildEditLogoRequest* n = new CMsgDOTAGuildEditLogoRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildEditLogoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&logo_, 0, reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&logo_) + sizeof(guild_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildEditLogoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 logo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildEditLogoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildEditLogoRequest)
  return false;
#undef DO_
}

void CMsgDOTAGuildEditLogoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint64 logo = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildEditLogoRequest)
}

::google::protobuf::uint8* CMsgDOTAGuildEditLogoRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint64 logo = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildEditLogoRequest)
  return target;
}

size_t CMsgDOTAGuildEditLogoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 logo = 2;
    if (has_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logo());
    }

    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildEditLogoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildEditLogoRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildEditLogoRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildEditLogoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildEditLogoRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildEditLogoRequest::MergeFrom(const CMsgDOTAGuildEditLogoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      logo_ = from.logo_;
    }
    if (cached_has_bits & 0x00000002u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildEditLogoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildEditLogoRequest::CopyFrom(const CMsgDOTAGuildEditLogoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildEditLogoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildEditLogoRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildEditLogoRequest::Swap(CMsgDOTAGuildEditLogoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildEditLogoRequest::InternalSwap(CMsgDOTAGuildEditLogoRequest* other) {
  std::swap(logo_, other->logo_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildEditLogoRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildEditLogoRequest

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildEditLogoRequest::has_guild_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildEditLogoRequest::set_has_guild_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildEditLogoRequest::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildEditLogoRequest::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildEditLogoRequest::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildEditLogoRequest.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildEditLogoRequest::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildEditLogoRequest.guild_id)
}

// optional uint64 logo = 2;
bool CMsgDOTAGuildEditLogoRequest::has_logo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildEditLogoRequest::set_has_logo() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildEditLogoRequest::clear_has_logo() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildEditLogoRequest::clear_logo() {
  logo_ = GOOGLE_ULONGLONG(0);
  clear_has_logo();
}
::google::protobuf::uint64 CMsgDOTAGuildEditLogoRequest::logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildEditLogoRequest.logo)
  return logo_;
}
void CMsgDOTAGuildEditLogoRequest::set_logo(::google::protobuf::uint64 value) {
  set_has_logo();
  logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildEditLogoRequest.logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGuildEditLogoResponse::kGuildIdFieldNumber;
const int CMsgDOTAGuildEditLogoResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGuildEditLogoResponse::CMsgDOTAGuildEditLogoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGuildEditLogoResponse)
}
CMsgDOTAGuildEditLogoResponse::CMsgDOTAGuildEditLogoResponse(const CMsgDOTAGuildEditLogoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&guild_id_, &from.guild_id_,
    reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGuildEditLogoResponse)
}

void CMsgDOTAGuildEditLogoResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&guild_id_, 0, reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&guild_id_) + sizeof(result_));
}

CMsgDOTAGuildEditLogoResponse::~CMsgDOTAGuildEditLogoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGuildEditLogoResponse)
  SharedDtor();
}

void CMsgDOTAGuildEditLogoResponse::SharedDtor() {
}

void CMsgDOTAGuildEditLogoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGuildEditLogoResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGuildEditLogoResponse& CMsgDOTAGuildEditLogoResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGuildEditLogoResponse* CMsgDOTAGuildEditLogoResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGuildEditLogoResponse* n = new CMsgDOTAGuildEditLogoResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGuildEditLogoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGuildEditLogoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGuildEditLogoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGuildEditLogoResponse)
  return false;
#undef DO_
}

void CMsgDOTAGuildEditLogoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional .proto.dota.CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGuildEditLogoResponse)
}

::google::protobuf::uint8* CMsgDOTAGuildEditLogoResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 guild_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional .proto.dota.CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGuildEditLogoResponse)
  return target;
}

size_t CMsgDOTAGuildEditLogoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional .proto.dota.CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGuildEditLogoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGuildEditLogoResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGuildEditLogoResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGuildEditLogoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGuildEditLogoResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGuildEditLogoResponse::MergeFrom(const CMsgDOTAGuildEditLogoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGuildEditLogoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGuildEditLogoResponse::CopyFrom(const CMsgDOTAGuildEditLogoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGuildEditLogoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGuildEditLogoResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGuildEditLogoResponse::Swap(CMsgDOTAGuildEditLogoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGuildEditLogoResponse::InternalSwap(CMsgDOTAGuildEditLogoResponse* other) {
  std::swap(guild_id_, other->guild_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGuildEditLogoResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fguild_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGuildEditLogoResponse

// optional uint32 guild_id = 1;
bool CMsgDOTAGuildEditLogoResponse::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGuildEditLogoResponse::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGuildEditLogoResponse::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGuildEditLogoResponse::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgDOTAGuildEditLogoResponse::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildEditLogoResponse.guild_id)
  return guild_id_;
}
void CMsgDOTAGuildEditLogoResponse::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildEditLogoResponse.guild_id)
}

// optional .proto.dota.CMsgDOTAGuildEditLogoResponse.EResult result = 2 [default = SUCCESS];
bool CMsgDOTAGuildEditLogoResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGuildEditLogoResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGuildEditLogoResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGuildEditLogoResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult CMsgDOTAGuildEditLogoResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGuildEditLogoResponse.result)
  return static_cast< ::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult >(result_);
}
void CMsgDOTAGuildEditLogoResponse::set_result(::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult value) {
  assert(::proto::dota::CMsgDOTAGuildEditLogoResponse_EResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGuildEditLogoResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
