// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CClientMsg_CustomGameEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_CustomGameEvent> {
} _CClientMsg_CustomGameEvent_default_instance_;
class CClientMsg_CustomGameEventBounceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_CustomGameEventBounce> {
} _CClientMsg_CustomGameEventBounce_default_instance_;
class CClientMsg_ClientUIEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_ClientUIEvent> {
} _CClientMsg_ClientUIEvent_default_instance_;
class CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_DevPaletteVisibilityChangedEvent> {
} _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_;
class CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_WorldUIControllerHasPanelChangedEvent> {
} _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_;
class CClientMsg_RotateAnchorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_RotateAnchor> {
} _CClientMsg_RotateAnchor_default_instance_;

namespace protobuf_clientmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEvent, data_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEventBounce, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEventBounce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEventBounce, event_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEventBounce, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_CustomGameEventBounce, player_index_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, ent_ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, client_ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, data1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_ClientUIEvent, data2_),
  2,
  3,
  4,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_DevPaletteVisibilityChangedEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_DevPaletteVisibilityChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_DevPaletteVisibilityChangedEvent, visible_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, has_panel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, client_ehandle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_WorldUIControllerHasPanelChangedEvent, literal_hand_type_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_RotateAnchor, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_RotateAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CClientMsg_RotateAnchor, angle_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CClientMsg_CustomGameEvent)},
  { 9, 17, sizeof(CClientMsg_CustomGameEventBounce)},
  { 20, 30, sizeof(CClientMsg_ClientUIEvent)},
  { 35, 41, sizeof(CClientMsg_DevPaletteVisibilityChangedEvent)},
  { 42, 50, sizeof(CClientMsg_WorldUIControllerHasPanelChangedEvent)},
  { 53, 59, sizeof(CClientMsg_RotateAnchor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_CustomGameEventBounce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_ClientUIEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CClientMsg_RotateAnchor_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "clientmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _CClientMsg_CustomGameEvent_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CClientMsg_CustomGameEventBounce_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CClientMsg_ClientUIEvent_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CClientMsg_RotateAnchor_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CClientMsg_CustomGameEvent_default_instance_.DefaultConstruct();
  _CClientMsg_CustomGameEventBounce_default_instance_.DefaultConstruct();
  _CClientMsg_ClientUIEvent_default_instance_.DefaultConstruct();
  _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_.DefaultConstruct();
  _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_.DefaultConstruct();
  _CClientMsg_RotateAnchor_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024clientmessages.proto\022\nproto.dota\">\n\032CC"
      "lientMsg_CustomGameEvent\022\022\n\nevent_name\030\001"
      " \001(\t\022\014\n\004data\030\002 \001(\014\"Z\n CClientMsg_CustomG"
      "ameEventBounce\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004da"
      "ta\030\002 \001(\014\022\024\n\014player_index\030\003 \001(\005\"\250\001\n\030CClie"
      "ntMsg_ClientUIEvent\022A\n\005event\030\001 \001(\0162\032.pro"
      "to.dota.EClientUIEvent:\026EClientUIEvent_I"
      "nvalid\022\023\n\013ent_ehandle\030\002 \001(\r\022\026\n\016client_eh"
      "andle\030\003 \001(\r\022\r\n\005data1\030\004 \001(\t\022\r\n\005data2\030\005 \001("
      "\t\">\n+CClientMsg_DevPaletteVisibilityChan"
      "gedEvent\022\017\n\007visible\030\001 \001(\010\"x\n0CClientMsg_"
      "WorldUIControllerHasPanelChangedEvent\022\021\n"
      "\thas_panel\030\001 \001(\010\022\026\n\016client_ehandle\030\002 \001(\r"
      "\022\031\n\021literal_hand_type\030\003 \001(\r\"(\n\027CClientMs"
      "g_RotateAnchor\022\r\n\005angle\030\001 \001(\002*\333\001\n\023EBaseC"
      "lientMessages\022\027\n\022CM_CustomGameEvent\020\230\002\022\035"
      "\n\030CM_CustomGameEventBounce\020\231\002\022\025\n\020CM_Clie"
      "ntUIEvent\020\232\002\022#\n\036CM_DevPaletteVisibilityC"
      "hanged\020\233\002\022(\n#CM_WorldUIControllerHasPane"
      "lChanged\020\234\002\022\024\n\017CM_RotateAnchor\020\235\002\022\020\n\013CM_"
      "MAX_BASE\020\254\002*n\n\016EClientUIEvent\022\032\n\026EClient"
      "UIEvent_Invalid\020\000\022!\n\035EClientUIEvent_Dial"
      "ogFinished\020\001\022\035\n\031EClientUIEvent_FireOutpu"
      "t\020\002B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 930);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clientmessages.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_clientmessages_2eproto

const ::google::protobuf::EnumDescriptor* EBaseClientMessages_descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_enum_descriptors[0];
}
bool EBaseClientMessages_IsValid(int value) {
  switch (value) {
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 300:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EClientUIEvent_descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_enum_descriptors[1];
}
bool EClientUIEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_CustomGameEvent::kEventNameFieldNumber;
const int CClientMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_CustomGameEvent)
}
CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_CustomGameEvent)
}

void CClientMsg_CustomGameEvent::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CClientMsg_CustomGameEvent::~CClientMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_CustomGameEvent)
  SharedDtor();
}

void CClientMsg_CustomGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_CustomGameEvent::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_CustomGameEvent& CClientMsg_CustomGameEvent::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_CustomGameEvent* CClientMsg_CustomGameEvent::New(::google::protobuf::Arena* arena) const {
  CClientMsg_CustomGameEvent* n = new CClientMsg_CustomGameEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_CustomGameEvent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_event_name()) {
      GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_CustomGameEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_CustomGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_CustomGameEvent)
  return false;
#undef DO_
}

void CClientMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_CustomGameEvent)
}

::google::protobuf::uint8* CClientMsg_CustomGameEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_CustomGameEvent)
  return target;
}

size_t CClientMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_CustomGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_CustomGameEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_CustomGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEvent::MergeFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CClientMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEvent::CopyFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEvent::Swap(CClientMsg_CustomGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_CustomGameEvent::InternalSwap(CClientMsg_CustomGameEvent* other) {
  event_name_.Swap(&other->event_name_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_CustomGameEvent::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_CustomGameEvent

// optional string event_name = 1;
bool CClientMsg_CustomGameEvent::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_CustomGameEvent::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_CustomGameEvent::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_CustomGameEvent::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
const ::std::string& CClientMsg_CustomGameEvent::event_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_CustomGameEvent.event_name)
  return event_name_.GetNoArena();
}
void CClientMsg_CustomGameEvent::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_CustomGameEvent.event_name)
}
#if LANG_CXX11
void CClientMsg_CustomGameEvent::set_event_name(::std::string&& value) {
  set_has_event_name();
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_CustomGameEvent.event_name)
}
#endif
void CClientMsg_CustomGameEvent::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_CustomGameEvent.event_name)
}
void CClientMsg_CustomGameEvent::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_CustomGameEvent.event_name)
}
::std::string* CClientMsg_CustomGameEvent::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_CustomGameEvent.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_CustomGameEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_CustomGameEvent.event_name)
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_CustomGameEvent::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_CustomGameEvent.event_name)
}

// optional bytes data = 2;
bool CClientMsg_CustomGameEvent::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CClientMsg_CustomGameEvent::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CClientMsg_CustomGameEvent::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CClientMsg_CustomGameEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CClientMsg_CustomGameEvent::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_CustomGameEvent.data)
  return data_.GetNoArena();
}
void CClientMsg_CustomGameEvent::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_CustomGameEvent.data)
}
#if LANG_CXX11
void CClientMsg_CustomGameEvent::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_CustomGameEvent.data)
}
#endif
void CClientMsg_CustomGameEvent::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_CustomGameEvent.data)
}
void CClientMsg_CustomGameEvent::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_CustomGameEvent.data)
}
::std::string* CClientMsg_CustomGameEvent::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_CustomGameEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_CustomGameEvent::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_CustomGameEvent.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_CustomGameEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_CustomGameEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_CustomGameEventBounce::kEventNameFieldNumber;
const int CClientMsg_CustomGameEventBounce::kDataFieldNumber;
const int CClientMsg_CustomGameEventBounce::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_CustomGameEventBounce)
}
CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce(const CClientMsg_CustomGameEventBounce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  player_index_ = from.player_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_CustomGameEventBounce)
}

void CClientMsg_CustomGameEventBounce::SharedCtor() {
  _cached_size_ = 0;
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_index_ = 0;
}

CClientMsg_CustomGameEventBounce::~CClientMsg_CustomGameEventBounce() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_CustomGameEventBounce)
  SharedDtor();
}

void CClientMsg_CustomGameEventBounce::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEventBounce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_CustomGameEventBounce::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_CustomGameEventBounce& CClientMsg_CustomGameEventBounce::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_CustomGameEventBounce* CClientMsg_CustomGameEventBounce::New(::google::protobuf::Arena* arena) const {
  CClientMsg_CustomGameEventBounce* n = new CClientMsg_CustomGameEventBounce;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_CustomGameEventBounce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_CustomGameEventBounce)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_event_name()) {
      GOOGLE_DCHECK(!event_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*event_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_data()) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  player_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_CustomGameEventBounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_CustomGameEventBounce)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_CustomGameEventBounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_CustomGameEventBounce)
  return false;
#undef DO_
}

void CClientMsg_CustomGameEventBounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_CustomGameEventBounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_CustomGameEventBounce)
}

::google::protobuf::uint8* CClientMsg_CustomGameEventBounce::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_CustomGameEventBounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_CustomGameEventBounce)
  return target;
}

size_t CClientMsg_CustomGameEventBounce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_CustomGameEventBounce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 player_index = 3;
    if (has_player_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEventBounce* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_CustomGameEventBounce>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_CustomGameEventBounce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_CustomGameEventBounce)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_name();
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_index_ = from.player_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEventBounce::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEventBounce::Swap(CClientMsg_CustomGameEventBounce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_CustomGameEventBounce::InternalSwap(CClientMsg_CustomGameEventBounce* other) {
  event_name_.Swap(&other->event_name_);
  data_.Swap(&other->data_);
  std::swap(player_index_, other->player_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_CustomGameEventBounce::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_CustomGameEventBounce

// optional string event_name = 1;
bool CClientMsg_CustomGameEventBounce::has_event_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_CustomGameEventBounce::set_has_event_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_CustomGameEventBounce::clear_has_event_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_CustomGameEventBounce::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_name();
}
const ::std::string& CClientMsg_CustomGameEventBounce::event_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
  return event_name_.GetNoArena();
}
void CClientMsg_CustomGameEventBounce::set_event_name(const ::std::string& value) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
}
#if LANG_CXX11
void CClientMsg_CustomGameEventBounce::set_event_name(::std::string&& value) {
  set_has_event_name();
  event_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
}
#endif
void CClientMsg_CustomGameEventBounce::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
}
void CClientMsg_CustomGameEventBounce::set_event_name(const char* value, size_t size) {
  set_has_event_name();
  event_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
}
::std::string* CClientMsg_CustomGameEventBounce::mutable_event_name() {
  set_has_event_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
  return event_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_CustomGameEventBounce::release_event_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
  clear_has_event_name();
  return event_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_CustomGameEventBounce::set_allocated_event_name(::std::string* event_name) {
  if (event_name != NULL) {
    set_has_event_name();
  } else {
    clear_has_event_name();
  }
  event_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_CustomGameEventBounce.event_name)
}

// optional bytes data = 2;
bool CClientMsg_CustomGameEventBounce::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CClientMsg_CustomGameEventBounce::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CClientMsg_CustomGameEventBounce::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CClientMsg_CustomGameEventBounce::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CClientMsg_CustomGameEventBounce::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_CustomGameEventBounce.data)
  return data_.GetNoArena();
}
void CClientMsg_CustomGameEventBounce::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_CustomGameEventBounce.data)
}
#if LANG_CXX11
void CClientMsg_CustomGameEventBounce::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_CustomGameEventBounce.data)
}
#endif
void CClientMsg_CustomGameEventBounce::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_CustomGameEventBounce.data)
}
void CClientMsg_CustomGameEventBounce::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_CustomGameEventBounce.data)
}
::std::string* CClientMsg_CustomGameEventBounce::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_CustomGameEventBounce.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_CustomGameEventBounce::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_CustomGameEventBounce.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_CustomGameEventBounce::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_CustomGameEventBounce.data)
}

// optional int32 player_index = 3;
bool CClientMsg_CustomGameEventBounce::has_player_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CClientMsg_CustomGameEventBounce::set_has_player_index() {
  _has_bits_[0] |= 0x00000004u;
}
void CClientMsg_CustomGameEventBounce::clear_has_player_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void CClientMsg_CustomGameEventBounce::clear_player_index() {
  player_index_ = 0;
  clear_has_player_index();
}
::google::protobuf::int32 CClientMsg_CustomGameEventBounce::player_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_CustomGameEventBounce.player_index)
  return player_index_;
}
void CClientMsg_CustomGameEventBounce::set_player_index(::google::protobuf::int32 value) {
  set_has_player_index();
  player_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_CustomGameEventBounce.player_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_ClientUIEvent::kEventFieldNumber;
const int CClientMsg_ClientUIEvent::kEntEhandleFieldNumber;
const int CClientMsg_ClientUIEvent::kClientEhandleFieldNumber;
const int CClientMsg_ClientUIEvent::kData1FieldNumber;
const int CClientMsg_ClientUIEvent::kData2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_ClientUIEvent)
}
CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent(const CClientMsg_ClientUIEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data1()) {
    data1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data1_);
  }
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data2()) {
    data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  ::memcpy(&event_, &from.event_,
    reinterpret_cast<char*>(&client_ehandle_) -
    reinterpret_cast<char*>(&event_) + sizeof(client_ehandle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_ClientUIEvent)
}

void CClientMsg_ClientUIEvent::SharedCtor() {
  _cached_size_ = 0;
  data1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, reinterpret_cast<char*>(&client_ehandle_) -
    reinterpret_cast<char*>(&event_) + sizeof(client_ehandle_));
}

CClientMsg_ClientUIEvent::~CClientMsg_ClientUIEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_ClientUIEvent)
  SharedDtor();
}

void CClientMsg_ClientUIEvent::SharedDtor() {
  data1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_ClientUIEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_ClientUIEvent::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_ClientUIEvent& CClientMsg_ClientUIEvent::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_ClientUIEvent* CClientMsg_ClientUIEvent::New(::google::protobuf::Arena* arena) const {
  CClientMsg_ClientUIEvent* n = new CClientMsg_ClientUIEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_ClientUIEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_ClientUIEvent)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_data1()) {
      GOOGLE_DCHECK(!data1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data1_.UnsafeRawStringPointer())->clear();
    }
    if (has_data2()) {
      GOOGLE_DCHECK(!data2_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data2_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&event_, 0, reinterpret_cast<char*>(&client_ehandle_) -
      reinterpret_cast<char*>(&event_) + sizeof(client_ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_ClientUIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_ClientUIEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EClientUIEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::EClientUIEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ent_ehandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ent_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ent_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ehandle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data1().data(), this->data1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_ClientUIEvent.data1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data2().data(), this->data2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_ClientUIEvent.data2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_ClientUIEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_ClientUIEvent)
  return false;
#undef DO_
}

void CClientMsg_ClientUIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_ClientUIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // optional uint32 ent_ehandle = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ent_ehandle(), output);
  }

  // optional uint32 client_ehandle = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ehandle(), output);
  }

  // optional string data1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data1().data(), this->data1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data1(), output);
  }

  // optional string data2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_ClientUIEvent)
}

::google::protobuf::uint8* CClientMsg_ClientUIEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_ClientUIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // optional uint32 ent_ehandle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ent_ehandle(), target);
  }

  // optional uint32 client_ehandle = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ehandle(), target);
  }

  // optional string data1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data1().data(), this->data1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data1(), target);
  }

  // optional string data2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), this->data2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_ClientUIEvent)
  return target;
}

size_t CClientMsg_ClientUIEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_ClientUIEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string data1 = 4;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data1());
    }

    // optional string data2 = 5;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint32 ent_ehandle = 2;
    if (has_ent_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ent_ehandle());
    }

    // optional uint32 client_ehandle = 3;
    if (has_client_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ehandle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_ClientUIEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_ClientUIEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_ClientUIEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_ClientUIEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_ClientUIEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_ClientUIEvent::MergeFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data1();
      data1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data1_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_data2();
      data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (cached_has_bits & 0x00000004u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_ehandle_ = from.ent_ehandle_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_ehandle_ = from.client_ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_ClientUIEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_ClientUIEvent::CopyFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_ClientUIEvent::IsInitialized() const {
  return true;
}

void CClientMsg_ClientUIEvent::Swap(CClientMsg_ClientUIEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_ClientUIEvent::InternalSwap(CClientMsg_ClientUIEvent* other) {
  data1_.Swap(&other->data1_);
  data2_.Swap(&other->data2_);
  std::swap(event_, other->event_);
  std::swap(ent_ehandle_, other->ent_ehandle_);
  std::swap(client_ehandle_, other->client_ehandle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_ClientUIEvent::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_ClientUIEvent

// optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
bool CClientMsg_ClientUIEvent::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CClientMsg_ClientUIEvent::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
void CClientMsg_ClientUIEvent::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
void CClientMsg_ClientUIEvent::clear_event() {
  event_ = 0;
  clear_has_event();
}
::proto::dota::EClientUIEvent CClientMsg_ClientUIEvent::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_ClientUIEvent.event)
  return static_cast< ::proto::dota::EClientUIEvent >(event_);
}
void CClientMsg_ClientUIEvent::set_event(::proto::dota::EClientUIEvent value) {
  assert(::proto::dota::EClientUIEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_ClientUIEvent.event)
}

// optional uint32 ent_ehandle = 2;
bool CClientMsg_ClientUIEvent::has_ent_ehandle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CClientMsg_ClientUIEvent::set_has_ent_ehandle() {
  _has_bits_[0] |= 0x00000008u;
}
void CClientMsg_ClientUIEvent::clear_has_ent_ehandle() {
  _has_bits_[0] &= ~0x00000008u;
}
void CClientMsg_ClientUIEvent::clear_ent_ehandle() {
  ent_ehandle_ = 0u;
  clear_has_ent_ehandle();
}
::google::protobuf::uint32 CClientMsg_ClientUIEvent::ent_ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_ClientUIEvent.ent_ehandle)
  return ent_ehandle_;
}
void CClientMsg_ClientUIEvent::set_ent_ehandle(::google::protobuf::uint32 value) {
  set_has_ent_ehandle();
  ent_ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_ClientUIEvent.ent_ehandle)
}

// optional uint32 client_ehandle = 3;
bool CClientMsg_ClientUIEvent::has_client_ehandle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CClientMsg_ClientUIEvent::set_has_client_ehandle() {
  _has_bits_[0] |= 0x00000010u;
}
void CClientMsg_ClientUIEvent::clear_has_client_ehandle() {
  _has_bits_[0] &= ~0x00000010u;
}
void CClientMsg_ClientUIEvent::clear_client_ehandle() {
  client_ehandle_ = 0u;
  clear_has_client_ehandle();
}
::google::protobuf::uint32 CClientMsg_ClientUIEvent::client_ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_ClientUIEvent.client_ehandle)
  return client_ehandle_;
}
void CClientMsg_ClientUIEvent::set_client_ehandle(::google::protobuf::uint32 value) {
  set_has_client_ehandle();
  client_ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_ClientUIEvent.client_ehandle)
}

// optional string data1 = 4;
bool CClientMsg_ClientUIEvent::has_data1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_ClientUIEvent::set_has_data1() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_ClientUIEvent::clear_has_data1() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_ClientUIEvent::clear_data1() {
  data1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data1();
}
const ::std::string& CClientMsg_ClientUIEvent::data1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_ClientUIEvent.data1)
  return data1_.GetNoArena();
}
void CClientMsg_ClientUIEvent::set_data1(const ::std::string& value) {
  set_has_data1();
  data1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_ClientUIEvent.data1)
}
#if LANG_CXX11
void CClientMsg_ClientUIEvent::set_data1(::std::string&& value) {
  set_has_data1();
  data1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_ClientUIEvent.data1)
}
#endif
void CClientMsg_ClientUIEvent::set_data1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data1();
  data1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_ClientUIEvent.data1)
}
void CClientMsg_ClientUIEvent::set_data1(const char* value, size_t size) {
  set_has_data1();
  data1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_ClientUIEvent.data1)
}
::std::string* CClientMsg_ClientUIEvent::mutable_data1() {
  set_has_data1();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_ClientUIEvent.data1)
  return data1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_ClientUIEvent::release_data1() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_ClientUIEvent.data1)
  clear_has_data1();
  return data1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_ClientUIEvent::set_allocated_data1(::std::string* data1) {
  if (data1 != NULL) {
    set_has_data1();
  } else {
    clear_has_data1();
  }
  data1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data1);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_ClientUIEvent.data1)
}

// optional string data2 = 5;
bool CClientMsg_ClientUIEvent::has_data2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CClientMsg_ClientUIEvent::set_has_data2() {
  _has_bits_[0] |= 0x00000002u;
}
void CClientMsg_ClientUIEvent::clear_has_data2() {
  _has_bits_[0] &= ~0x00000002u;
}
void CClientMsg_ClientUIEvent::clear_data2() {
  data2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data2();
}
const ::std::string& CClientMsg_ClientUIEvent::data2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_ClientUIEvent.data2)
  return data2_.GetNoArena();
}
void CClientMsg_ClientUIEvent::set_data2(const ::std::string& value) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_ClientUIEvent.data2)
}
#if LANG_CXX11
void CClientMsg_ClientUIEvent::set_data2(::std::string&& value) {
  set_has_data2();
  data2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CClientMsg_ClientUIEvent.data2)
}
#endif
void CClientMsg_ClientUIEvent::set_data2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CClientMsg_ClientUIEvent.data2)
}
void CClientMsg_ClientUIEvent::set_data2(const char* value, size_t size) {
  set_has_data2();
  data2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CClientMsg_ClientUIEvent.data2)
}
::std::string* CClientMsg_ClientUIEvent::mutable_data2() {
  set_has_data2();
  // @@protoc_insertion_point(field_mutable:proto.dota.CClientMsg_ClientUIEvent.data2)
  return data2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CClientMsg_ClientUIEvent::release_data2() {
  // @@protoc_insertion_point(field_release:proto.dota.CClientMsg_ClientUIEvent.data2)
  clear_has_data2();
  return data2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CClientMsg_ClientUIEvent::set_allocated_data2(::std::string* data2) {
  if (data2 != NULL) {
    set_has_data2();
  } else {
    clear_has_data2();
  }
  data2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data2);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CClientMsg_ClientUIEvent.data2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_DevPaletteVisibilityChangedEvent::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}
CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent(const CClientMsg_DevPaletteVisibilityChangedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedCtor() {
  _cached_size_ = 0;
  visible_ = false;
}

CClientMsg_DevPaletteVisibilityChangedEvent::~CClientMsg_DevPaletteVisibilityChangedEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  SharedDtor();
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedDtor() {
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_DevPaletteVisibilityChangedEvent::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_DevPaletteVisibilityChangedEvent& CClientMsg_DevPaletteVisibilityChangedEvent::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_DevPaletteVisibilityChangedEvent* CClientMsg_DevPaletteVisibilityChangedEvent::New(::google::protobuf::Arena* arena) const {
  CClientMsg_DevPaletteVisibilityChangedEvent* n = new CClientMsg_DevPaletteVisibilityChangedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_DevPaletteVisibilityChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_visible();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return false;
#undef DO_
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}

::google::protobuf::uint8* CClientMsg_DevPaletteVisibilityChangedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return target;
}

size_t CClientMsg_DevPaletteVisibilityChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool visible = 1;
  if (has_visible()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_DevPaletteVisibilityChangedEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_DevPaletteVisibilityChangedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_visible()) {
    set_visible(from.visible());
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_DevPaletteVisibilityChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::Swap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_DevPaletteVisibilityChangedEvent::InternalSwap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
  std::swap(visible_, other->visible_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_DevPaletteVisibilityChangedEvent::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_DevPaletteVisibilityChangedEvent

// optional bool visible = 1;
bool CClientMsg_DevPaletteVisibilityChangedEvent::has_visible() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_DevPaletteVisibilityChangedEvent::set_has_visible() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_DevPaletteVisibilityChangedEvent::clear_has_visible() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_DevPaletteVisibilityChangedEvent::clear_visible() {
  visible_ = false;
  clear_has_visible();
}
bool CClientMsg_DevPaletteVisibilityChangedEvent::visible() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent.visible)
  return visible_;
}
void CClientMsg_DevPaletteVisibilityChangedEvent::set_visible(bool value) {
  set_has_visible();
  visible_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent.visible)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kHasPanelFieldNumber;
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kClientEhandleFieldNumber;
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kLiteralHandTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}
CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_panel_, &from.has_panel_,
    reinterpret_cast<char*>(&literal_hand_type_) -
    reinterpret_cast<char*>(&has_panel_) + sizeof(literal_hand_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&has_panel_, 0, reinterpret_cast<char*>(&literal_hand_type_) -
    reinterpret_cast<char*>(&has_panel_) + sizeof(literal_hand_type_));
}

CClientMsg_WorldUIControllerHasPanelChangedEvent::~CClientMsg_WorldUIControllerHasPanelChangedEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  SharedDtor();
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedDtor() {
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_WorldUIControllerHasPanelChangedEvent::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_WorldUIControllerHasPanelChangedEvent& CClientMsg_WorldUIControllerHasPanelChangedEvent::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_WorldUIControllerHasPanelChangedEvent* CClientMsg_WorldUIControllerHasPanelChangedEvent::New(::google::protobuf::Arena* arena) const {
  CClientMsg_WorldUIControllerHasPanelChangedEvent* n = new CClientMsg_WorldUIControllerHasPanelChangedEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&has_panel_, 0, reinterpret_cast<char*>(&literal_hand_type_) -
      reinterpret_cast<char*>(&has_panel_) + sizeof(literal_hand_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_WorldUIControllerHasPanelChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_panel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_has_panel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_panel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ehandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_ehandle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 literal_hand_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_literal_hand_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &literal_hand_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return false;
#undef DO_
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_panel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_panel(), output);
  }

  // optional uint32 client_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_ehandle(), output);
  }

  // optional uint32 literal_hand_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->literal_hand_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}

::google::protobuf::uint8* CClientMsg_WorldUIControllerHasPanelChangedEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_panel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_panel(), target);
  }

  // optional uint32 client_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_ehandle(), target);
  }

  // optional uint32 literal_hand_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->literal_hand_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return target;
}

size_t CClientMsg_WorldUIControllerHasPanelChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bool has_panel = 1;
    if (has_has_panel()) {
      total_size += 1 + 1;
    }

    // optional uint32 client_ehandle = 2;
    if (has_client_ehandle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ehandle());
    }

    // optional uint32 literal_hand_type = 3;
    if (has_literal_hand_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->literal_hand_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_WorldUIControllerHasPanelChangedEvent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_WorldUIControllerHasPanelChangedEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      has_panel_ = from.has_panel_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_ehandle_ = from.client_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      literal_hand_type_ = from.literal_hand_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_WorldUIControllerHasPanelChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::Swap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::InternalSwap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
  std::swap(has_panel_, other->has_panel_);
  std::swap(client_ehandle_, other->client_ehandle_);
  std::swap(literal_hand_type_, other->literal_hand_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_WorldUIControllerHasPanelChangedEvent::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_WorldUIControllerHasPanelChangedEvent

// optional bool has_panel = 1;
bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_has_panel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_has_has_panel() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_has_has_panel() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_has_panel() {
  has_panel_ = false;
  clear_has_has_panel();
}
bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_panel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.has_panel)
  return has_panel_;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_has_panel(bool value) {
  set_has_has_panel();
  has_panel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.has_panel)
}

// optional uint32 client_ehandle = 2;
bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_client_ehandle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_has_client_ehandle() {
  _has_bits_[0] |= 0x00000002u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_has_client_ehandle() {
  _has_bits_[0] &= ~0x00000002u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_client_ehandle() {
  client_ehandle_ = 0u;
  clear_has_client_ehandle();
}
::google::protobuf::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::client_ehandle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.client_ehandle)
  return client_ehandle_;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_client_ehandle(::google::protobuf::uint32 value) {
  set_has_client_ehandle();
  client_ehandle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.client_ehandle)
}

// optional uint32 literal_hand_type = 3;
bool CClientMsg_WorldUIControllerHasPanelChangedEvent::has_literal_hand_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_has_literal_hand_type() {
  _has_bits_[0] |= 0x00000004u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_has_literal_hand_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::clear_literal_hand_type() {
  literal_hand_type_ = 0u;
  clear_has_literal_hand_type();
}
::google::protobuf::uint32 CClientMsg_WorldUIControllerHasPanelChangedEvent::literal_hand_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.literal_hand_type)
  return literal_hand_type_;
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::set_literal_hand_type(::google::protobuf::uint32 value) {
  set_has_literal_hand_type();
  literal_hand_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent.literal_hand_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_RotateAnchor::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_RotateAnchor::CClientMsg_RotateAnchor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_clientmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_RotateAnchor)
}
CClientMsg_RotateAnchor::CClientMsg_RotateAnchor(const CClientMsg_RotateAnchor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_RotateAnchor)
}

void CClientMsg_RotateAnchor::SharedCtor() {
  _cached_size_ = 0;
  angle_ = 0;
}

CClientMsg_RotateAnchor::~CClientMsg_RotateAnchor() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_RotateAnchor)
  SharedDtor();
}

void CClientMsg_RotateAnchor::SharedDtor() {
}

void CClientMsg_RotateAnchor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CClientMsg_RotateAnchor::descriptor() {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CClientMsg_RotateAnchor& CClientMsg_RotateAnchor::default_instance() {
  protobuf_clientmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CClientMsg_RotateAnchor* CClientMsg_RotateAnchor::New(::google::protobuf::Arena* arena) const {
  CClientMsg_RotateAnchor* n = new CClientMsg_RotateAnchor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CClientMsg_RotateAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_RotateAnchor)
  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CClientMsg_RotateAnchor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_RotateAnchor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_RotateAnchor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_RotateAnchor)
  return false;
#undef DO_
}

void CClientMsg_RotateAnchor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_RotateAnchor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_RotateAnchor)
}

::google::protobuf::uint8* CClientMsg_RotateAnchor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_RotateAnchor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_RotateAnchor)
  return target;
}

size_t CClientMsg_RotateAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_RotateAnchor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional float angle = 1;
  if (has_angle()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CClientMsg_RotateAnchor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_RotateAnchor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CClientMsg_RotateAnchor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_RotateAnchor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_RotateAnchor)
    MergeFrom(*source);
  }
}

void CClientMsg_RotateAnchor::MergeFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angle()) {
    set_angle(from.angle());
  }
}

void CClientMsg_RotateAnchor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_RotateAnchor::CopyFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_RotateAnchor::IsInitialized() const {
  return true;
}

void CClientMsg_RotateAnchor::Swap(CClientMsg_RotateAnchor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_RotateAnchor::InternalSwap(CClientMsg_RotateAnchor* other) {
  std::swap(angle_, other->angle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CClientMsg_RotateAnchor::GetMetadata() const {
  protobuf_clientmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clientmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CClientMsg_RotateAnchor

// optional float angle = 1;
bool CClientMsg_RotateAnchor::has_angle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CClientMsg_RotateAnchor::set_has_angle() {
  _has_bits_[0] |= 0x00000001u;
}
void CClientMsg_RotateAnchor::clear_has_angle() {
  _has_bits_[0] &= ~0x00000001u;
}
void CClientMsg_RotateAnchor::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
float CClientMsg_RotateAnchor::angle() const {
  // @@protoc_insertion_point(field_get:proto.dota.CClientMsg_RotateAnchor.angle)
  return angle_;
}
void CClientMsg_RotateAnchor::set_angle(float value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CClientMsg_RotateAnchor.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
