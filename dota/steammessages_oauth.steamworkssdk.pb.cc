// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages_oauth.steamworkssdk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "steammessages_oauth.steamworkssdk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class COAuthToken_ImplicitGrantNoPrompt_RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COAuthToken_ImplicitGrantNoPrompt_Request> {
} _COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_;
class COAuthToken_ImplicitGrantNoPrompt_ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<COAuthToken_ImplicitGrantNoPrompt_Response> {
} _COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_;

namespace protobuf_steammessages_5foauth_2esteamworkssdk_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Request, clientid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Response, access_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(COAuthToken_ImplicitGrantNoPrompt_Response, redirect_uri_),
  0,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(COAuthToken_ImplicitGrantNoPrompt_Request)},
  { 7, 14, sizeof(COAuthToken_ImplicitGrantNoPrompt_Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "steammessages_oauth.steamworkssdk.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_5funified_5fbase_2esteamworkssdk_2eproto::InitDefaults();
  _COAuthToken_ImplicitGrantNoPrompt_Request_default_instance_.DefaultConstruct();
  _COAuthToken_ImplicitGrantNoPrompt_Response_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'steammessages_oauth.steamworkssdk.prot"
      "o\022\nproto.dota\032.steammessages_unified_bas"
      "e.steamworkssdk.proto\"{\n)COAuthToken_Imp"
      "licitGrantNoPrompt_Request\022N\n\010clientid\030\001"
      " \001(\tB<\202\265\0308Client ID for which to count t"
      "he number of issued tokens\"\267\001\n*COAuthTok"
      "en_ImplicitGrantNoPrompt_Response\0229\n\014acc"
      "ess_token\030\001 \001(\tB#\202\265\030\037OAuth Token, grante"
      "d on success\022N\n\014redirect_uri\030\002 \001(\tB8\202\265\0304"
      "Redirection URI provided during client r"
      "egistration.2\307\002\n\nOAuthToken\022\201\002\n\025Implicit"
      "GrantNoPrompt\0225.proto.dota.COAuthToken_I"
      "mplicitGrantNoPrompt_Request\0326.proto.dot"
      "a.COAuthToken_ImplicitGrantNoPrompt_Resp"
      "onse\"y\202\265\030uGrants an implicit OAuth token"
      " (grant type \'token\') for the specified "
      "client ID on behalf of a user without pr"
      "ompting\0325\202\265\0301Service containing methods "
      "to manage OAuth tokens"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 742);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "steammessages_oauth.steamworkssdk.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_5funified_5fbase_2esteamworkssdk_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_steammessages_5foauth_2esteamworkssdk_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COAuthToken_ImplicitGrantNoPrompt_Request::kClientidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COAuthToken_ImplicitGrantNoPrompt_Request::COAuthToken_ImplicitGrantNoPrompt_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
}
COAuthToken_ImplicitGrantNoPrompt_Request::COAuthToken_ImplicitGrantNoPrompt_Request(const COAuthToken_ImplicitGrantNoPrompt_Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_clientid()) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
}

void COAuthToken_ImplicitGrantNoPrompt_Request::SharedCtor() {
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

COAuthToken_ImplicitGrantNoPrompt_Request::~COAuthToken_ImplicitGrantNoPrompt_Request() {
  // @@protoc_insertion_point(destructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  SharedDtor();
}

void COAuthToken_ImplicitGrantNoPrompt_Request::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void COAuthToken_ImplicitGrantNoPrompt_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COAuthToken_ImplicitGrantNoPrompt_Request::descriptor() {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COAuthToken_ImplicitGrantNoPrompt_Request& COAuthToken_ImplicitGrantNoPrompt_Request::default_instance() {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

COAuthToken_ImplicitGrantNoPrompt_Request* COAuthToken_ImplicitGrantNoPrompt_Request::New(::google::protobuf::Arena* arena) const {
  COAuthToken_ImplicitGrantNoPrompt_Request* n = new COAuthToken_ImplicitGrantNoPrompt_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COAuthToken_ImplicitGrantNoPrompt_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  if (has_clientid()) {
    GOOGLE_DCHECK(!clientid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*clientid_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COAuthToken_ImplicitGrantNoPrompt_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string clientid = 1 [(.proto.dota.description) = "Client ID for which to count the number of issued tokens"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->clientid().data(), this->clientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  return false;
#undef DO_
}

void COAuthToken_ImplicitGrantNoPrompt_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clientid = 1 [(.proto.dota.description) = "Client ID for which to count the number of issued tokens"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
}

::google::protobuf::uint8* COAuthToken_ImplicitGrantNoPrompt_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string clientid = 1 [(.proto.dota.description) = "Client ID for which to count the number of issued tokens"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->clientid().data(), this->clientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  return target;
}

size_t COAuthToken_ImplicitGrantNoPrompt_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string clientid = 1 [(.proto.dota.description) = "Client ID for which to count the number of issued tokens"];
  if (has_clientid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COAuthToken_ImplicitGrantNoPrompt_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const COAuthToken_ImplicitGrantNoPrompt_Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COAuthToken_ImplicitGrantNoPrompt_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
    MergeFrom(*source);
  }
}

void COAuthToken_ImplicitGrantNoPrompt_Request::MergeFrom(const COAuthToken_ImplicitGrantNoPrompt_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clientid()) {
    set_has_clientid();
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
}

void COAuthToken_ImplicitGrantNoPrompt_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COAuthToken_ImplicitGrantNoPrompt_Request::CopyFrom(const COAuthToken_ImplicitGrantNoPrompt_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COAuthToken_ImplicitGrantNoPrompt_Request::IsInitialized() const {
  return true;
}

void COAuthToken_ImplicitGrantNoPrompt_Request::Swap(COAuthToken_ImplicitGrantNoPrompt_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COAuthToken_ImplicitGrantNoPrompt_Request::InternalSwap(COAuthToken_ImplicitGrantNoPrompt_Request* other) {
  clientid_.Swap(&other->clientid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COAuthToken_ImplicitGrantNoPrompt_Request::GetMetadata() const {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COAuthToken_ImplicitGrantNoPrompt_Request

// optional string clientid = 1 [(.proto.dota.description) = "Client ID for which to count the number of issued tokens"];
bool COAuthToken_ImplicitGrantNoPrompt_Request::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COAuthToken_ImplicitGrantNoPrompt_Request::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
void COAuthToken_ImplicitGrantNoPrompt_Request::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
void COAuthToken_ImplicitGrantNoPrompt_Request::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_clientid();
}
const ::std::string& COAuthToken_ImplicitGrantNoPrompt_Request::clientid() const {
  // @@protoc_insertion_point(field_get:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  return clientid_.GetNoArena();
}
void COAuthToken_ImplicitGrantNoPrompt_Request::set_clientid(const ::std::string& value) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}
#if LANG_CXX11
void COAuthToken_ImplicitGrantNoPrompt_Request::set_clientid(::std::string&& value) {
  set_has_clientid();
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}
#endif
void COAuthToken_ImplicitGrantNoPrompt_Request::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}
void COAuthToken_ImplicitGrantNoPrompt_Request::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Request::mutable_clientid() {
  set_has_clientid();
  // @@protoc_insertion_point(field_mutable:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Request::release_clientid() {
  // @@protoc_insertion_point(field_release:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
  clear_has_clientid();
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void COAuthToken_ImplicitGrantNoPrompt_Request::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    set_has_clientid();
  } else {
    clear_has_clientid();
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Request.clientid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int COAuthToken_ImplicitGrantNoPrompt_Response::kAccessTokenFieldNumber;
const int COAuthToken_ImplicitGrantNoPrompt_Response::kRedirectUriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

COAuthToken_ImplicitGrantNoPrompt_Response::COAuthToken_ImplicitGrantNoPrompt_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
}
COAuthToken_ImplicitGrantNoPrompt_Response::COAuthToken_ImplicitGrantNoPrompt_Response(const COAuthToken_ImplicitGrantNoPrompt_Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_access_token()) {
    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_redirect_uri()) {
    redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
}

void COAuthToken_ImplicitGrantNoPrompt_Response::SharedCtor() {
  _cached_size_ = 0;
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

COAuthToken_ImplicitGrantNoPrompt_Response::~COAuthToken_ImplicitGrantNoPrompt_Response() {
  // @@protoc_insertion_point(destructor:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  SharedDtor();
}

void COAuthToken_ImplicitGrantNoPrompt_Response::SharedDtor() {
  access_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redirect_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void COAuthToken_ImplicitGrantNoPrompt_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* COAuthToken_ImplicitGrantNoPrompt_Response::descriptor() {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const COAuthToken_ImplicitGrantNoPrompt_Response& COAuthToken_ImplicitGrantNoPrompt_Response::default_instance() {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::InitDefaults();
  return *internal_default_instance();
}

COAuthToken_ImplicitGrantNoPrompt_Response* COAuthToken_ImplicitGrantNoPrompt_Response::New(::google::protobuf::Arena* arena) const {
  COAuthToken_ImplicitGrantNoPrompt_Response* n = new COAuthToken_ImplicitGrantNoPrompt_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void COAuthToken_ImplicitGrantNoPrompt_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_access_token()) {
      GOOGLE_DCHECK(!access_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*access_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_redirect_uri()) {
      GOOGLE_DCHECK(!redirect_uri_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*redirect_uri_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool COAuthToken_ImplicitGrantNoPrompt_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string access_token = 1 [(.proto.dota.description) = "OAuth Token, granted on success"];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_access_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->access_token().data(), this->access_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string redirect_uri = 2 [(.proto.dota.description) = "Redirection URI provided during client registration."];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redirect_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->redirect_uri().data(), this->redirect_uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  return false;
#undef DO_
}

void COAuthToken_ImplicitGrantNoPrompt_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string access_token = 1 [(.proto.dota.description) = "OAuth Token, granted on success"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->access_token(), output);
  }

  // optional string redirect_uri = 2 [(.proto.dota.description) = "Redirection URI provided during client registration."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redirect_uri(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
}

::google::protobuf::uint8* COAuthToken_ImplicitGrantNoPrompt_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string access_token = 1 [(.proto.dota.description) = "OAuth Token, granted on success"];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->access_token().data(), this->access_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->access_token(), target);
  }

  // optional string redirect_uri = 2 [(.proto.dota.description) = "Redirection URI provided during client registration."];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->redirect_uri().data(), this->redirect_uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redirect_uri(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  return target;
}

size_t COAuthToken_ImplicitGrantNoPrompt_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string access_token = 1 [(.proto.dota.description) = "OAuth Token, granted on success"];
    if (has_access_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->access_token());
    }

    // optional string redirect_uri = 2 [(.proto.dota.description) = "Redirection URI provided during client registration."];
    if (has_redirect_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->redirect_uri());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void COAuthToken_ImplicitGrantNoPrompt_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const COAuthToken_ImplicitGrantNoPrompt_Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const COAuthToken_ImplicitGrantNoPrompt_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
    MergeFrom(*source);
  }
}

void COAuthToken_ImplicitGrantNoPrompt_Response::MergeFrom(const COAuthToken_ImplicitGrantNoPrompt_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_access_token();
      access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_redirect_uri();
      redirect_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redirect_uri_);
    }
  }
}

void COAuthToken_ImplicitGrantNoPrompt_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void COAuthToken_ImplicitGrantNoPrompt_Response::CopyFrom(const COAuthToken_ImplicitGrantNoPrompt_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool COAuthToken_ImplicitGrantNoPrompt_Response::IsInitialized() const {
  return true;
}

void COAuthToken_ImplicitGrantNoPrompt_Response::Swap(COAuthToken_ImplicitGrantNoPrompt_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void COAuthToken_ImplicitGrantNoPrompt_Response::InternalSwap(COAuthToken_ImplicitGrantNoPrompt_Response* other) {
  access_token_.Swap(&other->access_token_);
  redirect_uri_.Swap(&other->redirect_uri_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata COAuthToken_ImplicitGrantNoPrompt_Response::GetMetadata() const {
  protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_steammessages_5foauth_2esteamworkssdk_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// COAuthToken_ImplicitGrantNoPrompt_Response

// optional string access_token = 1 [(.proto.dota.description) = "OAuth Token, granted on success"];
bool COAuthToken_ImplicitGrantNoPrompt_Response::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_access_token();
}
const ::std::string& COAuthToken_ImplicitGrantNoPrompt_Response::access_token() const {
  // @@protoc_insertion_point(field_get:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  return access_token_.GetNoArena();
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_access_token(const ::std::string& value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}
#if LANG_CXX11
void COAuthToken_ImplicitGrantNoPrompt_Response::set_access_token(::std::string&& value) {
  set_has_access_token();
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}
#endif
void COAuthToken_ImplicitGrantNoPrompt_Response::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Response::mutable_access_token() {
  set_has_access_token();
  // @@protoc_insertion_point(field_mutable:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Response::release_access_token() {
  // @@protoc_insertion_point(field_release:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
  clear_has_access_token();
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    set_has_access_token();
  } else {
    clear_has_access_token();
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.access_token)
}

// optional string redirect_uri = 2 [(.proto.dota.description) = "Redirection URI provided during client registration."];
bool COAuthToken_ImplicitGrantNoPrompt_Response::has_redirect_uri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_has_redirect_uri() {
  _has_bits_[0] |= 0x00000002u;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::clear_has_redirect_uri() {
  _has_bits_[0] &= ~0x00000002u;
}
void COAuthToken_ImplicitGrantNoPrompt_Response::clear_redirect_uri() {
  redirect_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_redirect_uri();
}
const ::std::string& COAuthToken_ImplicitGrantNoPrompt_Response::redirect_uri() const {
  // @@protoc_insertion_point(field_get:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  return redirect_uri_.GetNoArena();
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_redirect_uri(const ::std::string& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}
#if LANG_CXX11
void COAuthToken_ImplicitGrantNoPrompt_Response::set_redirect_uri(::std::string&& value) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}
#endif
void COAuthToken_ImplicitGrantNoPrompt_Response::set_redirect_uri(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_redirect_uri(const char* value, size_t size) {
  set_has_redirect_uri();
  redirect_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Response::mutable_redirect_uri() {
  set_has_redirect_uri();
  // @@protoc_insertion_point(field_mutable:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  return redirect_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* COAuthToken_ImplicitGrantNoPrompt_Response::release_redirect_uri() {
  // @@protoc_insertion_point(field_release:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
  clear_has_redirect_uri();
  return redirect_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void COAuthToken_ImplicitGrantNoPrompt_Response::set_allocated_redirect_uri(::std::string* redirect_uri) {
  if (redirect_uri != NULL) {
    set_has_redirect_uri();
  } else {
    clear_has_redirect_uri();
  }
  redirect_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redirect_uri);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.COAuthToken_ImplicitGrantNoPrompt_Response.redirect_uri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
