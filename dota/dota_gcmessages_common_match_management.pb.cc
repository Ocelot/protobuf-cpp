// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_match_management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_common_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CSODOTAPartyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyMember> {
} _CSODOTAPartyMember_default_instance_;
class CSODOTAPartyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAParty> {
} _CSODOTAParty_default_instance_;
class CSODOTAPartyInvite_PartyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyInvite_PartyMember> {
} _CSODOTAPartyInvite_PartyMember_default_instance_;
class CSODOTAPartyInviteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTAPartyInvite> {
} _CSODOTAPartyInvite_default_instance_;
class CSODOTALobbyInvite_LobbyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobbyInvite_LobbyMember> {
} _CSODOTALobbyInvite_LobbyMember_default_instance_;
class CSODOTALobbyInviteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobbyInvite> {
} _CSODOTALobbyInvite_default_instance_;
class CMsgLeaverStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaverState> {
} _CMsgLeaverState_default_instance_;
class CDOTALobbyMember_CDOTALobbyMemberXPBonusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTALobbyMember_CDOTALobbyMemberXPBonus> {
} _CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_;
class CDOTALobbyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTALobbyMember> {
} _CDOTALobbyMember_default_instance_;
class CLobbyTeamDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CLobbyTeamDetails> {
} _CLobbyTeamDetails_default_instance_;
class CLobbyTimedRewardDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CLobbyTimedRewardDetails> {
} _CLobbyTimedRewardDetails_default_instance_;
class CLobbyBroadcastChannelInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CLobbyBroadcastChannelInfo> {
} _CLobbyBroadcastChannelInfo_default_instance_;
class CSODOTALobby_CExtraMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobby_CExtraMsg> {
} _CSODOTALobby_CExtraMsg_default_instance_;
class CSODOTALobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSODOTALobby> {
} _CSODOTALobby_default_instance_;
class CMsgLobbyPlaytestDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyPlaytestDetails> {
} _CMsgLobbyPlaytestDetails_default_instance_;

namespace protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[15];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, partner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, is_coach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_codes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, region_ping_failed_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_buyin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyMember, tourney_prevent_until_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, member_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, game_modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, effective_started_matchmaking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, raw_started_matchmaking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, attempt_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchgroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, bot_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_ui_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, team_base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_until_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, match_disabled_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchmaking_max_range_minutes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, matchlanguages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, map_preference_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, common_guilds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, low_priority_games_remaining_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, open_for_join_requests_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, sent_invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, recv_invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, account_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, region_select_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, exclusive_tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_bracket_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_queue_deadline_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, tourney_queue_deadline_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_slots_to_fill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_match_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, party_builder_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, solo_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAParty, bot_script_index_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  16,
  17,
  18,
  6,
  7,
  8,
  9,
  10,
  0,
  30,
  31,
  11,
  12,
  13,
  14,
  20,
  ~0u,
  15,
  ~0u,
  19,
  27,
  ~0u,
  ~0u,
  21,
  22,
  23,
  24,
  25,
  26,
  29,
  32,
  33,
  34,
  35,
  36,
  28,
  37,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite_PartyMember, is_coach_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, sender_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, low_priority_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, as_coach_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTAPartyInvite, invite_gid_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite_LobbyMember, steam_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, sender_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, invite_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobbyInvite, custom_game_timestamp_),
  1,
  2,
  0,
  ~0u,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, lobby_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, leaver_detected_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, first_blood_happened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, discard_match_results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLeaverState, mass_disconnect_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, xp_bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember_CDOTALobbyMemberXPBonus, source_key_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, party_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, meta_xp_awarded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, leaver_actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, prize_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, disabled_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, partner_account_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, enabled_hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, coach_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_no_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, nexon_pc_bang_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, xp_bonuses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, rank_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, cameraman_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, custom_game_product_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, lobby_mvp_vote_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, search_match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTALobbyMember, favorite_team_packed_),
  2,
  3,
  4,
  0,
  5,
  7,
  6,
  8,
  9,
  10,
  15,
  11,
  12,
  ~0u,
  13,
  ~0u,
  21,
  14,
  1,
  ~0u,
  16,
  17,
  ~0u,
  18,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, team_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, guild_banner_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, rank_change_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTeamDetails, is_home_team_),
  0,
  1,
  7,
  4,
  5,
  6,
  11,
  2,
  3,
  8,
  9,
  10,
  14,
  13,
  15,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, item_def_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_supply_crate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, is_timed_drop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyTimedRewardDetails, origin_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLobbyBroadcastChannelInfo, language_code_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby_CExtraMsg, contents_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, left_members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leader_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pending_invites_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, connect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_cheats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, fill_with_bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, intro_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, team_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tutorial_lesson_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, tournament_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, num_spectators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, matchgroup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, cm_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allow_spectating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, timed_reward_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, leagueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, penalty_level_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, load_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, radiant_series_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dire_series_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_generated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, loot_awarded_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, allchat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, dota_tv_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, broadcast_channel_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_leaver_accountid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, low_priority_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, extra_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, save_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, first_blood_happened_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, match_outcome_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, mass_disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_min_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_max_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, partner_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lan_host_ping_to_server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_auto_created_lobby_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, league_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, previous_series_matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, previous_match_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, custom_game_uses_account_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, game_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, pause_setting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, lobby_mvp_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, weekend_tourney_bracket_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_difficulty_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, bot_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, event_progression_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, selection_priority_rules_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_previous_selection_priority_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_current_selection_priority_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_current_priority_team_choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_current_non_priority_team_choice_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSODOTALobby, series_current_selection_priority_used_coin_toss_),
  6,
  ~0u,
  ~0u,
  10,
  9,
  7,
  ~0u,
  8,
  0,
  71,
  17,
  18,
  19,
  1,
  ~0u,
  11,
  12,
  13,
  14,
  15,
  16,
  21,
  23,
  22,
  72,
  73,
  24,
  ~0u,
  2,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  20,
  34,
  3,
  4,
  35,
  38,
  ~0u,
  36,
  37,
  39,
  ~0u,
  5,
  40,
  43,
  41,
  42,
  44,
  45,
  46,
  47,
  48,
  49,
  58,
  50,
  51,
  53,
  ~0u,
  52,
  59,
  54,
  56,
  57,
  62,
  63,
  64,
  74,
  65,
  66,
  60,
  67,
  68,
  69,
  70,
  55,
  61,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyPlaytestDetails, json_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(CSODOTAPartyMember)},
  { 21, 69, sizeof(CSODOTAParty)},
  { 112, 120, sizeof(CSODOTAPartyInvite_PartyMember)},
  { 123, 136, sizeof(CSODOTAPartyInvite)},
  { 144, 151, sizeof(CSODOTALobbyInvite_LobbyMember)},
  { 153, 166, sizeof(CSODOTALobbyInvite)},
  { 174, 185, sizeof(CMsgLeaverState)},
  { 191, 199, sizeof(CDOTALobbyMember_CDOTALobbyMemberXPBonus)},
  { 202, 233, sizeof(CDOTALobbyMember)},
  { 259, 280, sizeof(CLobbyTeamDetails)},
  { 296, 306, sizeof(CLobbyTimedRewardDetails)},
  { 311, 320, sizeof(CLobbyBroadcastChannelInfo)},
  { 324, 331, sizeof(CSODOTALobby_CExtraMsg)},
  { 333, 421, sizeof(CSODOTALobby)},
  { 504, 510, sizeof(CMsgLobbyPlaytestDetails)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAPartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAPartyInvite_PartyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTAPartyInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTALobbyInvite_LobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTALobbyInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLeaverState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTALobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CLobbyTeamDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CLobbyTimedRewardDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CLobbyBroadcastChannelInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTALobby_CExtraMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSODOTALobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyPlaytestDetails_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_common_match_management.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 15);
}

}  // namespace

void TableStruct::Shutdown() {
  _CSODOTAPartyMember_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CSODOTAParty_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CSODOTAPartyInvite_PartyMember_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CSODOTAPartyInvite_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CSODOTALobbyInvite_LobbyMember_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CSODOTALobbyInvite_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgLeaverState_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDOTALobbyMember_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CLobbyTeamDetails_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CLobbyTimedRewardDetails_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CLobbyBroadcastChannelInfo_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CSODOTALobby_CExtraMsg_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CSODOTALobby_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgLobbyPlaytestDetails_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_gcsdk_5fgcmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  _CSODOTAPartyMember_default_instance_.DefaultConstruct();
  _CSODOTAParty_default_instance_.DefaultConstruct();
  _CSODOTAPartyInvite_PartyMember_default_instance_.DefaultConstruct();
  _CSODOTAPartyInvite_default_instance_.DefaultConstruct();
  _CSODOTALobbyInvite_LobbyMember_default_instance_.DefaultConstruct();
  _CSODOTALobbyInvite_default_instance_.DefaultConstruct();
  _CMsgLeaverState_default_instance_.DefaultConstruct();
  _CDOTALobbyMember_CDOTALobbyMemberXPBonus_default_instance_.DefaultConstruct();
  _CDOTALobbyMember_default_instance_.DefaultConstruct();
  _CLobbyTeamDetails_default_instance_.DefaultConstruct();
  _CLobbyTimedRewardDetails_default_instance_.DefaultConstruct();
  _CLobbyBroadcastChannelInfo_default_instance_.DefaultConstruct();
  _CSODOTALobby_CExtraMsg_default_instance_.DefaultConstruct();
  _CSODOTALobby_default_instance_.DefaultConstruct();
  _CMsgLobbyPlaytestDetails_default_instance_.DefaultConstruct();
  _CSODOTALobby_default_instance_.get_mutable()->save_game_ = const_cast< ::proto::dota::CDOTASaveGame*>(
      ::proto::dota::CDOTASaveGame::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-dota_gcmessages_common_match_managemen"
      "t.proto\022\nproto.dota\032\023steammessages.proto"
      "\032\026gcsdk_gcmessages.proto\032\027dota_shared_en"
      "ums.proto\"\237\002\n\022CSODOTAPartyMember\022B\n\014part"
      "ner_type\030\001 \001(\0162\036.proto.dota.PartnerAccou"
      "ntType:\014PARTNER_NONE\022\020\n\010is_coach\030\002 \001(\010\022\035"
      "\n\021region_ping_codes\030\004 \003(\rB\002\020\001\022\035\n\021region_"
      "ping_times\030\005 \003(\rB\002\020\001\022\"\n\032region_ping_fail"
      "ed_bitmask\030\006 \001(\r\022\033\n\023tourney_skill_level\030"
      "\007 \001(\r\022\025\n\rtourney_buyin\030\010 \001(\r\022\035\n\025tourney_"
      "prevent_until\030\t \001(\r\"\212\014\n\014CSODOTAParty\022\026\n\010"
      "party_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tleader_id\030\002 \001(\006\022"
      "\022\n\nmember_ids\030\003 \003(\006\022\022\n\ngame_modes\030\004 \001(\r\022"
      "1\n\005state\030\006 \001(\0162\036.proto.dota.CSODOTAParty"
      ".State:\002UI\022*\n\"effective_started_matchmak"
      "ing_time\030\007 \001(\r\022$\n\034raw_started_matchmakin"
      "g_time\030  \001(\r\022\032\n\022attempt_start_time\030! \001(\r"
      "\022\023\n\013attempt_num\030\" \001(\r\022\023\n\013matchgroups\030\013 \001"
      "(\r\022\037\n\027low_priority_account_id\030\023 \001(\r\022<\n\nm"
      "atch_type\030\025 \001(\0162\025.proto.dota.MatchType:\021"
      "MATCH_TYPE_CASUAL\022M\n\016bot_difficulty\030\026 \001("
      "\0162\035.proto.dota.DOTABotDifficulty:\026BOT_DI"
      "FFICULTY_PASSIVE\022\017\n\007team_id\030\027 \001(\r\022\021\n\ttea"
      "m_name\0303 \001(\t\022\024\n\014team_ui_logo\0304 \001(\004\022\026\n\016te"
      "am_base_logo\0305 \001(\004\022!\n\031match_disabled_unt"
      "il_date\030\030 \001(\r\022!\n\031match_disabled_account_"
      "id\030\031 \001(\r\022%\n\035matchmaking_max_range_minute"
      "s\030\032 \001(\r\022\026\n\016matchlanguages\030\033 \001(\r\022\026\n\016map_p"
      "reference\030& \001(\r\022/\n\007members\030\035 \003(\0132\036.proto"
      ".dota.CSODOTAPartyMember\022\025\n\ropen_guild_i"
      "d\030\036 \001(\r\022\025\n\rcommon_guilds\030\037 \003(\r\022$\n\034low_pr"
      "iority_games_remaining\030# \001(\r\022\036\n\026open_for"
      "_join_requests\030( \001(\010\0224\n\014sent_invites\030) \003"
      "(\0132\036.proto.dota.CSODOTAPartyInvite\0224\n\014re"
      "cv_invites\030* \003(\0132\036.proto.dota.CSODOTAPar"
      "tyInvite\022\025\n\raccount_flags\030+ \001(\r\022\033\n\023regio"
      "n_select_flags\030, \001(\r\022\037\n\027exclusive_tourna"
      "ment_id\030- \001(\r\022\033\n\023tourney_division_id\030/ \001"
      "(\r\022\035\n\025tourney_schedule_time\0300 \001(\r\022\033\n\023tou"
      "rney_skill_level\0301 \001(\r\022\035\n\025tourney_bracke"
      "t_round\0302 \001(\r\022#\n\033tourney_queue_deadline_"
      "time\0306 \001(\r\022q\n\034tourney_queue_deadline_sta"
      "te\0307 \001(\0162&.proto.dota.ETourneyQueueDeadl"
      "ineState:#k_ETourneyQueueDeadlineState_N"
      "ormal\022#\n\033party_builder_slots_to_fill\0308 \001"
      "(\r\022\"\n\032party_builder_match_groups\0309 \001(\r\022 "
      "\n\030party_builder_start_time\030: \001(\r\022\022\n\nsolo"
      "_queue\030; \001(\010\022\030\n\020bot_script_index\030< \001(\r\"0"
      "\n\005State\022\006\n\002UI\020\000\022\021\n\rFINDING_MATCH\020\001\022\014\n\010IN"
      "_MATCH\020\002\"\246\002\n\022CSODOTAPartyInvite\022\026\n\010group"
      "_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsender_id\030\002 \001(\006\022\023\n\013se"
      "nder_name\030\003 \001(\t\022;\n\007members\030\004 \003(\0132*.proto"
      ".dota.CSODOTAPartyInvite.PartyMember\022\017\n\007"
      "team_id\030\005 \001(\r\022\033\n\023low_priority_status\030\006 \001"
      "(\010\022\020\n\010as_coach\030\007 \001(\010\022\022\n\ninvite_gid\030\010 \001(\006"
      "\032\?\n\013PartyMember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam_i"
      "d\030\002 \001(\006\022\020\n\010is_coach\030\004 \001(\010\"\244\002\n\022CSODOTALob"
      "byInvite\022\026\n\010group_id\030\001 \001(\004B\004\200\246\035\001\022\021\n\tsend"
      "er_id\030\002 \001(\006\022\023\n\013sender_name\030\003 \001(\t\022;\n\007memb"
      "ers\030\004 \003(\0132*.proto.dota.CSODOTALobbyInvit"
      "e.LobbyMember\022\026\n\016custom_game_id\030\005 \001(\004\022\022\n"
      "\ninvite_gid\030\006 \001(\006\022\027\n\017custom_game_crc\030\007 \001"
      "(\006\022\035\n\025custom_game_timestamp\030\010 \001(\007\032-\n\013Lob"
      "byMember\022\014\n\004name\030\001 \001(\t\022\020\n\010steam_id\030\002 \001(\006"
      "\"\340\001\n\017CMsgLeaverState\022\023\n\013lobby_state\030\001 \001("
      "\r\022I\n\ngame_state\030\002 \001(\0162\032.proto.dota.DOTA_"
      "GameState:\031DOTA_GAMERULES_STATE_INIT\022\027\n\017"
      "leaver_detected\030\003 \001(\010\022\034\n\024first_blood_hap"
      "pened\030\004 \001(\010\022\035\n\025discard_match_results\030\005 \001"
      "(\010\022\027\n\017mass_disconnect\030\006 \001(\010\"\314\007\n\020CDOTALob"
      "byMember\022\020\n\002id\030\001 \001(\006B\004\200\246\035\001\022\017\n\007hero_id\030\002 "
      "\001(\r\022>\n\004team\030\003 \001(\0162\030.proto.dota.DOTA_GC_T"
      "EAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014\n\004name\030\006 \001("
      "\t\022\014\n\004slot\030\007 \001(\r\022\020\n\010party_id\030\014 \001(\004\022\022\n\nmet"
      "a_level\030\r \001(\r\022\017\n\007meta_xp\030\016 \001(\r\022\027\n\017meta_x"
      "p_awarded\030\017 \001(\r\022G\n\rleaver_status\030\020 \001(\0162\036"
      ".proto.dota.DOTALeaverStatus_t:\020DOTA_LEA"
      "VER_NONE\022\026\n\016leaver_actions\030\034 \001(\r\022\017\n\007chan"
      "nel\030\021 \001(\r\022\027\n\017prize_def_index\030\022 \001(\r\022\030\n\020di"
      "sabled_hero_id\030\024 \003(\r\022J\n\024partner_account_"
      "type\030\025 \001(\0162\036.proto.dota.PartnerAccountTy"
      "pe:\014PARTNER_NONE\022\027\n\017enabled_hero_id\030\026 \003("
      "\r\022A\n\ncoach_team\030\027 \001(\0162\030.proto.dota.DOTA_"
      "GC_TEAM:\023DOTA_GC_TEAM_NOTEAM\022\030\n\020nexon_pc"
      "_bang_no\030\030 \001(\r\022\032\n\022nexon_pc_bang_name\030\031 \001"
      "(\t\022H\n\nxp_bonuses\030\033 \003(\01324.proto.dota.CDOT"
      "ALobbyMember.CDOTALobbyMemberXPBonus\022\023\n\013"
      "rank_change\030\035 \001(\021\022\021\n\tcameraman\030\036 \001(\010\022\037\n\027"
      "custom_game_product_ids\030\037 \003(\r\022!\n\031lobby_m"
      "vp_vote_account_id\030  \001(\r\022C\n\021search_match"
      "_type\030! \001(\0162\025.proto.dota.MatchType:\021MATC"
      "H_TYPE_CASUAL\022\034\n\024favorite_team_packed\030# "
      "\001(\004\032M\n\027CDOTALobbyMemberXPBonus\022\014\n\004type\030\001"
      " \001(\r\022\020\n\010xp_bonus\030\002 \001(\002\022\022\n\nsource_key\030\003 \001"
      "(\004\"\337\002\n\021CLobbyTeamDetails\022\021\n\tteam_name\030\001 "
      "\001(\t\022\020\n\010team_tag\030\003 \001(\t\022\017\n\007team_id\030\004 \001(\r\022\021"
      "\n\tteam_logo\030\005 \001(\004\022\026\n\016team_base_logo\030\006 \001("
      "\004\022\030\n\020team_banner_logo\030\007 \001(\004\022\025\n\rteam_comp"
      "lete\030\010 \001(\010\022\022\n\nguild_name\030\t \001(\t\022\021\n\tguild_"
      "tag\030\n \001(\t\022\020\n\010guild_id\030\013 \001(\r\022\022\n\nguild_log"
      "o\030\014 \001(\004\022\027\n\017guild_base_logo\030\r \001(\004\022\031\n\021guil"
      "d_banner_logo\030\016 \001(\004\022\014\n\004rank\030\017 \001(\r\022\023\n\013ran"
      "k_change\030\020 \001(\021\022\024\n\014is_home_team\030\021 \001(\010\"\206\001\n"
      "\030CLobbyTimedRewardDetails\022\026\n\016item_def_in"
      "dex\030\002 \001(\r\022\027\n\017is_supply_crate\030\003 \001(\010\022\025\n\ris"
      "_timed_drop\030\004 \001(\010\022\022\n\naccount_id\030\005 \001(\r\022\016\n"
      "\006origin\030\006 \001(\r\"r\n\032CLobbyBroadcastChannelI"
      "nfo\022\022\n\nchannel_id\030\001 \001(\r\022\024\n\014country_code\030"
      "\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\025\n\rlanguage_c"
      "ode\030\004 \001(\t\"\214\035\n\014CSODOTALobby\022\026\n\010lobby_id\030\001"
      " \001(\004B\004\200\246\035\001\022-\n\007members\030\002 \003(\0132\034.proto.dota"
      ".CDOTALobbyMember\0222\n\014left_members\030\007 \003(\0132"
      "\034.proto.dota.CDOTALobbyMember\022\021\n\tleader_"
      "id\030\013 \001(\006\022\024\n\tserver_id\030\006 \001(\006:\0010\022\021\n\tgame_m"
      "ode\030\003 \001(\r\022\027\n\017pending_invites\030\n \003(\006\0221\n\005st"
      "ate\030\004 \001(\0162\036.proto.dota.CSODOTALobby.Stat"
      "e:\002UI\022\017\n\007connect\030\005 \001(\t\022\?\n\nlobby_type\030\014 \001"
      "(\0162\".proto.dota.CSODOTALobby.LobbyType:\007"
      "INVALID\022\024\n\014allow_cheats\030\r \001(\010\022\026\n\016fill_wi"
      "th_bots\030\016 \001(\010\022\022\n\nintro_mode\030\017 \001(\010\022\021\n\tgam"
      "e_name\030\020 \001(\t\0223\n\014team_details\030\021 \003(\0132\035.pro"
      "to.dota.CLobbyTeamDetails\022\027\n\017tutorial_le"
      "sson\030\022 \001(\r\022\025\n\rtournament_id\030\023 \001(\r\022\032\n\022tou"
      "rnament_game_id\030\024 \001(\r\022\030\n\rserver_region\030\025"
      " \001(\r:\0010\022I\n\ngame_state\030\026 \001(\0162\032.proto.dota"
      ".DOTA_GameState:\031DOTA_GAMERULES_STATE_IN"
      "IT\022\026\n\016num_spectators\030\027 \001(\r\022\022\n\nmatchgroup"
      "\030\031 \001(\r\0229\n\007cm_pick\030\034 \001(\0162\030.proto.dota.DOT"
      "A_CM_PICK:\016DOTA_CM_RANDOM\022\020\n\010match_id\030\036 "
      "\001(\004\022\036\n\020allow_spectating\030\037 \001(\010:\004true\022R\n\026b"
      "ot_difficulty_radiant\030$ \001(\0162\035.proto.dota"
      ".DOTABotDifficulty:\023BOT_DIFFICULTY_HARD\022"
      "G\n\014game_version\030% \001(\0162\033.proto.dota.DOTAG"
      "ameVersion:\024GAME_VERSION_CURRENT\022B\n\024time"
      "d_reward_details\030& \003(\0132$.proto.dota.CLob"
      "byTimedRewardDetails\022\020\n\010pass_key\030\' \001(\t\022\020"
      "\n\010leagueid\030* \001(\r\022 \n\025penalty_level_radian"
      "t\030+ \001(\r:\0010\022\035\n\022penalty_level_dire\030, \001(\r:\001"
      "0\022\024\n\014load_game_id\030- \001(\r\022\023\n\013series_type\030."
      " \001(\r\022\033\n\023radiant_series_wins\030/ \001(\r\022\030\n\020dir"
      "e_series_wins\0300 \001(\r\022\026\n\016loot_generated\0301 "
      "\001(\r\022\024\n\014loot_awarded\0302 \001(\r\022\026\n\007allchat\0303 \001"
      "(\010:\005false\022C\n\rdota_tv_delay\0305 \001(\0162\034.proto"
      ".dota.LobbyDotaTVDelay:\016LobbyDotaTV_10\022\030"
      "\n\020custom_game_mode\0306 \001(\t\022\027\n\017custom_map_n"
      "ame\0307 \001(\t\022\031\n\021custom_difficulty\0308 \001(\r\022\013\n\003"
      "lan\0309 \001(\010\022F\n\026broadcast_channel_info\030: \003("
      "\0132&.proto.dota.CLobbyBroadcastChannelInf"
      "o\022\036\n\026first_leaver_accountid\030; \001(\r\022\021\n\tser"
      "ies_id\030< \001(\r\022\024\n\014low_priority\030= \001(\010\022:\n\016ex"
      "tra_messages\030> \003(\0132\".proto.dota.CSODOTAL"
      "obby.CExtraMsg\022,\n\tsave_game\030\? \001(\0132\031.prot"
      "o.dota.CDOTASaveGame\022\034\n\024first_blood_happ"
      "ened\030A \001(\010\022I\n\rmatch_outcome\030F \001(\0162\031.prot"
      "o.dota.EMatchOutcome:\027k_EMatchOutcome_Un"
      "known\022\027\n\017mass_disconnect\030C \001(\010\022\026\n\016custom"
      "_game_id\030D \001(\004\022\032\n\022custom_min_players\030G \001"
      "(\r\022\032\n\022custom_max_players\030H \001(\r\022B\n\014partne"
      "r_type\030I \001(\0162\036.proto.dota.PartnerAccount"
      "Type:\014PARTNER_NONE\022&\n\036lan_host_ping_to_s"
      "erver_region\030J \001(\r\022O\n\nvisibility\030K \001(\0162\037"
      ".proto.dota.DOTALobbyVisibility:\032DOTALob"
      "byVisibility_Public\022\027\n\017custom_game_crc\030L"
      " \001(\006\022&\n\036custom_game_auto_created_lobby\030M"
      " \001(\010\022\030\n\020league_series_id\030N \001(\r\022\026\n\016league"
      "_game_id\030O \001(\r\022\035\n\025custom_game_timestamp\030"
      "P \001(\007\022\037\n\027previous_series_matches\030Q \003(\004\022\037"
      "\n\027previous_match_override\030R \001(\004\022(\n custo"
      "m_game_uses_account_records\030S \001(\010\022\027\n\017gam"
      "e_start_time\030W \001(\r\022Y\n\rpause_setting\030X \001("
      "\0162!.proto.dota.LobbyDotaPauseSetting:\037Lo"
      "bbyDotaPauseSetting_Unlimited\022\034\n\024lobby_m"
      "vp_account_id\030Y \001(\r\022#\n\033weekend_tourney_d"
      "ivision_id\030Z \001(\r\022#\n\033weekend_tourney_skil"
      "l_level\030[ \001(\r\022%\n\035weekend_tourney_bracket"
      "_round\030\\ \001(\r\022O\n\023bot_difficulty_dire\030] \001("
      "\0162\035.proto.dota.DOTABotDifficulty:\023BOT_DI"
      "FFICULTY_HARD\022\023\n\013bot_radiant\030^ \001(\004\022\020\n\010bo"
      "t_dire\030_ \001(\004\022!\n\031event_progression_enable"
      "d\030` \001(\010\022m\n\030selection_priority_rules\030a \001("
      "\0162&.proto.dota.DOTASelectionPriorityRule"
      "s:#k_DOTASelectionPriorityRules_Manual\0222"
      "\n*series_previous_selection_priority_tea"
      "m_id\030b \001(\r\0221\n)series_current_selection_p"
      "riority_team_id\030c \001(\r\022{\n#series_current_"
      "priority_team_choice\030d \001(\0162\'.proto.dota."
      "DOTASelectionPriorityChoice:%k_DOTASelec"
      "tionPriorityChoice_Invalid\022\177\n\'series_cur"
      "rent_non_priority_team_choice\030e \001(\0162\'.pr"
      "oto.dota.DOTASelectionPriorityChoice:%k_"
      "DOTASelectionPriorityChoice_Invalid\0228\n0s"
      "eries_current_selection_priority_used_co"
      "in_toss\030f \001(\010\032)\n\tCExtraMsg\022\n\n\002id\030\001 \001(\r\022\020"
      "\n\010contents\030\002 \001(\014\"d\n\005State\022\006\n\002UI\020\000\022\013\n\007REA"
      "DYUP\020\004\022\017\n\013SERVERSETUP\020\001\022\007\n\003RUN\020\002\022\014\n\010POST"
      "GAME\020\003\022\014\n\010NOTREADY\020\005\022\020\n\014SERVERASSIGN\020\006\"\377"
      "\001\n\tLobbyType\022\024\n\007INVALID\020\377\377\377\377\377\377\377\377\377\001\022\020\n\014CA"
      "SUAL_MATCH\020\000\022\014\n\010PRACTICE\020\001\022\016\n\nTOURNAMENT"
      "\020\002\022\022\n\016COOP_BOT_MATCH\020\004\022\025\n\021LEGACY_TEAM_MA"
      "TCH\020\005\022\033\n\027LEGACY_SOLO_QUEUE_MATCH\020\006\022\025\n\021CO"
      "MPETITIVE_MATCH\020\007\022\024\n\020CASUAL_1V1_MATCH\020\010\022"
      "\023\n\017WEEKEND_TOURNEY\020\t\022\023\n\017LOCAL_BOT_MATCH\020"
      "\n\022\r\n\tSPECTATOR\020\013\"(\n\030CMsgLobbyPlaytestDet"
      "ails\022\014\n\004json\030\001 \001(\t*P\n\020LobbyDotaTVDelay\022\022"
      "\n\016LobbyDotaTV_10\020\000\022\023\n\017LobbyDotaTV_120\020\001\022"
      "\023\n\017LobbyDotaTV_300\020\002*\203\001\n\025LobbyDotaPauseS"
      "etting\022#\n\037LobbyDotaPauseSetting_Unlimite"
      "d\020\000\022!\n\035LobbyDotaPauseSetting_Limited\020\001\022\""
      "\n\036LobbyDotaPauseSetting_Disabled\020\002B\005H\001\200\001"
      "\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 8361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_common_match_management.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_gcsdk_5fgcmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto

const ::google::protobuf::EnumDescriptor* CSODOTAParty_State_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[0];
}
bool CSODOTAParty_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTAParty_State CSODOTAParty::UI;
const CSODOTAParty_State CSODOTAParty::FINDING_MATCH;
const CSODOTAParty_State CSODOTAParty::IN_MATCH;
const CSODOTAParty_State CSODOTAParty::State_MIN;
const CSODOTAParty_State CSODOTAParty::State_MAX;
const int CSODOTAParty::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSODOTALobby_State_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[1];
}
bool CSODOTALobby_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTALobby_State CSODOTALobby::UI;
const CSODOTALobby_State CSODOTALobby::READYUP;
const CSODOTALobby_State CSODOTALobby::SERVERSETUP;
const CSODOTALobby_State CSODOTALobby::RUN;
const CSODOTALobby_State CSODOTALobby::POSTGAME;
const CSODOTALobby_State CSODOTALobby::NOTREADY;
const CSODOTALobby_State CSODOTALobby::SERVERASSIGN;
const CSODOTALobby_State CSODOTALobby::State_MIN;
const CSODOTALobby_State CSODOTALobby::State_MAX;
const int CSODOTALobby::State_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CSODOTALobby_LobbyType_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[2];
}
bool CSODOTALobby_LobbyType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CSODOTALobby_LobbyType CSODOTALobby::INVALID;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::PRACTICE;
const CSODOTALobby_LobbyType CSODOTALobby::TOURNAMENT;
const CSODOTALobby_LobbyType CSODOTALobby::COOP_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_TEAM_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::LEGACY_SOLO_QUEUE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::COMPETITIVE_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::CASUAL_1V1_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::WEEKEND_TOURNEY;
const CSODOTALobby_LobbyType CSODOTALobby::LOCAL_BOT_MATCH;
const CSODOTALobby_LobbyType CSODOTALobby::SPECTATOR;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MIN;
const CSODOTALobby_LobbyType CSODOTALobby::LobbyType_MAX;
const int CSODOTALobby::LobbyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* LobbyDotaTVDelay_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[3];
}
bool LobbyDotaTVDelay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LobbyDotaPauseSetting_descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[4];
}
bool LobbyDotaPauseSetting_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyMember::kPartnerTypeFieldNumber;
const int CSODOTAPartyMember::kIsCoachFieldNumber;
const int CSODOTAPartyMember::kRegionPingCodesFieldNumber;
const int CSODOTAPartyMember::kRegionPingTimesFieldNumber;
const int CSODOTAPartyMember::kRegionPingFailedBitmaskFieldNumber;
const int CSODOTAPartyMember::kTourneySkillLevelFieldNumber;
const int CSODOTAPartyMember::kTourneyBuyinFieldNumber;
const int CSODOTAPartyMember::kTourneyPreventUntilFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyMember::CSODOTAPartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyMember)
}
CSODOTAPartyMember::CSODOTAPartyMember(const CSODOTAPartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      region_ping_codes_(from.region_ping_codes_),
      region_ping_times_(from.region_ping_times_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&partner_type_, &from.partner_type_,
    reinterpret_cast<char*>(&tourney_prevent_until_) -
    reinterpret_cast<char*>(&partner_type_) + sizeof(tourney_prevent_until_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyMember)
}

void CSODOTAPartyMember::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&partner_type_, 0, reinterpret_cast<char*>(&tourney_prevent_until_) -
    reinterpret_cast<char*>(&partner_type_) + sizeof(tourney_prevent_until_));
}

CSODOTAPartyMember::~CSODOTAPartyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyMember)
  SharedDtor();
}

void CSODOTAPartyMember::SharedDtor() {
}

void CSODOTAPartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyMember::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAPartyMember& CSODOTAPartyMember::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAPartyMember* CSODOTAPartyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyMember* n = new CSODOTAPartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyMember)
  region_ping_codes_.Clear();
  region_ping_times_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&partner_type_, 0, reinterpret_cast<char*>(&tourney_prevent_until_) -
      reinterpret_cast<char*>(&partner_type_) + sizeof(tourney_prevent_until_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAPartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coach = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_ping_codes = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_region_ping_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_ping_times = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_ping_times())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_region_ping_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_ping_failed_bitmask = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_region_ping_failed_bitmask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_ping_failed_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_buyin = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tourney_buyin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_buyin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_prevent_until = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tourney_prevent_until();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_prevent_until_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->partner_type(), output);
  }

  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_coach(), output);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_codes_cached_byte_size_);
  }
  for (int i = 0, n = this->region_ping_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_codes(i), output);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_ping_times_cached_byte_size_);
  }
  for (int i = 0, n = this->region_ping_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_ping_times(i), output);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->region_ping_failed_bitmask(), output);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->tourney_buyin(), output);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->tourney_prevent_until(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyMember)
}

::google::protobuf::uint8* CSODOTAPartyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->partner_type(), target);
  }

  // optional bool is_coach = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_coach(), target);
  }

  // repeated uint32 region_ping_codes = 4 [packed = true];
  if (this->region_ping_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_ping_codes_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_codes_, target);
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  if (this->region_ping_times_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _region_ping_times_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_ping_times_, target);
  }

  // optional uint32 region_ping_failed_bitmask = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->region_ping_failed_bitmask(), target);
  }

  // optional uint32 tourney_skill_level = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_buyin = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->tourney_buyin(), target);
  }

  // optional uint32 tourney_prevent_until = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->tourney_prevent_until(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyMember)
  return target;
}

size_t CSODOTAPartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 region_ping_codes = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_ping_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_ping_codes_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 region_ping_times = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_ping_times_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _region_ping_times_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional bool is_coach = 2;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

    // optional uint32 region_ping_failed_bitmask = 6;
    if (has_region_ping_failed_bitmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_ping_failed_bitmask());
    }

    // optional uint32 tourney_skill_level = 7;
    if (has_tourney_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional uint32 tourney_buyin = 8;
    if (has_tourney_buyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_buyin());
    }

    // optional uint32 tourney_prevent_until = 9;
    if (has_tourney_prevent_until()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_prevent_until());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyMember::MergeFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_ping_codes_.MergeFrom(from.region_ping_codes_);
  region_ping_times_.MergeFrom(from.region_ping_times_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      partner_type_ = from.partner_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_coach_ = from.is_coach_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
    }
    if (cached_has_bits & 0x00000008u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tourney_buyin_ = from.tourney_buyin_;
    }
    if (cached_has_bits & 0x00000020u) {
      tourney_prevent_until_ = from.tourney_prevent_until_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyMember::CopyFrom(const CSODOTAPartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyMember::Swap(CSODOTAPartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyMember::InternalSwap(CSODOTAPartyMember* other) {
  region_ping_codes_.InternalSwap(&other->region_ping_codes_);
  region_ping_times_.InternalSwap(&other->region_ping_times_);
  std::swap(partner_type_, other->partner_type_);
  std::swap(is_coach_, other->is_coach_);
  std::swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
  std::swap(tourney_skill_level_, other->tourney_skill_level_);
  std::swap(tourney_buyin_, other->tourney_buyin_);
  std::swap(tourney_prevent_until_, other->tourney_prevent_until_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPartyMember

// optional .proto.dota.PartnerAccountType partner_type = 1 [default = PARTNER_NONE];
bool CSODOTAPartyMember::has_partner_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyMember::set_has_partner_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyMember::clear_has_partner_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyMember::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
::proto::dota::PartnerAccountType CSODOTAPartyMember::partner_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.partner_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_type_);
}
void CSODOTAPartyMember::set_partner_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.partner_type)
}

// optional bool is_coach = 2;
bool CSODOTAPartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
bool CSODOTAPartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.is_coach)
  return is_coach_;
}
void CSODOTAPartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.is_coach)
}

// repeated uint32 region_ping_codes = 4 [packed = true];
int CSODOTAPartyMember::region_ping_codes_size() const {
  return region_ping_codes_.size();
}
void CSODOTAPartyMember::clear_region_ping_codes() {
  region_ping_codes_.Clear();
}
::google::protobuf::uint32 CSODOTAPartyMember::region_ping_codes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_.Get(index);
}
void CSODOTAPartyMember::set_region_ping_codes(int index, ::google::protobuf::uint32 value) {
  region_ping_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_codes)
}
void CSODOTAPartyMember::add_region_ping_codes(::google::protobuf::uint32 value) {
  region_ping_codes_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyMember.region_ping_codes)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_codes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return region_ping_codes_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_codes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyMember.region_ping_codes)
  return &region_ping_codes_;
}

// repeated uint32 region_ping_times = 5 [packed = true];
int CSODOTAPartyMember::region_ping_times_size() const {
  return region_ping_times_.size();
}
void CSODOTAPartyMember::clear_region_ping_times() {
  region_ping_times_.Clear();
}
::google::protobuf::uint32 CSODOTAPartyMember::region_ping_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_times)
  return region_ping_times_.Get(index);
}
void CSODOTAPartyMember::set_region_ping_times(int index, ::google::protobuf::uint32 value) {
  region_ping_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_times)
}
void CSODOTAPartyMember::add_region_ping_times(::google::protobuf::uint32 value) {
  region_ping_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyMember.region_ping_times)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAPartyMember::region_ping_times() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyMember.region_ping_times)
  return region_ping_times_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAPartyMember::mutable_region_ping_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyMember.region_ping_times)
  return &region_ping_times_;
}

// optional uint32 region_ping_failed_bitmask = 6;
bool CSODOTAPartyMember::has_region_ping_failed_bitmask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPartyMember::set_has_region_ping_failed_bitmask() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPartyMember::clear_has_region_ping_failed_bitmask() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPartyMember::clear_region_ping_failed_bitmask() {
  region_ping_failed_bitmask_ = 0u;
  clear_has_region_ping_failed_bitmask();
}
::google::protobuf::uint32 CSODOTAPartyMember::region_ping_failed_bitmask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.region_ping_failed_bitmask)
  return region_ping_failed_bitmask_;
}
void CSODOTAPartyMember::set_region_ping_failed_bitmask(::google::protobuf::uint32 value) {
  set_has_region_ping_failed_bitmask();
  region_ping_failed_bitmask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.region_ping_failed_bitmask)
}

// optional uint32 tourney_skill_level = 7;
bool CSODOTAPartyMember::has_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAPartyMember::set_has_tourney_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAPartyMember::clear_has_tourney_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAPartyMember::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
::google::protobuf::uint32 CSODOTAPartyMember::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_skill_level)
  return tourney_skill_level_;
}
void CSODOTAPartyMember::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_skill_level)
}

// optional uint32 tourney_buyin = 8;
bool CSODOTAPartyMember::has_tourney_buyin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAPartyMember::set_has_tourney_buyin() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAPartyMember::clear_has_tourney_buyin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAPartyMember::clear_tourney_buyin() {
  tourney_buyin_ = 0u;
  clear_has_tourney_buyin();
}
::google::protobuf::uint32 CSODOTAPartyMember::tourney_buyin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_buyin)
  return tourney_buyin_;
}
void CSODOTAPartyMember::set_tourney_buyin(::google::protobuf::uint32 value) {
  set_has_tourney_buyin();
  tourney_buyin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_buyin)
}

// optional uint32 tourney_prevent_until = 9;
bool CSODOTAPartyMember::has_tourney_prevent_until() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAPartyMember::set_has_tourney_prevent_until() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAPartyMember::clear_has_tourney_prevent_until() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAPartyMember::clear_tourney_prevent_until() {
  tourney_prevent_until_ = 0u;
  clear_has_tourney_prevent_until();
}
::google::protobuf::uint32 CSODOTAPartyMember::tourney_prevent_until() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyMember.tourney_prevent_until)
  return tourney_prevent_until_;
}
void CSODOTAPartyMember::set_tourney_prevent_until(::google::protobuf::uint32 value) {
  set_has_tourney_prevent_until();
  tourney_prevent_until_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyMember.tourney_prevent_until)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAParty::kPartyIdFieldNumber;
const int CSODOTAParty::kLeaderIdFieldNumber;
const int CSODOTAParty::kMemberIdsFieldNumber;
const int CSODOTAParty::kGameModesFieldNumber;
const int CSODOTAParty::kStateFieldNumber;
const int CSODOTAParty::kEffectiveStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kRawStartedMatchmakingTimeFieldNumber;
const int CSODOTAParty::kAttemptStartTimeFieldNumber;
const int CSODOTAParty::kAttemptNumFieldNumber;
const int CSODOTAParty::kMatchgroupsFieldNumber;
const int CSODOTAParty::kLowPriorityAccountIdFieldNumber;
const int CSODOTAParty::kMatchTypeFieldNumber;
const int CSODOTAParty::kBotDifficultyFieldNumber;
const int CSODOTAParty::kTeamIdFieldNumber;
const int CSODOTAParty::kTeamNameFieldNumber;
const int CSODOTAParty::kTeamUiLogoFieldNumber;
const int CSODOTAParty::kTeamBaseLogoFieldNumber;
const int CSODOTAParty::kMatchDisabledUntilDateFieldNumber;
const int CSODOTAParty::kMatchDisabledAccountIdFieldNumber;
const int CSODOTAParty::kMatchmakingMaxRangeMinutesFieldNumber;
const int CSODOTAParty::kMatchlanguagesFieldNumber;
const int CSODOTAParty::kMapPreferenceFieldNumber;
const int CSODOTAParty::kMembersFieldNumber;
const int CSODOTAParty::kOpenGuildIdFieldNumber;
const int CSODOTAParty::kCommonGuildsFieldNumber;
const int CSODOTAParty::kLowPriorityGamesRemainingFieldNumber;
const int CSODOTAParty::kOpenForJoinRequestsFieldNumber;
const int CSODOTAParty::kSentInvitesFieldNumber;
const int CSODOTAParty::kRecvInvitesFieldNumber;
const int CSODOTAParty::kAccountFlagsFieldNumber;
const int CSODOTAParty::kRegionSelectFlagsFieldNumber;
const int CSODOTAParty::kExclusiveTournamentIdFieldNumber;
const int CSODOTAParty::kTourneyDivisionIdFieldNumber;
const int CSODOTAParty::kTourneyScheduleTimeFieldNumber;
const int CSODOTAParty::kTourneySkillLevelFieldNumber;
const int CSODOTAParty::kTourneyBracketRoundFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineTimeFieldNumber;
const int CSODOTAParty::kTourneyQueueDeadlineStateFieldNumber;
const int CSODOTAParty::kPartyBuilderSlotsToFillFieldNumber;
const int CSODOTAParty::kPartyBuilderMatchGroupsFieldNumber;
const int CSODOTAParty::kPartyBuilderStartTimeFieldNumber;
const int CSODOTAParty::kSoloQueueFieldNumber;
const int CSODOTAParty::kBotScriptIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAParty::CSODOTAParty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAParty)
}
CSODOTAParty::CSODOTAParty(const CSODOTAParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      member_ids_(from.member_ids_),
      members_(from.members_),
      common_guilds_(from.common_guilds_),
      sent_invites_(from.sent_invites_),
      recv_invites_(from.recv_invites_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&party_id_, &from.party_id_,
    reinterpret_cast<char*>(&bot_script_index_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(bot_script_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAParty)
}

void CSODOTAParty::SharedCtor() {
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&party_id_, 0, reinterpret_cast<char*>(&bot_script_index_) -
    reinterpret_cast<char*>(&party_id_) + sizeof(bot_script_index_));
  _cached_size_ = 0;
}

CSODOTAParty::~CSODOTAParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAParty)
  SharedDtor();
}

void CSODOTAParty::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAParty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAParty::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAParty& CSODOTAParty::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAParty* CSODOTAParty::New(::google::protobuf::Arena* arena) const {
  CSODOTAParty* n = new CSODOTAParty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAParty)
  member_ids_.Clear();
  members_.Clear();
  common_guilds_.Clear();
  sent_invites_.Clear();
  recv_invites_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&party_id_, 0, reinterpret_cast<char*>(&low_priority_account_id_) -
      reinterpret_cast<char*>(&party_id_) + sizeof(low_priority_account_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&match_type_, 0, reinterpret_cast<char*>(&open_guild_id_) -
      reinterpret_cast<char*>(&match_type_) + sizeof(open_guild_id_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&raw_started_matchmaking_time_, 0, reinterpret_cast<char*>(&exclusive_tournament_id_) -
      reinterpret_cast<char*>(&raw_started_matchmaking_time_) + sizeof(exclusive_tournament_id_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&tourney_division_id_, 0, reinterpret_cast<char*>(&team_base_logo_) -
      reinterpret_cast<char*>(&tourney_division_id_) + sizeof(team_base_logo_));
  }
  if (_has_bits_[32 / 32] & 63u) {
    ::memset(&tourney_queue_deadline_time_, 0, reinterpret_cast<char*>(&bot_script_index_) -
      reinterpret_cast<char*>(&tourney_queue_deadline_time_) + sizeof(bot_script_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAParty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_leader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 member_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 25u, input, this->mutable_member_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_member_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_modes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_modes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTAParty_State_IsValid(value)) {
            set_state(static_cast< ::proto::dota::CSODOTAParty_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effective_started_matchmaking_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_effective_started_matchmaking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effective_started_matchmaking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_matchgroups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_account_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_low_priority_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_until_date = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_match_disabled_until_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_until_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_disabled_account_id = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_match_disabled_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_disabled_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchmaking_max_range_minutes = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_matchmaking_max_range_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchmaking_max_range_minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchlanguages = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_matchlanguages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyMember members = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 open_guild_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_open_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &open_guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 common_guilds = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248u, input, this->mutable_common_guilds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(250u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_common_guilds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 raw_started_matchmaking_time = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_raw_started_matchmaking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raw_started_matchmaking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_start_time = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_attempt_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 attempt_num = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_attempt_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attempt_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 low_priority_games_remaining = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_low_priority_games_remaining();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_priority_games_remaining_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 map_preference = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_map_preference();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_preference_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool open_for_join_requests = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_open_for_join_requests();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_for_join_requests_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(330u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sent_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(338u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recv_invites()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_flags = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_account_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_select_flags = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_region_select_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 exclusive_tournament_id = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_exclusive_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exclusive_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_division_id = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_tourney_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_schedule_time = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_tourney_schedule_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_skill_level = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_bracket_round = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_tourney_bracket_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAParty.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_ui_logo = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(416u)) {
          set_has_team_ui_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_team_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tourney_queue_deadline_time = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(432u)) {
          set_has_tourney_queue_deadline_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tourney_queue_deadline_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(440u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETourneyQueueDeadlineState_IsValid(value)) {
            set_tourney_queue_deadline_state(static_cast< ::proto::dota::ETourneyQueueDeadlineState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(55, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_slots_to_fill = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_party_builder_slots_to_fill();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_slots_to_fill_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_match_groups = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(456u)) {
          set_has_party_builder_match_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_match_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_builder_start_time = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_party_builder_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_builder_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_queue = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(472u)) {
          set_has_solo_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_script_index = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_bot_script_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_script_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAParty)
  return false;
#undef DO_
}

void CSODOTAParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->leader_id(), output);
  }

  // repeated fixed64 member_ids = 3;
  for (int i = 0, n = this->member_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      3, this->member_ids(i), output);
  }

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->effective_started_matchmaking_time(), output);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->matchgroups(), output);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->low_priority_account_id(), output);
  }

  // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->match_type(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->bot_difficulty(), output);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->team_id(), output);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->match_disabled_until_date(), output);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->match_disabled_account_id(), output);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->matchmaking_max_range_minutes(), output);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->matchlanguages(), output);
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->members(i), output);
  }

  // optional uint32 open_guild_id = 30;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->open_guild_id(), output);
  }

  // repeated uint32 common_guilds = 31;
  for (int i = 0, n = this->common_guilds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->common_guilds(i), output);
  }

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->raw_started_matchmaking_time(), output);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->attempt_start_time(), output);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->attempt_num(), output);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->low_priority_games_remaining(), output);
  }

  // optional uint32 map_preference = 38;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->map_preference(), output);
  }

  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->open_for_join_requests(), output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0, n = this->sent_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->sent_invites(i), output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0, n = this->recv_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->recv_invites(i), output);
  }

  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->account_flags(), output);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->region_select_flags(), output);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->exclusive_tournament_id(), output);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->tourney_division_id(), output);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->tourney_schedule_time(), output);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->tourney_skill_level(), output);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->tourney_bracket_round(), output);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAParty.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->team_name(), output);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(52, this->team_ui_logo(), output);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(53, this->team_base_logo(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->tourney_queue_deadline_time(), output);
  }

  // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      55, this->tourney_queue_deadline_state(), output);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->party_builder_slots_to_fill(), output);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->party_builder_match_groups(), output);
  }

  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->party_builder_start_time(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(59, this->solo_queue(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bot_script_index = 60;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->bot_script_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAParty)
}

::google::protobuf::uint8* CSODOTAParty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional fixed64 leader_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->leader_id(), target);
  }

  // repeated fixed64 member_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(3, this->member_ids_, target);

  // optional uint32 game_modes = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // optional uint32 effective_started_matchmaking_time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->effective_started_matchmaking_time(), target);
  }

  // optional uint32 matchgroups = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->matchgroups(), target);
  }

  // optional uint32 low_priority_account_id = 19;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->low_priority_account_id(), target);
  }

  // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->match_type(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->bot_difficulty(), target);
  }

  // optional uint32 team_id = 23;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->team_id(), target);
  }

  // optional uint32 match_disabled_until_date = 24;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->match_disabled_until_date(), target);
  }

  // optional uint32 match_disabled_account_id = 25;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->match_disabled_account_id(), target);
  }

  // optional uint32 matchmaking_max_range_minutes = 26;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->matchmaking_max_range_minutes(), target);
  }

  // optional uint32 matchlanguages = 27;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->matchlanguages(), target);
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, this->members(i), deterministic, target);
  }

  // optional uint32 open_guild_id = 30;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->open_guild_id(), target);
  }

  // repeated uint32 common_guilds = 31;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(31, this->common_guilds_, target);

  // optional uint32 raw_started_matchmaking_time = 32;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->raw_started_matchmaking_time(), target);
  }

  // optional uint32 attempt_start_time = 33;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->attempt_start_time(), target);
  }

  // optional uint32 attempt_num = 34;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->attempt_num(), target);
  }

  // optional uint32 low_priority_games_remaining = 35;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->low_priority_games_remaining(), target);
  }

  // optional uint32 map_preference = 38;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->map_preference(), target);
  }

  // optional bool open_for_join_requests = 40;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->open_for_join_requests(), target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  for (unsigned int i = 0, n = this->sent_invites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        41, this->sent_invites(i), deterministic, target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  for (unsigned int i = 0, n = this->recv_invites_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        42, this->recv_invites(i), deterministic, target);
  }

  // optional uint32 account_flags = 43;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->account_flags(), target);
  }

  // optional uint32 region_select_flags = 44;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->region_select_flags(), target);
  }

  // optional uint32 exclusive_tournament_id = 45;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->exclusive_tournament_id(), target);
  }

  // optional uint32 tourney_division_id = 47;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->tourney_division_id(), target);
  }

  // optional uint32 tourney_schedule_time = 48;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->tourney_schedule_time(), target);
  }

  // optional uint32 tourney_skill_level = 49;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->tourney_skill_level(), target);
  }

  // optional uint32 tourney_bracket_round = 50;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->tourney_bracket_round(), target);
  }

  // optional string team_name = 51;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAParty.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->team_name(), target);
  }

  // optional uint64 team_ui_logo = 52;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(52, this->team_ui_logo(), target);
  }

  // optional uint64 team_base_logo = 53;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(53, this->team_base_logo(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 tourney_queue_deadline_time = 54;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->tourney_queue_deadline_time(), target);
  }

  // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      55, this->tourney_queue_deadline_state(), target);
  }

  // optional uint32 party_builder_slots_to_fill = 56;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->party_builder_slots_to_fill(), target);
  }

  // optional uint32 party_builder_match_groups = 57;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->party_builder_match_groups(), target);
  }

  // optional uint32 party_builder_start_time = 58;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->party_builder_start_time(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool solo_queue = 59;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(59, this->solo_queue(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 bot_script_index = 60;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->bot_script_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAParty)
  return target;
}

size_t CSODOTAParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 member_ids = 3;
  {
    unsigned int count = this->member_ids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->member_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSODOTAPartyMember members = 29;
  {
    unsigned int count = this->members_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated uint32 common_guilds = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->common_guilds_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->common_guilds_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
  {
    unsigned int count = this->sent_invites_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sent_invites(i));
    }
  }

  // repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
  {
    unsigned int count = this->recv_invites_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recv_invites(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 51;
    if (has_team_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional fixed64 leader_id = 2;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 game_modes = 4;
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 effective_started_matchmaking_time = 7;
    if (has_effective_started_matchmaking_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effective_started_matchmaking_time());
    }

    // optional uint32 matchgroups = 11;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 low_priority_account_id = 19;
    if (has_low_priority_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_account_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional uint32 team_id = 23;
    if (has_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 match_disabled_until_date = 24;
    if (has_match_disabled_until_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_until_date());
    }

    // optional uint32 match_disabled_account_id = 25;
    if (has_match_disabled_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_disabled_account_id());
    }

    // optional uint32 matchmaking_max_range_minutes = 26;
    if (has_matchmaking_max_range_minutes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchmaking_max_range_minutes());
    }

    // optional uint32 matchlanguages = 27;
    if (has_matchlanguages()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

    // optional uint32 open_guild_id = 30;
    if (has_open_guild_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->open_guild_id());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 raw_started_matchmaking_time = 32;
    if (has_raw_started_matchmaking_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raw_started_matchmaking_time());
    }

    // optional uint32 attempt_start_time = 33;
    if (has_attempt_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_start_time());
    }

    // optional uint32 attempt_num = 34;
    if (has_attempt_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attempt_num());
    }

    // optional uint32 low_priority_games_remaining = 35;
    if (has_low_priority_games_remaining()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_priority_games_remaining());
    }

    // optional uint32 map_preference = 38;
    if (has_map_preference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_preference());
    }

    // optional uint32 account_flags = 43;
    if (has_account_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_flags());
    }

    // optional uint32 region_select_flags = 44;
    if (has_region_select_flags()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

    // optional uint32 exclusive_tournament_id = 45;
    if (has_exclusive_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exclusive_tournament_id());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 tourney_division_id = 47;
    if (has_tourney_division_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_division_id());
    }

    // optional uint32 tourney_schedule_time = 48;
    if (has_tourney_schedule_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_schedule_time());
    }

    // optional uint32 tourney_skill_level = 49;
    if (has_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_skill_level());
    }

    // optional bool open_for_join_requests = 40;
    if (has_open_for_join_requests()) {
      total_size += 2 + 1;
    }

    // optional bool solo_queue = 59;
    if (has_solo_queue()) {
      total_size += 2 + 1;
    }

    // optional uint32 tourney_bracket_round = 50;
    if (has_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_bracket_round());
    }

    // optional uint64 team_ui_logo = 52;
    if (has_team_ui_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

    // optional uint64 team_base_logo = 53;
    if (has_team_base_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

  }
  if (_has_bits_[32 / 32] & 63u) {
    // optional uint32 tourney_queue_deadline_time = 54;
    if (has_tourney_queue_deadline_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tourney_queue_deadline_time());
    }

    // optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
    if (has_tourney_queue_deadline_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tourney_queue_deadline_state());
    }

    // optional uint32 party_builder_slots_to_fill = 56;
    if (has_party_builder_slots_to_fill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_slots_to_fill());
    }

    // optional uint32 party_builder_match_groups = 57;
    if (has_party_builder_match_groups()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_match_groups());
    }

    // optional uint32 party_builder_start_time = 58;
    if (has_party_builder_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_builder_start_time());
    }

    // optional uint32 bot_script_index = 60;
    if (has_bot_script_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_script_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAParty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAParty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAParty)
    MergeFrom(*source);
  }
}

void CSODOTAParty::MergeFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_ids_.MergeFrom(from.member_ids_);
  members_.MergeFrom(from.members_);
  common_guilds_.MergeFrom(from.common_guilds_);
  sent_invites_.MergeFrom(from.sent_invites_);
  recv_invites_.MergeFrom(from.recv_invites_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      effective_started_matchmaking_time_ = from.effective_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_priority_account_id_ = from.low_priority_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_disabled_until_date_ = from.match_disabled_until_date_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_disabled_account_id_ = from.match_disabled_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      matchmaking_max_range_minutes_ = from.matchmaking_max_range_minutes_;
    }
    if (cached_has_bits & 0x00004000u) {
      matchlanguages_ = from.matchlanguages_;
    }
    if (cached_has_bits & 0x00008000u) {
      open_guild_id_ = from.open_guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      raw_started_matchmaking_time_ = from.raw_started_matchmaking_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      attempt_start_time_ = from.attempt_start_time_;
    }
    if (cached_has_bits & 0x00040000u) {
      attempt_num_ = from.attempt_num_;
    }
    if (cached_has_bits & 0x00080000u) {
      low_priority_games_remaining_ = from.low_priority_games_remaining_;
    }
    if (cached_has_bits & 0x00100000u) {
      map_preference_ = from.map_preference_;
    }
    if (cached_has_bits & 0x00200000u) {
      account_flags_ = from.account_flags_;
    }
    if (cached_has_bits & 0x00400000u) {
      region_select_flags_ = from.region_select_flags_;
    }
    if (cached_has_bits & 0x00800000u) {
      exclusive_tournament_id_ = from.exclusive_tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      tourney_division_id_ = from.tourney_division_id_;
    }
    if (cached_has_bits & 0x02000000u) {
      tourney_schedule_time_ = from.tourney_schedule_time_;
    }
    if (cached_has_bits & 0x04000000u) {
      tourney_skill_level_ = from.tourney_skill_level_;
    }
    if (cached_has_bits & 0x08000000u) {
      open_for_join_requests_ = from.open_for_join_requests_;
    }
    if (cached_has_bits & 0x10000000u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x20000000u) {
      tourney_bracket_round_ = from.tourney_bracket_round_;
    }
    if (cached_has_bits & 0x40000000u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x80000000u) {
      team_base_logo_ = from.team_base_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      tourney_queue_deadline_time_ = from.tourney_queue_deadline_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      tourney_queue_deadline_state_ = from.tourney_queue_deadline_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_builder_slots_to_fill_ = from.party_builder_slots_to_fill_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_builder_match_groups_ = from.party_builder_match_groups_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_builder_start_time_ = from.party_builder_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      bot_script_index_ = from.bot_script_index_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CSODOTAParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAParty::CopyFrom(const CSODOTAParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAParty::IsInitialized() const {
  return true;
}

void CSODOTAParty::Swap(CSODOTAParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAParty::InternalSwap(CSODOTAParty* other) {
  member_ids_.InternalSwap(&other->member_ids_);
  members_.InternalSwap(&other->members_);
  common_guilds_.InternalSwap(&other->common_guilds_);
  sent_invites_.InternalSwap(&other->sent_invites_);
  recv_invites_.InternalSwap(&other->recv_invites_);
  team_name_.Swap(&other->team_name_);
  std::swap(party_id_, other->party_id_);
  std::swap(leader_id_, other->leader_id_);
  std::swap(game_modes_, other->game_modes_);
  std::swap(state_, other->state_);
  std::swap(effective_started_matchmaking_time_, other->effective_started_matchmaking_time_);
  std::swap(matchgroups_, other->matchgroups_);
  std::swap(low_priority_account_id_, other->low_priority_account_id_);
  std::swap(match_type_, other->match_type_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(team_id_, other->team_id_);
  std::swap(match_disabled_until_date_, other->match_disabled_until_date_);
  std::swap(match_disabled_account_id_, other->match_disabled_account_id_);
  std::swap(matchmaking_max_range_minutes_, other->matchmaking_max_range_minutes_);
  std::swap(matchlanguages_, other->matchlanguages_);
  std::swap(open_guild_id_, other->open_guild_id_);
  std::swap(raw_started_matchmaking_time_, other->raw_started_matchmaking_time_);
  std::swap(attempt_start_time_, other->attempt_start_time_);
  std::swap(attempt_num_, other->attempt_num_);
  std::swap(low_priority_games_remaining_, other->low_priority_games_remaining_);
  std::swap(map_preference_, other->map_preference_);
  std::swap(account_flags_, other->account_flags_);
  std::swap(region_select_flags_, other->region_select_flags_);
  std::swap(exclusive_tournament_id_, other->exclusive_tournament_id_);
  std::swap(tourney_division_id_, other->tourney_division_id_);
  std::swap(tourney_schedule_time_, other->tourney_schedule_time_);
  std::swap(tourney_skill_level_, other->tourney_skill_level_);
  std::swap(open_for_join_requests_, other->open_for_join_requests_);
  std::swap(solo_queue_, other->solo_queue_);
  std::swap(tourney_bracket_round_, other->tourney_bracket_round_);
  std::swap(team_ui_logo_, other->team_ui_logo_);
  std::swap(team_base_logo_, other->team_base_logo_);
  std::swap(tourney_queue_deadline_time_, other->tourney_queue_deadline_time_);
  std::swap(tourney_queue_deadline_state_, other->tourney_queue_deadline_state_);
  std::swap(party_builder_slots_to_fill_, other->party_builder_slots_to_fill_);
  std::swap(party_builder_match_groups_, other->party_builder_match_groups_);
  std::swap(party_builder_start_time_, other->party_builder_start_time_);
  std::swap(bot_script_index_, other->bot_script_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAParty::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAParty

// optional uint64 party_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTAParty::has_party_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAParty::set_has_party_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAParty::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAParty::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CSODOTAParty::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_id)
  return party_id_;
}
void CSODOTAParty::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_id)
}

// optional fixed64 leader_id = 2;
bool CSODOTAParty::has_leader_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAParty::set_has_leader_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAParty::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAParty::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
::google::protobuf::uint64 CSODOTAParty::leader_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.leader_id)
  return leader_id_;
}
void CSODOTAParty::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.leader_id)
}

// repeated fixed64 member_ids = 3;
int CSODOTAParty::member_ids_size() const {
  return member_ids_.size();
}
void CSODOTAParty::clear_member_ids() {
  member_ids_.Clear();
}
::google::protobuf::uint64 CSODOTAParty::member_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.member_ids)
  return member_ids_.Get(index);
}
void CSODOTAParty::set_member_ids(int index, ::google::protobuf::uint64 value) {
  member_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.member_ids)
}
void CSODOTAParty::add_member_ids(::google::protobuf::uint64 value) {
  member_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.member_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTAParty::member_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.member_ids)
  return member_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTAParty::mutable_member_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.member_ids)
  return &member_ids_;
}

// optional uint32 game_modes = 4;
bool CSODOTAParty::has_game_modes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAParty::set_has_game_modes() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAParty::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAParty::clear_game_modes() {
  game_modes_ = 0u;
  clear_has_game_modes();
}
::google::protobuf::uint32 CSODOTAParty::game_modes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.game_modes)
  return game_modes_;
}
void CSODOTAParty::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.game_modes)
}

// optional .proto.dota.CSODOTAParty.State state = 6 [default = UI];
bool CSODOTAParty::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAParty::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAParty::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAParty::clear_state() {
  state_ = 0;
  clear_has_state();
}
::proto::dota::CSODOTAParty_State CSODOTAParty::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.state)
  return static_cast< ::proto::dota::CSODOTAParty_State >(state_);
}
void CSODOTAParty::set_state(::proto::dota::CSODOTAParty_State value) {
  assert(::proto::dota::CSODOTAParty_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.state)
}

// optional uint32 effective_started_matchmaking_time = 7;
bool CSODOTAParty::has_effective_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAParty::set_has_effective_started_matchmaking_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAParty::clear_has_effective_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAParty::clear_effective_started_matchmaking_time() {
  effective_started_matchmaking_time_ = 0u;
  clear_has_effective_started_matchmaking_time();
}
::google::protobuf::uint32 CSODOTAParty::effective_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.effective_started_matchmaking_time)
  return effective_started_matchmaking_time_;
}
void CSODOTAParty::set_effective_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_effective_started_matchmaking_time();
  effective_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.effective_started_matchmaking_time)
}

// optional uint32 raw_started_matchmaking_time = 32;
bool CSODOTAParty::has_raw_started_matchmaking_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTAParty::set_has_raw_started_matchmaking_time() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTAParty::clear_has_raw_started_matchmaking_time() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTAParty::clear_raw_started_matchmaking_time() {
  raw_started_matchmaking_time_ = 0u;
  clear_has_raw_started_matchmaking_time();
}
::google::protobuf::uint32 CSODOTAParty::raw_started_matchmaking_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.raw_started_matchmaking_time)
  return raw_started_matchmaking_time_;
}
void CSODOTAParty::set_raw_started_matchmaking_time(::google::protobuf::uint32 value) {
  set_has_raw_started_matchmaking_time();
  raw_started_matchmaking_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.raw_started_matchmaking_time)
}

// optional uint32 attempt_start_time = 33;
bool CSODOTAParty::has_attempt_start_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTAParty::set_has_attempt_start_time() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTAParty::clear_has_attempt_start_time() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTAParty::clear_attempt_start_time() {
  attempt_start_time_ = 0u;
  clear_has_attempt_start_time();
}
::google::protobuf::uint32 CSODOTAParty::attempt_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.attempt_start_time)
  return attempt_start_time_;
}
void CSODOTAParty::set_attempt_start_time(::google::protobuf::uint32 value) {
  set_has_attempt_start_time();
  attempt_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.attempt_start_time)
}

// optional uint32 attempt_num = 34;
bool CSODOTAParty::has_attempt_num() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTAParty::set_has_attempt_num() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTAParty::clear_has_attempt_num() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTAParty::clear_attempt_num() {
  attempt_num_ = 0u;
  clear_has_attempt_num();
}
::google::protobuf::uint32 CSODOTAParty::attempt_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.attempt_num)
  return attempt_num_;
}
void CSODOTAParty::set_attempt_num(::google::protobuf::uint32 value) {
  set_has_attempt_num();
  attempt_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.attempt_num)
}

// optional uint32 matchgroups = 11;
bool CSODOTAParty::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAParty::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAParty::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAParty::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
::google::protobuf::uint32 CSODOTAParty::matchgroups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchgroups)
  return matchgroups_;
}
void CSODOTAParty::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchgroups)
}

// optional uint32 low_priority_account_id = 19;
bool CSODOTAParty::has_low_priority_account_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTAParty::set_has_low_priority_account_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTAParty::clear_has_low_priority_account_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTAParty::clear_low_priority_account_id() {
  low_priority_account_id_ = 0u;
  clear_has_low_priority_account_id();
}
::google::protobuf::uint32 CSODOTAParty::low_priority_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.low_priority_account_id)
  return low_priority_account_id_;
}
void CSODOTAParty::set_low_priority_account_id(::google::protobuf::uint32 value) {
  set_has_low_priority_account_id();
  low_priority_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.low_priority_account_id)
}

// optional .proto.dota.MatchType match_type = 21 [default = MATCH_TYPE_CASUAL];
bool CSODOTAParty::has_match_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTAParty::set_has_match_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTAParty::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTAParty::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
::proto::dota::MatchType CSODOTAParty::match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_type)
  return static_cast< ::proto::dota::MatchType >(match_type_);
}
void CSODOTAParty::set_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_type)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty = 22 [default = BOT_DIFFICULTY_PASSIVE];
bool CSODOTAParty::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTAParty::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTAParty::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTAParty::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
::proto::dota::DOTABotDifficulty CSODOTAParty::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.bot_difficulty)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_);
}
void CSODOTAParty::set_bot_difficulty(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.bot_difficulty)
}

// optional uint32 team_id = 23;
bool CSODOTAParty::has_team_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTAParty::set_has_team_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTAParty::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTAParty::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CSODOTAParty::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_id)
  return team_id_;
}
void CSODOTAParty::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_id)
}

// optional string team_name = 51;
bool CSODOTAParty::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAParty::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAParty::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAParty::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CSODOTAParty::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_name)
  return team_name_.GetNoArena();
}
void CSODOTAParty::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_name)
}
#if LANG_CXX11
void CSODOTAParty::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAParty.team_name)
}
#endif
void CSODOTAParty::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAParty.team_name)
}
void CSODOTAParty::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAParty.team_name)
}
::std::string* CSODOTAParty::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTAParty::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAParty.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTAParty::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAParty.team_name)
}

// optional uint64 team_ui_logo = 52;
bool CSODOTAParty::has_team_ui_logo() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CSODOTAParty::set_has_team_ui_logo() {
  _has_bits_[0] |= 0x40000000u;
}
void CSODOTAParty::clear_has_team_ui_logo() {
  _has_bits_[0] &= ~0x40000000u;
}
void CSODOTAParty::clear_team_ui_logo() {
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_ui_logo();
}
::google::protobuf::uint64 CSODOTAParty::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_ui_logo)
  return team_ui_logo_;
}
void CSODOTAParty::set_team_ui_logo(::google::protobuf::uint64 value) {
  set_has_team_ui_logo();
  team_ui_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_ui_logo)
}

// optional uint64 team_base_logo = 53;
bool CSODOTAParty::has_team_base_logo() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CSODOTAParty::set_has_team_base_logo() {
  _has_bits_[0] |= 0x80000000u;
}
void CSODOTAParty::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x80000000u;
}
void CSODOTAParty::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
::google::protobuf::uint64 CSODOTAParty::team_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.team_base_logo)
  return team_base_logo_;
}
void CSODOTAParty::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.team_base_logo)
}

// optional uint32 match_disabled_until_date = 24;
bool CSODOTAParty::has_match_disabled_until_date() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTAParty::set_has_match_disabled_until_date() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTAParty::clear_has_match_disabled_until_date() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTAParty::clear_match_disabled_until_date() {
  match_disabled_until_date_ = 0u;
  clear_has_match_disabled_until_date();
}
::google::protobuf::uint32 CSODOTAParty::match_disabled_until_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_disabled_until_date)
  return match_disabled_until_date_;
}
void CSODOTAParty::set_match_disabled_until_date(::google::protobuf::uint32 value) {
  set_has_match_disabled_until_date();
  match_disabled_until_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_disabled_until_date)
}

// optional uint32 match_disabled_account_id = 25;
bool CSODOTAParty::has_match_disabled_account_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTAParty::set_has_match_disabled_account_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTAParty::clear_has_match_disabled_account_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTAParty::clear_match_disabled_account_id() {
  match_disabled_account_id_ = 0u;
  clear_has_match_disabled_account_id();
}
::google::protobuf::uint32 CSODOTAParty::match_disabled_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.match_disabled_account_id)
  return match_disabled_account_id_;
}
void CSODOTAParty::set_match_disabled_account_id(::google::protobuf::uint32 value) {
  set_has_match_disabled_account_id();
  match_disabled_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.match_disabled_account_id)
}

// optional uint32 matchmaking_max_range_minutes = 26;
bool CSODOTAParty::has_matchmaking_max_range_minutes() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTAParty::set_has_matchmaking_max_range_minutes() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTAParty::clear_has_matchmaking_max_range_minutes() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTAParty::clear_matchmaking_max_range_minutes() {
  matchmaking_max_range_minutes_ = 0u;
  clear_has_matchmaking_max_range_minutes();
}
::google::protobuf::uint32 CSODOTAParty::matchmaking_max_range_minutes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchmaking_max_range_minutes)
  return matchmaking_max_range_minutes_;
}
void CSODOTAParty::set_matchmaking_max_range_minutes(::google::protobuf::uint32 value) {
  set_has_matchmaking_max_range_minutes();
  matchmaking_max_range_minutes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchmaking_max_range_minutes)
}

// optional uint32 matchlanguages = 27;
bool CSODOTAParty::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSODOTAParty::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00004000u;
}
void CSODOTAParty::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSODOTAParty::clear_matchlanguages() {
  matchlanguages_ = 0u;
  clear_has_matchlanguages();
}
::google::protobuf::uint32 CSODOTAParty::matchlanguages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.matchlanguages)
  return matchlanguages_;
}
void CSODOTAParty::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.matchlanguages)
}

// optional uint32 map_preference = 38;
bool CSODOTAParty::has_map_preference() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTAParty::set_has_map_preference() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTAParty::clear_has_map_preference() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTAParty::clear_map_preference() {
  map_preference_ = 0u;
  clear_has_map_preference();
}
::google::protobuf::uint32 CSODOTAParty::map_preference() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.map_preference)
  return map_preference_;
}
void CSODOTAParty::set_map_preference(::google::protobuf::uint32 value) {
  set_has_map_preference();
  map_preference_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.map_preference)
}

// repeated .proto.dota.CSODOTAPartyMember members = 29;
int CSODOTAParty::members_size() const {
  return members_.size();
}
void CSODOTAParty::clear_members() {
  members_.Clear();
}
const ::proto::dota::CSODOTAPartyMember& CSODOTAParty::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.members)
  return members_.Get(index);
}
::proto::dota::CSODOTAPartyMember* CSODOTAParty::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.members)
  return members_.Mutable(index);
}
::proto::dota::CSODOTAPartyMember* CSODOTAParty::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >*
CSODOTAParty::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyMember >&
CSODOTAParty::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.members)
  return members_;
}

// optional uint32 open_guild_id = 30;
bool CSODOTAParty::has_open_guild_id() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTAParty::set_has_open_guild_id() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTAParty::clear_has_open_guild_id() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTAParty::clear_open_guild_id() {
  open_guild_id_ = 0u;
  clear_has_open_guild_id();
}
::google::protobuf::uint32 CSODOTAParty::open_guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.open_guild_id)
  return open_guild_id_;
}
void CSODOTAParty::set_open_guild_id(::google::protobuf::uint32 value) {
  set_has_open_guild_id();
  open_guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.open_guild_id)
}

// repeated uint32 common_guilds = 31;
int CSODOTAParty::common_guilds_size() const {
  return common_guilds_.size();
}
void CSODOTAParty::clear_common_guilds() {
  common_guilds_.Clear();
}
::google::protobuf::uint32 CSODOTAParty::common_guilds(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.common_guilds)
  return common_guilds_.Get(index);
}
void CSODOTAParty::set_common_guilds(int index, ::google::protobuf::uint32 value) {
  common_guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.common_guilds)
}
void CSODOTAParty::add_common_guilds(::google::protobuf::uint32 value) {
  common_guilds_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.common_guilds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CSODOTAParty::common_guilds() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.common_guilds)
  return common_guilds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CSODOTAParty::mutable_common_guilds() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.common_guilds)
  return &common_guilds_;
}

// optional uint32 low_priority_games_remaining = 35;
bool CSODOTAParty::has_low_priority_games_remaining() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSODOTAParty::set_has_low_priority_games_remaining() {
  _has_bits_[0] |= 0x00080000u;
}
void CSODOTAParty::clear_has_low_priority_games_remaining() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSODOTAParty::clear_low_priority_games_remaining() {
  low_priority_games_remaining_ = 0u;
  clear_has_low_priority_games_remaining();
}
::google::protobuf::uint32 CSODOTAParty::low_priority_games_remaining() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.low_priority_games_remaining)
  return low_priority_games_remaining_;
}
void CSODOTAParty::set_low_priority_games_remaining(::google::protobuf::uint32 value) {
  set_has_low_priority_games_remaining();
  low_priority_games_remaining_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.low_priority_games_remaining)
}

// optional bool open_for_join_requests = 40;
bool CSODOTAParty::has_open_for_join_requests() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CSODOTAParty::set_has_open_for_join_requests() {
  _has_bits_[0] |= 0x08000000u;
}
void CSODOTAParty::clear_has_open_for_join_requests() {
  _has_bits_[0] &= ~0x08000000u;
}
void CSODOTAParty::clear_open_for_join_requests() {
  open_for_join_requests_ = false;
  clear_has_open_for_join_requests();
}
bool CSODOTAParty::open_for_join_requests() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.open_for_join_requests)
  return open_for_join_requests_;
}
void CSODOTAParty::set_open_for_join_requests(bool value) {
  set_has_open_for_join_requests();
  open_for_join_requests_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.open_for_join_requests)
}

// repeated .proto.dota.CSODOTAPartyInvite sent_invites = 41;
int CSODOTAParty::sent_invites_size() const {
  return sent_invites_.size();
}
void CSODOTAParty::clear_sent_invites() {
  sent_invites_.Clear();
}
const ::proto::dota::CSODOTAPartyInvite& CSODOTAParty::sent_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Get(index);
}
::proto::dota::CSODOTAPartyInvite* CSODOTAParty::mutable_sent_invites(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Mutable(index);
}
::proto::dota::CSODOTAPartyInvite* CSODOTAParty::add_sent_invites() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
CSODOTAParty::mutable_sent_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.sent_invites)
  return &sent_invites_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
CSODOTAParty::sent_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.sent_invites)
  return sent_invites_;
}

// repeated .proto.dota.CSODOTAPartyInvite recv_invites = 42;
int CSODOTAParty::recv_invites_size() const {
  return recv_invites_.size();
}
void CSODOTAParty::clear_recv_invites() {
  recv_invites_.Clear();
}
const ::proto::dota::CSODOTAPartyInvite& CSODOTAParty::recv_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Get(index);
}
::proto::dota::CSODOTAPartyInvite* CSODOTAParty::mutable_recv_invites(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Mutable(index);
}
::proto::dota::CSODOTAPartyInvite* CSODOTAParty::add_recv_invites() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >*
CSODOTAParty::mutable_recv_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAParty.recv_invites)
  return &recv_invites_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite >&
CSODOTAParty::recv_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAParty.recv_invites)
  return recv_invites_;
}

// optional uint32 account_flags = 43;
bool CSODOTAParty::has_account_flags() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSODOTAParty::set_has_account_flags() {
  _has_bits_[0] |= 0x00200000u;
}
void CSODOTAParty::clear_has_account_flags() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSODOTAParty::clear_account_flags() {
  account_flags_ = 0u;
  clear_has_account_flags();
}
::google::protobuf::uint32 CSODOTAParty::account_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.account_flags)
  return account_flags_;
}
void CSODOTAParty::set_account_flags(::google::protobuf::uint32 value) {
  set_has_account_flags();
  account_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.account_flags)
}

// optional uint32 region_select_flags = 44;
bool CSODOTAParty::has_region_select_flags() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTAParty::set_has_region_select_flags() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTAParty::clear_has_region_select_flags() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTAParty::clear_region_select_flags() {
  region_select_flags_ = 0u;
  clear_has_region_select_flags();
}
::google::protobuf::uint32 CSODOTAParty::region_select_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.region_select_flags)
  return region_select_flags_;
}
void CSODOTAParty::set_region_select_flags(::google::protobuf::uint32 value) {
  set_has_region_select_flags();
  region_select_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.region_select_flags)
}

// optional uint32 exclusive_tournament_id = 45;
bool CSODOTAParty::has_exclusive_tournament_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTAParty::set_has_exclusive_tournament_id() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTAParty::clear_has_exclusive_tournament_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTAParty::clear_exclusive_tournament_id() {
  exclusive_tournament_id_ = 0u;
  clear_has_exclusive_tournament_id();
}
::google::protobuf::uint32 CSODOTAParty::exclusive_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.exclusive_tournament_id)
  return exclusive_tournament_id_;
}
void CSODOTAParty::set_exclusive_tournament_id(::google::protobuf::uint32 value) {
  set_has_exclusive_tournament_id();
  exclusive_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.exclusive_tournament_id)
}

// optional uint32 tourney_division_id = 47;
bool CSODOTAParty::has_tourney_division_id() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTAParty::set_has_tourney_division_id() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTAParty::clear_has_tourney_division_id() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTAParty::clear_tourney_division_id() {
  tourney_division_id_ = 0u;
  clear_has_tourney_division_id();
}
::google::protobuf::uint32 CSODOTAParty::tourney_division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_division_id)
  return tourney_division_id_;
}
void CSODOTAParty::set_tourney_division_id(::google::protobuf::uint32 value) {
  set_has_tourney_division_id();
  tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_division_id)
}

// optional uint32 tourney_schedule_time = 48;
bool CSODOTAParty::has_tourney_schedule_time() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CSODOTAParty::set_has_tourney_schedule_time() {
  _has_bits_[0] |= 0x02000000u;
}
void CSODOTAParty::clear_has_tourney_schedule_time() {
  _has_bits_[0] &= ~0x02000000u;
}
void CSODOTAParty::clear_tourney_schedule_time() {
  tourney_schedule_time_ = 0u;
  clear_has_tourney_schedule_time();
}
::google::protobuf::uint32 CSODOTAParty::tourney_schedule_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_schedule_time)
  return tourney_schedule_time_;
}
void CSODOTAParty::set_tourney_schedule_time(::google::protobuf::uint32 value) {
  set_has_tourney_schedule_time();
  tourney_schedule_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_schedule_time)
}

// optional uint32 tourney_skill_level = 49;
bool CSODOTAParty::has_tourney_skill_level() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTAParty::set_has_tourney_skill_level() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTAParty::clear_has_tourney_skill_level() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTAParty::clear_tourney_skill_level() {
  tourney_skill_level_ = 0u;
  clear_has_tourney_skill_level();
}
::google::protobuf::uint32 CSODOTAParty::tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_skill_level)
  return tourney_skill_level_;
}
void CSODOTAParty::set_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_tourney_skill_level();
  tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_skill_level)
}

// optional uint32 tourney_bracket_round = 50;
bool CSODOTAParty::has_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CSODOTAParty::set_has_tourney_bracket_round() {
  _has_bits_[0] |= 0x20000000u;
}
void CSODOTAParty::clear_has_tourney_bracket_round() {
  _has_bits_[0] &= ~0x20000000u;
}
void CSODOTAParty::clear_tourney_bracket_round() {
  tourney_bracket_round_ = 0u;
  clear_has_tourney_bracket_round();
}
::google::protobuf::uint32 CSODOTAParty::tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_bracket_round)
  return tourney_bracket_round_;
}
void CSODOTAParty::set_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_tourney_bracket_round();
  tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_bracket_round)
}

// optional uint32 tourney_queue_deadline_time = 54;
bool CSODOTAParty::has_tourney_queue_deadline_time() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CSODOTAParty::set_has_tourney_queue_deadline_time() {
  _has_bits_[1] |= 0x00000001u;
}
void CSODOTAParty::clear_has_tourney_queue_deadline_time() {
  _has_bits_[1] &= ~0x00000001u;
}
void CSODOTAParty::clear_tourney_queue_deadline_time() {
  tourney_queue_deadline_time_ = 0u;
  clear_has_tourney_queue_deadline_time();
}
::google::protobuf::uint32 CSODOTAParty::tourney_queue_deadline_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_queue_deadline_time)
  return tourney_queue_deadline_time_;
}
void CSODOTAParty::set_tourney_queue_deadline_time(::google::protobuf::uint32 value) {
  set_has_tourney_queue_deadline_time();
  tourney_queue_deadline_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_queue_deadline_time)
}

// optional .proto.dota.ETourneyQueueDeadlineState tourney_queue_deadline_state = 55 [default = k_ETourneyQueueDeadlineState_Normal];
bool CSODOTAParty::has_tourney_queue_deadline_state() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CSODOTAParty::set_has_tourney_queue_deadline_state() {
  _has_bits_[1] |= 0x00000002u;
}
void CSODOTAParty::clear_has_tourney_queue_deadline_state() {
  _has_bits_[1] &= ~0x00000002u;
}
void CSODOTAParty::clear_tourney_queue_deadline_state() {
  tourney_queue_deadline_state_ = 0;
  clear_has_tourney_queue_deadline_state();
}
::proto::dota::ETourneyQueueDeadlineState CSODOTAParty::tourney_queue_deadline_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.tourney_queue_deadline_state)
  return static_cast< ::proto::dota::ETourneyQueueDeadlineState >(tourney_queue_deadline_state_);
}
void CSODOTAParty::set_tourney_queue_deadline_state(::proto::dota::ETourneyQueueDeadlineState value) {
  assert(::proto::dota::ETourneyQueueDeadlineState_IsValid(value));
  set_has_tourney_queue_deadline_state();
  tourney_queue_deadline_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.tourney_queue_deadline_state)
}

// optional uint32 party_builder_slots_to_fill = 56;
bool CSODOTAParty::has_party_builder_slots_to_fill() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CSODOTAParty::set_has_party_builder_slots_to_fill() {
  _has_bits_[1] |= 0x00000004u;
}
void CSODOTAParty::clear_has_party_builder_slots_to_fill() {
  _has_bits_[1] &= ~0x00000004u;
}
void CSODOTAParty::clear_party_builder_slots_to_fill() {
  party_builder_slots_to_fill_ = 0u;
  clear_has_party_builder_slots_to_fill();
}
::google::protobuf::uint32 CSODOTAParty::party_builder_slots_to_fill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_slots_to_fill)
  return party_builder_slots_to_fill_;
}
void CSODOTAParty::set_party_builder_slots_to_fill(::google::protobuf::uint32 value) {
  set_has_party_builder_slots_to_fill();
  party_builder_slots_to_fill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_slots_to_fill)
}

// optional uint32 party_builder_match_groups = 57;
bool CSODOTAParty::has_party_builder_match_groups() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CSODOTAParty::set_has_party_builder_match_groups() {
  _has_bits_[1] |= 0x00000008u;
}
void CSODOTAParty::clear_has_party_builder_match_groups() {
  _has_bits_[1] &= ~0x00000008u;
}
void CSODOTAParty::clear_party_builder_match_groups() {
  party_builder_match_groups_ = 0u;
  clear_has_party_builder_match_groups();
}
::google::protobuf::uint32 CSODOTAParty::party_builder_match_groups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_match_groups)
  return party_builder_match_groups_;
}
void CSODOTAParty::set_party_builder_match_groups(::google::protobuf::uint32 value) {
  set_has_party_builder_match_groups();
  party_builder_match_groups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_match_groups)
}

// optional uint32 party_builder_start_time = 58;
bool CSODOTAParty::has_party_builder_start_time() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CSODOTAParty::set_has_party_builder_start_time() {
  _has_bits_[1] |= 0x00000010u;
}
void CSODOTAParty::clear_has_party_builder_start_time() {
  _has_bits_[1] &= ~0x00000010u;
}
void CSODOTAParty::clear_party_builder_start_time() {
  party_builder_start_time_ = 0u;
  clear_has_party_builder_start_time();
}
::google::protobuf::uint32 CSODOTAParty::party_builder_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.party_builder_start_time)
  return party_builder_start_time_;
}
void CSODOTAParty::set_party_builder_start_time(::google::protobuf::uint32 value) {
  set_has_party_builder_start_time();
  party_builder_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.party_builder_start_time)
}

// optional bool solo_queue = 59;
bool CSODOTAParty::has_solo_queue() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CSODOTAParty::set_has_solo_queue() {
  _has_bits_[0] |= 0x10000000u;
}
void CSODOTAParty::clear_has_solo_queue() {
  _has_bits_[0] &= ~0x10000000u;
}
void CSODOTAParty::clear_solo_queue() {
  solo_queue_ = false;
  clear_has_solo_queue();
}
bool CSODOTAParty::solo_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.solo_queue)
  return solo_queue_;
}
void CSODOTAParty::set_solo_queue(bool value) {
  set_has_solo_queue();
  solo_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.solo_queue)
}

// optional uint32 bot_script_index = 60;
bool CSODOTAParty::has_bot_script_index() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CSODOTAParty::set_has_bot_script_index() {
  _has_bits_[1] |= 0x00000020u;
}
void CSODOTAParty::clear_has_bot_script_index() {
  _has_bits_[1] &= ~0x00000020u;
}
void CSODOTAParty::clear_bot_script_index() {
  bot_script_index_ = 0u;
  clear_has_bot_script_index();
}
::google::protobuf::uint32 CSODOTAParty::bot_script_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAParty.bot_script_index)
  return bot_script_index_;
}
void CSODOTAParty::set_bot_script_index(::google::protobuf::uint32 value) {
  set_has_bot_script_index();
  bot_script_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAParty.bot_script_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyInvite_PartyMember::kNameFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kSteamIdFieldNumber;
const int CSODOTAPartyInvite_PartyMember::kIsCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyInvite.PartyMember)
}
CSODOTAPartyInvite_PartyMember::CSODOTAPartyInvite_PartyMember(const CSODOTAPartyInvite_PartyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&is_coach_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(is_coach_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyInvite.PartyMember)
}

void CSODOTAPartyInvite_PartyMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&is_coach_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(is_coach_));
}

CSODOTAPartyInvite_PartyMember::~CSODOTAPartyInvite_PartyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyInvite.PartyMember)
  SharedDtor();
}

void CSODOTAPartyInvite_PartyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite_PartyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite_PartyMember::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite_PartyMember::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite_PartyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyInvite_PartyMember* n = new CSODOTAPartyInvite_PartyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyInvite_PartyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&is_coach_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(is_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAPartyInvite_PartyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAPartyInvite.PartyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_coach = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyInvite.PartyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyInvite.PartyMember)
  return false;
#undef DO_
}

void CSODOTAPartyInvite_PartyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.PartyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyInvite.PartyMember)
}

::google::protobuf::uint8* CSODOTAPartyInvite_PartyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.PartyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool is_coach = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyInvite.PartyMember)
  return target;
}

size_t CSODOTAPartyInvite_PartyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional bool is_coach = 4;
    if (has_is_coach()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite_PartyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyInvite_PartyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyInvite.PartyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyInvite.PartyMember)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite_PartyMember::MergeFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_coach_ = from.is_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite_PartyMember::CopyFrom(const CSODOTAPartyInvite_PartyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyInvite.PartyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite_PartyMember::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite_PartyMember::Swap(CSODOTAPartyInvite_PartyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite_PartyMember::InternalSwap(CSODOTAPartyInvite_PartyMember* other) {
  name_.Swap(&other->name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(is_coach_, other->is_coach_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyInvite_PartyMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPartyInvite_PartyMember

// optional string name = 1;
bool CSODOTAPartyInvite_PartyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyInvite_PartyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSODOTAPartyInvite_PartyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  return name_.GetNoArena();
}
void CSODOTAPartyInvite_PartyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
#if LANG_CXX11
void CSODOTAPartyInvite_PartyMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
#endif
void CSODOTAPartyInvite_PartyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
void CSODOTAPartyInvite_PartyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}
::std::string* CSODOTAPartyInvite_PartyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTAPartyInvite_PartyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAPartyInvite.PartyMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTAPartyInvite_PartyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAPartyInvite.PartyMember.name)
}

// optional fixed64 steam_id = 2;
bool CSODOTAPartyInvite_PartyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyInvite_PartyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CSODOTAPartyInvite_PartyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.steam_id)
  return steam_id_;
}
void CSODOTAPartyInvite_PartyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.steam_id)
}

// optional bool is_coach = 4;
bool CSODOTAPartyInvite_PartyMember::has_is_coach() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPartyInvite_PartyMember::set_has_is_coach() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPartyInvite_PartyMember::clear_has_is_coach() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPartyInvite_PartyMember::clear_is_coach() {
  is_coach_ = false;
  clear_has_is_coach();
}
bool CSODOTAPartyInvite_PartyMember::is_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.PartyMember.is_coach)
  return is_coach_;
}
void CSODOTAPartyInvite_PartyMember::set_is_coach(bool value) {
  set_has_is_coach();
  is_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.PartyMember.is_coach)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTAPartyInvite::kGroupIdFieldNumber;
const int CSODOTAPartyInvite::kSenderIdFieldNumber;
const int CSODOTAPartyInvite::kSenderNameFieldNumber;
const int CSODOTAPartyInvite::kMembersFieldNumber;
const int CSODOTAPartyInvite::kTeamIdFieldNumber;
const int CSODOTAPartyInvite::kLowPriorityStatusFieldNumber;
const int CSODOTAPartyInvite::kAsCoachFieldNumber;
const int CSODOTAPartyInvite::kInviteGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTAPartyInvite::CSODOTAPartyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTAPartyInvite)
}
CSODOTAPartyInvite::CSODOTAPartyInvite(const CSODOTAPartyInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_name()) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&invite_gid_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(invite_gid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTAPartyInvite)
}

void CSODOTAPartyInvite::SharedCtor() {
  _cached_size_ = 0;
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&invite_gid_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(invite_gid_));
}

CSODOTAPartyInvite::~CSODOTAPartyInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTAPartyInvite)
  SharedDtor();
}

void CSODOTAPartyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTAPartyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTAPartyInvite::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTAPartyInvite& CSODOTAPartyInvite::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTAPartyInvite* CSODOTAPartyInvite::New(::google::protobuf::Arena* arena) const {
  CSODOTAPartyInvite* n = new CSODOTAPartyInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTAPartyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTAPartyInvite)
  members_.Clear();
  if (has_sender_name()) {
    GOOGLE_DCHECK(!sender_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sender_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&group_id_, 0, reinterpret_cast<char*>(&invite_gid_) -
      reinterpret_cast<char*>(&group_id_) + sizeof(invite_gid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTAPartyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTAPartyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_sender_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTAPartyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_low_priority_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_coach = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_as_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 invite_gid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_invite_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTAPartyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTAPartyInvite)
  return false;
#undef DO_
}

void CSODOTAPartyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTAPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->low_priority_status(), output);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->as_coach(), output);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(8, this->invite_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTAPartyInvite)
}

::google::protobuf::uint8* CSODOTAPartyInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTAPartyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTAPartyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->members(i), deterministic, target);
  }

  // optional uint32 team_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional bool low_priority_status = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->low_priority_status(), target);
  }

  // optional bool as_coach = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->as_coach(), target);
  }

  // optional fixed64 invite_gid = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(8, this->invite_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTAPartyInvite)
  return target;
}

size_t CSODOTAPartyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTAPartyInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool low_priority_status = 6;
    if (has_low_priority_status()) {
      total_size += 1 + 1;
    }

    // optional bool as_coach = 7;
    if (has_as_coach()) {
      total_size += 1 + 1;
    }

    // optional fixed64 invite_gid = 8;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTAPartyInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTAPartyInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTAPartyInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTAPartyInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTAPartyInvite)
    MergeFrom(*source);
  }
}

void CSODOTAPartyInvite::MergeFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTAPartyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender_name();
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      low_priority_status_ = from.low_priority_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      as_coach_ = from.as_coach_;
    }
    if (cached_has_bits & 0x00000040u) {
      invite_gid_ = from.invite_gid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTAPartyInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTAPartyInvite::CopyFrom(const CSODOTAPartyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTAPartyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTAPartyInvite::IsInitialized() const {
  return true;
}

void CSODOTAPartyInvite::Swap(CSODOTAPartyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTAPartyInvite::InternalSwap(CSODOTAPartyInvite* other) {
  members_.InternalSwap(&other->members_);
  sender_name_.Swap(&other->sender_name_);
  std::swap(group_id_, other->group_id_);
  std::swap(sender_id_, other->sender_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(low_priority_status_, other->low_priority_status_);
  std::swap(as_coach_, other->as_coach_);
  std::swap(invite_gid_, other->invite_gid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTAPartyInvite::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTAPartyInvite

// optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTAPartyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTAPartyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTAPartyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTAPartyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
::google::protobuf::uint64 CSODOTAPartyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.group_id)
  return group_id_;
}
void CSODOTAPartyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.group_id)
}

// optional fixed64 sender_id = 2;
bool CSODOTAPartyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTAPartyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTAPartyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTAPartyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
::google::protobuf::uint64 CSODOTAPartyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.sender_id)
  return sender_id_;
}
void CSODOTAPartyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.sender_id)
}

// optional string sender_name = 3;
bool CSODOTAPartyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTAPartyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTAPartyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTAPartyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
const ::std::string& CSODOTAPartyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.sender_name)
  return sender_name_.GetNoArena();
}
void CSODOTAPartyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.sender_name)
}
#if LANG_CXX11
void CSODOTAPartyInvite::set_sender_name(::std::string&& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTAPartyInvite.sender_name)
}
#endif
void CSODOTAPartyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTAPartyInvite.sender_name)
}
void CSODOTAPartyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTAPartyInvite.sender_name)
}
::std::string* CSODOTAPartyInvite::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTAPartyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTAPartyInvite.sender_name)
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTAPartyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTAPartyInvite.sender_name)
}

// repeated .proto.dota.CSODOTAPartyInvite.PartyMember members = 4;
int CSODOTAPartyInvite::members_size() const {
  return members_.size();
}
void CSODOTAPartyInvite::clear_members() {
  members_.Clear();
}
const ::proto::dota::CSODOTAPartyInvite_PartyMember& CSODOTAPartyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.members)
  return members_.Get(index);
}
::proto::dota::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTAPartyInvite.members)
  return members_.Mutable(index);
}
::proto::dota::CSODOTAPartyInvite_PartyMember* CSODOTAPartyInvite::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTAPartyInvite.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >*
CSODOTAPartyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTAPartyInvite.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTAPartyInvite_PartyMember >&
CSODOTAPartyInvite::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTAPartyInvite.members)
  return members_;
}

// optional uint32 team_id = 5;
bool CSODOTAPartyInvite::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTAPartyInvite::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTAPartyInvite::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTAPartyInvite::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CSODOTAPartyInvite::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.team_id)
  return team_id_;
}
void CSODOTAPartyInvite::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.team_id)
}

// optional bool low_priority_status = 6;
bool CSODOTAPartyInvite::has_low_priority_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTAPartyInvite::set_has_low_priority_status() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTAPartyInvite::clear_has_low_priority_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTAPartyInvite::clear_low_priority_status() {
  low_priority_status_ = false;
  clear_has_low_priority_status();
}
bool CSODOTAPartyInvite::low_priority_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.low_priority_status)
  return low_priority_status_;
}
void CSODOTAPartyInvite::set_low_priority_status(bool value) {
  set_has_low_priority_status();
  low_priority_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.low_priority_status)
}

// optional bool as_coach = 7;
bool CSODOTAPartyInvite::has_as_coach() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTAPartyInvite::set_has_as_coach() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTAPartyInvite::clear_has_as_coach() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTAPartyInvite::clear_as_coach() {
  as_coach_ = false;
  clear_has_as_coach();
}
bool CSODOTAPartyInvite::as_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.as_coach)
  return as_coach_;
}
void CSODOTAPartyInvite::set_as_coach(bool value) {
  set_has_as_coach();
  as_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.as_coach)
}

// optional fixed64 invite_gid = 8;
bool CSODOTAPartyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTAPartyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTAPartyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTAPartyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
::google::protobuf::uint64 CSODOTAPartyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTAPartyInvite.invite_gid)
  return invite_gid_;
}
void CSODOTAPartyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTAPartyInvite.invite_gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobbyInvite_LobbyMember::kNameFieldNumber;
const int CSODOTALobbyInvite_LobbyMember::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
}
CSODOTALobbyInvite_LobbyMember::CSODOTALobbyInvite_LobbyMember(const CSODOTALobbyInvite_LobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
}

void CSODOTALobbyInvite_LobbyMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CSODOTALobbyInvite_LobbyMember::~CSODOTALobbyInvite_LobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobbyInvite.LobbyMember)
  SharedDtor();
}

void CSODOTALobbyInvite_LobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite_LobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite_LobbyMember::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite_LobbyMember::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite_LobbyMember::New(::google::protobuf::Arena* arena) const {
  CSODOTALobbyInvite_LobbyMember* n = new CSODOTALobbyInvite_LobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobbyInvite_LobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTALobbyInvite_LobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return false;
#undef DO_
}

void CSODOTALobbyInvite_LobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobbyInvite.LobbyMember)
}

::google::protobuf::uint8* CSODOTALobbyInvite_LobbyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.LobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobbyInvite.LobbyMember)
  return target;
}

size_t CSODOTALobbyInvite_LobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed64 steam_id = 2;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite_LobbyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobbyInvite_LobbyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobbyInvite.LobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobbyInvite.LobbyMember)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite_LobbyMember::MergeFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite_LobbyMember::CopyFrom(const CSODOTALobbyInvite_LobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobbyInvite.LobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite_LobbyMember::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite_LobbyMember::Swap(CSODOTALobbyInvite_LobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite_LobbyMember::InternalSwap(CSODOTALobbyInvite_LobbyMember* other) {
  name_.Swap(&other->name_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobbyInvite_LobbyMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobbyInvite_LobbyMember

// optional string name = 1;
bool CSODOTALobbyInvite_LobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobbyInvite_LobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobbyInvite_LobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobbyInvite_LobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CSODOTALobbyInvite_LobbyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  return name_.GetNoArena();
}
void CSODOTALobbyInvite_LobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
#if LANG_CXX11
void CSODOTALobbyInvite_LobbyMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
#endif
void CSODOTALobbyInvite_LobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
void CSODOTALobbyInvite_LobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}
::std::string* CSODOTALobbyInvite_LobbyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobbyInvite_LobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobbyInvite_LobbyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobbyInvite.LobbyMember.name)
}

// optional fixed64 steam_id = 2;
bool CSODOTALobbyInvite_LobbyMember::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobbyInvite_LobbyMember::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobbyInvite_LobbyMember::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobbyInvite_LobbyMember::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CSODOTALobbyInvite_LobbyMember::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.LobbyMember.steam_id)
  return steam_id_;
}
void CSODOTALobbyInvite_LobbyMember::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.LobbyMember.steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobbyInvite::kGroupIdFieldNumber;
const int CSODOTALobbyInvite::kSenderIdFieldNumber;
const int CSODOTALobbyInvite::kSenderNameFieldNumber;
const int CSODOTALobbyInvite::kMembersFieldNumber;
const int CSODOTALobbyInvite::kCustomGameIdFieldNumber;
const int CSODOTALobbyInvite::kInviteGidFieldNumber;
const int CSODOTALobbyInvite::kCustomGameCrcFieldNumber;
const int CSODOTALobbyInvite::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobbyInvite::CSODOTALobbyInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobbyInvite)
}
CSODOTALobbyInvite::CSODOTALobbyInvite(const CSODOTALobbyInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sender_name()) {
    sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
  }
  ::memcpy(&group_id_, &from.group_id_,
    reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobbyInvite)
}

void CSODOTALobbyInvite::SharedCtor() {
  _cached_size_ = 0;
  sender_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&group_id_, 0, reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&group_id_) + sizeof(custom_game_timestamp_));
}

CSODOTALobbyInvite::~CSODOTALobbyInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobbyInvite)
  SharedDtor();
}

void CSODOTALobbyInvite::SharedDtor() {
  sender_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobbyInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobbyInvite::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTALobbyInvite& CSODOTALobbyInvite::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTALobbyInvite* CSODOTALobbyInvite::New(::google::protobuf::Arena* arena) const {
  CSODOTALobbyInvite* n = new CSODOTALobbyInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobbyInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobbyInvite)
  members_.Clear();
  if (has_sender_name()) {
    GOOGLE_DCHECK(!sender_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*sender_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&group_id_, 0, reinterpret_cast<char*>(&custom_game_timestamp_) -
      reinterpret_cast<char*>(&group_id_) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTALobbyInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobbyInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 sender_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_sender_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &sender_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sender_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender_name().data(), this->sender_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobbyInvite.sender_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 invite_gid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_invite_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &invite_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_custom_game_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_custom_game_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobbyInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobbyInvite)
  return false;
#undef DO_
}

void CSODOTALobbyInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobbyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->sender_id(), output);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.sender_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sender_name(), output);
  }

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->custom_game_id(), output);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->invite_gid(), output);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobbyInvite)
}

::google::protobuf::uint8* CSODOTALobbyInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobbyInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 sender_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->sender_id(), target);
  }

  // optional string sender_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender_name().data(), this->sender_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobbyInvite.sender_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender_name(), target);
  }

  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->members(i), deterministic, target);
  }

  // optional uint64 custom_game_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->custom_game_id(), target);
  }

  // optional fixed64 invite_gid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->invite_gid(), target);
  }

  // optional fixed64 custom_game_crc = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobbyInvite)
  return target;
}

size_t CSODOTALobbyInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobbyInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string sender_name = 3;
    if (has_sender_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender_name());
    }

    // optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 sender_id = 2;
    if (has_sender_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 5;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional fixed64 invite_gid = 6;
    if (has_invite_gid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 custom_game_crc = 7;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 8;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobbyInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobbyInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobbyInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobbyInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobbyInvite)
    MergeFrom(*source);
  }
}

void CSODOTALobbyInvite::MergeFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobbyInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sender_name();
      sender_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sender_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_id_ = from.sender_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      invite_gid_ = from.invite_gid_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000040u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobbyInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobbyInvite::CopyFrom(const CSODOTALobbyInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobbyInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobbyInvite::IsInitialized() const {
  return true;
}

void CSODOTALobbyInvite::Swap(CSODOTALobbyInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobbyInvite::InternalSwap(CSODOTALobbyInvite* other) {
  members_.InternalSwap(&other->members_);
  sender_name_.Swap(&other->sender_name_);
  std::swap(group_id_, other->group_id_);
  std::swap(sender_id_, other->sender_id_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(invite_gid_, other->invite_gid_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobbyInvite::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobbyInvite

// optional uint64 group_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTALobbyInvite::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobbyInvite::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobbyInvite::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobbyInvite::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
::google::protobuf::uint64 CSODOTALobbyInvite::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.group_id)
  return group_id_;
}
void CSODOTALobbyInvite::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.group_id)
}

// optional fixed64 sender_id = 2;
bool CSODOTALobbyInvite::has_sender_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTALobbyInvite::set_has_sender_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTALobbyInvite::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTALobbyInvite::clear_sender_id() {
  sender_id_ = GOOGLE_ULONGLONG(0);
  clear_has_sender_id();
}
::google::protobuf::uint64 CSODOTALobbyInvite::sender_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.sender_id)
  return sender_id_;
}
void CSODOTALobbyInvite::set_sender_id(::google::protobuf::uint64 value) {
  set_has_sender_id();
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.sender_id)
}

// optional string sender_name = 3;
bool CSODOTALobbyInvite::has_sender_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobbyInvite::set_has_sender_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobbyInvite::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobbyInvite::clear_sender_name() {
  sender_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sender_name();
}
const ::std::string& CSODOTALobbyInvite::sender_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.sender_name)
  return sender_name_.GetNoArena();
}
void CSODOTALobbyInvite::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.sender_name)
}
#if LANG_CXX11
void CSODOTALobbyInvite::set_sender_name(::std::string&& value) {
  set_has_sender_name();
  sender_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobbyInvite.sender_name)
}
#endif
void CSODOTALobbyInvite::set_sender_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobbyInvite.sender_name)
}
void CSODOTALobbyInvite::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  sender_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobbyInvite.sender_name)
}
::std::string* CSODOTALobbyInvite::mutable_sender_name() {
  set_has_sender_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.sender_name)
  return sender_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobbyInvite::release_sender_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobbyInvite.sender_name)
  clear_has_sender_name();
  return sender_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobbyInvite::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name != NULL) {
    set_has_sender_name();
  } else {
    clear_has_sender_name();
  }
  sender_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sender_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobbyInvite.sender_name)
}

// repeated .proto.dota.CSODOTALobbyInvite.LobbyMember members = 4;
int CSODOTALobbyInvite::members_size() const {
  return members_.size();
}
void CSODOTALobbyInvite::clear_members() {
  members_.Clear();
}
const ::proto::dota::CSODOTALobbyInvite_LobbyMember& CSODOTALobbyInvite::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.members)
  return members_.Get(index);
}
::proto::dota::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobbyInvite.members)
  return members_.Mutable(index);
}
::proto::dota::CSODOTALobbyInvite_LobbyMember* CSODOTALobbyInvite::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobbyInvite.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >*
CSODOTALobbyInvite::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobbyInvite.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobbyInvite_LobbyMember >&
CSODOTALobbyInvite::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobbyInvite.members)
  return members_;
}

// optional uint64 custom_game_id = 5;
bool CSODOTALobbyInvite::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTALobbyInvite::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTALobbyInvite::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_id)
  return custom_game_id_;
}
void CSODOTALobbyInvite::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_id)
}

// optional fixed64 invite_gid = 6;
bool CSODOTALobbyInvite::has_invite_gid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTALobbyInvite::set_has_invite_gid() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTALobbyInvite::clear_has_invite_gid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTALobbyInvite::clear_invite_gid() {
  invite_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_gid();
}
::google::protobuf::uint64 CSODOTALobbyInvite::invite_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.invite_gid)
  return invite_gid_;
}
void CSODOTALobbyInvite::set_invite_gid(::google::protobuf::uint64 value) {
  set_has_invite_gid();
  invite_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.invite_gid)
}

// optional fixed64 custom_game_crc = 7;
bool CSODOTALobbyInvite::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTALobbyInvite::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTALobbyInvite::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
::google::protobuf::uint64 CSODOTALobbyInvite::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_crc)
  return custom_game_crc_;
}
void CSODOTALobbyInvite::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 8;
bool CSODOTALobbyInvite::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTALobbyInvite::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTALobbyInvite::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTALobbyInvite::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
::google::protobuf::uint32 CSODOTALobbyInvite::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobbyInvite.custom_game_timestamp)
  return custom_game_timestamp_;
}
void CSODOTALobbyInvite::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobbyInvite.custom_game_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLeaverState::kLobbyStateFieldNumber;
const int CMsgLeaverState::kGameStateFieldNumber;
const int CMsgLeaverState::kLeaverDetectedFieldNumber;
const int CMsgLeaverState::kFirstBloodHappenedFieldNumber;
const int CMsgLeaverState::kDiscardMatchResultsFieldNumber;
const int CMsgLeaverState::kMassDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaverState::CMsgLeaverState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaverState)
}
CMsgLeaverState::CMsgLeaverState(const CMsgLeaverState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_state_, &from.lobby_state_,
    reinterpret_cast<char*>(&mass_disconnect_) -
    reinterpret_cast<char*>(&lobby_state_) + sizeof(mass_disconnect_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaverState)
}

void CMsgLeaverState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lobby_state_, 0, reinterpret_cast<char*>(&mass_disconnect_) -
    reinterpret_cast<char*>(&lobby_state_) + sizeof(mass_disconnect_));
}

CMsgLeaverState::~CMsgLeaverState() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaverState)
  SharedDtor();
}

void CMsgLeaverState::SharedDtor() {
}

void CMsgLeaverState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLeaverState::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLeaverState& CMsgLeaverState::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLeaverState* CMsgLeaverState::New(::google::protobuf::Arena* arena) const {
  CMsgLeaverState* n = new CMsgLeaverState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLeaverState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaverState)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&lobby_state_, 0, reinterpret_cast<char*>(&mass_disconnect_) -
      reinterpret_cast<char*>(&lobby_state_) + sizeof(mass_disconnect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLeaverState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaverState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lobby_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool leaver_detected = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_leaver_detected();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leaver_detected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_first_blood_happened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool discard_match_results = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_discard_match_results();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_match_results_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mass_disconnect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_mass_disconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaverState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaverState)
  return false;
#undef DO_
}

void CMsgLeaverState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lobby_state(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->leaver_detected(), output);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->first_blood_happened(), output);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->discard_match_results(), output);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->mass_disconnect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaverState)
}

::google::protobuf::uint8* CMsgLeaverState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaverState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lobby_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lobby_state(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional bool leaver_detected = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->leaver_detected(), target);
  }

  // optional bool first_blood_happened = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->first_blood_happened(), target);
  }

  // optional bool discard_match_results = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->discard_match_results(), target);
  }

  // optional bool mass_disconnect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->mass_disconnect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaverState)
  return target;
}

size_t CMsgLeaverState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaverState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 lobby_state = 1;
    if (has_lobby_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_state());
    }

    // optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

    // optional bool leaver_detected = 3;
    if (has_leaver_detected()) {
      total_size += 1 + 1;
    }

    // optional bool first_blood_happened = 4;
    if (has_first_blood_happened()) {
      total_size += 1 + 1;
    }

    // optional bool discard_match_results = 5;
    if (has_discard_match_results()) {
      total_size += 1 + 1;
    }

    // optional bool mass_disconnect = 6;
    if (has_mass_disconnect()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLeaverState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaverState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLeaverState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaverState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaverState)
    MergeFrom(*source);
  }
}

void CMsgLeaverState::MergeFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaverState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_state_ = from.lobby_state_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_state_ = from.game_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      leaver_detected_ = from.leaver_detected_;
    }
    if (cached_has_bits & 0x00000008u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000010u) {
      discard_match_results_ = from.discard_match_results_;
    }
    if (cached_has_bits & 0x00000020u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLeaverState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaverState::CopyFrom(const CMsgLeaverState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaverState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaverState::IsInitialized() const {
  return true;
}

void CMsgLeaverState::Swap(CMsgLeaverState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaverState::InternalSwap(CMsgLeaverState* other) {
  std::swap(lobby_state_, other->lobby_state_);
  std::swap(game_state_, other->game_state_);
  std::swap(leaver_detected_, other->leaver_detected_);
  std::swap(first_blood_happened_, other->first_blood_happened_);
  std::swap(discard_match_results_, other->discard_match_results_);
  std::swap(mass_disconnect_, other->mass_disconnect_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLeaverState::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLeaverState

// optional uint32 lobby_state = 1;
bool CMsgLeaverState::has_lobby_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLeaverState::set_has_lobby_state() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLeaverState::clear_has_lobby_state() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLeaverState::clear_lobby_state() {
  lobby_state_ = 0u;
  clear_has_lobby_state();
}
::google::protobuf::uint32 CMsgLeaverState::lobby_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.lobby_state)
  return lobby_state_;
}
void CMsgLeaverState::set_lobby_state(::google::protobuf::uint32 value) {
  set_has_lobby_state();
  lobby_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.lobby_state)
}

// optional .proto.dota.DOTA_GameState game_state = 2 [default = DOTA_GAMERULES_STATE_INIT];
bool CMsgLeaverState::has_game_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLeaverState::set_has_game_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLeaverState::clear_has_game_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLeaverState::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
::proto::dota::DOTA_GameState CMsgLeaverState::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
void CMsgLeaverState::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.game_state)
}

// optional bool leaver_detected = 3;
bool CMsgLeaverState::has_leaver_detected() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgLeaverState::set_has_leaver_detected() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgLeaverState::clear_has_leaver_detected() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgLeaverState::clear_leaver_detected() {
  leaver_detected_ = false;
  clear_has_leaver_detected();
}
bool CMsgLeaverState::leaver_detected() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.leaver_detected)
  return leaver_detected_;
}
void CMsgLeaverState::set_leaver_detected(bool value) {
  set_has_leaver_detected();
  leaver_detected_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.leaver_detected)
}

// optional bool first_blood_happened = 4;
bool CMsgLeaverState::has_first_blood_happened() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgLeaverState::set_has_first_blood_happened() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgLeaverState::clear_has_first_blood_happened() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgLeaverState::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
bool CMsgLeaverState::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.first_blood_happened)
  return first_blood_happened_;
}
void CMsgLeaverState::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.first_blood_happened)
}

// optional bool discard_match_results = 5;
bool CMsgLeaverState::has_discard_match_results() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgLeaverState::set_has_discard_match_results() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgLeaverState::clear_has_discard_match_results() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgLeaverState::clear_discard_match_results() {
  discard_match_results_ = false;
  clear_has_discard_match_results();
}
bool CMsgLeaverState::discard_match_results() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.discard_match_results)
  return discard_match_results_;
}
void CMsgLeaverState::set_discard_match_results(bool value) {
  set_has_discard_match_results();
  discard_match_results_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.discard_match_results)
}

// optional bool mass_disconnect = 6;
bool CMsgLeaverState::has_mass_disconnect() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgLeaverState::set_has_mass_disconnect() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgLeaverState::clear_has_mass_disconnect() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgLeaverState::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
bool CMsgLeaverState::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLeaverState.mass_disconnect)
  return mass_disconnect_;
}
void CMsgLeaverState::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLeaverState.mass_disconnect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kTypeFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kXpBonusFieldNumber;
const int CDOTALobbyMember_CDOTALobbyMemberXPBonus::kSourceKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}
CDOTALobbyMember_CDOTALobbyMemberXPBonus::CDOTALobbyMember_CDOTALobbyMemberXPBonus(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&source_key_) -
    reinterpret_cast<char*>(&type_) + sizeof(source_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&type_, 0, reinterpret_cast<char*>(&source_key_) -
    reinterpret_cast<char*>(&type_) + sizeof(source_key_));
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus::~CDOTALobbyMember_CDOTALobbyMemberXPBonus() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  SharedDtor();
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SharedDtor() {
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember_CDOTALobbyMemberXPBonus::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember_CDOTALobbyMemberXPBonus::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember_CDOTALobbyMemberXPBonus::New(::google::protobuf::Arena* arena) const {
  CDOTALobbyMember_CDOTALobbyMemberXPBonus* n = new CDOTALobbyMember_CDOTALobbyMemberXPBonus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&type_, 0, reinterpret_cast<char*>(&source_key_) -
      reinterpret_cast<char*>(&type_) + sizeof(source_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float xp_bonus = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_xp_bonus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xp_bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return false;
#undef DO_
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional float xp_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xp_bonus(), output);
  }

  // optional uint64 source_key = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->source_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
}

::google::protobuf::uint8* CDOTALobbyMember_CDOTALobbyMemberXPBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional float xp_bonus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xp_bonus(), target);
  }

  // optional uint64 source_key = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->source_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  return target;
}

size_t CDOTALobbyMember_CDOTALobbyMemberXPBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional float xp_bonus = 2;
    if (has_xp_bonus()) {
      total_size += 1 + 4;
    }

    // optional uint64 source_key = 3;
    if (has_source_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALobbyMember_CDOTALobbyMemberXPBonus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTALobbyMember_CDOTALobbyMemberXPBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
    MergeFrom(*source);
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::MergeFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      xp_bonus_ = from.xp_bonus_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_key_ = from.source_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::CopyFrom(const CDOTALobbyMember_CDOTALobbyMemberXPBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::IsInitialized() const {
  return true;
}

void CDOTALobbyMember_CDOTALobbyMemberXPBonus::Swap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::InternalSwap(CDOTALobbyMember_CDOTALobbyMemberXPBonus* other) {
  std::swap(type_, other->type_);
  std::swap(xp_bonus_, other->xp_bonus_);
  std::swap(source_key_, other->source_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTALobbyMember_CDOTALobbyMemberXPBonus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTALobbyMember_CDOTALobbyMemberXPBonus

// optional uint32 type = 1;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CDOTALobbyMember_CDOTALobbyMemberXPBonus::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
  return type_;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.type)
}

// optional float xp_bonus = 2;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_xp_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_xp_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_xp_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_xp_bonus() {
  xp_bonus_ = 0;
  clear_has_xp_bonus();
}
float CDOTALobbyMember_CDOTALobbyMemberXPBonus::xp_bonus() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
  return xp_bonus_;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_xp_bonus(float value) {
  set_has_xp_bonus();
  xp_bonus_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.xp_bonus)
}

// optional uint64 source_key = 3;
bool CDOTALobbyMember_CDOTALobbyMemberXPBonus::has_source_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_has_source_key() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_has_source_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::clear_source_key() {
  source_key_ = GOOGLE_ULONGLONG(0);
  clear_has_source_key();
}
::google::protobuf::uint64 CDOTALobbyMember_CDOTALobbyMemberXPBonus::source_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
  return source_key_;
}
void CDOTALobbyMember_CDOTALobbyMemberXPBonus::set_source_key(::google::protobuf::uint64 value) {
  set_has_source_key();
  source_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus.source_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTALobbyMember::kIdFieldNumber;
const int CDOTALobbyMember::kHeroIdFieldNumber;
const int CDOTALobbyMember::kTeamFieldNumber;
const int CDOTALobbyMember::kNameFieldNumber;
const int CDOTALobbyMember::kSlotFieldNumber;
const int CDOTALobbyMember::kPartyIdFieldNumber;
const int CDOTALobbyMember::kMetaLevelFieldNumber;
const int CDOTALobbyMember::kMetaXpFieldNumber;
const int CDOTALobbyMember::kMetaXpAwardedFieldNumber;
const int CDOTALobbyMember::kLeaverStatusFieldNumber;
const int CDOTALobbyMember::kLeaverActionsFieldNumber;
const int CDOTALobbyMember::kChannelFieldNumber;
const int CDOTALobbyMember::kPrizeDefIndexFieldNumber;
const int CDOTALobbyMember::kDisabledHeroIdFieldNumber;
const int CDOTALobbyMember::kPartnerAccountTypeFieldNumber;
const int CDOTALobbyMember::kEnabledHeroIdFieldNumber;
const int CDOTALobbyMember::kCoachTeamFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNoFieldNumber;
const int CDOTALobbyMember::kNexonPcBangNameFieldNumber;
const int CDOTALobbyMember::kXpBonusesFieldNumber;
const int CDOTALobbyMember::kRankChangeFieldNumber;
const int CDOTALobbyMember::kCameramanFieldNumber;
const int CDOTALobbyMember::kCustomGameProductIdsFieldNumber;
const int CDOTALobbyMember::kLobbyMvpVoteAccountIdFieldNumber;
const int CDOTALobbyMember::kSearchMatchTypeFieldNumber;
const int CDOTALobbyMember::kFavoriteTeamPackedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTALobbyMember::CDOTALobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTALobbyMember)
}
CDOTALobbyMember::CDOTALobbyMember(const CDOTALobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      disabled_hero_id_(from.disabled_hero_id_),
      enabled_hero_id_(from.enabled_hero_id_),
      xp_bonuses_(from.xp_bonuses_),
      custom_game_product_ids_(from.custom_game_product_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  nexon_pc_bang_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_nexon_pc_bang_name()) {
    nexon_pc_bang_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexon_pc_bang_name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&coach_team_) -
    reinterpret_cast<char*>(&id_) + sizeof(coach_team_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTALobbyMember)
}

void CDOTALobbyMember::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexon_pc_bang_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&favorite_team_packed_) -
    reinterpret_cast<char*>(&id_) + sizeof(favorite_team_packed_));
  coach_team_ = 5;
}

CDOTALobbyMember::~CDOTALobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTALobbyMember)
  SharedDtor();
}

void CDOTALobbyMember::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexon_pc_bang_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTALobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTALobbyMember::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTALobbyMember& CDOTALobbyMember::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTALobbyMember* CDOTALobbyMember::New(::google::protobuf::Arena* arena) const {
  CDOTALobbyMember* n = new CDOTALobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTALobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTALobbyMember)
  disabled_hero_id_.Clear();
  enabled_hero_id_.Clear();
  xp_bonuses_.Clear();
  custom_game_product_ids_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_nexon_pc_bang_name()) {
      GOOGLE_DCHECK(!nexon_pc_bang_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*nexon_pc_bang_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&party_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(party_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&meta_xp_, 0, reinterpret_cast<char*>(&leaver_actions_) -
      reinterpret_cast<char*>(&meta_xp_) + sizeof(leaver_actions_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&rank_change_, 0, reinterpret_cast<char*>(&favorite_team_packed_) -
      reinterpret_cast<char*>(&rank_change_) + sizeof(favorite_team_packed_));
    coach_team_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTALobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTALobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTALobbyMember.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 party_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_party_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_meta_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_xp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_meta_xp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 meta_xp_awarded = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_meta_xp_awarded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meta_xp_awarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALeaverStatus_t_IsValid(value)) {
            set_leaver_status(static_cast< ::proto::dota::DOTALeaverStatus_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 prize_def_index = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_prize_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 disabled_hero_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160u, input, this->mutable_disabled_hero_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(162u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_disabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_account_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(21, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 enabled_hero_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_enabled_hero_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(178u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enabled_hero_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_coach_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nexon_pc_bang_no = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_nexon_pc_bang_no();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexon_pc_bang_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string nexon_pc_bang_name = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nexon_pc_bang_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTALobbyMember.nexon_pc_bang_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_xp_bonuses()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leaver_actions = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_leaver_actions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaver_actions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_rank_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cameraman = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_cameraman();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cameraman_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 custom_game_product_ids = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 248u, input, this->mutable_custom_game_product_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(250u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_custom_game_product_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mvp_vote_account_id = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_lobby_mvp_vote_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_vote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_search_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 favorite_team_packed = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_favorite_team_packed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &favorite_team_packed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTALobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTALobbyMember)
  return false;
#undef DO_
}

void CDOTALobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTALobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->team(), output);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->slot(), output);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->party_id(), output);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->meta_level(), output);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->meta_xp(), output);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->meta_xp_awarded(), output);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->leaver_status(), output);
  }

  // optional uint32 channel = 17;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->channel(), output);
  }

  // optional uint32 prize_def_index = 18;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->prize_def_index(), output);
  }

  // repeated uint32 disabled_hero_id = 20;
  for (int i = 0, n = this->disabled_hero_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->disabled_hero_id(i), output);
  }

  // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->partner_account_type(), output);
  }

  // repeated uint32 enabled_hero_id = 22;
  for (int i = 0, n = this->enabled_hero_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->enabled_hero_id(i), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->coach_team(), output);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nexon_pc_bang_no(), output);
  }

  // optional string nexon_pc_bang_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.nexon_pc_bang_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->nexon_pc_bang_name(), output);
  }

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0, n = this->xp_bonuses_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->xp_bonuses(i), output);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->leaver_actions(), output);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(29, this->rank_change(), output);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->cameraman(), output);
  }

  // repeated uint32 custom_game_product_ids = 31;
  for (int i = 0, n = this->custom_game_product_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      31, this->custom_game_product_ids(i), output);
  }

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lobby_mvp_vote_account_id(), output);
  }

  // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->search_match_type(), output);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->favorite_team_packed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTALobbyMember)
}

::google::protobuf::uint8* CDOTALobbyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTALobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->team(), target);
  }

  // optional string name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional uint32 slot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->slot(), target);
  }

  // optional uint64 party_id = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->party_id(), target);
  }

  // optional uint32 meta_level = 13;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->meta_level(), target);
  }

  // optional uint32 meta_xp = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->meta_xp(), target);
  }

  // optional uint32 meta_xp_awarded = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->meta_xp_awarded(), target);
  }

  // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->leaver_status(), target);
  }

  // optional uint32 channel = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->channel(), target);
  }

  // optional uint32 prize_def_index = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->prize_def_index(), target);
  }

  // repeated uint32 disabled_hero_id = 20;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(20, this->disabled_hero_id_, target);

  // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->partner_account_type(), target);
  }

  // repeated uint32 enabled_hero_id = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->enabled_hero_id_, target);

  // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->coach_team(), target);
  }

  // optional uint32 nexon_pc_bang_no = 24;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->nexon_pc_bang_no(), target);
  }

  // optional string nexon_pc_bang_name = 25;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nexon_pc_bang_name().data(), this->nexon_pc_bang_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTALobbyMember.nexon_pc_bang_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->nexon_pc_bang_name(), target);
  }

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  for (unsigned int i = 0, n = this->xp_bonuses_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, this->xp_bonuses(i), deterministic, target);
  }

  // optional uint32 leaver_actions = 28;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->leaver_actions(), target);
  }

  // optional sint32 rank_change = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(29, this->rank_change(), target);
  }

  // optional bool cameraman = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->cameraman(), target);
  }

  // repeated uint32 custom_game_product_ids = 31;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(31, this->custom_game_product_ids_, target);

  // optional uint32 lobby_mvp_vote_account_id = 32;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lobby_mvp_vote_account_id(), target);
  }

  // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->search_match_type(), target);
  }

  // optional uint64 favorite_team_packed = 35;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->favorite_team_packed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTALobbyMember)
  return target;
}

size_t CDOTALobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTALobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 disabled_hero_id = 20;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->disabled_hero_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->disabled_hero_id_size());
    total_size += data_size;
  }

  // repeated uint32 enabled_hero_id = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->enabled_hero_id_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->enabled_hero_id_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
  {
    unsigned int count = this->xp_bonuses_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->xp_bonuses(i));
    }
  }

  // repeated uint32 custom_game_product_ids = 31;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->custom_game_product_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->custom_game_product_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string nexon_pc_bang_name = 25;
    if (has_nexon_pc_bang_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nexon_pc_bang_name());
    }

    // optional fixed64 id = 1 [(.proto.dota.key_field) = true];
    if (has_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 meta_level = 13;
    if (has_meta_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_level());
    }

    // optional uint64 party_id = 12;
    if (has_party_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 meta_xp = 14;
    if (has_meta_xp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp());
    }

    // optional uint32 meta_xp_awarded = 15;
    if (has_meta_xp_awarded()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meta_xp_awarded());
    }

    // optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
    if (has_leaver_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->leaver_status());
    }

    // optional uint32 channel = 17;
    if (has_channel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint32 prize_def_index = 18;
    if (has_prize_def_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_def_index());
    }

    // optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
    if (has_partner_account_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_account_type());
    }

    // optional uint32 nexon_pc_bang_no = 24;
    if (has_nexon_pc_bang_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexon_pc_bang_no());
    }

    // optional uint32 leaver_actions = 28;
    if (has_leaver_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaver_actions());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional sint32 rank_change = 29;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

    // optional bool cameraman = 30;
    if (has_cameraman()) {
      total_size += 2 + 1;
    }

    // optional uint32 lobby_mvp_vote_account_id = 32;
    if (has_lobby_mvp_vote_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_vote_account_id());
    }

    // optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
    if (has_search_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->search_match_type());
    }

    // optional uint64 favorite_team_packed = 35;
    if (has_favorite_team_packed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->favorite_team_packed());
    }

    // optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
    if (has_coach_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->coach_team());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTALobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTALobbyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTALobbyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTALobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTALobbyMember)
    MergeFrom(*source);
  }
}

void CDOTALobbyMember::MergeFrom(const CDOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTALobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  disabled_hero_id_.MergeFrom(from.disabled_hero_id_);
  enabled_hero_id_.MergeFrom(from.enabled_hero_id_);
  xp_bonuses_.MergeFrom(from.xp_bonuses_);
  custom_game_product_ids_.MergeFrom(from.custom_game_product_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_nexon_pc_bang_name();
      nexon_pc_bang_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexon_pc_bang_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000020u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000040u) {
      meta_level_ = from.meta_level_;
    }
    if (cached_has_bits & 0x00000080u) {
      party_id_ = from.party_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      meta_xp_ = from.meta_xp_;
    }
    if (cached_has_bits & 0x00000200u) {
      meta_xp_awarded_ = from.meta_xp_awarded_;
    }
    if (cached_has_bits & 0x00000400u) {
      leaver_status_ = from.leaver_status_;
    }
    if (cached_has_bits & 0x00000800u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00001000u) {
      prize_def_index_ = from.prize_def_index_;
    }
    if (cached_has_bits & 0x00002000u) {
      partner_account_type_ = from.partner_account_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      nexon_pc_bang_no_ = from.nexon_pc_bang_no_;
    }
    if (cached_has_bits & 0x00008000u) {
      leaver_actions_ = from.leaver_actions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      rank_change_ = from.rank_change_;
    }
    if (cached_has_bits & 0x00020000u) {
      cameraman_ = from.cameraman_;
    }
    if (cached_has_bits & 0x00040000u) {
      lobby_mvp_vote_account_id_ = from.lobby_mvp_vote_account_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      search_match_type_ = from.search_match_type_;
    }
    if (cached_has_bits & 0x00100000u) {
      favorite_team_packed_ = from.favorite_team_packed_;
    }
    if (cached_has_bits & 0x00200000u) {
      coach_team_ = from.coach_team_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTALobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTALobbyMember::CopyFrom(const CDOTALobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTALobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTALobbyMember::IsInitialized() const {
  return true;
}

void CDOTALobbyMember::Swap(CDOTALobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTALobbyMember::InternalSwap(CDOTALobbyMember* other) {
  disabled_hero_id_.InternalSwap(&other->disabled_hero_id_);
  enabled_hero_id_.InternalSwap(&other->enabled_hero_id_);
  xp_bonuses_.InternalSwap(&other->xp_bonuses_);
  custom_game_product_ids_.InternalSwap(&other->custom_game_product_ids_);
  name_.Swap(&other->name_);
  nexon_pc_bang_name_.Swap(&other->nexon_pc_bang_name_);
  std::swap(id_, other->id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(team_, other->team_);
  std::swap(slot_, other->slot_);
  std::swap(meta_level_, other->meta_level_);
  std::swap(party_id_, other->party_id_);
  std::swap(meta_xp_, other->meta_xp_);
  std::swap(meta_xp_awarded_, other->meta_xp_awarded_);
  std::swap(leaver_status_, other->leaver_status_);
  std::swap(channel_, other->channel_);
  std::swap(prize_def_index_, other->prize_def_index_);
  std::swap(partner_account_type_, other->partner_account_type_);
  std::swap(nexon_pc_bang_no_, other->nexon_pc_bang_no_);
  std::swap(leaver_actions_, other->leaver_actions_);
  std::swap(rank_change_, other->rank_change_);
  std::swap(cameraman_, other->cameraman_);
  std::swap(lobby_mvp_vote_account_id_, other->lobby_mvp_vote_account_id_);
  std::swap(search_match_type_, other->search_match_type_);
  std::swap(favorite_team_packed_, other->favorite_team_packed_);
  std::swap(coach_team_, other->coach_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTALobbyMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTALobbyMember

// optional fixed64 id = 1 [(.proto.dota.key_field) = true];
bool CDOTALobbyMember::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTALobbyMember::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTALobbyMember::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTALobbyMember::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CDOTALobbyMember::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.id)
  return id_;
}
void CDOTALobbyMember::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.id)
}

// optional uint32 hero_id = 2;
bool CDOTALobbyMember::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTALobbyMember::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTALobbyMember::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTALobbyMember::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CDOTALobbyMember::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.hero_id)
  return hero_id_;
}
void CDOTALobbyMember::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.hero_id)
}

// optional .proto.dota.DOTA_GC_TEAM team = 3 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CDOTALobbyMember::has_team() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTALobbyMember::set_has_team() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTALobbyMember::clear_has_team() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTALobbyMember::clear_team() {
  team_ = 0;
  clear_has_team();
}
::proto::dota::DOTA_GC_TEAM CDOTALobbyMember::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
void CDOTALobbyMember::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.team)
}

// optional string name = 6;
bool CDOTALobbyMember::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTALobbyMember::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTALobbyMember::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTALobbyMember::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CDOTALobbyMember::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.name)
  return name_.GetNoArena();
}
void CDOTALobbyMember::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.name)
}
#if LANG_CXX11
void CDOTALobbyMember::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTALobbyMember.name)
}
#endif
void CDOTALobbyMember::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTALobbyMember.name)
}
void CDOTALobbyMember::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTALobbyMember.name)
}
::std::string* CDOTALobbyMember::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTALobbyMember::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTALobbyMember.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTALobbyMember::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTALobbyMember.name)
}

// optional uint32 slot = 7;
bool CDOTALobbyMember::has_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTALobbyMember::set_has_slot() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTALobbyMember::clear_has_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTALobbyMember::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
::google::protobuf::uint32 CDOTALobbyMember::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.slot)
  return slot_;
}
void CDOTALobbyMember::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.slot)
}

// optional uint64 party_id = 12;
bool CDOTALobbyMember::has_party_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTALobbyMember::set_has_party_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTALobbyMember::clear_has_party_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTALobbyMember::clear_party_id() {
  party_id_ = GOOGLE_ULONGLONG(0);
  clear_has_party_id();
}
::google::protobuf::uint64 CDOTALobbyMember::party_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.party_id)
  return party_id_;
}
void CDOTALobbyMember::set_party_id(::google::protobuf::uint64 value) {
  set_has_party_id();
  party_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.party_id)
}

// optional uint32 meta_level = 13;
bool CDOTALobbyMember::has_meta_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTALobbyMember::set_has_meta_level() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTALobbyMember::clear_has_meta_level() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTALobbyMember::clear_meta_level() {
  meta_level_ = 0u;
  clear_has_meta_level();
}
::google::protobuf::uint32 CDOTALobbyMember::meta_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_level)
  return meta_level_;
}
void CDOTALobbyMember::set_meta_level(::google::protobuf::uint32 value) {
  set_has_meta_level();
  meta_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_level)
}

// optional uint32 meta_xp = 14;
bool CDOTALobbyMember::has_meta_xp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTALobbyMember::set_has_meta_xp() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTALobbyMember::clear_has_meta_xp() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTALobbyMember::clear_meta_xp() {
  meta_xp_ = 0u;
  clear_has_meta_xp();
}
::google::protobuf::uint32 CDOTALobbyMember::meta_xp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_xp)
  return meta_xp_;
}
void CDOTALobbyMember::set_meta_xp(::google::protobuf::uint32 value) {
  set_has_meta_xp();
  meta_xp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_xp)
}

// optional uint32 meta_xp_awarded = 15;
bool CDOTALobbyMember::has_meta_xp_awarded() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTALobbyMember::set_has_meta_xp_awarded() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTALobbyMember::clear_has_meta_xp_awarded() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTALobbyMember::clear_meta_xp_awarded() {
  meta_xp_awarded_ = 0u;
  clear_has_meta_xp_awarded();
}
::google::protobuf::uint32 CDOTALobbyMember::meta_xp_awarded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.meta_xp_awarded)
  return meta_xp_awarded_;
}
void CDOTALobbyMember::set_meta_xp_awarded(::google::protobuf::uint32 value) {
  set_has_meta_xp_awarded();
  meta_xp_awarded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.meta_xp_awarded)
}

// optional .proto.dota.DOTALeaverStatus_t leaver_status = 16 [default = DOTA_LEAVER_NONE];
bool CDOTALobbyMember::has_leaver_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTALobbyMember::set_has_leaver_status() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTALobbyMember::clear_has_leaver_status() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTALobbyMember::clear_leaver_status() {
  leaver_status_ = 0;
  clear_has_leaver_status();
}
::proto::dota::DOTALeaverStatus_t CDOTALobbyMember::leaver_status() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.leaver_status)
  return static_cast< ::proto::dota::DOTALeaverStatus_t >(leaver_status_);
}
void CDOTALobbyMember::set_leaver_status(::proto::dota::DOTALeaverStatus_t value) {
  assert(::proto::dota::DOTALeaverStatus_t_IsValid(value));
  set_has_leaver_status();
  leaver_status_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.leaver_status)
}

// optional uint32 leaver_actions = 28;
bool CDOTALobbyMember::has_leaver_actions() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CDOTALobbyMember::set_has_leaver_actions() {
  _has_bits_[0] |= 0x00008000u;
}
void CDOTALobbyMember::clear_has_leaver_actions() {
  _has_bits_[0] &= ~0x00008000u;
}
void CDOTALobbyMember::clear_leaver_actions() {
  leaver_actions_ = 0u;
  clear_has_leaver_actions();
}
::google::protobuf::uint32 CDOTALobbyMember::leaver_actions() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.leaver_actions)
  return leaver_actions_;
}
void CDOTALobbyMember::set_leaver_actions(::google::protobuf::uint32 value) {
  set_has_leaver_actions();
  leaver_actions_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.leaver_actions)
}

// optional uint32 channel = 17;
bool CDOTALobbyMember::has_channel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTALobbyMember::set_has_channel() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTALobbyMember::clear_has_channel() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTALobbyMember::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 CDOTALobbyMember::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.channel)
  return channel_;
}
void CDOTALobbyMember::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.channel)
}

// optional uint32 prize_def_index = 18;
bool CDOTALobbyMember::has_prize_def_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CDOTALobbyMember::set_has_prize_def_index() {
  _has_bits_[0] |= 0x00001000u;
}
void CDOTALobbyMember::clear_has_prize_def_index() {
  _has_bits_[0] &= ~0x00001000u;
}
void CDOTALobbyMember::clear_prize_def_index() {
  prize_def_index_ = 0u;
  clear_has_prize_def_index();
}
::google::protobuf::uint32 CDOTALobbyMember::prize_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.prize_def_index)
  return prize_def_index_;
}
void CDOTALobbyMember::set_prize_def_index(::google::protobuf::uint32 value) {
  set_has_prize_def_index();
  prize_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.prize_def_index)
}

// repeated uint32 disabled_hero_id = 20;
int CDOTALobbyMember::disabled_hero_id_size() const {
  return disabled_hero_id_.size();
}
void CDOTALobbyMember::clear_disabled_hero_id() {
  disabled_hero_id_.Clear();
}
::google::protobuf::uint32 CDOTALobbyMember::disabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_.Get(index);
}
void CDOTALobbyMember::set_disabled_hero_id(int index, ::google::protobuf::uint32 value) {
  disabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.disabled_hero_id)
}
void CDOTALobbyMember::add_disabled_hero_id(::google::protobuf::uint32 value) {
  disabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.disabled_hero_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::disabled_hero_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return disabled_hero_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_disabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.disabled_hero_id)
  return &disabled_hero_id_;
}

// optional .proto.dota.PartnerAccountType partner_account_type = 21 [default = PARTNER_NONE];
bool CDOTALobbyMember::has_partner_account_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CDOTALobbyMember::set_has_partner_account_type() {
  _has_bits_[0] |= 0x00002000u;
}
void CDOTALobbyMember::clear_has_partner_account_type() {
  _has_bits_[0] &= ~0x00002000u;
}
void CDOTALobbyMember::clear_partner_account_type() {
  partner_account_type_ = 0;
  clear_has_partner_account_type();
}
::proto::dota::PartnerAccountType CDOTALobbyMember::partner_account_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.partner_account_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_account_type_);
}
void CDOTALobbyMember::set_partner_account_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  set_has_partner_account_type();
  partner_account_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.partner_account_type)
}

// repeated uint32 enabled_hero_id = 22;
int CDOTALobbyMember::enabled_hero_id_size() const {
  return enabled_hero_id_.size();
}
void CDOTALobbyMember::clear_enabled_hero_id() {
  enabled_hero_id_.Clear();
}
::google::protobuf::uint32 CDOTALobbyMember::enabled_hero_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_.Get(index);
}
void CDOTALobbyMember::set_enabled_hero_id(int index, ::google::protobuf::uint32 value) {
  enabled_hero_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.enabled_hero_id)
}
void CDOTALobbyMember::add_enabled_hero_id(::google::protobuf::uint32 value) {
  enabled_hero_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.enabled_hero_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::enabled_hero_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return enabled_hero_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_enabled_hero_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.enabled_hero_id)
  return &enabled_hero_id_;
}

// optional .proto.dota.DOTA_GC_TEAM coach_team = 23 [default = DOTA_GC_TEAM_NOTEAM];
bool CDOTALobbyMember::has_coach_team() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CDOTALobbyMember::set_has_coach_team() {
  _has_bits_[0] |= 0x00200000u;
}
void CDOTALobbyMember::clear_has_coach_team() {
  _has_bits_[0] &= ~0x00200000u;
}
void CDOTALobbyMember::clear_coach_team() {
  coach_team_ = 5;
  clear_has_coach_team();
}
::proto::dota::DOTA_GC_TEAM CDOTALobbyMember::coach_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.coach_team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(coach_team_);
}
void CDOTALobbyMember::set_coach_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_coach_team();
  coach_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.coach_team)
}

// optional uint32 nexon_pc_bang_no = 24;
bool CDOTALobbyMember::has_nexon_pc_bang_no() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CDOTALobbyMember::set_has_nexon_pc_bang_no() {
  _has_bits_[0] |= 0x00004000u;
}
void CDOTALobbyMember::clear_has_nexon_pc_bang_no() {
  _has_bits_[0] &= ~0x00004000u;
}
void CDOTALobbyMember::clear_nexon_pc_bang_no() {
  nexon_pc_bang_no_ = 0u;
  clear_has_nexon_pc_bang_no();
}
::google::protobuf::uint32 CDOTALobbyMember::nexon_pc_bang_no() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.nexon_pc_bang_no)
  return nexon_pc_bang_no_;
}
void CDOTALobbyMember::set_nexon_pc_bang_no(::google::protobuf::uint32 value) {
  set_has_nexon_pc_bang_no();
  nexon_pc_bang_no_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.nexon_pc_bang_no)
}

// optional string nexon_pc_bang_name = 25;
bool CDOTALobbyMember::has_nexon_pc_bang_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTALobbyMember::set_has_nexon_pc_bang_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTALobbyMember::clear_has_nexon_pc_bang_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTALobbyMember::clear_nexon_pc_bang_name() {
  nexon_pc_bang_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_nexon_pc_bang_name();
}
const ::std::string& CDOTALobbyMember::nexon_pc_bang_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_.GetNoArena();
}
void CDOTALobbyMember::set_nexon_pc_bang_name(const ::std::string& value) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
}
#if LANG_CXX11
void CDOTALobbyMember::set_nexon_pc_bang_name(::std::string&& value) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
}
#endif
void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
}
void CDOTALobbyMember::set_nexon_pc_bang_name(const char* value, size_t size) {
  set_has_nexon_pc_bang_name();
  nexon_pc_bang_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
}
::std::string* CDOTALobbyMember::mutable_nexon_pc_bang_name() {
  set_has_nexon_pc_bang_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
  return nexon_pc_bang_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTALobbyMember::release_nexon_pc_bang_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
  clear_has_nexon_pc_bang_name();
  return nexon_pc_bang_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTALobbyMember::set_allocated_nexon_pc_bang_name(::std::string* nexon_pc_bang_name) {
  if (nexon_pc_bang_name != NULL) {
    set_has_nexon_pc_bang_name();
  } else {
    clear_has_nexon_pc_bang_name();
  }
  nexon_pc_bang_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexon_pc_bang_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTALobbyMember.nexon_pc_bang_name)
}

// repeated .proto.dota.CDOTALobbyMember.CDOTALobbyMemberXPBonus xp_bonuses = 27;
int CDOTALobbyMember::xp_bonuses_size() const {
  return xp_bonuses_.size();
}
void CDOTALobbyMember::clear_xp_bonuses() {
  xp_bonuses_.Clear();
}
const ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus& CDOTALobbyMember::xp_bonuses(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Get(index);
}
::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::mutable_xp_bonuses(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Mutable(index);
}
::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus* CDOTALobbyMember::add_xp_bonuses() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >*
CDOTALobbyMember::mutable_xp_bonuses() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.xp_bonuses)
  return &xp_bonuses_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember_CDOTALobbyMemberXPBonus >&
CDOTALobbyMember::xp_bonuses() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.xp_bonuses)
  return xp_bonuses_;
}

// optional sint32 rank_change = 29;
bool CDOTALobbyMember::has_rank_change() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CDOTALobbyMember::set_has_rank_change() {
  _has_bits_[0] |= 0x00010000u;
}
void CDOTALobbyMember::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00010000u;
}
void CDOTALobbyMember::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
::google::protobuf::int32 CDOTALobbyMember::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.rank_change)
  return rank_change_;
}
void CDOTALobbyMember::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.rank_change)
}

// optional bool cameraman = 30;
bool CDOTALobbyMember::has_cameraman() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CDOTALobbyMember::set_has_cameraman() {
  _has_bits_[0] |= 0x00020000u;
}
void CDOTALobbyMember::clear_has_cameraman() {
  _has_bits_[0] &= ~0x00020000u;
}
void CDOTALobbyMember::clear_cameraman() {
  cameraman_ = false;
  clear_has_cameraman();
}
bool CDOTALobbyMember::cameraman() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.cameraman)
  return cameraman_;
}
void CDOTALobbyMember::set_cameraman(bool value) {
  set_has_cameraman();
  cameraman_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.cameraman)
}

// repeated uint32 custom_game_product_ids = 31;
int CDOTALobbyMember::custom_game_product_ids_size() const {
  return custom_game_product_ids_.size();
}
void CDOTALobbyMember::clear_custom_game_product_ids() {
  custom_game_product_ids_.Clear();
}
::google::protobuf::uint32 CDOTALobbyMember::custom_game_product_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_.Get(index);
}
void CDOTALobbyMember::set_custom_game_product_ids(int index, ::google::protobuf::uint32 value) {
  custom_game_product_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.custom_game_product_ids)
}
void CDOTALobbyMember::add_custom_game_product_ids(::google::protobuf::uint32 value) {
  custom_game_product_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTALobbyMember.custom_game_product_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTALobbyMember::custom_game_product_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return custom_game_product_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTALobbyMember::mutable_custom_game_product_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTALobbyMember.custom_game_product_ids)
  return &custom_game_product_ids_;
}

// optional uint32 lobby_mvp_vote_account_id = 32;
bool CDOTALobbyMember::has_lobby_mvp_vote_account_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CDOTALobbyMember::set_has_lobby_mvp_vote_account_id() {
  _has_bits_[0] |= 0x00040000u;
}
void CDOTALobbyMember::clear_has_lobby_mvp_vote_account_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void CDOTALobbyMember::clear_lobby_mvp_vote_account_id() {
  lobby_mvp_vote_account_id_ = 0u;
  clear_has_lobby_mvp_vote_account_id();
}
::google::protobuf::uint32 CDOTALobbyMember::lobby_mvp_vote_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.lobby_mvp_vote_account_id)
  return lobby_mvp_vote_account_id_;
}
void CDOTALobbyMember::set_lobby_mvp_vote_account_id(::google::protobuf::uint32 value) {
  set_has_lobby_mvp_vote_account_id();
  lobby_mvp_vote_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.lobby_mvp_vote_account_id)
}

// optional .proto.dota.MatchType search_match_type = 33 [default = MATCH_TYPE_CASUAL];
bool CDOTALobbyMember::has_search_match_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CDOTALobbyMember::set_has_search_match_type() {
  _has_bits_[0] |= 0x00080000u;
}
void CDOTALobbyMember::clear_has_search_match_type() {
  _has_bits_[0] &= ~0x00080000u;
}
void CDOTALobbyMember::clear_search_match_type() {
  search_match_type_ = 0;
  clear_has_search_match_type();
}
::proto::dota::MatchType CDOTALobbyMember::search_match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.search_match_type)
  return static_cast< ::proto::dota::MatchType >(search_match_type_);
}
void CDOTALobbyMember::set_search_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  set_has_search_match_type();
  search_match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.search_match_type)
}

// optional uint64 favorite_team_packed = 35;
bool CDOTALobbyMember::has_favorite_team_packed() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CDOTALobbyMember::set_has_favorite_team_packed() {
  _has_bits_[0] |= 0x00100000u;
}
void CDOTALobbyMember::clear_has_favorite_team_packed() {
  _has_bits_[0] &= ~0x00100000u;
}
void CDOTALobbyMember::clear_favorite_team_packed() {
  favorite_team_packed_ = GOOGLE_ULONGLONG(0);
  clear_has_favorite_team_packed();
}
::google::protobuf::uint64 CDOTALobbyMember::favorite_team_packed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTALobbyMember.favorite_team_packed)
  return favorite_team_packed_;
}
void CDOTALobbyMember::set_favorite_team_packed(::google::protobuf::uint64 value) {
  set_has_favorite_team_packed();
  favorite_team_packed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTALobbyMember.favorite_team_packed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyTeamDetails::kTeamNameFieldNumber;
const int CLobbyTeamDetails::kTeamTagFieldNumber;
const int CLobbyTeamDetails::kTeamIdFieldNumber;
const int CLobbyTeamDetails::kTeamLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBaseLogoFieldNumber;
const int CLobbyTeamDetails::kTeamBannerLogoFieldNumber;
const int CLobbyTeamDetails::kTeamCompleteFieldNumber;
const int CLobbyTeamDetails::kGuildNameFieldNumber;
const int CLobbyTeamDetails::kGuildTagFieldNumber;
const int CLobbyTeamDetails::kGuildIdFieldNumber;
const int CLobbyTeamDetails::kGuildLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBaseLogoFieldNumber;
const int CLobbyTeamDetails::kGuildBannerLogoFieldNumber;
const int CLobbyTeamDetails::kRankFieldNumber;
const int CLobbyTeamDetails::kRankChangeFieldNumber;
const int CLobbyTeamDetails::kIsHomeTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyTeamDetails::CLobbyTeamDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyTeamDetails)
}
CLobbyTeamDetails::CLobbyTeamDetails(const CLobbyTeamDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_name()) {
    guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
  }
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_guild_tag()) {
    guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&team_logo_) + sizeof(rank_change_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyTeamDetails)
}

void CLobbyTeamDetails::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_logo_, 0, reinterpret_cast<char*>(&rank_change_) -
    reinterpret_cast<char*>(&team_logo_) + sizeof(rank_change_));
}

CLobbyTeamDetails::~CLobbyTeamDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyTeamDetails)
  SharedDtor();
}

void CLobbyTeamDetails::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guild_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLobbyTeamDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTeamDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLobbyTeamDetails& CLobbyTeamDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CLobbyTeamDetails* CLobbyTeamDetails::New(::google::protobuf::Arena* arena) const {
  CLobbyTeamDetails* n = new CLobbyTeamDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyTeamDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyTeamDetails)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_team_name()) {
      GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_tag()) {
      GOOGLE_DCHECK(!team_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_guild_name()) {
      GOOGLE_DCHECK(!guild_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guild_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_guild_tag()) {
      GOOGLE_DCHECK(!guild_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*guild_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&team_logo_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&team_logo_) + sizeof(team_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&guild_id_, 0, reinterpret_cast<char*>(&rank_change_) -
      reinterpret_cast<char*>(&guild_id_) + sizeof(rank_change_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLobbyTeamDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyTeamDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string team_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), this->team_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_team_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_banner_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_team_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool team_complete = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_team_complete();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.guild_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string guild_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guild_tag().data(), this->guild_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyTeamDetails.guild_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_logo = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_guild_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_base_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_guild_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_banner_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_guild_banner_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_banner_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rank = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_rank();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional sint32 rank_change = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_rank_change();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &rank_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_home_team = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_is_home_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_home_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyTeamDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyTeamDetails)
  return false;
#undef DO_
}

void CLobbyTeamDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_tag(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->team_base_logo(), output);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_banner_logo(), output);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->team_complete(), output);
  }

  // optional string guild_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guild_name(), output);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->guild_tag(), output);
  }

  // optional uint32 guild_id = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guild_logo(), output);
  }

  // optional uint64 guild_base_logo = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->guild_base_logo(), output);
  }

  // optional uint64 guild_banner_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->guild_banner_logo(), output);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank(), output);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(16, this->rank_change(), output);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_home_team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyTeamDetails)
}

::google::protobuf::uint8* CLobbyTeamDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyTeamDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string team_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // optional string team_tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), this->team_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_tag(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional uint64 team_base_logo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->team_base_logo(), target);
  }

  // optional uint64 team_banner_logo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_banner_logo(), target);
  }

  // optional bool team_complete = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->team_complete(), target);
  }

  // optional string guild_name = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guild_name(), target);
  }

  // optional string guild_tag = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guild_tag().data(), this->guild_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyTeamDetails.guild_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->guild_tag(), target);
  }

  // optional uint32 guild_id = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guild_logo(), target);
  }

  // optional uint64 guild_base_logo = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->guild_base_logo(), target);
  }

  // optional uint64 guild_banner_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->guild_banner_logo(), target);
  }

  // optional uint32 rank = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank(), target);
  }

  // optional sint32 rank_change = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(16, this->rank_change(), target);
  }

  // optional bool is_home_team = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_home_team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyTeamDetails)
  return target;
}

size_t CLobbyTeamDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyTeamDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 1;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 3;
    if (has_team_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string guild_name = 9;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional string guild_tag = 10;
    if (has_guild_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_tag());
    }

    // optional uint64 team_logo = 5;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint64 team_base_logo = 6;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_banner_logo = 7;
    if (has_team_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_banner_logo());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 guild_id = 11;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint64 guild_logo = 12;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

    // optional uint64 guild_base_logo = 13;
    if (has_guild_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_base_logo());
    }

    // optional bool team_complete = 8;
    if (has_team_complete()) {
      total_size += 1 + 1;
    }

    // optional bool is_home_team = 17;
    if (has_is_home_team()) {
      total_size += 2 + 1;
    }

    // optional uint32 rank = 15;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint64 guild_banner_logo = 14;
    if (has_guild_banner_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_banner_logo());
    }

    // optional sint32 rank_change = 16;
    if (has_rank_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->rank_change());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTeamDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTeamDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyTeamDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyTeamDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyTeamDetails)
    MergeFrom(*source);
  }
}

void CLobbyTeamDetails::MergeFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyTeamDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_tag();
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_guild_name();
      guild_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_guild_tag();
      guild_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.guild_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_banner_logo_ = from.team_banner_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      guild_id_ = from.guild_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      guild_logo_ = from.guild_logo_;
    }
    if (cached_has_bits & 0x00000400u) {
      guild_base_logo_ = from.guild_base_logo_;
    }
    if (cached_has_bits & 0x00000800u) {
      team_complete_ = from.team_complete_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_home_team_ = from.is_home_team_;
    }
    if (cached_has_bits & 0x00002000u) {
      rank_ = from.rank_;
    }
    if (cached_has_bits & 0x00004000u) {
      guild_banner_logo_ = from.guild_banner_logo_;
    }
    if (cached_has_bits & 0x00008000u) {
      rank_change_ = from.rank_change_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTeamDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTeamDetails::CopyFrom(const CLobbyTeamDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyTeamDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTeamDetails::IsInitialized() const {
  return true;
}

void CLobbyTeamDetails::Swap(CLobbyTeamDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTeamDetails::InternalSwap(CLobbyTeamDetails* other) {
  team_name_.Swap(&other->team_name_);
  team_tag_.Swap(&other->team_tag_);
  guild_name_.Swap(&other->guild_name_);
  guild_tag_.Swap(&other->guild_tag_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(team_base_logo_, other->team_base_logo_);
  std::swap(team_banner_logo_, other->team_banner_logo_);
  std::swap(team_id_, other->team_id_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(guild_logo_, other->guild_logo_);
  std::swap(guild_base_logo_, other->guild_base_logo_);
  std::swap(team_complete_, other->team_complete_);
  std::swap(is_home_team_, other->is_home_team_);
  std::swap(rank_, other->rank_);
  std::swap(guild_banner_logo_, other->guild_banner_logo_);
  std::swap(rank_change_, other->rank_change_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyTeamDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyTeamDetails

// optional string team_name = 1;
bool CLobbyTeamDetails::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyTeamDetails::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyTeamDetails::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyTeamDetails::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CLobbyTeamDetails::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_name)
  return team_name_.GetNoArena();
}
void CLobbyTeamDetails::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_name)
}
#if LANG_CXX11
void CLobbyTeamDetails::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.team_name)
}
#endif
void CLobbyTeamDetails::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.team_name)
}
void CLobbyTeamDetails::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.team_name)
}
::std::string* CLobbyTeamDetails::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyTeamDetails::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyTeamDetails::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.team_name)
}

// optional string team_tag = 3;
bool CLobbyTeamDetails::has_team_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyTeamDetails::set_has_team_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyTeamDetails::clear_has_team_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyTeamDetails::clear_team_tag() {
  team_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_tag();
}
const ::std::string& CLobbyTeamDetails::team_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_tag)
  return team_tag_.GetNoArena();
}
void CLobbyTeamDetails::set_team_tag(const ::std::string& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_tag)
}
#if LANG_CXX11
void CLobbyTeamDetails::set_team_tag(::std::string&& value) {
  set_has_team_tag();
  team_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.team_tag)
}
#endif
void CLobbyTeamDetails::set_team_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.team_tag)
}
void CLobbyTeamDetails::set_team_tag(const char* value, size_t size) {
  set_has_team_tag();
  team_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.team_tag)
}
::std::string* CLobbyTeamDetails::mutable_team_tag() {
  set_has_team_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.team_tag)
  return team_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyTeamDetails::release_team_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.team_tag)
  clear_has_team_tag();
  return team_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyTeamDetails::set_allocated_team_tag(::std::string* team_tag) {
  if (team_tag != NULL) {
    set_has_team_tag();
  } else {
    clear_has_team_tag();
  }
  team_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.team_tag)
}

// optional uint32 team_id = 4;
bool CLobbyTeamDetails::has_team_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CLobbyTeamDetails::set_has_team_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CLobbyTeamDetails::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CLobbyTeamDetails::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CLobbyTeamDetails::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_id)
  return team_id_;
}
void CLobbyTeamDetails::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_id)
}

// optional uint64 team_logo = 5;
bool CLobbyTeamDetails::has_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CLobbyTeamDetails::set_has_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CLobbyTeamDetails::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CLobbyTeamDetails::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_logo)
  return team_logo_;
}
void CLobbyTeamDetails::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_logo)
}

// optional uint64 team_base_logo = 6;
bool CLobbyTeamDetails::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CLobbyTeamDetails::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CLobbyTeamDetails::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CLobbyTeamDetails::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::team_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_base_logo)
  return team_base_logo_;
}
void CLobbyTeamDetails::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_base_logo)
}

// optional uint64 team_banner_logo = 7;
bool CLobbyTeamDetails::has_team_banner_logo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CLobbyTeamDetails::set_has_team_banner_logo() {
  _has_bits_[0] |= 0x00000040u;
}
void CLobbyTeamDetails::clear_has_team_banner_logo() {
  _has_bits_[0] &= ~0x00000040u;
}
void CLobbyTeamDetails::clear_team_banner_logo() {
  team_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_banner_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::team_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_banner_logo)
  return team_banner_logo_;
}
void CLobbyTeamDetails::set_team_banner_logo(::google::protobuf::uint64 value) {
  set_has_team_banner_logo();
  team_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_banner_logo)
}

// optional bool team_complete = 8;
bool CLobbyTeamDetails::has_team_complete() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CLobbyTeamDetails::set_has_team_complete() {
  _has_bits_[0] |= 0x00000800u;
}
void CLobbyTeamDetails::clear_has_team_complete() {
  _has_bits_[0] &= ~0x00000800u;
}
void CLobbyTeamDetails::clear_team_complete() {
  team_complete_ = false;
  clear_has_team_complete();
}
bool CLobbyTeamDetails::team_complete() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.team_complete)
  return team_complete_;
}
void CLobbyTeamDetails::set_team_complete(bool value) {
  set_has_team_complete();
  team_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.team_complete)
}

// optional string guild_name = 9;
bool CLobbyTeamDetails::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyTeamDetails::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyTeamDetails::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyTeamDetails::clear_guild_name() {
  guild_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_name();
}
const ::std::string& CLobbyTeamDetails::guild_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_name)
  return guild_name_.GetNoArena();
}
void CLobbyTeamDetails::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_name)
}
#if LANG_CXX11
void CLobbyTeamDetails::set_guild_name(::std::string&& value) {
  set_has_guild_name();
  guild_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.guild_name)
}
#endif
void CLobbyTeamDetails::set_guild_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.guild_name)
}
void CLobbyTeamDetails::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  guild_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.guild_name)
}
::std::string* CLobbyTeamDetails::mutable_guild_name() {
  set_has_guild_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.guild_name)
  return guild_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyTeamDetails::release_guild_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.guild_name)
  clear_has_guild_name();
  return guild_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyTeamDetails::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name != NULL) {
    set_has_guild_name();
  } else {
    clear_has_guild_name();
  }
  guild_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.guild_name)
}

// optional string guild_tag = 10;
bool CLobbyTeamDetails::has_guild_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyTeamDetails::set_has_guild_tag() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyTeamDetails::clear_has_guild_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyTeamDetails::clear_guild_tag() {
  guild_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_guild_tag();
}
const ::std::string& CLobbyTeamDetails::guild_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_tag)
  return guild_tag_.GetNoArena();
}
void CLobbyTeamDetails::set_guild_tag(const ::std::string& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_tag)
}
#if LANG_CXX11
void CLobbyTeamDetails::set_guild_tag(::std::string&& value) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyTeamDetails.guild_tag)
}
#endif
void CLobbyTeamDetails::set_guild_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyTeamDetails.guild_tag)
}
void CLobbyTeamDetails::set_guild_tag(const char* value, size_t size) {
  set_has_guild_tag();
  guild_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyTeamDetails.guild_tag)
}
::std::string* CLobbyTeamDetails::mutable_guild_tag() {
  set_has_guild_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyTeamDetails.guild_tag)
  return guild_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyTeamDetails::release_guild_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyTeamDetails.guild_tag)
  clear_has_guild_tag();
  return guild_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyTeamDetails::set_allocated_guild_tag(::std::string* guild_tag) {
  if (guild_tag != NULL) {
    set_has_guild_tag();
  } else {
    clear_has_guild_tag();
  }
  guild_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), guild_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyTeamDetails.guild_tag)
}

// optional uint32 guild_id = 11;
bool CLobbyTeamDetails::has_guild_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CLobbyTeamDetails::set_has_guild_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CLobbyTeamDetails::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CLobbyTeamDetails::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CLobbyTeamDetails::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_id)
  return guild_id_;
}
void CLobbyTeamDetails::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_id)
}

// optional uint64 guild_logo = 12;
bool CLobbyTeamDetails::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CLobbyTeamDetails::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000200u;
}
void CLobbyTeamDetails::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000200u;
}
void CLobbyTeamDetails::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::guild_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_logo)
  return guild_logo_;
}
void CLobbyTeamDetails::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_logo)
}

// optional uint64 guild_base_logo = 13;
bool CLobbyTeamDetails::has_guild_base_logo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CLobbyTeamDetails::set_has_guild_base_logo() {
  _has_bits_[0] |= 0x00000400u;
}
void CLobbyTeamDetails::clear_has_guild_base_logo() {
  _has_bits_[0] &= ~0x00000400u;
}
void CLobbyTeamDetails::clear_guild_base_logo() {
  guild_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_base_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::guild_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_base_logo)
  return guild_base_logo_;
}
void CLobbyTeamDetails::set_guild_base_logo(::google::protobuf::uint64 value) {
  set_has_guild_base_logo();
  guild_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_base_logo)
}

// optional uint64 guild_banner_logo = 14;
bool CLobbyTeamDetails::has_guild_banner_logo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CLobbyTeamDetails::set_has_guild_banner_logo() {
  _has_bits_[0] |= 0x00004000u;
}
void CLobbyTeamDetails::clear_has_guild_banner_logo() {
  _has_bits_[0] &= ~0x00004000u;
}
void CLobbyTeamDetails::clear_guild_banner_logo() {
  guild_banner_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_banner_logo();
}
::google::protobuf::uint64 CLobbyTeamDetails::guild_banner_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.guild_banner_logo)
  return guild_banner_logo_;
}
void CLobbyTeamDetails::set_guild_banner_logo(::google::protobuf::uint64 value) {
  set_has_guild_banner_logo();
  guild_banner_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.guild_banner_logo)
}

// optional uint32 rank = 15;
bool CLobbyTeamDetails::has_rank() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CLobbyTeamDetails::set_has_rank() {
  _has_bits_[0] |= 0x00002000u;
}
void CLobbyTeamDetails::clear_has_rank() {
  _has_bits_[0] &= ~0x00002000u;
}
void CLobbyTeamDetails::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
::google::protobuf::uint32 CLobbyTeamDetails::rank() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.rank)
  return rank_;
}
void CLobbyTeamDetails::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.rank)
}

// optional sint32 rank_change = 16;
bool CLobbyTeamDetails::has_rank_change() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CLobbyTeamDetails::set_has_rank_change() {
  _has_bits_[0] |= 0x00008000u;
}
void CLobbyTeamDetails::clear_has_rank_change() {
  _has_bits_[0] &= ~0x00008000u;
}
void CLobbyTeamDetails::clear_rank_change() {
  rank_change_ = 0;
  clear_has_rank_change();
}
::google::protobuf::int32 CLobbyTeamDetails::rank_change() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.rank_change)
  return rank_change_;
}
void CLobbyTeamDetails::set_rank_change(::google::protobuf::int32 value) {
  set_has_rank_change();
  rank_change_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.rank_change)
}

// optional bool is_home_team = 17;
bool CLobbyTeamDetails::has_is_home_team() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CLobbyTeamDetails::set_has_is_home_team() {
  _has_bits_[0] |= 0x00001000u;
}
void CLobbyTeamDetails::clear_has_is_home_team() {
  _has_bits_[0] &= ~0x00001000u;
}
void CLobbyTeamDetails::clear_is_home_team() {
  is_home_team_ = false;
  clear_has_is_home_team();
}
bool CLobbyTeamDetails::is_home_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTeamDetails.is_home_team)
  return is_home_team_;
}
void CLobbyTeamDetails::set_is_home_team(bool value) {
  set_has_is_home_team();
  is_home_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTeamDetails.is_home_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyTimedRewardDetails::kItemDefIndexFieldNumber;
const int CLobbyTimedRewardDetails::kIsSupplyCrateFieldNumber;
const int CLobbyTimedRewardDetails::kIsTimedDropFieldNumber;
const int CLobbyTimedRewardDetails::kAccountIdFieldNumber;
const int CLobbyTimedRewardDetails::kOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyTimedRewardDetails::CLobbyTimedRewardDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyTimedRewardDetails)
}
CLobbyTimedRewardDetails::CLobbyTimedRewardDetails(const CLobbyTimedRewardDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyTimedRewardDetails)
}

void CLobbyTimedRewardDetails::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_def_index_, 0, reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&item_def_index_) + sizeof(origin_));
}

CLobbyTimedRewardDetails::~CLobbyTimedRewardDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyTimedRewardDetails)
  SharedDtor();
}

void CLobbyTimedRewardDetails::SharedDtor() {
}

void CLobbyTimedRewardDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyTimedRewardDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLobbyTimedRewardDetails& CLobbyTimedRewardDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CLobbyTimedRewardDetails* CLobbyTimedRewardDetails::New(::google::protobuf::Arena* arena) const {
  CLobbyTimedRewardDetails* n = new CLobbyTimedRewardDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyTimedRewardDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyTimedRewardDetails)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&item_def_index_, 0, reinterpret_cast<char*>(&origin_) -
      reinterpret_cast<char*>(&item_def_index_) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLobbyTimedRewardDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyTimedRewardDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_item_def_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_supply_crate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_is_supply_crate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_supply_crate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_timed_drop = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_is_timed_drop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timed_drop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_origin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyTimedRewardDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyTimedRewardDetails)
  return false;
#undef DO_
}

void CLobbyTimedRewardDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyTimedRewardDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_supply_crate(), output);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_timed_drop(), output);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->account_id(), output);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyTimedRewardDetails)
}

::google::protobuf::uint8* CLobbyTimedRewardDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyTimedRewardDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional bool is_supply_crate = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_supply_crate(), target);
  }

  // optional bool is_timed_drop = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_timed_drop(), target);
  }

  // optional uint32 account_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->account_id(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyTimedRewardDetails)
  return target;
}

size_t CLobbyTimedRewardDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyTimedRewardDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 item_def_index = 2;
    if (has_item_def_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional bool is_supply_crate = 3;
    if (has_is_supply_crate()) {
      total_size += 1 + 1;
    }

    // optional bool is_timed_drop = 4;
    if (has_is_timed_drop()) {
      total_size += 1 + 1;
    }

    // optional uint32 account_id = 5;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 origin = 6;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyTimedRewardDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyTimedRewardDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyTimedRewardDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyTimedRewardDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyTimedRewardDetails)
    MergeFrom(*source);
  }
}

void CLobbyTimedRewardDetails::MergeFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyTimedRewardDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_supply_crate_ = from.is_supply_crate_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_timed_drop_ = from.is_timed_drop_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyTimedRewardDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyTimedRewardDetails::CopyFrom(const CLobbyTimedRewardDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyTimedRewardDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyTimedRewardDetails::IsInitialized() const {
  return true;
}

void CLobbyTimedRewardDetails::Swap(CLobbyTimedRewardDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyTimedRewardDetails::InternalSwap(CLobbyTimedRewardDetails* other) {
  std::swap(item_def_index_, other->item_def_index_);
  std::swap(is_supply_crate_, other->is_supply_crate_);
  std::swap(is_timed_drop_, other->is_timed_drop_);
  std::swap(account_id_, other->account_id_);
  std::swap(origin_, other->origin_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyTimedRewardDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyTimedRewardDetails

// optional uint32 item_def_index = 2;
bool CLobbyTimedRewardDetails::has_item_def_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyTimedRewardDetails::set_has_item_def_index() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyTimedRewardDetails::clear_has_item_def_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyTimedRewardDetails::clear_item_def_index() {
  item_def_index_ = 0u;
  clear_has_item_def_index();
}
::google::protobuf::uint32 CLobbyTimedRewardDetails::item_def_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.item_def_index)
  return item_def_index_;
}
void CLobbyTimedRewardDetails::set_item_def_index(::google::protobuf::uint32 value) {
  set_has_item_def_index();
  item_def_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.item_def_index)
}

// optional bool is_supply_crate = 3;
bool CLobbyTimedRewardDetails::has_is_supply_crate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyTimedRewardDetails::set_has_is_supply_crate() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyTimedRewardDetails::clear_has_is_supply_crate() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyTimedRewardDetails::clear_is_supply_crate() {
  is_supply_crate_ = false;
  clear_has_is_supply_crate();
}
bool CLobbyTimedRewardDetails::is_supply_crate() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.is_supply_crate)
  return is_supply_crate_;
}
void CLobbyTimedRewardDetails::set_is_supply_crate(bool value) {
  set_has_is_supply_crate();
  is_supply_crate_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.is_supply_crate)
}

// optional bool is_timed_drop = 4;
bool CLobbyTimedRewardDetails::has_is_timed_drop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyTimedRewardDetails::set_has_is_timed_drop() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyTimedRewardDetails::clear_has_is_timed_drop() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyTimedRewardDetails::clear_is_timed_drop() {
  is_timed_drop_ = false;
  clear_has_is_timed_drop();
}
bool CLobbyTimedRewardDetails::is_timed_drop() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.is_timed_drop)
  return is_timed_drop_;
}
void CLobbyTimedRewardDetails::set_is_timed_drop(bool value) {
  set_has_is_timed_drop();
  is_timed_drop_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.is_timed_drop)
}

// optional uint32 account_id = 5;
bool CLobbyTimedRewardDetails::has_account_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyTimedRewardDetails::set_has_account_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyTimedRewardDetails::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyTimedRewardDetails::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CLobbyTimedRewardDetails::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.account_id)
  return account_id_;
}
void CLobbyTimedRewardDetails::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.account_id)
}

// optional uint32 origin = 6;
bool CLobbyTimedRewardDetails::has_origin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CLobbyTimedRewardDetails::set_has_origin() {
  _has_bits_[0] |= 0x00000010u;
}
void CLobbyTimedRewardDetails::clear_has_origin() {
  _has_bits_[0] &= ~0x00000010u;
}
void CLobbyTimedRewardDetails::clear_origin() {
  origin_ = 0u;
  clear_has_origin();
}
::google::protobuf::uint32 CLobbyTimedRewardDetails::origin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyTimedRewardDetails.origin)
  return origin_;
}
void CLobbyTimedRewardDetails::set_origin(::google::protobuf::uint32 value) {
  set_has_origin();
  origin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyTimedRewardDetails.origin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLobbyBroadcastChannelInfo::kChannelIdFieldNumber;
const int CLobbyBroadcastChannelInfo::kCountryCodeFieldNumber;
const int CLobbyBroadcastChannelInfo::kDescriptionFieldNumber;
const int CLobbyBroadcastChannelInfo::kLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CLobbyBroadcastChannelInfo)
}
CLobbyBroadcastChannelInfo::CLobbyBroadcastChannelInfo(const CLobbyBroadcastChannelInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country_code()) {
    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_language_code()) {
    language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
  }
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CLobbyBroadcastChannelInfo)
}

void CLobbyBroadcastChannelInfo::SharedCtor() {
  _cached_size_ = 0;
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_id_ = 0u;
}

CLobbyBroadcastChannelInfo::~CLobbyBroadcastChannelInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CLobbyBroadcastChannelInfo)
  SharedDtor();
}

void CLobbyBroadcastChannelInfo::SharedDtor() {
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CLobbyBroadcastChannelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLobbyBroadcastChannelInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CLobbyBroadcastChannelInfo& CLobbyBroadcastChannelInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CLobbyBroadcastChannelInfo* CLobbyBroadcastChannelInfo::New(::google::protobuf::Arena* arena) const {
  CLobbyBroadcastChannelInfo* n = new CLobbyBroadcastChannelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLobbyBroadcastChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CLobbyBroadcastChannelInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_country_code()) {
      GOOGLE_DCHECK(!country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_language_code()) {
      GOOGLE_DCHECK(!language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*language_code_.UnsafeRawStringPointer())->clear();
    }
  }
  channel_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CLobbyBroadcastChannelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CLobbyBroadcastChannelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string country_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->language_code().data(), this->language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CLobbyBroadcastChannelInfo.language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CLobbyBroadcastChannelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CLobbyBroadcastChannelInfo)
  return false;
#undef DO_
}

void CLobbyBroadcastChannelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CLobbyBroadcastChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel_id(), output);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->country_code(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CLobbyBroadcastChannelInfo)
}

::google::protobuf::uint8* CLobbyBroadcastChannelInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CLobbyBroadcastChannelInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel_id(), target);
  }

  // optional string country_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->country_code(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional string language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->language_code().data(), this->language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CLobbyBroadcastChannelInfo.language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CLobbyBroadcastChannelInfo)
  return target;
}

size_t CLobbyBroadcastChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CLobbyBroadcastChannelInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string country_code = 2;
    if (has_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country_code());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string language_code = 4;
    if (has_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_code());
    }

    // optional uint32 channel_id = 1;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLobbyBroadcastChannelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CLobbyBroadcastChannelInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CLobbyBroadcastChannelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CLobbyBroadcastChannelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CLobbyBroadcastChannelInfo)
    MergeFrom(*source);
  }
}

void CLobbyBroadcastChannelInfo::MergeFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_country_code();
      country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_language_code();
      language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.language_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CLobbyBroadcastChannelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLobbyBroadcastChannelInfo::CopyFrom(const CLobbyBroadcastChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CLobbyBroadcastChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLobbyBroadcastChannelInfo::IsInitialized() const {
  return true;
}

void CLobbyBroadcastChannelInfo::Swap(CLobbyBroadcastChannelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLobbyBroadcastChannelInfo::InternalSwap(CLobbyBroadcastChannelInfo* other) {
  country_code_.Swap(&other->country_code_);
  description_.Swap(&other->description_);
  language_code_.Swap(&other->language_code_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLobbyBroadcastChannelInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLobbyBroadcastChannelInfo

// optional uint32 channel_id = 1;
bool CLobbyBroadcastChannelInfo::has_channel_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_channel_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CLobbyBroadcastChannelInfo::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CLobbyBroadcastChannelInfo::clear_channel_id() {
  channel_id_ = 0u;
  clear_has_channel_id();
}
::google::protobuf::uint32 CLobbyBroadcastChannelInfo::channel_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.channel_id)
  return channel_id_;
}
void CLobbyBroadcastChannelInfo::set_channel_id(::google::protobuf::uint32 value) {
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.channel_id)
}

// optional string country_code = 2;
bool CLobbyBroadcastChannelInfo::has_country_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_country_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CLobbyBroadcastChannelInfo::clear_has_country_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CLobbyBroadcastChannelInfo::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country_code();
}
const ::std::string& CLobbyBroadcastChannelInfo::country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  return country_code_.GetNoArena();
}
void CLobbyBroadcastChannelInfo::set_country_code(const ::std::string& value) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
#if LANG_CXX11
void CLobbyBroadcastChannelInfo::set_country_code(::std::string&& value) {
  set_has_country_code();
  country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
#endif
void CLobbyBroadcastChannelInfo::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
void CLobbyBroadcastChannelInfo::set_country_code(const char* value, size_t size) {
  set_has_country_code();
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}
::std::string* CLobbyBroadcastChannelInfo::mutable_country_code() {
  set_has_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyBroadcastChannelInfo::release_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.country_code)
  clear_has_country_code();
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyBroadcastChannelInfo::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    set_has_country_code();
  } else {
    clear_has_country_code();
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.country_code)
}

// optional string description = 3;
bool CLobbyBroadcastChannelInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CLobbyBroadcastChannelInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CLobbyBroadcastChannelInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CLobbyBroadcastChannelInfo::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.description)
  return description_.GetNoArena();
}
void CLobbyBroadcastChannelInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.description)
}
#if LANG_CXX11
void CLobbyBroadcastChannelInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.description)
}
#endif
void CLobbyBroadcastChannelInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.description)
}
void CLobbyBroadcastChannelInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.description)
}
::std::string* CLobbyBroadcastChannelInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyBroadcastChannelInfo::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyBroadcastChannelInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.description)
}

// optional string language_code = 4;
bool CLobbyBroadcastChannelInfo::has_language_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CLobbyBroadcastChannelInfo::set_has_language_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CLobbyBroadcastChannelInfo::clear_has_language_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CLobbyBroadcastChannelInfo::clear_language_code() {
  language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_language_code();
}
const ::std::string& CLobbyBroadcastChannelInfo::language_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  return language_code_.GetNoArena();
}
void CLobbyBroadcastChannelInfo::set_language_code(const ::std::string& value) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
#if LANG_CXX11
void CLobbyBroadcastChannelInfo::set_language_code(::std::string&& value) {
  set_has_language_code();
  language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
#endif
void CLobbyBroadcastChannelInfo::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
void CLobbyBroadcastChannelInfo::set_language_code(const char* value, size_t size) {
  set_has_language_code();
  language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}
::std::string* CLobbyBroadcastChannelInfo::mutable_language_code() {
  set_has_language_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  return language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CLobbyBroadcastChannelInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CLobbyBroadcastChannelInfo.language_code)
  clear_has_language_code();
  return language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CLobbyBroadcastChannelInfo::set_allocated_language_code(::std::string* language_code) {
  if (language_code != NULL) {
    set_has_language_code();
  } else {
    clear_has_language_code();
  }
  language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CLobbyBroadcastChannelInfo.language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobby_CExtraMsg::kIdFieldNumber;
const int CSODOTALobby_CExtraMsg::kContentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobby.CExtraMsg)
}
CSODOTALobby_CExtraMsg::CSODOTALobby_CExtraMsg(const CSODOTALobby_CExtraMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contents()) {
    contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobby.CExtraMsg)
}

void CSODOTALobby_CExtraMsg::SharedCtor() {
  _cached_size_ = 0;
  contents_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

CSODOTALobby_CExtraMsg::~CSODOTALobby_CExtraMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobby.CExtraMsg)
  SharedDtor();
}

void CSODOTALobby_CExtraMsg::SharedDtor() {
  contents_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSODOTALobby_CExtraMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby_CExtraMsg::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTALobby_CExtraMsg& CSODOTALobby_CExtraMsg::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTALobby_CExtraMsg* CSODOTALobby_CExtraMsg::New(::google::protobuf::Arena* arena) const {
  CSODOTALobby_CExtraMsg* n = new CSODOTALobby_CExtraMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobby_CExtraMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobby.CExtraMsg)
  if (has_contents()) {
    GOOGLE_DCHECK(!contents_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*contents_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTALobby_CExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobby.CExtraMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes contents = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobby.CExtraMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobby.CExtraMsg)
  return false;
#undef DO_
}

void CSODOTALobby_CExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobby.CExtraMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->contents(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobby.CExtraMsg)
}

::google::protobuf::uint8* CSODOTALobby_CExtraMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobby.CExtraMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional bytes contents = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->contents(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobby.CExtraMsg)
  return target;
}

size_t CSODOTALobby_CExtraMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobby.CExtraMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->contents());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby_CExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby_CExtraMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobby_CExtraMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobby.CExtraMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobby.CExtraMsg)
    MergeFrom(*source);
  }
}

void CSODOTALobby_CExtraMsg::MergeFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contents();
      contents_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contents_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSODOTALobby_CExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby_CExtraMsg::CopyFrom(const CSODOTALobby_CExtraMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobby.CExtraMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby_CExtraMsg::IsInitialized() const {
  return true;
}

void CSODOTALobby_CExtraMsg::Swap(CSODOTALobby_CExtraMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby_CExtraMsg::InternalSwap(CSODOTALobby_CExtraMsg* other) {
  contents_.Swap(&other->contents_);
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobby_CExtraMsg::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobby_CExtraMsg

// optional uint32 id = 1;
bool CSODOTALobby_CExtraMsg::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobby_CExtraMsg::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobby_CExtraMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobby_CExtraMsg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CSODOTALobby_CExtraMsg::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.CExtraMsg.id)
  return id_;
}
void CSODOTALobby_CExtraMsg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.CExtraMsg.id)
}

// optional bytes contents = 2;
bool CSODOTALobby_CExtraMsg::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobby_CExtraMsg::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobby_CExtraMsg::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobby_CExtraMsg::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contents();
}
const ::std::string& CSODOTALobby_CExtraMsg::contents() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.CExtraMsg.contents)
  return contents_.GetNoArena();
}
void CSODOTALobby_CExtraMsg::set_contents(const ::std::string& value) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
#if LANG_CXX11
void CSODOTALobby_CExtraMsg::set_contents(::std::string&& value) {
  set_has_contents();
  contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
#endif
void CSODOTALobby_CExtraMsg::set_contents(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
void CSODOTALobby_CExtraMsg::set_contents(const void* value, size_t size) {
  set_has_contents();
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.CExtraMsg.contents)
}
::std::string* CSODOTALobby_CExtraMsg::mutable_contents() {
  set_has_contents();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.CExtraMsg.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby_CExtraMsg::release_contents() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.CExtraMsg.contents)
  clear_has_contents();
  return contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby_CExtraMsg::set_allocated_contents(::std::string* contents) {
  if (contents != NULL) {
    set_has_contents();
  } else {
    clear_has_contents();
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.CExtraMsg.contents)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSODOTALobby::kLobbyIdFieldNumber;
const int CSODOTALobby::kMembersFieldNumber;
const int CSODOTALobby::kLeftMembersFieldNumber;
const int CSODOTALobby::kLeaderIdFieldNumber;
const int CSODOTALobby::kServerIdFieldNumber;
const int CSODOTALobby::kGameModeFieldNumber;
const int CSODOTALobby::kPendingInvitesFieldNumber;
const int CSODOTALobby::kStateFieldNumber;
const int CSODOTALobby::kConnectFieldNumber;
const int CSODOTALobby::kLobbyTypeFieldNumber;
const int CSODOTALobby::kAllowCheatsFieldNumber;
const int CSODOTALobby::kFillWithBotsFieldNumber;
const int CSODOTALobby::kIntroModeFieldNumber;
const int CSODOTALobby::kGameNameFieldNumber;
const int CSODOTALobby::kTeamDetailsFieldNumber;
const int CSODOTALobby::kTutorialLessonFieldNumber;
const int CSODOTALobby::kTournamentIdFieldNumber;
const int CSODOTALobby::kTournamentGameIdFieldNumber;
const int CSODOTALobby::kServerRegionFieldNumber;
const int CSODOTALobby::kGameStateFieldNumber;
const int CSODOTALobby::kNumSpectatorsFieldNumber;
const int CSODOTALobby::kMatchgroupFieldNumber;
const int CSODOTALobby::kCmPickFieldNumber;
const int CSODOTALobby::kMatchIdFieldNumber;
const int CSODOTALobby::kAllowSpectatingFieldNumber;
const int CSODOTALobby::kBotDifficultyRadiantFieldNumber;
const int CSODOTALobby::kGameVersionFieldNumber;
const int CSODOTALobby::kTimedRewardDetailsFieldNumber;
const int CSODOTALobby::kPassKeyFieldNumber;
const int CSODOTALobby::kLeagueidFieldNumber;
const int CSODOTALobby::kPenaltyLevelRadiantFieldNumber;
const int CSODOTALobby::kPenaltyLevelDireFieldNumber;
const int CSODOTALobby::kLoadGameIdFieldNumber;
const int CSODOTALobby::kSeriesTypeFieldNumber;
const int CSODOTALobby::kRadiantSeriesWinsFieldNumber;
const int CSODOTALobby::kDireSeriesWinsFieldNumber;
const int CSODOTALobby::kLootGeneratedFieldNumber;
const int CSODOTALobby::kLootAwardedFieldNumber;
const int CSODOTALobby::kAllchatFieldNumber;
const int CSODOTALobby::kDotaTvDelayFieldNumber;
const int CSODOTALobby::kCustomGameModeFieldNumber;
const int CSODOTALobby::kCustomMapNameFieldNumber;
const int CSODOTALobby::kCustomDifficultyFieldNumber;
const int CSODOTALobby::kLanFieldNumber;
const int CSODOTALobby::kBroadcastChannelInfoFieldNumber;
const int CSODOTALobby::kFirstLeaverAccountidFieldNumber;
const int CSODOTALobby::kSeriesIdFieldNumber;
const int CSODOTALobby::kLowPriorityFieldNumber;
const int CSODOTALobby::kExtraMessagesFieldNumber;
const int CSODOTALobby::kSaveGameFieldNumber;
const int CSODOTALobby::kFirstBloodHappenedFieldNumber;
const int CSODOTALobby::kMatchOutcomeFieldNumber;
const int CSODOTALobby::kMassDisconnectFieldNumber;
const int CSODOTALobby::kCustomGameIdFieldNumber;
const int CSODOTALobby::kCustomMinPlayersFieldNumber;
const int CSODOTALobby::kCustomMaxPlayersFieldNumber;
const int CSODOTALobby::kPartnerTypeFieldNumber;
const int CSODOTALobby::kLanHostPingToServerRegionFieldNumber;
const int CSODOTALobby::kVisibilityFieldNumber;
const int CSODOTALobby::kCustomGameCrcFieldNumber;
const int CSODOTALobby::kCustomGameAutoCreatedLobbyFieldNumber;
const int CSODOTALobby::kLeagueSeriesIdFieldNumber;
const int CSODOTALobby::kLeagueGameIdFieldNumber;
const int CSODOTALobby::kCustomGameTimestampFieldNumber;
const int CSODOTALobby::kPreviousSeriesMatchesFieldNumber;
const int CSODOTALobby::kPreviousMatchOverrideFieldNumber;
const int CSODOTALobby::kCustomGameUsesAccountRecordsFieldNumber;
const int CSODOTALobby::kGameStartTimeFieldNumber;
const int CSODOTALobby::kPauseSettingFieldNumber;
const int CSODOTALobby::kLobbyMvpAccountIdFieldNumber;
const int CSODOTALobby::kWeekendTourneyDivisionIdFieldNumber;
const int CSODOTALobby::kWeekendTourneySkillLevelFieldNumber;
const int CSODOTALobby::kWeekendTourneyBracketRoundFieldNumber;
const int CSODOTALobby::kBotDifficultyDireFieldNumber;
const int CSODOTALobby::kBotRadiantFieldNumber;
const int CSODOTALobby::kBotDireFieldNumber;
const int CSODOTALobby::kEventProgressionEnabledFieldNumber;
const int CSODOTALobby::kSelectionPriorityRulesFieldNumber;
const int CSODOTALobby::kSeriesPreviousSelectionPriorityTeamIdFieldNumber;
const int CSODOTALobby::kSeriesCurrentSelectionPriorityTeamIdFieldNumber;
const int CSODOTALobby::kSeriesCurrentPriorityTeamChoiceFieldNumber;
const int CSODOTALobby::kSeriesCurrentNonPriorityTeamChoiceFieldNumber;
const int CSODOTALobby::kSeriesCurrentSelectionPriorityUsedCoinTossFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSODOTALobby::CSODOTALobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSODOTALobby)
}
CSODOTALobby::CSODOTALobby(const CSODOTALobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_),
      left_members_(from.left_members_),
      pending_invites_(from.pending_invites_),
      team_details_(from.team_details_),
      timed_reward_details_(from.timed_reward_details_),
      broadcast_channel_info_(from.broadcast_channel_info_),
      extra_messages_(from.extra_messages_),
      previous_series_matches_(from.previous_series_matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_connect()) {
    connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
  }
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  if (from.has_save_game()) {
    save_game_ = new ::proto::dota::CDOTASaveGame(*from.save_game_);
  } else {
    save_game_ = NULL;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&bot_difficulty_dire_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(bot_difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSODOTALobby)
}

void CSODOTALobby::SharedCtor() {
  _cached_size_ = 0;
  connect_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&save_game_, 0, reinterpret_cast<char*>(&series_current_priority_team_choice_) -
    reinterpret_cast<char*>(&save_game_) + sizeof(series_current_priority_team_choice_));
  lobby_type_ = -1;
  allow_spectating_ = true;
  bot_difficulty_radiant_ = 3;
  bot_difficulty_dire_ = 3;
}

CSODOTALobby::~CSODOTALobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CSODOTALobby)
  SharedDtor();
}

void CSODOTALobby::SharedDtor() {
  connect_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete save_game_;
  }
}

void CSODOTALobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSODOTALobby::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSODOTALobby& CSODOTALobby::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSODOTALobby* CSODOTALobby::New(::google::protobuf::Arena* arena) const {
  CSODOTALobby* n = new CSODOTALobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSODOTALobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSODOTALobby)
  members_.Clear();
  left_members_.Clear();
  pending_invites_.Clear();
  team_details_.Clear();
  timed_reward_details_.Clear();
  broadcast_channel_info_.Clear();
  extra_messages_.Clear();
  previous_series_matches_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    if (has_connect()) {
      GOOGLE_DCHECK(!connect_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*connect_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_name()) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_pass_key()) {
      GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_game_mode()) {
      GOOGLE_DCHECK(!custom_game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_map_name()) {
      GOOGLE_DCHECK(!custom_map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_map_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_save_game()) {
      GOOGLE_DCHECK(save_game_ != NULL);
      save_game_->::proto::dota::CDOTASaveGame::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(game_mode_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&state_, 0, reinterpret_cast<char*>(&game_state_) -
      reinterpret_cast<char*>(&state_) + sizeof(game_state_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&num_spectators_, 0, reinterpret_cast<char*>(&cm_pick_) -
      reinterpret_cast<char*>(&num_spectators_) + sizeof(cm_pick_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&game_version_, 0, reinterpret_cast<char*>(&dire_series_wins_) -
      reinterpret_cast<char*>(&game_version_) + sizeof(dire_series_wins_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&loot_generated_, 0, reinterpret_cast<char*>(&low_priority_) -
      reinterpret_cast<char*>(&loot_generated_) + sizeof(low_priority_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&first_blood_happened_, 0, reinterpret_cast<char*>(&lan_host_ping_to_server_region_) -
      reinterpret_cast<char*>(&first_blood_happened_) + sizeof(lan_host_ping_to_server_region_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&visibility_, 0, reinterpret_cast<char*>(&series_current_non_priority_team_choice_) -
      reinterpret_cast<char*>(&visibility_) + sizeof(series_current_non_priority_team_choice_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&pause_setting_, 0, reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
      reinterpret_cast<char*>(&pause_setting_) + sizeof(weekend_tourney_skill_level_));
  }
  if (_has_bits_[64 / 32] & 255u) {
    ::memset(&weekend_tourney_bracket_round_, 0, reinterpret_cast<char*>(&series_current_priority_team_choice_) -
      reinterpret_cast<char*>(&weekend_tourney_bracket_round_) + sizeof(series_current_priority_team_choice_));
    lobby_type_ = -1;
  }
  if (_has_bits_[72 / 32] & 1792u) {
    allow_spectating_ = true;
    bot_difficulty_radiant_ = 3;
    bot_difficulty_dire_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSODOTALobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSODOTALobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTALobby_State_IsValid(value)) {
            set_state(static_cast< ::proto::dota::CSODOTALobby_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string connect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.connect");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_id = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_server_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTALobbyMember left_members = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_left_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 pending_invites = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 81u, input, this->mutable_pending_invites())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_pending_invites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 leader_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_leader_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &leader_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CSODOTALobby_LobbyType_IsValid(value)) {
            set_lobby_type(static_cast< ::proto::dota::CSODOTALobby_LobbyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cheats = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_allow_cheats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fill_with_bots = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_fill_with_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intro_mode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_intro_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tutorial_lesson = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_tutorial_lesson();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutorial_lesson_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_tournament_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameState_IsValid(value)) {
            set_game_state(static_cast< ::proto::dota::DOTA_GameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(22, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_spectators = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_num_spectators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroup = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_matchgroup();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::proto::dota::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(28, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_spectating = 31 [default = true];
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_allow_spectating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(36, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::proto::dota::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(37, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(306u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timed_reward_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(314u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          set_has_leagueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_radiant = 43 [default = 0];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          set_has_penalty_level_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_dire = 44 [default = 0];
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_penalty_level_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 load_game_id = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_load_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_series_wins = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_radiant_series_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_series_wins = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(384u)) {
          set_has_dire_series_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loot_generated = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_loot_generated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_generated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 loot_awarded = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(400u)) {
          set_has_loot_awarded();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loot_awarded_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allchat = 51 [default = false];
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_allchat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::proto::dota::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(53, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSODOTALobby.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_difficulty = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(448u)) {
          set_has_custom_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lan = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(456u)) {
          set_has_lan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(466u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_broadcast_channel_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 first_leaver_accountid = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(472u)) {
          set_has_first_leaver_accountid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_leaver_accountid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(480u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_priority = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_low_priority();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_priority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(498u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extra_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTASaveGame save_game = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(506u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool first_blood_happened = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_first_blood_happened();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &first_blood_happened_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mass_disconnect = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(536u)) {
          set_has_mass_disconnect();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mass_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(544u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(70, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_min_players = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(568u)) {
          set_has_custom_min_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_max_players = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(576u)) {
          set_has_custom_max_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(584u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PartnerAccountType_IsValid(value)) {
            set_partner_type(static_cast< ::proto::dota::PartnerAccountType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(73, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(592u)) {
          set_has_lan_host_ping_to_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(600u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::proto::dota::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(75, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(609u)) {
          set_has_custom_game_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_auto_created_lobby = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(616u)) {
          set_has_custom_game_auto_created_lobby();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_auto_created_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_series_id = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(624u)) {
          set_has_league_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_game_id = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(632u)) {
          set_has_league_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(645u)) {
          set_has_custom_game_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 previous_series_matches = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(648u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 648u, input, this->mutable_previous_series_matches())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(650u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_previous_series_matches())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 previous_match_override = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(656u)) {
          set_has_previous_match_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool custom_game_uses_account_records = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(664u)) {
          set_has_custom_game_uses_account_records();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &custom_game_uses_account_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_start_time = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(696u)) {
          set_has_game_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(704u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::proto::dota::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(88, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_mvp_account_id = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(712u)) {
          set_has_lobby_mvp_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_mvp_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division_id = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(720u)) {
          set_has_weekend_tourney_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(728u)) {
          set_has_weekend_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(736u)) {
          set_has_weekend_tourney_bracket_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(744u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(93, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_radiant = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(752u)) {
          set_has_bot_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_dire = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(760u)) {
          set_has_bot_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool event_progression_enabled = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(768u)) {
          set_has_event_progression_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &event_progression_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(776u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityRules_IsValid(value)) {
            set_selection_priority_rules(static_cast< ::proto::dota::DOTASelectionPriorityRules >(value));
          } else {
            mutable_unknown_fields()->AddVarint(97, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_previous_selection_priority_team_id = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(784u)) {
          set_has_series_previous_selection_priority_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_previous_selection_priority_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_current_selection_priority_team_id = 99;
      case 99: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(792u)) {
          set_has_series_current_selection_priority_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_current_selection_priority_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityChoice_IsValid(value)) {
            set_series_current_priority_team_choice(static_cast< ::proto::dota::DOTASelectionPriorityChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(100, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityChoice_IsValid(value)) {
            set_series_current_non_priority_team_choice(static_cast< ::proto::dota::DOTASelectionPriorityChoice >(value));
          } else {
            mutable_unknown_fields()->AddVarint(101, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool series_current_selection_priority_used_coin_toss = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(816u)) {
          set_has_series_current_selection_priority_used_coin_toss();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &series_current_selection_priority_used_coin_toss_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSODOTALobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSODOTALobby)
  return false;
#undef DO_
}

void CSODOTALobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSODOTALobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->game_mode(), output);
  }

  // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.connect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->connect(), output);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->server_id(), output);
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0, n = this->left_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->left_members(i), output);
  }

  // repeated fixed64 pending_invites = 10;
  for (int i = 0, n = this->pending_invites_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      10, this->pending_invites(i), output);
  }

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(11, this->leader_id(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->lobby_type(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->intro_mode(), output);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->game_name(), output);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->team_details(i), output);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->tutorial_lesson(), output);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tournament_game_id(), output);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->server_region(), output);
  }

  // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->game_state(), output);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->num_spectators(), output);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->matchgroup(), output);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->cm_pick(), output);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->match_id(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->allow_spectating(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      36, this->bot_difficulty_radiant(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      37, this->game_version(), output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->timed_reward_details(i), output);
  }

  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->pass_key(), output);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->load_game_id(), output);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->dire_series_wins(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->loot_generated(), output);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->loot_awarded(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->allchat(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      53, this->dota_tv_delay(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->custom_map_name(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->custom_difficulty(), output);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->lan(), output);
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0, n = this->broadcast_channel_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      58, this->broadcast_channel_info(i), output);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->first_leaver_accountid(), output);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->series_id(), output);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->low_priority(), output);
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0, n = this->extra_messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      62, this->extra_messages(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      63, *this->save_game_, output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->first_blood_happened(), output);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(67, this->mass_disconnect(), output);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(68, this->custom_game_id(), output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      70, this->match_outcome(), output);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(71, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(72, this->custom_max_players(), output);
  }

  // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      73, this->partner_type(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(74, this->lan_host_ping_to_server_region(), output);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      75, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(76, this->custom_game_crc(), output);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->custom_game_auto_created_lobby(), output);
  }

  // optional uint32 league_series_id = 78;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(78, this->league_series_id(), output);
  }

  // optional uint32 league_game_id = 79;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(79, this->league_game_id(), output);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(80, this->custom_game_timestamp(), output);
  }

  // repeated uint64 previous_series_matches = 81;
  for (int i = 0, n = this->previous_series_matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      81, this->previous_series_matches(i), output);
  }

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(82, this->previous_match_override(), output);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(83, this->custom_game_uses_account_records(), output);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(87, this->game_start_time(), output);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      88, this->pause_setting(), output);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(89, this->lobby_mvp_account_id(), output);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(90, this->weekend_tourney_division_id(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(91, this->weekend_tourney_skill_level(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(92, this->weekend_tourney_bracket_round(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      93, this->bot_difficulty_dire(), output);
  }

  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(94, this->bot_radiant(), output);
  }

  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(95, this->bot_dire(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool event_progression_enabled = 96;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(96, this->event_progression_enabled(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      97, this->selection_priority_rules(), output);
  }

  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(98, this->series_previous_selection_priority_team_id(), output);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(99, this->series_current_selection_priority_team_id(), output);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->series_current_priority_team_choice(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->series_current_non_priority_team_choice(), output);
  }

  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(102, this->series_current_selection_priority_used_coin_toss(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSODOTALobby)
}

::google::protobuf::uint8* CSODOTALobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSODOTALobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // repeated .proto.dota.CDOTALobbyMember members = 2;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->members(i), deterministic, target);
  }

  // optional uint32 game_mode = 3;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->game_mode(), target);
  }

  // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional string connect = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.connect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connect(), target);
  }

  // optional fixed64 server_id = 6 [default = 0];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->server_id(), target);
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  for (unsigned int i = 0, n = this->left_members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->left_members(i), deterministic, target);
  }

  // repeated fixed64 pending_invites = 10;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(10, this->pending_invites_, target);

  // optional fixed64 leader_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(11, this->leader_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->lobby_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allow_cheats = 13;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 14;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 15;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->intro_mode(), target);
  }

  // optional string game_name = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->game_name(), target);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, this->team_details(i), deterministic, target);
  }

  // optional uint32 tutorial_lesson = 18;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->tutorial_lesson(), target);
  }

  // optional uint32 tournament_id = 19;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 20;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tournament_game_id(), target);
  }

  // optional uint32 server_region = 21 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->server_region(), target);
  }

  // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      22, this->game_state(), target);
  }

  // optional uint32 num_spectators = 23;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->num_spectators(), target);
  }

  // optional uint32 matchgroup = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->matchgroup(), target);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->cm_pick(), target);
  }

  // optional uint64 match_id = 30;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->match_id(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool allow_spectating = 31 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->allow_spectating(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      36, this->bot_difficulty_radiant(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      37, this->game_version(), target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  for (unsigned int i = 0, n = this->timed_reward_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        38, this->timed_reward_details(i), deterministic, target);
  }

  // optional string pass_key = 39;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->pass_key(), target);
  }

  // optional uint32 leagueid = 42;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 43 [default = 0];
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 44 [default = 0];
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 45;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->load_game_id(), target);
  }

  // optional uint32 series_type = 46;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 47;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 48;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->dire_series_wins(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 loot_generated = 49;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->loot_generated(), target);
  }

  // optional uint32 loot_awarded = 50;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->loot_awarded(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool allchat = 51 [default = false];
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      53, this->dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string custom_game_mode = 54;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 55;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSODOTALobby.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->custom_map_name(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 custom_difficulty = 56;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->custom_difficulty(), target);
  }

  // optional bool lan = 57;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->lan(), target);
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  for (unsigned int i = 0, n = this->broadcast_channel_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        58, this->broadcast_channel_info(i), deterministic, target);
  }

  // optional uint32 first_leaver_accountid = 59;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->first_leaver_accountid(), target);
  }

  // optional uint32 series_id = 60;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->series_id(), target);
  }

  // optional bool low_priority = 61;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(61, this->low_priority(), target);
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  for (unsigned int i = 0, n = this->extra_messages_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        62, this->extra_messages(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CDOTASaveGame save_game = 63;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        63, *this->save_game_, deterministic, target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool first_blood_happened = 65;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->first_blood_happened(), target);
  }

  // optional bool mass_disconnect = 67;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(67, this->mass_disconnect(), target);
  }

  // optional uint64 custom_game_id = 68;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(68, this->custom_game_id(), target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      70, this->match_outcome(), target);
  }

  // optional uint32 custom_min_players = 71;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(71, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 72;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(72, this->custom_max_players(), target);
  }

  // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      73, this->partner_type(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 74;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(74, this->lan_host_ping_to_server_region(), target);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      75, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 76;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(76, this->custom_game_crc(), target);
  }

  // optional bool custom_game_auto_created_lobby = 77;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->custom_game_auto_created_lobby(), target);
  }

  // optional uint32 league_series_id = 78;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(78, this->league_series_id(), target);
  }

  // optional uint32 league_game_id = 79;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(79, this->league_game_id(), target);
  }

  // optional fixed32 custom_game_timestamp = 80;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(80, this->custom_game_timestamp(), target);
  }

  // repeated uint64 previous_series_matches = 81;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(81, this->previous_series_matches_, target);

  // optional uint64 previous_match_override = 82;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(82, this->previous_match_override(), target);
  }

  // optional bool custom_game_uses_account_records = 83;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(83, this->custom_game_uses_account_records(), target);
  }

  // optional uint32 game_start_time = 87;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(87, this->game_start_time(), target);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      88, this->pause_setting(), target);
  }

  // optional uint32 lobby_mvp_account_id = 89;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(89, this->lobby_mvp_account_id(), target);
  }

  // optional uint32 weekend_tourney_division_id = 90;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(90, this->weekend_tourney_division_id(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 91;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(91, this->weekend_tourney_skill_level(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional uint32 weekend_tourney_bracket_round = 92;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(92, this->weekend_tourney_bracket_round(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      93, this->bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 94;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(94, this->bot_radiant(), target);
  }

  // optional uint64 bot_dire = 95;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(95, this->bot_dire(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool event_progression_enabled = 96;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(96, this->event_progression_enabled(), target);
  }

  cached_has_bits = _has_bits_[2];
  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      97, this->selection_priority_rules(), target);
  }

  // optional uint32 series_previous_selection_priority_team_id = 98;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(98, this->series_previous_selection_priority_team_id(), target);
  }

  // optional uint32 series_current_selection_priority_team_id = 99;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(99, this->series_current_selection_priority_team_id(), target);
  }

  // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->series_current_priority_team_choice(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->series_current_non_priority_team_choice(), target);
  }

  // optional bool series_current_selection_priority_used_coin_toss = 102;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(102, this->series_current_selection_priority_used_coin_toss(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSODOTALobby)
  return target;
}

size_t CSODOTALobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSODOTALobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTALobbyMember members = 2;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  // repeated .proto.dota.CDOTALobbyMember left_members = 7;
  {
    unsigned int count = this->left_members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left_members(i));
    }
  }

  // repeated fixed64 pending_invites = 10;
  {
    unsigned int count = this->pending_invites_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->pending_invites_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 17;
  {
    unsigned int count = this->team_details_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_details(i));
    }
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
  {
    unsigned int count = this->timed_reward_details_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->timed_reward_details(i));
    }
  }

  // repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
  {
    unsigned int count = this->broadcast_channel_info_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->broadcast_channel_info(i));
    }
  }

  // repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
  {
    unsigned int count = this->extra_messages_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extra_messages(i));
    }
  }

  // repeated uint64 previous_series_matches = 81;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->previous_series_matches_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->previous_series_matches_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string connect = 5;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional string game_name = 16;
    if (has_game_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string pass_key = 39;
    if (has_pass_key()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional string custom_game_mode = 54;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 55;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional .proto.dota.CDOTASaveGame save_game = 63;
    if (has_save_game()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->save_game_);
    }

    // optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 game_mode = 3;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional fixed64 server_id = 6 [default = 0];
    if (has_server_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 leader_id = 11;
    if (has_leader_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 tutorial_lesson = 18;
    if (has_tutorial_lesson()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutorial_lesson());
    }

    // optional uint32 tournament_id = 19;
    if (has_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 20;
    if (has_tournament_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional uint32 server_region = 21 [default = 0];
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
    if (has_game_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 num_spectators = 23;
    if (has_num_spectators()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_spectators());
    }

    // optional bool allow_cheats = 13;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 14;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 15;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }

    // optional bool allchat = 51 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }

    // optional uint32 matchgroup = 25;
    if (has_matchgroup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroup());
    }

    // optional uint64 match_id = 30;
    if (has_match_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional uint32 leagueid = 42;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 43 [default = 0];
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

    // optional uint32 penalty_level_dire = 44 [default = 0];
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

    // optional uint32 load_game_id = 45;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 46;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 47;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 48;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional uint32 loot_generated = 49;
    if (has_loot_generated()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_generated());
    }

    // optional uint32 loot_awarded = 50;
    if (has_loot_awarded()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loot_awarded());
    }

    // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

    // optional uint32 custom_difficulty = 56;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional uint32 first_leaver_accountid = 59;
    if (has_first_leaver_accountid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->first_leaver_accountid());
    }

    // optional uint32 series_id = 60;
    if (has_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional bool lan = 57;
    if (has_lan()) {
      total_size += 2 + 1;
    }

    // optional bool low_priority = 61;
    if (has_low_priority()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool first_blood_happened = 65;
    if (has_first_blood_happened()) {
      total_size += 2 + 1;
    }

    // optional bool mass_disconnect = 67;
    if (has_mass_disconnect()) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 68;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

    // optional uint32 custom_min_players = 71;
    if (has_custom_min_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 72;
    if (has_custom_max_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
    if (has_partner_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->partner_type());
    }

    // optional uint32 lan_host_ping_to_server_region = 74;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional fixed64 custom_game_crc = 76;
    if (has_custom_game_crc()) {
      total_size += 2 + 8;
    }

    // optional uint32 league_series_id = 78;
    if (has_league_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_series_id());
    }

    // optional uint32 league_game_id = 79;
    if (has_league_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_game_id());
    }

    // optional uint64 previous_match_override = 82;
    if (has_previous_match_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

    // optional fixed32 custom_game_timestamp = 80;
    if (has_custom_game_timestamp()) {
      total_size += 2 + 4;
    }

    // optional uint32 game_start_time = 87;
    if (has_game_start_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_start_time());
    }

    // optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (has_series_current_non_priority_team_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->series_current_non_priority_team_choice());
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
    if (has_pause_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

    // optional uint32 lobby_mvp_account_id = 89;
    if (has_lobby_mvp_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_mvp_account_id());
    }

    // optional bool custom_game_auto_created_lobby = 77;
    if (has_custom_game_auto_created_lobby()) {
      total_size += 2 + 1;
    }

    // optional bool custom_game_uses_account_records = 83;
    if (has_custom_game_uses_account_records()) {
      total_size += 2 + 1;
    }

    // optional bool event_progression_enabled = 96;
    if (has_event_progression_enabled()) {
      total_size += 2 + 1;
    }

    // optional bool series_current_selection_priority_used_coin_toss = 102;
    if (has_series_current_selection_priority_used_coin_toss()) {
      total_size += 2 + 1;
    }

    // optional uint32 weekend_tourney_division_id = 90;
    if (has_weekend_tourney_division_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division_id());
    }

    // optional uint32 weekend_tourney_skill_level = 91;
    if (has_weekend_tourney_skill_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional uint32 weekend_tourney_bracket_round = 92;
    if (has_weekend_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

    // optional uint64 bot_radiant = 94;
    if (has_bot_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional uint64 bot_dire = 95;
    if (has_bot_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

    // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
    if (has_selection_priority_rules()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_priority_rules());
    }

    // optional uint32 series_previous_selection_priority_team_id = 98;
    if (has_series_previous_selection_priority_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_previous_selection_priority_team_id());
    }

    // optional uint32 series_current_selection_priority_team_id = 99;
    if (has_series_current_selection_priority_team_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_current_selection_priority_team_id());
    }

    // optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
    if (has_series_current_priority_team_choice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->series_current_priority_team_choice());
    }

    // optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lobby_type());
    }

  }
  if (_has_bits_[72 / 32] & 1792u) {
    // optional bool allow_spectating = 31 [default = true];
    if (has_allow_spectating()) {
      total_size += 2 + 1;
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSODOTALobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CSODOTALobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSODOTALobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSODOTALobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSODOTALobby)
    MergeFrom(*source);
  }
}

void CSODOTALobby::MergeFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSODOTALobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  left_members_.MergeFrom(from.left_members_);
  pending_invites_.MergeFrom(from.pending_invites_);
  team_details_.MergeFrom(from.team_details_);
  timed_reward_details_.MergeFrom(from.timed_reward_details_);
  broadcast_channel_info_.MergeFrom(from.broadcast_channel_info_);
  extra_messages_.MergeFrom(from.extra_messages_);
  previous_series_matches_.MergeFrom(from.previous_series_matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_connect();
      connect_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connect_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_custom_game_mode();
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_custom_map_name();
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_save_game()->::proto::dota::CDOTASaveGame::MergeFrom(from.save_game());
    }
    if (cached_has_bits & 0x00000040u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000200u) {
      server_id_ = from.server_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      leader_id_ = from.leader_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      tutorial_lesson_ = from.tutorial_lesson_;
    }
    if (cached_has_bits & 0x00001000u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00008000u) {
      game_state_ = from.game_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      num_spectators_ = from.num_spectators_;
    }
    if (cached_has_bits & 0x00020000u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00040000u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00080000u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00100000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x00200000u) {
      matchgroup_ = from.matchgroup_;
    }
    if (cached_has_bits & 0x00400000u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      cm_pick_ = from.cm_pick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      game_version_ = from.game_version_;
    }
    if (cached_has_bits & 0x02000000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x04000000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    if (cached_has_bits & 0x08000000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x10000000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x20000000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x40000000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    if (cached_has_bits & 0x80000000u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      loot_generated_ = from.loot_generated_;
    }
    if (cached_has_bits & 0x00000002u) {
      loot_awarded_ = from.loot_awarded_;
    }
    if (cached_has_bits & 0x00000004u) {
      dota_tv_delay_ = from.dota_tv_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_leaver_accountid_ = from.first_leaver_accountid_;
    }
    if (cached_has_bits & 0x00000020u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      lan_ = from.lan_;
    }
    if (cached_has_bits & 0x00000080u) {
      low_priority_ = from.low_priority_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      first_blood_happened_ = from.first_blood_happened_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_disconnect_ = from.mass_disconnect_;
    }
    if (cached_has_bits & 0x00000400u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      match_outcome_ = from.match_outcome_;
    }
    if (cached_has_bits & 0x00001000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x00002000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x00004000u) {
      partner_type_ = from.partner_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      lan_host_ping_to_server_region_ = from.lan_host_ping_to_server_region_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x00020000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00040000u) {
      league_series_id_ = from.league_series_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      league_game_id_ = from.league_game_id_;
    }
    if (cached_has_bits & 0x00100000u) {
      previous_match_override_ = from.previous_match_override_;
    }
    if (cached_has_bits & 0x00200000u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00400000u) {
      game_start_time_ = from.game_start_time_;
    }
    if (cached_has_bits & 0x00800000u) {
      series_current_non_priority_team_choice_ = from.series_current_non_priority_team_choice_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x02000000u) {
      lobby_mvp_account_id_ = from.lobby_mvp_account_id_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_game_auto_created_lobby_ = from.custom_game_auto_created_lobby_;
    }
    if (cached_has_bits & 0x08000000u) {
      custom_game_uses_account_records_ = from.custom_game_uses_account_records_;
    }
    if (cached_has_bits & 0x10000000u) {
      event_progression_enabled_ = from.event_progression_enabled_;
    }
    if (cached_has_bits & 0x20000000u) {
      series_current_selection_priority_used_coin_toss_ = from.series_current_selection_priority_used_coin_toss_;
    }
    if (cached_has_bits & 0x40000000u) {
      weekend_tourney_division_id_ = from.weekend_tourney_division_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x00000002u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_dire_ = from.bot_dire_;
    }
    if (cached_has_bits & 0x00000008u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_previous_selection_priority_team_id_ = from.series_previous_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      series_current_selection_priority_team_id_ = from.series_current_selection_priority_team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_current_priority_team_choice_ = from.series_current_priority_team_choice_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      allow_spectating_ = from.allow_spectating_;
    }
    if (cached_has_bits & 0x00000200u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000400u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
}

void CSODOTALobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSODOTALobby::CopyFrom(const CSODOTALobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSODOTALobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSODOTALobby::IsInitialized() const {
  return true;
}

void CSODOTALobby::Swap(CSODOTALobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSODOTALobby::InternalSwap(CSODOTALobby* other) {
  members_.InternalSwap(&other->members_);
  left_members_.InternalSwap(&other->left_members_);
  pending_invites_.InternalSwap(&other->pending_invites_);
  team_details_.InternalSwap(&other->team_details_);
  timed_reward_details_.InternalSwap(&other->timed_reward_details_);
  broadcast_channel_info_.InternalSwap(&other->broadcast_channel_info_);
  extra_messages_.InternalSwap(&other->extra_messages_);
  previous_series_matches_.InternalSwap(&other->previous_series_matches_);
  connect_.Swap(&other->connect_);
  game_name_.Swap(&other->game_name_);
  pass_key_.Swap(&other->pass_key_);
  custom_game_mode_.Swap(&other->custom_game_mode_);
  custom_map_name_.Swap(&other->custom_map_name_);
  std::swap(save_game_, other->save_game_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(state_, other->state_);
  std::swap(server_id_, other->server_id_);
  std::swap(leader_id_, other->leader_id_);
  std::swap(tutorial_lesson_, other->tutorial_lesson_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_game_id_, other->tournament_game_id_);
  std::swap(server_region_, other->server_region_);
  std::swap(game_state_, other->game_state_);
  std::swap(num_spectators_, other->num_spectators_);
  std::swap(allow_cheats_, other->allow_cheats_);
  std::swap(fill_with_bots_, other->fill_with_bots_);
  std::swap(intro_mode_, other->intro_mode_);
  std::swap(allchat_, other->allchat_);
  std::swap(matchgroup_, other->matchgroup_);
  std::swap(match_id_, other->match_id_);
  std::swap(cm_pick_, other->cm_pick_);
  std::swap(game_version_, other->game_version_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
  std::swap(penalty_level_dire_, other->penalty_level_dire_);
  std::swap(load_game_id_, other->load_game_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(radiant_series_wins_, other->radiant_series_wins_);
  std::swap(dire_series_wins_, other->dire_series_wins_);
  std::swap(loot_generated_, other->loot_generated_);
  std::swap(loot_awarded_, other->loot_awarded_);
  std::swap(dota_tv_delay_, other->dota_tv_delay_);
  std::swap(custom_difficulty_, other->custom_difficulty_);
  std::swap(first_leaver_accountid_, other->first_leaver_accountid_);
  std::swap(series_id_, other->series_id_);
  std::swap(lan_, other->lan_);
  std::swap(low_priority_, other->low_priority_);
  std::swap(first_blood_happened_, other->first_blood_happened_);
  std::swap(mass_disconnect_, other->mass_disconnect_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(match_outcome_, other->match_outcome_);
  std::swap(custom_min_players_, other->custom_min_players_);
  std::swap(custom_max_players_, other->custom_max_players_);
  std::swap(partner_type_, other->partner_type_);
  std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
  std::swap(visibility_, other->visibility_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(league_series_id_, other->league_series_id_);
  std::swap(league_game_id_, other->league_game_id_);
  std::swap(previous_match_override_, other->previous_match_override_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(game_start_time_, other->game_start_time_);
  std::swap(series_current_non_priority_team_choice_, other->series_current_non_priority_team_choice_);
  std::swap(pause_setting_, other->pause_setting_);
  std::swap(lobby_mvp_account_id_, other->lobby_mvp_account_id_);
  std::swap(custom_game_auto_created_lobby_, other->custom_game_auto_created_lobby_);
  std::swap(custom_game_uses_account_records_, other->custom_game_uses_account_records_);
  std::swap(event_progression_enabled_, other->event_progression_enabled_);
  std::swap(series_current_selection_priority_used_coin_toss_, other->series_current_selection_priority_used_coin_toss_);
  std::swap(weekend_tourney_division_id_, other->weekend_tourney_division_id_);
  std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
  std::swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
  std::swap(bot_radiant_, other->bot_radiant_);
  std::swap(bot_dire_, other->bot_dire_);
  std::swap(selection_priority_rules_, other->selection_priority_rules_);
  std::swap(series_previous_selection_priority_team_id_, other->series_previous_selection_priority_team_id_);
  std::swap(series_current_selection_priority_team_id_, other->series_current_selection_priority_team_id_);
  std::swap(series_current_priority_team_choice_, other->series_current_priority_team_choice_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(allow_spectating_, other->allow_spectating_);
  std::swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  std::swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSODOTALobby::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSODOTALobby

// optional uint64 lobby_id = 1 [(.proto.dota.key_field) = true];
bool CSODOTALobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSODOTALobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CSODOTALobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSODOTALobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CSODOTALobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_id)
  return lobby_id_;
}
void CSODOTALobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_id)
}

// repeated .proto.dota.CDOTALobbyMember members = 2;
int CSODOTALobby::members_size() const {
  return members_.size();
}
void CSODOTALobby::clear_members() {
  members_.Clear();
}
const ::proto::dota::CDOTALobbyMember& CSODOTALobby::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.members)
  return members_.Get(index);
}
::proto::dota::CDOTALobbyMember* CSODOTALobby::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.members)
  return members_.Mutable(index);
}
::proto::dota::CDOTALobbyMember* CSODOTALobby::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
CSODOTALobby::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
CSODOTALobby::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.members)
  return members_;
}

// repeated .proto.dota.CDOTALobbyMember left_members = 7;
int CSODOTALobby::left_members_size() const {
  return left_members_.size();
}
void CSODOTALobby::clear_left_members() {
  left_members_.Clear();
}
const ::proto::dota::CDOTALobbyMember& CSODOTALobby::left_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.left_members)
  return left_members_.Get(index);
}
::proto::dota::CDOTALobbyMember* CSODOTALobby::mutable_left_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.left_members)
  return left_members_.Mutable(index);
}
::proto::dota::CDOTALobbyMember* CSODOTALobby::add_left_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.left_members)
  return left_members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >*
CSODOTALobby::mutable_left_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.left_members)
  return &left_members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTALobbyMember >&
CSODOTALobby::left_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.left_members)
  return left_members_;
}

// optional fixed64 leader_id = 11;
bool CSODOTALobby::has_leader_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSODOTALobby::set_has_leader_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CSODOTALobby::clear_has_leader_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSODOTALobby::clear_leader_id() {
  leader_id_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_id();
}
::google::protobuf::uint64 CSODOTALobby::leader_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.leader_id)
  return leader_id_;
}
void CSODOTALobby::set_leader_id(::google::protobuf::uint64 value) {
  set_has_leader_id();
  leader_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.leader_id)
}

// optional fixed64 server_id = 6 [default = 0];
bool CSODOTALobby::has_server_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSODOTALobby::set_has_server_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CSODOTALobby::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSODOTALobby::clear_server_id() {
  server_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_id();
}
::google::protobuf::uint64 CSODOTALobby::server_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.server_id)
  return server_id_;
}
void CSODOTALobby::set_server_id(::google::protobuf::uint64 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.server_id)
}

// optional uint32 game_mode = 3;
bool CSODOTALobby::has_game_mode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSODOTALobby::set_has_game_mode() {
  _has_bits_[0] |= 0x00000080u;
}
void CSODOTALobby::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSODOTALobby::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CSODOTALobby::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_mode)
  return game_mode_;
}
void CSODOTALobby::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_mode)
}

// repeated fixed64 pending_invites = 10;
int CSODOTALobby::pending_invites_size() const {
  return pending_invites_.size();
}
void CSODOTALobby::clear_pending_invites() {
  pending_invites_.Clear();
}
::google::protobuf::uint64 CSODOTALobby::pending_invites(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pending_invites)
  return pending_invites_.Get(index);
}
void CSODOTALobby::set_pending_invites(int index, ::google::protobuf::uint64 value) {
  pending_invites_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pending_invites)
}
void CSODOTALobby::add_pending_invites(::google::protobuf::uint64 value) {
  pending_invites_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.pending_invites)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::pending_invites() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.pending_invites)
  return pending_invites_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_pending_invites() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.pending_invites)
  return &pending_invites_;
}

// optional .proto.dota.CSODOTALobby.State state = 4 [default = UI];
bool CSODOTALobby::has_state() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSODOTALobby::set_has_state() {
  _has_bits_[0] |= 0x00000100u;
}
void CSODOTALobby::clear_has_state() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSODOTALobby::clear_state() {
  state_ = 0;
  clear_has_state();
}
::proto::dota::CSODOTALobby_State CSODOTALobby::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.state)
  return static_cast< ::proto::dota::CSODOTALobby_State >(state_);
}
void CSODOTALobby::set_state(::proto::dota::CSODOTALobby_State value) {
  assert(::proto::dota::CSODOTALobby_State_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.state)
}

// optional string connect = 5;
bool CSODOTALobby::has_connect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_connect() {
  _has_bits_[0] |= 0x00000001u;
}
void CSODOTALobby::clear_has_connect() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSODOTALobby::clear_connect() {
  connect_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_connect();
}
const ::std::string& CSODOTALobby::connect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.connect)
  return connect_.GetNoArena();
}
void CSODOTALobby::set_connect(const ::std::string& value) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.connect)
}
#if LANG_CXX11
void CSODOTALobby::set_connect(::std::string&& value) {
  set_has_connect();
  connect_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.connect)
}
#endif
void CSODOTALobby::set_connect(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.connect)
}
void CSODOTALobby::set_connect(const char* value, size_t size) {
  set_has_connect();
  connect_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.connect)
}
::std::string* CSODOTALobby::mutable_connect() {
  set_has_connect();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.connect)
  return connect_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby::release_connect() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.connect)
  clear_has_connect();
  return connect_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby::set_allocated_connect(::std::string* connect) {
  if (connect != NULL) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  connect_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connect);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.connect)
}

// optional .proto.dota.CSODOTALobby.LobbyType lobby_type = 12 [default = INVALID];
bool CSODOTALobby::has_lobby_type() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void CSODOTALobby::set_has_lobby_type() {
  _has_bits_[2] |= 0x00000080u;
}
void CSODOTALobby::clear_has_lobby_type() {
  _has_bits_[2] &= ~0x00000080u;
}
void CSODOTALobby::clear_lobby_type() {
  lobby_type_ = -1;
  clear_has_lobby_type();
}
::proto::dota::CSODOTALobby_LobbyType CSODOTALobby::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_type)
  return static_cast< ::proto::dota::CSODOTALobby_LobbyType >(lobby_type_);
}
void CSODOTALobby::set_lobby_type(::proto::dota::CSODOTALobby_LobbyType value) {
  assert(::proto::dota::CSODOTALobby_LobbyType_IsValid(value));
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_type)
}

// optional bool allow_cheats = 13;
bool CSODOTALobby::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSODOTALobby::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00020000u;
}
void CSODOTALobby::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSODOTALobby::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
bool CSODOTALobby::allow_cheats() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allow_cheats)
  return allow_cheats_;
}
void CSODOTALobby::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allow_cheats)
}

// optional bool fill_with_bots = 14;
bool CSODOTALobby::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSODOTALobby::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00040000u;
}
void CSODOTALobby::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSODOTALobby::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
bool CSODOTALobby::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.fill_with_bots)
  return fill_with_bots_;
}
void CSODOTALobby::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.fill_with_bots)
}

// optional bool intro_mode = 15;
bool CSODOTALobby::has_intro_mode() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSODOTALobby::set_has_intro_mode() {
  _has_bits_[0] |= 0x00080000u;
}
void CSODOTALobby::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSODOTALobby::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
bool CSODOTALobby::intro_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.intro_mode)
  return intro_mode_;
}
void CSODOTALobby::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.intro_mode)
}

// optional string game_name = 16;
bool CSODOTALobby::has_game_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSODOTALobby::set_has_game_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CSODOTALobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSODOTALobby::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CSODOTALobby::game_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_name)
  return game_name_.GetNoArena();
}
void CSODOTALobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_name)
}
#if LANG_CXX11
void CSODOTALobby::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.game_name)
}
#endif
void CSODOTALobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.game_name)
}
void CSODOTALobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.game_name)
}
::std::string* CSODOTALobby::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.game_name)
}

// repeated .proto.dota.CLobbyTeamDetails team_details = 17;
int CSODOTALobby::team_details_size() const {
  return team_details_.size();
}
void CSODOTALobby::clear_team_details() {
  team_details_.Clear();
}
const ::proto::dota::CLobbyTeamDetails& CSODOTALobby::team_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.team_details)
  return team_details_.Get(index);
}
::proto::dota::CLobbyTeamDetails* CSODOTALobby::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.team_details)
  return team_details_.Mutable(index);
}
::proto::dota::CLobbyTeamDetails* CSODOTALobby::add_team_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.team_details)
  return team_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >*
CSODOTALobby::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.team_details)
  return &team_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >&
CSODOTALobby::team_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.team_details)
  return team_details_;
}

// optional uint32 tutorial_lesson = 18;
bool CSODOTALobby::has_tutorial_lesson() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSODOTALobby::set_has_tutorial_lesson() {
  _has_bits_[0] |= 0x00000800u;
}
void CSODOTALobby::clear_has_tutorial_lesson() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSODOTALobby::clear_tutorial_lesson() {
  tutorial_lesson_ = 0u;
  clear_has_tutorial_lesson();
}
::google::protobuf::uint32 CSODOTALobby::tutorial_lesson() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tutorial_lesson)
  return tutorial_lesson_;
}
void CSODOTALobby::set_tutorial_lesson(::google::protobuf::uint32 value) {
  set_has_tutorial_lesson();
  tutorial_lesson_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tutorial_lesson)
}

// optional uint32 tournament_id = 19;
bool CSODOTALobby::has_tournament_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSODOTALobby::set_has_tournament_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CSODOTALobby::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSODOTALobby::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CSODOTALobby::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tournament_id)
  return tournament_id_;
}
void CSODOTALobby::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tournament_id)
}

// optional uint32 tournament_game_id = 20;
bool CSODOTALobby::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSODOTALobby::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00002000u;
}
void CSODOTALobby::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSODOTALobby::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
::google::protobuf::uint32 CSODOTALobby::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.tournament_game_id)
  return tournament_game_id_;
}
void CSODOTALobby::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.tournament_game_id)
}

// optional uint32 server_region = 21 [default = 0];
bool CSODOTALobby::has_server_region() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSODOTALobby::set_has_server_region() {
  _has_bits_[0] |= 0x00004000u;
}
void CSODOTALobby::clear_has_server_region() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSODOTALobby::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CSODOTALobby::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.server_region)
  return server_region_;
}
void CSODOTALobby::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.server_region)
}

// optional .proto.dota.DOTA_GameState game_state = 22 [default = DOTA_GAMERULES_STATE_INIT];
bool CSODOTALobby::has_game_state() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSODOTALobby::set_has_game_state() {
  _has_bits_[0] |= 0x00008000u;
}
void CSODOTALobby::clear_has_game_state() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSODOTALobby::clear_game_state() {
  game_state_ = 0;
  clear_has_game_state();
}
::proto::dota::DOTA_GameState CSODOTALobby::game_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_state)
  return static_cast< ::proto::dota::DOTA_GameState >(game_state_);
}
void CSODOTALobby::set_game_state(::proto::dota::DOTA_GameState value) {
  assert(::proto::dota::DOTA_GameState_IsValid(value));
  set_has_game_state();
  game_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_state)
}

// optional uint32 num_spectators = 23;
bool CSODOTALobby::has_num_spectators() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSODOTALobby::set_has_num_spectators() {
  _has_bits_[0] |= 0x00010000u;
}
void CSODOTALobby::clear_has_num_spectators() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSODOTALobby::clear_num_spectators() {
  num_spectators_ = 0u;
  clear_has_num_spectators();
}
::google::protobuf::uint32 CSODOTALobby::num_spectators() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.num_spectators)
  return num_spectators_;
}
void CSODOTALobby::set_num_spectators(::google::protobuf::uint32 value) {
  set_has_num_spectators();
  num_spectators_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.num_spectators)
}

// optional uint32 matchgroup = 25;
bool CSODOTALobby::has_matchgroup() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSODOTALobby::set_has_matchgroup() {
  _has_bits_[0] |= 0x00200000u;
}
void CSODOTALobby::clear_has_matchgroup() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSODOTALobby::clear_matchgroup() {
  matchgroup_ = 0u;
  clear_has_matchgroup();
}
::google::protobuf::uint32 CSODOTALobby::matchgroup() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.matchgroup)
  return matchgroup_;
}
void CSODOTALobby::set_matchgroup(::google::protobuf::uint32 value) {
  set_has_matchgroup();
  matchgroup_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.matchgroup)
}

// optional .proto.dota.DOTA_CM_PICK cm_pick = 28 [default = DOTA_CM_RANDOM];
bool CSODOTALobby::has_cm_pick() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSODOTALobby::set_has_cm_pick() {
  _has_bits_[0] |= 0x00800000u;
}
void CSODOTALobby::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSODOTALobby::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
::proto::dota::DOTA_CM_PICK CSODOTALobby::cm_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.cm_pick)
  return static_cast< ::proto::dota::DOTA_CM_PICK >(cm_pick_);
}
void CSODOTALobby::set_cm_pick(::proto::dota::DOTA_CM_PICK value) {
  assert(::proto::dota::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.cm_pick)
}

// optional uint64 match_id = 30;
bool CSODOTALobby::has_match_id() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSODOTALobby::set_has_match_id() {
  _has_bits_[0] |= 0x00400000u;
}
void CSODOTALobby::clear_has_match_id() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSODOTALobby::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CSODOTALobby::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.match_id)
  return match_id_;
}
void CSODOTALobby::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.match_id)
}

// optional bool allow_spectating = 31 [default = true];
bool CSODOTALobby::has_allow_spectating() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void CSODOTALobby::set_has_allow_spectating() {
  _has_bits_[2] |= 0x00000100u;
}
void CSODOTALobby::clear_has_allow_spectating() {
  _has_bits_[2] &= ~0x00000100u;
}
void CSODOTALobby::clear_allow_spectating() {
  allow_spectating_ = true;
  clear_has_allow_spectating();
}
bool CSODOTALobby::allow_spectating() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allow_spectating)
  return allow_spectating_;
}
void CSODOTALobby::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allow_spectating)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 36 [default = BOT_DIFFICULTY_HARD];
bool CSODOTALobby::has_bot_difficulty_radiant() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void CSODOTALobby::set_has_bot_difficulty_radiant() {
  _has_bits_[2] |= 0x00000200u;
}
void CSODOTALobby::clear_has_bot_difficulty_radiant() {
  _has_bits_[2] &= ~0x00000200u;
}
void CSODOTALobby::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 3;
  clear_has_bot_difficulty_radiant();
}
::proto::dota::DOTABotDifficulty CSODOTALobby::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_difficulty_radiant)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_radiant_);
}
void CSODOTALobby::set_bot_difficulty_radiant(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_difficulty_radiant)
}

// optional .proto.dota.DOTAGameVersion game_version = 37 [default = GAME_VERSION_CURRENT];
bool CSODOTALobby::has_game_version() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSODOTALobby::set_has_game_version() {
  _has_bits_[0] |= 0x01000000u;
}
void CSODOTALobby::clear_has_game_version() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSODOTALobby::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
::proto::dota::DOTAGameVersion CSODOTALobby::game_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_version)
  return static_cast< ::proto::dota::DOTAGameVersion >(game_version_);
}
void CSODOTALobby::set_game_version(::proto::dota::DOTAGameVersion value) {
  assert(::proto::dota::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_version)
}

// repeated .proto.dota.CLobbyTimedRewardDetails timed_reward_details = 38;
int CSODOTALobby::timed_reward_details_size() const {
  return timed_reward_details_.size();
}
void CSODOTALobby::clear_timed_reward_details() {
  timed_reward_details_.Clear();
}
const ::proto::dota::CLobbyTimedRewardDetails& CSODOTALobby::timed_reward_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Get(index);
}
::proto::dota::CLobbyTimedRewardDetails* CSODOTALobby::mutable_timed_reward_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Mutable(index);
}
::proto::dota::CLobbyTimedRewardDetails* CSODOTALobby::add_timed_reward_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CSODOTALobby::mutable_timed_reward_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.timed_reward_details)
  return &timed_reward_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CSODOTALobby::timed_reward_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.timed_reward_details)
  return timed_reward_details_;
}

// optional string pass_key = 39;
bool CSODOTALobby::has_pass_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSODOTALobby::set_has_pass_key() {
  _has_bits_[0] |= 0x00000004u;
}
void CSODOTALobby::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSODOTALobby::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CSODOTALobby::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pass_key)
  return pass_key_.GetNoArena();
}
void CSODOTALobby::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pass_key)
}
#if LANG_CXX11
void CSODOTALobby::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.pass_key)
}
#endif
void CSODOTALobby::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.pass_key)
}
void CSODOTALobby::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.pass_key)
}
::std::string* CSODOTALobby::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.pass_key)
}

// optional uint32 leagueid = 42;
bool CSODOTALobby::has_leagueid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CSODOTALobby::set_has_leagueid() {
  _has_bits_[0] |= 0x02000000u;
}
void CSODOTALobby::clear_has_leagueid() {
  _has_bits_[0] &= ~0x02000000u;
}
void CSODOTALobby::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
::google::protobuf::uint32 CSODOTALobby::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.leagueid)
  return leagueid_;
}
void CSODOTALobby::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.leagueid)
}

// optional uint32 penalty_level_radiant = 43 [default = 0];
bool CSODOTALobby::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CSODOTALobby::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x04000000u;
}
void CSODOTALobby::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x04000000u;
}
void CSODOTALobby::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
::google::protobuf::uint32 CSODOTALobby::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.penalty_level_radiant)
  return penalty_level_radiant_;
}
void CSODOTALobby::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 44 [default = 0];
bool CSODOTALobby::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CSODOTALobby::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x08000000u;
}
void CSODOTALobby::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x08000000u;
}
void CSODOTALobby::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
::google::protobuf::uint32 CSODOTALobby::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.penalty_level_dire)
  return penalty_level_dire_;
}
void CSODOTALobby::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.penalty_level_dire)
}

// optional uint32 load_game_id = 45;
bool CSODOTALobby::has_load_game_id() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CSODOTALobby::set_has_load_game_id() {
  _has_bits_[0] |= 0x10000000u;
}
void CSODOTALobby::clear_has_load_game_id() {
  _has_bits_[0] &= ~0x10000000u;
}
void CSODOTALobby::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
::google::protobuf::uint32 CSODOTALobby::load_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.load_game_id)
  return load_game_id_;
}
void CSODOTALobby::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.load_game_id)
}

// optional uint32 series_type = 46;
bool CSODOTALobby::has_series_type() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CSODOTALobby::set_has_series_type() {
  _has_bits_[0] |= 0x20000000u;
}
void CSODOTALobby::clear_has_series_type() {
  _has_bits_[0] &= ~0x20000000u;
}
void CSODOTALobby::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CSODOTALobby::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_type)
  return series_type_;
}
void CSODOTALobby::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_type)
}

// optional uint32 radiant_series_wins = 47;
bool CSODOTALobby::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CSODOTALobby::set_has_radiant_series_wins() {
  _has_bits_[0] |= 0x40000000u;
}
void CSODOTALobby::clear_has_radiant_series_wins() {
  _has_bits_[0] &= ~0x40000000u;
}
void CSODOTALobby::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
::google::protobuf::uint32 CSODOTALobby::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.radiant_series_wins)
  return radiant_series_wins_;
}
void CSODOTALobby::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.radiant_series_wins)
}

// optional uint32 dire_series_wins = 48;
bool CSODOTALobby::has_dire_series_wins() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CSODOTALobby::set_has_dire_series_wins() {
  _has_bits_[0] |= 0x80000000u;
}
void CSODOTALobby::clear_has_dire_series_wins() {
  _has_bits_[0] &= ~0x80000000u;
}
void CSODOTALobby::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
::google::protobuf::uint32 CSODOTALobby::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.dire_series_wins)
  return dire_series_wins_;
}
void CSODOTALobby::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.dire_series_wins)
}

// optional uint32 loot_generated = 49;
bool CSODOTALobby::has_loot_generated() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_loot_generated() {
  _has_bits_[1] |= 0x00000001u;
}
void CSODOTALobby::clear_has_loot_generated() {
  _has_bits_[1] &= ~0x00000001u;
}
void CSODOTALobby::clear_loot_generated() {
  loot_generated_ = 0u;
  clear_has_loot_generated();
}
::google::protobuf::uint32 CSODOTALobby::loot_generated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.loot_generated)
  return loot_generated_;
}
void CSODOTALobby::set_loot_generated(::google::protobuf::uint32 value) {
  set_has_loot_generated();
  loot_generated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.loot_generated)
}

// optional uint32 loot_awarded = 50;
bool CSODOTALobby::has_loot_awarded() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CSODOTALobby::set_has_loot_awarded() {
  _has_bits_[1] |= 0x00000002u;
}
void CSODOTALobby::clear_has_loot_awarded() {
  _has_bits_[1] &= ~0x00000002u;
}
void CSODOTALobby::clear_loot_awarded() {
  loot_awarded_ = 0u;
  clear_has_loot_awarded();
}
::google::protobuf::uint32 CSODOTALobby::loot_awarded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.loot_awarded)
  return loot_awarded_;
}
void CSODOTALobby::set_loot_awarded(::google::protobuf::uint32 value) {
  set_has_loot_awarded();
  loot_awarded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.loot_awarded)
}

// optional bool allchat = 51 [default = false];
bool CSODOTALobby::has_allchat() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSODOTALobby::set_has_allchat() {
  _has_bits_[0] |= 0x00100000u;
}
void CSODOTALobby::clear_has_allchat() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSODOTALobby::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
bool CSODOTALobby::allchat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.allchat)
  return allchat_;
}
void CSODOTALobby::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.allchat)
}

// optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 53 [default = LobbyDotaTV_10];
bool CSODOTALobby::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CSODOTALobby::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000004u;
}
void CSODOTALobby::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000004u;
}
void CSODOTALobby::clear_dota_tv_delay() {
  dota_tv_delay_ = 0;
  clear_has_dota_tv_delay();
}
::proto::dota::LobbyDotaTVDelay CSODOTALobby::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.dota_tv_delay)
  return static_cast< ::proto::dota::LobbyDotaTVDelay >(dota_tv_delay_);
}
void CSODOTALobby::set_dota_tv_delay(::proto::dota::LobbyDotaTVDelay value) {
  assert(::proto::dota::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.dota_tv_delay)
}

// optional string custom_game_mode = 54;
bool CSODOTALobby::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSODOTALobby::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void CSODOTALobby::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSODOTALobby::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_game_mode();
}
const ::std::string& CSODOTALobby::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_mode)
  return custom_game_mode_.GetNoArena();
}
void CSODOTALobby::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_mode)
}
#if LANG_CXX11
void CSODOTALobby::set_custom_game_mode(::std::string&& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.custom_game_mode)
}
#endif
void CSODOTALobby::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.custom_game_mode)
}
void CSODOTALobby::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.custom_game_mode)
}
::std::string* CSODOTALobby::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.custom_game_mode)
  clear_has_custom_game_mode();
  return custom_game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != NULL) {
    set_has_custom_game_mode();
  } else {
    clear_has_custom_game_mode();
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.custom_game_mode)
}

// optional string custom_map_name = 55;
bool CSODOTALobby::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSODOTALobby::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000010u;
}
void CSODOTALobby::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSODOTALobby::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
const ::std::string& CSODOTALobby::custom_map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_map_name)
  return custom_map_name_.GetNoArena();
}
void CSODOTALobby::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_map_name)
}
#if LANG_CXX11
void CSODOTALobby::set_custom_map_name(::std::string&& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSODOTALobby.custom_map_name)
}
#endif
void CSODOTALobby::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSODOTALobby.custom_map_name)
}
void CSODOTALobby::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSODOTALobby.custom_map_name)
}
::std::string* CSODOTALobby::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSODOTALobby::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.custom_map_name)
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSODOTALobby::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.custom_map_name)
}

// optional uint32 custom_difficulty = 56;
bool CSODOTALobby::has_custom_difficulty() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CSODOTALobby::set_has_custom_difficulty() {
  _has_bits_[1] |= 0x00000008u;
}
void CSODOTALobby::clear_has_custom_difficulty() {
  _has_bits_[1] &= ~0x00000008u;
}
void CSODOTALobby::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
::google::protobuf::uint32 CSODOTALobby::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_difficulty)
  return custom_difficulty_;
}
void CSODOTALobby::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_difficulty)
}

// optional bool lan = 57;
bool CSODOTALobby::has_lan() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CSODOTALobby::set_has_lan() {
  _has_bits_[1] |= 0x00000040u;
}
void CSODOTALobby::clear_has_lan() {
  _has_bits_[1] &= ~0x00000040u;
}
void CSODOTALobby::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
bool CSODOTALobby::lan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lan)
  return lan_;
}
void CSODOTALobby::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lan)
}

// repeated .proto.dota.CLobbyBroadcastChannelInfo broadcast_channel_info = 58;
int CSODOTALobby::broadcast_channel_info_size() const {
  return broadcast_channel_info_.size();
}
void CSODOTALobby::clear_broadcast_channel_info() {
  broadcast_channel_info_.Clear();
}
const ::proto::dota::CLobbyBroadcastChannelInfo& CSODOTALobby::broadcast_channel_info(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Get(index);
}
::proto::dota::CLobbyBroadcastChannelInfo* CSODOTALobby::mutable_broadcast_channel_info(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Mutable(index);
}
::proto::dota::CLobbyBroadcastChannelInfo* CSODOTALobby::add_broadcast_channel_info() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >*
CSODOTALobby::mutable_broadcast_channel_info() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.broadcast_channel_info)
  return &broadcast_channel_info_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyBroadcastChannelInfo >&
CSODOTALobby::broadcast_channel_info() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.broadcast_channel_info)
  return broadcast_channel_info_;
}

// optional uint32 first_leaver_accountid = 59;
bool CSODOTALobby::has_first_leaver_accountid() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CSODOTALobby::set_has_first_leaver_accountid() {
  _has_bits_[1] |= 0x00000010u;
}
void CSODOTALobby::clear_has_first_leaver_accountid() {
  _has_bits_[1] &= ~0x00000010u;
}
void CSODOTALobby::clear_first_leaver_accountid() {
  first_leaver_accountid_ = 0u;
  clear_has_first_leaver_accountid();
}
::google::protobuf::uint32 CSODOTALobby::first_leaver_accountid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.first_leaver_accountid)
  return first_leaver_accountid_;
}
void CSODOTALobby::set_first_leaver_accountid(::google::protobuf::uint32 value) {
  set_has_first_leaver_accountid();
  first_leaver_accountid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.first_leaver_accountid)
}

// optional uint32 series_id = 60;
bool CSODOTALobby::has_series_id() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CSODOTALobby::set_has_series_id() {
  _has_bits_[1] |= 0x00000020u;
}
void CSODOTALobby::clear_has_series_id() {
  _has_bits_[1] &= ~0x00000020u;
}
void CSODOTALobby::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CSODOTALobby::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_id)
  return series_id_;
}
void CSODOTALobby::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_id)
}

// optional bool low_priority = 61;
bool CSODOTALobby::has_low_priority() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CSODOTALobby::set_has_low_priority() {
  _has_bits_[1] |= 0x00000080u;
}
void CSODOTALobby::clear_has_low_priority() {
  _has_bits_[1] &= ~0x00000080u;
}
void CSODOTALobby::clear_low_priority() {
  low_priority_ = false;
  clear_has_low_priority();
}
bool CSODOTALobby::low_priority() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.low_priority)
  return low_priority_;
}
void CSODOTALobby::set_low_priority(bool value) {
  set_has_low_priority();
  low_priority_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.low_priority)
}

// repeated .proto.dota.CSODOTALobby.CExtraMsg extra_messages = 62;
int CSODOTALobby::extra_messages_size() const {
  return extra_messages_.size();
}
void CSODOTALobby::clear_extra_messages() {
  extra_messages_.Clear();
}
const ::proto::dota::CSODOTALobby_CExtraMsg& CSODOTALobby::extra_messages(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Get(index);
}
::proto::dota::CSODOTALobby_CExtraMsg* CSODOTALobby::mutable_extra_messages(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Mutable(index);
}
::proto::dota::CSODOTALobby_CExtraMsg* CSODOTALobby::add_extra_messages() {
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >*
CSODOTALobby::mutable_extra_messages() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.extra_messages)
  return &extra_messages_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSODOTALobby_CExtraMsg >&
CSODOTALobby::extra_messages() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.extra_messages)
  return extra_messages_;
}

// optional .proto.dota.CDOTASaveGame save_game = 63;
bool CSODOTALobby::has_save_game() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSODOTALobby::set_has_save_game() {
  _has_bits_[0] |= 0x00000020u;
}
void CSODOTALobby::clear_has_save_game() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSODOTALobby::clear_save_game() {
  if (save_game_ != NULL) save_game_->::proto::dota::CDOTASaveGame::Clear();
  clear_has_save_game();
}
const ::proto::dota::CDOTASaveGame& CSODOTALobby::save_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.save_game)
  return save_game_ != NULL ? *save_game_
                         : *::proto::dota::CDOTASaveGame::internal_default_instance();
}
::proto::dota::CDOTASaveGame* CSODOTALobby::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) {
    save_game_ = new ::proto::dota::CDOTASaveGame;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CSODOTALobby.save_game)
  return save_game_;
}
::proto::dota::CDOTASaveGame* CSODOTALobby::release_save_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CSODOTALobby.save_game)
  clear_has_save_game();
  ::proto::dota::CDOTASaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
void CSODOTALobby::set_allocated_save_game(::proto::dota::CDOTASaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSODOTALobby.save_game)
}

// optional bool first_blood_happened = 65;
bool CSODOTALobby::has_first_blood_happened() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void CSODOTALobby::set_has_first_blood_happened() {
  _has_bits_[1] |= 0x00000100u;
}
void CSODOTALobby::clear_has_first_blood_happened() {
  _has_bits_[1] &= ~0x00000100u;
}
void CSODOTALobby::clear_first_blood_happened() {
  first_blood_happened_ = false;
  clear_has_first_blood_happened();
}
bool CSODOTALobby::first_blood_happened() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.first_blood_happened)
  return first_blood_happened_;
}
void CSODOTALobby::set_first_blood_happened(bool value) {
  set_has_first_blood_happened();
  first_blood_happened_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.first_blood_happened)
}

// optional .proto.dota.EMatchOutcome match_outcome = 70 [default = k_EMatchOutcome_Unknown];
bool CSODOTALobby::has_match_outcome() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void CSODOTALobby::set_has_match_outcome() {
  _has_bits_[1] |= 0x00000800u;
}
void CSODOTALobby::clear_has_match_outcome() {
  _has_bits_[1] &= ~0x00000800u;
}
void CSODOTALobby::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
::proto::dota::EMatchOutcome CSODOTALobby::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
void CSODOTALobby::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.match_outcome)
}

// optional bool mass_disconnect = 67;
bool CSODOTALobby::has_mass_disconnect() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void CSODOTALobby::set_has_mass_disconnect() {
  _has_bits_[1] |= 0x00000200u;
}
void CSODOTALobby::clear_has_mass_disconnect() {
  _has_bits_[1] &= ~0x00000200u;
}
void CSODOTALobby::clear_mass_disconnect() {
  mass_disconnect_ = false;
  clear_has_mass_disconnect();
}
bool CSODOTALobby::mass_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.mass_disconnect)
  return mass_disconnect_;
}
void CSODOTALobby::set_mass_disconnect(bool value) {
  set_has_mass_disconnect();
  mass_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.mass_disconnect)
}

// optional uint64 custom_game_id = 68;
bool CSODOTALobby::has_custom_game_id() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void CSODOTALobby::set_has_custom_game_id() {
  _has_bits_[1] |= 0x00000400u;
}
void CSODOTALobby::clear_has_custom_game_id() {
  _has_bits_[1] &= ~0x00000400u;
}
void CSODOTALobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CSODOTALobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_id)
  return custom_game_id_;
}
void CSODOTALobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_id)
}

// optional uint32 custom_min_players = 71;
bool CSODOTALobby::has_custom_min_players() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void CSODOTALobby::set_has_custom_min_players() {
  _has_bits_[1] |= 0x00001000u;
}
void CSODOTALobby::clear_has_custom_min_players() {
  _has_bits_[1] &= ~0x00001000u;
}
void CSODOTALobby::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
::google::protobuf::uint32 CSODOTALobby::custom_min_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_min_players)
  return custom_min_players_;
}
void CSODOTALobby::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_min_players)
}

// optional uint32 custom_max_players = 72;
bool CSODOTALobby::has_custom_max_players() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void CSODOTALobby::set_has_custom_max_players() {
  _has_bits_[1] |= 0x00002000u;
}
void CSODOTALobby::clear_has_custom_max_players() {
  _has_bits_[1] &= ~0x00002000u;
}
void CSODOTALobby::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
::google::protobuf::uint32 CSODOTALobby::custom_max_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_max_players)
  return custom_max_players_;
}
void CSODOTALobby::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_max_players)
}

// optional .proto.dota.PartnerAccountType partner_type = 73 [default = PARTNER_NONE];
bool CSODOTALobby::has_partner_type() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void CSODOTALobby::set_has_partner_type() {
  _has_bits_[1] |= 0x00004000u;
}
void CSODOTALobby::clear_has_partner_type() {
  _has_bits_[1] &= ~0x00004000u;
}
void CSODOTALobby::clear_partner_type() {
  partner_type_ = 0;
  clear_has_partner_type();
}
::proto::dota::PartnerAccountType CSODOTALobby::partner_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.partner_type)
  return static_cast< ::proto::dota::PartnerAccountType >(partner_type_);
}
void CSODOTALobby::set_partner_type(::proto::dota::PartnerAccountType value) {
  assert(::proto::dota::PartnerAccountType_IsValid(value));
  set_has_partner_type();
  partner_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.partner_type)
}

// optional uint32 lan_host_ping_to_server_region = 74;
bool CSODOTALobby::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void CSODOTALobby::set_has_lan_host_ping_to_server_region() {
  _has_bits_[1] |= 0x00008000u;
}
void CSODOTALobby::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[1] &= ~0x00008000u;
}
void CSODOTALobby::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
::google::protobuf::uint32 CSODOTALobby::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
void CSODOTALobby::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lan_host_ping_to_server_region)
}

// optional .proto.dota.DOTALobbyVisibility visibility = 75 [default = DOTALobbyVisibility_Public];
bool CSODOTALobby::has_visibility() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void CSODOTALobby::set_has_visibility() {
  _has_bits_[1] |= 0x00010000u;
}
void CSODOTALobby::clear_has_visibility() {
  _has_bits_[1] &= ~0x00010000u;
}
void CSODOTALobby::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
::proto::dota::DOTALobbyVisibility CSODOTALobby::visibility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.visibility)
  return static_cast< ::proto::dota::DOTALobbyVisibility >(visibility_);
}
void CSODOTALobby::set_visibility(::proto::dota::DOTALobbyVisibility value) {
  assert(::proto::dota::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.visibility)
}

// optional fixed64 custom_game_crc = 76;
bool CSODOTALobby::has_custom_game_crc() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void CSODOTALobby::set_has_custom_game_crc() {
  _has_bits_[1] |= 0x00020000u;
}
void CSODOTALobby::clear_has_custom_game_crc() {
  _has_bits_[1] &= ~0x00020000u;
}
void CSODOTALobby::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
::google::protobuf::uint64 CSODOTALobby::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_crc)
  return custom_game_crc_;
}
void CSODOTALobby::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_crc)
}

// optional bool custom_game_auto_created_lobby = 77;
bool CSODOTALobby::has_custom_game_auto_created_lobby() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void CSODOTALobby::set_has_custom_game_auto_created_lobby() {
  _has_bits_[1] |= 0x04000000u;
}
void CSODOTALobby::clear_has_custom_game_auto_created_lobby() {
  _has_bits_[1] &= ~0x04000000u;
}
void CSODOTALobby::clear_custom_game_auto_created_lobby() {
  custom_game_auto_created_lobby_ = false;
  clear_has_custom_game_auto_created_lobby();
}
bool CSODOTALobby::custom_game_auto_created_lobby() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_auto_created_lobby)
  return custom_game_auto_created_lobby_;
}
void CSODOTALobby::set_custom_game_auto_created_lobby(bool value) {
  set_has_custom_game_auto_created_lobby();
  custom_game_auto_created_lobby_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_auto_created_lobby)
}

// optional uint32 league_series_id = 78;
bool CSODOTALobby::has_league_series_id() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void CSODOTALobby::set_has_league_series_id() {
  _has_bits_[1] |= 0x00040000u;
}
void CSODOTALobby::clear_has_league_series_id() {
  _has_bits_[1] &= ~0x00040000u;
}
void CSODOTALobby::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
::google::protobuf::uint32 CSODOTALobby::league_series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.league_series_id)
  return league_series_id_;
}
void CSODOTALobby::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.league_series_id)
}

// optional uint32 league_game_id = 79;
bool CSODOTALobby::has_league_game_id() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void CSODOTALobby::set_has_league_game_id() {
  _has_bits_[1] |= 0x00080000u;
}
void CSODOTALobby::clear_has_league_game_id() {
  _has_bits_[1] &= ~0x00080000u;
}
void CSODOTALobby::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
::google::protobuf::uint32 CSODOTALobby::league_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.league_game_id)
  return league_game_id_;
}
void CSODOTALobby::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.league_game_id)
}

// optional fixed32 custom_game_timestamp = 80;
bool CSODOTALobby::has_custom_game_timestamp() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void CSODOTALobby::set_has_custom_game_timestamp() {
  _has_bits_[1] |= 0x00200000u;
}
void CSODOTALobby::clear_has_custom_game_timestamp() {
  _has_bits_[1] &= ~0x00200000u;
}
void CSODOTALobby::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
::google::protobuf::uint32 CSODOTALobby::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_timestamp)
  return custom_game_timestamp_;
}
void CSODOTALobby::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_timestamp)
}

// repeated uint64 previous_series_matches = 81;
int CSODOTALobby::previous_series_matches_size() const {
  return previous_series_matches_.size();
}
void CSODOTALobby::clear_previous_series_matches() {
  previous_series_matches_.Clear();
}
::google::protobuf::uint64 CSODOTALobby::previous_series_matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.previous_series_matches)
  return previous_series_matches_.Get(index);
}
void CSODOTALobby::set_previous_series_matches(int index, ::google::protobuf::uint64 value) {
  previous_series_matches_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.previous_series_matches)
}
void CSODOTALobby::add_previous_series_matches(::google::protobuf::uint64 value) {
  previous_series_matches_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CSODOTALobby.previous_series_matches)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSODOTALobby::previous_series_matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSODOTALobby.previous_series_matches)
  return previous_series_matches_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSODOTALobby::mutable_previous_series_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSODOTALobby.previous_series_matches)
  return &previous_series_matches_;
}

// optional uint64 previous_match_override = 82;
bool CSODOTALobby::has_previous_match_override() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void CSODOTALobby::set_has_previous_match_override() {
  _has_bits_[1] |= 0x00100000u;
}
void CSODOTALobby::clear_has_previous_match_override() {
  _has_bits_[1] &= ~0x00100000u;
}
void CSODOTALobby::clear_previous_match_override() {
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  clear_has_previous_match_override();
}
::google::protobuf::uint64 CSODOTALobby::previous_match_override() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.previous_match_override)
  return previous_match_override_;
}
void CSODOTALobby::set_previous_match_override(::google::protobuf::uint64 value) {
  set_has_previous_match_override();
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.previous_match_override)
}

// optional bool custom_game_uses_account_records = 83;
bool CSODOTALobby::has_custom_game_uses_account_records() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void CSODOTALobby::set_has_custom_game_uses_account_records() {
  _has_bits_[1] |= 0x08000000u;
}
void CSODOTALobby::clear_has_custom_game_uses_account_records() {
  _has_bits_[1] &= ~0x08000000u;
}
void CSODOTALobby::clear_custom_game_uses_account_records() {
  custom_game_uses_account_records_ = false;
  clear_has_custom_game_uses_account_records();
}
bool CSODOTALobby::custom_game_uses_account_records() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.custom_game_uses_account_records)
  return custom_game_uses_account_records_;
}
void CSODOTALobby::set_custom_game_uses_account_records(bool value) {
  set_has_custom_game_uses_account_records();
  custom_game_uses_account_records_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.custom_game_uses_account_records)
}

// optional uint32 game_start_time = 87;
bool CSODOTALobby::has_game_start_time() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void CSODOTALobby::set_has_game_start_time() {
  _has_bits_[1] |= 0x00400000u;
}
void CSODOTALobby::clear_has_game_start_time() {
  _has_bits_[1] &= ~0x00400000u;
}
void CSODOTALobby::clear_game_start_time() {
  game_start_time_ = 0u;
  clear_has_game_start_time();
}
::google::protobuf::uint32 CSODOTALobby::game_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.game_start_time)
  return game_start_time_;
}
void CSODOTALobby::set_game_start_time(::google::protobuf::uint32 value) {
  set_has_game_start_time();
  game_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.game_start_time)
}

// optional .proto.dota.LobbyDotaPauseSetting pause_setting = 88 [default = LobbyDotaPauseSetting_Unlimited];
bool CSODOTALobby::has_pause_setting() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void CSODOTALobby::set_has_pause_setting() {
  _has_bits_[1] |= 0x01000000u;
}
void CSODOTALobby::clear_has_pause_setting() {
  _has_bits_[1] &= ~0x01000000u;
}
void CSODOTALobby::clear_pause_setting() {
  pause_setting_ = 0;
  clear_has_pause_setting();
}
::proto::dota::LobbyDotaPauseSetting CSODOTALobby::pause_setting() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.pause_setting)
  return static_cast< ::proto::dota::LobbyDotaPauseSetting >(pause_setting_);
}
void CSODOTALobby::set_pause_setting(::proto::dota::LobbyDotaPauseSetting value) {
  assert(::proto::dota::LobbyDotaPauseSetting_IsValid(value));
  set_has_pause_setting();
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.pause_setting)
}

// optional uint32 lobby_mvp_account_id = 89;
bool CSODOTALobby::has_lobby_mvp_account_id() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void CSODOTALobby::set_has_lobby_mvp_account_id() {
  _has_bits_[1] |= 0x02000000u;
}
void CSODOTALobby::clear_has_lobby_mvp_account_id() {
  _has_bits_[1] &= ~0x02000000u;
}
void CSODOTALobby::clear_lobby_mvp_account_id() {
  lobby_mvp_account_id_ = 0u;
  clear_has_lobby_mvp_account_id();
}
::google::protobuf::uint32 CSODOTALobby::lobby_mvp_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.lobby_mvp_account_id)
  return lobby_mvp_account_id_;
}
void CSODOTALobby::set_lobby_mvp_account_id(::google::protobuf::uint32 value) {
  set_has_lobby_mvp_account_id();
  lobby_mvp_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.lobby_mvp_account_id)
}

// optional uint32 weekend_tourney_division_id = 90;
bool CSODOTALobby::has_weekend_tourney_division_id() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void CSODOTALobby::set_has_weekend_tourney_division_id() {
  _has_bits_[1] |= 0x40000000u;
}
void CSODOTALobby::clear_has_weekend_tourney_division_id() {
  _has_bits_[1] &= ~0x40000000u;
}
void CSODOTALobby::clear_weekend_tourney_division_id() {
  weekend_tourney_division_id_ = 0u;
  clear_has_weekend_tourney_division_id();
}
::google::protobuf::uint32 CSODOTALobby::weekend_tourney_division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_division_id)
  return weekend_tourney_division_id_;
}
void CSODOTALobby::set_weekend_tourney_division_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division_id();
  weekend_tourney_division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_division_id)
}

// optional uint32 weekend_tourney_skill_level = 91;
bool CSODOTALobby::has_weekend_tourney_skill_level() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void CSODOTALobby::set_has_weekend_tourney_skill_level() {
  _has_bits_[1] |= 0x80000000u;
}
void CSODOTALobby::clear_has_weekend_tourney_skill_level() {
  _has_bits_[1] &= ~0x80000000u;
}
void CSODOTALobby::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
::google::protobuf::uint32 CSODOTALobby::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
void CSODOTALobby::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 92;
bool CSODOTALobby::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void CSODOTALobby::set_has_weekend_tourney_bracket_round() {
  _has_bits_[2] |= 0x00000001u;
}
void CSODOTALobby::clear_has_weekend_tourney_bracket_round() {
  _has_bits_[2] &= ~0x00000001u;
}
void CSODOTALobby::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  clear_has_weekend_tourney_bracket_round();
}
::google::protobuf::uint32 CSODOTALobby::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
void CSODOTALobby::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_bracket_round();
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.weekend_tourney_bracket_round)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 93 [default = BOT_DIFFICULTY_HARD];
bool CSODOTALobby::has_bot_difficulty_dire() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void CSODOTALobby::set_has_bot_difficulty_dire() {
  _has_bits_[2] |= 0x00000400u;
}
void CSODOTALobby::clear_has_bot_difficulty_dire() {
  _has_bits_[2] &= ~0x00000400u;
}
void CSODOTALobby::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 3;
  clear_has_bot_difficulty_dire();
}
::proto::dota::DOTABotDifficulty CSODOTALobby::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_difficulty_dire)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_dire_);
}
void CSODOTALobby::set_bot_difficulty_dire(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 94;
bool CSODOTALobby::has_bot_radiant() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void CSODOTALobby::set_has_bot_radiant() {
  _has_bits_[2] |= 0x00000002u;
}
void CSODOTALobby::clear_has_bot_radiant() {
  _has_bits_[2] &= ~0x00000002u;
}
void CSODOTALobby::clear_bot_radiant() {
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_radiant();
}
::google::protobuf::uint64 CSODOTALobby::bot_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_radiant)
  return bot_radiant_;
}
void CSODOTALobby::set_bot_radiant(::google::protobuf::uint64 value) {
  set_has_bot_radiant();
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_radiant)
}

// optional uint64 bot_dire = 95;
bool CSODOTALobby::has_bot_dire() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void CSODOTALobby::set_has_bot_dire() {
  _has_bits_[2] |= 0x00000004u;
}
void CSODOTALobby::clear_has_bot_dire() {
  _has_bits_[2] &= ~0x00000004u;
}
void CSODOTALobby::clear_bot_dire() {
  bot_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_dire();
}
::google::protobuf::uint64 CSODOTALobby::bot_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.bot_dire)
  return bot_dire_;
}
void CSODOTALobby::set_bot_dire(::google::protobuf::uint64 value) {
  set_has_bot_dire();
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.bot_dire)
}

// optional bool event_progression_enabled = 96;
bool CSODOTALobby::has_event_progression_enabled() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void CSODOTALobby::set_has_event_progression_enabled() {
  _has_bits_[1] |= 0x10000000u;
}
void CSODOTALobby::clear_has_event_progression_enabled() {
  _has_bits_[1] &= ~0x10000000u;
}
void CSODOTALobby::clear_event_progression_enabled() {
  event_progression_enabled_ = false;
  clear_has_event_progression_enabled();
}
bool CSODOTALobby::event_progression_enabled() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.event_progression_enabled)
  return event_progression_enabled_;
}
void CSODOTALobby::set_event_progression_enabled(bool value) {
  set_has_event_progression_enabled();
  event_progression_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.event_progression_enabled)
}

// optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 97 [default = k_DOTASelectionPriorityRules_Manual];
bool CSODOTALobby::has_selection_priority_rules() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void CSODOTALobby::set_has_selection_priority_rules() {
  _has_bits_[2] |= 0x00000008u;
}
void CSODOTALobby::clear_has_selection_priority_rules() {
  _has_bits_[2] &= ~0x00000008u;
}
void CSODOTALobby::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  clear_has_selection_priority_rules();
}
::proto::dota::DOTASelectionPriorityRules CSODOTALobby::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.selection_priority_rules)
  return static_cast< ::proto::dota::DOTASelectionPriorityRules >(selection_priority_rules_);
}
void CSODOTALobby::set_selection_priority_rules(::proto::dota::DOTASelectionPriorityRules value) {
  assert(::proto::dota::DOTASelectionPriorityRules_IsValid(value));
  set_has_selection_priority_rules();
  selection_priority_rules_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.selection_priority_rules)
}

// optional uint32 series_previous_selection_priority_team_id = 98;
bool CSODOTALobby::has_series_previous_selection_priority_team_id() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void CSODOTALobby::set_has_series_previous_selection_priority_team_id() {
  _has_bits_[2] |= 0x00000010u;
}
void CSODOTALobby::clear_has_series_previous_selection_priority_team_id() {
  _has_bits_[2] &= ~0x00000010u;
}
void CSODOTALobby::clear_series_previous_selection_priority_team_id() {
  series_previous_selection_priority_team_id_ = 0u;
  clear_has_series_previous_selection_priority_team_id();
}
::google::protobuf::uint32 CSODOTALobby::series_previous_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_previous_selection_priority_team_id)
  return series_previous_selection_priority_team_id_;
}
void CSODOTALobby::set_series_previous_selection_priority_team_id(::google::protobuf::uint32 value) {
  set_has_series_previous_selection_priority_team_id();
  series_previous_selection_priority_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_previous_selection_priority_team_id)
}

// optional uint32 series_current_selection_priority_team_id = 99;
bool CSODOTALobby::has_series_current_selection_priority_team_id() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void CSODOTALobby::set_has_series_current_selection_priority_team_id() {
  _has_bits_[2] |= 0x00000020u;
}
void CSODOTALobby::clear_has_series_current_selection_priority_team_id() {
  _has_bits_[2] &= ~0x00000020u;
}
void CSODOTALobby::clear_series_current_selection_priority_team_id() {
  series_current_selection_priority_team_id_ = 0u;
  clear_has_series_current_selection_priority_team_id();
}
::google::protobuf::uint32 CSODOTALobby::series_current_selection_priority_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_selection_priority_team_id)
  return series_current_selection_priority_team_id_;
}
void CSODOTALobby::set_series_current_selection_priority_team_id(::google::protobuf::uint32 value) {
  set_has_series_current_selection_priority_team_id();
  series_current_selection_priority_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_selection_priority_team_id)
}

// optional .proto.dota.DOTASelectionPriorityChoice series_current_priority_team_choice = 100 [default = k_DOTASelectionPriorityChoice_Invalid];
bool CSODOTALobby::has_series_current_priority_team_choice() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void CSODOTALobby::set_has_series_current_priority_team_choice() {
  _has_bits_[2] |= 0x00000040u;
}
void CSODOTALobby::clear_has_series_current_priority_team_choice() {
  _has_bits_[2] &= ~0x00000040u;
}
void CSODOTALobby::clear_series_current_priority_team_choice() {
  series_current_priority_team_choice_ = 0;
  clear_has_series_current_priority_team_choice();
}
::proto::dota::DOTASelectionPriorityChoice CSODOTALobby::series_current_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_priority_team_choice)
  return static_cast< ::proto::dota::DOTASelectionPriorityChoice >(series_current_priority_team_choice_);
}
void CSODOTALobby::set_series_current_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value) {
  assert(::proto::dota::DOTASelectionPriorityChoice_IsValid(value));
  set_has_series_current_priority_team_choice();
  series_current_priority_team_choice_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_priority_team_choice)
}

// optional .proto.dota.DOTASelectionPriorityChoice series_current_non_priority_team_choice = 101 [default = k_DOTASelectionPriorityChoice_Invalid];
bool CSODOTALobby::has_series_current_non_priority_team_choice() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void CSODOTALobby::set_has_series_current_non_priority_team_choice() {
  _has_bits_[1] |= 0x00800000u;
}
void CSODOTALobby::clear_has_series_current_non_priority_team_choice() {
  _has_bits_[1] &= ~0x00800000u;
}
void CSODOTALobby::clear_series_current_non_priority_team_choice() {
  series_current_non_priority_team_choice_ = 0;
  clear_has_series_current_non_priority_team_choice();
}
::proto::dota::DOTASelectionPriorityChoice CSODOTALobby::series_current_non_priority_team_choice() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_non_priority_team_choice)
  return static_cast< ::proto::dota::DOTASelectionPriorityChoice >(series_current_non_priority_team_choice_);
}
void CSODOTALobby::set_series_current_non_priority_team_choice(::proto::dota::DOTASelectionPriorityChoice value) {
  assert(::proto::dota::DOTASelectionPriorityChoice_IsValid(value));
  set_has_series_current_non_priority_team_choice();
  series_current_non_priority_team_choice_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_non_priority_team_choice)
}

// optional bool series_current_selection_priority_used_coin_toss = 102;
bool CSODOTALobby::has_series_current_selection_priority_used_coin_toss() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void CSODOTALobby::set_has_series_current_selection_priority_used_coin_toss() {
  _has_bits_[1] |= 0x20000000u;
}
void CSODOTALobby::clear_has_series_current_selection_priority_used_coin_toss() {
  _has_bits_[1] &= ~0x20000000u;
}
void CSODOTALobby::clear_series_current_selection_priority_used_coin_toss() {
  series_current_selection_priority_used_coin_toss_ = false;
  clear_has_series_current_selection_priority_used_coin_toss();
}
bool CSODOTALobby::series_current_selection_priority_used_coin_toss() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSODOTALobby.series_current_selection_priority_used_coin_toss)
  return series_current_selection_priority_used_coin_toss_;
}
void CSODOTALobby::set_series_current_selection_priority_used_coin_toss(bool value) {
  set_has_series_current_selection_priority_used_coin_toss();
  series_current_selection_priority_used_coin_toss_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSODOTALobby.series_current_selection_priority_used_coin_toss)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyPlaytestDetails::kJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyPlaytestDetails)
}
CMsgLobbyPlaytestDetails::CMsgLobbyPlaytestDetails(const CMsgLobbyPlaytestDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_json()) {
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyPlaytestDetails)
}

void CMsgLobbyPlaytestDetails::SharedCtor() {
  _cached_size_ = 0;
  json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgLobbyPlaytestDetails::~CMsgLobbyPlaytestDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyPlaytestDetails)
  SharedDtor();
}

void CMsgLobbyPlaytestDetails::SharedDtor() {
  json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgLobbyPlaytestDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyPlaytestDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyPlaytestDetails& CMsgLobbyPlaytestDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyPlaytestDetails* CMsgLobbyPlaytestDetails::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyPlaytestDetails* n = new CMsgLobbyPlaytestDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyPlaytestDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyPlaytestDetails)
  if (has_json()) {
    GOOGLE_DCHECK(!json_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*json_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyPlaytestDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyPlaytestDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string json = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->json().data(), this->json().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgLobbyPlaytestDetails.json");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyPlaytestDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyPlaytestDetails)
  return false;
#undef DO_
}

void CMsgLobbyPlaytestDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyPlaytestDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgLobbyPlaytestDetails.json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->json(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyPlaytestDetails)
}

::google::protobuf::uint8* CMsgLobbyPlaytestDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyPlaytestDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string json = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->json().data(), this->json().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgLobbyPlaytestDetails.json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->json(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyPlaytestDetails)
  return target;
}

size_t CMsgLobbyPlaytestDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyPlaytestDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string json = 1;
  if (has_json()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyPlaytestDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyPlaytestDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyPlaytestDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyPlaytestDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyPlaytestDetails)
    MergeFrom(*source);
  }
}

void CMsgLobbyPlaytestDetails::MergeFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_json()) {
    set_has_json();
    json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_);
  }
}

void CMsgLobbyPlaytestDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyPlaytestDetails::CopyFrom(const CMsgLobbyPlaytestDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyPlaytestDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyPlaytestDetails::IsInitialized() const {
  return true;
}

void CMsgLobbyPlaytestDetails::Swap(CMsgLobbyPlaytestDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyPlaytestDetails::InternalSwap(CMsgLobbyPlaytestDetails* other) {
  json_.Swap(&other->json_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyPlaytestDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyPlaytestDetails

// optional string json = 1;
bool CMsgLobbyPlaytestDetails::has_json() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyPlaytestDetails::set_has_json() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyPlaytestDetails::clear_has_json() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyPlaytestDetails::clear_json() {
  json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_json();
}
const ::std::string& CMsgLobbyPlaytestDetails::json() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyPlaytestDetails.json)
  return json_.GetNoArena();
}
void CMsgLobbyPlaytestDetails::set_json(const ::std::string& value) {
  set_has_json();
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyPlaytestDetails.json)
}
#if LANG_CXX11
void CMsgLobbyPlaytestDetails::set_json(::std::string&& value) {
  set_has_json();
  json_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgLobbyPlaytestDetails.json)
}
#endif
void CMsgLobbyPlaytestDetails::set_json(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_json();
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgLobbyPlaytestDetails.json)
}
void CMsgLobbyPlaytestDetails::set_json(const char* value, size_t size) {
  set_has_json();
  json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgLobbyPlaytestDetails.json)
}
::std::string* CMsgLobbyPlaytestDetails::mutable_json() {
  set_has_json();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyPlaytestDetails.json)
  return json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgLobbyPlaytestDetails::release_json() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgLobbyPlaytestDetails.json)
  clear_has_json();
  return json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgLobbyPlaytestDetails::set_allocated_json(::std::string* json) {
  if (json != NULL) {
    set_has_json();
  } else {
    clear_has_json();
  }
  json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgLobbyPlaytestDetails.json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
