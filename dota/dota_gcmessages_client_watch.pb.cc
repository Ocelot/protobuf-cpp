// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_watch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CSourceTVGameSmall_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSourceTVGameSmall_Player> {
} _CSourceTVGameSmall_Player_default_instance_;
class CSourceTVGameSmallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSourceTVGameSmall> {
} _CSourceTVGameSmall_default_instance_;
class CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCFindTopSourceTVGames> {
} _CMsgClientToGCFindTopSourceTVGames_default_instance_;
class CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientFindTopSourceTVGamesResponse> {
} _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
class CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopWeekendTourneyGames> {
} _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
class CMsgClientToGCTopMatchesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopMatchesRequest> {
} _CMsgClientToGCTopMatchesRequest_default_instance_;
class CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopLeagueMatchesRequest> {
} _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
class CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopFriendMatchesRequest> {
} _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
class CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCMatchesMinimalRequest> {
} _CMsgClientToGCMatchesMinimalRequest_default_instance_;
class CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCMatchesMinimalResponse> {
} _CMsgClientToGCMatchesMinimalResponse_default_instance_;
class CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopLeagueMatchesResponse> {
} _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopFriendMatchesResponse> {
} _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
class CMsgClientToGCFindTopMatchesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCFindTopMatches> {
} _CMsgClientToGCFindTopMatches_default_instance_;
class CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientFindTopLeagueMatchesResponse> {
} _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
class CMsgSpectateFriendGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectateFriendGame> {
} _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectateFriendGameResponse> {
} _CMsgSpectateFriendGameResponse_default_instance_;
class CMsgDOTAMatchMinimal_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal_Player> {
} _CMsgDOTAMatchMinimal_Player_default_instance_;
class CMsgDOTAMatchMinimal_TourneyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal_Tourney> {
} _CMsgDOTAMatchMinimal_Tourney_default_instance_;
class CMsgDOTAMatchMinimalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAMatchMinimal> {
} _CMsgDOTAMatchMinimal_default_instance_;
class CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAReplayDownloadInfo_Highlight> {
} _CDOTAReplayDownloadInfo_Highlight_default_instance_;
class CDOTAReplayDownloadInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAReplayDownloadInfo> {
} _CDOTAReplayDownloadInfo_default_instance_;
class CMsgWatchGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWatchGame> {
} _CMsgWatchGame_default_instance_;
class CMsgCancelWatchGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCancelWatchGame> {
} _CMsgCancelWatchGame_default_instance_;
class CMsgWatchGameResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWatchGameResponse> {
} _CMsgWatchGameResponse_default_instance_;
class CMsgPartyLeaderWatchGamePromptDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyLeaderWatchGamePrompt> {
} _CMsgPartyLeaderWatchGamePrompt_default_instance_;
class CDOTABroadcasterInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcasterInfo> {
} _CDOTABroadcasterInfo_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall_Player, hero_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, activate_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, deactivate_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, lobby_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, spectators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, average_mmr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_name_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_name_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_logo_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, team_logo_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, sort_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, last_update_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, radiant_lead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, radiant_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, dire_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, building_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSourceTVGameSmall, weekend_tourney_bracket_round_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  1,
  18,
  21,
  13,
  14,
  15,
  16,
  17,
  ~0u,
  19,
  20,
  23,
  24,
  22,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, start_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, game_list_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopSourceTVGames, lobby_ids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, start_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, num_games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, game_list_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, game_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, specific_games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopSourceTVGamesResponse, bot_game_),
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopWeekendTourneyGames, live_games_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, player_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopMatchesRequest, team_id_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopLeagueMatchesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopLeagueMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopFriendMatchesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCTopFriendMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalRequest, match_ids_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, matches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCMatchesMinimalResponse, last_match_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopLeagueMatchesResponse, matches_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientTopFriendMatchesResponse, matches_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, start_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, friend_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, friend_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCFindTopMatches, league_list_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, start_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, match_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientFindTopLeagueMatchesResponse, matches_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGame, steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectateFriendGameResponse, server_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, hero_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Player, player_slot_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, series_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_season_trophy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_division_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, weekend_tourney_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, radiant_team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal_Tourney, dire_team_logo_),
  2,
  6,
  8,
  9,
  10,
  11,
  12,
  3,
  0,
  4,
  5,
  1,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, tourney_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAMatchMinimal, match_outcome_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo_Highlight, description_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, tags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAReplayDownloadInfo, exists_on_disk_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, server_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, watch_server_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGame, regions_),
  0,
  3,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCancelWatchGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCancelWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_game_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_public_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_private_addr_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, source_tv_port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, game_server_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_server_steamid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWatchGameResponse, watch_tv_unique_secret_code_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyLeaderWatchGamePrompt, game_server_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, live_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, team_name_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, team_name_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, stage_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, series_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, upcoming_broadcast_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTABroadcasterInfo, allow_live_video_),
  4,
  3,
  5,
  0,
  1,
  2,
  7,
  8,
  9,
  6,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CSourceTVGameSmall_Player)},
  { 9, 40, sizeof(CSourceTVGameSmall)},
  { 66, 77, sizeof(CMsgClientToGCFindTopSourceTVGames)},
  { 83, 97, sizeof(CMsgGCToClientFindTopSourceTVGamesResponse)},
  { 106, 112, sizeof(CMsgGCToClientTopWeekendTourneyGames)},
  { 113, 121, sizeof(CMsgClientToGCTopMatchesRequest)},
  { 124, 129, sizeof(CMsgClientToGCTopLeagueMatchesRequest)},
  { 129, 134, sizeof(CMsgClientToGCTopFriendMatchesRequest)},
  { 134, 140, sizeof(CMsgClientToGCMatchesMinimalRequest)},
  { 141, 148, sizeof(CMsgClientToGCMatchesMinimalResponse)},
  { 150, 156, sizeof(CMsgGCToClientTopLeagueMatchesResponse)},
  { 157, 163, sizeof(CMsgGCToClientTopFriendMatchesResponse)},
  { 164, 175, sizeof(CMsgClientToGCFindTopMatches)},
  { 181, 191, sizeof(CMsgGCToClientFindTopLeagueMatchesResponse)},
  { 196, 202, sizeof(CMsgSpectateFriendGame)},
  { 203, 209, sizeof(CMsgSpectateFriendGameResponse)},
  { 210, 222, sizeof(CMsgDOTAMatchMinimal_Player)},
  { 229, 247, sizeof(CMsgDOTAMatchMinimal_Tourney)},
  { 260, 272, sizeof(CMsgDOTAMatchMinimal)},
  { 279, 286, sizeof(CDOTAReplayDownloadInfo_Highlight)},
  { 288, 299, sizeof(CDOTAReplayDownloadInfo)},
  { 305, 315, sizeof(CMsgWatchGame)},
  { 320, 325, sizeof(CMsgCancelWatchGame)},
  { 325, 337, sizeof(CMsgWatchGameResponse)},
  { 344, 350, sizeof(CMsgPartyLeaderWatchGamePrompt)},
  { 351, 366, sizeof(CDOTABroadcasterInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSourceTVGameSmall_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSourceTVGameSmall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCFindTopSourceTVGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientTopWeekendTourneyGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCTopMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCTopLeagueMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCTopFriendMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCMatchesMinimalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCMatchesMinimalResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientTopFriendMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCFindTopMatches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectateFriendGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectateFriendGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatchMinimal_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatchMinimal_Tourney_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAMatchMinimal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAReplayDownloadInfo_Highlight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAReplayDownloadInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWatchGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCancelWatchGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWatchGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPartyLeaderWatchGamePrompt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTABroadcasterInfo_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_watch.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 26);
}

}  // namespace

void TableStruct::Shutdown() {
  _CSourceTVGameSmall_Player_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CSourceTVGameSmall_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgClientToGCFindTopSourceTVGames_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgGCToClientTopWeekendTourneyGames_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgClientToGCTopMatchesRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgClientToGCTopLeagueMatchesRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgClientToGCTopFriendMatchesRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgClientToGCMatchesMinimalRequest_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgClientToGCMatchesMinimalResponse_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgGCToClientTopLeagueMatchesResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgGCToClientTopFriendMatchesResponse_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgClientToGCFindTopMatches_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgSpectateFriendGame_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgSpectateFriendGameResponse_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTAMatchMinimal_Player_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTAMatchMinimal_Tourney_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTAMatchMinimal_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CDOTAReplayDownloadInfo_Highlight_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CDOTAReplayDownloadInfo_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgWatchGame_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgCancelWatchGame_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgWatchGameResponse_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgPartyLeaderWatchGamePrompt_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CDOTABroadcasterInfo_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_2eproto::InitDefaults();
  _CSourceTVGameSmall_Player_default_instance_.DefaultConstruct();
  _CSourceTVGameSmall_default_instance_.DefaultConstruct();
  _CMsgClientToGCFindTopSourceTVGames_default_instance_.DefaultConstruct();
  _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_.DefaultConstruct();
  _CMsgGCToClientTopWeekendTourneyGames_default_instance_.DefaultConstruct();
  _CMsgClientToGCTopMatchesRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCTopLeagueMatchesRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCTopFriendMatchesRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCMatchesMinimalRequest_default_instance_.DefaultConstruct();
  _CMsgClientToGCMatchesMinimalResponse_default_instance_.DefaultConstruct();
  _CMsgGCToClientTopLeagueMatchesResponse_default_instance_.DefaultConstruct();
  _CMsgGCToClientTopFriendMatchesResponse_default_instance_.DefaultConstruct();
  _CMsgClientToGCFindTopMatches_default_instance_.DefaultConstruct();
  _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_.DefaultConstruct();
  _CMsgSpectateFriendGame_default_instance_.DefaultConstruct();
  _CMsgSpectateFriendGameResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAMatchMinimal_Player_default_instance_.DefaultConstruct();
  _CMsgDOTAMatchMinimal_Tourney_default_instance_.DefaultConstruct();
  _CMsgDOTAMatchMinimal_default_instance_.DefaultConstruct();
  _CDOTAReplayDownloadInfo_Highlight_default_instance_.DefaultConstruct();
  _CDOTAReplayDownloadInfo_default_instance_.DefaultConstruct();
  _CMsgWatchGame_default_instance_.DefaultConstruct();
  _CMsgCancelWatchGame_default_instance_.DefaultConstruct();
  _CMsgWatchGameResponse_default_instance_.DefaultConstruct();
  _CMsgPartyLeaderWatchGamePrompt_default_instance_.DefaultConstruct();
  _CDOTABroadcasterInfo_default_instance_.DefaultConstruct();
  _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_.get_mutable()->bot_game_ = const_cast< ::proto::dota::CSourceTVGameSmall*>(
      ::proto::dota::CSourceTVGameSmall::internal_default_instance());
  _CMsgDOTAMatchMinimal_default_instance_.get_mutable()->tourney_ = const_cast< ::proto::dota::CMsgDOTAMatchMinimal_Tourney*>(
      ::proto::dota::CMsgDOTAMatchMinimal_Tourney::internal_default_instance());
  _CDOTAReplayDownloadInfo_default_instance_.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTAMatchMinimal*>(
      ::proto::dota::CMsgDOTAMatchMinimal::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\"dota_gcmessages_client_watch.proto\022\npr"
      "oto.dota\032\027dota_shared_enums.proto\032\034dota_"
      "gcmessages_common.proto\"\335\005\n\022CSourceTVGam"
      "eSmall\022\025\n\ractivate_time\030\001 \001(\r\022\027\n\017deactiv"
      "ate_time\030\002 \001(\r\022\027\n\017server_steam_id\030\003 \001(\004\022"
      "\020\n\010lobby_id\030\004 \001(\004\022\021\n\tleague_id\030\005 \001(\r\022\022\n\n"
      "lobby_type\030\006 \001(\r\022\021\n\tgame_time\030\007 \001(\005\022\r\n\005d"
      "elay\030\010 \001(\r\022\022\n\nspectators\030\t \001(\r\022\021\n\tgame_m"
      "ode\030\n \001(\r\022\023\n\013average_mmr\030\013 \001(\r\022\031\n\021team_n"
      "ame_radiant\030\017 \001(\t\022\026\n\016team_name_dire\030\020 \001("
      "\t\022\031\n\021team_logo_radiant\030\030 \001(\006\022\026\n\016team_log"
      "o_dire\030\031 \001(\006\022\022\n\nsort_score\030\021 \001(\r\022\030\n\020last"
      "_update_time\030\022 \001(\002\022\024\n\014radiant_lead\030\023 \001(\005"
      "\022\025\n\rradiant_score\030\024 \001(\r\022\022\n\ndire_score\030\025 "
      "\001(\r\0226\n\007players\030\026 \003(\0132%.proto.dota.CSourc"
      "eTVGameSmall.Player\022\026\n\016building_state\030\027 "
      "\001(\007\022%\n\035weekend_tourney_tournament_id\030\032 \001"
      "(\r\022 \n\030weekend_tourney_division\030\033 \001(\r\022#\n\033"
      "weekend_tourney_skill_level\030\034 \001(\r\022%\n\035wee"
      "kend_tourney_bracket_round\030\035 \001(\r\032-\n\006Play"
      "er\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r\""
      "\234\001\n\"CMsgClientToGCFindTopSourceTVGames\022\022"
      "\n\nsearch_key\030\001 \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n"
      "\007hero_id\030\003 \001(\r\022\022\n\nstart_game\030\004 \001(\r\022\027\n\017ga"
      "me_list_index\030\005 \001(\r\022\021\n\tlobby_ids\030\006 \003(\004\"\241"
      "\002\n*CMsgGCToClientFindTopSourceTVGamesRes"
      "ponse\022\022\n\nsearch_key\030\001 \001(\t\022\021\n\tleague_id\030\002"
      " \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\022\n\nstart_game\030\004 \001("
      "\r\022\021\n\tnum_games\030\005 \001(\r\022\027\n\017game_list_index\030"
      "\006 \001(\r\0221\n\tgame_list\030\007 \003(\0132\036.proto.dota.CS"
      "ourceTVGameSmall\022\026\n\016specific_games\030\010 \001(\010"
      "\0220\n\010bot_game\030\t \001(\0132\036.proto.dota.CSourceT"
      "VGameSmall\"Z\n$CMsgGCToClientTopWeekendTo"
      "urneyGames\0222\n\nlive_games\030\001 \003(\0132\036.proto.d"
      "ota.CSourceTVGameSmall\"^\n\037CMsgClientToGC"
      "TopMatchesRequest\022\017\n\007hero_id\030\001 \001(\r\022\031\n\021pl"
      "ayer_account_id\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\"\'"
      "\n%CMsgClientToGCTopLeagueMatchesRequest\""
      "\'\n%CMsgClientToGCTopFriendMatchesRequest"
      "\"8\n#CMsgClientToGCMatchesMinimalRequest\022"
      "\021\n\tmatch_ids\030\001 \003(\004\"m\n$CMsgClientToGCMatc"
      "hesMinimalResponse\0221\n\007matches\030\001 \003(\0132 .pr"
      "oto.dota.CMsgDOTAMatchMinimal\022\022\n\nlast_ma"
      "tch\030\002 \001(\010\"[\n&CMsgGCToClientTopLeagueMatc"
      "hesResponse\0221\n\007matches\030\002 \003(\0132 .proto.dot"
      "a.CMsgDOTAMatchMinimal\"[\n&CMsgGCToClient"
      "TopFriendMatchesResponse\0221\n\007matches\030\001 \003("
      "\0132 .proto.dota.CMsgDOTAMatchMinimal\"\223\001\n\034"
      "CMsgClientToGCFindTopMatches\022\022\n\nstart_ga"
      "me\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003"
      " \001(\r\022\021\n\tfriend_id\030\004 \001(\r\022\023\n\013friend_list\030\005"
      " \001(\010\022\023\n\013league_list\030\006 \001(\010\"\243\001\n*CMsgGCToCl"
      "ientFindTopLeagueMatchesResponse\022\022\n\nstar"
      "t_game\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_"
      "id\030\003 \001(\r\022\021\n\tmatch_ids\030\004 \003(\r\022*\n\007matches\030\005"
      " \003(\0132\031.proto.dota.CMsgDOTAMatch\"*\n\026CMsgS"
      "pectateFriendGame\022\020\n\010steam_id\030\001 \001(\006\"8\n\036C"
      "MsgSpectateFriendGameResponse\022\026\n\016server_"
      "steamid\030\004 \001(\006\"\312\006\n\024CMsgDOTAMatchMinimal\022\020"
      "\n\010match_id\030\001 \001(\004\022\022\n\nstart_time\030\002 \001(\007\022\020\n\010"
      "duration\030\003 \001(\r\022@\n\tgame_mode\030\004 \001(\0162\031.prot"
      "o.dota.DOTA_GameMode:\022DOTA_GAMEMODE_NONE"
      "\0228\n\007players\030\006 \003(\0132\'.proto.dota.CMsgDOTAM"
      "atchMinimal.Player\0229\n\007tourney\030\007 \001(\0132(.pr"
      "oto.dota.CMsgDOTAMatchMinimal.Tourney\022I\n"
      "\rmatch_outcome\030\010 \001(\0162\031.proto.dota.EMatch"
      "Outcome:\027k_EMatchOutcome_Unknown\032\201\001\n\006Pla"
      "yer\022\022\n\naccount_id\030\001 \001(\r\022\017\n\007hero_id\030\002 \001(\r"
      "\022\r\n\005kills\030\003 \001(\r\022\016\n\006deaths\030\004 \001(\r\022\017\n\007assis"
      "ts\030\005 \001(\r\022\r\n\005items\030\006 \003(\r\022\023\n\013player_slot\030\007"
      " \001(\r\032\363\002\n\007Tourney\022\021\n\tleague_id\030\001 \001(\r\022\023\n\013s"
      "eries_type\030\010 \001(\r\022\023\n\013series_game\030\t \001(\r\022%\n"
      "\035weekend_tourney_tournament_id\030\n \001(\r\022(\n "
      "weekend_tourney_season_trophy_id\030\013 \001(\r\022 "
      "\n\030weekend_tourney_division\030\014 \001(\r\022#\n\033week"
      "end_tourney_skill_level\030\r \001(\r\022\027\n\017radiant"
      "_team_id\030\002 \001(\r\022\031\n\021radiant_team_name\030\003 \001("
      "\t\022\031\n\021radiant_team_logo\030\004 \001(\006\022\024\n\014dire_tea"
      "m_id\030\005 \001(\r\022\026\n\016dire_team_name\030\006 \001(\t\022\026\n\016di"
      "re_team_logo\030\007 \001(\006\"\327\001\n\027CDOTAReplayDownlo"
      "adInfo\022/\n\005match\030\001 \001(\0132 .proto.dota.CMsgD"
      "OTAMatchMinimal\022\r\n\005title\030\002 \001(\t\022\023\n\013descri"
      "ption\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\014\n\004tags\030\005 \003(\t\022"
      "\026\n\016exists_on_disk\030\006 \001(\010\0323\n\tHighlight\022\021\n\t"
      "timestamp\030\001 \001(\r\022\023\n\013description\030\002 \001(\t\"\200\001\n"
      "\rCMsgWatchGame\022\026\n\016server_steamid\030\001 \001(\006\022\026"
      "\n\016client_version\030\002 \001(\r\022\034\n\024watch_server_s"
      "teamid\030\003 \001(\006\022\020\n\010lobby_id\030\004 \001(\004\022\017\n\007region"
      "s\030\005 \003(\r\"\025\n\023CMsgCancelWatchGame\"\324\003\n\025CMsgW"
      "atchGameResponse\022U\n\021watch_game_result\030\001 "
      "\001(\01621.proto.dota.CMsgWatchGameResponse.W"
      "atchGameResult:\007PENDING\022\035\n\025source_tv_pub"
      "lic_addr\030\002 \001(\r\022\036\n\026source_tv_private_addr"
      "\030\003 \001(\r\022\026\n\016source_tv_port\030\004 \001(\r\022\033\n\023game_s"
      "erver_steamid\030\005 \001(\006\022\034\n\024watch_server_stea"
      "mid\030\006 \001(\006\022#\n\033watch_tv_unique_secret_code"
      "\030\007 \001(\006\"\254\001\n\017WatchGameResult\022\013\n\007PENDING\020\000\022"
      "\t\n\005READY\020\001\022\026\n\022GAMESERVERNOTFOUND\020\002\022\017\n\013UN"
      "AVAILABLE\020\003\022\r\n\tCANCELLED\020\004\022\027\n\023INCOMPATIB"
      "LEVERSION\020\005\022\035\n\031MISSINGLEAGUESUBSCRIPTION"
      "\020\006\022\021\n\rLOBBYNOTFOUND\020\007\"=\n\036CMsgPartyLeader"
      "WatchGamePrompt\022\033\n\023game_server_steamid\030\005"
      " \001(\006\"\202\002\n\024CDOTABroadcasterInfo\022\022\n\naccount"
      "_id\030\001 \001(\r\022\027\n\017server_steam_id\030\002 \001(\006\022\014\n\004li"
      "ve\030\003 \001(\010\022\031\n\021team_name_radiant\030\004 \001(\t\022\026\n\016t"
      "eam_name_dire\030\005 \001(\t\022\022\n\nstage_name\030\006 \001(\t\022"
      "\023\n\013series_game\030\007 \001(\r\022\023\n\013series_type\030\010 \001("
      "\r\022$\n\034upcoming_broadcast_timestamp\030\t \001(\r\022"
      "\030\n\020allow_live_video\030\n \001(\010B\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_watch.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto

const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_enum_descriptors[0];
}
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::READY;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::GAMESERVERNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::UNAVAILABLE;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::CANCELLED;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::INCOMPATIBLEVERSION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::MISSINGLEAGUESUBSCRIPTION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::LOBBYNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MIN;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MAX;
const int CMsgWatchGameResponse::WatchGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSourceTVGameSmall_Player::kAccountIdFieldNumber;
const int CSourceTVGameSmall_Player::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSourceTVGameSmall.Player)
}
CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSourceTVGameSmall.Player)
}

void CSourceTVGameSmall_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(hero_id_));
}

CSourceTVGameSmall_Player::~CSourceTVGameSmall_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CSourceTVGameSmall.Player)
  SharedDtor();
}

void CSourceTVGameSmall_Player::SharedDtor() {
}

void CSourceTVGameSmall_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSourceTVGameSmall_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSourceTVGameSmall_Player& CSourceTVGameSmall_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSourceTVGameSmall_Player* CSourceTVGameSmall_Player::New(::google::protobuf::Arena* arena) const {
  CSourceTVGameSmall_Player* n = new CSourceTVGameSmall_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSourceTVGameSmall_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSourceTVGameSmall.Player)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSourceTVGameSmall_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSourceTVGameSmall.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSourceTVGameSmall.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSourceTVGameSmall.Player)
  return false;
#undef DO_
}

void CSourceTVGameSmall_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSourceTVGameSmall.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSourceTVGameSmall.Player)
}

::google::protobuf::uint8* CSourceTVGameSmall_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSourceTVGameSmall.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSourceTVGameSmall.Player)
  return target;
}

size_t CSourceTVGameSmall_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSourceTVGameSmall.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSourceTVGameSmall_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSourceTVGameSmall_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSourceTVGameSmall.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSourceTVGameSmall.Player)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall_Player::MergeFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSourceTVGameSmall_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall_Player::CopyFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall_Player::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall_Player::Swap(CSourceTVGameSmall_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSourceTVGameSmall_Player::InternalSwap(CSourceTVGameSmall_Player* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSourceTVGameSmall_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSourceTVGameSmall_Player

// optional uint32 account_id = 1;
bool CSourceTVGameSmall_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSourceTVGameSmall_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSourceTVGameSmall_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSourceTVGameSmall_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CSourceTVGameSmall_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.account_id)
  return account_id_;
}
void CSourceTVGameSmall_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.account_id)
}

// optional uint32 hero_id = 2;
bool CSourceTVGameSmall_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSourceTVGameSmall_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CSourceTVGameSmall_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSourceTVGameSmall_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CSourceTVGameSmall_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.Player.hero_id)
  return hero_id_;
}
void CSourceTVGameSmall_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.Player.hero_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSourceTVGameSmall::kActivateTimeFieldNumber;
const int CSourceTVGameSmall::kDeactivateTimeFieldNumber;
const int CSourceTVGameSmall::kServerSteamIdFieldNumber;
const int CSourceTVGameSmall::kLobbyIdFieldNumber;
const int CSourceTVGameSmall::kLeagueIdFieldNumber;
const int CSourceTVGameSmall::kLobbyTypeFieldNumber;
const int CSourceTVGameSmall::kGameTimeFieldNumber;
const int CSourceTVGameSmall::kDelayFieldNumber;
const int CSourceTVGameSmall::kSpectatorsFieldNumber;
const int CSourceTVGameSmall::kGameModeFieldNumber;
const int CSourceTVGameSmall::kAverageMmrFieldNumber;
const int CSourceTVGameSmall::kTeamNameRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamNameDireFieldNumber;
const int CSourceTVGameSmall::kTeamLogoRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamLogoDireFieldNumber;
const int CSourceTVGameSmall::kSortScoreFieldNumber;
const int CSourceTVGameSmall::kLastUpdateTimeFieldNumber;
const int CSourceTVGameSmall::kRadiantLeadFieldNumber;
const int CSourceTVGameSmall::kRadiantScoreFieldNumber;
const int CSourceTVGameSmall::kDireScoreFieldNumber;
const int CSourceTVGameSmall::kPlayersFieldNumber;
const int CSourceTVGameSmall::kBuildingStateFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyTournamentIdFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyDivisionFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneySkillLevelFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyBracketRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSourceTVGameSmall::CSourceTVGameSmall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSourceTVGameSmall)
}
CSourceTVGameSmall::CSourceTVGameSmall(const CSourceTVGameSmall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_radiant()) {
    team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
  }
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_dire()) {
    team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
  }
  ::memcpy(&activate_time_, &from.activate_time_,
    reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&activate_time_) + sizeof(weekend_tourney_skill_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSourceTVGameSmall)
}

void CSourceTVGameSmall::SharedCtor() {
  _cached_size_ = 0;
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activate_time_, 0, reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&activate_time_) + sizeof(weekend_tourney_skill_level_));
}

CSourceTVGameSmall::~CSourceTVGameSmall() {
  // @@protoc_insertion_point(destructor:proto.dota.CSourceTVGameSmall)
  SharedDtor();
}

void CSourceTVGameSmall::SharedDtor() {
  team_name_radiant_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSourceTVGameSmall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSourceTVGameSmall::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSourceTVGameSmall& CSourceTVGameSmall::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSourceTVGameSmall* CSourceTVGameSmall::New(::google::protobuf::Arena* arena) const {
  CSourceTVGameSmall* n = new CSourceTVGameSmall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSourceTVGameSmall::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSourceTVGameSmall)
  players_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_team_name_radiant()) {
      GOOGLE_DCHECK(!team_name_radiant_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_radiant_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_name_dire()) {
      GOOGLE_DCHECK(!team_name_dire_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_dire_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&activate_time_, 0, reinterpret_cast<char*>(&lobby_type_) -
      reinterpret_cast<char*>(&activate_time_) + sizeof(lobby_type_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&game_time_, 0, reinterpret_cast<char*>(&radiant_lead_) -
      reinterpret_cast<char*>(&game_time_) + sizeof(radiant_lead_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&radiant_score_, 0, reinterpret_cast<char*>(&weekend_tourney_division_) -
      reinterpret_cast<char*>(&radiant_score_) + sizeof(weekend_tourney_division_));
  }
  weekend_tourney_skill_level_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSourceTVGameSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSourceTVGameSmall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activate_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_activate_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deactivate_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_deactivate_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deactivate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_lobby_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_delay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_spectators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_mmr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_average_mmr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_radiant = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), this->team_name_radiant().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSourceTVGameSmall.team_name_radiant");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_dire = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), this->team_name_dire().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSourceTVGameSmall.team_name_dire");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sort_score = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_sort_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_update_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_last_update_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radiant_lead = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_radiant_lead();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiant_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_radiant_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_dire_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 building_state = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_building_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &building_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo_radiant = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_team_logo_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo_dire = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(201u)) {
          set_has_team_logo_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_weekend_tourney_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_weekend_tourney_division();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_weekend_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_weekend_tourney_bracket_round();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSourceTVGameSmall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSourceTVGameSmall)
  return false;
#undef DO_
}

void CSourceTVGameSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSourceTVGameSmall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activate_time(), output);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deactivate_time(), output);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_steam_id(), output);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lobby_type(), output);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->game_time(), output);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->delay(), output);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->spectators(), output);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_mode(), output);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->average_mmr(), output);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->team_name_dire(), output);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sort_score(), output);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->last_update_time(), output);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->radiant_lead(), output);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_score(), output);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_score(), output);
  }

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->players(i), output);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->building_state(), output);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(24, this->team_logo_radiant(), output);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->team_logo_dire(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->weekend_tourney_skill_level(), output);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->weekend_tourney_bracket_round(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSourceTVGameSmall)
}

::google::protobuf::uint8* CSourceTVGameSmall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSourceTVGameSmall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activate_time(), target);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deactivate_time(), target);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_steam_id(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lobby_type(), target);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->game_time(), target);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->delay(), target);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->spectators(), target);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_mode(), target);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->average_mmr(), target);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->team_name_dire(), target);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sort_score(), target);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->last_update_time(), target);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->radiant_lead(), target);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_score(), target);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_score(), target);
  }

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->players(i), deterministic, target);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->building_state(), target);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(24, this->team_logo_radiant(), target);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->team_logo_dire(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->weekend_tourney_bracket_round(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSourceTVGameSmall)
  return target;
}

size_t CSourceTVGameSmall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSourceTVGameSmall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  {
    unsigned int count = this->players_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name_radiant = 15;
    if (has_team_name_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 16;
    if (has_team_name_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional uint32 activate_time = 1;
    if (has_activate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activate_time());
    }

    // optional uint32 deactivate_time = 2;
    if (has_deactivate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deactivate_time());
    }

    // optional uint64 server_steam_id = 3;
    if (has_server_steam_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 league_id = 5;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 lobby_type = 6;
    if (has_lobby_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 game_time = 7;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 delay = 8;
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 spectators = 9;
    if (has_spectators()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators());
    }

    // optional uint32 game_mode = 10;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint32 average_mmr = 11;
    if (has_average_mmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_mmr());
    }

    // optional uint32 sort_score = 17;
    if (has_sort_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_score());
    }

    // optional float last_update_time = 18;
    if (has_last_update_time()) {
      total_size += 2 + 4;
    }

    // optional int32 radiant_lead = 19;
    if (has_radiant_lead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiant_lead());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 radiant_score = 20;
    if (has_radiant_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_score());
    }

    // optional uint32 dire_score = 21;
    if (has_dire_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_score());
    }

    // optional fixed64 team_logo_radiant = 24;
    if (has_team_logo_radiant()) {
      total_size += 2 + 8;
    }

    // optional fixed32 building_state = 23;
    if (has_building_state()) {
      total_size += 2 + 4;
    }

    // optional uint32 weekend_tourney_tournament_id = 26;
    if (has_weekend_tourney_tournament_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

    // optional fixed64 team_logo_dire = 25;
    if (has_team_logo_dire()) {
      total_size += 2 + 8;
    }

    // optional uint32 weekend_tourney_bracket_round = 29;
    if (has_weekend_tourney_bracket_round()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

    // optional uint32 weekend_tourney_division = 27;
    if (has_weekend_tourney_division()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

  }
  // optional uint32 weekend_tourney_skill_level = 28;
  if (has_weekend_tourney_skill_level()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->weekend_tourney_skill_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSourceTVGameSmall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSourceTVGameSmall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSourceTVGameSmall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSourceTVGameSmall)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall::MergeFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name_radiant();
      team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_name_dire();
      team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
    }
    if (cached_has_bits & 0x00000004u) {
      activate_time_ = from.activate_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      deactivate_time_ = from.deactivate_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000400u) {
      spectators_ = from.spectators_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      average_mmr_ = from.average_mmr_;
    }
    if (cached_has_bits & 0x00002000u) {
      sort_score_ = from.sort_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      radiant_lead_ = from.radiant_lead_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      radiant_score_ = from.radiant_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      dire_score_ = from.dire_score_;
    }
    if (cached_has_bits & 0x00040000u) {
      team_logo_radiant_ = from.team_logo_radiant_;
    }
    if (cached_has_bits & 0x00080000u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00100000u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      team_logo_dire_ = from.team_logo_dire_;
    }
    if (cached_has_bits & 0x00400000u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x00800000u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    set_weekend_tourney_skill_level(from.weekend_tourney_skill_level());
  }
}

void CSourceTVGameSmall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall::CopyFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall::Swap(CSourceTVGameSmall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSourceTVGameSmall::InternalSwap(CSourceTVGameSmall* other) {
  players_.InternalSwap(&other->players_);
  team_name_radiant_.Swap(&other->team_name_radiant_);
  team_name_dire_.Swap(&other->team_name_dire_);
  std::swap(activate_time_, other->activate_time_);
  std::swap(deactivate_time_, other->deactivate_time_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(league_id_, other->league_id_);
  std::swap(lobby_type_, other->lobby_type_);
  std::swap(game_time_, other->game_time_);
  std::swap(delay_, other->delay_);
  std::swap(spectators_, other->spectators_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(average_mmr_, other->average_mmr_);
  std::swap(sort_score_, other->sort_score_);
  std::swap(last_update_time_, other->last_update_time_);
  std::swap(radiant_lead_, other->radiant_lead_);
  std::swap(radiant_score_, other->radiant_score_);
  std::swap(dire_score_, other->dire_score_);
  std::swap(team_logo_radiant_, other->team_logo_radiant_);
  std::swap(building_state_, other->building_state_);
  std::swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
  std::swap(team_logo_dire_, other->team_logo_dire_);
  std::swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
  std::swap(weekend_tourney_division_, other->weekend_tourney_division_);
  std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSourceTVGameSmall::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSourceTVGameSmall

// optional uint32 activate_time = 1;
bool CSourceTVGameSmall::has_activate_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CSourceTVGameSmall::set_has_activate_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CSourceTVGameSmall::clear_has_activate_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CSourceTVGameSmall::clear_activate_time() {
  activate_time_ = 0u;
  clear_has_activate_time();
}
::google::protobuf::uint32 CSourceTVGameSmall::activate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.activate_time)
  return activate_time_;
}
void CSourceTVGameSmall::set_activate_time(::google::protobuf::uint32 value) {
  set_has_activate_time();
  activate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.activate_time)
}

// optional uint32 deactivate_time = 2;
bool CSourceTVGameSmall::has_deactivate_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CSourceTVGameSmall::set_has_deactivate_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CSourceTVGameSmall::clear_has_deactivate_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CSourceTVGameSmall::clear_deactivate_time() {
  deactivate_time_ = 0u;
  clear_has_deactivate_time();
}
::google::protobuf::uint32 CSourceTVGameSmall::deactivate_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.deactivate_time)
  return deactivate_time_;
}
void CSourceTVGameSmall::set_deactivate_time(::google::protobuf::uint32 value) {
  set_has_deactivate_time();
  deactivate_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.deactivate_time)
}

// optional uint64 server_steam_id = 3;
bool CSourceTVGameSmall::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CSourceTVGameSmall::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CSourceTVGameSmall::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CSourceTVGameSmall::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CSourceTVGameSmall::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.server_steam_id)
  return server_steam_id_;
}
void CSourceTVGameSmall::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.server_steam_id)
}

// optional uint64 lobby_id = 4;
bool CSourceTVGameSmall::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CSourceTVGameSmall::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CSourceTVGameSmall::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CSourceTVGameSmall::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CSourceTVGameSmall::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_id)
  return lobby_id_;
}
void CSourceTVGameSmall::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_id)
}

// optional uint32 league_id = 5;
bool CSourceTVGameSmall::has_league_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CSourceTVGameSmall::set_has_league_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CSourceTVGameSmall::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CSourceTVGameSmall::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CSourceTVGameSmall::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.league_id)
  return league_id_;
}
void CSourceTVGameSmall::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.league_id)
}

// optional uint32 lobby_type = 6;
bool CSourceTVGameSmall::has_lobby_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CSourceTVGameSmall::set_has_lobby_type() {
  _has_bits_[0] |= 0x00000080u;
}
void CSourceTVGameSmall::clear_has_lobby_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void CSourceTVGameSmall::clear_lobby_type() {
  lobby_type_ = 0u;
  clear_has_lobby_type();
}
::google::protobuf::uint32 CSourceTVGameSmall::lobby_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.lobby_type)
  return lobby_type_;
}
void CSourceTVGameSmall::set_lobby_type(::google::protobuf::uint32 value) {
  set_has_lobby_type();
  lobby_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.lobby_type)
}

// optional int32 game_time = 7;
bool CSourceTVGameSmall::has_game_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CSourceTVGameSmall::set_has_game_time() {
  _has_bits_[0] |= 0x00000100u;
}
void CSourceTVGameSmall::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void CSourceTVGameSmall::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
::google::protobuf::int32 CSourceTVGameSmall::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_time)
  return game_time_;
}
void CSourceTVGameSmall::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_time)
}

// optional uint32 delay = 8;
bool CSourceTVGameSmall::has_delay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CSourceTVGameSmall::set_has_delay() {
  _has_bits_[0] |= 0x00000200u;
}
void CSourceTVGameSmall::clear_has_delay() {
  _has_bits_[0] &= ~0x00000200u;
}
void CSourceTVGameSmall::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
::google::protobuf::uint32 CSourceTVGameSmall::delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.delay)
  return delay_;
}
void CSourceTVGameSmall::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.delay)
}

// optional uint32 spectators = 9;
bool CSourceTVGameSmall::has_spectators() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CSourceTVGameSmall::set_has_spectators() {
  _has_bits_[0] |= 0x00000400u;
}
void CSourceTVGameSmall::clear_has_spectators() {
  _has_bits_[0] &= ~0x00000400u;
}
void CSourceTVGameSmall::clear_spectators() {
  spectators_ = 0u;
  clear_has_spectators();
}
::google::protobuf::uint32 CSourceTVGameSmall::spectators() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.spectators)
  return spectators_;
}
void CSourceTVGameSmall::set_spectators(::google::protobuf::uint32 value) {
  set_has_spectators();
  spectators_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.spectators)
}

// optional uint32 game_mode = 10;
bool CSourceTVGameSmall::has_game_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CSourceTVGameSmall::set_has_game_mode() {
  _has_bits_[0] |= 0x00000800u;
}
void CSourceTVGameSmall::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
void CSourceTVGameSmall::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CSourceTVGameSmall::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.game_mode)
  return game_mode_;
}
void CSourceTVGameSmall::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.game_mode)
}

// optional uint32 average_mmr = 11;
bool CSourceTVGameSmall::has_average_mmr() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CSourceTVGameSmall::set_has_average_mmr() {
  _has_bits_[0] |= 0x00001000u;
}
void CSourceTVGameSmall::clear_has_average_mmr() {
  _has_bits_[0] &= ~0x00001000u;
}
void CSourceTVGameSmall::clear_average_mmr() {
  average_mmr_ = 0u;
  clear_has_average_mmr();
}
::google::protobuf::uint32 CSourceTVGameSmall::average_mmr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.average_mmr)
  return average_mmr_;
}
void CSourceTVGameSmall::set_average_mmr(::google::protobuf::uint32 value) {
  set_has_average_mmr();
  average_mmr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.average_mmr)
}

// optional string team_name_radiant = 15;
bool CSourceTVGameSmall::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSourceTVGameSmall::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
}
void CSourceTVGameSmall::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSourceTVGameSmall::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_radiant();
}
const ::std::string& CSourceTVGameSmall::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
void CSourceTVGameSmall::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#if LANG_CXX11
void CSourceTVGameSmall::set_team_name_radiant(::std::string&& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
#endif
void CSourceTVGameSmall::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
void CSourceTVGameSmall::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_radiant)
}
::std::string* CSourceTVGameSmall::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSourceTVGameSmall::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_radiant)
  clear_has_team_name_radiant();
  return team_name_radiant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSourceTVGameSmall::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != NULL) {
    set_has_team_name_radiant();
  } else {
    clear_has_team_name_radiant();
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_radiant)
}

// optional string team_name_dire = 16;
bool CSourceTVGameSmall::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSourceTVGameSmall::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
}
void CSourceTVGameSmall::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSourceTVGameSmall::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_dire();
}
const ::std::string& CSourceTVGameSmall::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.GetNoArena();
}
void CSourceTVGameSmall::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#if LANG_CXX11
void CSourceTVGameSmall::set_team_name_dire(::std::string&& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSourceTVGameSmall.team_name_dire)
}
#endif
void CSourceTVGameSmall::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSourceTVGameSmall.team_name_dire)
}
void CSourceTVGameSmall::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSourceTVGameSmall.team_name_dire)
}
::std::string* CSourceTVGameSmall::mutable_team_name_dire() {
  set_has_team_name_dire();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSourceTVGameSmall::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CSourceTVGameSmall.team_name_dire)
  clear_has_team_name_dire();
  return team_name_dire_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSourceTVGameSmall::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != NULL) {
    set_has_team_name_dire();
  } else {
    clear_has_team_name_dire();
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSourceTVGameSmall.team_name_dire)
}

// optional fixed64 team_logo_radiant = 24;
bool CSourceTVGameSmall::has_team_logo_radiant() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CSourceTVGameSmall::set_has_team_logo_radiant() {
  _has_bits_[0] |= 0x00040000u;
}
void CSourceTVGameSmall::clear_has_team_logo_radiant() {
  _has_bits_[0] &= ~0x00040000u;
}
void CSourceTVGameSmall::clear_team_logo_radiant() {
  team_logo_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_radiant();
}
::google::protobuf::uint64 CSourceTVGameSmall::team_logo_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_radiant)
  return team_logo_radiant_;
}
void CSourceTVGameSmall::set_team_logo_radiant(::google::protobuf::uint64 value) {
  set_has_team_logo_radiant();
  team_logo_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_radiant)
}

// optional fixed64 team_logo_dire = 25;
bool CSourceTVGameSmall::has_team_logo_dire() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CSourceTVGameSmall::set_has_team_logo_dire() {
  _has_bits_[0] |= 0x00200000u;
}
void CSourceTVGameSmall::clear_has_team_logo_dire() {
  _has_bits_[0] &= ~0x00200000u;
}
void CSourceTVGameSmall::clear_team_logo_dire() {
  team_logo_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo_dire();
}
::google::protobuf::uint64 CSourceTVGameSmall::team_logo_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.team_logo_dire)
  return team_logo_dire_;
}
void CSourceTVGameSmall::set_team_logo_dire(::google::protobuf::uint64 value) {
  set_has_team_logo_dire();
  team_logo_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.team_logo_dire)
}

// optional uint32 sort_score = 17;
bool CSourceTVGameSmall::has_sort_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CSourceTVGameSmall::set_has_sort_score() {
  _has_bits_[0] |= 0x00002000u;
}
void CSourceTVGameSmall::clear_has_sort_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void CSourceTVGameSmall::clear_sort_score() {
  sort_score_ = 0u;
  clear_has_sort_score();
}
::google::protobuf::uint32 CSourceTVGameSmall::sort_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.sort_score)
  return sort_score_;
}
void CSourceTVGameSmall::set_sort_score(::google::protobuf::uint32 value) {
  set_has_sort_score();
  sort_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.sort_score)
}

// optional float last_update_time = 18;
bool CSourceTVGameSmall::has_last_update_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CSourceTVGameSmall::set_has_last_update_time() {
  _has_bits_[0] |= 0x00004000u;
}
void CSourceTVGameSmall::clear_has_last_update_time() {
  _has_bits_[0] &= ~0x00004000u;
}
void CSourceTVGameSmall::clear_last_update_time() {
  last_update_time_ = 0;
  clear_has_last_update_time();
}
float CSourceTVGameSmall::last_update_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.last_update_time)
  return last_update_time_;
}
void CSourceTVGameSmall::set_last_update_time(float value) {
  set_has_last_update_time();
  last_update_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.last_update_time)
}

// optional int32 radiant_lead = 19;
bool CSourceTVGameSmall::has_radiant_lead() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CSourceTVGameSmall::set_has_radiant_lead() {
  _has_bits_[0] |= 0x00008000u;
}
void CSourceTVGameSmall::clear_has_radiant_lead() {
  _has_bits_[0] &= ~0x00008000u;
}
void CSourceTVGameSmall::clear_radiant_lead() {
  radiant_lead_ = 0;
  clear_has_radiant_lead();
}
::google::protobuf::int32 CSourceTVGameSmall::radiant_lead() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_lead)
  return radiant_lead_;
}
void CSourceTVGameSmall::set_radiant_lead(::google::protobuf::int32 value) {
  set_has_radiant_lead();
  radiant_lead_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_lead)
}

// optional uint32 radiant_score = 20;
bool CSourceTVGameSmall::has_radiant_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CSourceTVGameSmall::set_has_radiant_score() {
  _has_bits_[0] |= 0x00010000u;
}
void CSourceTVGameSmall::clear_has_radiant_score() {
  _has_bits_[0] &= ~0x00010000u;
}
void CSourceTVGameSmall::clear_radiant_score() {
  radiant_score_ = 0u;
  clear_has_radiant_score();
}
::google::protobuf::uint32 CSourceTVGameSmall::radiant_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.radiant_score)
  return radiant_score_;
}
void CSourceTVGameSmall::set_radiant_score(::google::protobuf::uint32 value) {
  set_has_radiant_score();
  radiant_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.radiant_score)
}

// optional uint32 dire_score = 21;
bool CSourceTVGameSmall::has_dire_score() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CSourceTVGameSmall::set_has_dire_score() {
  _has_bits_[0] |= 0x00020000u;
}
void CSourceTVGameSmall::clear_has_dire_score() {
  _has_bits_[0] &= ~0x00020000u;
}
void CSourceTVGameSmall::clear_dire_score() {
  dire_score_ = 0u;
  clear_has_dire_score();
}
::google::protobuf::uint32 CSourceTVGameSmall::dire_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.dire_score)
  return dire_score_;
}
void CSourceTVGameSmall::set_dire_score(::google::protobuf::uint32 value) {
  set_has_dire_score();
  dire_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.dire_score)
}

// repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
int CSourceTVGameSmall::players_size() const {
  return players_.size();
}
void CSourceTVGameSmall::clear_players() {
  players_.Clear();
}
const ::proto::dota::CSourceTVGameSmall_Player& CSourceTVGameSmall::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.players)
  return players_.Get(index);
}
::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CSourceTVGameSmall.players)
  return players_.Mutable(index);
}
::proto::dota::CSourceTVGameSmall_Player* CSourceTVGameSmall::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CSourceTVGameSmall.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >*
CSourceTVGameSmall::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CSourceTVGameSmall.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall_Player >&
CSourceTVGameSmall::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CSourceTVGameSmall.players)
  return players_;
}

// optional fixed32 building_state = 23;
bool CSourceTVGameSmall::has_building_state() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CSourceTVGameSmall::set_has_building_state() {
  _has_bits_[0] |= 0x00080000u;
}
void CSourceTVGameSmall::clear_has_building_state() {
  _has_bits_[0] &= ~0x00080000u;
}
void CSourceTVGameSmall::clear_building_state() {
  building_state_ = 0u;
  clear_has_building_state();
}
::google::protobuf::uint32 CSourceTVGameSmall::building_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.building_state)
  return building_state_;
}
void CSourceTVGameSmall::set_building_state(::google::protobuf::uint32 value) {
  set_has_building_state();
  building_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.building_state)
}

// optional uint32 weekend_tourney_tournament_id = 26;
bool CSourceTVGameSmall::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CSourceTVGameSmall::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00100000u;
}
void CSourceTVGameSmall::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00100000u;
}
void CSourceTVGameSmall::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
void CSourceTVGameSmall::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_division = 27;
bool CSourceTVGameSmall::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CSourceTVGameSmall::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00800000u;
}
void CSourceTVGameSmall::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00800000u;
}
void CSourceTVGameSmall::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
  return weekend_tourney_division_;
}
void CSourceTVGameSmall::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 28;
bool CSourceTVGameSmall::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CSourceTVGameSmall::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x01000000u;
}
void CSourceTVGameSmall::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x01000000u;
}
void CSourceTVGameSmall::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
void CSourceTVGameSmall::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_skill_level)
}

// optional uint32 weekend_tourney_bracket_round = 29;
bool CSourceTVGameSmall::has_weekend_tourney_bracket_round() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CSourceTVGameSmall::set_has_weekend_tourney_bracket_round() {
  _has_bits_[0] |= 0x00400000u;
}
void CSourceTVGameSmall::clear_has_weekend_tourney_bracket_round() {
  _has_bits_[0] &= ~0x00400000u;
}
void CSourceTVGameSmall::clear_weekend_tourney_bracket_round() {
  weekend_tourney_bracket_round_ = 0u;
  clear_has_weekend_tourney_bracket_round();
}
::google::protobuf::uint32 CSourceTVGameSmall::weekend_tourney_bracket_round() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
  return weekend_tourney_bracket_round_;
}
void CSourceTVGameSmall::set_weekend_tourney_bracket_round(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_bracket_round();
  weekend_tourney_bracket_round_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CSourceTVGameSmall.weekend_tourney_bracket_round)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCFindTopSourceTVGames::kSearchKeyFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kStartGameFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kGameListIndexFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLobbyIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}
CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobby_ids_(from.lobby_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&game_list_index_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(game_list_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}

void CMsgClientToGCFindTopSourceTVGames::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, reinterpret_cast<char*>(&game_list_index_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(game_list_index_));
}

CMsgClientToGCFindTopSourceTVGames::~CMsgClientToGCFindTopSourceTVGames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  SharedDtor();
}

void CMsgClientToGCFindTopSourceTVGames::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCFindTopSourceTVGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopSourceTVGames::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCFindTopSourceTVGames& CMsgClientToGCFindTopSourceTVGames::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCFindTopSourceTVGames* CMsgClientToGCFindTopSourceTVGames::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCFindTopSourceTVGames* n = new CMsgClientToGCFindTopSourceTVGames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCFindTopSourceTVGames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  lobby_ids_.Clear();
  if (has_search_key()) {
    GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*search_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&game_list_index_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(game_list_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCFindTopSourceTVGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_list_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_game_list_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 lobby_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_lobby_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_lobby_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return false;
#undef DO_
}

void CMsgClientToGCFindTopSourceTVGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_list_index(), output);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0, n = this->lobby_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->lobby_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}

::google::protobuf::uint8* CMsgClientToGCFindTopSourceTVGames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_list_index(), target);
  }

  // repeated uint64 lobby_ids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->lobby_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return target;
}

size_t CMsgClientToGCFindTopSourceTVGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 lobby_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->lobby_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lobby_ids_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 game_list_index = 5;
    if (has_game_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopSourceTVGames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCFindTopSourceTVGames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCFindTopSourceTVGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCFindTopSourceTVGames)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobby_ids_.MergeFrom(from.lobby_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_list_index_ = from.game_list_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopSourceTVGames::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopSourceTVGames::Swap(CMsgClientToGCFindTopSourceTVGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCFindTopSourceTVGames::InternalSwap(CMsgClientToGCFindTopSourceTVGames* other) {
  lobby_ids_.InternalSwap(&other->lobby_ids_);
  search_key_.Swap(&other->search_key_);
  std::swap(league_id_, other->league_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(start_game_, other->start_game_);
  std::swap(game_list_index_, other->game_list_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCFindTopSourceTVGames::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCFindTopSourceTVGames

// optional string search_key = 1;
bool CMsgClientToGCFindTopSourceTVGames::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCFindTopSourceTVGames::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgClientToGCFindTopSourceTVGames::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.GetNoArena();
}
void CMsgClientToGCFindTopSourceTVGames::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#if LANG_CXX11
void CMsgClientToGCFindTopSourceTVGames::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
#endif
void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
void CMsgClientToGCFindTopSourceTVGames::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}
::std::string* CMsgClientToGCFindTopSourceTVGames::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCFindTopSourceTVGames::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCFindTopSourceTVGames::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key)
}

// optional uint32 league_id = 2;
bool CMsgClientToGCFindTopSourceTVGames::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCFindTopSourceTVGames::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
  return league_id_;
}
void CMsgClientToGCFindTopSourceTVGames::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.league_id)
}

// optional uint32 hero_id = 3;
bool CMsgClientToGCFindTopSourceTVGames::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientToGCFindTopSourceTVGames::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
  return hero_id_;
}
void CMsgClientToGCFindTopSourceTVGames::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.hero_id)
}

// optional uint32 start_game = 4;
bool CMsgClientToGCFindTopSourceTVGames::has_start_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientToGCFindTopSourceTVGames::set_has_start_game() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
  return start_game_;
}
void CMsgClientToGCFindTopSourceTVGames::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.start_game)
}

// optional uint32 game_list_index = 5;
bool CMsgClientToGCFindTopSourceTVGames::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientToGCFindTopSourceTVGames::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientToGCFindTopSourceTVGames::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
::google::protobuf::uint32 CMsgClientToGCFindTopSourceTVGames::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
  return game_list_index_;
}
void CMsgClientToGCFindTopSourceTVGames::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.game_list_index)
}

// repeated uint64 lobby_ids = 6;
int CMsgClientToGCFindTopSourceTVGames::lobby_ids_size() const {
  return lobby_ids_.size();
}
void CMsgClientToGCFindTopSourceTVGames::clear_lobby_ids() {
  lobby_ids_.Clear();
}
::google::protobuf::uint64 CMsgClientToGCFindTopSourceTVGames::lobby_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_.Get(index);
}
void CMsgClientToGCFindTopSourceTVGames::set_lobby_ids(int index, ::google::protobuf::uint64 value) {
  lobby_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
void CMsgClientToGCFindTopSourceTVGames::add_lobby_ids(::google::protobuf::uint64 value) {
  lobby_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCFindTopSourceTVGames::lobby_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return lobby_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCFindTopSourceTVGames::mutable_lobby_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCFindTopSourceTVGames.lobby_ids)
  return &lobby_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSearchKeyFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kNumGamesFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListIndexFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSpecificGamesFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kBotGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      game_list_(from.game_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  if (from.has_bot_game()) {
    bot_game_ = new ::proto::dota::CSourceTVGameSmall(*from.bot_game_);
  } else {
    bot_game_ = NULL;
  }
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&specific_games_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(specific_games_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bot_game_, 0, reinterpret_cast<char*>(&specific_games_) -
    reinterpret_cast<char*>(&bot_game_) + sizeof(specific_games_));
}

CMsgGCToClientFindTopSourceTVGamesResponse::~CMsgGCToClientFindTopSourceTVGamesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete bot_game_;
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopSourceTVGamesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientFindTopSourceTVGamesResponse& CMsgGCToClientFindTopSourceTVGamesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientFindTopSourceTVGamesResponse* CMsgGCToClientFindTopSourceTVGamesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientFindTopSourceTVGamesResponse* n = new CMsgGCToClientFindTopSourceTVGamesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  game_list_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_search_key()) {
      GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_bot_game()) {
      GOOGLE_DCHECK(bot_game_ != NULL);
      bot_game_->::proto::dota::CSourceTVGameSmall::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&specific_games_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(specific_games_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_start_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_games = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_num_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_list_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_game_list_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool specific_games = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_specific_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &specific_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bot_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_games(), output);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_list_index(), output);
  }

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  for (unsigned int i = 0, n = this->game_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->game_list(i), output);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->specific_games(), output);
  }

  // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->bot_game_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopSourceTVGamesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_games(), target);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_list_index(), target);
  }

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  for (unsigned int i = 0, n = this->game_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->game_list(i), deterministic, target);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->specific_games(), target);
  }

  // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->bot_game_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return target;
}

size_t CMsgGCToClientFindTopSourceTVGamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  {
    unsigned int count = this->game_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_list(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
    if (has_bot_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bot_game_);
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 num_games = 5;
    if (has_num_games()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_games());
    }

    // optional uint32 game_list_index = 6;
    if (has_game_list_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

    // optional bool specific_games = 8;
    if (has_specific_games()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopSourceTVGamesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientFindTopSourceTVGamesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_list_.MergeFrom(from.game_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bot_game()->::proto::dota::CSourceTVGameSmall::MergeFrom(from.bot_game());
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_games_ = from.num_games_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_list_index_ = from.game_list_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      specific_games_ = from.specific_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientFindTopSourceTVGamesResponse::InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  game_list_.InternalSwap(&other->game_list_);
  search_key_.Swap(&other->search_key_);
  std::swap(bot_game_, other->bot_game_);
  std::swap(league_id_, other->league_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(start_game_, other->start_game_);
  std::swap(num_games_, other->num_games_);
  std::swap(game_list_index_, other->game_list_index_);
  std::swap(specific_games_, other->specific_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientFindTopSourceTVGamesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientFindTopSourceTVGamesResponse

// optional string search_key = 1;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgGCToClientFindTopSourceTVGamesResponse::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.GetNoArena();
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#if LANG_CXX11
void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
#endif
void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}
::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientFindTopSourceTVGamesResponse::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key)
}

// optional uint32 league_id = 2;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
  return league_id_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.league_id)
}

// optional uint32 hero_id = 3;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
  return hero_id_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.hero_id)
}

// optional uint32 start_game = 4;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
  return start_game_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.start_game)
}

// optional uint32 num_games = 5;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_num_games() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_num_games() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_num_games() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_num_games() {
  num_games_ = 0u;
  clear_has_num_games();
}
::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::num_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
  return num_games_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_num_games(::google::protobuf::uint32 value) {
  set_has_num_games();
  num_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.num_games)
}

// optional uint32 game_list_index = 6;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_game_list_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_game_list_index() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_game_list_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list_index() {
  game_list_index_ = 0u;
  clear_has_game_list_index();
}
::google::protobuf::uint32 CMsgGCToClientFindTopSourceTVGamesResponse::game_list_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
  return game_list_index_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_game_list_index(::google::protobuf::uint32 value) {
  set_has_game_list_index();
  game_list_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list_index)
}

// repeated .proto.dota.CSourceTVGameSmall game_list = 7;
int CMsgGCToClientFindTopSourceTVGamesResponse::game_list_size() const {
  return game_list_.size();
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_game_list() {
  game_list_.Clear();
}
const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::game_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Get(index);
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Mutable(index);
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::add_game_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientFindTopSourceTVGamesResponse::mutable_game_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return &game_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientFindTopSourceTVGamesResponse::game_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.game_list)
  return game_list_;
}

// optional bool specific_games = 8;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_specific_games() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_specific_games() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_specific_games() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_specific_games() {
  specific_games_ = false;
  clear_has_specific_games();
}
bool CMsgGCToClientFindTopSourceTVGamesResponse::specific_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
  return specific_games_;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_specific_games(bool value) {
  set_has_specific_games();
  specific_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.specific_games)
}

// optional .proto.dota.CSourceTVGameSmall bot_game = 9;
bool CMsgGCToClientFindTopSourceTVGamesResponse::has_bot_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_has_bot_game() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_has_bot_game() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::clear_bot_game() {
  if (bot_game_ != NULL) bot_game_->::proto::dota::CSourceTVGameSmall::Clear();
  clear_has_bot_game();
}
const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientFindTopSourceTVGamesResponse::bot_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return bot_game_ != NULL ? *bot_game_
                         : *::proto::dota::CSourceTVGameSmall::internal_default_instance();
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::mutable_bot_game() {
  set_has_bot_game();
  if (bot_game_ == NULL) {
    bot_game_ = new ::proto::dota::CSourceTVGameSmall;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  return bot_game_;
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientFindTopSourceTVGamesResponse::release_bot_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
  clear_has_bot_game();
  ::proto::dota::CSourceTVGameSmall* temp = bot_game_;
  bot_game_ = NULL;
  return temp;
}
void CMsgGCToClientFindTopSourceTVGamesResponse::set_allocated_bot_game(::proto::dota::CSourceTVGameSmall* bot_game) {
  delete bot_game_;
  bot_game_ = bot_game;
  if (bot_game) {
    set_has_bot_game();
  } else {
    clear_has_bot_game();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.bot_game)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopWeekendTourneyGames::kLiveGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}
CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      live_games_(from.live_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}

void CMsgGCToClientTopWeekendTourneyGames::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToClientTopWeekendTourneyGames::~CMsgGCToClientTopWeekendTourneyGames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  SharedDtor();
}

void CMsgGCToClientTopWeekendTourneyGames::SharedDtor() {
}

void CMsgGCToClientTopWeekendTourneyGames::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopWeekendTourneyGames::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientTopWeekendTourneyGames& CMsgGCToClientTopWeekendTourneyGames::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientTopWeekendTourneyGames* CMsgGCToClientTopWeekendTourneyGames::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientTopWeekendTourneyGames* n = new CMsgGCToClientTopWeekendTourneyGames;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientTopWeekendTourneyGames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  live_games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientTopWeekendTourneyGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_live_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return false;
#undef DO_
}

void CMsgGCToClientTopWeekendTourneyGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  for (unsigned int i = 0, n = this->live_games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->live_games(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}

::google::protobuf::uint8* CMsgGCToClientTopWeekendTourneyGames::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  for (unsigned int i = 0, n = this->live_games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->live_games(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return target;
}

size_t CMsgGCToClientTopWeekendTourneyGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  {
    unsigned int count = this->live_games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->live_games(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopWeekendTourneyGames* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientTopWeekendTourneyGames>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  live_games_.MergeFrom(from.live_games_);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopWeekendTourneyGames::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopWeekendTourneyGames::Swap(CMsgGCToClientTopWeekendTourneyGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopWeekendTourneyGames::InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other) {
  live_games_.InternalSwap(&other->live_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientTopWeekendTourneyGames::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientTopWeekendTourneyGames

// repeated .proto.dota.CSourceTVGameSmall live_games = 1;
int CMsgGCToClientTopWeekendTourneyGames::live_games_size() const {
  return live_games_.size();
}
void CMsgGCToClientTopWeekendTourneyGames::clear_live_games() {
  live_games_.Clear();
}
const ::proto::dota::CSourceTVGameSmall& CMsgGCToClientTopWeekendTourneyGames::live_games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Get(index);
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::mutable_live_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Mutable(index);
}
::proto::dota::CSourceTVGameSmall* CMsgGCToClientTopWeekendTourneyGames::add_live_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >*
CMsgGCToClientTopWeekendTourneyGames::mutable_live_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return &live_games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSourceTVGameSmall >&
CMsgGCToClientTopWeekendTourneyGames::live_games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopWeekendTourneyGames.live_games)
  return live_games_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCTopMatchesRequest::kHeroIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kPlayerAccountIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopMatchesRequest)
}
CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopMatchesRequest)
}

void CMsgClientToGCTopMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hero_id_, 0, reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&hero_id_) + sizeof(team_id_));
}

CMsgClientToGCTopMatchesRequest::~CMsgClientToGCTopMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopMatchesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCTopMatchesRequest& CMsgClientToGCTopMatchesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCTopMatchesRequest* CMsgClientToGCTopMatchesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCTopMatchesRequest* n = new CMsgClientToGCTopMatchesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCTopMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&hero_id_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&hero_id_) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCTopMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopMatchesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 player_account_id = 2;
    if (has_player_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopMatchesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCTopMatchesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopMatchesRequest::Swap(CMsgClientToGCTopMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopMatchesRequest::InternalSwap(CMsgClientToGCTopMatchesRequest* other) {
  std::swap(hero_id_, other->hero_id_);
  std::swap(player_account_id_, other->player_account_id_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCTopMatchesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCTopMatchesRequest

// optional uint32 hero_id = 1;
bool CMsgClientToGCTopMatchesRequest::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCTopMatchesRequest::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCTopMatchesRequest::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCTopMatchesRequest::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
  return hero_id_;
}
void CMsgClientToGCTopMatchesRequest::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.hero_id)
}

// optional uint32 player_account_id = 2;
bool CMsgClientToGCTopMatchesRequest::has_player_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCTopMatchesRequest::set_has_player_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCTopMatchesRequest::clear_has_player_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCTopMatchesRequest::clear_player_account_id() {
  player_account_id_ = 0u;
  clear_has_player_account_id();
}
::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::player_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
  return player_account_id_;
}
void CMsgClientToGCTopMatchesRequest::set_player_account_id(::google::protobuf::uint32 value) {
  set_has_player_account_id();
  player_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.player_account_id)
}

// optional uint32 team_id = 3;
bool CMsgClientToGCTopMatchesRequest::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientToGCTopMatchesRequest::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientToGCTopMatchesRequest::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientToGCTopMatchesRequest::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgClientToGCTopMatchesRequest::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
  return team_id_;
}
void CMsgClientToGCTopMatchesRequest::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCTopMatchesRequest.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}
CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientToGCTopLeagueMatchesRequest::~CMsgClientToGCTopLeagueMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopLeagueMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopLeagueMatchesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCTopLeagueMatchesRequest& CMsgClientToGCTopLeagueMatchesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCTopLeagueMatchesRequest* CMsgClientToGCTopLeagueMatchesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCTopLeagueMatchesRequest* n = new CMsgClientToGCTopLeagueMatchesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCTopLeagueMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCTopLeagueMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopLeagueMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopLeagueMatchesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopLeagueMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopLeagueMatchesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCTopLeagueMatchesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopLeagueMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopLeagueMatchesRequest::Swap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopLeagueMatchesRequest::InternalSwap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCTopLeagueMatchesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCTopLeagueMatchesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}
CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}

void CMsgClientToGCTopFriendMatchesRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientToGCTopFriendMatchesRequest::~CMsgClientToGCTopFriendMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopFriendMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopFriendMatchesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCTopFriendMatchesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCTopFriendMatchesRequest& CMsgClientToGCTopFriendMatchesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCTopFriendMatchesRequest* CMsgClientToGCTopFriendMatchesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCTopFriendMatchesRequest* n = new CMsgClientToGCTopFriendMatchesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCTopFriendMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCTopFriendMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return false;
#undef DO_
}

void CMsgClientToGCTopFriendMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopFriendMatchesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopFriendMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopFriendMatchesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCTopFriendMatchesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopFriendMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopFriendMatchesRequest::Swap(CMsgClientToGCTopFriendMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopFriendMatchesRequest::InternalSwap(CMsgClientToGCTopFriendMatchesRequest* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCTopFriendMatchesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCTopFriendMatchesRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCMatchesMinimalRequest::kMatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}
CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}

void CMsgClientToGCMatchesMinimalRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClientToGCMatchesMinimalRequest::~CMsgClientToGCMatchesMinimalRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalRequest::SharedDtor() {
}

void CMsgClientToGCMatchesMinimalRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCMatchesMinimalRequest& CMsgClientToGCMatchesMinimalRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCMatchesMinimalRequest* CMsgClientToGCMatchesMinimalRequest::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCMatchesMinimalRequest* n = new CMsgClientToGCMatchesMinimalRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCMatchesMinimalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  match_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCMatchesMinimalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 match_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return false;
#undef DO_
}

void CMsgClientToGCMatchesMinimalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->match_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->match_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return target;
}

size_t CMsgClientToGCMatchesMinimalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint64 match_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCMatchesMinimalRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCMatchesMinimalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCMatchesMinimalRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalRequest::Swap(CMsgClientToGCMatchesMinimalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCMatchesMinimalRequest::InternalSwap(CMsgClientToGCMatchesMinimalRequest* other) {
  match_ids_.InternalSwap(&other->match_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCMatchesMinimalRequest

// repeated uint64 match_ids = 1;
int CMsgClientToGCMatchesMinimalRequest::match_ids_size() const {
  return match_ids_.size();
}
void CMsgClientToGCMatchesMinimalRequest::clear_match_ids() {
  match_ids_.Clear();
}
::google::protobuf::uint64 CMsgClientToGCMatchesMinimalRequest::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_.Get(index);
}
void CMsgClientToGCMatchesMinimalRequest::set_match_ids(int index, ::google::protobuf::uint64 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
void CMsgClientToGCMatchesMinimalRequest::add_match_ids(::google::protobuf::uint64 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgClientToGCMatchesMinimalRequest::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgClientToGCMatchesMinimalRequest::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalRequest.match_ids)
  return &match_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCMatchesMinimalResponse::kMatchesFieldNumber;
const int CMsgClientToGCMatchesMinimalResponse::kLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_match_ = from.last_match_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}

void CMsgClientToGCMatchesMinimalResponse::SharedCtor() {
  _cached_size_ = 0;
  last_match_ = false;
}

CMsgClientToGCMatchesMinimalResponse::~CMsgClientToGCMatchesMinimalResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalResponse::SharedDtor() {
}

void CMsgClientToGCMatchesMinimalResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCMatchesMinimalResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCMatchesMinimalResponse& CMsgClientToGCMatchesMinimalResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCMatchesMinimalResponse* CMsgClientToGCMatchesMinimalResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCMatchesMinimalResponse* n = new CMsgClientToGCMatchesMinimalResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCMatchesMinimalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  matches_.Clear();
  last_match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCMatchesMinimalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool last_match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_last_match();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return false;
#undef DO_
}

void CMsgClientToGCMatchesMinimalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matches(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return target;
}

size_t CMsgClientToGCMatchesMinimalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  // optional bool last_match = 2;
  if (has_last_match()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCMatchesMinimalResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCMatchesMinimalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCMatchesMinimalResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  if (from.has_last_match()) {
    set_last_match(from.last_match());
  }
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalResponse::Swap(CMsgClientToGCMatchesMinimalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCMatchesMinimalResponse::InternalSwap(CMsgClientToGCMatchesMinimalResponse* other) {
  matches_.InternalSwap(&other->matches_);
  std::swap(last_match_, other->last_match_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCMatchesMinimalResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
int CMsgClientToGCMatchesMinimalResponse::matches_size() const {
  return matches_.size();
}
void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  matches_.Clear();
}
const ::proto::dota::CMsgDOTAMatchMinimal& CMsgClientToGCMatchesMinimalResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Get(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Mutable(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgClientToGCMatchesMinimalResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgClientToGCMatchesMinimalResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgClientToGCMatchesMinimalResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgClientToGCMatchesMinimalResponse.matches)
  return matches_;
}

// optional bool last_match = 2;
bool CMsgClientToGCMatchesMinimalResponse::has_last_match() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCMatchesMinimalResponse::set_has_last_match() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCMatchesMinimalResponse::clear_has_last_match() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCMatchesMinimalResponse::clear_last_match() {
  last_match_ = false;
  clear_has_last_match();
}
bool CMsgClientToGCMatchesMinimalResponse::last_match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
  return last_match_;
}
void CMsgClientToGCMatchesMinimalResponse::set_last_match(bool value) {
  set_has_last_match();
  last_match_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCMatchesMinimalResponse.last_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToClientTopLeagueMatchesResponse::~CMsgGCToClientTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedDtor() {
}

void CMsgGCToClientTopLeagueMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopLeagueMatchesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientTopLeagueMatchesResponse& CMsgGCToClientTopLeagueMatchesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientTopLeagueMatchesResponse* CMsgGCToClientTopLeagueMatchesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientTopLeagueMatchesResponse* n = new CMsgGCToClientTopLeagueMatchesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->matches(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopLeagueMatchesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->matches(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopLeagueMatchesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientTopLeagueMatchesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopLeagueMatchesResponse::Swap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  matches_.InternalSwap(&other->matches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientTopLeagueMatchesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientTopLeagueMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
int CMsgGCToClientTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopLeagueMatchesResponse.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopFriendMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}

void CMsgGCToClientTopFriendMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGCToClientTopFriendMatchesResponse::~CMsgGCToClientTopFriendMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopFriendMatchesResponse::SharedDtor() {
}

void CMsgGCToClientTopFriendMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientTopFriendMatchesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientTopFriendMatchesResponse& CMsgGCToClientTopFriendMatchesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientTopFriendMatchesResponse* CMsgGCToClientTopFriendMatchesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientTopFriendMatchesResponse* n = new CMsgGCToClientTopFriendMatchesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientTopFriendMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientTopFriendMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientTopFriendMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->matches(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopFriendMatchesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->matches(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopFriendMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopFriendMatchesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientTopFriendMatchesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopFriendMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopFriendMatchesResponse::Swap(CMsgGCToClientTopFriendMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopFriendMatchesResponse::InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other) {
  matches_.InternalSwap(&other->matches_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientTopFriendMatchesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientTopFriendMatchesResponse

// repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
int CMsgGCToClientTopFriendMatchesResponse::matches_size() const {
  return matches_.size();
}
void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  matches_.Clear();
}
const ::proto::dota::CMsgDOTAMatchMinimal& CMsgGCToClientTopFriendMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Get(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Mutable(index);
}
::proto::dota::CMsgDOTAMatchMinimal* CMsgGCToClientTopFriendMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >*
CMsgGCToClientTopFriendMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal >&
CMsgGCToClientTopFriendMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientTopFriendMatchesResponse.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCFindTopMatches::kStartGameFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendListFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCFindTopMatches)
}
CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    reinterpret_cast<char*>(&league_list_) -
    reinterpret_cast<char*>(&start_game_) + sizeof(league_list_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCFindTopMatches)
}

void CMsgClientToGCFindTopMatches::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_game_, 0, reinterpret_cast<char*>(&league_list_) -
    reinterpret_cast<char*>(&start_game_) + sizeof(league_list_));
}

CMsgClientToGCFindTopMatches::~CMsgClientToGCFindTopMatches() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCFindTopMatches)
  SharedDtor();
}

void CMsgClientToGCFindTopMatches::SharedDtor() {
}

void CMsgClientToGCFindTopMatches::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCFindTopMatches::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCFindTopMatches& CMsgClientToGCFindTopMatches::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCFindTopMatches* CMsgClientToGCFindTopMatches::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCFindTopMatches* n = new CMsgClientToGCFindTopMatches;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCFindTopMatches::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCFindTopMatches)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&start_game_, 0, reinterpret_cast<char*>(&league_list_) -
      reinterpret_cast<char*>(&start_game_) + sizeof(league_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCFindTopMatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCFindTopMatches)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friend_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_friend_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friend_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_friend_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool league_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_league_list();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &league_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCFindTopMatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCFindTopMatches)
  return false;
#undef DO_
}

void CMsgClientToGCFindTopMatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCFindTopMatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 friend_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friend_id(), output);
  }

  // optional bool friend_list = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friend_list(), output);
  }

  // optional bool league_list = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->league_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCFindTopMatches)
}

::google::protobuf::uint8* CMsgClientToGCFindTopMatches::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCFindTopMatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 friend_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friend_id(), target);
  }

  // optional bool friend_list = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friend_list(), target);
  }

  // optional bool league_list = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->league_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCFindTopMatches)
  return target;
}

size_t CMsgClientToGCFindTopMatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCFindTopMatches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 start_game = 1;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 friend_id = 4;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional bool friend_list = 5;
    if (has_friend_list()) {
      total_size += 1 + 1;
    }

    // optional bool league_list = 6;
    if (has_league_list()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCFindTopMatches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopMatches* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCFindTopMatches>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCFindTopMatches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCFindTopMatches)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopMatches::MergeFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      friend_id_ = from.friend_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      friend_list_ = from.friend_list_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_list_ = from.league_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopMatches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopMatches::CopyFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopMatches::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopMatches::Swap(CMsgClientToGCFindTopMatches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCFindTopMatches::InternalSwap(CMsgClientToGCFindTopMatches* other) {
  std::swap(start_game_, other->start_game_);
  std::swap(league_id_, other->league_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(friend_id_, other->friend_id_);
  std::swap(friend_list_, other->friend_list_);
  std::swap(league_list_, other->league_list_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCFindTopMatches::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCFindTopMatches

// optional uint32 start_game = 1;
bool CMsgClientToGCFindTopMatches::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCFindTopMatches::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCFindTopMatches::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
::google::protobuf::uint32 CMsgClientToGCFindTopMatches::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.start_game)
  return start_game_;
}
void CMsgClientToGCFindTopMatches::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.start_game)
}

// optional uint32 league_id = 2;
bool CMsgClientToGCFindTopMatches::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCFindTopMatches::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCFindTopMatches::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgClientToGCFindTopMatches::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_id)
  return league_id_;
}
void CMsgClientToGCFindTopMatches::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_id)
}

// optional uint32 hero_id = 3;
bool CMsgClientToGCFindTopMatches::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgClientToGCFindTopMatches::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgClientToGCFindTopMatches::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgClientToGCFindTopMatches::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
  return hero_id_;
}
void CMsgClientToGCFindTopMatches::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.hero_id)
}

// optional uint32 friend_id = 4;
bool CMsgClientToGCFindTopMatches::has_friend_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_friend_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgClientToGCFindTopMatches::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgClientToGCFindTopMatches::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
::google::protobuf::uint32 CMsgClientToGCFindTopMatches::friend_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
  return friend_id_;
}
void CMsgClientToGCFindTopMatches::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_id)
}

// optional bool friend_list = 5;
bool CMsgClientToGCFindTopMatches::has_friend_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_friend_list() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgClientToGCFindTopMatches::clear_has_friend_list() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgClientToGCFindTopMatches::clear_friend_list() {
  friend_list_ = false;
  clear_has_friend_list();
}
bool CMsgClientToGCFindTopMatches::friend_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
  return friend_list_;
}
void CMsgClientToGCFindTopMatches::set_friend_list(bool value) {
  set_has_friend_list();
  friend_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.friend_list)
}

// optional bool league_list = 6;
bool CMsgClientToGCFindTopMatches::has_league_list() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgClientToGCFindTopMatches::set_has_league_list() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgClientToGCFindTopMatches::clear_has_league_list() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgClientToGCFindTopMatches::clear_league_list() {
  league_list_ = false;
  clear_has_league_list();
}
bool CMsgClientToGCFindTopMatches::league_list() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCFindTopMatches.league_list)
  return league_list_;
}
void CMsgClientToGCFindTopMatches::set_league_list(bool value) {
  set_has_league_list();
  league_list_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCFindTopMatches.league_list)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientFindTopLeagueMatchesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchIdsFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}
CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      match_ids_(from.match_ids_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&start_game_) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&start_game_, 0, reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&start_game_) + sizeof(hero_id_));
}

CMsgGCToClientFindTopLeagueMatchesResponse::~CMsgGCToClientFindTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedDtor() {
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientFindTopLeagueMatchesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientFindTopLeagueMatchesResponse& CMsgGCToClientFindTopLeagueMatchesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientFindTopLeagueMatchesResponse* CMsgGCToClientFindTopLeagueMatchesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientFindTopLeagueMatchesResponse* n = new CMsgGCToClientFindTopLeagueMatchesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  match_ids_.Clear();
  matches_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&start_game_, 0, reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&start_game_) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_start_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 match_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch matches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return false;
#undef DO_
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 match_ids = 4;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->match_ids(i), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->matches(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopLeagueMatchesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 match_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->match_ids_, target);

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  for (unsigned int i = 0, n = this->matches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->matches(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientFindTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 match_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->match_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  {
    unsigned int count = this->matches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matches(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 start_game = 1;
    if (has_start_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopLeagueMatchesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientFindTopLeagueMatchesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  matches_.MergeFrom(from.matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientFindTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  match_ids_.InternalSwap(&other->match_ids_);
  matches_.InternalSwap(&other->matches_);
  std::swap(start_game_, other->start_game_);
  std::swap(league_id_, other->league_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientFindTopLeagueMatchesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientFindTopLeagueMatchesResponse

// optional uint32 start_game = 1;
bool CMsgGCToClientFindTopLeagueMatchesResponse::has_start_game() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_start_game() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_start_game() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_start_game() {
  start_game_ = 0u;
  clear_has_start_game();
}
::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::start_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
  return start_game_;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_start_game(::google::protobuf::uint32 value) {
  set_has_start_game();
  start_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.start_game)
}

// optional uint32 league_id = 2;
bool CMsgGCToClientFindTopLeagueMatchesResponse::has_league_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_league_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
  return league_id_;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.league_id)
}

// optional uint32 hero_id = 3;
bool CMsgGCToClientFindTopLeagueMatchesResponse::has_hero_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_has_hero_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
  return hero_id_;
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.hero_id)
}

// repeated uint32 match_ids = 4;
int CMsgGCToClientFindTopLeagueMatchesResponse::match_ids_size() const {
  return match_ids_.size();
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_match_ids() {
  match_ids_.Clear();
}
::google::protobuf::uint32 CMsgGCToClientFindTopLeagueMatchesResponse::match_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_.Get(index);
}
void CMsgGCToClientFindTopLeagueMatchesResponse::set_match_ids(int index, ::google::protobuf::uint32 value) {
  match_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
void CMsgGCToClientFindTopLeagueMatchesResponse::add_match_ids(::google::protobuf::uint32 value) {
  match_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGCToClientFindTopLeagueMatchesResponse::match_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return match_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_match_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.match_ids)
  return &match_ids_;
}

// repeated .proto.dota.CMsgDOTAMatch matches = 5;
int CMsgGCToClientFindTopLeagueMatchesResponse::matches_size() const {
  return matches_.size();
}
void CMsgGCToClientFindTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
const ::proto::dota::CMsgDOTAMatch& CMsgGCToClientFindTopLeagueMatchesResponse::matches(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Get(index);
}
::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Mutable(index);
}
::proto::dota::CMsgDOTAMatch* CMsgGCToClientFindTopLeagueMatchesResponse::add_matches() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >*
CMsgGCToClientFindTopLeagueMatchesResponse::mutable_matches() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return &matches_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatch >&
CMsgGCToClientFindTopLeagueMatchesResponse::matches() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse.matches)
  return matches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectateFriendGame::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectateFriendGame::CMsgSpectateFriendGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectateFriendGame)
}
CMsgSpectateFriendGame::CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectateFriendGame)
}

void CMsgSpectateFriendGame::SharedCtor() {
  _cached_size_ = 0;
  steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgSpectateFriendGame::~CMsgSpectateFriendGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectateFriendGame)
  SharedDtor();
}

void CMsgSpectateFriendGame::SharedDtor() {
}

void CMsgSpectateFriendGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectateFriendGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectateFriendGame& CMsgSpectateFriendGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectateFriendGame* CMsgSpectateFriendGame::New(::google::protobuf::Arena* arena) const {
  CMsgSpectateFriendGame* n = new CMsgSpectateFriendGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectateFriendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectateFriendGame)
  steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectateFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectateFriendGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectateFriendGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectateFriendGame)
  return false;
#undef DO_
}

void CMsgSpectateFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectateFriendGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectateFriendGame)
}

::google::protobuf::uint8* CMsgSpectateFriendGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectateFriendGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectateFriendGame)
  return target;
}

size_t CMsgSpectateFriendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectateFriendGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 steam_id = 1;
  if (has_steam_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectateFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectateFriendGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectateFriendGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectateFriendGame)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGame::MergeFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgSpectateFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGame::CopyFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGame::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGame::Swap(CMsgSpectateFriendGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectateFriendGame::InternalSwap(CMsgSpectateFriendGame* other) {
  std::swap(steam_id_, other->steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectateFriendGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectateFriendGame

// optional fixed64 steam_id = 1;
bool CMsgSpectateFriendGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpectateFriendGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpectateFriendGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpectateFriendGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgSpectateFriendGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGame.steam_id)
  return steam_id_;
}
void CMsgSpectateFriendGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGame.steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectateFriendGameResponse::kServerSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectateFriendGameResponse)
}
CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_steamid_ = from.server_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectateFriendGameResponse)
}

void CMsgSpectateFriendGameResponse::SharedCtor() {
  _cached_size_ = 0;
  server_steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgSpectateFriendGameResponse::~CMsgSpectateFriendGameResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectateFriendGameResponse)
  SharedDtor();
}

void CMsgSpectateFriendGameResponse::SharedDtor() {
}

void CMsgSpectateFriendGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectateFriendGameResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectateFriendGameResponse& CMsgSpectateFriendGameResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectateFriendGameResponse* CMsgSpectateFriendGameResponse::New(::google::protobuf::Arena* arena) const {
  CMsgSpectateFriendGameResponse* n = new CMsgSpectateFriendGameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectateFriendGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectateFriendGameResponse)
  server_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectateFriendGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectateFriendGameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectateFriendGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectateFriendGameResponse)
  return false;
#undef DO_
}

void CMsgSpectateFriendGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectateFriendGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectateFriendGameResponse)
}

::google::protobuf::uint8* CMsgSpectateFriendGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectateFriendGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectateFriendGameResponse)
  return target;
}

size_t CMsgSpectateFriendGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectateFriendGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 server_steamid = 4;
  if (has_server_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectateFriendGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectateFriendGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectateFriendGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectateFriendGameResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGameResponse::MergeFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_steamid()) {
    set_server_steamid(from.server_steamid());
  }
}

void CMsgSpectateFriendGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGameResponse::CopyFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGameResponse::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGameResponse::Swap(CMsgSpectateFriendGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectateFriendGameResponse::InternalSwap(CMsgSpectateFriendGameResponse* other) {
  std::swap(server_steamid_, other->server_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectateFriendGameResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectateFriendGameResponse

// optional fixed64 server_steamid = 4;
bool CMsgSpectateFriendGameResponse::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpectateFriendGameResponse::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpectateFriendGameResponse::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpectateFriendGameResponse::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
::google::protobuf::uint64 CMsgSpectateFriendGameResponse::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
  return server_steamid_;
}
void CMsgSpectateFriendGameResponse::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectateFriendGameResponse.server_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal_Player::kAccountIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kHeroIdFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kKillsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kDeathsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kAssistsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kItemsFieldNumber;
const int CMsgDOTAMatchMinimal_Player::kPlayerSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal.Player)
}
CMsgDOTAMatchMinimal_Player::CMsgDOTAMatchMinimal_Player(const CMsgDOTAMatchMinimal_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      items_(from.items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal.Player)
}

void CMsgDOTAMatchMinimal_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
}

CMsgDOTAMatchMinimal_Player::~CMsgDOTAMatchMinimal_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal.Player)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Player::SharedDtor() {
}

void CMsgDOTAMatchMinimal_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Player::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal_Player::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal_Player::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatchMinimal_Player* n = new CMsgDOTAMatchMinimal_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatchMinimal_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  items_.Clear();
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&player_slot_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatchMinimal_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hero_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 items = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48u, input, this->mutable_items())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_items())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal.Player)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // repeated uint32 items = 6;
  for (int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->items(i), output);
  }

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->player_slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal.Player)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // repeated uint32 items = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(6, this->items_, target);

  // optional uint32 player_slot = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->player_slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal.Player)
  return target;
}

size_t CMsgDOTAMatchMinimal_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 items = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->items_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->items_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 player_slot = 7;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatchMinimal_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Player::MergeFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000008u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000010u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000020u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Player::CopyFrom(const CMsgDOTAMatchMinimal_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Player::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Player::Swap(CMsgDOTAMatchMinimal_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal_Player::InternalSwap(CMsgDOTAMatchMinimal_Player* other) {
  items_.InternalSwap(&other->items_);
  std::swap(account_id_, other->account_id_);
  std::swap(hero_id_, other->hero_id_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Player::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatchMinimal_Player

// optional uint32 account_id = 1;
bool CMsgDOTAMatchMinimal_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatchMinimal_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
  return account_id_;
}
void CMsgDOTAMatchMinimal_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.account_id)
}

// optional uint32 hero_id = 2;
bool CMsgDOTAMatchMinimal_Player::has_hero_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_hero_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatchMinimal_Player::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::hero_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
  return hero_id_;
}
void CMsgDOTAMatchMinimal_Player::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.hero_id)
}

// optional uint32 kills = 3;
bool CMsgDOTAMatchMinimal_Player::has_kills() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_kills() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_kills() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatchMinimal_Player::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
  return kills_;
}
void CMsgDOTAMatchMinimal_Player::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.kills)
}

// optional uint32 deaths = 4;
bool CMsgDOTAMatchMinimal_Player::has_deaths() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_deaths() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAMatchMinimal_Player::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
  return deaths_;
}
void CMsgDOTAMatchMinimal_Player::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.deaths)
}

// optional uint32 assists = 5;
bool CMsgDOTAMatchMinimal_Player::has_assists() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_assists() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_assists() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAMatchMinimal_Player::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
  return assists_;
}
void CMsgDOTAMatchMinimal_Player::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.assists)
}

// repeated uint32 items = 6;
int CMsgDOTAMatchMinimal_Player::items_size() const {
  return items_.size();
}
void CMsgDOTAMatchMinimal_Player::clear_items() {
  items_.Clear();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_.Get(index);
}
void CMsgDOTAMatchMinimal_Player::set_items(int index, ::google::protobuf::uint32 value) {
  items_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
void CMsgDOTAMatchMinimal_Player::add_items(::google::protobuf::uint32 value) {
  items_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.Player.items)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAMatchMinimal_Player::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return items_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAMatchMinimal_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.Player.items)
  return &items_;
}

// optional uint32 player_slot = 7;
bool CMsgDOTAMatchMinimal_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAMatchMinimal_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAMatchMinimal_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAMatchMinimal_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
  return player_slot_;
}
void CMsgDOTAMatchMinimal_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Player.player_slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal_Tourney::kLeagueIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesTypeFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kSeriesGameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyTournamentIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySeasonTrophyIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneyDivisionFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kWeekendTourneySkillLevelFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kRadiantTeamLogoFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamIdFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamNameFieldNumber;
const int CMsgDOTAMatchMinimal_Tourney::kDireTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}
CMsgDOTAMatchMinimal_Tourney::CMsgDOTAMatchMinimal_Tourney(const CMsgDOTAMatchMinimal_Tourney& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_team_name()) {
    radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
  }
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_team_name()) {
    dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(weekend_tourney_skill_level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}

void CMsgDOTAMatchMinimal_Tourney::SharedCtor() {
  _cached_size_ = 0;
  radiant_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
    reinterpret_cast<char*>(&league_id_) + sizeof(weekend_tourney_skill_level_));
}

CMsgDOTAMatchMinimal_Tourney::~CMsgDOTAMatchMinimal_Tourney() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  SharedDtor();
}

void CMsgDOTAMatchMinimal_Tourney::SharedDtor() {
  radiant_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAMatchMinimal_Tourney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal_Tourney::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal_Tourney::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal_Tourney::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatchMinimal_Tourney* n = new CMsgDOTAMatchMinimal_Tourney;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatchMinimal_Tourney::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_radiant_team_name()) {
      GOOGLE_DCHECK(!radiant_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*radiant_team_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_dire_team_name()) {
      GOOGLE_DCHECK(!dire_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dire_team_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&league_id_, 0, reinterpret_cast<char*>(&dire_team_logo_) -
      reinterpret_cast<char*>(&league_id_) + sizeof(dire_team_logo_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&series_game_, 0, reinterpret_cast<char*>(&weekend_tourney_skill_level_) -
      reinterpret_cast<char*>(&series_game_) + sizeof(weekend_tourney_skill_level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatchMinimal_Tourney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_radiant_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_team_name().data(), this->radiant_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 radiant_team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_radiant_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &radiant_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dire_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_team_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_team_name().data(), this->dire_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 dire_team_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_dire_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &dire_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_series_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_weekend_tourney_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_season_trophy_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_weekend_tourney_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_weekend_tourney_division();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_weekend_tourney_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal_Tourney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 radiant_team_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->radiant_team_id(), output);
  }

  // optional string radiant_team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->radiant_team_name(), output);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->radiant_team_logo(), output);
  }

  // optional uint32 dire_team_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dire_team_id(), output);
  }

  // optional string dire_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->dire_team_name(), output);
  }

  // optional fixed64 dire_team_logo = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->dire_team_logo(), output);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 series_game = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->series_game(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weekend_tourney_season_trophy_id(), output);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->weekend_tourney_skill_level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal.Tourney)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal_Tourney::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 radiant_team_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->radiant_team_id(), target);
  }

  // optional string radiant_team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_team_name().data(), this->radiant_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->radiant_team_name(), target);
  }

  // optional fixed64 radiant_team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->radiant_team_logo(), target);
  }

  // optional uint32 dire_team_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dire_team_id(), target);
  }

  // optional string dire_team_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_team_name().data(), this->dire_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->dire_team_name(), target);
  }

  // optional fixed64 dire_team_logo = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->dire_team_logo(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 series_game = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->series_game(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_season_trophy_id = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weekend_tourney_season_trophy_id(), target);
  }

  // optional uint32 weekend_tourney_division = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->weekend_tourney_skill_level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  return target;
}

size_t CMsgDOTAMatchMinimal_Tourney::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string radiant_team_name = 3;
    if (has_radiant_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_team_name());
    }

    // optional string dire_team_name = 6;
    if (has_dire_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_team_name());
    }

    // optional uint32 league_id = 1;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 radiant_team_id = 2;
    if (has_radiant_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional fixed64 radiant_team_logo = 4;
    if (has_radiant_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 dire_team_id = 5;
    if (has_dire_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional fixed64 dire_team_logo = 7;
    if (has_dire_team_logo()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional uint32 series_game = 9;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

    // optional uint32 weekend_tourney_tournament_id = 10;
    if (has_weekend_tourney_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

    // optional uint32 weekend_tourney_season_trophy_id = 11;
    if (has_weekend_tourney_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_season_trophy_id());
    }

    // optional uint32 weekend_tourney_division = 12;
    if (has_weekend_tourney_division()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 13;
    if (has_weekend_tourney_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal_Tourney* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatchMinimal_Tourney>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal.Tourney)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal.Tourney)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal_Tourney::MergeFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_radiant_team_name();
      radiant_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dire_team_name();
      dire_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_team_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      radiant_team_logo_ = from.radiant_team_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      dire_team_id_ = from.dire_team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      dire_team_logo_ = from.dire_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      series_game_ = from.series_game_;
    }
    if (cached_has_bits & 0x00000200u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      weekend_tourney_season_trophy_id_ = from.weekend_tourney_season_trophy_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x00001000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal_Tourney::CopyFrom(const CMsgDOTAMatchMinimal_Tourney& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal.Tourney)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal_Tourney::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal_Tourney::Swap(CMsgDOTAMatchMinimal_Tourney* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal_Tourney::InternalSwap(CMsgDOTAMatchMinimal_Tourney* other) {
  radiant_team_name_.Swap(&other->radiant_team_name_);
  dire_team_name_.Swap(&other->dire_team_name_);
  std::swap(league_id_, other->league_id_);
  std::swap(radiant_team_id_, other->radiant_team_id_);
  std::swap(radiant_team_logo_, other->radiant_team_logo_);
  std::swap(dire_team_id_, other->dire_team_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(dire_team_logo_, other->dire_team_logo_);
  std::swap(series_game_, other->series_game_);
  std::swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
  std::swap(weekend_tourney_season_trophy_id_, other->weekend_tourney_season_trophy_id_);
  std::swap(weekend_tourney_division_, other->weekend_tourney_division_);
  std::swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal_Tourney::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatchMinimal_Tourney

// optional uint32 league_id = 1;
bool CMsgDOTAMatchMinimal_Tourney::has_league_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_league_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
  return league_id_;
}
void CMsgDOTAMatchMinimal_Tourney::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.league_id)
}

// optional uint32 series_type = 8;
bool CMsgDOTAMatchMinimal_Tourney::has_series_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_series_type() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
  return series_type_;
}
void CMsgDOTAMatchMinimal_Tourney::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_type)
}

// optional uint32 series_game = 9;
bool CMsgDOTAMatchMinimal_Tourney::has_series_game() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_series_game() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
  return series_game_;
}
void CMsgDOTAMatchMinimal_Tourney::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.series_game)
}

// optional uint32 weekend_tourney_tournament_id = 10;
bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_tournament_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_tournament_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_tournament_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_tournament_id() {
  weekend_tourney_tournament_id_ = 0u;
  clear_has_weekend_tourney_tournament_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
  return weekend_tourney_tournament_id_;
}
void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_tournament_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_tournament_id();
  weekend_tourney_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_tournament_id)
}

// optional uint32 weekend_tourney_season_trophy_id = 11;
bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_season_trophy_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_season_trophy_id() {
  weekend_tourney_season_trophy_id_ = 0u;
  clear_has_weekend_tourney_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
  return weekend_tourney_season_trophy_id_;
}
void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_season_trophy_id();
  weekend_tourney_season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_season_trophy_id)
}

// optional uint32 weekend_tourney_division = 12;
bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_division() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_division() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_division() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_division() {
  weekend_tourney_division_ = 0u;
  clear_has_weekend_tourney_division();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_division() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
  return weekend_tourney_division_;
}
void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_division(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_division();
  weekend_tourney_division_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_division)
}

// optional uint32 weekend_tourney_skill_level = 13;
bool CMsgDOTAMatchMinimal_Tourney::has_weekend_tourney_skill_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_weekend_tourney_skill_level() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_weekend_tourney_skill_level() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_weekend_tourney_skill_level() {
  weekend_tourney_skill_level_ = 0u;
  clear_has_weekend_tourney_skill_level();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::weekend_tourney_skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
  return weekend_tourney_skill_level_;
}
void CMsgDOTAMatchMinimal_Tourney::set_weekend_tourney_skill_level(::google::protobuf::uint32 value) {
  set_has_weekend_tourney_skill_level();
  weekend_tourney_skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.weekend_tourney_skill_level)
}

// optional uint32 radiant_team_id = 2;
bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_id() {
  radiant_team_id_ = 0u;
  clear_has_radiant_team_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::radiant_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
  return radiant_team_id_;
}
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_id(::google::protobuf::uint32 value) {
  set_has_radiant_team_id();
  radiant_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_id)
}

// optional string radiant_team_name = 3;
bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_name() {
  radiant_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radiant_team_name();
}
const ::std::string& CMsgDOTAMatchMinimal_Tourney::radiant_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.GetNoArena();
}
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const ::std::string& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#if LANG_CXX11
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(::std::string&& value) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
#endif
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_name(const char* value, size_t size) {
  set_has_radiant_team_name();
  radiant_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}
::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_radiant_team_name() {
  set_has_radiant_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  return radiant_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatchMinimal_Tourney::release_radiant_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
  clear_has_radiant_team_name();
  return radiant_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatchMinimal_Tourney::set_allocated_radiant_team_name(::std::string* radiant_team_name) {
  if (radiant_team_name != NULL) {
    set_has_radiant_team_name();
  } else {
    clear_has_radiant_team_name();
  }
  radiant_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radiant_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_name)
}

// optional fixed64 radiant_team_logo = 4;
bool CMsgDOTAMatchMinimal_Tourney::has_radiant_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_radiant_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_radiant_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_radiant_team_logo() {
  radiant_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_radiant_team_logo();
}
::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::radiant_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
  return radiant_team_logo_;
}
void CMsgDOTAMatchMinimal_Tourney::set_radiant_team_logo(::google::protobuf::uint64 value) {
  set_has_radiant_team_logo();
  radiant_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.radiant_team_logo)
}

// optional uint32 dire_team_id = 5;
bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_id() {
  dire_team_id_ = 0u;
  clear_has_dire_team_id();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal_Tourney::dire_team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
  return dire_team_id_;
}
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_id(::google::protobuf::uint32 value) {
  set_has_dire_team_id();
  dire_team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_id)
}

// optional string dire_team_name = 6;
bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_name() {
  dire_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dire_team_name();
}
const ::std::string& CMsgDOTAMatchMinimal_Tourney::dire_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.GetNoArena();
}
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const ::std::string& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#if LANG_CXX11
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(::std::string&& value) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
#endif
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_name(const char* value, size_t size) {
  set_has_dire_team_name();
  dire_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}
::std::string* CMsgDOTAMatchMinimal_Tourney::mutable_dire_team_name() {
  set_has_dire_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  return dire_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAMatchMinimal_Tourney::release_dire_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
  clear_has_dire_team_name();
  return dire_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAMatchMinimal_Tourney::set_allocated_dire_team_name(::std::string* dire_team_name) {
  if (dire_team_name != NULL) {
    set_has_dire_team_name();
  } else {
    clear_has_dire_team_name();
  }
  dire_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dire_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_name)
}

// optional fixed64 dire_team_logo = 7;
bool CMsgDOTAMatchMinimal_Tourney::has_dire_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAMatchMinimal_Tourney::set_has_dire_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_has_dire_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAMatchMinimal_Tourney::clear_dire_team_logo() {
  dire_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_dire_team_logo();
}
::google::protobuf::uint64 CMsgDOTAMatchMinimal_Tourney::dire_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
  return dire_team_logo_;
}
void CMsgDOTAMatchMinimal_Tourney::set_dire_team_logo(::google::protobuf::uint64 value) {
  set_has_dire_team_logo();
  dire_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.Tourney.dire_team_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAMatchMinimal::kMatchIdFieldNumber;
const int CMsgDOTAMatchMinimal::kStartTimeFieldNumber;
const int CMsgDOTAMatchMinimal::kDurationFieldNumber;
const int CMsgDOTAMatchMinimal::kGameModeFieldNumber;
const int CMsgDOTAMatchMinimal::kPlayersFieldNumber;
const int CMsgDOTAMatchMinimal::kTourneyFieldNumber;
const int CMsgDOTAMatchMinimal::kMatchOutcomeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAMatchMinimal)
}
CMsgDOTAMatchMinimal::CMsgDOTAMatchMinimal(const CMsgDOTAMatchMinimal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tourney()) {
    tourney_ = new ::proto::dota::CMsgDOTAMatchMinimal_Tourney(*from.tourney_);
  } else {
    tourney_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&match_outcome_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(match_outcome_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAMatchMinimal)
}

void CMsgDOTAMatchMinimal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tourney_, 0, reinterpret_cast<char*>(&match_outcome_) -
    reinterpret_cast<char*>(&tourney_) + sizeof(match_outcome_));
}

CMsgDOTAMatchMinimal::~CMsgDOTAMatchMinimal() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAMatchMinimal)
  SharedDtor();
}

void CMsgDOTAMatchMinimal::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tourney_;
  }
}

void CMsgDOTAMatchMinimal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAMatchMinimal::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAMatchMinimal& CMsgDOTAMatchMinimal::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAMatchMinimal* CMsgDOTAMatchMinimal::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAMatchMinimal* n = new CMsgDOTAMatchMinimal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAMatchMinimal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAMatchMinimal)
  players_.Clear();
  if (has_tourney()) {
    GOOGLE_DCHECK(tourney_ != NULL);
    tourney_->::proto::dota::CMsgDOTAMatchMinimal_Tourney::Clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&match_outcome_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(match_outcome_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAMatchMinimal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAMatchMinimal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 duration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_duration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tourney()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EMatchOutcome_IsValid(value)) {
            set_match_outcome(static_cast< ::proto::dota::EMatchOutcome >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAMatchMinimal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAMatchMinimal)
  return false;
#undef DO_
}

void CMsgDOTAMatchMinimal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAMatchMinimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional fixed32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->start_time(), output);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->duration(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->players(i), output);
  }

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->tourney_, output);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->match_outcome(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAMatchMinimal)
}

::google::protobuf::uint8* CMsgDOTAMatchMinimal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAMatchMinimal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional fixed32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->start_time(), target);
  }

  // optional uint32 duration = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->duration(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->players(i), deterministic, target);
  }

  // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->tourney_, deterministic, target);
  }

  // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->match_outcome(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAMatchMinimal)
  return target;
}

size_t CMsgDOTAMatchMinimal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAMatchMinimal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
    if (has_tourney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tourney_);
    }

    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
    if (has_match_outcome()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_outcome());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAMatchMinimal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAMatchMinimal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAMatchMinimal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAMatchMinimal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAMatchMinimal)
    MergeFrom(*source);
  }
}

void CMsgDOTAMatchMinimal::MergeFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAMatchMinimal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tourney()->::proto::dota::CMsgDOTAMatchMinimal_Tourney::MergeFrom(from.tourney());
    }
    if (cached_has_bits & 0x00000002u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_outcome_ = from.match_outcome_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAMatchMinimal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAMatchMinimal::CopyFrom(const CMsgDOTAMatchMinimal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAMatchMinimal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAMatchMinimal::IsInitialized() const {
  return true;
}

void CMsgDOTAMatchMinimal::Swap(CMsgDOTAMatchMinimal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAMatchMinimal::InternalSwap(CMsgDOTAMatchMinimal* other) {
  players_.InternalSwap(&other->players_);
  std::swap(tourney_, other->tourney_);
  std::swap(match_id_, other->match_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(duration_, other->duration_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(match_outcome_, other->match_outcome_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAMatchMinimal::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAMatchMinimal

// optional uint64 match_id = 1;
bool CMsgDOTAMatchMinimal::has_match_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_match_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAMatchMinimal::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAMatchMinimal::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTAMatchMinimal::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_id)
  return match_id_;
}
void CMsgDOTAMatchMinimal::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_id)
}

// optional fixed32 start_time = 2;
bool CMsgDOTAMatchMinimal::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAMatchMinimal::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAMatchMinimal::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.start_time)
  return start_time_;
}
void CMsgDOTAMatchMinimal::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.start_time)
}

// optional uint32 duration = 3;
bool CMsgDOTAMatchMinimal::has_duration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_duration() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAMatchMinimal::clear_has_duration() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAMatchMinimal::clear_duration() {
  duration_ = 0u;
  clear_has_duration();
}
::google::protobuf::uint32 CMsgDOTAMatchMinimal::duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.duration)
  return duration_;
}
void CMsgDOTAMatchMinimal::set_duration(::google::protobuf::uint32 value) {
  set_has_duration();
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.duration)
}

// optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
bool CMsgDOTAMatchMinimal::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAMatchMinimal::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAMatchMinimal::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::proto::dota::DOTA_GameMode CMsgDOTAMatchMinimal::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
void CMsgDOTAMatchMinimal::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.game_mode)
}

// repeated .proto.dota.CMsgDOTAMatchMinimal.Player players = 6;
int CMsgDOTAMatchMinimal::players_size() const {
  return players_.size();
}
void CMsgDOTAMatchMinimal::clear_players() {
  players_.Clear();
}
const ::proto::dota::CMsgDOTAMatchMinimal_Player& CMsgDOTAMatchMinimal::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Get(index);
}
::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Mutable(index);
}
::proto::dota::CMsgDOTAMatchMinimal_Player* CMsgDOTAMatchMinimal::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >*
CMsgDOTAMatchMinimal::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAMatchMinimal_Player >&
CMsgDOTAMatchMinimal::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAMatchMinimal.players)
  return players_;
}

// optional .proto.dota.CMsgDOTAMatchMinimal.Tourney tourney = 7;
bool CMsgDOTAMatchMinimal::has_tourney() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_tourney() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAMatchMinimal::clear_has_tourney() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAMatchMinimal::clear_tourney() {
  if (tourney_ != NULL) tourney_->::proto::dota::CMsgDOTAMatchMinimal_Tourney::Clear();
  clear_has_tourney();
}
const ::proto::dota::CMsgDOTAMatchMinimal_Tourney& CMsgDOTAMatchMinimal::tourney() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return tourney_ != NULL ? *tourney_
                         : *::proto::dota::CMsgDOTAMatchMinimal_Tourney::internal_default_instance();
}
::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::mutable_tourney() {
  set_has_tourney();
  if (tourney_ == NULL) {
    tourney_ = new ::proto::dota::CMsgDOTAMatchMinimal_Tourney;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAMatchMinimal.tourney)
  return tourney_;
}
::proto::dota::CMsgDOTAMatchMinimal_Tourney* CMsgDOTAMatchMinimal::release_tourney() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAMatchMinimal.tourney)
  clear_has_tourney();
  ::proto::dota::CMsgDOTAMatchMinimal_Tourney* temp = tourney_;
  tourney_ = NULL;
  return temp;
}
void CMsgDOTAMatchMinimal::set_allocated_tourney(::proto::dota::CMsgDOTAMatchMinimal_Tourney* tourney) {
  delete tourney_;
  tourney_ = tourney;
  if (tourney) {
    set_has_tourney();
  } else {
    clear_has_tourney();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAMatchMinimal.tourney)
}

// optional .proto.dota.EMatchOutcome match_outcome = 8 [default = k_EMatchOutcome_Unknown];
bool CMsgDOTAMatchMinimal::has_match_outcome() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAMatchMinimal::set_has_match_outcome() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAMatchMinimal::clear_has_match_outcome() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAMatchMinimal::clear_match_outcome() {
  match_outcome_ = 0;
  clear_has_match_outcome();
}
::proto::dota::EMatchOutcome CMsgDOTAMatchMinimal::match_outcome() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
  return static_cast< ::proto::dota::EMatchOutcome >(match_outcome_);
}
void CMsgDOTAMatchMinimal::set_match_outcome(::proto::dota::EMatchOutcome value) {
  assert(::proto::dota::EMatchOutcome_IsValid(value));
  set_has_match_outcome();
  match_outcome_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAMatchMinimal.match_outcome)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAReplayDownloadInfo_Highlight::kTimestampFieldNumber;
const int CDOTAReplayDownloadInfo_Highlight::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}
CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}

void CDOTAReplayDownloadInfo_Highlight::SharedCtor() {
  _cached_size_ = 0;
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

CDOTAReplayDownloadInfo_Highlight::~CDOTAReplayDownloadInfo_Highlight() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  SharedDtor();
}

void CDOTAReplayDownloadInfo_Highlight::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAReplayDownloadInfo_Highlight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo_Highlight::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAReplayDownloadInfo_Highlight& CDOTAReplayDownloadInfo_Highlight::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAReplayDownloadInfo_Highlight* CDOTAReplayDownloadInfo_Highlight::New(::google::protobuf::Arena* arena) const {
  CDOTAReplayDownloadInfo_Highlight* n = new CDOTAReplayDownloadInfo_Highlight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAReplayDownloadInfo_Highlight::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  if (has_description()) {
    GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*description_.UnsafeRawStringPointer())->clear();
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAReplayDownloadInfo_Highlight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return false;
#undef DO_
}

void CDOTAReplayDownloadInfo_Highlight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo_Highlight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return target;
}

size_t CDOTAReplayDownloadInfo_Highlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo_Highlight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAReplayDownloadInfo_Highlight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAReplayDownloadInfo.Highlight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAReplayDownloadInfo.Highlight)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo_Highlight::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo_Highlight::Swap(CDOTAReplayDownloadInfo_Highlight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAReplayDownloadInfo_Highlight::InternalSwap(CDOTAReplayDownloadInfo_Highlight* other) {
  description_.Swap(&other->description_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo_Highlight::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAReplayDownloadInfo_Highlight

// optional uint32 timestamp = 1;
bool CDOTAReplayDownloadInfo_Highlight::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAReplayDownloadInfo_Highlight::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAReplayDownloadInfo_Highlight::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAReplayDownloadInfo_Highlight::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CDOTAReplayDownloadInfo_Highlight::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
  return timestamp_;
}
void CDOTAReplayDownloadInfo_Highlight::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.timestamp)
}

// optional string description = 2;
bool CDOTAReplayDownloadInfo_Highlight::has_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAReplayDownloadInfo_Highlight::set_has_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAReplayDownloadInfo_Highlight::clear_has_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAReplayDownloadInfo_Highlight::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CDOTAReplayDownloadInfo_Highlight::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.GetNoArena();
}
void CDOTAReplayDownloadInfo_Highlight::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#if LANG_CXX11
void CDOTAReplayDownloadInfo_Highlight::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
#endif
void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
void CDOTAReplayDownloadInfo_Highlight::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}
::std::string* CDOTAReplayDownloadInfo_Highlight::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAReplayDownloadInfo_Highlight::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAReplayDownloadInfo_Highlight::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.Highlight.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAReplayDownloadInfo::kMatchFieldNumber;
const int CDOTAReplayDownloadInfo::kTitleFieldNumber;
const int CDOTAReplayDownloadInfo::kDescriptionFieldNumber;
const int CDOTAReplayDownloadInfo::kSizeFieldNumber;
const int CDOTAReplayDownloadInfo::kTagsFieldNumber;
const int CDOTAReplayDownloadInfo::kExistsOnDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAReplayDownloadInfo)
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTAMatchMinimal(*from.match_);
  } else {
    match_ = NULL;
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&exists_on_disk_) -
    reinterpret_cast<char*>(&size_) + sizeof(exists_on_disk_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAReplayDownloadInfo)
}

void CDOTAReplayDownloadInfo::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_, 0, reinterpret_cast<char*>(&exists_on_disk_) -
    reinterpret_cast<char*>(&match_) + sizeof(exists_on_disk_));
}

CDOTAReplayDownloadInfo::~CDOTAReplayDownloadInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAReplayDownloadInfo)
  SharedDtor();
}

void CDOTAReplayDownloadInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete match_;
  }
}

void CDOTAReplayDownloadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAReplayDownloadInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAReplayDownloadInfo& CDOTAReplayDownloadInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAReplayDownloadInfo* CDOTAReplayDownloadInfo::New(::google::protobuf::Arena* arena) const {
  CDOTAReplayDownloadInfo* n = new CDOTAReplayDownloadInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAReplayDownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAReplayDownloadInfo)
  tags_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_description()) {
      GOOGLE_DCHECK(!description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*description_.UnsafeRawStringPointer())->clear();
    }
    if (has_match()) {
      GOOGLE_DCHECK(match_ != NULL);
      match_->::proto::dota::CMsgDOTAMatchMinimal::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&size_, 0, reinterpret_cast<char*>(&exists_on_disk_) -
      reinterpret_cast<char*>(&size_) + sizeof(exists_on_disk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAReplayDownloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAReplayDownloadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exists_on_disk = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_exists_on_disk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_on_disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAReplayDownloadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAReplayDownloadInfo)
  return false;
#undef DO_
}

void CDOTAReplayDownloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAReplayDownloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exists_on_disk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAReplayDownloadInfo)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAReplayDownloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->tags(i), target);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exists_on_disk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAReplayDownloadInfo)
  return target;
}

size_t CDOTAReplayDownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAReplayDownloadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated string tags = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->match_);
    }

    // optional uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bool exists_on_disk = 6;
    if (has_exists_on_disk()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAReplayDownloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAReplayDownloadInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAReplayDownloadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAReplayDownloadInfo)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo::MergeFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_description();
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_match()->::proto::dota::CMsgDOTAMatchMinimal::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      exists_on_disk_ = from.exists_on_disk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo::CopyFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo::Swap(CDOTAReplayDownloadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAReplayDownloadInfo::InternalSwap(CDOTAReplayDownloadInfo* other) {
  tags_.InternalSwap(&other->tags_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  std::swap(match_, other->match_);
  std::swap(size_, other->size_);
  std::swap(exists_on_disk_, other->exists_on_disk_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAReplayDownloadInfo

// optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
bool CDOTAReplayDownloadInfo::has_match() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAReplayDownloadInfo::set_has_match() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAReplayDownloadInfo::clear_has_match() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAReplayDownloadInfo::clear_match() {
  if (match_ != NULL) match_->::proto::dota::CMsgDOTAMatchMinimal::Clear();
  clear_has_match();
}
const ::proto::dota::CMsgDOTAMatchMinimal& CDOTAReplayDownloadInfo::match() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.match)
  return match_ != NULL ? *match_
                         : *::proto::dota::CMsgDOTAMatchMinimal::internal_default_instance();
}
::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::mutable_match() {
  set_has_match();
  if (match_ == NULL) {
    match_ = new ::proto::dota::CMsgDOTAMatchMinimal;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.match)
  return match_;
}
::proto::dota::CMsgDOTAMatchMinimal* CDOTAReplayDownloadInfo::release_match() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.match)
  clear_has_match();
  ::proto::dota::CMsgDOTAMatchMinimal* temp = match_;
  match_ = NULL;
  return temp;
}
void CDOTAReplayDownloadInfo::set_allocated_match(::proto::dota::CMsgDOTAMatchMinimal* match) {
  delete match_;
  match_ = match;
  if (match) {
    set_has_match();
  } else {
    clear_has_match();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.match)
}

// optional string title = 2;
bool CDOTAReplayDownloadInfo::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAReplayDownloadInfo::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAReplayDownloadInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAReplayDownloadInfo::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CDOTAReplayDownloadInfo::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.GetNoArena();
}
void CDOTAReplayDownloadInfo::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.title)
}
#if LANG_CXX11
void CDOTAReplayDownloadInfo::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.title)
}
#endif
void CDOTAReplayDownloadInfo::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.title)
}
void CDOTAReplayDownloadInfo::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.title)
}
::std::string* CDOTAReplayDownloadInfo::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAReplayDownloadInfo::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAReplayDownloadInfo::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.title)
}

// optional string description = 3;
bool CDOTAReplayDownloadInfo::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAReplayDownloadInfo::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAReplayDownloadInfo::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAReplayDownloadInfo::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_description();
}
const ::std::string& CDOTAReplayDownloadInfo::description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.GetNoArena();
}
void CDOTAReplayDownloadInfo::set_description(const ::std::string& value) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.description)
}
#if LANG_CXX11
void CDOTAReplayDownloadInfo::set_description(::std::string&& value) {
  set_has_description();
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAReplayDownloadInfo.description)
}
#endif
void CDOTAReplayDownloadInfo::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.description)
}
void CDOTAReplayDownloadInfo::set_description(const char* value, size_t size) {
  set_has_description();
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.description)
}
::std::string* CDOTAReplayDownloadInfo::mutable_description() {
  set_has_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAReplayDownloadInfo::release_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAReplayDownloadInfo.description)
  clear_has_description();
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAReplayDownloadInfo::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    set_has_description();
  } else {
    clear_has_description();
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAReplayDownloadInfo.description)
}

// optional uint32 size = 4;
bool CDOTAReplayDownloadInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAReplayDownloadInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAReplayDownloadInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAReplayDownloadInfo::clear_size() {
  size_ = 0u;
  clear_has_size();
}
::google::protobuf::uint32 CDOTAReplayDownloadInfo::size() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.size)
  return size_;
}
void CDOTAReplayDownloadInfo::set_size(::google::protobuf::uint32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.size)
}

// repeated string tags = 5;
int CDOTAReplayDownloadInfo::tags_size() const {
  return tags_.size();
}
void CDOTAReplayDownloadInfo::clear_tags() {
  tags_.Clear();
}
const ::std::string& CDOTAReplayDownloadInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Get(index);
}
::std::string* CDOTAReplayDownloadInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Mutable(index);
}
void CDOTAReplayDownloadInfo::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CDOTAReplayDownloadInfo::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
void CDOTAReplayDownloadInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
void CDOTAReplayDownloadInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
::std::string* CDOTAReplayDownloadInfo::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_.Add();
}
void CDOTAReplayDownloadInfo::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#if LANG_CXX11
void CDOTAReplayDownloadInfo::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAReplayDownloadInfo.tags)
}
#endif
void CDOTAReplayDownloadInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CDOTAReplayDownloadInfo.tags)
}
void CDOTAReplayDownloadInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CDOTAReplayDownloadInfo.tags)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDOTAReplayDownloadInfo::tags() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return tags_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CDOTAReplayDownloadInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAReplayDownloadInfo.tags)
  return &tags_;
}

// optional bool exists_on_disk = 6;
bool CDOTAReplayDownloadInfo::has_exists_on_disk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAReplayDownloadInfo::set_has_exists_on_disk() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAReplayDownloadInfo::clear_has_exists_on_disk() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAReplayDownloadInfo::clear_exists_on_disk() {
  exists_on_disk_ = false;
  clear_has_exists_on_disk();
}
bool CDOTAReplayDownloadInfo::exists_on_disk() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
  return exists_on_disk_;
}
void CDOTAReplayDownloadInfo::set_exists_on_disk(bool value) {
  set_has_exists_on_disk();
  exists_on_disk_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAReplayDownloadInfo.exists_on_disk)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWatchGame::kServerSteamidFieldNumber;
const int CMsgWatchGame::kClientVersionFieldNumber;
const int CMsgWatchGame::kWatchServerSteamidFieldNumber;
const int CMsgWatchGame::kLobbyIdFieldNumber;
const int CMsgWatchGame::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWatchGame::CMsgWatchGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWatchGame)
}
CMsgWatchGame::CMsgWatchGame(const CMsgWatchGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steamid_, &from.server_steamid_,
    reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&server_steamid_) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWatchGame)
}

void CMsgWatchGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_steamid_, 0, reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&server_steamid_) + sizeof(client_version_));
}

CMsgWatchGame::~CMsgWatchGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWatchGame)
  SharedDtor();
}

void CMsgWatchGame::SharedDtor() {
}

void CMsgWatchGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWatchGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWatchGame& CMsgWatchGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWatchGame* CMsgWatchGame::New(::google::protobuf::Arena* arena) const {
  CMsgWatchGame* n = new CMsgWatchGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWatchGame)
  regions_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&server_steamid_, 0, reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&server_steamid_) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWatchGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_server_steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_watch_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 regions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_regions())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWatchGame)
  return false;
#undef DO_
}

void CMsgWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steamid(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->watch_server_steamid(), output);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // repeated uint32 regions = 5;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWatchGame)
}

::google::protobuf::uint8* CMsgWatchGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steamid(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->watch_server_steamid(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // repeated uint32 regions = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->regions_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWatchGame)
  return target;
}

size_t CMsgWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWatchGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 regions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->regions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->regions_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional fixed64 server_steamid = 1;
    if (has_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 3;
    if (has_watch_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 4;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWatchGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWatchGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWatchGame)
    MergeFrom(*source);
  }
}

void CMsgWatchGame::MergeFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      server_steamid_ = from.server_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGame::CopyFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGame::IsInitialized() const {
  return true;
}

void CMsgWatchGame::Swap(CMsgWatchGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWatchGame::InternalSwap(CMsgWatchGame* other) {
  regions_.InternalSwap(&other->regions_);
  std::swap(server_steamid_, other->server_steamid_);
  std::swap(watch_server_steamid_, other->watch_server_steamid_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWatchGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWatchGame

// optional fixed64 server_steamid = 1;
bool CMsgWatchGame::has_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWatchGame::set_has_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWatchGame::clear_has_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWatchGame::clear_server_steamid() {
  server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steamid();
}
::google::protobuf::uint64 CMsgWatchGame::server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.server_steamid)
  return server_steamid_;
}
void CMsgWatchGame::set_server_steamid(::google::protobuf::uint64 value) {
  set_has_server_steamid();
  server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.server_steamid)
}

// optional uint32 client_version = 2;
bool CMsgWatchGame::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWatchGame::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWatchGame::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWatchGame::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgWatchGame::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.client_version)
  return client_version_;
}
void CMsgWatchGame::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.client_version)
}

// optional fixed64 watch_server_steamid = 3;
bool CMsgWatchGame::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWatchGame::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWatchGame::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWatchGame::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
::google::protobuf::uint64 CMsgWatchGame::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.watch_server_steamid)
  return watch_server_steamid_;
}
void CMsgWatchGame::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.watch_server_steamid)
}

// optional uint64 lobby_id = 4;
bool CMsgWatchGame::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWatchGame::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWatchGame::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWatchGame::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgWatchGame::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.lobby_id)
  return lobby_id_;
}
void CMsgWatchGame::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.lobby_id)
}

// repeated uint32 regions = 5;
int CMsgWatchGame::regions_size() const {
  return regions_.size();
}
void CMsgWatchGame::clear_regions() {
  regions_.Clear();
}
::google::protobuf::uint32 CMsgWatchGame::regions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGame.regions)
  return regions_.Get(index);
}
void CMsgWatchGame::set_regions(int index, ::google::protobuf::uint32 value) {
  regions_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGame.regions)
}
void CMsgWatchGame::add_regions(::google::protobuf::uint32 value) {
  regions_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgWatchGame.regions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgWatchGame::regions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgWatchGame.regions)
  return regions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgWatchGame::mutable_regions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgWatchGame.regions)
  return &regions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCancelWatchGame::CMsgCancelWatchGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCancelWatchGame)
}
CMsgCancelWatchGame::CMsgCancelWatchGame(const CMsgCancelWatchGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCancelWatchGame)
}

void CMsgCancelWatchGame::SharedCtor() {
  _cached_size_ = 0;
}

CMsgCancelWatchGame::~CMsgCancelWatchGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCancelWatchGame)
  SharedDtor();
}

void CMsgCancelWatchGame::SharedDtor() {
}

void CMsgCancelWatchGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCancelWatchGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCancelWatchGame& CMsgCancelWatchGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCancelWatchGame* CMsgCancelWatchGame::New(::google::protobuf::Arena* arena) const {
  CMsgCancelWatchGame* n = new CMsgCancelWatchGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCancelWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCancelWatchGame)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCancelWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCancelWatchGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCancelWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCancelWatchGame)
  return false;
#undef DO_
}

void CMsgCancelWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCancelWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCancelWatchGame)
}

::google::protobuf::uint8* CMsgCancelWatchGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCancelWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCancelWatchGame)
  return target;
}

size_t CMsgCancelWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCancelWatchGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCancelWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCancelWatchGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCancelWatchGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCancelWatchGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCancelWatchGame)
    MergeFrom(*source);
  }
}

void CMsgCancelWatchGame::MergeFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgCancelWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCancelWatchGame::CopyFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCancelWatchGame::IsInitialized() const {
  return true;
}

void CMsgCancelWatchGame::Swap(CMsgCancelWatchGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCancelWatchGame::InternalSwap(CMsgCancelWatchGame* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCancelWatchGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCancelWatchGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWatchGameResponse::kWatchGameResultFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPublicAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPrivateAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPortFieldNumber;
const int CMsgWatchGameResponse::kGameServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchTvUniqueSecretCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWatchGameResponse::CMsgWatchGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWatchGameResponse)
}
CMsgWatchGameResponse::CMsgWatchGameResponse(const CMsgWatchGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&watch_game_result_, &from.watch_game_result_,
    reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&watch_game_result_) + sizeof(watch_tv_unique_secret_code_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWatchGameResponse)
}

void CMsgWatchGameResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&watch_game_result_, 0, reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&watch_game_result_) + sizeof(watch_tv_unique_secret_code_));
}

CMsgWatchGameResponse::~CMsgWatchGameResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWatchGameResponse)
  SharedDtor();
}

void CMsgWatchGameResponse::SharedDtor() {
}

void CMsgWatchGameResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWatchGameResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWatchGameResponse& CMsgWatchGameResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWatchGameResponse* CMsgWatchGameResponse::New(::google::protobuf::Arena* arena) const {
  CMsgWatchGameResponse* n = new CMsgWatchGameResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWatchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWatchGameResponse)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&watch_game_result_, 0, reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
      reinterpret_cast<char*>(&watch_game_result_) + sizeof(watch_tv_unique_secret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWatchGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWatchGameResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(value)) {
            set_watch_game_result(static_cast< ::proto::dota::CMsgWatchGameResponse_WatchGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_public_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_source_tv_public_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_private_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_source_tv_private_addr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_source_tv_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_game_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_server_steamid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_watch_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_watch_tv_unique_secret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_tv_unique_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWatchGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWatchGameResponse)
  return false;
#undef DO_
}

void CMsgWatchGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWatchGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->watch_game_result(), output);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_tv_port(), output);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->watch_server_steamid(), output);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->watch_tv_unique_secret_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWatchGameResponse)
}

::google::protobuf::uint8* CMsgWatchGameResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWatchGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->watch_game_result(), target);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_tv_port(), target);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->watch_server_steamid(), target);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->watch_tv_unique_secret_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWatchGameResponse)
  return target;
}

size_t CMsgWatchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWatchGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
    if (has_watch_game_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_game_result());
    }

    // optional uint32 source_tv_public_addr = 2;
    if (has_source_tv_public_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 3;
    if (has_source_tv_private_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 4;
    if (has_source_tv_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional fixed64 game_server_steamid = 5;
    if (has_game_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 6;
    if (has_watch_server_steamid()) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;
    if (has_watch_tv_unique_secret_code()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWatchGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGameResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWatchGameResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWatchGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWatchGameResponse)
    MergeFrom(*source);
  }
}

void CMsgWatchGameResponse::MergeFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      watch_game_result_ = from.watch_game_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_steamid_ = from.game_server_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      watch_tv_unique_secret_code_ = from.watch_tv_unique_secret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGameResponse::CopyFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGameResponse::IsInitialized() const {
  return true;
}

void CMsgWatchGameResponse::Swap(CMsgWatchGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWatchGameResponse::InternalSwap(CMsgWatchGameResponse* other) {
  std::swap(watch_game_result_, other->watch_game_result_);
  std::swap(source_tv_public_addr_, other->source_tv_public_addr_);
  std::swap(source_tv_private_addr_, other->source_tv_private_addr_);
  std::swap(source_tv_port_, other->source_tv_port_);
  std::swap(game_server_steamid_, other->game_server_steamid_);
  std::swap(watch_server_steamid_, other->watch_server_steamid_);
  std::swap(watch_tv_unique_secret_code_, other->watch_tv_unique_secret_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWatchGameResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWatchGameResponse

// optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
bool CMsgWatchGameResponse::has_watch_game_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWatchGameResponse::set_has_watch_game_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWatchGameResponse::clear_has_watch_game_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWatchGameResponse::clear_watch_game_result() {
  watch_game_result_ = 0;
  clear_has_watch_game_result();
}
::proto::dota::CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::watch_game_result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_game_result)
  return static_cast< ::proto::dota::CMsgWatchGameResponse_WatchGameResult >(watch_game_result_);
}
void CMsgWatchGameResponse::set_watch_game_result(::proto::dota::CMsgWatchGameResponse_WatchGameResult value) {
  assert(::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(value));
  set_has_watch_game_result();
  watch_game_result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_game_result)
}

// optional uint32 source_tv_public_addr = 2;
bool CMsgWatchGameResponse::has_source_tv_public_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWatchGameResponse::set_has_source_tv_public_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWatchGameResponse::clear_has_source_tv_public_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWatchGameResponse::clear_source_tv_public_addr() {
  source_tv_public_addr_ = 0u;
  clear_has_source_tv_public_addr();
}
::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_public_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
  return source_tv_public_addr_;
}
void CMsgWatchGameResponse::set_source_tv_public_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_public_addr();
  source_tv_public_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_public_addr)
}

// optional uint32 source_tv_private_addr = 3;
bool CMsgWatchGameResponse::has_source_tv_private_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWatchGameResponse::set_has_source_tv_private_addr() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWatchGameResponse::clear_has_source_tv_private_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWatchGameResponse::clear_source_tv_private_addr() {
  source_tv_private_addr_ = 0u;
  clear_has_source_tv_private_addr();
}
::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_private_addr() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
  return source_tv_private_addr_;
}
void CMsgWatchGameResponse::set_source_tv_private_addr(::google::protobuf::uint32 value) {
  set_has_source_tv_private_addr();
  source_tv_private_addr_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_private_addr)
}

// optional uint32 source_tv_port = 4;
bool CMsgWatchGameResponse::has_source_tv_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWatchGameResponse::set_has_source_tv_port() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWatchGameResponse::clear_has_source_tv_port() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWatchGameResponse::clear_source_tv_port() {
  source_tv_port_ = 0u;
  clear_has_source_tv_port();
}
::google::protobuf::uint32 CMsgWatchGameResponse::source_tv_port() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.source_tv_port)
  return source_tv_port_;
}
void CMsgWatchGameResponse::set_source_tv_port(::google::protobuf::uint32 value) {
  set_has_source_tv_port();
  source_tv_port_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.source_tv_port)
}

// optional fixed64 game_server_steamid = 5;
bool CMsgWatchGameResponse::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgWatchGameResponse::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgWatchGameResponse::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgWatchGameResponse::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
::google::protobuf::uint64 CMsgWatchGameResponse::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.game_server_steamid)
  return game_server_steamid_;
}
void CMsgWatchGameResponse::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.game_server_steamid)
}

// optional fixed64 watch_server_steamid = 6;
bool CMsgWatchGameResponse::has_watch_server_steamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgWatchGameResponse::set_has_watch_server_steamid() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgWatchGameResponse::clear_has_watch_server_steamid() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgWatchGameResponse::clear_watch_server_steamid() {
  watch_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_server_steamid();
}
::google::protobuf::uint64 CMsgWatchGameResponse::watch_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
  return watch_server_steamid_;
}
void CMsgWatchGameResponse::set_watch_server_steamid(::google::protobuf::uint64 value) {
  set_has_watch_server_steamid();
  watch_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_server_steamid)
}

// optional fixed64 watch_tv_unique_secret_code = 7;
bool CMsgWatchGameResponse::has_watch_tv_unique_secret_code() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgWatchGameResponse::set_has_watch_tv_unique_secret_code() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgWatchGameResponse::clear_has_watch_tv_unique_secret_code() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgWatchGameResponse::clear_watch_tv_unique_secret_code() {
  watch_tv_unique_secret_code_ = GOOGLE_ULONGLONG(0);
  clear_has_watch_tv_unique_secret_code();
}
::google::protobuf::uint64 CMsgWatchGameResponse::watch_tv_unique_secret_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
  return watch_tv_unique_secret_code_;
}
void CMsgWatchGameResponse::set_watch_tv_unique_secret_code(::google::protobuf::uint64 value) {
  set_has_watch_tv_unique_secret_code();
  watch_tv_unique_secret_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWatchGameResponse.watch_tv_unique_secret_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyLeaderWatchGamePrompt::kGameServerSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}
CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_steamid_ = from.game_server_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}

void CMsgPartyLeaderWatchGamePrompt::SharedCtor() {
  _cached_size_ = 0;
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgPartyLeaderWatchGamePrompt::~CMsgPartyLeaderWatchGamePrompt() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  SharedDtor();
}

void CMsgPartyLeaderWatchGamePrompt::SharedDtor() {
}

void CMsgPartyLeaderWatchGamePrompt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyLeaderWatchGamePrompt::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPartyLeaderWatchGamePrompt& CMsgPartyLeaderWatchGamePrompt::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPartyLeaderWatchGamePrompt* CMsgPartyLeaderWatchGamePrompt::New(::google::protobuf::Arena* arena) const {
  CMsgPartyLeaderWatchGamePrompt* n = new CMsgPartyLeaderWatchGamePrompt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPartyLeaderWatchGamePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPartyLeaderWatchGamePrompt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_game_server_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return false;
#undef DO_
}

void CMsgPartyLeaderWatchGamePrompt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}

::google::protobuf::uint8* CMsgPartyLeaderWatchGamePrompt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return target;
}

size_t CMsgPartyLeaderWatchGamePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 game_server_steamid = 5;
  if (has_game_server_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyLeaderWatchGamePrompt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPartyLeaderWatchGamePrompt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyLeaderWatchGamePrompt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyLeaderWatchGamePrompt)
    MergeFrom(*source);
  }
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_server_steamid()) {
    set_game_server_steamid(from.game_server_steamid());
  }
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyLeaderWatchGamePrompt::IsInitialized() const {
  return true;
}

void CMsgPartyLeaderWatchGamePrompt::Swap(CMsgPartyLeaderWatchGamePrompt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyLeaderWatchGamePrompt::InternalSwap(CMsgPartyLeaderWatchGamePrompt* other) {
  std::swap(game_server_steamid_, other->game_server_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPartyLeaderWatchGamePrompt::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPartyLeaderWatchGamePrompt

// optional fixed64 game_server_steamid = 5;
bool CMsgPartyLeaderWatchGamePrompt::has_game_server_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPartyLeaderWatchGamePrompt::set_has_game_server_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPartyLeaderWatchGamePrompt::clear_has_game_server_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPartyLeaderWatchGamePrompt::clear_game_server_steamid() {
  game_server_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_game_server_steamid();
}
::google::protobuf::uint64 CMsgPartyLeaderWatchGamePrompt::game_server_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
  return game_server_steamid_;
}
void CMsgPartyLeaderWatchGamePrompt::set_game_server_steamid(::google::protobuf::uint64 value) {
  set_has_game_server_steamid();
  game_server_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyLeaderWatchGamePrompt.game_server_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcasterInfo::kAccountIdFieldNumber;
const int CDOTABroadcasterInfo::kServerSteamIdFieldNumber;
const int CDOTABroadcasterInfo::kLiveFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameRadiantFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameDireFieldNumber;
const int CDOTABroadcasterInfo::kStageNameFieldNumber;
const int CDOTABroadcasterInfo::kSeriesGameFieldNumber;
const int CDOTABroadcasterInfo::kSeriesTypeFieldNumber;
const int CDOTABroadcasterInfo::kUpcomingBroadcastTimestampFieldNumber;
const int CDOTABroadcasterInfo::kAllowLiveVideoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcasterInfo::CDOTABroadcasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcasterInfo)
}
CDOTABroadcasterInfo::CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_radiant()) {
    team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
  }
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_dire()) {
    team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
  }
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stage_name()) {
    stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    reinterpret_cast<char*>(&upcoming_broadcast_timestamp_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(upcoming_broadcast_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcasterInfo)
}

void CDOTABroadcasterInfo::SharedCtor() {
  _cached_size_ = 0;
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&upcoming_broadcast_timestamp_) -
    reinterpret_cast<char*>(&server_steam_id_) + sizeof(upcoming_broadcast_timestamp_));
}

CDOTABroadcasterInfo::~CDOTABroadcasterInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcasterInfo)
  SharedDtor();
}

void CDOTABroadcasterInfo::SharedDtor() {
  team_name_radiant_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTABroadcasterInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTABroadcasterInfo& CDOTABroadcasterInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTABroadcasterInfo* CDOTABroadcasterInfo::New(::google::protobuf::Arena* arena) const {
  CDOTABroadcasterInfo* n = new CDOTABroadcasterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTABroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcasterInfo)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_team_name_radiant()) {
      GOOGLE_DCHECK(!team_name_radiant_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_radiant_.UnsafeRawStringPointer())->clear();
    }
    if (has_team_name_dire()) {
      GOOGLE_DCHECK(!team_name_dire_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team_name_dire_.UnsafeRawStringPointer())->clear();
    }
    if (has_stage_name()) {
      GOOGLE_DCHECK(!stage_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stage_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&server_steam_id_, 0, reinterpret_cast<char*>(&series_game_) -
      reinterpret_cast<char*>(&server_steam_id_) + sizeof(series_game_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&series_type_, 0, reinterpret_cast<char*>(&upcoming_broadcast_timestamp_) -
      reinterpret_cast<char*>(&series_type_) + sizeof(upcoming_broadcast_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTABroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool live = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_live();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_radiant = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), this->team_name_radiant().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_dire = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), this->team_name_dire().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.team_name_dire");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stage_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage_name().data(), this->stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.stage_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_series_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_upcoming_broadcast_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upcoming_broadcast_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_live_video = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_allow_live_video();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_live_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcasterInfo)
  return false;
#undef DO_
}

void CDOTABroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_steam_id(), output);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->live(), output);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name_dire(), output);
  }

  // optional string stage_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->stage_name(), output);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_game(), output);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_type(), output);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->upcoming_broadcast_timestamp(), output);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_live_video(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcasterInfo)
}

::google::protobuf::uint8* CDOTABroadcasterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_steam_id(), target);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->live(), target);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), this->team_name_radiant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), this->team_name_dire().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name_dire(), target);
  }

  // optional string stage_name = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->stage_name(), target);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_game(), target);
  }

  // optional uint32 series_type = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_type(), target);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->upcoming_broadcast_timestamp(), target);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_live_video(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcasterInfo)
  return target;
}

size_t CDOTABroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name_radiant = 4;
    if (has_team_name_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 5;
    if (has_team_name_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional string stage_name = 6;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional fixed64 server_steam_id = 2;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool live = 3;
    if (has_live()) {
      total_size += 1 + 1;
    }

    // optional bool allow_live_video = 10;
    if (has_allow_live_video()) {
      total_size += 1 + 1;
    }

    // optional uint32 series_game = 7;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 series_type = 8;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 upcoming_broadcast_timestamp = 9;
    if (has_upcoming_broadcast_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upcoming_broadcast_timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTABroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcasterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTABroadcasterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcasterInfo)
    MergeFrom(*source);
  }
}

void CDOTABroadcasterInfo::MergeFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name_radiant();
      team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_team_name_dire();
      team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_stage_name();
      stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      live_ = from.live_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_live_video_ = from.allow_live_video_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      upcoming_broadcast_timestamp_ = from.upcoming_broadcast_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcasterInfo::CopyFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcasterInfo::IsInitialized() const {
  return true;
}

void CDOTABroadcasterInfo::Swap(CDOTABroadcasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcasterInfo::InternalSwap(CDOTABroadcasterInfo* other) {
  team_name_radiant_.Swap(&other->team_name_radiant_);
  team_name_dire_.Swap(&other->team_name_dire_);
  stage_name_.Swap(&other->stage_name_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(account_id_, other->account_id_);
  std::swap(live_, other->live_);
  std::swap(allow_live_video_, other->allow_live_video_);
  std::swap(series_game_, other->series_game_);
  std::swap(series_type_, other->series_type_);
  std::swap(upcoming_broadcast_timestamp_, other->upcoming_broadcast_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTABroadcasterInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fwatch_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTABroadcasterInfo

// optional uint32 account_id = 1;
bool CDOTABroadcasterInfo::has_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTABroadcasterInfo::set_has_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTABroadcasterInfo::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTABroadcasterInfo::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTABroadcasterInfo::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.account_id)
  return account_id_;
}
void CDOTABroadcasterInfo::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.account_id)
}

// optional fixed64 server_steam_id = 2;
bool CDOTABroadcasterInfo::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTABroadcasterInfo::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTABroadcasterInfo::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTABroadcasterInfo::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CDOTABroadcasterInfo::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.server_steam_id)
  return server_steam_id_;
}
void CDOTABroadcasterInfo::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.server_steam_id)
}

// optional bool live = 3;
bool CDOTABroadcasterInfo::has_live() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTABroadcasterInfo::set_has_live() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTABroadcasterInfo::clear_has_live() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTABroadcasterInfo::clear_live() {
  live_ = false;
  clear_has_live();
}
bool CDOTABroadcasterInfo::live() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.live)
  return live_;
}
void CDOTABroadcasterInfo::set_live(bool value) {
  set_has_live();
  live_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.live)
}

// optional string team_name_radiant = 4;
bool CDOTABroadcasterInfo::has_team_name_radiant() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTABroadcasterInfo::set_has_team_name_radiant() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTABroadcasterInfo::clear_has_team_name_radiant() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTABroadcasterInfo::clear_team_name_radiant() {
  team_name_radiant_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_radiant();
}
const ::std::string& CDOTABroadcasterInfo::team_name_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.GetNoArena();
}
void CDOTABroadcasterInfo::set_team_name_radiant(const ::std::string& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#if LANG_CXX11
void CDOTABroadcasterInfo::set_team_name_radiant(::std::string&& value) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
#endif
void CDOTABroadcasterInfo::set_team_name_radiant(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
void CDOTABroadcasterInfo::set_team_name_radiant(const char* value, size_t size) {
  set_has_team_name_radiant();
  team_name_radiant_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}
::std::string* CDOTABroadcasterInfo::mutable_team_name_radiant() {
  set_has_team_name_radiant();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  return team_name_radiant_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcasterInfo::release_team_name_radiant() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
  clear_has_team_name_radiant();
  return team_name_radiant_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcasterInfo::set_allocated_team_name_radiant(::std::string* team_name_radiant) {
  if (team_name_radiant != NULL) {
    set_has_team_name_radiant();
  } else {
    clear_has_team_name_radiant();
  }
  team_name_radiant_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_radiant);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_radiant)
}

// optional string team_name_dire = 5;
bool CDOTABroadcasterInfo::has_team_name_dire() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTABroadcasterInfo::set_has_team_name_dire() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTABroadcasterInfo::clear_has_team_name_dire() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTABroadcasterInfo::clear_team_name_dire() {
  team_name_dire_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name_dire();
}
const ::std::string& CDOTABroadcasterInfo::team_name_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.GetNoArena();
}
void CDOTABroadcasterInfo::set_team_name_dire(const ::std::string& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#if LANG_CXX11
void CDOTABroadcasterInfo::set_team_name_dire(::std::string&& value) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
#endif
void CDOTABroadcasterInfo::set_team_name_dire(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
void CDOTABroadcasterInfo::set_team_name_dire(const char* value, size_t size) {
  set_has_team_name_dire();
  team_name_dire_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}
::std::string* CDOTABroadcasterInfo::mutable_team_name_dire() {
  set_has_team_name_dire();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  return team_name_dire_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcasterInfo::release_team_name_dire() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.team_name_dire)
  clear_has_team_name_dire();
  return team_name_dire_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcasterInfo::set_allocated_team_name_dire(::std::string* team_name_dire) {
  if (team_name_dire != NULL) {
    set_has_team_name_dire();
  } else {
    clear_has_team_name_dire();
  }
  team_name_dire_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name_dire);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.team_name_dire)
}

// optional string stage_name = 6;
bool CDOTABroadcasterInfo::has_stage_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTABroadcasterInfo::set_has_stage_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTABroadcasterInfo::clear_has_stage_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTABroadcasterInfo::clear_stage_name() {
  stage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stage_name();
}
const ::std::string& CDOTABroadcasterInfo::stage_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.stage_name)
  return stage_name_.GetNoArena();
}
void CDOTABroadcasterInfo::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.stage_name)
}
#if LANG_CXX11
void CDOTABroadcasterInfo::set_stage_name(::std::string&& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTABroadcasterInfo.stage_name)
}
#endif
void CDOTABroadcasterInfo::set_stage_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTABroadcasterInfo.stage_name)
}
void CDOTABroadcasterInfo::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTABroadcasterInfo.stage_name)
}
::std::string* CDOTABroadcasterInfo::mutable_stage_name() {
  set_has_stage_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTABroadcasterInfo.stage_name)
  return stage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTABroadcasterInfo::release_stage_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTABroadcasterInfo.stage_name)
  clear_has_stage_name();
  return stage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTABroadcasterInfo::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name != NULL) {
    set_has_stage_name();
  } else {
    clear_has_stage_name();
  }
  stage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stage_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTABroadcasterInfo.stage_name)
}

// optional uint32 series_game = 7;
bool CDOTABroadcasterInfo::has_series_game() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTABroadcasterInfo::set_has_series_game() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTABroadcasterInfo::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTABroadcasterInfo::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
::google::protobuf::uint32 CDOTABroadcasterInfo::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.series_game)
  return series_game_;
}
void CDOTABroadcasterInfo::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.series_game)
}

// optional uint32 series_type = 8;
bool CDOTABroadcasterInfo::has_series_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTABroadcasterInfo::set_has_series_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTABroadcasterInfo::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTABroadcasterInfo::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CDOTABroadcasterInfo::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.series_type)
  return series_type_;
}
void CDOTABroadcasterInfo::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.series_type)
}

// optional uint32 upcoming_broadcast_timestamp = 9;
bool CDOTABroadcasterInfo::has_upcoming_broadcast_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTABroadcasterInfo::set_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTABroadcasterInfo::clear_has_upcoming_broadcast_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTABroadcasterInfo::clear_upcoming_broadcast_timestamp() {
  upcoming_broadcast_timestamp_ = 0u;
  clear_has_upcoming_broadcast_timestamp();
}
::google::protobuf::uint32 CDOTABroadcasterInfo::upcoming_broadcast_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
  return upcoming_broadcast_timestamp_;
}
void CDOTABroadcasterInfo::set_upcoming_broadcast_timestamp(::google::protobuf::uint32 value) {
  set_has_upcoming_broadcast_timestamp();
  upcoming_broadcast_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.upcoming_broadcast_timestamp)
}

// optional bool allow_live_video = 10;
bool CDOTABroadcasterInfo::has_allow_live_video() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTABroadcasterInfo::set_has_allow_live_video() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTABroadcasterInfo::clear_has_allow_live_video() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTABroadcasterInfo::clear_allow_live_video() {
  allow_live_video_ = false;
  clear_has_allow_live_video();
}
bool CDOTABroadcasterInfo::allow_live_video() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTABroadcasterInfo.allow_live_video)
  return allow_live_video_;
}
void CDOTABroadcasterInfo::set_allow_live_video(bool value) {
  set_has_allow_live_video();
  allow_live_video_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTABroadcasterInfo.allow_live_video)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
