// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_match_management.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_match_management.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgStartFindingMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartFindingMatch> {
} _CMsgStartFindingMatch_default_instance_;
class CMsgStartFindingMatchResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStartFindingMatchResult> {
} _CMsgStartFindingMatchResult_default_instance_;
class CMsgStopFindingMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgStopFindingMatch> {
} _CMsgStopFindingMatch_default_instance_;
class CMsgPartyBuilderOptionsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyBuilderOptions> {
} _CMsgPartyBuilderOptions_default_instance_;
class CMsgReadyUpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyUp> {
} _CMsgReadyUp_default_instance_;
class CMsgReadyUpStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgReadyUpStatus> {
} _CMsgReadyUpStatus_default_instance_;
class CMsgAbandonCurrentGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgAbandonCurrentGame> {
} _CMsgAbandonCurrentGame_default_instance_;
class CMsgPracticeLobbySetDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetDetails> {
} _CMsgPracticeLobbySetDetails_default_instance_;
class CMsgPracticeLobbyCreate_SaveGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCreate_SaveGame> {
} _CMsgPracticeLobbyCreate_SaveGame_default_instance_;
class CMsgPracticeLobbyCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCreate> {
} _CMsgPracticeLobbyCreate_default_instance_;
class CMsgPracticeLobbySetTeamSlotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetTeamSlot> {
} _CMsgPracticeLobbySetTeamSlot_default_instance_;
class CMsgPracticeLobbySetCoachDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbySetCoach> {
} _CMsgPracticeLobbySetCoach_default_instance_;
class CMsgPracticeLobbyJoinBroadcastChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoinBroadcastChannel> {
} _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_;
class CMsgPracticeLobbyCloseBroadcastChannelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyCloseBroadcastChannel> {
} _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_;
class CMsgPracticeLobbyToggleBroadcastChannelCameramanStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus> {
} _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_;
class CMsgPracticeLobbyKickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyKick> {
} _CMsgPracticeLobbyKick_default_instance_;
class CMsgPracticeLobbyKickFromTeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyKickFromTeam> {
} _CMsgPracticeLobbyKickFromTeam_default_instance_;
class CMsgPracticeLobbyLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyLeave> {
} _CMsgPracticeLobbyLeave_default_instance_;
class CMsgPracticeLobbyLaunchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyLaunch> {
} _CMsgPracticeLobbyLaunch_default_instance_;
class CMsgApplyTeamToPracticeLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyTeamToPracticeLobby> {
} _CMsgApplyTeamToPracticeLobby_default_instance_;
class CMsgClearPracticeLobbyTeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClearPracticeLobbyTeam> {
} _CMsgClearPracticeLobbyTeam_default_instance_;
class CMsgPracticeLobbyListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyList> {
} _CMsgPracticeLobbyList_default_instance_;
class CMsgPracticeLobbyListResponseEntry_CLobbyMemberDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponseEntry_CLobbyMember> {
} _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_;
class CMsgPracticeLobbyListResponseEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponseEntry> {
} _CMsgPracticeLobbyListResponseEntry_default_instance_;
class CMsgPracticeLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyListResponse> {
} _CMsgPracticeLobbyListResponse_default_instance_;
class CMsgLobbyListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyList> {
} _CMsgLobbyList_default_instance_;
class CMsgLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyListResponse> {
} _CMsgLobbyListResponse_default_instance_;
class CMsgPracticeLobbyJoinDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoin> {
} _CMsgPracticeLobbyJoin_default_instance_;
class CMsgPracticeLobbyJoinResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgPracticeLobbyJoinResponse> {
} _CMsgPracticeLobbyJoinResponse_default_instance_;
class CMsgFriendPracticeLobbyListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFriendPracticeLobbyListRequest> {
} _CMsgFriendPracticeLobbyListRequest_default_instance_;
class CMsgFriendPracticeLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgFriendPracticeLobbyListResponse> {
} _CMsgFriendPracticeLobbyListResponse_default_instance_;
class CMsgGuildmatePracticeLobbyListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGuildmatePracticeLobbyListRequest> {
} _CMsgGuildmatePracticeLobbyListRequest_default_instance_;
class CMsgGuildmatePracticeLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGuildmatePracticeLobbyListResponse> {
} _CMsgGuildmatePracticeLobbyListResponse_default_instance_;
class CMsgJoinableCustomGameModesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesRequest> {
} _CMsgJoinableCustomGameModesRequest_default_instance_;
class CMsgJoinableCustomGameModesResponseEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesResponseEntry> {
} _CMsgJoinableCustomGameModesResponseEntry_default_instance_;
class CMsgJoinableCustomGameModesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomGameModesResponse> {
} _CMsgJoinableCustomGameModesResponse_default_instance_;
class CMsgJoinableCustomLobbiesRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesRequest> {
} _CMsgJoinableCustomLobbiesRequest_default_instance_;
class CMsgJoinableCustomLobbiesResponseEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesResponseEntry> {
} _CMsgJoinableCustomLobbiesResponseEntry_default_instance_;
class CMsgJoinableCustomLobbiesResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgJoinableCustomLobbiesResponse> {
} _CMsgJoinableCustomLobbiesResponse_default_instance_;
class CMsgQuickJoinCustomLobby_LegacyRegionPingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobby_LegacyRegionPing> {
} _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_;
class CMsgQuickJoinCustomLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobby> {
} _CMsgQuickJoinCustomLobby_default_instance_;
class CMsgQuickJoinCustomLobbyResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgQuickJoinCustomLobbyResponse> {
} _CMsgQuickJoinCustomLobbyResponse_default_instance_;
class CMsgBotGameCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgBotGameCreate> {
} _CMsgBotGameCreate_default_instance_;
class CMsgCustomGameCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCustomGameCreate> {
} _CMsgCustomGameCreate_default_instance_;
class CMsgEventGameCreateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgEventGameCreate> {
} _CMsgEventGameCreate_default_instance_;
class CMsgDOTAPartyMemberSetCoachDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAPartyMemberSetCoach> {
} _CMsgDOTAPartyMemberSetCoach_default_instance_;
class CMsgDOTASetGroupLeaderDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASetGroupLeader> {
} _CMsgDOTASetGroupLeader_default_instance_;
class CMsgDOTACancelGroupInvitesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTACancelGroupInvites> {
} _CMsgDOTACancelGroupInvites_default_instance_;
class CMsgDOTASetGroupOpenStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASetGroupOpenStatus> {
} _CMsgDOTASetGroupOpenStatus_default_instance_;
class CMsgDOTAGroupMergeInviteDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeInvite> {
} _CMsgDOTAGroupMergeInvite_default_instance_;
class CMsgDOTAGroupMergeResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeResponse> {
} _CMsgDOTAGroupMergeResponse_default_instance_;
class CMsgDOTAGroupMergeReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAGroupMergeReply> {
} _CMsgDOTAGroupMergeReply_default_instance_;
class CMsgSpectatorLobbyGameDetails_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyGameDetails_Team> {
} _CMsgSpectatorLobbyGameDetails_Team_default_instance_;
class CMsgSpectatorLobbyGameDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyGameDetails> {
} _CMsgSpectatorLobbyGameDetails_default_instance_;
class CMsgSetSpectatorLobbyDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetSpectatorLobbyDetails> {
} _CMsgSetSpectatorLobbyDetails_default_instance_;
class CMsgCreateSpectatorLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgCreateSpectatorLobby> {
} _CMsgCreateSpectatorLobby_default_instance_;
class CMsgSpectatorLobbyListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyList> {
} _CMsgSpectatorLobbyList_default_instance_;
class CMsgSpectatorLobbyListResponse_SpectatorLobbyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyListResponse_SpectatorLobby> {
} _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_;
class CMsgSpectatorLobbyListResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectatorLobbyListResponse> {
} _CMsgSpectatorLobbyListResponse_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRequestSteamDatagramTicket> {
} _CMsgClientToGCRequestSteamDatagramTicket_default_instance_;
class CMsgClientToGCRequestSteamDatagramTicketResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCRequestSteamDatagramTicketResponse> {
} _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_;
class CMsgGCToClientSteamDatagramTicketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientSteamDatagramTicket> {
} _CMsgGCToClientSteamDatagramTicket_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[62];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, matchgroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_modes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, bot_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, matchlanguages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_language_enum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, game_language_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, ping_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, region_select_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, solo_queue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, bot_script_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatch, steam_clan_account_id_),
  0,
  11,
  3,
  12,
  13,
  4,
  14,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, legacy_generic_eresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, error_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, debug_message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStartFindingMatchResult, responsible_party_members_),
  3,
  2,
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFindingMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgStopFindingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, additional_slots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, matchgroups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPartyBuilderOptions, language_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, ready_up_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUp, hardware_specs_),
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, accepted_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgReadyUpStatus, declined_ids_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAbandonCurrentGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgAbandonCurrentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, team_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, cm_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_difficulty_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allow_cheats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, fill_with_bots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, intro_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allow_spectating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, game_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, leagueid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, penalty_level_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, penalty_level_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, load_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, radiant_series_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, dire_series_wins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, allchat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, dota_tv_delay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lan_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_min_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_max_players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, lan_host_ping_to_server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, visibility_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, league_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, custom_game_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, previous_match_override_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, pause_setting_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_difficulty_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, bot_dire_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetDetails, selection_priority_rules_),
  4,
  0,
  ~0u,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  1,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  39,
  22,
  2,
  3,
  24,
  23,
  25,
  26,
  27,
  29,
  28,
  30,
  31,
  32,
  33,
  35,
  36,
  37,
  38,
  34,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate_SaveGame, signature_),
  0,
  3,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, lobby_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCreate, save_game_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetTeamSlot, bot_difficulty_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbySetCoach, team_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, channel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_country_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinBroadcastChannel, preferred_language_code_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyCloseBroadcastChannel, channel_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKick, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyKickFromTeam, account_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyLaunch, client_version_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgApplyTeamToPracticeLobby, team_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearPracticeLobbyTeam, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClearPracticeLobbyTeam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, tournament_games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyList, game_mode_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry_CLobbyMember, player_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, tournament_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, members_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, requires_pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, leader_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, guild_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, guild_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, custom_game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, friend_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, custom_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, max_player_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, lan_host_ping_to_server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponseEntry, league_id_),
  3,
  4,
  5,
  ~0u,
  9,
  6,
  7,
  8,
  0,
  1,
  11,
  10,
  12,
  2,
  13,
  14,
  15,
  16,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, tournament_games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyListResponse, lobbies_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyList, game_mode_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgLobbyListResponse, lobbies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, custom_game_crc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoin, custom_game_timestamp_),
  1,
  2,
  0,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgPracticeLobbyJoinResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListRequest, friends_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgFriendPracticeLobbyListResponse, lobbies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListRequest, guilds_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGuildmatePracticeLobbyListResponse, lobbies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesRequest, server_region_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, lobby_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponseEntry, player_count_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomGameModesResponse, game_modes_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesRequest, custom_game_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lobby_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, leader_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, leader_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, custom_map_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, max_player_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, lan_host_ping_to_server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponseEntry, has_pass_key_),
  3,
  4,
  0,
  5,
  6,
  1,
  2,
  7,
  8,
  9,
  10,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgJoinableCustomLobbiesResponse, lobbies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, ping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby_LegacyRegionPing, region_code_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, legacy_server_region_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, custom_game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, create_lobby_details_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, allow_any_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, legacy_region_pings_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobby, ping_data_),
  3,
  2,
  4,
  0,
  5,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgQuickJoinCustomLobbyResponse, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, difficulty_radiant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgBotGameCreate, difficulty_dire_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCustomGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, search_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, game_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgEventGameCreate, custom_game_id_),
  0,
  3,
  4,
  1,
  2,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAPartyMemberSetCoach, wants_coach_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupLeader, new_leader_steamid_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, invited_steamids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTACancelGroupInvites, invited_groupids_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTASetGroupOpenStatus, open_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeInvite, other_group_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, initiator_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeResponse, accept_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAGroupMergeReply, result_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails_Team, team_logo_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, language_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, server_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, stream_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, stream_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, series_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, series_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, radiant_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyGameDetails, dire_team_),
  6,
  4,
  5,
  0,
  1,
  7,
  8,
  9,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, lobby_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSetSpectatorLobbyDetails, game_details_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, client_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgCreateSpectatorLobby, details_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, game_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, requires_pass_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, leader_account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, member_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse_SpectatorLobby, game_details_),
  2,
  0,
  3,
  4,
  5,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgSpectatorLobbyListResponse, lobbies_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicket, server_steam_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, serialized_ticket_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgClientToGCRequestSteamDatagramTicketResponse, message_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_time_expiry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_authorized_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_authorized_public_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_gameserver_steam_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_gameserver_net_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_app_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, legacy_extra_fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgGCToClientSteamDatagramTicket, serialized_ticket_),
  3,
  2,
  4,
  5,
  6,
  0,
  7,
  ~0u,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 20, sizeof(CMsgStartFindingMatch)},
  { 35, 45, sizeof(CMsgStartFindingMatchResult)},
  { 50, 55, sizeof(CMsgStopFindingMatch)},
  { 55, 65, sizeof(CMsgPartyBuilderOptions)},
  { 70, 78, sizeof(CMsgReadyUp)},
  { 81, 89, sizeof(CMsgReadyUpStatus)},
  { 92, 97, sizeof(CMsgAbandonCurrentGame)},
  { 97, 143, sizeof(CMsgPracticeLobbySetDetails)},
  { 184, 193, sizeof(CMsgPracticeLobbyCreate_SaveGame)},
  { 197, 207, sizeof(CMsgPracticeLobbyCreate)},
  { 212, 220, sizeof(CMsgPracticeLobbySetTeamSlot)},
  { 223, 229, sizeof(CMsgPracticeLobbySetCoach)},
  { 230, 239, sizeof(CMsgPracticeLobbyJoinBroadcastChannel)},
  { 243, 249, sizeof(CMsgPracticeLobbyCloseBroadcastChannel)},
  { 250, 255, sizeof(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)},
  { 255, 261, sizeof(CMsgPracticeLobbyKick)},
  { 262, 268, sizeof(CMsgPracticeLobbyKickFromTeam)},
  { 269, 274, sizeof(CMsgPracticeLobbyLeave)},
  { 274, 280, sizeof(CMsgPracticeLobbyLaunch)},
  { 281, 287, sizeof(CMsgApplyTeamToPracticeLobby)},
  { 288, 293, sizeof(CMsgClearPracticeLobbyTeam)},
  { 293, 302, sizeof(CMsgPracticeLobbyList)},
  { 306, 313, sizeof(CMsgPracticeLobbyListResponseEntry_CLobbyMember)},
  { 315, 338, sizeof(CMsgPracticeLobbyListResponseEntry)},
  { 356, 363, sizeof(CMsgPracticeLobbyListResponse)},
  { 365, 372, sizeof(CMsgLobbyList)},
  { 374, 380, sizeof(CMsgLobbyListResponse)},
  { 381, 391, sizeof(CMsgPracticeLobbyJoin)},
  { 396, 402, sizeof(CMsgPracticeLobbyJoinResponse)},
  { 403, 409, sizeof(CMsgFriendPracticeLobbyListRequest)},
  { 410, 416, sizeof(CMsgFriendPracticeLobbyListResponse)},
  { 417, 423, sizeof(CMsgGuildmatePracticeLobbyListRequest)},
  { 424, 430, sizeof(CMsgGuildmatePracticeLobbyListResponse)},
  { 431, 437, sizeof(CMsgJoinableCustomGameModesRequest)},
  { 438, 446, sizeof(CMsgJoinableCustomGameModesResponseEntry)},
  { 449, 455, sizeof(CMsgJoinableCustomGameModesResponse)},
  { 456, 463, sizeof(CMsgJoinableCustomLobbiesRequest)},
  { 465, 481, sizeof(CMsgJoinableCustomLobbiesResponseEntry)},
  { 492, 498, sizeof(CMsgJoinableCustomLobbiesResponse)},
  { 499, 507, sizeof(CMsgQuickJoinCustomLobby_LegacyRegionPing)},
  { 510, 522, sizeof(CMsgQuickJoinCustomLobby)},
  { 529, 535, sizeof(CMsgQuickJoinCustomLobbyResponse)},
  { 536, 547, sizeof(CMsgBotGameCreate)},
  { 553, 564, sizeof(CMsgCustomGameCreate)},
  { 570, 581, sizeof(CMsgEventGameCreate)},
  { 587, 593, sizeof(CMsgDOTAPartyMemberSetCoach)},
  { 594, 600, sizeof(CMsgDOTASetGroupLeader)},
  { 601, 608, sizeof(CMsgDOTACancelGroupInvites)},
  { 610, 616, sizeof(CMsgDOTASetGroupOpenStatus)},
  { 617, 623, sizeof(CMsgDOTAGroupMergeInvite)},
  { 624, 631, sizeof(CMsgDOTAGroupMergeResponse)},
  { 633, 639, sizeof(CMsgDOTAGroupMergeReply)},
  { 640, 648, sizeof(CMsgSpectatorLobbyGameDetails_Team)},
  { 651, 666, sizeof(CMsgSpectatorLobbyGameDetails)},
  { 676, 685, sizeof(CMsgSetSpectatorLobbyDetails)},
  { 689, 696, sizeof(CMsgCreateSpectatorLobby)},
  { 698, 703, sizeof(CMsgSpectatorLobbyList)},
  { 703, 714, sizeof(CMsgSpectatorLobbyListResponse_SpectatorLobby)},
  { 720, 726, sizeof(CMsgSpectatorLobbyListResponse)},
  { 727, 733, sizeof(CMsgClientToGCRequestSteamDatagramTicket)},
  { 734, 741, sizeof(CMsgClientToGCRequestSteamDatagramTicketResponse)},
  { 743, 757, sizeof(CMsgGCToClientSteamDatagramTicket)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStartFindingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStartFindingMatchResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgStopFindingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPartyBuilderOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgReadyUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgReadyUpStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgAbandonCurrentGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbySetDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyCreate_SaveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbySetTeamSlot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbySetCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyJoinBroadcastChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyCloseBroadcastChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyKickFromTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyLaunch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgApplyTeamToPracticeLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClearPracticeLobbyTeam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyListResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyJoin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgPracticeLobbyJoinResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFriendPracticeLobbyListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgFriendPracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGuildmatePracticeLobbyListRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGuildmatePracticeLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomGameModesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomGameModesResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomGameModesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomLobbiesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomLobbiesResponseEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgJoinableCustomLobbiesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgQuickJoinCustomLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgQuickJoinCustomLobbyResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgBotGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCustomGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgEventGameCreate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAPartyMemberSetCoach_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASetGroupLeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTACancelGroupInvites_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTASetGroupOpenStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGroupMergeInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGroupMergeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAGroupMergeReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectatorLobbyGameDetails_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectatorLobbyGameDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSetSpectatorLobbyDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgCreateSpectatorLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectatorLobbyList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgSpectatorLobbyListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCRequestSteamDatagramTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgGCToClientSteamDatagramTicket_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_match_management.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 62);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgStartFindingMatch_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgStartFindingMatchResult_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgStopFindingMatch_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgPartyBuilderOptions_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgReadyUp_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgReadyUpStatus_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgAbandonCurrentGame_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgPracticeLobbySetDetails_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgPracticeLobbyCreate_SaveGame_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgPracticeLobbyCreate_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgPracticeLobbySetTeamSlot_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgPracticeLobbySetCoach_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgPracticeLobbyKick_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgPracticeLobbyKickFromTeam_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgPracticeLobbyLeave_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgPracticeLobbyLaunch_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgApplyTeamToPracticeLobby_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgClearPracticeLobbyTeam_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgPracticeLobbyList_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgPracticeLobbyListResponseEntry_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgPracticeLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgLobbyList_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgPracticeLobbyJoin_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgPracticeLobbyJoinResponse_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgFriendPracticeLobbyListRequest_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
  _CMsgFriendPracticeLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[30].reflection;
  _CMsgGuildmatePracticeLobbyListRequest_default_instance_.Shutdown();
  delete file_level_metadata[31].reflection;
  _CMsgGuildmatePracticeLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[32].reflection;
  _CMsgJoinableCustomGameModesRequest_default_instance_.Shutdown();
  delete file_level_metadata[33].reflection;
  _CMsgJoinableCustomGameModesResponseEntry_default_instance_.Shutdown();
  delete file_level_metadata[34].reflection;
  _CMsgJoinableCustomGameModesResponse_default_instance_.Shutdown();
  delete file_level_metadata[35].reflection;
  _CMsgJoinableCustomLobbiesRequest_default_instance_.Shutdown();
  delete file_level_metadata[36].reflection;
  _CMsgJoinableCustomLobbiesResponseEntry_default_instance_.Shutdown();
  delete file_level_metadata[37].reflection;
  _CMsgJoinableCustomLobbiesResponse_default_instance_.Shutdown();
  delete file_level_metadata[38].reflection;
  _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_.Shutdown();
  delete file_level_metadata[39].reflection;
  _CMsgQuickJoinCustomLobby_default_instance_.Shutdown();
  delete file_level_metadata[40].reflection;
  _CMsgQuickJoinCustomLobbyResponse_default_instance_.Shutdown();
  delete file_level_metadata[41].reflection;
  _CMsgBotGameCreate_default_instance_.Shutdown();
  delete file_level_metadata[42].reflection;
  _CMsgCustomGameCreate_default_instance_.Shutdown();
  delete file_level_metadata[43].reflection;
  _CMsgEventGameCreate_default_instance_.Shutdown();
  delete file_level_metadata[44].reflection;
  _CMsgDOTAPartyMemberSetCoach_default_instance_.Shutdown();
  delete file_level_metadata[45].reflection;
  _CMsgDOTASetGroupLeader_default_instance_.Shutdown();
  delete file_level_metadata[46].reflection;
  _CMsgDOTACancelGroupInvites_default_instance_.Shutdown();
  delete file_level_metadata[47].reflection;
  _CMsgDOTASetGroupOpenStatus_default_instance_.Shutdown();
  delete file_level_metadata[48].reflection;
  _CMsgDOTAGroupMergeInvite_default_instance_.Shutdown();
  delete file_level_metadata[49].reflection;
  _CMsgDOTAGroupMergeResponse_default_instance_.Shutdown();
  delete file_level_metadata[50].reflection;
  _CMsgDOTAGroupMergeReply_default_instance_.Shutdown();
  delete file_level_metadata[51].reflection;
  _CMsgSpectatorLobbyGameDetails_Team_default_instance_.Shutdown();
  delete file_level_metadata[52].reflection;
  _CMsgSpectatorLobbyGameDetails_default_instance_.Shutdown();
  delete file_level_metadata[53].reflection;
  _CMsgSetSpectatorLobbyDetails_default_instance_.Shutdown();
  delete file_level_metadata[54].reflection;
  _CMsgCreateSpectatorLobby_default_instance_.Shutdown();
  delete file_level_metadata[55].reflection;
  _CMsgSpectatorLobbyList_default_instance_.Shutdown();
  delete file_level_metadata[56].reflection;
  _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_.Shutdown();
  delete file_level_metadata[57].reflection;
  _CMsgSpectatorLobbyListResponse_default_instance_.Shutdown();
  delete file_level_metadata[58].reflection;
  _CMsgClientToGCRequestSteamDatagramTicket_default_instance_.Shutdown();
  delete file_level_metadata[59].reflection;
  _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_.Shutdown();
  delete file_level_metadata[60].reflection;
  _CMsgGCToClientSteamDatagramTicket_default_instance_.Shutdown();
  delete file_level_metadata[61].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_steammessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fclient_5fenums_2eproto::InitDefaults();
  ::proto::dota::protobuf_base_5fgcmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  _CMsgStartFindingMatch_default_instance_.DefaultConstruct();
  _CMsgStartFindingMatchResult_default_instance_.DefaultConstruct();
  _CMsgStopFindingMatch_default_instance_.DefaultConstruct();
  _CMsgPartyBuilderOptions_default_instance_.DefaultConstruct();
  _CMsgReadyUp_default_instance_.DefaultConstruct();
  _CMsgReadyUpStatus_default_instance_.DefaultConstruct();
  _CMsgAbandonCurrentGame_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbySetDetails_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyCreate_SaveGame_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyCreate_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbySetTeamSlot_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbySetCoach_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyJoinBroadcastChannel_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyCloseBroadcastChannel_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyKick_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyKickFromTeam_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyLeave_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyLaunch_default_instance_.DefaultConstruct();
  _CMsgApplyTeamToPracticeLobby_default_instance_.DefaultConstruct();
  _CMsgClearPracticeLobbyTeam_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyList_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyListResponseEntry_CLobbyMember_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyListResponseEntry_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgLobbyList_default_instance_.DefaultConstruct();
  _CMsgLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyJoin_default_instance_.DefaultConstruct();
  _CMsgPracticeLobbyJoinResponse_default_instance_.DefaultConstruct();
  _CMsgFriendPracticeLobbyListRequest_default_instance_.DefaultConstruct();
  _CMsgFriendPracticeLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgGuildmatePracticeLobbyListRequest_default_instance_.DefaultConstruct();
  _CMsgGuildmatePracticeLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomGameModesRequest_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomGameModesResponseEntry_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomGameModesResponse_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomLobbiesRequest_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomLobbiesResponseEntry_default_instance_.DefaultConstruct();
  _CMsgJoinableCustomLobbiesResponse_default_instance_.DefaultConstruct();
  _CMsgQuickJoinCustomLobby_LegacyRegionPing_default_instance_.DefaultConstruct();
  _CMsgQuickJoinCustomLobby_default_instance_.DefaultConstruct();
  _CMsgQuickJoinCustomLobbyResponse_default_instance_.DefaultConstruct();
  _CMsgBotGameCreate_default_instance_.DefaultConstruct();
  _CMsgCustomGameCreate_default_instance_.DefaultConstruct();
  _CMsgEventGameCreate_default_instance_.DefaultConstruct();
  _CMsgDOTAPartyMemberSetCoach_default_instance_.DefaultConstruct();
  _CMsgDOTASetGroupLeader_default_instance_.DefaultConstruct();
  _CMsgDOTACancelGroupInvites_default_instance_.DefaultConstruct();
  _CMsgDOTASetGroupOpenStatus_default_instance_.DefaultConstruct();
  _CMsgDOTAGroupMergeInvite_default_instance_.DefaultConstruct();
  _CMsgDOTAGroupMergeResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAGroupMergeReply_default_instance_.DefaultConstruct();
  _CMsgSpectatorLobbyGameDetails_Team_default_instance_.DefaultConstruct();
  _CMsgSpectatorLobbyGameDetails_default_instance_.DefaultConstruct();
  _CMsgSetSpectatorLobbyDetails_default_instance_.DefaultConstruct();
  _CMsgCreateSpectatorLobby_default_instance_.DefaultConstruct();
  _CMsgSpectatorLobbyList_default_instance_.DefaultConstruct();
  _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_.DefaultConstruct();
  _CMsgSpectatorLobbyListResponse_default_instance_.DefaultConstruct();
  _CMsgClientToGCRequestSteamDatagramTicket_default_instance_.DefaultConstruct();
  _CMsgClientToGCRequestSteamDatagramTicketResponse_default_instance_.DefaultConstruct();
  _CMsgGCToClientSteamDatagramTicket_default_instance_.DefaultConstruct();
  _CMsgStartFindingMatch_default_instance_.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
  _CMsgReadyUp_default_instance_.get_mutable()->hardware_specs_ = const_cast< ::proto::dota::CDOTAClientHardwareSpecs*>(
      ::proto::dota::CDOTAClientHardwareSpecs::internal_default_instance());
  _CMsgPracticeLobbyCreate_default_instance_.get_mutable()->lobby_details_ = const_cast< ::proto::dota::CMsgPracticeLobbySetDetails*>(
      ::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance());
  _CMsgPracticeLobbyCreate_default_instance_.get_mutable()->save_game_ = const_cast< ::proto::dota::CMsgPracticeLobbyCreate_SaveGame*>(
      ::proto::dota::CMsgPracticeLobbyCreate_SaveGame::internal_default_instance());
  _CMsgQuickJoinCustomLobby_default_instance_.get_mutable()->create_lobby_details_ = const_cast< ::proto::dota::CMsgPracticeLobbySetDetails*>(
      ::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance());
  _CMsgQuickJoinCustomLobby_default_instance_.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
  _CMsgSpectatorLobbyGameDetails_default_instance_.get_mutable()->radiant_team_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance());
  _CMsgSpectatorLobbyGameDetails_default_instance_.get_mutable()->dire_team_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails_Team*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance());
  _CMsgSetSpectatorLobbyDetails_default_instance_.get_mutable()->game_details_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance());
  _CMsgCreateSpectatorLobby_default_instance_.get_mutable()->details_ = const_cast< ::proto::dota::CMsgSetSpectatorLobbyDetails*>(
      ::proto::dota::CMsgSetSpectatorLobbyDetails::internal_default_instance());
  _CMsgSpectatorLobbyListResponse_SpectatorLobby_default_instance_.get_mutable()->game_details_ = const_cast< ::proto::dota::CMsgSpectatorLobbyGameDetails*>(
      ::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n-dota_gcmessages_client_match_managemen"
      "t.proto\022\nproto.dota\032\023steammessages.proto"
      "\032\027dota_shared_enums.proto\032\027dota_client_e"
      "nums.proto\032\025base_gcmessages.proto\032-dota_"
      "gcmessages_common_match_management.proto"
      "\"\305\004\n\025CMsgStartFindingMatch\022\013\n\003key\030\001 \001(\t\022"
      "\037\n\013matchgroups\030\002 \001(\r:\n4294967295\022\026\n\016clie"
      "nt_version\030\003 \001(\r\022\036\n\ngame_modes\030\004 \001(\r:\n42"
      "94967295\022J\n\016bot_difficulty\030\005 \001(\0162\035.proto"
      ".dota.DOTABotDifficulty:\023BOT_DIFFICULTY_"
      "HARD\022<\n\nmatch_type\030\006 \001(\0162\025.proto.dota.Ma"
      "tchType:\021MATCH_TYPE_CASUAL\022\"\n\016matchlangu"
      "ages\030\007 \001(\r:\n4294967295\022\017\n\007team_id\030\010 \001(\r\022"
      "N\n\022game_language_enum\030\n \001(\0162\032.proto.dota"
      ".MatchLanguages:\026MATCH_LANGUAGE_INVALID\022"
      "\032\n\022game_language_name\030\013 \001(\t\0221\n\tping_data"
      "\030\014 \001(\0132\036.proto.dota.CMsgClientPingData\022\033"
      "\n\023region_select_flags\030\r \001(\r\022\022\n\nsolo_queu"
      "e\030\016 \001(\010\022\030\n\020bot_script_index\030\017 \001(\r\022\035\n\025ste"
      "am_clan_account_id\030\020 \001(\r\"\351\001\n\033CMsgStartFi"
      "ndingMatchResult\022!\n\026legacy_generic_eresu"
      "lt\030\001 \001(\r:\0012\022X\n\006result\030\002 \001(\0162$.proto.dota"
      ".EStartFindingMatchResult:\"k_EStartFindi"
      "ngMatchResult_Invalid\022\023\n\013error_token\030\003 \001"
      "(\t\022\025\n\rdebug_message\030\004 \001(\t\022!\n\031responsible"
      "_party_members\030\005 \003(\006\"\026\n\024CMsgStopFindingM"
      "atch\"\344\001\n\027CMsgPartyBuilderOptions\022\030\n\020addi"
      "tional_slots\030\001 \001(\r\022<\n\nmatch_type\030\002 \001(\0162\025"
      ".proto.dota.MatchType:\021MATCH_TYPE_CASUAL"
      "\022\023\n\013matchgroups\030\003 \001(\r\022\026\n\016client_version\030"
      "\004 \001(\r\022D\n\010language\030\005 \001(\0162\032.proto.dota.Mat"
      "chLanguages:\026MATCH_LANGUAGE_INVALID\"\261\001\n\013"
      "CMsgReadyUp\022N\n\005state\030\001 \001(\0162\037.proto.dota."
      "DOTALobbyReadyState:\036DOTALobbyReadyState"
      "_UNDECLARED\022\024\n\014ready_up_key\030\002 \001(\006\022<\n\016har"
      "dware_specs\030\003 \001(\0132$.proto.dota.CDOTAClie"
      "ntHardwareSpecs\"Q\n\021CMsgReadyUpStatus\022\020\n\010"
      "lobby_id\030\001 \001(\006\022\024\n\014accepted_ids\030\002 \003(\r\022\024\n\014"
      "declined_ids\030\003 \003(\r\"\030\n\026CMsgAbandonCurrent"
      "Game\"\353\013\n\033CMsgPracticeLobbySetDetails\022\020\n\010"
      "lobby_id\030\001 \001(\004\022\021\n\tgame_name\030\002 \001(\t\0223\n\014tea"
      "m_details\030\003 \003(\0132\035.proto.dota.CLobbyTeamD"
      "etails\022\025\n\rserver_region\030\004 \001(\r\022\021\n\tgame_mo"
      "de\030\005 \001(\r\0229\n\007cm_pick\030\006 \001(\0162\030.proto.dota.D"
      "OTA_CM_PICK:\016DOTA_CM_RANDOM\022U\n\026bot_diffi"
      "culty_radiant\030\t \001(\0162\035.proto.dota.DOTABot"
      "Difficulty:\026BOT_DIFFICULTY_PASSIVE\022\024\n\014al"
      "low_cheats\030\n \001(\010\022\026\n\016fill_with_bots\030\013 \001(\010"
      "\022\022\n\nintro_mode\030\014 \001(\010\022\030\n\020allow_spectating"
      "\030\r \001(\010\022G\n\014game_version\030\016 \001(\0162\033.proto.dot"
      "a.DOTAGameVersion:\024GAME_VERSION_CURRENT\022"
      "\020\n\010pass_key\030\017 \001(\t\022\020\n\010leagueid\030\020 \001(\r\022\035\n\025p"
      "enalty_level_radiant\030\021 \001(\r\022\032\n\022penalty_le"
      "vel_dire\030\022 \001(\r\022\024\n\014load_game_id\030\023 \001(\r\022\023\n\013"
      "series_type\030\024 \001(\r\022\033\n\023radiant_series_wins"
      "\030\025 \001(\r\022\030\n\020dire_series_wins\030\026 \001(\r\022\026\n\007allc"
      "hat\030\027 \001(\010:\005false\022D\n\rdota_tv_delay\030\030 \001(\0162"
      "\034.proto.dota.LobbyDotaTVDelay:\017LobbyDota"
      "TV_120\022\013\n\003lan\030\031 \001(\010\022\030\n\020custom_game_mode\030"
      "\032 \001(\t\022\027\n\017custom_map_name\030\033 \001(\t\022\031\n\021custom"
      "_difficulty\030\034 \001(\r\022\026\n\016custom_game_id\030\035 \001("
      "\004\022\032\n\022custom_min_players\030\036 \001(\r\022\032\n\022custom_"
      "max_players\030\037 \001(\r\022&\n\036lan_host_ping_to_se"
      "rver_region\030  \001(\r\022O\n\nvisibility\030! \001(\0162\037."
      "proto.dota.DOTALobbyVisibility:\032DOTALobb"
      "yVisibility_Public\022\027\n\017custom_game_crc\030\" "
      "\001(\006\022\030\n\020league_series_id\030# \001(\r\022\026\n\016league_"
      "game_id\030$ \001(\r\022\035\n\025custom_game_timestamp\030%"
      " \001(\007\022\037\n\027previous_match_override\030& \001(\004\022Y\n"
      "\rpause_setting\030* \001(\0162!.proto.dota.LobbyD"
      "otaPauseSetting:\037LobbyDotaPauseSetting_U"
      "nlimited\022R\n\023bot_difficulty_dire\030+ \001(\0162\035."
      "proto.dota.DOTABotDifficulty:\026BOT_DIFFIC"
      "ULTY_PASSIVE\022\023\n\013bot_radiant\030, \001(\004\022\020\n\010bot"
      "_dire\030- \001(\004\022m\n\030selection_priority_rules\030"
      ". \001(\0162&.proto.dota.DOTASelectionPriority"
      "Rules:#k_DOTASelectionPriorityRules_Manu"
      "al\"\250\002\n\027CMsgPracticeLobbyCreate\022\022\n\nsearch"
      "_key\030\001 \001(\t\022\020\n\010pass_key\030\005 \001(\t\022\026\n\016client_v"
      "ersion\030\006 \001(\r\022>\n\rlobby_details\030\007 \001(\0132\'.pr"
      "oto.dota.CMsgPracticeLobbySetDetails\022\?\n\t"
      "save_game\030\010 \001(\0132,.proto.dota.CMsgPractic"
      "eLobbyCreate.SaveGame\032N\n\010SaveGame\022\014\n\004dat"
      "a\030\001 \001(\014\022\017\n\007version\030\002 \001(\005\022\020\n\010steam_id\030\003 \001"
      "(\006\022\021\n\tsignature\030\004 \001(\006\"\273\001\n\034CMsgPracticeLo"
      "bbySetTeamSlot\022>\n\004team\030\001 \001(\0162\030.proto.dot"
      "a.DOTA_GC_TEAM:\026DOTA_GC_TEAM_GOOD_GUYS\022\014"
      "\n\004slot\030\002 \001(\r\022M\n\016bot_difficulty\030\003 \001(\0162\035.p"
      "roto.dota.DOTABotDifficulty:\026BOT_DIFFICU"
      "LTY_PASSIVE\"[\n\031CMsgPracticeLobbySetCoach"
      "\022>\n\004team\030\001 \001(\0162\030.proto.dota.DOTA_GC_TEAM"
      ":\026DOTA_GC_TEAM_GOOD_GUYS\"\230\001\n%CMsgPractic"
      "eLobbyJoinBroadcastChannel\022\017\n\007channel\030\001 "
      "\001(\r\022\035\n\025preferred_description\030\002 \001(\t\022\036\n\026pr"
      "eferred_country_code\030\003 \001(\t\022\037\n\027preferred_"
      "language_code\030\004 \001(\t\"9\n&CMsgPracticeLobby"
      "CloseBroadcastChannel\022\017\n\007channel\030\001 \001(\r\"8"
      "\n6CMsgPracticeLobbyToggleBroadcastChanne"
      "lCameramanStatus\"+\n\025CMsgPracticeLobbyKic"
      "k\022\022\n\naccount_id\030\003 \001(\r\"3\n\035CMsgPracticeLob"
      "byKickFromTeam\022\022\n\naccount_id\030\001 \001(\r\"\030\n\026CM"
      "sgPracticeLobbyLeave\"1\n\027CMsgPracticeLobb"
      "yLaunch\022\026\n\016client_version\030\005 \001(\r\"/\n\034CMsgA"
      "pplyTeamToPracticeLobby\022\017\n\007team_id\030\001 \001(\r"
      "\"\034\n\032CMsgClearPracticeLobbyTeam\"\225\001\n\025CMsgP"
      "racticeLobbyList\022\030\n\020tournament_games\030\001 \001"
      "(\010\022\020\n\010pass_key\030\002 \001(\t\022\016\n\006region\030\003 \001(\r\022@\n\t"
      "game_mode\030\004 \001(\0162\031.proto.dota.DOTA_GameMo"
      "de:\022DOTA_GAMEMODE_NONE\"\344\004\n\"CMsgPracticeL"
      "obbyListResponseEntry\022\020\n\002id\030\001 \001(\004B\004\200\246\035\001\022"
      "\025\n\rtournament_id\030\003 \001(\r\022\032\n\022tournament_gam"
      "e_id\030\004 \001(\r\022L\n\007members\030\005 \003(\0132;.proto.dota"
      ".CMsgPracticeLobbyListResponseEntry.CLob"
      "byMember\022\031\n\021requires_pass_key\030\006 \001(\010\022\031\n\021l"
      "eader_account_id\030\007 \001(\r\022\020\n\010guild_id\030\010 \001(\r"
      "\022\022\n\nguild_logo\030\t \001(\004\022\014\n\004name\030\n \001(\t\022\030\n\020cu"
      "stom_game_mode\030\013 \001(\t\022@\n\tgame_mode\030\014 \001(\0162"
      "\031.proto.dota.DOTA_GameMode:\022DOTA_GAMEMOD"
      "E_NONE\022\026\n\016friend_present\030\r \001(\010\022\017\n\007player"
      "s\030\016 \001(\r\022\027\n\017custom_map_name\030\017 \001(\t\022\030\n\020max_"
      "player_count\030\020 \001(\r\022\025\n\rserver_region\030\021 \001("
      "\r\022&\n\036lan_host_ping_to_server_region\030\022 \001("
      "\r\022\021\n\tleague_id\030\023 \001(\r\0327\n\014CLobbyMember\022\022\n\n"
      "account_id\030\001 \001(\r\022\023\n\013player_name\030\002 \001(\t\"z\n"
      "\035CMsgPracticeLobbyListResponse\022\030\n\020tourna"
      "ment_games\030\001 \001(\010\022\?\n\007lobbies\030\002 \003(\0132..prot"
      "o.dota.CMsgPracticeLobbyListResponseEntr"
      "y\"k\n\rCMsgLobbyList\022\030\n\rserver_region\030\001 \001("
      "\r:\0010\022@\n\tgame_mode\030\002 \001(\0162\031.proto.dota.DOT"
      "A_GameMode:\022DOTA_GAMEMODE_NONE\"X\n\025CMsgLo"
      "bbyListResponse\022\?\n\007lobbies\030\001 \003(\0132..proto"
      ".dota.CMsgPracticeLobbyListResponseEntry"
      "\"\213\001\n\025CMsgPracticeLobbyJoin\022\020\n\010lobby_id\030\001"
      " \001(\004\022\026\n\016client_version\030\002 \001(\r\022\020\n\010pass_key"
      "\030\003 \001(\t\022\027\n\017custom_game_crc\030\004 \001(\006\022\035\n\025custo"
      "m_game_timestamp\030\005 \001(\007\"j\n\035CMsgPracticeLo"
      "bbyJoinResponse\022I\n\006result\030\001 \001(\0162\037.proto."
      "dota.DOTAJoinLobbyResult:\030DOTA_JOIN_RESU"
      "LT_SUCCESS\"5\n\"CMsgFriendPracticeLobbyLis"
      "tRequest\022\017\n\007friends\030\001 \003(\r\"f\n#CMsgFriendP"
      "racticeLobbyListResponse\022\?\n\007lobbies\030\001 \003("
      "\0132..proto.dota.CMsgPracticeLobbyListResp"
      "onseEntry\"7\n%CMsgGuildmatePracticeLobbyL"
      "istRequest\022\016\n\006guilds\030\001 \003(\r\"i\n&CMsgGuildm"
      "atePracticeLobbyListResponse\022\?\n\007lobbies\030"
      "\001 \003(\0132..proto.dota.CMsgPracticeLobbyList"
      "ResponseEntry\";\n\"CMsgJoinableCustomGameM"
      "odesRequest\022\025\n\rserver_region\030\001 \001(\r\"m\n(CM"
      "sgJoinableCustomGameModesResponseEntry\022\026"
      "\n\016custom_game_id\030\001 \001(\004\022\023\n\013lobby_count\030\002 "
      "\001(\r\022\024\n\014player_count\030\003 \001(\r\"o\n#CMsgJoinabl"
      "eCustomGameModesResponse\022H\n\ngame_modes\030\001"
      " \003(\01324.proto.dota.CMsgJoinableCustomGame"
      "ModesResponseEntry\"Q\n CMsgJoinableCustom"
      "LobbiesRequest\022\025\n\rserver_region\030\001 \001(\r\022\026\n"
      "\016custom_game_id\030\002 \001(\004\"\264\002\n&CMsgJoinableCu"
      "stomLobbiesResponseEntry\022\020\n\010lobby_id\030\001 \001"
      "(\006\022\026\n\016custom_game_id\030\002 \001(\004\022\022\n\nlobby_name"
      "\030\003 \001(\t\022\024\n\014member_count\030\004 \001(\r\022\031\n\021leader_a"
      "ccount_id\030\005 \001(\r\022\023\n\013leader_name\030\006 \001(\t\022\027\n\017"
      "custom_map_name\030\007 \001(\t\022\030\n\020max_player_coun"
      "t\030\010 \001(\r\022\025\n\rserver_region\030\t \001(\r\022&\n\036lan_ho"
      "st_ping_to_server_region\030\n \001(\r\022\024\n\014has_pa"
      "ss_key\030\013 \001(\010\"h\n!CMsgJoinableCustomLobbie"
      "sResponse\022C\n\007lobbies\030\001 \003(\01322.proto.dota."
      "CMsgJoinableCustomLobbiesResponseEntry\"\233"
      "\003\n\030CMsgQuickJoinCustomLobby\022\034\n\024legacy_se"
      "rver_region\030\001 \001(\r\022\026\n\016custom_game_id\030\002 \001("
      "\004\022\026\n\016client_version\030\003 \001(\r\022E\n\024create_lobb"
      "y_details\030\004 \001(\0132\'.proto.dota.CMsgPractic"
      "eLobbySetDetails\022\025\n\rallow_any_map\030\005 \001(\010\022"
      "R\n\023legacy_region_pings\030\006 \003(\01325.proto.dot"
      "a.CMsgQuickJoinCustomLobby.LegacyRegionP"
      "ing\0221\n\tping_data\030\007 \001(\0132\036.proto.dota.CMsg"
      "ClientPingData\032L\n\020LegacyRegionPing\022\025\n\rse"
      "rver_region\030\001 \001(\r\022\014\n\004ping\030\002 \001(\r\022\023\n\013regio"
      "n_code\030\003 \001(\007\"m\n CMsgQuickJoinCustomLobby"
      "Response\022I\n\006result\030\001 \001(\0162\037.proto.dota.DO"
      "TAJoinLobbyResult:\030DOTA_JOIN_RESULT_SUCC"
      "ESS\"\265\002\n\021CMsgBotGameCreate\022\022\n\nsearch_key\030"
      "\001 \001(\t\022\026\n\016client_version\030\002 \001(\r\022Q\n\022difficu"
      "lty_radiant\030\003 \001(\0162\035.proto.dota.DOTABotDi"
      "fficulty:\026BOT_DIFFICULTY_PASSIVE\022>\n\004team"
      "\030\004 \001(\0162\030.proto.dota.DOTA_GC_TEAM:\026DOTA_G"
      "C_TEAM_GOOD_GUYS\022\021\n\tgame_mode\030\005 \001(\r\022N\n\017d"
      "ifficulty_dire\030\006 \001(\0162\035.proto.dota.DOTABo"
      "tDifficulty:\026BOT_DIFFICULTY_PASSIVE\"\216\001\n\024"
      "CMsgCustomGameCreate\022\022\n\nsearch_key\030\001 \001(\t"
      "\022\026\n\016client_version\030\002 \001(\r\022\022\n\ndifficulty\030\003"
      " \001(\r\022\021\n\tgame_mode\030\004 \001(\t\022\013\n\003map\030\005 \001(\t\022\026\n\016"
      "custom_game_id\030\007 \001(\004\"\215\001\n\023CMsgEventGameCr"
      "eate\022\022\n\nsearch_key\030\001 \001(\t\022\026\n\016client_versi"
      "on\030\002 \001(\r\022\022\n\ndifficulty\030\003 \001(\r\022\021\n\tgame_mod"
      "e\030\004 \001(\t\022\013\n\003map\030\005 \001(\t\022\026\n\016custom_game_id\030\007"
      " \001(\004\"2\n\033CMsgDOTAPartyMemberSetCoach\022\023\n\013w"
      "ants_coach\030\001 \001(\010\"4\n\026CMsgDOTASetGroupLead"
      "er\022\032\n\022new_leader_steamid\030\001 \001(\006\"P\n\032CMsgDO"
      "TACancelGroupInvites\022\030\n\020invited_steamids"
      "\030\001 \003(\006\022\030\n\020invited_groupids\030\002 \003(\006\"*\n\032CMsg"
      "DOTASetGroupOpenStatus\022\014\n\004open\030\001 \001(\010\"2\n\030"
      "CMsgDOTAGroupMergeInvite\022\026\n\016other_group_"
      "id\030\001 \001(\006\"H\n\032CMsgDOTAGroupMergeResponse\022\032"
      "\n\022initiator_group_id\030\001 \001(\006\022\016\n\006accept\030\002 \001"
      "(\010\"h\n\027CMsgDOTAGroupMergeReply\022M\n\006result\030"
      "\001 \001(\0162!.proto.dota.EDOTAGroupMergeResult"
      ":\032k_EDOTAGroupMergeResult_OK\"\212\003\n\035CMsgSpe"
      "ctatorLobbyGameDetails\022\020\n\010language\030\001 \001(\r"
      "\022\020\n\010match_id\030\002 \001(\004\022\027\n\017server_steam_id\030\003 "
      "\001(\006\022\022\n\nstream_url\030\004 \001(\t\022\023\n\013stream_name\030\005"
      " \001(\t\022\021\n\tleague_id\030\006 \001(\r\022\023\n\013series_type\030\007"
      " \001(\r\022\023\n\013series_game\030\010 \001(\r\022D\n\014radiant_tea"
      "m\030\t \001(\0132..proto.dota.CMsgSpectatorLobbyG"
      "ameDetails.Team\022A\n\tdire_team\030\n \001(\0132..pro"
      "to.dota.CMsgSpectatorLobbyGameDetails.Te"
      "am\032=\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\021\n\tteam_name"
      "\030\002 \001(\t\022\021\n\tteam_logo\030\003 \001(\006\"\227\001\n\034CMsgSetSpe"
      "ctatorLobbyDetails\022\020\n\010lobby_id\030\001 \001(\004\022\022\n\n"
      "lobby_name\030\002 \001(\t\022\020\n\010pass_key\030\003 \001(\t\022\?\n\014ga"
      "me_details\030\004 \001(\0132).proto.dota.CMsgSpecta"
      "torLobbyGameDetails\"m\n\030CMsgCreateSpectat"
      "orLobby\022\026\n\016client_version\030\001 \001(\r\0229\n\007detai"
      "ls\030\002 \001(\0132(.proto.dota.CMsgSetSpectatorLo"
      "bbyDetails\"\030\n\026CMsgSpectatorLobbyList\"\261\002\n"
      "\036CMsgSpectatorLobbyListResponse\022J\n\007lobbi"
      "es\030\001 \003(\01329.proto.dota.CMsgSpectatorLobby"
      "ListResponse.SpectatorLobby\032\302\001\n\016Spectato"
      "rLobby\022\020\n\010lobby_id\030\001 \001(\004\022\021\n\tgame_name\030\002 "
      "\001(\t\022\031\n\021requires_pass_key\030\003 \001(\010\022\031\n\021leader"
      "_account_id\030\004 \001(\r\022\024\n\014member_count\030\005 \001(\r\022"
      "\?\n\014game_details\030\007 \001(\0132).proto.dota.CMsgS"
      "pectatorLobbyGameDetails\"C\n(CMsgClientTo"
      "GCRequestSteamDatagramTicket\022\027\n\017server_s"
      "team_id\030\001 \001(\006\"^\n0CMsgClientToGCRequestSt"
      "eamDatagramTicketResponse\022\031\n\021serialized_"
      "ticket\030\001 \001(\014\022\017\n\007message\030\002 \001(\t\"\267\002\n!CMsgGC"
      "ToClientSteamDatagramTicket\022\032\n\022legacy_ti"
      "me_expiry\030\001 \001(\007\022\"\n\032legacy_authorized_ste"
      "am_id\030\002 \001(\006\022#\n\033legacy_authorized_public_"
      "ip\030\003 \001(\007\022\"\n\032legacy_gameserver_steam_id\030\004"
      " \001(\006\022 \n\030legacy_gameserver_net_id\030\005 \001(\006\022\030"
      "\n\020legacy_signature\030\006 \001(\014\022\025\n\rlegacy_app_i"
      "d\030\007 \001(\r\022\033\n\023legacy_extra_fields\030\010 \003(\014\022\031\n\021"
      "serialized_ticket\030\020 \001(\014*\235\013\n\030EStartFindin"
      "gMatchResult\022&\n\"k_EStartFindingMatchResu"
      "lt_Invalid\020\000\022!\n\035k_EStartFindingMatchResu"
      "lt_OK\020\001\022/\n+k_EStartFindingMatchResult_Al"
      "readySearching\020\002\022*\n&k_EStartFindingMatch"
      "Result_FailGeneric\020d\022+\n\'k_EStartFindingM"
      "atchResult_FailedIgnore\020e\0222\n.k_EStartFin"
      "dingMatchResult_MatchmakingDisabled\020f\022,\n"
      "(k_EStartFindingMatchResult_RegionOfflin"
      "e\020g\0222\n.k_EStartFindingMatchResult_Matchm"
      "akingCooldown\020h\022.\n*k_EStartFindingMatchR"
      "esult_ClientOutOfDate\020i\0227\n3k_EStartFindi"
      "ngMatchResult_CompetitiveNoLowPriority\020j"
      "\0225\n1k_EStartFindingMatchResult_Competiti"
      "veNotUnlocked\020k\0222\n.k_EStartFindingMatchR"
      "esult_GameModeNotUnlocked\020l\022<\n8k_EStartF"
      "indingMatchResult_CompetitiveNotEnoughSk"
      "illData\020m\0222\n.k_EStartFindingMatchResult_"
      "MissingInitialSkill\020n\022<\n8k_EStartFinding"
      "MatchResult_CompetitiveRankSpreadTooLarg"
      "e\020o\0223\n/k_EStartFindingMatchResult_Member"
      "AlreadyInLobby\020p\0223\n/k_EStartFindingMatch"
      "Result_MemberNotVACVerified\020q\0229\n5k_EStar"
      "tFindingMatchResult_WeekendTourneyBadPar"
      "tySize\020r\022>\n:k_EStartFindingMatchResult_W"
      "eekendTourneyTeamBuyInTooSmall\020s\022D\n@k_ES"
      "tartFindingMatchResult_WeekendTourneyInd"
      "ividualBuyInTooLarge\020t\022>\n:k_EStartFindin"
      "gMatchResult_WeekendTourneyTeamBuyInTooL"
      "arge\020u\022:\n6k_EStartFindingMatchResult_Mem"
      "berMissingEventOwnership\020v\0228\n4k_EStartFi"
      "ndingMatchResult_WeekendTourneyNotUnlock"
      "ed\020w\022@\n<k_EStartFindingMatchResult_Weeke"
      "ndTourneyRecentParticipation\020x\022\?\n;k_ESta"
      "rtFindingMatchResult_MemberMissingAnchor"
      "edPhoneNumber\020y\022.\n*k_EStartFindingMatchR"
      "esult_NotMemberOfClan\020zB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 11150);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_match_management.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_steammessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fshared_5fenums_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fclient_5fenums_2eproto::AddDescriptors();
  ::proto::dota::protobuf_base_5fgcmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto

const ::google::protobuf::EnumDescriptor* EStartFindingMatchResult_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_enum_descriptors[0];
}
bool EStartFindingMatchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartFindingMatch::kKeyFieldNumber;
const int CMsgStartFindingMatch::kMatchgroupsFieldNumber;
const int CMsgStartFindingMatch::kClientVersionFieldNumber;
const int CMsgStartFindingMatch::kGameModesFieldNumber;
const int CMsgStartFindingMatch::kBotDifficultyFieldNumber;
const int CMsgStartFindingMatch::kMatchTypeFieldNumber;
const int CMsgStartFindingMatch::kMatchlanguagesFieldNumber;
const int CMsgStartFindingMatch::kTeamIdFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageEnumFieldNumber;
const int CMsgStartFindingMatch::kGameLanguageNameFieldNumber;
const int CMsgStartFindingMatch::kPingDataFieldNumber;
const int CMsgStartFindingMatch::kRegionSelectFlagsFieldNumber;
const int CMsgStartFindingMatch::kSoloQueueFieldNumber;
const int CMsgStartFindingMatch::kBotScriptIndexFieldNumber;
const int CMsgStartFindingMatch::kSteamClanAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartFindingMatch::CMsgStartFindingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStartFindingMatch)
}
CMsgStartFindingMatch::CMsgStartFindingMatch(const CMsgStartFindingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  game_language_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_language_name()) {
    game_language_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_language_name_);
  }
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = NULL;
  }
  ::memcpy(&client_version_, &from.client_version_,
    reinterpret_cast<char*>(&matchlanguages_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(matchlanguages_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStartFindingMatch)
}

void CMsgStartFindingMatch::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_language_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ping_data_, 0, reinterpret_cast<char*>(&steam_clan_account_id_) -
    reinterpret_cast<char*>(&ping_data_) + sizeof(steam_clan_account_id_));
  matchgroups_ = 4294967295u;
  game_modes_ = 4294967295u;
  bot_difficulty_ = 3;
  matchlanguages_ = 4294967295u;
}

CMsgStartFindingMatch::~CMsgStartFindingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStartFindingMatch)
  SharedDtor();
}

void CMsgStartFindingMatch::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_language_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete ping_data_;
  }
}

void CMsgStartFindingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartFindingMatch::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStartFindingMatch& CMsgStartFindingMatch::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStartFindingMatch* CMsgStartFindingMatch::New(::google::protobuf::Arena* arena) const {
  CMsgStartFindingMatch* n = new CMsgStartFindingMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStartFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStartFindingMatch)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_key()) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_language_name()) {
      GOOGLE_DCHECK(!game_language_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_language_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_ping_data()) {
      GOOGLE_DCHECK(ping_data_ != NULL);
      ping_data_->::proto::dota::CMsgClientPingData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&client_version_, 0, reinterpret_cast<char*>(&region_select_flags_) -
      reinterpret_cast<char*>(&client_version_) + sizeof(region_select_flags_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&solo_queue_, 0, reinterpret_cast<char*>(&steam_clan_account_id_) -
      reinterpret_cast<char*>(&solo_queue_) + sizeof(steam_clan_account_id_));
    matchgroups_ = 4294967295u;
    game_modes_ = 4294967295u;
    bot_difficulty_ = 3;
    matchlanguages_ = 4294967295u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStartFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStartFindingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatch.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 2 [default = 4294967295];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_matchgroups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_modes = 4 [default = 4294967295];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_game_modes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_modes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchlanguages = 7 [default = 4294967295];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_matchlanguages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchlanguages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchLanguages_IsValid(value)) {
            set_game_language_enum(static_cast< ::proto::dota::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_language_name = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_language_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_language_name().data(), this->game_language_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatch.game_language_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_select_flags = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_region_select_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_select_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool solo_queue = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_solo_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &solo_queue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bot_script_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_bot_script_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bot_script_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 steam_clan_account_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_steam_clan_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steam_clan_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStartFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStartFindingMatch)
  return false;
#undef DO_
}

void CMsgStartFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStartFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->matchgroups(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_modes(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bot_difficulty(), output);
  }

  // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->match_type(), output);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->matchlanguages(), output);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team_id(), output);
  }

  // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->game_language_enum(), output);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), this->game_language_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.game_language_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->game_language_name(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->ping_data_, output);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->region_select_flags(), output);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->solo_queue(), output);
  }

  // optional uint32 bot_script_index = 15;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bot_script_index(), output);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->steam_clan_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStartFindingMatch)
}

::google::protobuf::uint8* CMsgStartFindingMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStartFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional uint32 matchgroups = 2 [default = 4294967295];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->matchgroups(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional uint32 game_modes = 4 [default = 4294967295];
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_modes(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->bot_difficulty(), target);
  }

  // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->match_type(), target);
  }

  // optional uint32 matchlanguages = 7 [default = 4294967295];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->matchlanguages(), target);
  }

  // optional uint32 team_id = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team_id(), target);
  }

  // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->game_language_enum(), target);
  }

  // optional string game_language_name = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_language_name().data(), this->game_language_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatch.game_language_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->game_language_name(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->ping_data_, deterministic, target);
  }

  // optional uint32 region_select_flags = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->region_select_flags(), target);
  }

  // optional bool solo_queue = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->solo_queue(), target);
  }

  // optional uint32 bot_script_index = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bot_script_index(), target);
  }

  // optional uint32 steam_clan_account_id = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->steam_clan_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStartFindingMatch)
  return target;
}

size_t CMsgStartFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStartFindingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string game_language_name = 11;
    if (has_game_language_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_language_name());
    }

    // optional .proto.dota.CMsgClientPingData ping_data = 12;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ping_data_);
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 team_id = 8;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
    if (has_game_language_enum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_language_enum());
    }

    // optional uint32 region_select_flags = 13;
    if (has_region_select_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_select_flags());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional bool solo_queue = 14;
    if (has_solo_queue()) {
      total_size += 1 + 1;
    }

    // optional uint32 bot_script_index = 15;
    if (has_bot_script_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bot_script_index());
    }

    // optional uint32 steam_clan_account_id = 16;
    if (has_steam_clan_account_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steam_clan_account_id());
    }

    // optional uint32 matchgroups = 2 [default = 4294967295];
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 game_modes = 4 [default = 4294967295];
    if (has_game_modes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_modes());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

    // optional uint32 matchlanguages = 7 [default = 4294967295];
    if (has_matchlanguages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchlanguages());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStartFindingMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStartFindingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStartFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatch::MergeFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStartFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_language_name();
      game_language_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_language_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_language_enum_ = from.game_language_enum_;
    }
    if (cached_has_bits & 0x00000080u) {
      region_select_flags_ = from.region_select_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      solo_queue_ = from.solo_queue_;
    }
    if (cached_has_bits & 0x00000200u) {
      bot_script_index_ = from.bot_script_index_;
    }
    if (cached_has_bits & 0x00000400u) {
      steam_clan_account_id_ = from.steam_clan_account_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00001000u) {
      game_modes_ = from.game_modes_;
    }
    if (cached_has_bits & 0x00002000u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    if (cached_has_bits & 0x00004000u) {
      matchlanguages_ = from.matchlanguages_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatch::CopyFrom(const CMsgStartFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStartFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatch::Swap(CMsgStartFindingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartFindingMatch::InternalSwap(CMsgStartFindingMatch* other) {
  key_.Swap(&other->key_);
  game_language_name_.Swap(&other->game_language_name_);
  std::swap(ping_data_, other->ping_data_);
  std::swap(client_version_, other->client_version_);
  std::swap(match_type_, other->match_type_);
  std::swap(team_id_, other->team_id_);
  std::swap(game_language_enum_, other->game_language_enum_);
  std::swap(region_select_flags_, other->region_select_flags_);
  std::swap(solo_queue_, other->solo_queue_);
  std::swap(bot_script_index_, other->bot_script_index_);
  std::swap(steam_clan_account_id_, other->steam_clan_account_id_);
  std::swap(matchgroups_, other->matchgroups_);
  std::swap(game_modes_, other->game_modes_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(matchlanguages_, other->matchlanguages_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStartFindingMatch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStartFindingMatch

// optional string key = 1;
bool CMsgStartFindingMatch::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStartFindingMatch::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStartFindingMatch::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStartFindingMatch::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
const ::std::string& CMsgStartFindingMatch::key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.key)
  return key_.GetNoArena();
}
void CMsgStartFindingMatch::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.key)
}
#if LANG_CXX11
void CMsgStartFindingMatch::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStartFindingMatch.key)
}
#endif
void CMsgStartFindingMatch::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStartFindingMatch.key)
}
void CMsgStartFindingMatch::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStartFindingMatch.key)
}
::std::string* CMsgStartFindingMatch::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStartFindingMatch.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartFindingMatch::release_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStartFindingMatch.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartFindingMatch::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStartFindingMatch.key)
}

// optional uint32 matchgroups = 2 [default = 4294967295];
bool CMsgStartFindingMatch::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgStartFindingMatch::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgStartFindingMatch::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgStartFindingMatch::clear_matchgroups() {
  matchgroups_ = 4294967295u;
  clear_has_matchgroups();
}
::google::protobuf::uint32 CMsgStartFindingMatch::matchgroups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.matchgroups)
  return matchgroups_;
}
void CMsgStartFindingMatch::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.matchgroups)
}

// optional uint32 client_version = 3;
bool CMsgStartFindingMatch::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgStartFindingMatch::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgStartFindingMatch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgStartFindingMatch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgStartFindingMatch::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.client_version)
  return client_version_;
}
void CMsgStartFindingMatch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.client_version)
}

// optional uint32 game_modes = 4 [default = 4294967295];
bool CMsgStartFindingMatch::has_game_modes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgStartFindingMatch::set_has_game_modes() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgStartFindingMatch::clear_has_game_modes() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgStartFindingMatch::clear_game_modes() {
  game_modes_ = 4294967295u;
  clear_has_game_modes();
}
::google::protobuf::uint32 CMsgStartFindingMatch::game_modes() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.game_modes)
  return game_modes_;
}
void CMsgStartFindingMatch::set_game_modes(::google::protobuf::uint32 value) {
  set_has_game_modes();
  game_modes_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.game_modes)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty = 5 [default = BOT_DIFFICULTY_HARD];
bool CMsgStartFindingMatch::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgStartFindingMatch::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgStartFindingMatch::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgStartFindingMatch::clear_bot_difficulty() {
  bot_difficulty_ = 3;
  clear_has_bot_difficulty();
}
::proto::dota::DOTABotDifficulty CMsgStartFindingMatch::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.bot_difficulty)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_);
}
void CMsgStartFindingMatch::set_bot_difficulty(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.bot_difficulty)
}

// optional .proto.dota.MatchType match_type = 6 [default = MATCH_TYPE_CASUAL];
bool CMsgStartFindingMatch::has_match_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgStartFindingMatch::set_has_match_type() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgStartFindingMatch::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgStartFindingMatch::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
::proto::dota::MatchType CMsgStartFindingMatch::match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.match_type)
  return static_cast< ::proto::dota::MatchType >(match_type_);
}
void CMsgStartFindingMatch::set_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.match_type)
}

// optional uint32 matchlanguages = 7 [default = 4294967295];
bool CMsgStartFindingMatch::has_matchlanguages() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgStartFindingMatch::set_has_matchlanguages() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgStartFindingMatch::clear_has_matchlanguages() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgStartFindingMatch::clear_matchlanguages() {
  matchlanguages_ = 4294967295u;
  clear_has_matchlanguages();
}
::google::protobuf::uint32 CMsgStartFindingMatch::matchlanguages() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.matchlanguages)
  return matchlanguages_;
}
void CMsgStartFindingMatch::set_matchlanguages(::google::protobuf::uint32 value) {
  set_has_matchlanguages();
  matchlanguages_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.matchlanguages)
}

// optional uint32 team_id = 8;
bool CMsgStartFindingMatch::has_team_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgStartFindingMatch::set_has_team_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgStartFindingMatch::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgStartFindingMatch::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgStartFindingMatch::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.team_id)
  return team_id_;
}
void CMsgStartFindingMatch::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.team_id)
}

// optional .proto.dota.MatchLanguages game_language_enum = 10 [default = MATCH_LANGUAGE_INVALID];
bool CMsgStartFindingMatch::has_game_language_enum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgStartFindingMatch::set_has_game_language_enum() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgStartFindingMatch::clear_has_game_language_enum() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgStartFindingMatch::clear_game_language_enum() {
  game_language_enum_ = 0;
  clear_has_game_language_enum();
}
::proto::dota::MatchLanguages CMsgStartFindingMatch::game_language_enum() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.game_language_enum)
  return static_cast< ::proto::dota::MatchLanguages >(game_language_enum_);
}
void CMsgStartFindingMatch::set_game_language_enum(::proto::dota::MatchLanguages value) {
  assert(::proto::dota::MatchLanguages_IsValid(value));
  set_has_game_language_enum();
  game_language_enum_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.game_language_enum)
}

// optional string game_language_name = 11;
bool CMsgStartFindingMatch::has_game_language_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStartFindingMatch::set_has_game_language_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStartFindingMatch::clear_has_game_language_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStartFindingMatch::clear_game_language_name() {
  game_language_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_language_name();
}
const ::std::string& CMsgStartFindingMatch::game_language_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.game_language_name)
  return game_language_name_.GetNoArena();
}
void CMsgStartFindingMatch::set_game_language_name(const ::std::string& value) {
  set_has_game_language_name();
  game_language_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.game_language_name)
}
#if LANG_CXX11
void CMsgStartFindingMatch::set_game_language_name(::std::string&& value) {
  set_has_game_language_name();
  game_language_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStartFindingMatch.game_language_name)
}
#endif
void CMsgStartFindingMatch::set_game_language_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_language_name();
  game_language_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStartFindingMatch.game_language_name)
}
void CMsgStartFindingMatch::set_game_language_name(const char* value, size_t size) {
  set_has_game_language_name();
  game_language_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStartFindingMatch.game_language_name)
}
::std::string* CMsgStartFindingMatch::mutable_game_language_name() {
  set_has_game_language_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStartFindingMatch.game_language_name)
  return game_language_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartFindingMatch::release_game_language_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStartFindingMatch.game_language_name)
  clear_has_game_language_name();
  return game_language_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartFindingMatch::set_allocated_game_language_name(::std::string* game_language_name) {
  if (game_language_name != NULL) {
    set_has_game_language_name();
  } else {
    clear_has_game_language_name();
  }
  game_language_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_language_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStartFindingMatch.game_language_name)
}

// optional .proto.dota.CMsgClientPingData ping_data = 12;
bool CMsgStartFindingMatch::has_ping_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgStartFindingMatch::set_has_ping_data() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgStartFindingMatch::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgStartFindingMatch::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::proto::dota::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
const ::proto::dota::CMsgClientPingData& CMsgStartFindingMatch::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.ping_data)
  return ping_data_ != NULL ? *ping_data_
                         : *::proto::dota::CMsgClientPingData::internal_default_instance();
}
::proto::dota::CMsgClientPingData* CMsgStartFindingMatch::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) {
    ping_data_ = new ::proto::dota::CMsgClientPingData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStartFindingMatch.ping_data)
  return ping_data_;
}
::proto::dota::CMsgClientPingData* CMsgStartFindingMatch::release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStartFindingMatch.ping_data)
  clear_has_ping_data();
  ::proto::dota::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
void CMsgStartFindingMatch::set_allocated_ping_data(::proto::dota::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStartFindingMatch.ping_data)
}

// optional uint32 region_select_flags = 13;
bool CMsgStartFindingMatch::has_region_select_flags() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgStartFindingMatch::set_has_region_select_flags() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgStartFindingMatch::clear_has_region_select_flags() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgStartFindingMatch::clear_region_select_flags() {
  region_select_flags_ = 0u;
  clear_has_region_select_flags();
}
::google::protobuf::uint32 CMsgStartFindingMatch::region_select_flags() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.region_select_flags)
  return region_select_flags_;
}
void CMsgStartFindingMatch::set_region_select_flags(::google::protobuf::uint32 value) {
  set_has_region_select_flags();
  region_select_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.region_select_flags)
}

// optional bool solo_queue = 14;
bool CMsgStartFindingMatch::has_solo_queue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgStartFindingMatch::set_has_solo_queue() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgStartFindingMatch::clear_has_solo_queue() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgStartFindingMatch::clear_solo_queue() {
  solo_queue_ = false;
  clear_has_solo_queue();
}
bool CMsgStartFindingMatch::solo_queue() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.solo_queue)
  return solo_queue_;
}
void CMsgStartFindingMatch::set_solo_queue(bool value) {
  set_has_solo_queue();
  solo_queue_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.solo_queue)
}

// optional uint32 bot_script_index = 15;
bool CMsgStartFindingMatch::has_bot_script_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgStartFindingMatch::set_has_bot_script_index() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgStartFindingMatch::clear_has_bot_script_index() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgStartFindingMatch::clear_bot_script_index() {
  bot_script_index_ = 0u;
  clear_has_bot_script_index();
}
::google::protobuf::uint32 CMsgStartFindingMatch::bot_script_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.bot_script_index)
  return bot_script_index_;
}
void CMsgStartFindingMatch::set_bot_script_index(::google::protobuf::uint32 value) {
  set_has_bot_script_index();
  bot_script_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.bot_script_index)
}

// optional uint32 steam_clan_account_id = 16;
bool CMsgStartFindingMatch::has_steam_clan_account_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgStartFindingMatch::set_has_steam_clan_account_id() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgStartFindingMatch::clear_has_steam_clan_account_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgStartFindingMatch::clear_steam_clan_account_id() {
  steam_clan_account_id_ = 0u;
  clear_has_steam_clan_account_id();
}
::google::protobuf::uint32 CMsgStartFindingMatch::steam_clan_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatch.steam_clan_account_id)
  return steam_clan_account_id_;
}
void CMsgStartFindingMatch::set_steam_clan_account_id(::google::protobuf::uint32 value) {
  set_has_steam_clan_account_id();
  steam_clan_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatch.steam_clan_account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgStartFindingMatchResult::kLegacyGenericEresultFieldNumber;
const int CMsgStartFindingMatchResult::kResultFieldNumber;
const int CMsgStartFindingMatchResult::kErrorTokenFieldNumber;
const int CMsgStartFindingMatchResult::kDebugMessageFieldNumber;
const int CMsgStartFindingMatchResult::kResponsiblePartyMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStartFindingMatchResult::CMsgStartFindingMatchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStartFindingMatchResult)
}
CMsgStartFindingMatchResult::CMsgStartFindingMatchResult(const CMsgStartFindingMatchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      responsible_party_members_(from.responsible_party_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_token()) {
    error_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_token_);
  }
  debug_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug_message()) {
    debug_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
  }
  ::memcpy(&result_, &from.result_,
    reinterpret_cast<char*>(&legacy_generic_eresult_) -
    reinterpret_cast<char*>(&result_) + sizeof(legacy_generic_eresult_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStartFindingMatchResult)
}

void CMsgStartFindingMatchResult::SharedCtor() {
  _cached_size_ = 0;
  error_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  legacy_generic_eresult_ = 2u;
}

CMsgStartFindingMatchResult::~CMsgStartFindingMatchResult() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStartFindingMatchResult)
  SharedDtor();
}

void CMsgStartFindingMatchResult::SharedDtor() {
  error_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  debug_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgStartFindingMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStartFindingMatchResult::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStartFindingMatchResult& CMsgStartFindingMatchResult::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStartFindingMatchResult* CMsgStartFindingMatchResult::New(::google::protobuf::Arena* arena) const {
  CMsgStartFindingMatchResult* n = new CMsgStartFindingMatchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStartFindingMatchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStartFindingMatchResult)
  responsible_party_members_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_error_token()) {
      GOOGLE_DCHECK(!error_token_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*error_token_.UnsafeRawStringPointer())->clear();
    }
    if (has_debug_message()) {
      GOOGLE_DCHECK(!debug_message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*debug_message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    result_ = 0;
    legacy_generic_eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStartFindingMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStartFindingMatchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_generic_eresult = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_legacy_generic_eresult();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_generic_eresult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EStartFindingMatchResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::EStartFindingMatchResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string error_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_token().data(), this->error_token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatchResult.error_token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string debug_message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug_message().data(), this->debug_message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgStartFindingMatchResult.debug_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 responsible_party_members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 41u, input, this->mutable_responsible_party_members())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_responsible_party_members())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStartFindingMatchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStartFindingMatchResult)
  return false;
#undef DO_
}

void CMsgStartFindingMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStartFindingMatchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_generic_eresult(), output);
  }

  // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), this->error_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.error_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_token(), output);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), this->debug_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.debug_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->debug_message(), output);
  }

  // repeated fixed64 responsible_party_members = 5;
  for (int i = 0, n = this->responsible_party_members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      5, this->responsible_party_members(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStartFindingMatchResult)
}

::google::protobuf::uint8* CMsgStartFindingMatchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStartFindingMatchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_generic_eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_generic_eresult(), target);
  }

  // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string error_token = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_token().data(), this->error_token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.error_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_token(), target);
  }

  // optional string debug_message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug_message().data(), this->debug_message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgStartFindingMatchResult.debug_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->debug_message(), target);
  }

  // repeated fixed64 responsible_party_members = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(5, this->responsible_party_members_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStartFindingMatchResult)
  return target;
}

size_t CMsgStartFindingMatchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStartFindingMatchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 responsible_party_members = 5;
  {
    unsigned int count = this->responsible_party_members_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->responsible_party_members_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string error_token = 3;
    if (has_error_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_token());
    }

    // optional string debug_message = 4;
    if (has_debug_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_message());
    }

    // optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 legacy_generic_eresult = 1 [default = 2];
    if (has_legacy_generic_eresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_generic_eresult());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStartFindingMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStartFindingMatchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStartFindingMatchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStartFindingMatchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStartFindingMatchResult)
    MergeFrom(*source);
  }
}

void CMsgStartFindingMatchResult::MergeFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStartFindingMatchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  responsible_party_members_.MergeFrom(from.responsible_party_members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error_token();
      error_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_token_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_debug_message();
      debug_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_generic_eresult_ = from.legacy_generic_eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgStartFindingMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStartFindingMatchResult::CopyFrom(const CMsgStartFindingMatchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStartFindingMatchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStartFindingMatchResult::IsInitialized() const {
  return true;
}

void CMsgStartFindingMatchResult::Swap(CMsgStartFindingMatchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStartFindingMatchResult::InternalSwap(CMsgStartFindingMatchResult* other) {
  responsible_party_members_.InternalSwap(&other->responsible_party_members_);
  error_token_.Swap(&other->error_token_);
  debug_message_.Swap(&other->debug_message_);
  std::swap(result_, other->result_);
  std::swap(legacy_generic_eresult_, other->legacy_generic_eresult_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStartFindingMatchResult::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStartFindingMatchResult

// optional uint32 legacy_generic_eresult = 1 [default = 2];
bool CMsgStartFindingMatchResult::has_legacy_generic_eresult() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgStartFindingMatchResult::set_has_legacy_generic_eresult() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgStartFindingMatchResult::clear_has_legacy_generic_eresult() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgStartFindingMatchResult::clear_legacy_generic_eresult() {
  legacy_generic_eresult_ = 2u;
  clear_has_legacy_generic_eresult();
}
::google::protobuf::uint32 CMsgStartFindingMatchResult::legacy_generic_eresult() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatchResult.legacy_generic_eresult)
  return legacy_generic_eresult_;
}
void CMsgStartFindingMatchResult::set_legacy_generic_eresult(::google::protobuf::uint32 value) {
  set_has_legacy_generic_eresult();
  legacy_generic_eresult_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatchResult.legacy_generic_eresult)
}

// optional .proto.dota.EStartFindingMatchResult result = 2 [default = k_EStartFindingMatchResult_Invalid];
bool CMsgStartFindingMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgStartFindingMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgStartFindingMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgStartFindingMatchResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::EStartFindingMatchResult CMsgStartFindingMatchResult::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatchResult.result)
  return static_cast< ::proto::dota::EStartFindingMatchResult >(result_);
}
void CMsgStartFindingMatchResult::set_result(::proto::dota::EStartFindingMatchResult value) {
  assert(::proto::dota::EStartFindingMatchResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatchResult.result)
}

// optional string error_token = 3;
bool CMsgStartFindingMatchResult::has_error_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgStartFindingMatchResult::set_has_error_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgStartFindingMatchResult::clear_has_error_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgStartFindingMatchResult::clear_error_token() {
  error_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_token();
}
const ::std::string& CMsgStartFindingMatchResult::error_token() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatchResult.error_token)
  return error_token_.GetNoArena();
}
void CMsgStartFindingMatchResult::set_error_token(const ::std::string& value) {
  set_has_error_token();
  error_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatchResult.error_token)
}
#if LANG_CXX11
void CMsgStartFindingMatchResult::set_error_token(::std::string&& value) {
  set_has_error_token();
  error_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStartFindingMatchResult.error_token)
}
#endif
void CMsgStartFindingMatchResult::set_error_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error_token();
  error_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStartFindingMatchResult.error_token)
}
void CMsgStartFindingMatchResult::set_error_token(const char* value, size_t size) {
  set_has_error_token();
  error_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStartFindingMatchResult.error_token)
}
::std::string* CMsgStartFindingMatchResult::mutable_error_token() {
  set_has_error_token();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStartFindingMatchResult.error_token)
  return error_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartFindingMatchResult::release_error_token() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStartFindingMatchResult.error_token)
  clear_has_error_token();
  return error_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartFindingMatchResult::set_allocated_error_token(::std::string* error_token) {
  if (error_token != NULL) {
    set_has_error_token();
  } else {
    clear_has_error_token();
  }
  error_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_token);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStartFindingMatchResult.error_token)
}

// optional string debug_message = 4;
bool CMsgStartFindingMatchResult::has_debug_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgStartFindingMatchResult::set_has_debug_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgStartFindingMatchResult::clear_has_debug_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgStartFindingMatchResult::clear_debug_message() {
  debug_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug_message();
}
const ::std::string& CMsgStartFindingMatchResult::debug_message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatchResult.debug_message)
  return debug_message_.GetNoArena();
}
void CMsgStartFindingMatchResult::set_debug_message(const ::std::string& value) {
  set_has_debug_message();
  debug_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatchResult.debug_message)
}
#if LANG_CXX11
void CMsgStartFindingMatchResult::set_debug_message(::std::string&& value) {
  set_has_debug_message();
  debug_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgStartFindingMatchResult.debug_message)
}
#endif
void CMsgStartFindingMatchResult::set_debug_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug_message();
  debug_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgStartFindingMatchResult.debug_message)
}
void CMsgStartFindingMatchResult::set_debug_message(const char* value, size_t size) {
  set_has_debug_message();
  debug_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgStartFindingMatchResult.debug_message)
}
::std::string* CMsgStartFindingMatchResult::mutable_debug_message() {
  set_has_debug_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgStartFindingMatchResult.debug_message)
  return debug_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgStartFindingMatchResult::release_debug_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgStartFindingMatchResult.debug_message)
  clear_has_debug_message();
  return debug_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgStartFindingMatchResult::set_allocated_debug_message(::std::string* debug_message) {
  if (debug_message != NULL) {
    set_has_debug_message();
  } else {
    clear_has_debug_message();
  }
  debug_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug_message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgStartFindingMatchResult.debug_message)
}

// repeated fixed64 responsible_party_members = 5;
int CMsgStartFindingMatchResult::responsible_party_members_size() const {
  return responsible_party_members_.size();
}
void CMsgStartFindingMatchResult::clear_responsible_party_members() {
  responsible_party_members_.Clear();
}
::google::protobuf::uint64 CMsgStartFindingMatchResult::responsible_party_members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgStartFindingMatchResult.responsible_party_members)
  return responsible_party_members_.Get(index);
}
void CMsgStartFindingMatchResult::set_responsible_party_members(int index, ::google::protobuf::uint64 value) {
  responsible_party_members_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgStartFindingMatchResult.responsible_party_members)
}
void CMsgStartFindingMatchResult::add_responsible_party_members(::google::protobuf::uint64 value) {
  responsible_party_members_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgStartFindingMatchResult.responsible_party_members)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgStartFindingMatchResult::responsible_party_members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgStartFindingMatchResult.responsible_party_members)
  return responsible_party_members_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgStartFindingMatchResult::mutable_responsible_party_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgStartFindingMatchResult.responsible_party_members)
  return &responsible_party_members_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgStopFindingMatch::CMsgStopFindingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgStopFindingMatch)
}
CMsgStopFindingMatch::CMsgStopFindingMatch(const CMsgStopFindingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgStopFindingMatch)
}

void CMsgStopFindingMatch::SharedCtor() {
  _cached_size_ = 0;
}

CMsgStopFindingMatch::~CMsgStopFindingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgStopFindingMatch)
  SharedDtor();
}

void CMsgStopFindingMatch::SharedDtor() {
}

void CMsgStopFindingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgStopFindingMatch::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgStopFindingMatch& CMsgStopFindingMatch::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgStopFindingMatch* CMsgStopFindingMatch::New(::google::protobuf::Arena* arena) const {
  CMsgStopFindingMatch* n = new CMsgStopFindingMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgStopFindingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgStopFindingMatch)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgStopFindingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgStopFindingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgStopFindingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgStopFindingMatch)
  return false;
#undef DO_
}

void CMsgStopFindingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgStopFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgStopFindingMatch)
}

::google::protobuf::uint8* CMsgStopFindingMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgStopFindingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgStopFindingMatch)
  return target;
}

size_t CMsgStopFindingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgStopFindingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgStopFindingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgStopFindingMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgStopFindingMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgStopFindingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgStopFindingMatch)
    MergeFrom(*source);
  }
}

void CMsgStopFindingMatch::MergeFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgStopFindingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgStopFindingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgStopFindingMatch::CopyFrom(const CMsgStopFindingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgStopFindingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgStopFindingMatch::IsInitialized() const {
  return true;
}

void CMsgStopFindingMatch::Swap(CMsgStopFindingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgStopFindingMatch::InternalSwap(CMsgStopFindingMatch* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgStopFindingMatch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgStopFindingMatch

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyBuilderOptions::kAdditionalSlotsFieldNumber;
const int CMsgPartyBuilderOptions::kMatchTypeFieldNumber;
const int CMsgPartyBuilderOptions::kMatchgroupsFieldNumber;
const int CMsgPartyBuilderOptions::kClientVersionFieldNumber;
const int CMsgPartyBuilderOptions::kLanguageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyBuilderOptions::CMsgPartyBuilderOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyBuilderOptions)
}
CMsgPartyBuilderOptions::CMsgPartyBuilderOptions(const CMsgPartyBuilderOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_slots_, &from.additional_slots_,
    reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&additional_slots_) + sizeof(language_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyBuilderOptions)
}

void CMsgPartyBuilderOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&additional_slots_, 0, reinterpret_cast<char*>(&language_) -
    reinterpret_cast<char*>(&additional_slots_) + sizeof(language_));
}

CMsgPartyBuilderOptions::~CMsgPartyBuilderOptions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyBuilderOptions)
  SharedDtor();
}

void CMsgPartyBuilderOptions::SharedDtor() {
}

void CMsgPartyBuilderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPartyBuilderOptions::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPartyBuilderOptions& CMsgPartyBuilderOptions::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPartyBuilderOptions* CMsgPartyBuilderOptions::New(::google::protobuf::Arena* arena) const {
  CMsgPartyBuilderOptions* n = new CMsgPartyBuilderOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPartyBuilderOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyBuilderOptions)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&additional_slots_, 0, reinterpret_cast<char*>(&language_) -
      reinterpret_cast<char*>(&additional_slots_) + sizeof(language_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPartyBuilderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyBuilderOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_slots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_additional_slots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchType_IsValid(value)) {
            set_match_type(static_cast< ::proto::dota::MatchType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 matchgroups = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_matchgroups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &matchgroups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::MatchLanguages_IsValid(value)) {
            set_language(static_cast< ::proto::dota::MatchLanguages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyBuilderOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyBuilderOptions)
  return false;
#undef DO_
}

void CMsgPartyBuilderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_slots(), output);
  }

  // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->match_type(), output);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->matchgroups(), output);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->client_version(), output);
  }

  // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->language(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyBuilderOptions)
}

::google::protobuf::uint8* CMsgPartyBuilderOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyBuilderOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_slots = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_slots(), target);
  }

  // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->match_type(), target);
  }

  // optional uint32 matchgroups = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->matchgroups(), target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->client_version(), target);
  }

  // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->language(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyBuilderOptions)
  return target;
}

size_t CMsgPartyBuilderOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyBuilderOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 additional_slots = 1;
    if (has_additional_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_slots());
    }

    // optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->match_type());
    }

    // optional uint32 matchgroups = 3;
    if (has_matchgroups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->matchgroups());
    }

    // optional uint32 client_version = 4;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPartyBuilderOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyBuilderOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPartyBuilderOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyBuilderOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyBuilderOptions)
    MergeFrom(*source);
  }
}

void CMsgPartyBuilderOptions::MergeFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyBuilderOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      additional_slots_ = from.additional_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      match_type_ = from.match_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      matchgroups_ = from.matchgroups_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyBuilderOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyBuilderOptions::CopyFrom(const CMsgPartyBuilderOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyBuilderOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyBuilderOptions::IsInitialized() const {
  return true;
}

void CMsgPartyBuilderOptions::Swap(CMsgPartyBuilderOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyBuilderOptions::InternalSwap(CMsgPartyBuilderOptions* other) {
  std::swap(additional_slots_, other->additional_slots_);
  std::swap(match_type_, other->match_type_);
  std::swap(matchgroups_, other->matchgroups_);
  std::swap(client_version_, other->client_version_);
  std::swap(language_, other->language_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPartyBuilderOptions::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPartyBuilderOptions

// optional uint32 additional_slots = 1;
bool CMsgPartyBuilderOptions::has_additional_slots() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPartyBuilderOptions::set_has_additional_slots() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPartyBuilderOptions::clear_has_additional_slots() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPartyBuilderOptions::clear_additional_slots() {
  additional_slots_ = 0u;
  clear_has_additional_slots();
}
::google::protobuf::uint32 CMsgPartyBuilderOptions::additional_slots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyBuilderOptions.additional_slots)
  return additional_slots_;
}
void CMsgPartyBuilderOptions::set_additional_slots(::google::protobuf::uint32 value) {
  set_has_additional_slots();
  additional_slots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyBuilderOptions.additional_slots)
}

// optional .proto.dota.MatchType match_type = 2 [default = MATCH_TYPE_CASUAL];
bool CMsgPartyBuilderOptions::has_match_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPartyBuilderOptions::set_has_match_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPartyBuilderOptions::clear_has_match_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPartyBuilderOptions::clear_match_type() {
  match_type_ = 0;
  clear_has_match_type();
}
::proto::dota::MatchType CMsgPartyBuilderOptions::match_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyBuilderOptions.match_type)
  return static_cast< ::proto::dota::MatchType >(match_type_);
}
void CMsgPartyBuilderOptions::set_match_type(::proto::dota::MatchType value) {
  assert(::proto::dota::MatchType_IsValid(value));
  set_has_match_type();
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyBuilderOptions.match_type)
}

// optional uint32 matchgroups = 3;
bool CMsgPartyBuilderOptions::has_matchgroups() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPartyBuilderOptions::set_has_matchgroups() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPartyBuilderOptions::clear_has_matchgroups() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPartyBuilderOptions::clear_matchgroups() {
  matchgroups_ = 0u;
  clear_has_matchgroups();
}
::google::protobuf::uint32 CMsgPartyBuilderOptions::matchgroups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyBuilderOptions.matchgroups)
  return matchgroups_;
}
void CMsgPartyBuilderOptions::set_matchgroups(::google::protobuf::uint32 value) {
  set_has_matchgroups();
  matchgroups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyBuilderOptions.matchgroups)
}

// optional uint32 client_version = 4;
bool CMsgPartyBuilderOptions::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPartyBuilderOptions::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPartyBuilderOptions::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPartyBuilderOptions::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgPartyBuilderOptions::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyBuilderOptions.client_version)
  return client_version_;
}
void CMsgPartyBuilderOptions::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyBuilderOptions.client_version)
}

// optional .proto.dota.MatchLanguages language = 5 [default = MATCH_LANGUAGE_INVALID];
bool CMsgPartyBuilderOptions::has_language() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPartyBuilderOptions::set_has_language() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPartyBuilderOptions::clear_has_language() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPartyBuilderOptions::clear_language() {
  language_ = 0;
  clear_has_language();
}
::proto::dota::MatchLanguages CMsgPartyBuilderOptions::language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPartyBuilderOptions.language)
  return static_cast< ::proto::dota::MatchLanguages >(language_);
}
void CMsgPartyBuilderOptions::set_language(::proto::dota::MatchLanguages value) {
  assert(::proto::dota::MatchLanguages_IsValid(value));
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPartyBuilderOptions.language)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyUp::kStateFieldNumber;
const int CMsgReadyUp::kReadyUpKeyFieldNumber;
const int CMsgReadyUp::kHardwareSpecsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyUp::CMsgReadyUp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyUp)
}
CMsgReadyUp::CMsgReadyUp(const CMsgReadyUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hardware_specs()) {
    hardware_specs_ = new ::proto::dota::CDOTAClientHardwareSpecs(*from.hardware_specs_);
  } else {
    hardware_specs_ = NULL;
  }
  ::memcpy(&ready_up_key_, &from.ready_up_key_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&ready_up_key_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyUp)
}

void CMsgReadyUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hardware_specs_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&hardware_specs_) + sizeof(state_));
}

CMsgReadyUp::~CMsgReadyUp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyUp)
  SharedDtor();
}

void CMsgReadyUp::SharedDtor() {
  if (this != internal_default_instance()) {
    delete hardware_specs_;
  }
}

void CMsgReadyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReadyUp::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReadyUp& CMsgReadyUp::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgReadyUp* CMsgReadyUp::New(::google::protobuf::Arena* arena) const {
  CMsgReadyUp* n = new CMsgReadyUp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReadyUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyUp)
  if (has_hardware_specs()) {
    GOOGLE_DCHECK(hardware_specs_ != NULL);
    hardware_specs_->::proto::dota::CDOTAClientHardwareSpecs::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&ready_up_key_, 0, reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&ready_up_key_) + sizeof(state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyUp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyReadyState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::DOTALobbyReadyState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ready_up_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_ready_up_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ready_up_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyUp)
  return false;
#undef DO_
}

void CMsgReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->ready_up_key(), output);
  }

  // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hardware_specs_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyUp)
}

::google::protobuf::uint8* CMsgReadyUp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // optional fixed64 ready_up_key = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->ready_up_key(), target);
  }

  // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hardware_specs_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyUp)
  return target;
}

size_t CMsgReadyUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
    if (has_hardware_specs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->hardware_specs_);
    }

    // optional fixed64 ready_up_key = 2;
    if (has_ready_up_key()) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReadyUp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyUp)
    MergeFrom(*source);
  }
}

void CMsgReadyUp::MergeFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_hardware_specs()->::proto::dota::CDOTAClientHardwareSpecs::MergeFrom(from.hardware_specs());
    }
    if (cached_has_bits & 0x00000002u) {
      ready_up_key_ = from.ready_up_key_;
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUp::CopyFrom(const CMsgReadyUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUp::IsInitialized() const {
  return true;
}

void CMsgReadyUp::Swap(CMsgReadyUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyUp::InternalSwap(CMsgReadyUp* other) {
  std::swap(hardware_specs_, other->hardware_specs_);
  std::swap(ready_up_key_, other->ready_up_key_);
  std::swap(state_, other->state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReadyUp::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgReadyUp

// optional .proto.dota.DOTALobbyReadyState state = 1 [default = DOTALobbyReadyState_UNDECLARED];
bool CMsgReadyUp::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgReadyUp::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgReadyUp::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgReadyUp::clear_state() {
  state_ = 0;
  clear_has_state();
}
::proto::dota::DOTALobbyReadyState CMsgReadyUp::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUp.state)
  return static_cast< ::proto::dota::DOTALobbyReadyState >(state_);
}
void CMsgReadyUp::set_state(::proto::dota::DOTALobbyReadyState value) {
  assert(::proto::dota::DOTALobbyReadyState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyUp.state)
}

// optional fixed64 ready_up_key = 2;
bool CMsgReadyUp::has_ready_up_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgReadyUp::set_has_ready_up_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgReadyUp::clear_has_ready_up_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgReadyUp::clear_ready_up_key() {
  ready_up_key_ = GOOGLE_ULONGLONG(0);
  clear_has_ready_up_key();
}
::google::protobuf::uint64 CMsgReadyUp::ready_up_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUp.ready_up_key)
  return ready_up_key_;
}
void CMsgReadyUp::set_ready_up_key(::google::protobuf::uint64 value) {
  set_has_ready_up_key();
  ready_up_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyUp.ready_up_key)
}

// optional .proto.dota.CDOTAClientHardwareSpecs hardware_specs = 3;
bool CMsgReadyUp::has_hardware_specs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgReadyUp::set_has_hardware_specs() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgReadyUp::clear_has_hardware_specs() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgReadyUp::clear_hardware_specs() {
  if (hardware_specs_ != NULL) hardware_specs_->::proto::dota::CDOTAClientHardwareSpecs::Clear();
  clear_has_hardware_specs();
}
const ::proto::dota::CDOTAClientHardwareSpecs& CMsgReadyUp::hardware_specs() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUp.hardware_specs)
  return hardware_specs_ != NULL ? *hardware_specs_
                         : *::proto::dota::CDOTAClientHardwareSpecs::internal_default_instance();
}
::proto::dota::CDOTAClientHardwareSpecs* CMsgReadyUp::mutable_hardware_specs() {
  set_has_hardware_specs();
  if (hardware_specs_ == NULL) {
    hardware_specs_ = new ::proto::dota::CDOTAClientHardwareSpecs;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgReadyUp.hardware_specs)
  return hardware_specs_;
}
::proto::dota::CDOTAClientHardwareSpecs* CMsgReadyUp::release_hardware_specs() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgReadyUp.hardware_specs)
  clear_has_hardware_specs();
  ::proto::dota::CDOTAClientHardwareSpecs* temp = hardware_specs_;
  hardware_specs_ = NULL;
  return temp;
}
void CMsgReadyUp::set_allocated_hardware_specs(::proto::dota::CDOTAClientHardwareSpecs* hardware_specs) {
  delete hardware_specs_;
  hardware_specs_ = hardware_specs;
  if (hardware_specs) {
    set_has_hardware_specs();
  } else {
    clear_has_hardware_specs();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgReadyUp.hardware_specs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReadyUpStatus::kLobbyIdFieldNumber;
const int CMsgReadyUpStatus::kAcceptedIdsFieldNumber;
const int CMsgReadyUpStatus::kDeclinedIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReadyUpStatus::CMsgReadyUpStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReadyUpStatus)
}
CMsgReadyUpStatus::CMsgReadyUpStatus(const CMsgReadyUpStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      accepted_ids_(from.accepted_ids_),
      declined_ids_(from.declined_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReadyUpStatus)
}

void CMsgReadyUpStatus::SharedCtor() {
  _cached_size_ = 0;
  lobby_id_ = GOOGLE_ULONGLONG(0);
}

CMsgReadyUpStatus::~CMsgReadyUpStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReadyUpStatus)
  SharedDtor();
}

void CMsgReadyUpStatus::SharedDtor() {
}

void CMsgReadyUpStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgReadyUpStatus::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgReadyUpStatus& CMsgReadyUpStatus::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgReadyUpStatus* CMsgReadyUpStatus::New(::google::protobuf::Arena* arena) const {
  CMsgReadyUpStatus* n = new CMsgReadyUpStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgReadyUpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReadyUpStatus)
  accepted_ids_.Clear();
  declined_ids_.Clear();
  lobby_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgReadyUpStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReadyUpStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 accepted_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_accepted_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accepted_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 declined_ids = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_declined_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_declined_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReadyUpStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReadyUpStatus)
  return false;
#undef DO_
}

void CMsgReadyUpStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReadyUpStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // repeated uint32 accepted_ids = 2;
  for (int i = 0, n = this->accepted_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->accepted_ids(i), output);
  }

  // repeated uint32 declined_ids = 3;
  for (int i = 0, n = this->declined_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->declined_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReadyUpStatus)
}

::google::protobuf::uint8* CMsgReadyUpStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReadyUpStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // repeated uint32 accepted_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->accepted_ids_, target);

  // repeated uint32 declined_ids = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->declined_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReadyUpStatus)
  return target;
}

size_t CMsgReadyUpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReadyUpStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 accepted_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->accepted_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->accepted_ids_size());
    total_size += data_size;
  }

  // repeated uint32 declined_ids = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->declined_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->declined_ids_size());
    total_size += data_size;
  }

  // optional fixed64 lobby_id = 1;
  if (has_lobby_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgReadyUpStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReadyUpStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgReadyUpStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReadyUpStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReadyUpStatus)
    MergeFrom(*source);
  }
}

void CMsgReadyUpStatus::MergeFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReadyUpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accepted_ids_.MergeFrom(from.accepted_ids_);
  declined_ids_.MergeFrom(from.declined_ids_);
  if (from.has_lobby_id()) {
    set_lobby_id(from.lobby_id());
  }
}

void CMsgReadyUpStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReadyUpStatus::CopyFrom(const CMsgReadyUpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReadyUpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReadyUpStatus::IsInitialized() const {
  return true;
}

void CMsgReadyUpStatus::Swap(CMsgReadyUpStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReadyUpStatus::InternalSwap(CMsgReadyUpStatus* other) {
  accepted_ids_.InternalSwap(&other->accepted_ids_);
  declined_ids_.InternalSwap(&other->declined_ids_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgReadyUpStatus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgReadyUpStatus

// optional fixed64 lobby_id = 1;
bool CMsgReadyUpStatus::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgReadyUpStatus::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgReadyUpStatus::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgReadyUpStatus::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgReadyUpStatus::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUpStatus.lobby_id)
  return lobby_id_;
}
void CMsgReadyUpStatus::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyUpStatus.lobby_id)
}

// repeated uint32 accepted_ids = 2;
int CMsgReadyUpStatus::accepted_ids_size() const {
  return accepted_ids_.size();
}
void CMsgReadyUpStatus::clear_accepted_ids() {
  accepted_ids_.Clear();
}
::google::protobuf::uint32 CMsgReadyUpStatus::accepted_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_.Get(index);
}
void CMsgReadyUpStatus::set_accepted_ids(int index, ::google::protobuf::uint32 value) {
  accepted_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyUpStatus.accepted_ids)
}
void CMsgReadyUpStatus::add_accepted_ids(::google::protobuf::uint32 value) {
  accepted_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgReadyUpStatus.accepted_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::accepted_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgReadyUpStatus.accepted_ids)
  return accepted_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_accepted_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgReadyUpStatus.accepted_ids)
  return &accepted_ids_;
}

// repeated uint32 declined_ids = 3;
int CMsgReadyUpStatus::declined_ids_size() const {
  return declined_ids_.size();
}
void CMsgReadyUpStatus::clear_declined_ids() {
  declined_ids_.Clear();
}
::google::protobuf::uint32 CMsgReadyUpStatus::declined_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgReadyUpStatus.declined_ids)
  return declined_ids_.Get(index);
}
void CMsgReadyUpStatus::set_declined_ids(int index, ::google::protobuf::uint32 value) {
  declined_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgReadyUpStatus.declined_ids)
}
void CMsgReadyUpStatus::add_declined_ids(::google::protobuf::uint32 value) {
  declined_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgReadyUpStatus.declined_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgReadyUpStatus::declined_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgReadyUpStatus.declined_ids)
  return declined_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgReadyUpStatus::mutable_declined_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgReadyUpStatus.declined_ids)
  return &declined_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAbandonCurrentGame::CMsgAbandonCurrentGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAbandonCurrentGame)
}
CMsgAbandonCurrentGame::CMsgAbandonCurrentGame(const CMsgAbandonCurrentGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAbandonCurrentGame)
}

void CMsgAbandonCurrentGame::SharedCtor() {
  _cached_size_ = 0;
}

CMsgAbandonCurrentGame::~CMsgAbandonCurrentGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAbandonCurrentGame)
  SharedDtor();
}

void CMsgAbandonCurrentGame::SharedDtor() {
}

void CMsgAbandonCurrentGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgAbandonCurrentGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgAbandonCurrentGame& CMsgAbandonCurrentGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgAbandonCurrentGame* CMsgAbandonCurrentGame::New(::google::protobuf::Arena* arena) const {
  CMsgAbandonCurrentGame* n = new CMsgAbandonCurrentGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgAbandonCurrentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAbandonCurrentGame)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgAbandonCurrentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAbandonCurrentGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAbandonCurrentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAbandonCurrentGame)
  return false;
#undef DO_
}

void CMsgAbandonCurrentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAbandonCurrentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAbandonCurrentGame)
}

::google::protobuf::uint8* CMsgAbandonCurrentGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAbandonCurrentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAbandonCurrentGame)
  return target;
}

size_t CMsgAbandonCurrentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAbandonCurrentGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgAbandonCurrentGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAbandonCurrentGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgAbandonCurrentGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAbandonCurrentGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAbandonCurrentGame)
    MergeFrom(*source);
  }
}

void CMsgAbandonCurrentGame::MergeFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAbandonCurrentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgAbandonCurrentGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAbandonCurrentGame::CopyFrom(const CMsgAbandonCurrentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAbandonCurrentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAbandonCurrentGame::IsInitialized() const {
  return true;
}

void CMsgAbandonCurrentGame::Swap(CMsgAbandonCurrentGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAbandonCurrentGame::InternalSwap(CMsgAbandonCurrentGame* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgAbandonCurrentGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgAbandonCurrentGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetDetails::kLobbyIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kTeamDetailsFieldNumber;
const int CMsgPracticeLobbySetDetails::kServerRegionFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCmPickFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowCheatsFieldNumber;
const int CMsgPracticeLobbySetDetails::kFillWithBotsFieldNumber;
const int CMsgPracticeLobbySetDetails::kIntroModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllowSpectatingFieldNumber;
const int CMsgPracticeLobbySetDetails::kGameVersionFieldNumber;
const int CMsgPracticeLobbySetDetails::kPassKeyFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueidFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kPenaltyLevelDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kLoadGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kSeriesTypeFieldNumber;
const int CMsgPracticeLobbySetDetails::kRadiantSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kDireSeriesWinsFieldNumber;
const int CMsgPracticeLobbySetDetails::kAllchatFieldNumber;
const int CMsgPracticeLobbySetDetails::kDotaTvDelayFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomDifficultyFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMinPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomMaxPlayersFieldNumber;
const int CMsgPracticeLobbySetDetails::kLanHostPingToServerRegionFieldNumber;
const int CMsgPracticeLobbySetDetails::kVisibilityFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueSeriesIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kLeagueGameIdFieldNumber;
const int CMsgPracticeLobbySetDetails::kCustomGameTimestampFieldNumber;
const int CMsgPracticeLobbySetDetails::kPreviousMatchOverrideFieldNumber;
const int CMsgPracticeLobbySetDetails::kPauseSettingFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDifficultyDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotRadiantFieldNumber;
const int CMsgPracticeLobbySetDetails::kBotDireFieldNumber;
const int CMsgPracticeLobbySetDetails::kSelectionPriorityRulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetDetails)
}
CMsgPracticeLobbySetDetails::CMsgPracticeLobbySetDetails(const CMsgPracticeLobbySetDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      team_details_(from.team_details_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&dota_tv_delay_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(dota_tv_delay_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetDetails)
}

void CMsgPracticeLobbySetDetails::SharedCtor() {
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&bot_dire_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(bot_dire_));
  dota_tv_delay_ = 1;
  _cached_size_ = 0;
}

CMsgPracticeLobbySetDetails::~CMsgPracticeLobbySetDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetDetails)
  SharedDtor();
}

void CMsgPracticeLobbySetDetails::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbySetDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbySetDetails& CMsgPracticeLobbySetDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbySetDetails* CMsgPracticeLobbySetDetails::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbySetDetails* n = new CMsgPracticeLobbySetDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbySetDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetDetails)
  team_details_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_game_name()) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_pass_key()) {
      GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_game_mode()) {
      GOOGLE_DCHECK(!custom_game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_map_name()) {
      GOOGLE_DCHECK(!custom_map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_map_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&cm_pick_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(cm_pick_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&bot_difficulty_radiant_, 0, reinterpret_cast<char*>(&penalty_level_radiant_) -
      reinterpret_cast<char*>(&bot_difficulty_radiant_) + sizeof(penalty_level_radiant_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&penalty_level_dire_, 0, reinterpret_cast<char*>(&custom_game_id_) -
      reinterpret_cast<char*>(&penalty_level_dire_) + sizeof(custom_game_id_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&custom_difficulty_, 0, reinterpret_cast<char*>(&league_game_id_) -
      reinterpret_cast<char*>(&custom_difficulty_) + sizeof(league_game_id_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&custom_game_timestamp_, 0, reinterpret_cast<char*>(&bot_dire_) -
      reinterpret_cast<char*>(&custom_game_timestamp_) + sizeof(bot_dire_));
    dota_tv_delay_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbySetDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_CM_PICK_IsValid(value)) {
            set_cm_pick(static_cast< ::proto::dota::DOTA_CM_PICK >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_cheats = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_allow_cheats();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_cheats_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fill_with_bots = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_fill_with_bots();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fill_with_bots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intro_mode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_intro_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intro_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_spectating = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_allow_spectating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_spectating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAGameVersion_IsValid(value)) {
            set_game_version(static_cast< ::proto::dota::DOTAGameVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(14, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leagueid = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_leagueid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leagueid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_radiant = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_penalty_level_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 penalty_level_dire = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_penalty_level_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penalty_level_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 load_game_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_load_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_series_wins = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_radiant_series_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_series_wins = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_dire_series_wins();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_series_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allchat = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_allchat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allchat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaTVDelay_IsValid(value)) {
            set_dota_tv_delay(static_cast< ::proto::dota::LobbyDotaTVDelay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(24, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool lan = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_lan();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_difficulty = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_custom_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_min_players = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_custom_min_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_min_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 custom_max_players = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_custom_max_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &custom_max_players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_lan_host_ping_to_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTALobbyVisibility_IsValid(value)) {
            set_visibility(static_cast< ::proto::dota::DOTALobbyVisibility >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(273u)) {
          set_has_custom_game_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_series_id = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_league_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_game_id = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_league_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(301u)) {
          set_has_custom_game_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 previous_match_override = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_previous_match_override();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &previous_match_override_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(336u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::LobbyDotaPauseSetting_IsValid(value)) {
            set_pause_setting(static_cast< ::proto::dota::LobbyDotaPauseSetting >(value));
          } else {
            mutable_unknown_fields()->AddVarint(42, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(344u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(43, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_radiant = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_bot_radiant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 bot_dire = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(360u)) {
          set_has_bot_dire();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bot_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(368u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTASelectionPriorityRules_IsValid(value)) {
            set_selection_priority_rules(static_cast< ::proto::dota::DOTASelectionPriorityRules >(value));
          } else {
            mutable_unknown_fields()->AddVarint(46, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetDetails)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->team_details(i), output);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->server_region(), output);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->cm_pick(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->bot_difficulty_radiant(), output);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_cheats(), output);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->fill_with_bots(), output);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->intro_mode(), output);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->allow_spectating(), output);
  }

  // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->game_version(), output);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->pass_key(), output);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->leagueid(), output);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->penalty_level_radiant(), output);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->penalty_level_dire(), output);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->load_game_id(), output);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->series_type(), output);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->radiant_series_wins(), output);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->dire_series_wins(), output);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->allchat(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      24, this->dota_tv_delay(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->lan(), output);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->custom_game_mode(), output);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->custom_map_name(), output);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->custom_difficulty(), output);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(29, this->custom_game_id(), output);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->custom_min_players(), output);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->custom_max_players(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 32;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->lan_host_ping_to_server_region(), output);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->visibility(), output);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(34, this->custom_game_crc(), output);
  }

  // optional uint32 league_series_id = 35;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->league_series_id(), output);
  }

  // optional uint32 league_game_id = 36;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->league_game_id(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(37, this->custom_game_timestamp(), output);
  }

  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->previous_match_override(), output);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->pause_setting(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      43, this->bot_difficulty_dire(), output);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(44, this->bot_radiant(), output);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(45, this->bot_dire(), output);
  }

  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      46, this->selection_priority_rules(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetDetails)
}

::google::protobuf::uint8* CMsgPracticeLobbySetDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  for (unsigned int i = 0, n = this->team_details_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->team_details(i), deterministic, target);
  }

  // optional uint32 server_region = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->server_region(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->cm_pick(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->bot_difficulty_radiant(), target);
  }

  // optional bool allow_cheats = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_cheats(), target);
  }

  // optional bool fill_with_bots = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->fill_with_bots(), target);
  }

  // optional bool intro_mode = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->intro_mode(), target);
  }

  // optional bool allow_spectating = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->allow_spectating(), target);
  }

  // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->game_version(), target);
  }

  // optional string pass_key = 15;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->pass_key(), target);
  }

  // optional uint32 leagueid = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->leagueid(), target);
  }

  // optional uint32 penalty_level_radiant = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->penalty_level_radiant(), target);
  }

  // optional uint32 penalty_level_dire = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->penalty_level_dire(), target);
  }

  // optional uint32 load_game_id = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->load_game_id(), target);
  }

  // optional uint32 series_type = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->series_type(), target);
  }

  // optional uint32 radiant_series_wins = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->radiant_series_wins(), target);
  }

  // optional uint32 dire_series_wins = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->dire_series_wins(), target);
  }

  // optional bool allchat = 23 [default = false];
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->allchat(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      24, this->dota_tv_delay(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool lan = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->lan(), target);
  }

  // optional string custom_game_mode = 26;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->custom_game_mode(), target);
  }

  // optional string custom_map_name = 27;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbySetDetails.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->custom_map_name(), target);
  }

  // optional uint32 custom_difficulty = 28;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->custom_difficulty(), target);
  }

  // optional uint64 custom_game_id = 29;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(29, this->custom_game_id(), target);
  }

  // optional uint32 custom_min_players = 30;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->custom_min_players(), target);
  }

  // optional uint32 custom_max_players = 31;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->custom_max_players(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 32;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->lan_host_ping_to_server_region(), target);
  }

  // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->visibility(), target);
  }

  // optional fixed64 custom_game_crc = 34;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(34, this->custom_game_crc(), target);
  }

  // optional uint32 league_series_id = 35;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->league_series_id(), target);
  }

  // optional uint32 league_game_id = 36;
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->league_game_id(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 custom_game_timestamp = 37;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(37, this->custom_game_timestamp(), target);
  }

  // optional uint64 previous_match_override = 38;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->previous_match_override(), target);
  }

  // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->pause_setting(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      43, this->bot_difficulty_dire(), target);
  }

  // optional uint64 bot_radiant = 44;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(44, this->bot_radiant(), target);
  }

  // optional uint64 bot_dire = 45;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(45, this->bot_dire(), target);
  }

  // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      46, this->selection_priority_rules(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetDetails)
  return target;
}

size_t CMsgPracticeLobbySetDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CLobbyTeamDetails team_details = 3;
  {
    unsigned int count = this->team_details_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_details(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional string pass_key = 15;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional string custom_game_mode = 26;
    if (has_custom_game_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 27;
    if (has_custom_map_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 server_region = 4;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 game_mode = 5;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
    if (has_cm_pick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cm_pick());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_radiant());
    }

    // optional bool allow_cheats = 10;
    if (has_allow_cheats()) {
      total_size += 1 + 1;
    }

    // optional bool fill_with_bots = 11;
    if (has_fill_with_bots()) {
      total_size += 1 + 1;
    }

    // optional bool intro_mode = 12;
    if (has_intro_mode()) {
      total_size += 1 + 1;
    }

    // optional bool allow_spectating = 13;
    if (has_allow_spectating()) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_version());
    }

    // optional uint32 leagueid = 16;
    if (has_leagueid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leagueid());
    }

    // optional uint32 penalty_level_radiant = 17;
    if (has_penalty_level_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_radiant());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint32 penalty_level_dire = 18;
    if (has_penalty_level_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penalty_level_dire());
    }

    // optional uint32 load_game_id = 19;
    if (has_load_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load_game_id());
    }

    // optional uint32 series_type = 20;
    if (has_series_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 radiant_series_wins = 21;
    if (has_radiant_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_series_wins());
    }

    // optional uint32 dire_series_wins = 22;
    if (has_dire_series_wins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_series_wins());
    }

    // optional bool allchat = 23 [default = false];
    if (has_allchat()) {
      total_size += 2 + 1;
    }

    // optional bool lan = 25;
    if (has_lan()) {
      total_size += 2 + 1;
    }

    // optional uint64 custom_game_id = 29;
    if (has_custom_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional uint32 custom_difficulty = 28;
    if (has_custom_difficulty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_difficulty());
    }

    // optional uint32 custom_min_players = 30;
    if (has_custom_min_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_min_players());
    }

    // optional uint32 custom_max_players = 31;
    if (has_custom_max_players()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->custom_max_players());
    }

    // optional uint32 lan_host_ping_to_server_region = 32;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional fixed64 custom_game_crc = 34;
    if (has_custom_game_crc()) {
      total_size += 2 + 8;
    }

    // optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
    if (has_visibility()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->visibility());
    }

    // optional uint32 league_series_id = 35;
    if (has_league_series_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_series_id());
    }

    // optional uint32 league_game_id = 36;
    if (has_league_game_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_game_id());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional fixed32 custom_game_timestamp = 37;
    if (has_custom_game_timestamp()) {
      total_size += 2 + 4;
    }

    // optional uint64 previous_match_override = 38;
    if (has_previous_match_override()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->previous_match_override());
    }

    // optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
    if (has_selection_priority_rules()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->selection_priority_rules());
    }

    // optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
    if (has_pause_setting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pause_setting());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty_dire());
    }

    // optional uint64 bot_radiant = 44;
    if (has_bot_radiant()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_radiant());
    }

    // optional uint64 bot_dire = 45;
    if (has_bot_dire()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bot_dire());
    }

    // optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
    if (has_dota_tv_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dota_tv_delay());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbySetDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetDetails)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetDetails::MergeFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  team_details_.MergeFrom(from.team_details_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_custom_game_mode();
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_custom_map_name();
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000010u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000080u) {
      cm_pick_ = from.cm_pick_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      bot_difficulty_radiant_ = from.bot_difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000200u) {
      allow_cheats_ = from.allow_cheats_;
    }
    if (cached_has_bits & 0x00000400u) {
      fill_with_bots_ = from.fill_with_bots_;
    }
    if (cached_has_bits & 0x00000800u) {
      intro_mode_ = from.intro_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      allow_spectating_ = from.allow_spectating_;
    }
    if (cached_has_bits & 0x00002000u) {
      game_version_ = from.game_version_;
    }
    if (cached_has_bits & 0x00004000u) {
      leagueid_ = from.leagueid_;
    }
    if (cached_has_bits & 0x00008000u) {
      penalty_level_radiant_ = from.penalty_level_radiant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      penalty_level_dire_ = from.penalty_level_dire_;
    }
    if (cached_has_bits & 0x00020000u) {
      load_game_id_ = from.load_game_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      radiant_series_wins_ = from.radiant_series_wins_;
    }
    if (cached_has_bits & 0x00100000u) {
      dire_series_wins_ = from.dire_series_wins_;
    }
    if (cached_has_bits & 0x00200000u) {
      allchat_ = from.allchat_;
    }
    if (cached_has_bits & 0x00400000u) {
      lan_ = from.lan_;
    }
    if (cached_has_bits & 0x00800000u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      custom_difficulty_ = from.custom_difficulty_;
    }
    if (cached_has_bits & 0x02000000u) {
      custom_min_players_ = from.custom_min_players_;
    }
    if (cached_has_bits & 0x04000000u) {
      custom_max_players_ = from.custom_max_players_;
    }
    if (cached_has_bits & 0x08000000u) {
      lan_host_ping_to_server_region_ = from.lan_host_ping_to_server_region_;
    }
    if (cached_has_bits & 0x10000000u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x20000000u) {
      visibility_ = from.visibility_;
    }
    if (cached_has_bits & 0x40000000u) {
      league_series_id_ = from.league_series_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      league_game_id_ = from.league_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      previous_match_override_ = from.previous_match_override_;
    }
    if (cached_has_bits & 0x00000004u) {
      selection_priority_rules_ = from.selection_priority_rules_;
    }
    if (cached_has_bits & 0x00000008u) {
      pause_setting_ = from.pause_setting_;
    }
    if (cached_has_bits & 0x00000010u) {
      bot_difficulty_dire_ = from.bot_difficulty_dire_;
    }
    if (cached_has_bits & 0x00000020u) {
      bot_radiant_ = from.bot_radiant_;
    }
    if (cached_has_bits & 0x00000040u) {
      bot_dire_ = from.bot_dire_;
    }
    if (cached_has_bits & 0x00000080u) {
      dota_tv_delay_ = from.dota_tv_delay_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void CMsgPracticeLobbySetDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetDetails::CopyFrom(const CMsgPracticeLobbySetDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetDetails::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetDetails::Swap(CMsgPracticeLobbySetDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetDetails::InternalSwap(CMsgPracticeLobbySetDetails* other) {
  team_details_.InternalSwap(&other->team_details_);
  game_name_.Swap(&other->game_name_);
  pass_key_.Swap(&other->pass_key_);
  custom_game_mode_.Swap(&other->custom_game_mode_);
  custom_map_name_.Swap(&other->custom_map_name_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(server_region_, other->server_region_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(cm_pick_, other->cm_pick_);
  std::swap(bot_difficulty_radiant_, other->bot_difficulty_radiant_);
  std::swap(allow_cheats_, other->allow_cheats_);
  std::swap(fill_with_bots_, other->fill_with_bots_);
  std::swap(intro_mode_, other->intro_mode_);
  std::swap(allow_spectating_, other->allow_spectating_);
  std::swap(game_version_, other->game_version_);
  std::swap(leagueid_, other->leagueid_);
  std::swap(penalty_level_radiant_, other->penalty_level_radiant_);
  std::swap(penalty_level_dire_, other->penalty_level_dire_);
  std::swap(load_game_id_, other->load_game_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(radiant_series_wins_, other->radiant_series_wins_);
  std::swap(dire_series_wins_, other->dire_series_wins_);
  std::swap(allchat_, other->allchat_);
  std::swap(lan_, other->lan_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(custom_difficulty_, other->custom_difficulty_);
  std::swap(custom_min_players_, other->custom_min_players_);
  std::swap(custom_max_players_, other->custom_max_players_);
  std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(visibility_, other->visibility_);
  std::swap(league_series_id_, other->league_series_id_);
  std::swap(league_game_id_, other->league_game_id_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(previous_match_override_, other->previous_match_override_);
  std::swap(selection_priority_rules_, other->selection_priority_rules_);
  std::swap(pause_setting_, other->pause_setting_);
  std::swap(bot_difficulty_dire_, other->bot_difficulty_dire_);
  std::swap(bot_radiant_, other->bot_radiant_);
  std::swap(bot_dire_, other->bot_dire_);
  std::swap(dota_tv_delay_, other->dota_tv_delay_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbySetDetails

// optional uint64 lobby_id = 1;
bool CMsgPracticeLobbySetDetails::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPracticeLobbySetDetails::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPracticeLobbySetDetails::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.lobby_id)
  return lobby_id_;
}
void CMsgPracticeLobbySetDetails::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.lobby_id)
}

// optional string game_name = 2;
bool CMsgPracticeLobbySetDetails::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbySetDetails::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbySetDetails::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CMsgPracticeLobbySetDetails::game_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.game_name)
  return game_name_.GetNoArena();
}
void CMsgPracticeLobbySetDetails::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.game_name)
}
#if LANG_CXX11
void CMsgPracticeLobbySetDetails::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbySetDetails.game_name)
}
#endif
void CMsgPracticeLobbySetDetails::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbySetDetails.game_name)
}
void CMsgPracticeLobbySetDetails::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbySetDetails.game_name)
}
::std::string* CMsgPracticeLobbySetDetails::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbySetDetails.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbySetDetails::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbySetDetails.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbySetDetails::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbySetDetails.game_name)
}

// repeated .proto.dota.CLobbyTeamDetails team_details = 3;
int CMsgPracticeLobbySetDetails::team_details_size() const {
  return team_details_.size();
}
void CMsgPracticeLobbySetDetails::clear_team_details() {
  team_details_.Clear();
}
const ::proto::dota::CLobbyTeamDetails& CMsgPracticeLobbySetDetails::team_details(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Get(index);
}
::proto::dota::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::mutable_team_details(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Mutable(index);
}
::proto::dota::CLobbyTeamDetails* CMsgPracticeLobbySetDetails::add_team_details() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPracticeLobbySetDetails.team_details)
  return team_details_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >*
CMsgPracticeLobbySetDetails::mutable_team_details() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPracticeLobbySetDetails.team_details)
  return &team_details_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTeamDetails >&
CMsgPracticeLobbySetDetails::team_details() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPracticeLobbySetDetails.team_details)
  return team_details_;
}

// optional uint32 server_region = 4;
bool CMsgPracticeLobbySetDetails::has_server_region() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_server_region() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgPracticeLobbySetDetails::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgPracticeLobbySetDetails::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.server_region)
  return server_region_;
}
void CMsgPracticeLobbySetDetails::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.server_region)
}

// optional uint32 game_mode = 5;
bool CMsgPracticeLobbySetDetails::has_game_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_game_mode() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgPracticeLobbySetDetails::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgPracticeLobbySetDetails::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.game_mode)
  return game_mode_;
}
void CMsgPracticeLobbySetDetails::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.game_mode)
}

// optional .proto.dota.DOTA_CM_PICK cm_pick = 6 [default = DOTA_CM_RANDOM];
bool CMsgPracticeLobbySetDetails::has_cm_pick() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_cm_pick() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgPracticeLobbySetDetails::clear_has_cm_pick() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgPracticeLobbySetDetails::clear_cm_pick() {
  cm_pick_ = 0;
  clear_has_cm_pick();
}
::proto::dota::DOTA_CM_PICK CMsgPracticeLobbySetDetails::cm_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.cm_pick)
  return static_cast< ::proto::dota::DOTA_CM_PICK >(cm_pick_);
}
void CMsgPracticeLobbySetDetails::set_cm_pick(::proto::dota::DOTA_CM_PICK value) {
  assert(::proto::dota::DOTA_CM_PICK_IsValid(value));
  set_has_cm_pick();
  cm_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.cm_pick)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_radiant = 9 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgPracticeLobbySetDetails::has_bot_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_radiant() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgPracticeLobbySetDetails::clear_bot_difficulty_radiant() {
  bot_difficulty_radiant_ = 0;
  clear_has_bot_difficulty_radiant();
}
::proto::dota::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_radiant_);
}
void CMsgPracticeLobbySetDetails::set_bot_difficulty_radiant(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_radiant();
  bot_difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.bot_difficulty_radiant)
}

// optional bool allow_cheats = 10;
bool CMsgPracticeLobbySetDetails::has_allow_cheats() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_allow_cheats() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgPracticeLobbySetDetails::clear_has_allow_cheats() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgPracticeLobbySetDetails::clear_allow_cheats() {
  allow_cheats_ = false;
  clear_has_allow_cheats();
}
bool CMsgPracticeLobbySetDetails::allow_cheats() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.allow_cheats)
  return allow_cheats_;
}
void CMsgPracticeLobbySetDetails::set_allow_cheats(bool value) {
  set_has_allow_cheats();
  allow_cheats_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.allow_cheats)
}

// optional bool fill_with_bots = 11;
bool CMsgPracticeLobbySetDetails::has_fill_with_bots() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_fill_with_bots() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgPracticeLobbySetDetails::clear_has_fill_with_bots() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgPracticeLobbySetDetails::clear_fill_with_bots() {
  fill_with_bots_ = false;
  clear_has_fill_with_bots();
}
bool CMsgPracticeLobbySetDetails::fill_with_bots() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.fill_with_bots)
  return fill_with_bots_;
}
void CMsgPracticeLobbySetDetails::set_fill_with_bots(bool value) {
  set_has_fill_with_bots();
  fill_with_bots_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.fill_with_bots)
}

// optional bool intro_mode = 12;
bool CMsgPracticeLobbySetDetails::has_intro_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_intro_mode() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgPracticeLobbySetDetails::clear_has_intro_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgPracticeLobbySetDetails::clear_intro_mode() {
  intro_mode_ = false;
  clear_has_intro_mode();
}
bool CMsgPracticeLobbySetDetails::intro_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.intro_mode)
  return intro_mode_;
}
void CMsgPracticeLobbySetDetails::set_intro_mode(bool value) {
  set_has_intro_mode();
  intro_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.intro_mode)
}

// optional bool allow_spectating = 13;
bool CMsgPracticeLobbySetDetails::has_allow_spectating() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_allow_spectating() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgPracticeLobbySetDetails::clear_has_allow_spectating() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgPracticeLobbySetDetails::clear_allow_spectating() {
  allow_spectating_ = false;
  clear_has_allow_spectating();
}
bool CMsgPracticeLobbySetDetails::allow_spectating() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.allow_spectating)
  return allow_spectating_;
}
void CMsgPracticeLobbySetDetails::set_allow_spectating(bool value) {
  set_has_allow_spectating();
  allow_spectating_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.allow_spectating)
}

// optional .proto.dota.DOTAGameVersion game_version = 14 [default = GAME_VERSION_CURRENT];
bool CMsgPracticeLobbySetDetails::has_game_version() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_game_version() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgPracticeLobbySetDetails::clear_has_game_version() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgPracticeLobbySetDetails::clear_game_version() {
  game_version_ = 0;
  clear_has_game_version();
}
::proto::dota::DOTAGameVersion CMsgPracticeLobbySetDetails::game_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.game_version)
  return static_cast< ::proto::dota::DOTAGameVersion >(game_version_);
}
void CMsgPracticeLobbySetDetails::set_game_version(::proto::dota::DOTAGameVersion value) {
  assert(::proto::dota::DOTAGameVersion_IsValid(value));
  set_has_game_version();
  game_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.game_version)
}

// optional string pass_key = 15;
bool CMsgPracticeLobbySetDetails::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbySetDetails::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbySetDetails::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CMsgPracticeLobbySetDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
  return pass_key_.GetNoArena();
}
void CMsgPracticeLobbySetDetails::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
}
#if LANG_CXX11
void CMsgPracticeLobbySetDetails::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
}
#endif
void CMsgPracticeLobbySetDetails::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
}
void CMsgPracticeLobbySetDetails::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
}
::std::string* CMsgPracticeLobbySetDetails::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbySetDetails::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbySetDetails::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbySetDetails.pass_key)
}

// optional uint32 leagueid = 16;
bool CMsgPracticeLobbySetDetails::has_leagueid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_leagueid() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgPracticeLobbySetDetails::clear_has_leagueid() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgPracticeLobbySetDetails::clear_leagueid() {
  leagueid_ = 0u;
  clear_has_leagueid();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::leagueid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.leagueid)
  return leagueid_;
}
void CMsgPracticeLobbySetDetails::set_leagueid(::google::protobuf::uint32 value) {
  set_has_leagueid();
  leagueid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.leagueid)
}

// optional uint32 penalty_level_radiant = 17;
bool CMsgPracticeLobbySetDetails::has_penalty_level_radiant() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_penalty_level_radiant() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgPracticeLobbySetDetails::clear_has_penalty_level_radiant() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgPracticeLobbySetDetails::clear_penalty_level_radiant() {
  penalty_level_radiant_ = 0u;
  clear_has_penalty_level_radiant();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.penalty_level_radiant)
  return penalty_level_radiant_;
}
void CMsgPracticeLobbySetDetails::set_penalty_level_radiant(::google::protobuf::uint32 value) {
  set_has_penalty_level_radiant();
  penalty_level_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.penalty_level_radiant)
}

// optional uint32 penalty_level_dire = 18;
bool CMsgPracticeLobbySetDetails::has_penalty_level_dire() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_penalty_level_dire() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgPracticeLobbySetDetails::clear_has_penalty_level_dire() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgPracticeLobbySetDetails::clear_penalty_level_dire() {
  penalty_level_dire_ = 0u;
  clear_has_penalty_level_dire();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::penalty_level_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.penalty_level_dire)
  return penalty_level_dire_;
}
void CMsgPracticeLobbySetDetails::set_penalty_level_dire(::google::protobuf::uint32 value) {
  set_has_penalty_level_dire();
  penalty_level_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.penalty_level_dire)
}

// optional uint32 load_game_id = 19;
bool CMsgPracticeLobbySetDetails::has_load_game_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_load_game_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgPracticeLobbySetDetails::clear_has_load_game_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgPracticeLobbySetDetails::clear_load_game_id() {
  load_game_id_ = 0u;
  clear_has_load_game_id();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::load_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.load_game_id)
  return load_game_id_;
}
void CMsgPracticeLobbySetDetails::set_load_game_id(::google::protobuf::uint32 value) {
  set_has_load_game_id();
  load_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.load_game_id)
}

// optional uint32 series_type = 20;
bool CMsgPracticeLobbySetDetails::has_series_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_series_type() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgPracticeLobbySetDetails::clear_has_series_type() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgPracticeLobbySetDetails::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.series_type)
  return series_type_;
}
void CMsgPracticeLobbySetDetails::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.series_type)
}

// optional uint32 radiant_series_wins = 21;
bool CMsgPracticeLobbySetDetails::has_radiant_series_wins() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_radiant_series_wins() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgPracticeLobbySetDetails::clear_has_radiant_series_wins() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgPracticeLobbySetDetails::clear_radiant_series_wins() {
  radiant_series_wins_ = 0u;
  clear_has_radiant_series_wins();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::radiant_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.radiant_series_wins)
  return radiant_series_wins_;
}
void CMsgPracticeLobbySetDetails::set_radiant_series_wins(::google::protobuf::uint32 value) {
  set_has_radiant_series_wins();
  radiant_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.radiant_series_wins)
}

// optional uint32 dire_series_wins = 22;
bool CMsgPracticeLobbySetDetails::has_dire_series_wins() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_dire_series_wins() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgPracticeLobbySetDetails::clear_has_dire_series_wins() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgPracticeLobbySetDetails::clear_dire_series_wins() {
  dire_series_wins_ = 0u;
  clear_has_dire_series_wins();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::dire_series_wins() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.dire_series_wins)
  return dire_series_wins_;
}
void CMsgPracticeLobbySetDetails::set_dire_series_wins(::google::protobuf::uint32 value) {
  set_has_dire_series_wins();
  dire_series_wins_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.dire_series_wins)
}

// optional bool allchat = 23 [default = false];
bool CMsgPracticeLobbySetDetails::has_allchat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_allchat() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgPracticeLobbySetDetails::clear_has_allchat() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgPracticeLobbySetDetails::clear_allchat() {
  allchat_ = false;
  clear_has_allchat();
}
bool CMsgPracticeLobbySetDetails::allchat() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.allchat)
  return allchat_;
}
void CMsgPracticeLobbySetDetails::set_allchat(bool value) {
  set_has_allchat();
  allchat_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.allchat)
}

// optional .proto.dota.LobbyDotaTVDelay dota_tv_delay = 24 [default = LobbyDotaTV_120];
bool CMsgPracticeLobbySetDetails::has_dota_tv_delay() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_dota_tv_delay() {
  _has_bits_[1] |= 0x00000080u;
}
void CMsgPracticeLobbySetDetails::clear_has_dota_tv_delay() {
  _has_bits_[1] &= ~0x00000080u;
}
void CMsgPracticeLobbySetDetails::clear_dota_tv_delay() {
  dota_tv_delay_ = 1;
  clear_has_dota_tv_delay();
}
::proto::dota::LobbyDotaTVDelay CMsgPracticeLobbySetDetails::dota_tv_delay() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.dota_tv_delay)
  return static_cast< ::proto::dota::LobbyDotaTVDelay >(dota_tv_delay_);
}
void CMsgPracticeLobbySetDetails::set_dota_tv_delay(::proto::dota::LobbyDotaTVDelay value) {
  assert(::proto::dota::LobbyDotaTVDelay_IsValid(value));
  set_has_dota_tv_delay();
  dota_tv_delay_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.dota_tv_delay)
}

// optional bool lan = 25;
bool CMsgPracticeLobbySetDetails::has_lan() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_lan() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgPracticeLobbySetDetails::clear_has_lan() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgPracticeLobbySetDetails::clear_lan() {
  lan_ = false;
  clear_has_lan();
}
bool CMsgPracticeLobbySetDetails::lan() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.lan)
  return lan_;
}
void CMsgPracticeLobbySetDetails::set_lan(bool value) {
  set_has_lan();
  lan_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.lan)
}

// optional string custom_game_mode = 26;
bool CMsgPracticeLobbySetDetails::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbySetDetails::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_game_mode();
}
const ::std::string& CMsgPracticeLobbySetDetails::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
  return custom_game_mode_.GetNoArena();
}
void CMsgPracticeLobbySetDetails::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
}
#if LANG_CXX11
void CMsgPracticeLobbySetDetails::set_custom_game_mode(::std::string&& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
}
#endif
void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
}
void CMsgPracticeLobbySetDetails::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
}
::std::string* CMsgPracticeLobbySetDetails::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbySetDetails::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
  clear_has_custom_game_mode();
  return custom_game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbySetDetails::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != NULL) {
    set_has_custom_game_mode();
  } else {
    clear_has_custom_game_mode();
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbySetDetails.custom_game_mode)
}

// optional string custom_map_name = 27;
bool CMsgPracticeLobbySetDetails::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbySetDetails::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
const ::std::string& CMsgPracticeLobbySetDetails::custom_map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
  return custom_map_name_.GetNoArena();
}
void CMsgPracticeLobbySetDetails::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
}
#if LANG_CXX11
void CMsgPracticeLobbySetDetails::set_custom_map_name(::std::string&& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
}
#endif
void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
}
void CMsgPracticeLobbySetDetails::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
}
::std::string* CMsgPracticeLobbySetDetails::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbySetDetails::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbySetDetails::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbySetDetails.custom_map_name)
}

// optional uint32 custom_difficulty = 28;
bool CMsgPracticeLobbySetDetails::has_custom_difficulty() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_difficulty() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_difficulty() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgPracticeLobbySetDetails::clear_custom_difficulty() {
  custom_difficulty_ = 0u;
  clear_has_custom_difficulty();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_difficulty)
  return custom_difficulty_;
}
void CMsgPracticeLobbySetDetails::set_custom_difficulty(::google::protobuf::uint32 value) {
  set_has_custom_difficulty();
  custom_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_difficulty)
}

// optional uint64 custom_game_id = 29;
bool CMsgPracticeLobbySetDetails::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgPracticeLobbySetDetails::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_game_id)
  return custom_game_id_;
}
void CMsgPracticeLobbySetDetails::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_game_id)
}

// optional uint32 custom_min_players = 30;
bool CMsgPracticeLobbySetDetails::has_custom_min_players() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_min_players() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_min_players() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgPracticeLobbySetDetails::clear_custom_min_players() {
  custom_min_players_ = 0u;
  clear_has_custom_min_players();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_min_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_min_players)
  return custom_min_players_;
}
void CMsgPracticeLobbySetDetails::set_custom_min_players(::google::protobuf::uint32 value) {
  set_has_custom_min_players();
  custom_min_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_min_players)
}

// optional uint32 custom_max_players = 31;
bool CMsgPracticeLobbySetDetails::has_custom_max_players() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_max_players() {
  _has_bits_[0] |= 0x04000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_max_players() {
  _has_bits_[0] &= ~0x04000000u;
}
void CMsgPracticeLobbySetDetails::clear_custom_max_players() {
  custom_max_players_ = 0u;
  clear_has_custom_max_players();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_max_players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_max_players)
  return custom_max_players_;
}
void CMsgPracticeLobbySetDetails::set_custom_max_players(::google::protobuf::uint32 value) {
  set_has_custom_max_players();
  custom_max_players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_max_players)
}

// optional uint32 lan_host_ping_to_server_region = 32;
bool CMsgPracticeLobbySetDetails::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x08000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x08000000u;
}
void CMsgPracticeLobbySetDetails::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
void CMsgPracticeLobbySetDetails::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.lan_host_ping_to_server_region)
}

// optional .proto.dota.DOTALobbyVisibility visibility = 33 [default = DOTALobbyVisibility_Public];
bool CMsgPracticeLobbySetDetails::has_visibility() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_visibility() {
  _has_bits_[0] |= 0x20000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_visibility() {
  _has_bits_[0] &= ~0x20000000u;
}
void CMsgPracticeLobbySetDetails::clear_visibility() {
  visibility_ = 0;
  clear_has_visibility();
}
::proto::dota::DOTALobbyVisibility CMsgPracticeLobbySetDetails::visibility() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.visibility)
  return static_cast< ::proto::dota::DOTALobbyVisibility >(visibility_);
}
void CMsgPracticeLobbySetDetails::set_visibility(::proto::dota::DOTALobbyVisibility value) {
  assert(::proto::dota::DOTALobbyVisibility_IsValid(value));
  set_has_visibility();
  visibility_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.visibility)
}

// optional fixed64 custom_game_crc = 34;
bool CMsgPracticeLobbySetDetails::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x10000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x10000000u;
}
void CMsgPracticeLobbySetDetails::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_game_crc)
  return custom_game_crc_;
}
void CMsgPracticeLobbySetDetails::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_game_crc)
}

// optional uint32 league_series_id = 35;
bool CMsgPracticeLobbySetDetails::has_league_series_id() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_league_series_id() {
  _has_bits_[0] |= 0x40000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_league_series_id() {
  _has_bits_[0] &= ~0x40000000u;
}
void CMsgPracticeLobbySetDetails::clear_league_series_id() {
  league_series_id_ = 0u;
  clear_has_league_series_id();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.league_series_id)
  return league_series_id_;
}
void CMsgPracticeLobbySetDetails::set_league_series_id(::google::protobuf::uint32 value) {
  set_has_league_series_id();
  league_series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.league_series_id)
}

// optional uint32 league_game_id = 36;
bool CMsgPracticeLobbySetDetails::has_league_game_id() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_league_game_id() {
  _has_bits_[0] |= 0x80000000u;
}
void CMsgPracticeLobbySetDetails::clear_has_league_game_id() {
  _has_bits_[0] &= ~0x80000000u;
}
void CMsgPracticeLobbySetDetails::clear_league_game_id() {
  league_game_id_ = 0u;
  clear_has_league_game_id();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::league_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.league_game_id)
  return league_game_id_;
}
void CMsgPracticeLobbySetDetails::set_league_game_id(::google::protobuf::uint32 value) {
  set_has_league_game_id();
  league_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.league_game_id)
}

// optional fixed32 custom_game_timestamp = 37;
bool CMsgPracticeLobbySetDetails::has_custom_game_timestamp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_custom_game_timestamp() {
  _has_bits_[1] |= 0x00000001u;
}
void CMsgPracticeLobbySetDetails::clear_has_custom_game_timestamp() {
  _has_bits_[1] &= ~0x00000001u;
}
void CMsgPracticeLobbySetDetails::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
::google::protobuf::uint32 CMsgPracticeLobbySetDetails::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.custom_game_timestamp)
  return custom_game_timestamp_;
}
void CMsgPracticeLobbySetDetails::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.custom_game_timestamp)
}

// optional uint64 previous_match_override = 38;
bool CMsgPracticeLobbySetDetails::has_previous_match_override() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_previous_match_override() {
  _has_bits_[1] |= 0x00000002u;
}
void CMsgPracticeLobbySetDetails::clear_has_previous_match_override() {
  _has_bits_[1] &= ~0x00000002u;
}
void CMsgPracticeLobbySetDetails::clear_previous_match_override() {
  previous_match_override_ = GOOGLE_ULONGLONG(0);
  clear_has_previous_match_override();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::previous_match_override() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.previous_match_override)
  return previous_match_override_;
}
void CMsgPracticeLobbySetDetails::set_previous_match_override(::google::protobuf::uint64 value) {
  set_has_previous_match_override();
  previous_match_override_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.previous_match_override)
}

// optional .proto.dota.LobbyDotaPauseSetting pause_setting = 42 [default = LobbyDotaPauseSetting_Unlimited];
bool CMsgPracticeLobbySetDetails::has_pause_setting() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_pause_setting() {
  _has_bits_[1] |= 0x00000008u;
}
void CMsgPracticeLobbySetDetails::clear_has_pause_setting() {
  _has_bits_[1] &= ~0x00000008u;
}
void CMsgPracticeLobbySetDetails::clear_pause_setting() {
  pause_setting_ = 0;
  clear_has_pause_setting();
}
::proto::dota::LobbyDotaPauseSetting CMsgPracticeLobbySetDetails::pause_setting() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.pause_setting)
  return static_cast< ::proto::dota::LobbyDotaPauseSetting >(pause_setting_);
}
void CMsgPracticeLobbySetDetails::set_pause_setting(::proto::dota::LobbyDotaPauseSetting value) {
  assert(::proto::dota::LobbyDotaPauseSetting_IsValid(value));
  set_has_pause_setting();
  pause_setting_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.pause_setting)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty_dire = 43 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgPracticeLobbySetDetails::has_bot_difficulty_dire() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_bot_difficulty_dire() {
  _has_bits_[1] |= 0x00000010u;
}
void CMsgPracticeLobbySetDetails::clear_has_bot_difficulty_dire() {
  _has_bits_[1] &= ~0x00000010u;
}
void CMsgPracticeLobbySetDetails::clear_bot_difficulty_dire() {
  bot_difficulty_dire_ = 0;
  clear_has_bot_difficulty_dire();
}
::proto::dota::DOTABotDifficulty CMsgPracticeLobbySetDetails::bot_difficulty_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.bot_difficulty_dire)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_dire_);
}
void CMsgPracticeLobbySetDetails::set_bot_difficulty_dire(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty_dire();
  bot_difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.bot_difficulty_dire)
}

// optional uint64 bot_radiant = 44;
bool CMsgPracticeLobbySetDetails::has_bot_radiant() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_bot_radiant() {
  _has_bits_[1] |= 0x00000020u;
}
void CMsgPracticeLobbySetDetails::clear_has_bot_radiant() {
  _has_bits_[1] &= ~0x00000020u;
}
void CMsgPracticeLobbySetDetails::clear_bot_radiant() {
  bot_radiant_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_radiant();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.bot_radiant)
  return bot_radiant_;
}
void CMsgPracticeLobbySetDetails::set_bot_radiant(::google::protobuf::uint64 value) {
  set_has_bot_radiant();
  bot_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.bot_radiant)
}

// optional uint64 bot_dire = 45;
bool CMsgPracticeLobbySetDetails::has_bot_dire() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_bot_dire() {
  _has_bits_[1] |= 0x00000040u;
}
void CMsgPracticeLobbySetDetails::clear_has_bot_dire() {
  _has_bits_[1] &= ~0x00000040u;
}
void CMsgPracticeLobbySetDetails::clear_bot_dire() {
  bot_dire_ = GOOGLE_ULONGLONG(0);
  clear_has_bot_dire();
}
::google::protobuf::uint64 CMsgPracticeLobbySetDetails::bot_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.bot_dire)
  return bot_dire_;
}
void CMsgPracticeLobbySetDetails::set_bot_dire(::google::protobuf::uint64 value) {
  set_has_bot_dire();
  bot_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.bot_dire)
}

// optional .proto.dota.DOTASelectionPriorityRules selection_priority_rules = 46 [default = k_DOTASelectionPriorityRules_Manual];
bool CMsgPracticeLobbySetDetails::has_selection_priority_rules() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void CMsgPracticeLobbySetDetails::set_has_selection_priority_rules() {
  _has_bits_[1] |= 0x00000004u;
}
void CMsgPracticeLobbySetDetails::clear_has_selection_priority_rules() {
  _has_bits_[1] &= ~0x00000004u;
}
void CMsgPracticeLobbySetDetails::clear_selection_priority_rules() {
  selection_priority_rules_ = 0;
  clear_has_selection_priority_rules();
}
::proto::dota::DOTASelectionPriorityRules CMsgPracticeLobbySetDetails::selection_priority_rules() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetDetails.selection_priority_rules)
  return static_cast< ::proto::dota::DOTASelectionPriorityRules >(selection_priority_rules_);
}
void CMsgPracticeLobbySetDetails::set_selection_priority_rules(::proto::dota::DOTASelectionPriorityRules value) {
  assert(::proto::dota::DOTASelectionPriorityRules_IsValid(value));
  set_has_selection_priority_rules();
  selection_priority_rules_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetDetails.selection_priority_rules)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCreate_SaveGame::kDataFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kVersionFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSteamIdFieldNumber;
const int CMsgPracticeLobbyCreate_SaveGame::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}
CMsgPracticeLobbyCreate_SaveGame::CMsgPracticeLobbyCreate_SaveGame(const CMsgPracticeLobbyCreate_SaveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}

void CMsgPracticeLobbyCreate_SaveGame::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
}

CMsgPracticeLobbyCreate_SaveGame::~CMsgPracticeLobbyCreate_SaveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  SharedDtor();
}

void CMsgPracticeLobbyCreate_SaveGame::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyCreate_SaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate_SaveGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate_SaveGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate_SaveGame::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyCreate_SaveGame* n = new CMsgPracticeLobbyCreate_SaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyCreate_SaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&steam_id_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&steam_id_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyCreate_SaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 signature = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_signature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &signature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCreate_SaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate_SaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional int32 version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional fixed64 signature = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  return target;
}

size_t CMsgPracticeLobbyCreate_SaveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional fixed64 steam_id = 3;
    if (has_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 signature = 4;
    if (has_signature()) {
      total_size += 1 + 8;
    }

    // optional int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate_SaveGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyCreate_SaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate_SaveGame::MergeFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signature_ = from.signature_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate_SaveGame::CopyFrom(const CMsgPracticeLobbyCreate_SaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCreate.SaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate_SaveGame::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate_SaveGame::Swap(CMsgPracticeLobbyCreate_SaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCreate_SaveGame::InternalSwap(CMsgPracticeLobbyCreate_SaveGame* other) {
  data_.Swap(&other->data_);
  std::swap(steam_id_, other->steam_id_);
  std::swap(signature_, other->signature_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate_SaveGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyCreate_SaveGame

// optional bytes data = 1;
bool CMsgPracticeLobbyCreate_SaveGame::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyCreate_SaveGame::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& CMsgPracticeLobbyCreate_SaveGame::data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
  return data_.GetNoArena();
}
void CMsgPracticeLobbyCreate_SaveGame::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
}
#if LANG_CXX11
void CMsgPracticeLobbyCreate_SaveGame::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
}
#endif
void CMsgPracticeLobbyCreate_SaveGame::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
}
void CMsgPracticeLobbyCreate_SaveGame::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
}
::std::string* CMsgPracticeLobbyCreate_SaveGame::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyCreate_SaveGame::release_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyCreate_SaveGame::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyCreate.SaveGame.data)
}

// optional int32 version = 2;
bool CMsgPracticeLobbyCreate_SaveGame::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyCreate_SaveGame::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CMsgPracticeLobbyCreate_SaveGame::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.SaveGame.version)
  return version_;
}
void CMsgPracticeLobbyCreate_SaveGame::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.SaveGame.version)
}

// optional fixed64 steam_id = 3;
bool CMsgPracticeLobbyCreate_SaveGame::has_steam_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyCreate_SaveGame::set_has_steam_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_has_steam_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_steam_id() {
  steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_steam_id();
}
::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.SaveGame.steam_id)
  return steam_id_;
}
void CMsgPracticeLobbyCreate_SaveGame::set_steam_id(::google::protobuf::uint64 value) {
  set_has_steam_id();
  steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.SaveGame.steam_id)
}

// optional fixed64 signature = 4;
bool CMsgPracticeLobbyCreate_SaveGame::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyCreate_SaveGame::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyCreate_SaveGame::clear_signature() {
  signature_ = GOOGLE_ULONGLONG(0);
  clear_has_signature();
}
::google::protobuf::uint64 CMsgPracticeLobbyCreate_SaveGame::signature() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.SaveGame.signature)
  return signature_;
}
void CMsgPracticeLobbyCreate_SaveGame::set_signature(::google::protobuf::uint64 value) {
  set_has_signature();
  signature_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.SaveGame.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCreate::kSearchKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kPassKeyFieldNumber;
const int CMsgPracticeLobbyCreate::kClientVersionFieldNumber;
const int CMsgPracticeLobbyCreate::kLobbyDetailsFieldNumber;
const int CMsgPracticeLobbyCreate::kSaveGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCreate)
}
CMsgPracticeLobbyCreate::CMsgPracticeLobbyCreate(const CMsgPracticeLobbyCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  if (from.has_lobby_details()) {
    lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails(*from.lobby_details_);
  } else {
    lobby_details_ = NULL;
  }
  if (from.has_save_game()) {
    save_game_ = new ::proto::dota::CMsgPracticeLobbyCreate_SaveGame(*from.save_game_);
  } else {
    save_game_ = NULL;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCreate)
}

void CMsgPracticeLobbyCreate::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_details_, 0, reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&lobby_details_) + sizeof(client_version_));
}

CMsgPracticeLobbyCreate::~CMsgPracticeLobbyCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCreate)
  SharedDtor();
}

void CMsgPracticeLobbyCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete lobby_details_;
  }
  if (this != internal_default_instance()) {
    delete save_game_;
  }
}

void CMsgPracticeLobbyCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCreate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyCreate& CMsgPracticeLobbyCreate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyCreate* CMsgPracticeLobbyCreate::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyCreate* n = new CMsgPracticeLobbyCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCreate)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_search_key()) {
      GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_pass_key()) {
      GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_lobby_details()) {
      GOOGLE_DCHECK(lobby_details_ != NULL);
      lobby_details_->::proto::dota::CMsgPracticeLobbySetDetails::Clear();
    }
    if (has_save_game()) {
      GOOGLE_DCHECK(save_game_ != NULL);
      save_game_->::proto::dota::CMsgPracticeLobbyCreate_SaveGame::Clear();
    }
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyCreate.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lobby_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCreate)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pass_key(), output);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client_version(), output);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->lobby_details_, output);
  }

  // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->save_game_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCreate)
}

::google::protobuf::uint8* CMsgPracticeLobbyCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional string pass_key = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyCreate.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pass_key(), target);
  }

  // optional uint32 client_version = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client_version(), target);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->lobby_details_, deterministic, target);
  }

  // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->save_game_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCreate)
  return target;
}

size_t CMsgPracticeLobbyCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string pass_key = 5;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
    if (has_lobby_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lobby_details_);
    }

    // optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
    if (has_save_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->save_game_);
    }

    // optional uint32 client_version = 6;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCreate)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCreate::MergeFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_lobby_details()->::proto::dota::CMsgPracticeLobbySetDetails::MergeFrom(from.lobby_details());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_save_game()->::proto::dota::CMsgPracticeLobbyCreate_SaveGame::MergeFrom(from.save_game());
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCreate::CopyFrom(const CMsgPracticeLobbyCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCreate::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCreate::Swap(CMsgPracticeLobbyCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCreate::InternalSwap(CMsgPracticeLobbyCreate* other) {
  search_key_.Swap(&other->search_key_);
  pass_key_.Swap(&other->pass_key_);
  std::swap(lobby_details_, other->lobby_details_);
  std::swap(save_game_, other->save_game_);
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCreate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyCreate

// optional string search_key = 1;
bool CMsgPracticeLobbyCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgPracticeLobbyCreate::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.search_key)
  return search_key_.GetNoArena();
}
void CMsgPracticeLobbyCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.search_key)
}
#if LANG_CXX11
void CMsgPracticeLobbyCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyCreate.search_key)
}
#endif
void CMsgPracticeLobbyCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyCreate.search_key)
}
void CMsgPracticeLobbyCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyCreate.search_key)
}
::std::string* CMsgPracticeLobbyCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyCreate.search_key)
}

// optional string pass_key = 5;
bool CMsgPracticeLobbyCreate::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyCreate::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyCreate::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyCreate::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CMsgPracticeLobbyCreate::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.pass_key)
  return pass_key_.GetNoArena();
}
void CMsgPracticeLobbyCreate::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.pass_key)
}
#if LANG_CXX11
void CMsgPracticeLobbyCreate::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyCreate.pass_key)
}
#endif
void CMsgPracticeLobbyCreate::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyCreate.pass_key)
}
void CMsgPracticeLobbyCreate::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyCreate.pass_key)
}
::std::string* CMsgPracticeLobbyCreate::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyCreate.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyCreate::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyCreate.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyCreate::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyCreate.pass_key)
}

// optional uint32 client_version = 6;
bool CMsgPracticeLobbyCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPracticeLobbyCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPracticeLobbyCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPracticeLobbyCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgPracticeLobbyCreate::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.client_version)
  return client_version_;
}
void CMsgPracticeLobbyCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCreate.client_version)
}

// optional .proto.dota.CMsgPracticeLobbySetDetails lobby_details = 7;
bool CMsgPracticeLobbyCreate::has_lobby_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyCreate::set_has_lobby_details() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyCreate::clear_has_lobby_details() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyCreate::clear_lobby_details() {
  if (lobby_details_ != NULL) lobby_details_->::proto::dota::CMsgPracticeLobbySetDetails::Clear();
  clear_has_lobby_details();
}
const ::proto::dota::CMsgPracticeLobbySetDetails& CMsgPracticeLobbyCreate::lobby_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.lobby_details)
  return lobby_details_ != NULL ? *lobby_details_
                         : *::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance();
}
::proto::dota::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::mutable_lobby_details() {
  set_has_lobby_details();
  if (lobby_details_ == NULL) {
    lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyCreate.lobby_details)
  return lobby_details_;
}
::proto::dota::CMsgPracticeLobbySetDetails* CMsgPracticeLobbyCreate::release_lobby_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyCreate.lobby_details)
  clear_has_lobby_details();
  ::proto::dota::CMsgPracticeLobbySetDetails* temp = lobby_details_;
  lobby_details_ = NULL;
  return temp;
}
void CMsgPracticeLobbyCreate::set_allocated_lobby_details(::proto::dota::CMsgPracticeLobbySetDetails* lobby_details) {
  delete lobby_details_;
  lobby_details_ = lobby_details;
  if (lobby_details) {
    set_has_lobby_details();
  } else {
    clear_has_lobby_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyCreate.lobby_details)
}

// optional .proto.dota.CMsgPracticeLobbyCreate.SaveGame save_game = 8;
bool CMsgPracticeLobbyCreate::has_save_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyCreate::set_has_save_game() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyCreate::clear_has_save_game() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyCreate::clear_save_game() {
  if (save_game_ != NULL) save_game_->::proto::dota::CMsgPracticeLobbyCreate_SaveGame::Clear();
  clear_has_save_game();
}
const ::proto::dota::CMsgPracticeLobbyCreate_SaveGame& CMsgPracticeLobbyCreate::save_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCreate.save_game)
  return save_game_ != NULL ? *save_game_
                         : *::proto::dota::CMsgPracticeLobbyCreate_SaveGame::internal_default_instance();
}
::proto::dota::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::mutable_save_game() {
  set_has_save_game();
  if (save_game_ == NULL) {
    save_game_ = new ::proto::dota::CMsgPracticeLobbyCreate_SaveGame;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyCreate.save_game)
  return save_game_;
}
::proto::dota::CMsgPracticeLobbyCreate_SaveGame* CMsgPracticeLobbyCreate::release_save_game() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyCreate.save_game)
  clear_has_save_game();
  ::proto::dota::CMsgPracticeLobbyCreate_SaveGame* temp = save_game_;
  save_game_ = NULL;
  return temp;
}
void CMsgPracticeLobbyCreate::set_allocated_save_game(::proto::dota::CMsgPracticeLobbyCreate_SaveGame* save_game) {
  delete save_game_;
  save_game_ = save_game;
  if (save_game) {
    set_has_save_game();
  } else {
    clear_has_save_game();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyCreate.save_game)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetTeamSlot::kTeamFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kSlotFieldNumber;
const int CMsgPracticeLobbySetTeamSlot::kBotDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
}
CMsgPracticeLobbySetTeamSlot::CMsgPracticeLobbySetTeamSlot(const CMsgPracticeLobbySetTeamSlot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_, &from.team_,
    reinterpret_cast<char*>(&bot_difficulty_) -
    reinterpret_cast<char*>(&team_) + sizeof(bot_difficulty_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
}

void CMsgPracticeLobbySetTeamSlot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_, 0, reinterpret_cast<char*>(&bot_difficulty_) -
    reinterpret_cast<char*>(&team_) + sizeof(bot_difficulty_));
}

CMsgPracticeLobbySetTeamSlot::~CMsgPracticeLobbySetTeamSlot() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetTeamSlot)
  SharedDtor();
}

void CMsgPracticeLobbySetTeamSlot::SharedDtor() {
}

void CMsgPracticeLobbySetTeamSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetTeamSlot::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbySetTeamSlot& CMsgPracticeLobbySetTeamSlot::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbySetTeamSlot* CMsgPracticeLobbySetTeamSlot::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbySetTeamSlot* n = new CMsgPracticeLobbySetTeamSlot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbySetTeamSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&team_, 0, reinterpret_cast<char*>(&bot_difficulty_) -
      reinterpret_cast<char*>(&team_) + sizeof(bot_difficulty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbySetTeamSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_bot_difficulty(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetTeamSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->bot_difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetTeamSlot)
}

::google::protobuf::uint8* CMsgPracticeLobbySetTeamSlot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  // optional uint32 slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->bot_difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetTeamSlot)
  return target;
}

size_t CMsgPracticeLobbySetTeamSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_bot_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bot_difficulty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetTeamSlot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbySetTeamSlot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetTeamSlot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetTeamSlot)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetTeamSlot::MergeFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000002u) {
      slot_ = from.slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      bot_difficulty_ = from.bot_difficulty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetTeamSlot::CopyFrom(const CMsgPracticeLobbySetTeamSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetTeamSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetTeamSlot::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetTeamSlot::Swap(CMsgPracticeLobbySetTeamSlot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetTeamSlot::InternalSwap(CMsgPracticeLobbySetTeamSlot* other) {
  std::swap(team_, other->team_);
  std::swap(slot_, other->slot_);
  std::swap(bot_difficulty_, other->bot_difficulty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetTeamSlot::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbySetTeamSlot

// optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CMsgPracticeLobbySetTeamSlot::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbySetTeamSlot::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbySetTeamSlot::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbySetTeamSlot::clear_team() {
  team_ = 0;
  clear_has_team();
}
::proto::dota::DOTA_GC_TEAM CMsgPracticeLobbySetTeamSlot::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetTeamSlot.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
void CMsgPracticeLobbySetTeamSlot::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetTeamSlot.team)
}

// optional uint32 slot = 2;
bool CMsgPracticeLobbySetTeamSlot::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbySetTeamSlot::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbySetTeamSlot::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbySetTeamSlot::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
::google::protobuf::uint32 CMsgPracticeLobbySetTeamSlot::slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetTeamSlot.slot)
  return slot_;
}
void CMsgPracticeLobbySetTeamSlot::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetTeamSlot.slot)
}

// optional .proto.dota.DOTABotDifficulty bot_difficulty = 3 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgPracticeLobbySetTeamSlot::has_bot_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbySetTeamSlot::set_has_bot_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbySetTeamSlot::clear_has_bot_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbySetTeamSlot::clear_bot_difficulty() {
  bot_difficulty_ = 0;
  clear_has_bot_difficulty();
}
::proto::dota::DOTABotDifficulty CMsgPracticeLobbySetTeamSlot::bot_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetTeamSlot.bot_difficulty)
  return static_cast< ::proto::dota::DOTABotDifficulty >(bot_difficulty_);
}
void CMsgPracticeLobbySetTeamSlot::set_bot_difficulty(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_bot_difficulty();
  bot_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetTeamSlot.bot_difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbySetCoach::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbySetCoach)
}
CMsgPracticeLobbySetCoach::CMsgPracticeLobbySetCoach(const CMsgPracticeLobbySetCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_ = from.team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbySetCoach)
}

void CMsgPracticeLobbySetCoach::SharedCtor() {
  _cached_size_ = 0;
  team_ = 0;
}

CMsgPracticeLobbySetCoach::~CMsgPracticeLobbySetCoach() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbySetCoach)
  SharedDtor();
}

void CMsgPracticeLobbySetCoach::SharedDtor() {
}

void CMsgPracticeLobbySetCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbySetCoach::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbySetCoach& CMsgPracticeLobbySetCoach::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbySetCoach* CMsgPracticeLobbySetCoach::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbySetCoach* n = new CMsgPracticeLobbySetCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbySetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbySetCoach)
  team_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbySetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbySetCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbySetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbySetCoach)
  return false;
#undef DO_
}

void CMsgPracticeLobbySetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbySetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbySetCoach)
}

::google::protobuf::uint8* CMsgPracticeLobbySetCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbySetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbySetCoach)
  return target;
}

size_t CMsgPracticeLobbySetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbySetCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (has_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbySetCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbySetCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbySetCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbySetCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbySetCoach)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbySetCoach::MergeFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team()) {
    set_team(from.team());
  }
}

void CMsgPracticeLobbySetCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbySetCoach::CopyFrom(const CMsgPracticeLobbySetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbySetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbySetCoach::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbySetCoach::Swap(CMsgPracticeLobbySetCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbySetCoach::InternalSwap(CMsgPracticeLobbySetCoach* other) {
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbySetCoach::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbySetCoach

// optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CMsgPracticeLobbySetCoach::has_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbySetCoach::set_has_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbySetCoach::clear_has_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbySetCoach::clear_team() {
  team_ = 0;
  clear_has_team();
}
::proto::dota::DOTA_GC_TEAM CMsgPracticeLobbySetCoach::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbySetCoach.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
void CMsgPracticeLobbySetCoach::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbySetCoach.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoinBroadcastChannel::kChannelFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredDescriptionFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredCountryCodeFieldNumber;
const int CMsgPracticeLobbyJoinBroadcastChannel::kPreferredLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}
CMsgPracticeLobbyJoinBroadcastChannel::CMsgPracticeLobbyJoinBroadcastChannel(const CMsgPracticeLobbyJoinBroadcastChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preferred_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_description()) {
    preferred_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_description_);
  }
  preferred_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_country_code()) {
    preferred_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_country_code_);
  }
  preferred_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_preferred_language_code()) {
    preferred_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_language_code_);
  }
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedCtor() {
  _cached_size_ = 0;
  preferred_description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_ = 0u;
}

CMsgPracticeLobbyJoinBroadcastChannel::~CMsgPracticeLobbyJoinBroadcastChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyJoinBroadcastChannel::SharedDtor() {
  preferred_description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preferred_language_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoinBroadcastChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinBroadcastChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyJoinBroadcastChannel& CMsgPracticeLobbyJoinBroadcastChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyJoinBroadcastChannel* CMsgPracticeLobbyJoinBroadcastChannel::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyJoinBroadcastChannel* n = new CMsgPracticeLobbyJoinBroadcastChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyJoinBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_preferred_description()) {
      GOOGLE_DCHECK(!preferred_description_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preferred_description_.UnsafeRawStringPointer())->clear();
    }
    if (has_preferred_country_code()) {
      GOOGLE_DCHECK(!preferred_country_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preferred_country_code_.UnsafeRawStringPointer())->clear();
    }
    if (has_preferred_language_code()) {
      GOOGLE_DCHECK(!preferred_language_code_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*preferred_language_code_.UnsafeRawStringPointer())->clear();
    }
  }
  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyJoinBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_description().data(), this->preferred_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_country_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_country_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_country_code().data(), this->preferred_country_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string preferred_language_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preferred_language_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->preferred_language_code().data(), this->preferred_language_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoinBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), this->preferred_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->preferred_description(), output);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), this->preferred_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->preferred_country_code(), output);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), this->preferred_language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->preferred_language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinBroadcastChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional string preferred_description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_description().data(), this->preferred_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->preferred_description(), target);
  }

  // optional string preferred_country_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_country_code().data(), this->preferred_country_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->preferred_country_code(), target);
  }

  // optional string preferred_language_code = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->preferred_language_code().data(), this->preferred_language_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->preferred_language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyJoinBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string preferred_description = 2;
    if (has_preferred_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_description());
    }

    // optional string preferred_country_code = 3;
    if (has_preferred_country_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_country_code());
    }

    // optional string preferred_language_code = 4;
    if (has_preferred_language_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preferred_language_code());
    }

    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinBroadcastChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyJoinBroadcastChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::MergeFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_preferred_description();
      preferred_description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_description_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_preferred_country_code();
      preferred_country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_country_code_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_preferred_language_code();
      preferred_language_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.preferred_language_code_);
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinBroadcastChannel::CopyFrom(const CMsgPracticeLobbyJoinBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinBroadcastChannel::Swap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoinBroadcastChannel::InternalSwap(CMsgPracticeLobbyJoinBroadcastChannel* other) {
  preferred_description_.Swap(&other->preferred_description_);
  preferred_country_code_.Swap(&other->preferred_country_code_);
  preferred_language_code_.Swap(&other->preferred_language_code_);
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinBroadcastChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyJoinBroadcastChannel

// optional uint32 channel = 1;
bool CMsgPracticeLobbyJoinBroadcastChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 CMsgPracticeLobbyJoinBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.channel)
  return channel_;
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.channel)
}

// optional string preferred_description = 2;
bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_description() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_description() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_description() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_description() {
  preferred_description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_description();
}
const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_description() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return preferred_description_.GetNoArena();
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const ::std::string& value) {
  set_has_preferred_description();
  preferred_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
#if LANG_CXX11
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(::std::string&& value) {
  set_has_preferred_description();
  preferred_description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
#endif
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_description();
  preferred_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_description(const char* value, size_t size) {
  set_has_preferred_description();
  preferred_description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_description() {
  set_has_preferred_description();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  return preferred_description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_description() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
  clear_has_preferred_description();
  return preferred_description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_description(::std::string* preferred_description) {
  if (preferred_description != NULL) {
    set_has_preferred_description();
  } else {
    clear_has_preferred_description();
  }
  preferred_description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_description);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_description)
}

// optional string preferred_country_code = 3;
bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_country_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_country_code() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_country_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_country_code() {
  preferred_country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_country_code();
}
const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_country_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return preferred_country_code_.GetNoArena();
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const ::std::string& value) {
  set_has_preferred_country_code();
  preferred_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
#if LANG_CXX11
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(::std::string&& value) {
  set_has_preferred_country_code();
  preferred_country_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
#endif
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_country_code();
  preferred_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_country_code(const char* value, size_t size) {
  set_has_preferred_country_code();
  preferred_country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_country_code() {
  set_has_preferred_country_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  return preferred_country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_country_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
  clear_has_preferred_country_code();
  return preferred_country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_country_code(::std::string* preferred_country_code) {
  if (preferred_country_code != NULL) {
    set_has_preferred_country_code();
  } else {
    clear_has_preferred_country_code();
  }
  preferred_country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_country_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_country_code)
}

// optional string preferred_language_code = 4;
bool CMsgPracticeLobbyJoinBroadcastChannel::has_preferred_language_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_has_preferred_language_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_has_preferred_language_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyJoinBroadcastChannel::clear_preferred_language_code() {
  preferred_language_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_preferred_language_code();
}
const ::std::string& CMsgPracticeLobbyJoinBroadcastChannel::preferred_language_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return preferred_language_code_.GetNoArena();
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const ::std::string& value) {
  set_has_preferred_language_code();
  preferred_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
#if LANG_CXX11
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(::std::string&& value) {
  set_has_preferred_language_code();
  preferred_language_code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
#endif
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_preferred_language_code();
  preferred_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_preferred_language_code(const char* value, size_t size) {
  set_has_preferred_language_code();
  preferred_language_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::mutable_preferred_language_code() {
  set_has_preferred_language_code();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  return preferred_language_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyJoinBroadcastChannel::release_preferred_language_code() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
  clear_has_preferred_language_code();
  return preferred_language_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyJoinBroadcastChannel::set_allocated_preferred_language_code(::std::string* preferred_language_code) {
  if (preferred_language_code != NULL) {
    set_has_preferred_language_code();
  } else {
    clear_has_preferred_language_code();
  }
  preferred_language_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), preferred_language_code);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyJoinBroadcastChannel.preferred_language_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyCloseBroadcastChannel::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}
CMsgPracticeLobbyCloseBroadcastChannel::CMsgPracticeLobbyCloseBroadcastChannel(const CMsgPracticeLobbyCloseBroadcastChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_ = from.channel_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
}

CMsgPracticeLobbyCloseBroadcastChannel::~CMsgPracticeLobbyCloseBroadcastChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  SharedDtor();
}

void CMsgPracticeLobbyCloseBroadcastChannel::SharedDtor() {
}

void CMsgPracticeLobbyCloseBroadcastChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyCloseBroadcastChannel::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyCloseBroadcastChannel& CMsgPracticeLobbyCloseBroadcastChannel::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyCloseBroadcastChannel* CMsgPracticeLobbyCloseBroadcastChannel::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyCloseBroadcastChannel* n = new CMsgPracticeLobbyCloseBroadcastChannel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyCloseBroadcastChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  channel_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyCloseBroadcastChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_channel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return false;
#undef DO_
}

void CMsgPracticeLobbyCloseBroadcastChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
}

::google::protobuf::uint8* CMsgPracticeLobbyCloseBroadcastChannel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  return target;
}

size_t CMsgPracticeLobbyCloseBroadcastChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 channel = 1;
  if (has_channel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyCloseBroadcastChannel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyCloseBroadcastChannel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::MergeFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    set_channel(from.channel());
  }
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyCloseBroadcastChannel::CopyFrom(const CMsgPracticeLobbyCloseBroadcastChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyCloseBroadcastChannel::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyCloseBroadcastChannel::Swap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyCloseBroadcastChannel::InternalSwap(CMsgPracticeLobbyCloseBroadcastChannel* other) {
  std::swap(channel_, other->channel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyCloseBroadcastChannel::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyCloseBroadcastChannel

// optional uint32 channel = 1;
bool CMsgPracticeLobbyCloseBroadcastChannel::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyCloseBroadcastChannel::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyCloseBroadcastChannel::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyCloseBroadcastChannel::clear_channel() {
  channel_ = 0u;
  clear_has_channel();
}
::google::protobuf::uint32 CMsgPracticeLobbyCloseBroadcastChannel::channel() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel.channel)
  return channel_;
}
void CMsgPracticeLobbyCloseBroadcastChannel::set_channel(::google::protobuf::uint32 value) {
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyCloseBroadcastChannel.channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}
CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedCtor() {
  _cached_size_ = 0;
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::~CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  SharedDtor();
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SharedDtor() {
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* n = new CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return false;
#undef DO_
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
}

::google::protobuf::uint8* CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  return target;
}

size_t CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::MergeFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::CopyFrom(const CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::Swap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::InternalSwap(CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyKick::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyKick::CMsgPracticeLobbyKick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyKick)
}
CMsgPracticeLobbyKick::CMsgPracticeLobbyKick(const CMsgPracticeLobbyKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyKick)
}

void CMsgPracticeLobbyKick::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgPracticeLobbyKick::~CMsgPracticeLobbyKick() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyKick)
  SharedDtor();
}

void CMsgPracticeLobbyKick::SharedDtor() {
}

void CMsgPracticeLobbyKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKick::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyKick& CMsgPracticeLobbyKick::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyKick* CMsgPracticeLobbyKick::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyKick* n = new CMsgPracticeLobbyKick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyKick)
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyKick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyKick)
  return false;
#undef DO_
}

void CMsgPracticeLobbyKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyKick)
}

::google::protobuf::uint8* CMsgPracticeLobbyKick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyKick)
  return target;
}

size_t CMsgPracticeLobbyKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 account_id = 3;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyKick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyKick)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKick::MergeFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPracticeLobbyKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKick::CopyFrom(const CMsgPracticeLobbyKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKick::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKick::Swap(CMsgPracticeLobbyKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyKick::InternalSwap(CMsgPracticeLobbyKick* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyKick::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyKick

// optional uint32 account_id = 3;
bool CMsgPracticeLobbyKick::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyKick::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyKick::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyKick::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyKick::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyKick.account_id)
  return account_id_;
}
void CMsgPracticeLobbyKick::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyKick.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyKickFromTeam::kAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
}
CMsgPracticeLobbyKickFromTeam::CMsgPracticeLobbyKickFromTeam(const CMsgPracticeLobbyKickFromTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
}

void CMsgPracticeLobbyKickFromTeam::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgPracticeLobbyKickFromTeam::~CMsgPracticeLobbyKickFromTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyKickFromTeam)
  SharedDtor();
}

void CMsgPracticeLobbyKickFromTeam::SharedDtor() {
}

void CMsgPracticeLobbyKickFromTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyKickFromTeam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyKickFromTeam& CMsgPracticeLobbyKickFromTeam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyKickFromTeam* CMsgPracticeLobbyKickFromTeam::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyKickFromTeam* n = new CMsgPracticeLobbyKickFromTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyKickFromTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyKickFromTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return false;
#undef DO_
}

void CMsgPracticeLobbyKickFromTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyKickFromTeam)
}

::google::protobuf::uint8* CMsgPracticeLobbyKickFromTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyKickFromTeam)
  return target;
}

size_t CMsgPracticeLobbyKickFromTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyKickFromTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyKickFromTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyKickFromTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyKickFromTeam)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyKickFromTeam::MergeFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyKickFromTeam::CopyFrom(const CMsgPracticeLobbyKickFromTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyKickFromTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyKickFromTeam::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyKickFromTeam::Swap(CMsgPracticeLobbyKickFromTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyKickFromTeam::InternalSwap(CMsgPracticeLobbyKickFromTeam* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyKickFromTeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyKickFromTeam

// optional uint32 account_id = 1;
bool CMsgPracticeLobbyKickFromTeam::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyKickFromTeam::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyKickFromTeam::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyKickFromTeam::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyKickFromTeam::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyKickFromTeam.account_id)
  return account_id_;
}
void CMsgPracticeLobbyKickFromTeam::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyKickFromTeam.account_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyLeave)
}
CMsgPracticeLobbyLeave::CMsgPracticeLobbyLeave(const CMsgPracticeLobbyLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyLeave)
}

void CMsgPracticeLobbyLeave::SharedCtor() {
  _cached_size_ = 0;
}

CMsgPracticeLobbyLeave::~CMsgPracticeLobbyLeave() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyLeave)
  SharedDtor();
}

void CMsgPracticeLobbyLeave::SharedDtor() {
}

void CMsgPracticeLobbyLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLeave::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyLeave& CMsgPracticeLobbyLeave::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyLeave* CMsgPracticeLobbyLeave::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyLeave* n = new CMsgPracticeLobbyLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyLeave)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyLeave)
  return false;
#undef DO_
}

void CMsgPracticeLobbyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyLeave)
}

::google::protobuf::uint8* CMsgPracticeLobbyLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyLeave)
  return target;
}

size_t CMsgPracticeLobbyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyLeave)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLeave::MergeFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgPracticeLobbyLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLeave::CopyFrom(const CMsgPracticeLobbyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLeave::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLeave::Swap(CMsgPracticeLobbyLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyLeave::InternalSwap(CMsgPracticeLobbyLeave* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyLeave::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyLeave

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyLaunch::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyLaunch)
}
CMsgPracticeLobbyLaunch::CMsgPracticeLobbyLaunch(const CMsgPracticeLobbyLaunch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyLaunch)
}

void CMsgPracticeLobbyLaunch::SharedCtor() {
  _cached_size_ = 0;
  client_version_ = 0u;
}

CMsgPracticeLobbyLaunch::~CMsgPracticeLobbyLaunch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyLaunch)
  SharedDtor();
}

void CMsgPracticeLobbyLaunch::SharedDtor() {
}

void CMsgPracticeLobbyLaunch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyLaunch::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyLaunch& CMsgPracticeLobbyLaunch::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyLaunch* CMsgPracticeLobbyLaunch::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyLaunch* n = new CMsgPracticeLobbyLaunch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyLaunch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyLaunch)
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyLaunch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyLaunch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyLaunch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyLaunch)
  return false;
#undef DO_
}

void CMsgPracticeLobbyLaunch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyLaunch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyLaunch)
}

::google::protobuf::uint8* CMsgPracticeLobbyLaunch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyLaunch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyLaunch)
  return target;
}

size_t CMsgPracticeLobbyLaunch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyLaunch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 client_version = 5;
  if (has_client_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyLaunch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyLaunch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyLaunch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyLaunch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyLaunch)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyLaunch::MergeFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_version()) {
    set_client_version(from.client_version());
  }
}

void CMsgPracticeLobbyLaunch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyLaunch::CopyFrom(const CMsgPracticeLobbyLaunch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyLaunch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyLaunch::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyLaunch::Swap(CMsgPracticeLobbyLaunch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyLaunch::InternalSwap(CMsgPracticeLobbyLaunch* other) {
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyLaunch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyLaunch

// optional uint32 client_version = 5;
bool CMsgPracticeLobbyLaunch::has_client_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyLaunch::set_has_client_version() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyLaunch::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyLaunch::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgPracticeLobbyLaunch::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyLaunch.client_version)
  return client_version_;
}
void CMsgPracticeLobbyLaunch::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyLaunch.client_version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyTeamToPracticeLobby::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyTeamToPracticeLobby)
}
CMsgApplyTeamToPracticeLobby::CMsgApplyTeamToPracticeLobby(const CMsgApplyTeamToPracticeLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_id_ = from.team_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyTeamToPracticeLobby)
}

void CMsgApplyTeamToPracticeLobby::SharedCtor() {
  _cached_size_ = 0;
  team_id_ = 0u;
}

CMsgApplyTeamToPracticeLobby::~CMsgApplyTeamToPracticeLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyTeamToPracticeLobby)
  SharedDtor();
}

void CMsgApplyTeamToPracticeLobby::SharedDtor() {
}

void CMsgApplyTeamToPracticeLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgApplyTeamToPracticeLobby::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgApplyTeamToPracticeLobby& CMsgApplyTeamToPracticeLobby::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgApplyTeamToPracticeLobby* CMsgApplyTeamToPracticeLobby::New(::google::protobuf::Arena* arena) const {
  CMsgApplyTeamToPracticeLobby* n = new CMsgApplyTeamToPracticeLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgApplyTeamToPracticeLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  team_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgApplyTeamToPracticeLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyTeamToPracticeLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyTeamToPracticeLobby)
  return false;
#undef DO_
}

void CMsgApplyTeamToPracticeLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyTeamToPracticeLobby)
}

::google::protobuf::uint8* CMsgApplyTeamToPracticeLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyTeamToPracticeLobby)
  return target;
}

size_t CMsgApplyTeamToPracticeLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 team_id = 1;
  if (has_team_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyTeamToPracticeLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgApplyTeamToPracticeLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyTeamToPracticeLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyTeamToPracticeLobby)
    MergeFrom(*source);
  }
}

void CMsgApplyTeamToPracticeLobby::MergeFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_team_id()) {
    set_team_id(from.team_id());
  }
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyTeamToPracticeLobby::CopyFrom(const CMsgApplyTeamToPracticeLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyTeamToPracticeLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyTeamToPracticeLobby::IsInitialized() const {
  return true;
}

void CMsgApplyTeamToPracticeLobby::Swap(CMsgApplyTeamToPracticeLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyTeamToPracticeLobby::InternalSwap(CMsgApplyTeamToPracticeLobby* other) {
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgApplyTeamToPracticeLobby::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgApplyTeamToPracticeLobby

// optional uint32 team_id = 1;
bool CMsgApplyTeamToPracticeLobby::has_team_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgApplyTeamToPracticeLobby::set_has_team_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgApplyTeamToPracticeLobby::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgApplyTeamToPracticeLobby::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgApplyTeamToPracticeLobby::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgApplyTeamToPracticeLobby.team_id)
  return team_id_;
}
void CMsgApplyTeamToPracticeLobby::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgApplyTeamToPracticeLobby.team_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClearPracticeLobbyTeam)
}
CMsgClearPracticeLobbyTeam::CMsgClearPracticeLobbyTeam(const CMsgClearPracticeLobbyTeam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClearPracticeLobbyTeam)
}

void CMsgClearPracticeLobbyTeam::SharedCtor() {
  _cached_size_ = 0;
}

CMsgClearPracticeLobbyTeam::~CMsgClearPracticeLobbyTeam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClearPracticeLobbyTeam)
  SharedDtor();
}

void CMsgClearPracticeLobbyTeam::SharedDtor() {
}

void CMsgClearPracticeLobbyTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClearPracticeLobbyTeam::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClearPracticeLobbyTeam& CMsgClearPracticeLobbyTeam::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClearPracticeLobbyTeam* CMsgClearPracticeLobbyTeam::New(::google::protobuf::Arena* arena) const {
  CMsgClearPracticeLobbyTeam* n = new CMsgClearPracticeLobbyTeam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClearPracticeLobbyTeam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClearPracticeLobbyTeam)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClearPracticeLobbyTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClearPracticeLobbyTeam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClearPracticeLobbyTeam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClearPracticeLobbyTeam)
  return false;
#undef DO_
}

void CMsgClearPracticeLobbyTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClearPracticeLobbyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClearPracticeLobbyTeam)
}

::google::protobuf::uint8* CMsgClearPracticeLobbyTeam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClearPracticeLobbyTeam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClearPracticeLobbyTeam)
  return target;
}

size_t CMsgClearPracticeLobbyTeam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClearPracticeLobbyTeam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClearPracticeLobbyTeam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClearPracticeLobbyTeam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClearPracticeLobbyTeam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClearPracticeLobbyTeam)
    MergeFrom(*source);
  }
}

void CMsgClearPracticeLobbyTeam::MergeFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClearPracticeLobbyTeam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClearPracticeLobbyTeam::CopyFrom(const CMsgClearPracticeLobbyTeam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClearPracticeLobbyTeam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClearPracticeLobbyTeam::IsInitialized() const {
  return true;
}

void CMsgClearPracticeLobbyTeam::Swap(CMsgClearPracticeLobbyTeam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClearPracticeLobbyTeam::InternalSwap(CMsgClearPracticeLobbyTeam* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClearPracticeLobbyTeam::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClearPracticeLobbyTeam

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyList::kTournamentGamesFieldNumber;
const int CMsgPracticeLobbyList::kPassKeyFieldNumber;
const int CMsgPracticeLobbyList::kRegionFieldNumber;
const int CMsgPracticeLobbyList::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyList::CMsgPracticeLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyList)
}
CMsgPracticeLobbyList::CMsgPracticeLobbyList(const CMsgPracticeLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  ::memcpy(&tournament_games_, &from.tournament_games_,
    reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&tournament_games_) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyList)
}

void CMsgPracticeLobbyList::SharedCtor() {
  _cached_size_ = 0;
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tournament_games_, 0, reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&tournament_games_) + sizeof(game_mode_));
}

CMsgPracticeLobbyList::~CMsgPracticeLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyList)
  SharedDtor();
}

void CMsgPracticeLobbyList::SharedDtor() {
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyList::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyList& CMsgPracticeLobbyList::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyList* CMsgPracticeLobbyList::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyList* n = new CMsgPracticeLobbyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyList)
  if (has_pass_key()) {
    GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pass_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&tournament_games_, 0, reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&tournament_games_) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool tournament_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyList.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyList)
  return false;
#undef DO_
}

void CMsgPracticeLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tournament_games = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tournament_games(), output);
  }

  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyList.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pass_key(), output);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->region(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->game_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyList)
}

::google::protobuf::uint8* CMsgPracticeLobbyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tournament_games = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tournament_games(), target);
  }

  // optional string pass_key = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyList.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pass_key(), target);
  }

  // optional uint32 region = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->region(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->game_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyList)
  return target;
}

size_t CMsgPracticeLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string pass_key = 2;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional bool tournament_games = 1;
    if (has_tournament_games()) {
      total_size += 1 + 1;
    }

    // optional uint32 region = 3;
    if (has_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyList)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyList::MergeFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_games_ = from.tournament_games_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000008u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyList::CopyFrom(const CMsgPracticeLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyList::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyList::Swap(CMsgPracticeLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyList::InternalSwap(CMsgPracticeLobbyList* other) {
  pass_key_.Swap(&other->pass_key_);
  std::swap(tournament_games_, other->tournament_games_);
  std::swap(region_, other->region_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyList

// optional bool tournament_games = 1;
bool CMsgPracticeLobbyList::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyList::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyList::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyList::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
bool CMsgPracticeLobbyList::tournament_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyList.tournament_games)
  return tournament_games_;
}
void CMsgPracticeLobbyList::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyList.tournament_games)
}

// optional string pass_key = 2;
bool CMsgPracticeLobbyList::has_pass_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyList::set_has_pass_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyList::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyList::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CMsgPracticeLobbyList::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyList.pass_key)
  return pass_key_.GetNoArena();
}
void CMsgPracticeLobbyList::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyList.pass_key)
}
#if LANG_CXX11
void CMsgPracticeLobbyList::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyList.pass_key)
}
#endif
void CMsgPracticeLobbyList::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyList.pass_key)
}
void CMsgPracticeLobbyList::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyList.pass_key)
}
::std::string* CMsgPracticeLobbyList::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyList.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyList::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyList.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyList::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyList.pass_key)
}

// optional uint32 region = 3;
bool CMsgPracticeLobbyList::has_region() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyList::set_has_region() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyList::clear_has_region() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyList::clear_region() {
  region_ = 0u;
  clear_has_region();
}
::google::protobuf::uint32 CMsgPracticeLobbyList::region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyList.region)
  return region_;
}
void CMsgPracticeLobbyList::set_region(::google::protobuf::uint32 value) {
  set_has_region();
  region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyList.region)
}

// optional .proto.dota.DOTA_GameMode game_mode = 4 [default = DOTA_GAMEMODE_NONE];
bool CMsgPracticeLobbyList::has_game_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyList::set_has_game_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyList::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyList::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::proto::dota::DOTA_GameMode CMsgPracticeLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyList.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
void CMsgPracticeLobbyList::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyList.game_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry_CLobbyMember::kPlayerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}
CMsgPracticeLobbyListResponseEntry_CLobbyMember::CMsgPracticeLobbyListResponseEntry_CLobbyMember(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_player_name()) {
    player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
  }
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedCtor() {
  _cached_size_ = 0;
  player_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_ = 0u;
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember::~CMsgPracticeLobbyListResponseEntry_CLobbyMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SharedDtor() {
  player_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry_CLobbyMember::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry_CLobbyMember::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry_CLobbyMember::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyListResponseEntry_CLobbyMember* n = new CMsgPracticeLobbyListResponseEntry_CLobbyMember;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (has_player_name()) {
    GOOGLE_DCHECK(!player_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*player_name_.UnsafeRawStringPointer())->clear();
  }
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string player_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->player_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string player_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry_CLobbyMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry_CLobbyMember* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyListResponseEntry_CLobbyMember>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::MergeFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_player_name();
      player_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.player_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::CopyFrom(const CMsgPracticeLobbyListResponseEntry_CLobbyMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry_CLobbyMember::Swap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::InternalSwap(CMsgPracticeLobbyListResponseEntry_CLobbyMember* other) {
  player_name_.Swap(&other->player_name_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry_CLobbyMember::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyListResponseEntry_CLobbyMember

// optional uint32 account_id = 1;
bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry_CLobbyMember::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
  return account_id_;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.account_id)
}

// optional string player_name = 2;
bool CMsgPracticeLobbyListResponseEntry_CLobbyMember::has_player_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_has_player_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_player_name();
}
const ::std::string& CMsgPracticeLobbyListResponseEntry_CLobbyMember::player_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return player_name_.GetNoArena();
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const ::std::string& value) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
#if LANG_CXX11
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(::std::string&& value) {
  set_has_player_name();
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
#endif
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}
::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::mutable_player_name() {
  set_has_player_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyListResponseEntry_CLobbyMember::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
  clear_has_player_name();
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyListResponseEntry_CLobbyMember::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    set_has_player_name();
  } else {
    clear_has_player_name();
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember.player_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponseEntry::kIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kTournamentIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kTournamentGameIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMembersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kRequiresPassKeyFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildIdFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGuildLogoFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kGameModeFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kFriendPresentFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kPlayersFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kCustomMapNameFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kServerRegionFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLanHostPingToServerRegionFieldNumber;
const int CMsgPracticeLobbyListResponseEntry::kLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
}
CMsgPracticeLobbyListResponseEntry::CMsgPracticeLobbyListResponseEntry(const CMsgPracticeLobbyListResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_game_mode()) {
    custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(league_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
}

void CMsgPracticeLobbyListResponseEntry::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, reinterpret_cast<char*>(&league_id_) -
    reinterpret_cast<char*>(&id_) + sizeof(league_id_));
}

CMsgPracticeLobbyListResponseEntry::~CMsgPracticeLobbyListResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponseEntry)
  SharedDtor();
}

void CMsgPracticeLobbyListResponseEntry::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyListResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponseEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponseEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponseEntry::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyListResponseEntry* n = new CMsgPracticeLobbyListResponseEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyListResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  members_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_game_mode()) {
      GOOGLE_DCHECK(!custom_game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_map_name()) {
      GOOGLE_DCHECK(!custom_map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_map_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&guild_id_) -
      reinterpret_cast<char*>(&id_) + sizeof(guild_id_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&guild_logo_, 0, reinterpret_cast<char*>(&lan_host_ping_to_server_region_) -
      reinterpret_cast<char*>(&guild_logo_) + sizeof(lan_host_ping_to_server_region_));
  }
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyListResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_game_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tournament_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_requires_pass_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_leader_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 guild_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_guild_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 guild_logo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_guild_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_game_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_game_mode().data(), this->custom_game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friend_present = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_friend_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_player_count = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_max_player_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_lan_host_ping_to_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 tournament_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_id(), output);
  }

  // optional uint32 tournament_game_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tournament_game_id(), output);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leader_account_id(), output);
  }

  // optional uint32 guild_id = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guild_id(), output);
  }

  // optional uint64 guild_logo = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->guild_logo(), output);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->custom_game_mode(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->game_mode(), output);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->friend_present(), output);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->players(), output);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->max_player_count(), output);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->server_region(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->lan_host_ping_to_server_region(), output);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponseEntry)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponseEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 tournament_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_id(), target);
  }

  // optional uint32 tournament_game_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tournament_game_id(), target);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  for (unsigned int i = 0, n = this->members_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->members(i), deterministic, target);
  }

  // optional bool requires_pass_key = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leader_account_id(), target);
  }

  // optional uint32 guild_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guild_id(), target);
  }

  // optional uint64 guild_logo = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->guild_logo(), target);
  }

  // optional string name = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string custom_game_mode = 11;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_game_mode().data(), this->custom_game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->custom_game_mode(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->game_mode(), target);
  }

  // optional bool friend_present = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->friend_present(), target);
  }

  // optional uint32 players = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->players(), target);
  }

  // optional string custom_map_name = 15;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->max_player_count(), target);
  }

  // optional uint32 server_region = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->server_region(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->lan_host_ping_to_server_region(), target);
  }

  // optional uint32 league_id = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponseEntry)
  return target;
}

size_t CMsgPracticeLobbyListResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
  {
    unsigned int count = this->members_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->members(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string custom_game_mode = 11;
    if (has_custom_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_game_mode());
    }

    // optional string custom_map_name = 15;
    if (has_custom_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional uint64 id = 1 [(.proto.dota.key_field) = true];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 tournament_id = 3;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 tournament_game_id = 4;
    if (has_tournament_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_game_id());
    }

    // optional uint32 leader_account_id = 7;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 guild_id = 8;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint64 guild_logo = 9;
    if (has_guild_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_logo());
    }

    // optional bool requires_pass_key = 6;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional bool friend_present = 13;
    if (has_friend_present()) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

    // optional uint32 players = 14;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 max_player_count = 16;
    if (has_max_player_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

    // optional uint32 server_region = 17;
    if (has_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 lan_host_ping_to_server_region = 18;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

  }
  // optional uint32 league_id = 19;
  if (has_league_id()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponseEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyListResponseEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponseEntry::MergeFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_custom_game_mode();
      custom_game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_custom_map_name();
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      tournament_game_id_ = from.tournament_game_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      guild_id_ = from.guild_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      guild_logo_ = from.guild_logo_;
    }
    if (cached_has_bits & 0x00000200u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000400u) {
      friend_present_ = from.friend_present_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00002000u) {
      max_player_count_ = from.max_player_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00008000u) {
      lan_host_ping_to_server_region_ = from.lan_host_ping_to_server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_league_id(from.league_id());
  }
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponseEntry::CopyFrom(const CMsgPracticeLobbyListResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponseEntry::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponseEntry::Swap(CMsgPracticeLobbyListResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponseEntry::InternalSwap(CMsgPracticeLobbyListResponseEntry* other) {
  members_.InternalSwap(&other->members_);
  name_.Swap(&other->name_);
  custom_game_mode_.Swap(&other->custom_game_mode_);
  custom_map_name_.Swap(&other->custom_map_name_);
  std::swap(id_, other->id_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(tournament_game_id_, other->tournament_game_id_);
  std::swap(leader_account_id_, other->leader_account_id_);
  std::swap(guild_id_, other->guild_id_);
  std::swap(guild_logo_, other->guild_logo_);
  std::swap(requires_pass_key_, other->requires_pass_key_);
  std::swap(friend_present_, other->friend_present_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(players_, other->players_);
  std::swap(max_player_count_, other->max_player_count_);
  std::swap(server_region_, other->server_region_);
  std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponseEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyListResponseEntry

// optional uint64 id = 1 [(.proto.dota.key_field) = true];
bool CMsgPracticeLobbyListResponseEntry::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyListResponseEntry::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.id)
  return id_;
}
void CMsgPracticeLobbyListResponseEntry::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.id)
}

// optional uint32 tournament_id = 3;
bool CMsgPracticeLobbyListResponseEntry::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPracticeLobbyListResponseEntry::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.tournament_id)
  return tournament_id_;
}
void CMsgPracticeLobbyListResponseEntry::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.tournament_id)
}

// optional uint32 tournament_game_id = 4;
bool CMsgPracticeLobbyListResponseEntry::has_tournament_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_tournament_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_tournament_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgPracticeLobbyListResponseEntry::clear_tournament_game_id() {
  tournament_game_id_ = 0u;
  clear_has_tournament_game_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::tournament_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.tournament_game_id)
  return tournament_game_id_;
}
void CMsgPracticeLobbyListResponseEntry::set_tournament_game_id(::google::protobuf::uint32 value) {
  set_has_tournament_game_id();
  tournament_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.tournament_game_id)
}

// repeated .proto.dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember members = 5;
int CMsgPracticeLobbyListResponseEntry::members_size() const {
  return members_.size();
}
void CMsgPracticeLobbyListResponseEntry::clear_members() {
  members_.Clear();
}
const ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember& CMsgPracticeLobbyListResponseEntry::members(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.members)
  return members_.Get(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponseEntry.members)
  return members_.Mutable(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember* CMsgPracticeLobbyListResponseEntry::add_members() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPracticeLobbyListResponseEntry.members)
  return members_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember >*
CMsgPracticeLobbyListResponseEntry::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPracticeLobbyListResponseEntry.members)
  return &members_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry_CLobbyMember >&
CMsgPracticeLobbyListResponseEntry::members() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPracticeLobbyListResponseEntry.members)
  return members_;
}

// optional bool requires_pass_key = 6;
bool CMsgPracticeLobbyListResponseEntry::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgPracticeLobbyListResponseEntry::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
bool CMsgPracticeLobbyListResponseEntry::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.requires_pass_key)
  return requires_pass_key_;
}
void CMsgPracticeLobbyListResponseEntry::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.requires_pass_key)
}

// optional uint32 leader_account_id = 7;
bool CMsgPracticeLobbyListResponseEntry::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgPracticeLobbyListResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.leader_account_id)
  return leader_account_id_;
}
void CMsgPracticeLobbyListResponseEntry::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.leader_account_id)
}

// optional uint32 guild_id = 8;
bool CMsgPracticeLobbyListResponseEntry::has_guild_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_guild_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgPracticeLobbyListResponseEntry::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::guild_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.guild_id)
  return guild_id_;
}
void CMsgPracticeLobbyListResponseEntry::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.guild_id)
}

// optional uint64 guild_logo = 9;
bool CMsgPracticeLobbyListResponseEntry::has_guild_logo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_guild_logo() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_guild_logo() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgPracticeLobbyListResponseEntry::clear_guild_logo() {
  guild_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_guild_logo();
}
::google::protobuf::uint64 CMsgPracticeLobbyListResponseEntry::guild_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.guild_logo)
  return guild_logo_;
}
void CMsgPracticeLobbyListResponseEntry::set_guild_logo(::google::protobuf::uint64 value) {
  set_has_guild_logo();
  guild_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.guild_logo)
}

// optional string name = 10;
bool CMsgPracticeLobbyListResponseEntry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyListResponseEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgPracticeLobbyListResponseEntry::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
  return name_.GetNoArena();
}
void CMsgPracticeLobbyListResponseEntry::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
}
#if LANG_CXX11
void CMsgPracticeLobbyListResponseEntry::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
}
#endif
void CMsgPracticeLobbyListResponseEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
}
void CMsgPracticeLobbyListResponseEntry::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
}
::std::string* CMsgPracticeLobbyListResponseEntry::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyListResponseEntry::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyListResponseEntry::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyListResponseEntry.name)
}

// optional string custom_game_mode = 11;
bool CMsgPracticeLobbyListResponseEntry::has_custom_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_custom_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_custom_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyListResponseEntry::clear_custom_game_mode() {
  custom_game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_game_mode();
}
const ::std::string& CMsgPracticeLobbyListResponseEntry::custom_game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return custom_game_mode_.GetNoArena();
}
void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const ::std::string& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
#if LANG_CXX11
void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(::std::string&& value) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
#endif
void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
void CMsgPracticeLobbyListResponseEntry::set_custom_game_mode(const char* value, size_t size) {
  set_has_custom_game_mode();
  custom_game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}
::std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_game_mode() {
  set_has_custom_game_mode();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  return custom_game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyListResponseEntry::release_custom_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
  clear_has_custom_game_mode();
  return custom_game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_game_mode(::std::string* custom_game_mode) {
  if (custom_game_mode != NULL) {
    set_has_custom_game_mode();
  } else {
    clear_has_custom_game_mode();
  }
  custom_game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_game_mode)
}

// optional .proto.dota.DOTA_GameMode game_mode = 12 [default = DOTA_GAMEMODE_NONE];
bool CMsgPracticeLobbyListResponseEntry::has_game_mode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_game_mode() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgPracticeLobbyListResponseEntry::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::proto::dota::DOTA_GameMode CMsgPracticeLobbyListResponseEntry::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
void CMsgPracticeLobbyListResponseEntry::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.game_mode)
}

// optional bool friend_present = 13;
bool CMsgPracticeLobbyListResponseEntry::has_friend_present() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_friend_present() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_friend_present() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgPracticeLobbyListResponseEntry::clear_friend_present() {
  friend_present_ = false;
  clear_has_friend_present();
}
bool CMsgPracticeLobbyListResponseEntry::friend_present() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.friend_present)
  return friend_present_;
}
void CMsgPracticeLobbyListResponseEntry::set_friend_present(bool value) {
  set_has_friend_present();
  friend_present_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.friend_present)
}

// optional uint32 players = 14;
bool CMsgPracticeLobbyListResponseEntry::has_players() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_players() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_players() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_players() {
  players_ = 0u;
  clear_has_players();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.players)
  return players_;
}
void CMsgPracticeLobbyListResponseEntry::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.players)
}

// optional string custom_map_name = 15;
bool CMsgPracticeLobbyListResponseEntry::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyListResponseEntry::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
const ::std::string& CMsgPracticeLobbyListResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return custom_map_name_.GetNoArena();
}
void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
#if LANG_CXX11
void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(::std::string&& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
#endif
void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
void CMsgPracticeLobbyListResponseEntry::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
}
::std::string* CMsgPracticeLobbyListResponseEntry::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyListResponseEntry::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyListResponseEntry::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyListResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 16;
bool CMsgPracticeLobbyListResponseEntry::has_max_player_count() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_max_player_count() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_max_player_count() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  clear_has_max_player_count();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.max_player_count)
  return max_player_count_;
}
void CMsgPracticeLobbyListResponseEntry::set_max_player_count(::google::protobuf::uint32 value) {
  set_has_max_player_count();
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.max_player_count)
}

// optional uint32 server_region = 17;
bool CMsgPracticeLobbyListResponseEntry::has_server_region() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_server_region() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_server_region() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.server_region)
  return server_region_;
}
void CMsgPracticeLobbyListResponseEntry::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.server_region)
}

// optional uint32 lan_host_ping_to_server_region = 18;
bool CMsgPracticeLobbyListResponseEntry::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
void CMsgPracticeLobbyListResponseEntry::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.lan_host_ping_to_server_region)
}

// optional uint32 league_id = 19;
bool CMsgPracticeLobbyListResponseEntry::has_league_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgPracticeLobbyListResponseEntry::set_has_league_id() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_has_league_id() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgPracticeLobbyListResponseEntry::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgPracticeLobbyListResponseEntry::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponseEntry.league_id)
  return league_id_;
}
void CMsgPracticeLobbyListResponseEntry::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponseEntry.league_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyListResponse::kTournamentGamesFieldNumber;
const int CMsgPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyListResponse)
}
CMsgPracticeLobbyListResponse::CMsgPracticeLobbyListResponse(const CMsgPracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tournament_games_ = from.tournament_games_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyListResponse)
}

void CMsgPracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
  tournament_games_ = false;
}

CMsgPracticeLobbyListResponse::~CMsgPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgPracticeLobbyListResponse::SharedDtor() {
}

void CMsgPracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyListResponse& CMsgPracticeLobbyListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyListResponse* CMsgPracticeLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyListResponse* n = new CMsgPracticeLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyListResponse)
  lobbies_.Clear();
  tournament_games_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool tournament_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_games();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tournament_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tournament_games = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->tournament_games(), output);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool tournament_games = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->tournament_games(), target);
  }

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyListResponse)
  return target;
}

size_t CMsgPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  // optional bool tournament_games = 1;
  if (has_tournament_games()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyListResponse::MergeFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
  if (from.has_tournament_games()) {
    set_tournament_games(from.tournament_games());
  }
}

void CMsgPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyListResponse::CopyFrom(const CMsgPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyListResponse::Swap(CMsgPracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyListResponse::InternalSwap(CMsgPracticeLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(tournament_games_, other->tournament_games_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyListResponse

// optional bool tournament_games = 1;
bool CMsgPracticeLobbyListResponse::has_tournament_games() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyListResponse::set_has_tournament_games() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyListResponse::clear_has_tournament_games() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyListResponse::clear_tournament_games() {
  tournament_games_ = false;
  clear_has_tournament_games();
}
bool CMsgPracticeLobbyListResponse::tournament_games() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponse.tournament_games)
  return tournament_games_;
}
void CMsgPracticeLobbyListResponse::set_tournament_games(bool value) {
  set_has_tournament_games();
  tournament_games_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyListResponse.tournament_games)
}

// repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 2;
int CMsgPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgPracticeLobbyListResponseEntry& CMsgPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >*
CMsgPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >&
CMsgPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyList::kServerRegionFieldNumber;
const int CMsgLobbyList::kGameModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyList::CMsgLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyList)
}
CMsgLobbyList::CMsgLobbyList(const CMsgLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&server_region_) + sizeof(game_mode_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyList)
}

void CMsgLobbyList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_region_, 0, reinterpret_cast<char*>(&game_mode_) -
    reinterpret_cast<char*>(&server_region_) + sizeof(game_mode_));
}

CMsgLobbyList::~CMsgLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyList)
  SharedDtor();
}

void CMsgLobbyList::SharedDtor() {
}

void CMsgLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyList::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyList& CMsgLobbyList::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyList* CMsgLobbyList::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyList* n = new CMsgLobbyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyList)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&server_region_, 0, reinterpret_cast<char*>(&game_mode_) -
      reinterpret_cast<char*>(&server_region_) + sizeof(game_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GameMode_IsValid(value)) {
            set_game_mode(static_cast< ::proto::dota::DOTA_GameMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyList)
  return false;
#undef DO_
}

void CMsgLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyList)
}

::google::protobuf::uint8* CMsgLobbyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyList)
  return target;
}

size_t CMsgLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 server_region = 1 [default = 0];
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyList)
    MergeFrom(*source);
  }
}

void CMsgLobbyList::MergeFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_mode_ = from.game_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyList::CopyFrom(const CMsgLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyList::IsInitialized() const {
  return true;
}

void CMsgLobbyList::Swap(CMsgLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyList::InternalSwap(CMsgLobbyList* other) {
  std::swap(server_region_, other->server_region_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyList

// optional uint32 server_region = 1 [default = 0];
bool CMsgLobbyList::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgLobbyList::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgLobbyList::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgLobbyList::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgLobbyList::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyList.server_region)
  return server_region_;
}
void CMsgLobbyList::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyList.server_region)
}

// optional .proto.dota.DOTA_GameMode game_mode = 2 [default = DOTA_GAMEMODE_NONE];
bool CMsgLobbyList::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgLobbyList::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgLobbyList::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgLobbyList::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
::proto::dota::DOTA_GameMode CMsgLobbyList::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyList.game_mode)
  return static_cast< ::proto::dota::DOTA_GameMode >(game_mode_);
}
void CMsgLobbyList::set_game_mode(::proto::dota::DOTA_GameMode value) {
  assert(::proto::dota::DOTA_GameMode_IsValid(value));
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgLobbyList.game_mode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyListResponse::CMsgLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyListResponse)
}
CMsgLobbyListResponse::CMsgLobbyListResponse(const CMsgLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyListResponse)
}

void CMsgLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgLobbyListResponse::~CMsgLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyListResponse)
  SharedDtor();
}

void CMsgLobbyListResponse::SharedDtor() {
}

void CMsgLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgLobbyListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgLobbyListResponse& CMsgLobbyListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgLobbyListResponse* CMsgLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgLobbyListResponse* n = new CMsgLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyListResponse)
  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyListResponse)
  return false;
#undef DO_
}

void CMsgLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyListResponse)
}

::google::protobuf::uint8* CMsgLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyListResponse)
  return target;
}

size_t CMsgLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyListResponse::MergeFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyListResponse::CopyFrom(const CMsgLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyListResponse::Swap(CMsgLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyListResponse::InternalSwap(CMsgLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgLobbyListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgLobbyListResponse

// repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
int CMsgLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgPracticeLobbyListResponseEntry& CMsgLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >*
CMsgLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >&
CMsgLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoin::kLobbyIdFieldNumber;
const int CMsgPracticeLobbyJoin::kClientVersionFieldNumber;
const int CMsgPracticeLobbyJoin::kPassKeyFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameCrcFieldNumber;
const int CMsgPracticeLobbyJoin::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoin)
}
CMsgPracticeLobbyJoin::CMsgPracticeLobbyJoin(const CMsgPracticeLobbyJoin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&custom_game_crc_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_crc_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoin)
}

void CMsgPracticeLobbyJoin::SharedCtor() {
  _cached_size_ = 0;
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&custom_game_crc_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_crc_));
}

CMsgPracticeLobbyJoin::~CMsgPracticeLobbyJoin() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoin)
  SharedDtor();
}

void CMsgPracticeLobbyJoin::SharedDtor() {
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgPracticeLobbyJoin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoin::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyJoin& CMsgPracticeLobbyJoin::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyJoin* CMsgPracticeLobbyJoin::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyJoin* n = new CMsgPracticeLobbyJoin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyJoin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoin)
  if (has_pass_key()) {
    GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pass_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 30u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&custom_game_crc_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(custom_game_crc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyJoin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgPracticeLobbyJoin.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_custom_game_crc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_custom_game_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoin)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoin.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoin)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgPracticeLobbyJoin.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional fixed64 custom_game_crc = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoin)
  return target;
}

size_t CMsgPracticeLobbyJoin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string pass_key = 3;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional fixed32 custom_game_timestamp = 5;
    if (has_custom_game_timestamp()) {
      total_size += 1 + 4;
    }

    // optional fixed64 custom_game_crc = 4;
    if (has_custom_game_crc()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyJoin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoin)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoin::MergeFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPracticeLobbyJoin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoin::CopyFrom(const CMsgPracticeLobbyJoin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoin::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoin::Swap(CMsgPracticeLobbyJoin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoin::InternalSwap(CMsgPracticeLobbyJoin* other) {
  pass_key_.Swap(&other->pass_key_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(client_version_, other->client_version_);
  std::swap(custom_game_timestamp_, other->custom_game_timestamp_);
  std::swap(custom_game_crc_, other->custom_game_crc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoin::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyJoin

// optional uint64 lobby_id = 1;
bool CMsgPracticeLobbyJoin::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgPracticeLobbyJoin::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgPracticeLobbyJoin::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgPracticeLobbyJoin::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgPracticeLobbyJoin::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoin.lobby_id)
  return lobby_id_;
}
void CMsgPracticeLobbyJoin::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoin.lobby_id)
}

// optional uint32 client_version = 2;
bool CMsgPracticeLobbyJoin::has_client_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgPracticeLobbyJoin::set_has_client_version() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgPracticeLobbyJoin::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgPracticeLobbyJoin::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgPracticeLobbyJoin::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoin.client_version)
  return client_version_;
}
void CMsgPracticeLobbyJoin::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoin.client_version)
}

// optional string pass_key = 3;
bool CMsgPracticeLobbyJoin::has_pass_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyJoin::set_has_pass_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyJoin::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyJoin::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CMsgPracticeLobbyJoin::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoin.pass_key)
  return pass_key_.GetNoArena();
}
void CMsgPracticeLobbyJoin::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoin.pass_key)
}
#if LANG_CXX11
void CMsgPracticeLobbyJoin::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgPracticeLobbyJoin.pass_key)
}
#endif
void CMsgPracticeLobbyJoin::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgPracticeLobbyJoin.pass_key)
}
void CMsgPracticeLobbyJoin::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgPracticeLobbyJoin.pass_key)
}
::std::string* CMsgPracticeLobbyJoin::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgPracticeLobbyJoin.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgPracticeLobbyJoin::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgPracticeLobbyJoin.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgPracticeLobbyJoin::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgPracticeLobbyJoin.pass_key)
}

// optional fixed64 custom_game_crc = 4;
bool CMsgPracticeLobbyJoin::has_custom_game_crc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgPracticeLobbyJoin::set_has_custom_game_crc() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgPracticeLobbyJoin::clear_has_custom_game_crc() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgPracticeLobbyJoin::clear_custom_game_crc() {
  custom_game_crc_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_crc();
}
::google::protobuf::uint64 CMsgPracticeLobbyJoin::custom_game_crc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoin.custom_game_crc)
  return custom_game_crc_;
}
void CMsgPracticeLobbyJoin::set_custom_game_crc(::google::protobuf::uint64 value) {
  set_has_custom_game_crc();
  custom_game_crc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoin.custom_game_crc)
}

// optional fixed32 custom_game_timestamp = 5;
bool CMsgPracticeLobbyJoin::has_custom_game_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgPracticeLobbyJoin::set_has_custom_game_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgPracticeLobbyJoin::clear_has_custom_game_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgPracticeLobbyJoin::clear_custom_game_timestamp() {
  custom_game_timestamp_ = 0u;
  clear_has_custom_game_timestamp();
}
::google::protobuf::uint32 CMsgPracticeLobbyJoin::custom_game_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoin.custom_game_timestamp)
  return custom_game_timestamp_;
}
void CMsgPracticeLobbyJoin::set_custom_game_timestamp(::google::protobuf::uint32 value) {
  set_has_custom_game_timestamp();
  custom_game_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoin.custom_game_timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPracticeLobbyJoinResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPracticeLobbyJoinResponse)
}
CMsgPracticeLobbyJoinResponse::CMsgPracticeLobbyJoinResponse(const CMsgPracticeLobbyJoinResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPracticeLobbyJoinResponse)
}

void CMsgPracticeLobbyJoinResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgPracticeLobbyJoinResponse::~CMsgPracticeLobbyJoinResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPracticeLobbyJoinResponse)
  SharedDtor();
}

void CMsgPracticeLobbyJoinResponse::SharedDtor() {
}

void CMsgPracticeLobbyJoinResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgPracticeLobbyJoinResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgPracticeLobbyJoinResponse& CMsgPracticeLobbyJoinResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgPracticeLobbyJoinResponse* CMsgPracticeLobbyJoinResponse::New(::google::protobuf::Arena* arena) const {
  CMsgPracticeLobbyJoinResponse* n = new CMsgPracticeLobbyJoinResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgPracticeLobbyJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgPracticeLobbyJoinResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPracticeLobbyJoinResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPracticeLobbyJoinResponse)
  return false;
#undef DO_
}

void CMsgPracticeLobbyJoinResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPracticeLobbyJoinResponse)
}

::google::protobuf::uint8* CMsgPracticeLobbyJoinResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPracticeLobbyJoinResponse)
  return target;
}

size_t CMsgPracticeLobbyJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPracticeLobbyJoinResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgPracticeLobbyJoinResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPracticeLobbyJoinResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPracticeLobbyJoinResponse)
    MergeFrom(*source);
  }
}

void CMsgPracticeLobbyJoinResponse::MergeFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPracticeLobbyJoinResponse::CopyFrom(const CMsgPracticeLobbyJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPracticeLobbyJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPracticeLobbyJoinResponse::IsInitialized() const {
  return true;
}

void CMsgPracticeLobbyJoinResponse::Swap(CMsgPracticeLobbyJoinResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPracticeLobbyJoinResponse::InternalSwap(CMsgPracticeLobbyJoinResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgPracticeLobbyJoinResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgPracticeLobbyJoinResponse

// optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
bool CMsgPracticeLobbyJoinResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgPracticeLobbyJoinResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgPracticeLobbyJoinResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgPracticeLobbyJoinResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::DOTAJoinLobbyResult CMsgPracticeLobbyJoinResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgPracticeLobbyJoinResponse.result)
  return static_cast< ::proto::dota::DOTAJoinLobbyResult >(result_);
}
void CMsgPracticeLobbyJoinResponse::set_result(::proto::dota::DOTAJoinLobbyResult value) {
  assert(::proto::dota::DOTAJoinLobbyResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgPracticeLobbyJoinResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFriendPracticeLobbyListRequest::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
}
CMsgFriendPracticeLobbyListRequest::CMsgFriendPracticeLobbyListRequest(const CMsgFriendPracticeLobbyListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      friends_(from.friends_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
}

void CMsgFriendPracticeLobbyListRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgFriendPracticeLobbyListRequest::~CMsgFriendPracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFriendPracticeLobbyListRequest)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListRequest::SharedDtor() {
}

void CMsgFriendPracticeLobbyListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFriendPracticeLobbyListRequest& CMsgFriendPracticeLobbyListRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFriendPracticeLobbyListRequest* CMsgFriendPracticeLobbyListRequest::New(::google::protobuf::Arena* arena) const {
  CMsgFriendPracticeLobbyListRequest* n = new CMsgFriendPracticeLobbyListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFriendPracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  friends_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFriendPracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 friends = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_friends())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_friends())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return false;
#undef DO_
}

void CMsgFriendPracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  for (int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->friends(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFriendPracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 friends = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->friends_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFriendPracticeLobbyListRequest)
  return target;
}

size_t CMsgFriendPracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 friends = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->friends_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->friends_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFriendPracticeLobbyListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFriendPracticeLobbyListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFriendPracticeLobbyListRequest)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListRequest::MergeFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListRequest::CopyFrom(const CMsgFriendPracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListRequest::Swap(CMsgFriendPracticeLobbyListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFriendPracticeLobbyListRequest::InternalSwap(CMsgFriendPracticeLobbyListRequest* other) {
  friends_.InternalSwap(&other->friends_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFriendPracticeLobbyListRequest

// repeated uint32 friends = 1;
int CMsgFriendPracticeLobbyListRequest::friends_size() const {
  return friends_.size();
}
void CMsgFriendPracticeLobbyListRequest::clear_friends() {
  friends_.Clear();
}
::google::protobuf::uint32 CMsgFriendPracticeLobbyListRequest::friends(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFriendPracticeLobbyListRequest.friends)
  return friends_.Get(index);
}
void CMsgFriendPracticeLobbyListRequest::set_friends(int index, ::google::protobuf::uint32 value) {
  friends_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgFriendPracticeLobbyListRequest.friends)
}
void CMsgFriendPracticeLobbyListRequest::add_friends(::google::protobuf::uint32 value) {
  friends_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgFriendPracticeLobbyListRequest.friends)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgFriendPracticeLobbyListRequest::friends() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgFriendPracticeLobbyListRequest.friends)
  return friends_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgFriendPracticeLobbyListRequest::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgFriendPracticeLobbyListRequest.friends)
  return &friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFriendPracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
}
CMsgFriendPracticeLobbyListResponse::CMsgFriendPracticeLobbyListResponse(const CMsgFriendPracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
}

void CMsgFriendPracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgFriendPracticeLobbyListResponse::~CMsgFriendPracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFriendPracticeLobbyListResponse)
  SharedDtor();
}

void CMsgFriendPracticeLobbyListResponse::SharedDtor() {
}

void CMsgFriendPracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgFriendPracticeLobbyListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgFriendPracticeLobbyListResponse& CMsgFriendPracticeLobbyListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgFriendPracticeLobbyListResponse* CMsgFriendPracticeLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgFriendPracticeLobbyListResponse* n = new CMsgFriendPracticeLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgFriendPracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgFriendPracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgFriendPracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFriendPracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgFriendPracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFriendPracticeLobbyListResponse)
  return target;
}

size_t CMsgFriendPracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFriendPracticeLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgFriendPracticeLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFriendPracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFriendPracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgFriendPracticeLobbyListResponse::MergeFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFriendPracticeLobbyListResponse::CopyFrom(const CMsgFriendPracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFriendPracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFriendPracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgFriendPracticeLobbyListResponse::Swap(CMsgFriendPracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFriendPracticeLobbyListResponse::InternalSwap(CMsgFriendPracticeLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgFriendPracticeLobbyListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgFriendPracticeLobbyListResponse

// repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
int CMsgFriendPracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgFriendPracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgPracticeLobbyListResponseEntry& CMsgFriendPracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgFriendPracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >*
CMsgFriendPracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgFriendPracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >&
CMsgFriendPracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgFriendPracticeLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGuildmatePracticeLobbyListRequest::kGuildsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}
CMsgGuildmatePracticeLobbyListRequest::CMsgGuildmatePracticeLobbyListRequest(const CMsgGuildmatePracticeLobbyListRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      guilds_(from.guilds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}

void CMsgGuildmatePracticeLobbyListRequest::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGuildmatePracticeLobbyListRequest::~CMsgGuildmatePracticeLobbyListRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListRequest::SharedDtor() {
}

void CMsgGuildmatePracticeLobbyListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGuildmatePracticeLobbyListRequest& CMsgGuildmatePracticeLobbyListRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGuildmatePracticeLobbyListRequest* CMsgGuildmatePracticeLobbyListRequest::New(::google::protobuf::Arena* arena) const {
  CMsgGuildmatePracticeLobbyListRequest* n = new CMsgGuildmatePracticeLobbyListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGuildmatePracticeLobbyListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  guilds_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGuildmatePracticeLobbyListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 guilds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_guilds())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_guilds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return false;
#undef DO_
}

void CMsgGuildmatePracticeLobbyListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 guilds = 1;
  for (int i = 0, n = this->guilds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->guilds(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 guilds = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->guilds_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  return target;
}

size_t CMsgGuildmatePracticeLobbyListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 guilds = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->guilds_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->guilds_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGuildmatePracticeLobbyListRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListRequest::MergeFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  guilds_.MergeFrom(from.guilds_);
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListRequest::CopyFrom(const CMsgGuildmatePracticeLobbyListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListRequest::IsInitialized() const {
  return true;
}

void CMsgGuildmatePracticeLobbyListRequest::Swap(CMsgGuildmatePracticeLobbyListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGuildmatePracticeLobbyListRequest::InternalSwap(CMsgGuildmatePracticeLobbyListRequest* other) {
  guilds_.InternalSwap(&other->guilds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGuildmatePracticeLobbyListRequest

// repeated uint32 guilds = 1;
int CMsgGuildmatePracticeLobbyListRequest::guilds_size() const {
  return guilds_.size();
}
void CMsgGuildmatePracticeLobbyListRequest::clear_guilds() {
  guilds_.Clear();
}
::google::protobuf::uint32 CMsgGuildmatePracticeLobbyListRequest::guilds(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_.Get(index);
}
void CMsgGuildmatePracticeLobbyListRequest::set_guilds(int index, ::google::protobuf::uint32 value) {
  guilds_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGuildmatePracticeLobbyListRequest.guilds)
}
void CMsgGuildmatePracticeLobbyListRequest::add_guilds(::google::protobuf::uint32 value) {
  guilds_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGuildmatePracticeLobbyListRequest.guilds)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgGuildmatePracticeLobbyListRequest::guilds() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGuildmatePracticeLobbyListRequest.guilds)
  return guilds_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgGuildmatePracticeLobbyListRequest::mutable_guilds() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGuildmatePracticeLobbyListRequest.guilds)
  return &guilds_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGuildmatePracticeLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}
CMsgGuildmatePracticeLobbyListResponse::CMsgGuildmatePracticeLobbyListResponse(const CMsgGuildmatePracticeLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}

void CMsgGuildmatePracticeLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgGuildmatePracticeLobbyListResponse::~CMsgGuildmatePracticeLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  SharedDtor();
}

void CMsgGuildmatePracticeLobbyListResponse::SharedDtor() {
}

void CMsgGuildmatePracticeLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGuildmatePracticeLobbyListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGuildmatePracticeLobbyListResponse& CMsgGuildmatePracticeLobbyListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGuildmatePracticeLobbyListResponse* CMsgGuildmatePracticeLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgGuildmatePracticeLobbyListResponse* n = new CMsgGuildmatePracticeLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGuildmatePracticeLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGuildmatePracticeLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return false;
#undef DO_
}

void CMsgGuildmatePracticeLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
}

::google::protobuf::uint8* CMsgGuildmatePracticeLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  return target;
}

size_t CMsgGuildmatePracticeLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGuildmatePracticeLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGuildmatePracticeLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgGuildmatePracticeLobbyListResponse::MergeFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGuildmatePracticeLobbyListResponse::CopyFrom(const CMsgGuildmatePracticeLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGuildmatePracticeLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGuildmatePracticeLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgGuildmatePracticeLobbyListResponse::Swap(CMsgGuildmatePracticeLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGuildmatePracticeLobbyListResponse::InternalSwap(CMsgGuildmatePracticeLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGuildmatePracticeLobbyListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGuildmatePracticeLobbyListResponse

// repeated .proto.dota.CMsgPracticeLobbyListResponseEntry lobbies = 1;
int CMsgGuildmatePracticeLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgGuildmatePracticeLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgPracticeLobbyListResponseEntry& CMsgGuildmatePracticeLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgPracticeLobbyListResponseEntry* CMsgGuildmatePracticeLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >*
CMsgGuildmatePracticeLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgPracticeLobbyListResponseEntry >&
CMsgGuildmatePracticeLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGuildmatePracticeLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesRequest::kServerRegionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesRequest)
}
CMsgJoinableCustomGameModesRequest::CMsgJoinableCustomGameModesRequest(const CMsgJoinableCustomGameModesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_region_ = from.server_region_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesRequest)
}

void CMsgJoinableCustomGameModesRequest::SharedCtor() {
  _cached_size_ = 0;
  server_region_ = 0u;
}

CMsgJoinableCustomGameModesRequest::~CMsgJoinableCustomGameModesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesRequest)
  SharedDtor();
}

void CMsgJoinableCustomGameModesRequest::SharedDtor() {
}

void CMsgJoinableCustomGameModesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomGameModesRequest& CMsgJoinableCustomGameModesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomGameModesRequest* CMsgJoinableCustomGameModesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomGameModesRequest* n = new CMsgJoinableCustomGameModesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomGameModesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  server_region_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomGameModesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesRequest)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesRequest)
  return target;
}

size_t CMsgJoinableCustomGameModesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional uint32 server_region = 1;
  if (has_server_region()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_region());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomGameModesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesRequest::MergeFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_region()) {
    set_server_region(from.server_region());
  }
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesRequest::CopyFrom(const CMsgJoinableCustomGameModesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesRequest::Swap(CMsgJoinableCustomGameModesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesRequest::InternalSwap(CMsgJoinableCustomGameModesRequest* other) {
  std::swap(server_region_, other->server_region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomGameModesRequest

// optional uint32 server_region = 1;
bool CMsgJoinableCustomGameModesRequest::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJoinableCustomGameModesRequest::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJoinableCustomGameModesRequest::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJoinableCustomGameModesRequest::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgJoinableCustomGameModesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomGameModesRequest.server_region)
  return server_region_;
}
void CMsgJoinableCustomGameModesRequest::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomGameModesRequest.server_region)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kLobbyCountFieldNumber;
const int CMsgJoinableCustomGameModesResponseEntry::kPlayerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}
CMsgJoinableCustomGameModesResponseEntry::CMsgJoinableCustomGameModesResponseEntry(const CMsgJoinableCustomGameModesResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&custom_game_id_) + sizeof(player_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}

void CMsgJoinableCustomGameModesResponseEntry::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&custom_game_id_, 0, reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&custom_game_id_) + sizeof(player_count_));
}

CMsgJoinableCustomGameModesResponseEntry::~CMsgJoinableCustomGameModesResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponseEntry::SharedDtor() {
}

void CMsgJoinableCustomGameModesResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponseEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponseEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponseEntry::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomGameModesResponseEntry* n = new CMsgJoinableCustomGameModesResponseEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomGameModesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&custom_game_id_, 0, reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&custom_game_id_) + sizeof(player_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomGameModesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 custom_game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lobby_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->custom_game_id(), output);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lobby_count(), output);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponseEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 custom_game_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->custom_game_id(), target);
  }

  // optional uint32 lobby_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lobby_count(), target);
  }

  // optional uint32 player_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomGameModesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 custom_game_id = 1;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 lobby_count = 2;
    if (has_lobby_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_count());
    }

    // optional uint32 player_count = 3;
    if (has_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponseEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomGameModesResponseEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponseEntry::MergeFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_count_ = from.lobby_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_count_ = from.player_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponseEntry::CopyFrom(const CMsgJoinableCustomGameModesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponseEntry::Swap(CMsgJoinableCustomGameModesResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesResponseEntry::InternalSwap(CMsgJoinableCustomGameModesResponseEntry* other) {
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(lobby_count_, other->lobby_count_);
  std::swap(player_count_, other->player_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponseEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomGameModesResponseEntry

// optional uint64 custom_game_id = 1;
bool CMsgJoinableCustomGameModesResponseEntry::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJoinableCustomGameModesResponseEntry::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgJoinableCustomGameModesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
  return custom_game_id_;
}
void CMsgJoinableCustomGameModesResponseEntry::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomGameModesResponseEntry.custom_game_id)
}

// optional uint32 lobby_count = 2;
bool CMsgJoinableCustomGameModesResponseEntry::has_lobby_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJoinableCustomGameModesResponseEntry::set_has_lobby_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_has_lobby_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_lobby_count() {
  lobby_count_ = 0u;
  clear_has_lobby_count();
}
::google::protobuf::uint32 CMsgJoinableCustomGameModesResponseEntry::lobby_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomGameModesResponseEntry.lobby_count)
  return lobby_count_;
}
void CMsgJoinableCustomGameModesResponseEntry::set_lobby_count(::google::protobuf::uint32 value) {
  set_has_lobby_count();
  lobby_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomGameModesResponseEntry.lobby_count)
}

// optional uint32 player_count = 3;
bool CMsgJoinableCustomGameModesResponseEntry::has_player_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgJoinableCustomGameModesResponseEntry::set_has_player_count() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_has_player_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgJoinableCustomGameModesResponseEntry::clear_player_count() {
  player_count_ = 0u;
  clear_has_player_count();
}
::google::protobuf::uint32 CMsgJoinableCustomGameModesResponseEntry::player_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomGameModesResponseEntry.player_count)
  return player_count_;
}
void CMsgJoinableCustomGameModesResponseEntry::set_player_count(::google::protobuf::uint32 value) {
  set_has_player_count();
  player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomGameModesResponseEntry.player_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomGameModesResponse::kGameModesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomGameModesResponse)
}
CMsgJoinableCustomGameModesResponse::CMsgJoinableCustomGameModesResponse(const CMsgJoinableCustomGameModesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      game_modes_(from.game_modes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomGameModesResponse)
}

void CMsgJoinableCustomGameModesResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgJoinableCustomGameModesResponse::~CMsgJoinableCustomGameModesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomGameModesResponse)
  SharedDtor();
}

void CMsgJoinableCustomGameModesResponse::SharedDtor() {
}

void CMsgJoinableCustomGameModesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomGameModesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomGameModesResponse& CMsgJoinableCustomGameModesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomGameModesResponse* CMsgJoinableCustomGameModesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomGameModesResponse* n = new CMsgJoinableCustomGameModesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomGameModesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  game_modes_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomGameModesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_modes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomGameModesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomGameModesResponse)
  return false;
#undef DO_
}

void CMsgJoinableCustomGameModesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned int i = 0, n = this->game_modes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_modes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomGameModesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomGameModesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  for (unsigned int i = 0, n = this->game_modes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->game_modes(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomGameModesResponse)
  return target;
}

size_t CMsgJoinableCustomGameModesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
  {
    unsigned int count = this->game_modes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_modes(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomGameModesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomGameModesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomGameModesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomGameModesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomGameModesResponse::MergeFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_modes_.MergeFrom(from.game_modes_);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomGameModesResponse::CopyFrom(const CMsgJoinableCustomGameModesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomGameModesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomGameModesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomGameModesResponse::Swap(CMsgJoinableCustomGameModesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomGameModesResponse::InternalSwap(CMsgJoinableCustomGameModesResponse* other) {
  game_modes_.InternalSwap(&other->game_modes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomGameModesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomGameModesResponse

// repeated .proto.dota.CMsgJoinableCustomGameModesResponseEntry game_modes = 1;
int CMsgJoinableCustomGameModesResponse::game_modes_size() const {
  return game_modes_.size();
}
void CMsgJoinableCustomGameModesResponse::clear_game_modes() {
  game_modes_.Clear();
}
const ::proto::dota::CMsgJoinableCustomGameModesResponseEntry& CMsgJoinableCustomGameModesResponse::game_modes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Get(index);
}
::proto::dota::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::mutable_game_modes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Mutable(index);
}
::proto::dota::CMsgJoinableCustomGameModesResponseEntry* CMsgJoinableCustomGameModesResponse::add_game_modes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgJoinableCustomGameModesResponseEntry >*
CMsgJoinableCustomGameModesResponse::mutable_game_modes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgJoinableCustomGameModesResponse.game_modes)
  return &game_modes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgJoinableCustomGameModesResponseEntry >&
CMsgJoinableCustomGameModesResponse::game_modes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgJoinableCustomGameModesResponse.game_modes)
  return game_modes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesRequest::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesRequest::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
}
CMsgJoinableCustomLobbiesRequest::CMsgJoinableCustomLobbiesRequest(const CMsgJoinableCustomLobbiesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&custom_game_id_) + sizeof(server_region_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
}

void CMsgJoinableCustomLobbiesRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&custom_game_id_, 0, reinterpret_cast<char*>(&server_region_) -
    reinterpret_cast<char*>(&custom_game_id_) + sizeof(server_region_));
}

CMsgJoinableCustomLobbiesRequest::~CMsgJoinableCustomLobbiesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesRequest)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesRequest::SharedDtor() {
}

void CMsgJoinableCustomLobbiesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomLobbiesRequest& CMsgJoinableCustomLobbiesRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomLobbiesRequest* CMsgJoinableCustomLobbiesRequest::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomLobbiesRequest* n = new CMsgJoinableCustomLobbiesRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomLobbiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&custom_game_id_, 0, reinterpret_cast<char*>(&server_region_) -
      reinterpret_cast<char*>(&custom_game_id_) + sizeof(server_region_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomLobbiesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesRequest)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesRequest)
  return target;
}

size_t CMsgJoinableCustomLobbiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 server_region = 1;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomLobbiesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesRequest)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesRequest::MergeFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_region_ = from.server_region_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesRequest::CopyFrom(const CMsgJoinableCustomLobbiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesRequest::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesRequest::Swap(CMsgJoinableCustomLobbiesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesRequest::InternalSwap(CMsgJoinableCustomLobbiesRequest* other) {
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(server_region_, other->server_region_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomLobbiesRequest

// optional uint32 server_region = 1;
bool CMsgJoinableCustomLobbiesRequest::has_server_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJoinableCustomLobbiesRequest::set_has_server_region() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJoinableCustomLobbiesRequest::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJoinableCustomLobbiesRequest::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesRequest::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesRequest.server_region)
  return server_region_;
}
void CMsgJoinableCustomLobbiesRequest::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesRequest.server_region)
}

// optional uint64 custom_game_id = 2;
bool CMsgJoinableCustomLobbiesRequest::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJoinableCustomLobbiesRequest::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJoinableCustomLobbiesRequest::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJoinableCustomLobbiesRequest::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgJoinableCustomLobbiesRequest::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesRequest.custom_game_id)
  return custom_game_id_;
}
void CMsgJoinableCustomLobbiesRequest::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesRequest.custom_game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomGameIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLobbyNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMemberCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderAccountIdFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLeaderNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kCustomMapNameFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kMaxPlayerCountFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kLanHostPingToServerRegionFieldNumber;
const int CMsgJoinableCustomLobbiesResponseEntry::kHasPassKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}
CMsgJoinableCustomLobbiesResponseEntry::CMsgJoinableCustomLobbiesResponseEntry(const CMsgJoinableCustomLobbiesResponseEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_name()) {
    lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
  }
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_leader_name()) {
    leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
  }
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_custom_map_name()) {
    custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&has_pass_key_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(has_pass_key_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedCtor() {
  _cached_size_ = 0;
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&has_pass_key_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(has_pass_key_));
}

CMsgJoinableCustomLobbiesResponseEntry::~CMsgJoinableCustomLobbiesResponseEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponseEntry::SharedDtor() {
  lobby_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leader_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  custom_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgJoinableCustomLobbiesResponseEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponseEntry::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponseEntry::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponseEntry::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomLobbiesResponseEntry* n = new CMsgJoinableCustomLobbiesResponseEntry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomLobbiesResponseEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_lobby_name()) {
      GOOGLE_DCHECK(!lobby_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lobby_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_leader_name()) {
      GOOGLE_DCHECK(!leader_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*leader_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_custom_map_name()) {
      GOOGLE_DCHECK(!custom_map_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*custom_map_name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&max_player_count_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(max_player_count_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&server_region_, 0, reinterpret_cast<char*>(&has_pass_key_) -
      reinterpret_cast<char*>(&server_region_) + sizeof(has_pass_key_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomLobbiesResponseEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lobby_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_leader_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string leader_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leader_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leader_name().data(), this->leader_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string custom_map_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->custom_map_name().data(), this->custom_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_player_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_max_player_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 server_region = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lan_host_ping_to_server_region = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_lan_host_ping_to_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lan_host_ping_to_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_pass_key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_has_pass_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesResponseEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lobby_name(), output);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->member_count(), output);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->leader_account_id(), output);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leader_name(), output);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->custom_map_name(), output);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_player_count(), output);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->server_region(), output);
  }

  // optional uint32 lan_host_ping_to_server_region = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->lan_host_ping_to_server_region(), output);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_pass_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponseEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional string lobby_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lobby_name(), target);
  }

  // optional uint32 member_count = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->member_count(), target);
  }

  // optional uint32 leader_account_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->leader_account_id(), target);
  }

  // optional string leader_name = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leader_name().data(), this->leader_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leader_name(), target);
  }

  // optional string custom_map_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->custom_map_name().data(), this->custom_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->custom_map_name(), target);
  }

  // optional uint32 max_player_count = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_player_count(), target);
  }

  // optional uint32 server_region = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->server_region(), target);
  }

  // optional uint32 lan_host_ping_to_server_region = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->lan_host_ping_to_server_region(), target);
  }

  // optional bool has_pass_key = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_pass_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponseEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string lobby_name = 3;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional string leader_name = 6;
    if (has_leader_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leader_name());
    }

    // optional string custom_map_name = 7;
    if (has_custom_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->custom_map_name());
    }

    // optional fixed64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 member_count = 4;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

    // optional uint32 leader_account_id = 5;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 max_player_count = 8;
    if (has_max_player_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_player_count());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 server_region = 9;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 lan_host_ping_to_server_region = 10;
    if (has_lan_host_ping_to_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lan_host_ping_to_server_region());
    }

    // optional bool has_pass_key = 11;
    if (has_has_pass_key()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponseEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomLobbiesResponseEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::MergeFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lobby_name();
      lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_leader_name();
      leader_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leader_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_custom_map_name();
      custom_map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.custom_map_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_player_count_ = from.max_player_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000200u) {
      lan_host_ping_to_server_region_ = from.lan_host_ping_to_server_region_;
    }
    if (cached_has_bits & 0x00000400u) {
      has_pass_key_ = from.has_pass_key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponseEntry::CopyFrom(const CMsgJoinableCustomLobbiesResponseEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponseEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponseEntry::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponseEntry::Swap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesResponseEntry::InternalSwap(CMsgJoinableCustomLobbiesResponseEntry* other) {
  lobby_name_.Swap(&other->lobby_name_);
  leader_name_.Swap(&other->leader_name_);
  custom_map_name_.Swap(&other->custom_map_name_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(member_count_, other->member_count_);
  std::swap(leader_account_id_, other->leader_account_id_);
  std::swap(max_player_count_, other->max_player_count_);
  std::swap(server_region_, other->server_region_);
  std::swap(lan_host_ping_to_server_region_, other->lan_host_ping_to_server_region_);
  std::swap(has_pass_key_, other->has_pass_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponseEntry::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomLobbiesResponseEntry

// optional fixed64 lobby_id = 1;
bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgJoinableCustomLobbiesResponseEntry::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
  return lobby_id_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_id)
}

// optional uint64 custom_game_id = 2;
bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgJoinableCustomLobbiesResponseEntry::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
  return custom_game_id_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_game_id)
}

// optional string lobby_name = 3;
bool CMsgJoinableCustomLobbiesResponseEntry::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_lobby_name() {
  lobby_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lobby_name();
}
const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::lobby_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return lobby_name_.GetNoArena();
}
void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
#if LANG_CXX11
void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(::std::string&& value) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
#endif
void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
void CMsgJoinableCustomLobbiesResponseEntry::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_lobby_name() {
  set_has_lobby_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  return lobby_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_lobby_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
  clear_has_lobby_name();
  return lobby_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_lobby_name(::std::string* lobby_name) {
  if (lobby_name != NULL) {
    set_has_lobby_name();
  } else {
    clear_has_lobby_name();
  }
  lobby_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lobby_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lobby_name)
}

// optional uint32 member_count = 4;
bool CMsgJoinableCustomLobbiesResponseEntry::has_member_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_member_count() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.member_count)
  return member_count_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.member_count)
}

// optional uint32 leader_account_id = 5;
bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::leader_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
  return leader_account_id_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_account_id)
}

// optional string leader_name = 6;
bool CMsgJoinableCustomLobbiesResponseEntry::has_leader_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_leader_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_leader_name() {
  leader_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader_name();
}
const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::leader_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return leader_name_.GetNoArena();
}
void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
#if LANG_CXX11
void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(::std::string&& value) {
  set_has_leader_name();
  leader_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
#endif
void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
void CMsgJoinableCustomLobbiesResponseEntry::set_leader_name(const char* value, size_t size) {
  set_has_leader_name();
  leader_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_leader_name() {
  set_has_leader_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  return leader_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_leader_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
  clear_has_leader_name();
  return leader_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name != NULL) {
    set_has_leader_name();
  } else {
    clear_has_leader_name();
  }
  leader_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.leader_name)
}

// optional string custom_map_name = 7;
bool CMsgJoinableCustomLobbiesResponseEntry::has_custom_map_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_custom_map_name() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_custom_map_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_custom_map_name() {
  custom_map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_custom_map_name();
}
const ::std::string& CMsgJoinableCustomLobbiesResponseEntry::custom_map_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return custom_map_name_.GetNoArena();
}
void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const ::std::string& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
#if LANG_CXX11
void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(::std::string&& value) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
#endif
void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
void CMsgJoinableCustomLobbiesResponseEntry::set_custom_map_name(const char* value, size_t size) {
  set_has_custom_map_name();
  custom_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::mutable_custom_map_name() {
  set_has_custom_map_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  return custom_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgJoinableCustomLobbiesResponseEntry::release_custom_map_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
  clear_has_custom_map_name();
  return custom_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgJoinableCustomLobbiesResponseEntry::set_allocated_custom_map_name(::std::string* custom_map_name) {
  if (custom_map_name != NULL) {
    set_has_custom_map_name();
  } else {
    clear_has_custom_map_name();
  }
  custom_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_map_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.custom_map_name)
}

// optional uint32 max_player_count = 8;
bool CMsgJoinableCustomLobbiesResponseEntry::has_max_player_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_max_player_count() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_max_player_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_max_player_count() {
  max_player_count_ = 0u;
  clear_has_max_player_count();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::max_player_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
  return max_player_count_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_max_player_count(::google::protobuf::uint32 value) {
  set_has_max_player_count();
  max_player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.max_player_count)
}

// optional uint32 server_region = 9;
bool CMsgJoinableCustomLobbiesResponseEntry::has_server_region() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_server_region() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.server_region)
  return server_region_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.server_region)
}

// optional uint32 lan_host_ping_to_server_region = 10;
bool CMsgJoinableCustomLobbiesResponseEntry::has_lan_host_ping_to_server_region() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_lan_host_ping_to_server_region() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_lan_host_ping_to_server_region() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_lan_host_ping_to_server_region() {
  lan_host_ping_to_server_region_ = 0u;
  clear_has_lan_host_ping_to_server_region();
}
::google::protobuf::uint32 CMsgJoinableCustomLobbiesResponseEntry::lan_host_ping_to_server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_to_server_region)
  return lan_host_ping_to_server_region_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_lan_host_ping_to_server_region(::google::protobuf::uint32 value) {
  set_has_lan_host_ping_to_server_region();
  lan_host_ping_to_server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.lan_host_ping_to_server_region)
}

// optional bool has_pass_key = 11;
bool CMsgJoinableCustomLobbiesResponseEntry::has_has_pass_key() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_has_pass_key() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_has_pass_key() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgJoinableCustomLobbiesResponseEntry::clear_has_pass_key() {
  has_pass_key_ = false;
  clear_has_has_pass_key();
}
bool CMsgJoinableCustomLobbiesResponseEntry::has_pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
  return has_pass_key_;
}
void CMsgJoinableCustomLobbiesResponseEntry::set_has_pass_key(bool value) {
  set_has_has_pass_key();
  has_pass_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgJoinableCustomLobbiesResponseEntry.has_pass_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgJoinableCustomLobbiesResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
}
CMsgJoinableCustomLobbiesResponse::CMsgJoinableCustomLobbiesResponse(const CMsgJoinableCustomLobbiesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
}

void CMsgJoinableCustomLobbiesResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgJoinableCustomLobbiesResponse::~CMsgJoinableCustomLobbiesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgJoinableCustomLobbiesResponse)
  SharedDtor();
}

void CMsgJoinableCustomLobbiesResponse::SharedDtor() {
}

void CMsgJoinableCustomLobbiesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgJoinableCustomLobbiesResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgJoinableCustomLobbiesResponse& CMsgJoinableCustomLobbiesResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgJoinableCustomLobbiesResponse* CMsgJoinableCustomLobbiesResponse::New(::google::protobuf::Arena* arena) const {
  CMsgJoinableCustomLobbiesResponse* n = new CMsgJoinableCustomLobbiesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgJoinableCustomLobbiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgJoinableCustomLobbiesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return false;
#undef DO_
}

void CMsgJoinableCustomLobbiesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgJoinableCustomLobbiesResponse)
}

::google::protobuf::uint8* CMsgJoinableCustomLobbiesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgJoinableCustomLobbiesResponse)
  return target;
}

size_t CMsgJoinableCustomLobbiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgJoinableCustomLobbiesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgJoinableCustomLobbiesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgJoinableCustomLobbiesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgJoinableCustomLobbiesResponse)
    MergeFrom(*source);
  }
}

void CMsgJoinableCustomLobbiesResponse::MergeFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgJoinableCustomLobbiesResponse::CopyFrom(const CMsgJoinableCustomLobbiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgJoinableCustomLobbiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgJoinableCustomLobbiesResponse::IsInitialized() const {
  return true;
}

void CMsgJoinableCustomLobbiesResponse::Swap(CMsgJoinableCustomLobbiesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgJoinableCustomLobbiesResponse::InternalSwap(CMsgJoinableCustomLobbiesResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgJoinableCustomLobbiesResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgJoinableCustomLobbiesResponse

// repeated .proto.dota.CMsgJoinableCustomLobbiesResponseEntry lobbies = 1;
int CMsgJoinableCustomLobbiesResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgJoinableCustomLobbiesResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry& CMsgJoinableCustomLobbiesResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgJoinableCustomLobbiesResponseEntry* CMsgJoinableCustomLobbiesResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry >*
CMsgJoinableCustomLobbiesResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgJoinableCustomLobbiesResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgJoinableCustomLobbiesResponseEntry >&
CMsgJoinableCustomLobbiesResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgJoinableCustomLobbiesResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kPingFieldNumber;
const int CMsgQuickJoinCustomLobby_LegacyRegionPing::kRegionCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}
CMsgQuickJoinCustomLobby_LegacyRegionPing::CMsgQuickJoinCustomLobby_LegacyRegionPing(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_region_, &from.server_region_,
    reinterpret_cast<char*>(&region_code_) -
    reinterpret_cast<char*>(&server_region_) + sizeof(region_code_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&server_region_, 0, reinterpret_cast<char*>(&region_code_) -
    reinterpret_cast<char*>(&server_region_) + sizeof(region_code_));
}

CMsgQuickJoinCustomLobby_LegacyRegionPing::~CMsgQuickJoinCustomLobby_LegacyRegionPing() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SharedDtor() {
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby_LegacyRegionPing::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby_LegacyRegionPing::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby_LegacyRegionPing::New(::google::protobuf::Arena* arena) const {
  CMsgQuickJoinCustomLobby_LegacyRegionPing* n = new CMsgQuickJoinCustomLobby_LegacyRegionPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&server_region_, 0, reinterpret_cast<char*>(&region_code_) -
      reinterpret_cast<char*>(&server_region_) + sizeof(region_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ping();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ping_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 region_code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_region_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &region_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_region(), output);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ping(), output);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->region_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_region(), target);
  }

  // optional uint32 ping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ping(), target);
  }

  // optional fixed32 region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->region_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  return target;
}

size_t CMsgQuickJoinCustomLobby_LegacyRegionPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 server_region = 1;
    if (has_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_region());
    }

    // optional uint32 ping = 2;
    if (has_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ping());
    }

    // optional fixed32 region_code = 3;
    if (has_region_code()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby_LegacyRegionPing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgQuickJoinCustomLobby_LegacyRegionPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::MergeFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      server_region_ = from.server_region_;
    }
    if (cached_has_bits & 0x00000002u) {
      ping_ = from.ping_;
    }
    if (cached_has_bits & 0x00000004u) {
      region_code_ = from.region_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::CopyFrom(const CMsgQuickJoinCustomLobby_LegacyRegionPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby_LegacyRegionPing::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby_LegacyRegionPing::Swap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::InternalSwap(CMsgQuickJoinCustomLobby_LegacyRegionPing* other) {
  std::swap(server_region_, other->server_region_);
  std::swap(ping_, other->ping_);
  std::swap(region_code_, other->region_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby_LegacyRegionPing::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgQuickJoinCustomLobby_LegacyRegionPing

// optional uint32 server_region = 1;
bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_server_region() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_server_region() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_server_region() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_server_region() {
  server_region_ = 0u;
  clear_has_server_region();
}
::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
  return server_region_;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_server_region(::google::protobuf::uint32 value) {
  set_has_server_region();
  server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.server_region)
}

// optional uint32 ping = 2;
bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_ping() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_ping() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_ping() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_ping() {
  ping_ = 0u;
  clear_has_ping();
}
::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::ping() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
  return ping_;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_ping(::google::protobuf::uint32 value) {
  set_has_ping();
  ping_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.ping)
}

// optional fixed32 region_code = 3;
bool CMsgQuickJoinCustomLobby_LegacyRegionPing::has_region_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_has_region_code() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_has_region_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::clear_region_code() {
  region_code_ = 0u;
  clear_has_region_code();
}
::google::protobuf::uint32 CMsgQuickJoinCustomLobby_LegacyRegionPing::region_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
  return region_code_;
}
void CMsgQuickJoinCustomLobby_LegacyRegionPing::set_region_code(::google::protobuf::uint32 value) {
  set_has_region_code();
  region_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing.region_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobby::kLegacyServerRegionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCustomGameIdFieldNumber;
const int CMsgQuickJoinCustomLobby::kClientVersionFieldNumber;
const int CMsgQuickJoinCustomLobby::kCreateLobbyDetailsFieldNumber;
const int CMsgQuickJoinCustomLobby::kAllowAnyMapFieldNumber;
const int CMsgQuickJoinCustomLobby::kLegacyRegionPingsFieldNumber;
const int CMsgQuickJoinCustomLobby::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobby)
}
CMsgQuickJoinCustomLobby::CMsgQuickJoinCustomLobby(const CMsgQuickJoinCustomLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      legacy_region_pings_(from.legacy_region_pings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_create_lobby_details()) {
    create_lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails(*from.create_lobby_details_);
  } else {
    create_lobby_details_ = NULL;
  }
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = NULL;
  }
  ::memcpy(&custom_game_id_, &from.custom_game_id_,
    reinterpret_cast<char*>(&allow_any_map_) -
    reinterpret_cast<char*>(&custom_game_id_) + sizeof(allow_any_map_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobby)
}

void CMsgQuickJoinCustomLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&create_lobby_details_, 0, reinterpret_cast<char*>(&allow_any_map_) -
    reinterpret_cast<char*>(&create_lobby_details_) + sizeof(allow_any_map_));
}

CMsgQuickJoinCustomLobby::~CMsgQuickJoinCustomLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobby)
  SharedDtor();
}

void CMsgQuickJoinCustomLobby::SharedDtor() {
  if (this != internal_default_instance()) {
    delete create_lobby_details_;
  }
  if (this != internal_default_instance()) {
    delete ping_data_;
  }
}

void CMsgQuickJoinCustomLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobby::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgQuickJoinCustomLobby& CMsgQuickJoinCustomLobby::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgQuickJoinCustomLobby* CMsgQuickJoinCustomLobby::New(::google::protobuf::Arena* arena) const {
  CMsgQuickJoinCustomLobby* n = new CMsgQuickJoinCustomLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgQuickJoinCustomLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobby)
  legacy_region_pings_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_create_lobby_details()) {
      GOOGLE_DCHECK(create_lobby_details_ != NULL);
      create_lobby_details_->::proto::dota::CMsgPracticeLobbySetDetails::Clear();
    }
    if (has_ping_data()) {
      GOOGLE_DCHECK(ping_data_ != NULL);
      ping_data_->::proto::dota::CMsgClientPingData::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&custom_game_id_, 0, reinterpret_cast<char*>(&allow_any_map_) -
      reinterpret_cast<char*>(&custom_game_id_) + sizeof(allow_any_map_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgQuickJoinCustomLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 legacy_server_region = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_legacy_server_region();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_server_region_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_lobby_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_any_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_allow_any_map();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_any_map_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_legacy_region_pings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobby)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->legacy_server_region(), output);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->custom_game_id(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->create_lobby_details_, output);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_any_map(), output);
  }

  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned int i = 0, n = this->legacy_region_pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->legacy_region_pings(i), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->ping_data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobby)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 legacy_server_region = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->legacy_server_region(), target);
  }

  // optional uint64 custom_game_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->custom_game_id(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->create_lobby_details_, deterministic, target);
  }

  // optional bool allow_any_map = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_any_map(), target);
  }

  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  for (unsigned int i = 0, n = this->legacy_region_pings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->legacy_region_pings(i), deterministic, target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->ping_data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobby)
  return target;
}

size_t CMsgQuickJoinCustomLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
  {
    unsigned int count = this->legacy_region_pings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->legacy_region_pings(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
    if (has_create_lobby_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->create_lobby_details_);
    }

    // optional .proto.dota.CMsgClientPingData ping_data = 7;
    if (has_ping_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ping_data_);
    }

    // optional uint64 custom_game_id = 2;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

    // optional uint32 legacy_server_region = 1;
    if (has_legacy_server_region()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_server_region());
    }

    // optional uint32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional bool allow_any_map = 5;
    if (has_allow_any_map()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgQuickJoinCustomLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobby)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobby::MergeFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_region_pings_.MergeFrom(from.legacy_region_pings_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_create_lobby_details()->::proto::dota::CMsgPracticeLobbySetDetails::MergeFrom(from.create_lobby_details());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000004u) {
      custom_game_id_ = from.custom_game_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_server_region_ = from.legacy_server_region_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      allow_any_map_ = from.allow_any_map_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgQuickJoinCustomLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobby::CopyFrom(const CMsgQuickJoinCustomLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobby::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobby::Swap(CMsgQuickJoinCustomLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobby::InternalSwap(CMsgQuickJoinCustomLobby* other) {
  legacy_region_pings_.InternalSwap(&other->legacy_region_pings_);
  std::swap(create_lobby_details_, other->create_lobby_details_);
  std::swap(ping_data_, other->ping_data_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(legacy_server_region_, other->legacy_server_region_);
  std::swap(client_version_, other->client_version_);
  std::swap(allow_any_map_, other->allow_any_map_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobby::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgQuickJoinCustomLobby

// optional uint32 legacy_server_region = 1;
bool CMsgQuickJoinCustomLobby::has_legacy_server_region() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_legacy_server_region() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgQuickJoinCustomLobby::clear_has_legacy_server_region() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgQuickJoinCustomLobby::clear_legacy_server_region() {
  legacy_server_region_ = 0u;
  clear_has_legacy_server_region();
}
::google::protobuf::uint32 CMsgQuickJoinCustomLobby::legacy_server_region() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.legacy_server_region)
  return legacy_server_region_;
}
void CMsgQuickJoinCustomLobby::set_legacy_server_region(::google::protobuf::uint32 value) {
  set_has_legacy_server_region();
  legacy_server_region_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.legacy_server_region)
}

// optional uint64 custom_game_id = 2;
bool CMsgQuickJoinCustomLobby::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgQuickJoinCustomLobby::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgQuickJoinCustomLobby::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgQuickJoinCustomLobby::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.custom_game_id)
  return custom_game_id_;
}
void CMsgQuickJoinCustomLobby::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.custom_game_id)
}

// optional uint32 client_version = 3;
bool CMsgQuickJoinCustomLobby::has_client_version() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_client_version() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgQuickJoinCustomLobby::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgQuickJoinCustomLobby::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgQuickJoinCustomLobby::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.client_version)
  return client_version_;
}
void CMsgQuickJoinCustomLobby::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.client_version)
}

// optional .proto.dota.CMsgPracticeLobbySetDetails create_lobby_details = 4;
bool CMsgQuickJoinCustomLobby::has_create_lobby_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_create_lobby_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgQuickJoinCustomLobby::clear_has_create_lobby_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgQuickJoinCustomLobby::clear_create_lobby_details() {
  if (create_lobby_details_ != NULL) create_lobby_details_->::proto::dota::CMsgPracticeLobbySetDetails::Clear();
  clear_has_create_lobby_details();
}
const ::proto::dota::CMsgPracticeLobbySetDetails& CMsgQuickJoinCustomLobby::create_lobby_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.create_lobby_details)
  return create_lobby_details_ != NULL ? *create_lobby_details_
                         : *::proto::dota::CMsgPracticeLobbySetDetails::internal_default_instance();
}
::proto::dota::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::mutable_create_lobby_details() {
  set_has_create_lobby_details();
  if (create_lobby_details_ == NULL) {
    create_lobby_details_ = new ::proto::dota::CMsgPracticeLobbySetDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgQuickJoinCustomLobby.create_lobby_details)
  return create_lobby_details_;
}
::proto::dota::CMsgPracticeLobbySetDetails* CMsgQuickJoinCustomLobby::release_create_lobby_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgQuickJoinCustomLobby.create_lobby_details)
  clear_has_create_lobby_details();
  ::proto::dota::CMsgPracticeLobbySetDetails* temp = create_lobby_details_;
  create_lobby_details_ = NULL;
  return temp;
}
void CMsgQuickJoinCustomLobby::set_allocated_create_lobby_details(::proto::dota::CMsgPracticeLobbySetDetails* create_lobby_details) {
  delete create_lobby_details_;
  create_lobby_details_ = create_lobby_details;
  if (create_lobby_details) {
    set_has_create_lobby_details();
  } else {
    clear_has_create_lobby_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgQuickJoinCustomLobby.create_lobby_details)
}

// optional bool allow_any_map = 5;
bool CMsgQuickJoinCustomLobby::has_allow_any_map() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_allow_any_map() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgQuickJoinCustomLobby::clear_has_allow_any_map() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgQuickJoinCustomLobby::clear_allow_any_map() {
  allow_any_map_ = false;
  clear_has_allow_any_map();
}
bool CMsgQuickJoinCustomLobby::allow_any_map() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.allow_any_map)
  return allow_any_map_;
}
void CMsgQuickJoinCustomLobby::set_allow_any_map(bool value) {
  set_has_allow_any_map();
  allow_any_map_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobby.allow_any_map)
}

// repeated .proto.dota.CMsgQuickJoinCustomLobby.LegacyRegionPing legacy_region_pings = 6;
int CMsgQuickJoinCustomLobby::legacy_region_pings_size() const {
  return legacy_region_pings_.size();
}
void CMsgQuickJoinCustomLobby::clear_legacy_region_pings() {
  legacy_region_pings_.Clear();
}
const ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing& CMsgQuickJoinCustomLobby::legacy_region_pings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Get(index);
}
::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::mutable_legacy_region_pings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Mutable(index);
}
::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing* CMsgQuickJoinCustomLobby::add_legacy_region_pings() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing >*
CMsgQuickJoinCustomLobby::mutable_legacy_region_pings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgQuickJoinCustomLobby.legacy_region_pings)
  return &legacy_region_pings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgQuickJoinCustomLobby_LegacyRegionPing >&
CMsgQuickJoinCustomLobby::legacy_region_pings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgQuickJoinCustomLobby.legacy_region_pings)
  return legacy_region_pings_;
}

// optional .proto.dota.CMsgClientPingData ping_data = 7;
bool CMsgQuickJoinCustomLobby::has_ping_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgQuickJoinCustomLobby::set_has_ping_data() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgQuickJoinCustomLobby::clear_has_ping_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgQuickJoinCustomLobby::clear_ping_data() {
  if (ping_data_ != NULL) ping_data_->::proto::dota::CMsgClientPingData::Clear();
  clear_has_ping_data();
}
const ::proto::dota::CMsgClientPingData& CMsgQuickJoinCustomLobby::ping_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobby.ping_data)
  return ping_data_ != NULL ? *ping_data_
                         : *::proto::dota::CMsgClientPingData::internal_default_instance();
}
::proto::dota::CMsgClientPingData* CMsgQuickJoinCustomLobby::mutable_ping_data() {
  set_has_ping_data();
  if (ping_data_ == NULL) {
    ping_data_ = new ::proto::dota::CMsgClientPingData;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgQuickJoinCustomLobby.ping_data)
  return ping_data_;
}
::proto::dota::CMsgClientPingData* CMsgQuickJoinCustomLobby::release_ping_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgQuickJoinCustomLobby.ping_data)
  clear_has_ping_data();
  ::proto::dota::CMsgClientPingData* temp = ping_data_;
  ping_data_ = NULL;
  return temp;
}
void CMsgQuickJoinCustomLobby::set_allocated_ping_data(::proto::dota::CMsgClientPingData* ping_data) {
  delete ping_data_;
  ping_data_ = ping_data;
  if (ping_data) {
    set_has_ping_data();
  } else {
    clear_has_ping_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgQuickJoinCustomLobby.ping_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgQuickJoinCustomLobbyResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}
CMsgQuickJoinCustomLobbyResponse::CMsgQuickJoinCustomLobbyResponse(const CMsgQuickJoinCustomLobbyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}

void CMsgQuickJoinCustomLobbyResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgQuickJoinCustomLobbyResponse::~CMsgQuickJoinCustomLobbyResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  SharedDtor();
}

void CMsgQuickJoinCustomLobbyResponse::SharedDtor() {
}

void CMsgQuickJoinCustomLobbyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgQuickJoinCustomLobbyResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgQuickJoinCustomLobbyResponse& CMsgQuickJoinCustomLobbyResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgQuickJoinCustomLobbyResponse* CMsgQuickJoinCustomLobbyResponse::New(::google::protobuf::Arena* arena) const {
  CMsgQuickJoinCustomLobbyResponse* n = new CMsgQuickJoinCustomLobbyResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgQuickJoinCustomLobbyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgQuickJoinCustomLobbyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAJoinLobbyResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::DOTAJoinLobbyResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return false;
#undef DO_
}

void CMsgQuickJoinCustomLobbyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgQuickJoinCustomLobbyResponse)
}

::google::protobuf::uint8* CMsgQuickJoinCustomLobbyResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  return target;
}

size_t CMsgQuickJoinCustomLobbyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgQuickJoinCustomLobbyResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgQuickJoinCustomLobbyResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgQuickJoinCustomLobbyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgQuickJoinCustomLobbyResponse)
    MergeFrom(*source);
  }
}

void CMsgQuickJoinCustomLobbyResponse::MergeFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgQuickJoinCustomLobbyResponse::CopyFrom(const CMsgQuickJoinCustomLobbyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgQuickJoinCustomLobbyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgQuickJoinCustomLobbyResponse::IsInitialized() const {
  return true;
}

void CMsgQuickJoinCustomLobbyResponse::Swap(CMsgQuickJoinCustomLobbyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgQuickJoinCustomLobbyResponse::InternalSwap(CMsgQuickJoinCustomLobbyResponse* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgQuickJoinCustomLobbyResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgQuickJoinCustomLobbyResponse

// optional .proto.dota.DOTAJoinLobbyResult result = 1 [default = DOTA_JOIN_RESULT_SUCCESS];
bool CMsgQuickJoinCustomLobbyResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgQuickJoinCustomLobbyResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgQuickJoinCustomLobbyResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgQuickJoinCustomLobbyResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::DOTAJoinLobbyResult CMsgQuickJoinCustomLobbyResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgQuickJoinCustomLobbyResponse.result)
  return static_cast< ::proto::dota::DOTAJoinLobbyResult >(result_);
}
void CMsgQuickJoinCustomLobbyResponse::set_result(::proto::dota::DOTAJoinLobbyResult value) {
  assert(::proto::dota::DOTAJoinLobbyResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgQuickJoinCustomLobbyResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgBotGameCreate::kSearchKeyFieldNumber;
const int CMsgBotGameCreate::kClientVersionFieldNumber;
const int CMsgBotGameCreate::kDifficultyRadiantFieldNumber;
const int CMsgBotGameCreate::kTeamFieldNumber;
const int CMsgBotGameCreate::kGameModeFieldNumber;
const int CMsgBotGameCreate::kDifficultyDireFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgBotGameCreate::CMsgBotGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgBotGameCreate)
}
CMsgBotGameCreate::CMsgBotGameCreate(const CMsgBotGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    reinterpret_cast<char*>(&difficulty_dire_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(difficulty_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgBotGameCreate)
}

void CMsgBotGameCreate::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, reinterpret_cast<char*>(&difficulty_dire_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(difficulty_dire_));
}

CMsgBotGameCreate::~CMsgBotGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgBotGameCreate)
  SharedDtor();
}

void CMsgBotGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgBotGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgBotGameCreate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgBotGameCreate& CMsgBotGameCreate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgBotGameCreate* CMsgBotGameCreate::New(::google::protobuf::Arena* arena) const {
  CMsgBotGameCreate* n = new CMsgBotGameCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgBotGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgBotGameCreate)
  if (has_search_key()) {
    GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*search_key_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&client_version_, 0, reinterpret_cast<char*>(&difficulty_dire_) -
      reinterpret_cast<char*>(&client_version_) + sizeof(difficulty_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgBotGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgBotGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgBotGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_radiant(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTA_GC_TEAM_IsValid(value)) {
            set_team(static_cast< ::proto::dota::DOTA_GC_TEAM >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_game_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTABotDifficulty_IsValid(value)) {
            set_difficulty_dire(static_cast< ::proto::dota::DOTABotDifficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgBotGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgBotGameCreate)
  return false;
#undef DO_
}

void CMsgBotGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgBotGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty_radiant(), output);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->team(), output);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_mode(), output);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->difficulty_dire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgBotGameCreate)
}

::google::protobuf::uint8* CMsgBotGameCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgBotGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgBotGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty_radiant(), target);
  }

  // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->team(), target);
  }

  // optional uint32 game_mode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_mode(), target);
  }

  // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->difficulty_dire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgBotGameCreate)
  return target;
}

size_t CMsgBotGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgBotGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_difficulty_radiant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_radiant());
    }

    // optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->team());
    }

    // optional uint32 game_mode = 5;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
    if (has_difficulty_dire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgBotGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgBotGameCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgBotGameCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgBotGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgBotGameCreate)
    MergeFrom(*source);
  }
}

void CMsgBotGameCreate::MergeFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgBotGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      difficulty_radiant_ = from.difficulty_radiant_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_ = from.team_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      difficulty_dire_ = from.difficulty_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgBotGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgBotGameCreate::CopyFrom(const CMsgBotGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgBotGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgBotGameCreate::IsInitialized() const {
  return true;
}

void CMsgBotGameCreate::Swap(CMsgBotGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgBotGameCreate::InternalSwap(CMsgBotGameCreate* other) {
  search_key_.Swap(&other->search_key_);
  std::swap(client_version_, other->client_version_);
  std::swap(difficulty_radiant_, other->difficulty_radiant_);
  std::swap(team_, other->team_);
  std::swap(game_mode_, other->game_mode_);
  std::swap(difficulty_dire_, other->difficulty_dire_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgBotGameCreate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgBotGameCreate

// optional string search_key = 1;
bool CMsgBotGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgBotGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgBotGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgBotGameCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgBotGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.search_key)
  return search_key_.GetNoArena();
}
void CMsgBotGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.search_key)
}
#if LANG_CXX11
void CMsgBotGameCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgBotGameCreate.search_key)
}
#endif
void CMsgBotGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgBotGameCreate.search_key)
}
void CMsgBotGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgBotGameCreate.search_key)
}
::std::string* CMsgBotGameCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgBotGameCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgBotGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgBotGameCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgBotGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgBotGameCreate.search_key)
}

// optional uint32 client_version = 2;
bool CMsgBotGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgBotGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgBotGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgBotGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgBotGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.client_version)
  return client_version_;
}
void CMsgBotGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.client_version)
}

// optional .proto.dota.DOTABotDifficulty difficulty_radiant = 3 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgBotGameCreate::has_difficulty_radiant() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgBotGameCreate::set_has_difficulty_radiant() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgBotGameCreate::clear_has_difficulty_radiant() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgBotGameCreate::clear_difficulty_radiant() {
  difficulty_radiant_ = 0;
  clear_has_difficulty_radiant();
}
::proto::dota::DOTABotDifficulty CMsgBotGameCreate::difficulty_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.difficulty_radiant)
  return static_cast< ::proto::dota::DOTABotDifficulty >(difficulty_radiant_);
}
void CMsgBotGameCreate::set_difficulty_radiant(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_difficulty_radiant();
  difficulty_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.difficulty_radiant)
}

// optional .proto.dota.DOTA_GC_TEAM team = 4 [default = DOTA_GC_TEAM_GOOD_GUYS];
bool CMsgBotGameCreate::has_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgBotGameCreate::set_has_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgBotGameCreate::clear_has_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgBotGameCreate::clear_team() {
  team_ = 0;
  clear_has_team();
}
::proto::dota::DOTA_GC_TEAM CMsgBotGameCreate::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
void CMsgBotGameCreate::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.team)
}

// optional uint32 game_mode = 5;
bool CMsgBotGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgBotGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgBotGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgBotGameCreate::clear_game_mode() {
  game_mode_ = 0u;
  clear_has_game_mode();
}
::google::protobuf::uint32 CMsgBotGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.game_mode)
  return game_mode_;
}
void CMsgBotGameCreate::set_game_mode(::google::protobuf::uint32 value) {
  set_has_game_mode();
  game_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.game_mode)
}

// optional .proto.dota.DOTABotDifficulty difficulty_dire = 6 [default = BOT_DIFFICULTY_PASSIVE];
bool CMsgBotGameCreate::has_difficulty_dire() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgBotGameCreate::set_has_difficulty_dire() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgBotGameCreate::clear_has_difficulty_dire() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgBotGameCreate::clear_difficulty_dire() {
  difficulty_dire_ = 0;
  clear_has_difficulty_dire();
}
::proto::dota::DOTABotDifficulty CMsgBotGameCreate::difficulty_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgBotGameCreate.difficulty_dire)
  return static_cast< ::proto::dota::DOTABotDifficulty >(difficulty_dire_);
}
void CMsgBotGameCreate::set_difficulty_dire(::proto::dota::DOTABotDifficulty value) {
  assert(::proto::dota::DOTABotDifficulty_IsValid(value));
  set_has_difficulty_dire();
  difficulty_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgBotGameCreate.difficulty_dire)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCustomGameCreate::kSearchKeyFieldNumber;
const int CMsgCustomGameCreate::kClientVersionFieldNumber;
const int CMsgCustomGameCreate::kDifficultyFieldNumber;
const int CMsgCustomGameCreate::kGameModeFieldNumber;
const int CMsgCustomGameCreate::kMapFieldNumber;
const int CMsgCustomGameCreate::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCustomGameCreate::CMsgCustomGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCustomGameCreate)
}
CMsgCustomGameCreate::CMsgCustomGameCreate(const CMsgCustomGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mode()) {
    game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCustomGameCreate)
}

void CMsgCustomGameCreate::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
}

CMsgCustomGameCreate::~CMsgCustomGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCustomGameCreate)
  SharedDtor();
}

void CMsgCustomGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCustomGameCreate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCustomGameCreate& CMsgCustomGameCreate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCustomGameCreate* CMsgCustomGameCreate::New(::google::protobuf::Arena* arena) const {
  CMsgCustomGameCreate* n = new CMsgCustomGameCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCustomGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCustomGameCreate)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_search_key()) {
      GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_mode()) {
      GOOGLE_DCHECK(!game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_map()) {
      GOOGLE_DCHECK(!map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&client_version_, 0, reinterpret_cast<char*>(&custom_game_id_) -
      reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCustomGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCustomGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), this->game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameCreate.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCustomGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCustomGameCreate)
  return false;
#undef DO_
}

void CMsgCustomGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCustomGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCustomGameCreate)
}

::google::protobuf::uint8* CMsgCustomGameCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCustomGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameCreate.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCustomGameCreate)
  return target;
}

size_t CMsgCustomGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCustomGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string game_mode = 4;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCustomGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCustomGameCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCustomGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCustomGameCreate)
    MergeFrom(*source);
  }
}

void CMsgCustomGameCreate::MergeFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCustomGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_mode();
      game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameCreate::CopyFrom(const CMsgCustomGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCustomGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameCreate::IsInitialized() const {
  return true;
}

void CMsgCustomGameCreate::Swap(CMsgCustomGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCustomGameCreate::InternalSwap(CMsgCustomGameCreate* other) {
  search_key_.Swap(&other->search_key_);
  game_mode_.Swap(&other->game_mode_);
  map_.Swap(&other->map_);
  std::swap(client_version_, other->client_version_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCustomGameCreate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCustomGameCreate

// optional string search_key = 1;
bool CMsgCustomGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCustomGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCustomGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCustomGameCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgCustomGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.search_key)
  return search_key_.GetNoArena();
}
void CMsgCustomGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.search_key)
}
#if LANG_CXX11
void CMsgCustomGameCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgCustomGameCreate.search_key)
}
#endif
void CMsgCustomGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgCustomGameCreate.search_key)
}
void CMsgCustomGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgCustomGameCreate.search_key)
}
::std::string* CMsgCustomGameCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCustomGameCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgCustomGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgCustomGameCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgCustomGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgCustomGameCreate.search_key)
}

// optional uint32 client_version = 2;
bool CMsgCustomGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgCustomGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgCustomGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgCustomGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgCustomGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.client_version)
  return client_version_;
}
void CMsgCustomGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.client_version)
}

// optional uint32 difficulty = 3;
bool CMsgCustomGameCreate::has_difficulty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgCustomGameCreate::set_has_difficulty() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgCustomGameCreate::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgCustomGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
::google::protobuf::uint32 CMsgCustomGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.difficulty)
  return difficulty_;
}
void CMsgCustomGameCreate::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.difficulty)
}

// optional string game_mode = 4;
bool CMsgCustomGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgCustomGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgCustomGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgCustomGameCreate::clear_game_mode() {
  game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_mode();
}
const ::std::string& CMsgCustomGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.game_mode)
  return game_mode_.GetNoArena();
}
void CMsgCustomGameCreate::set_game_mode(const ::std::string& value) {
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.game_mode)
}
#if LANG_CXX11
void CMsgCustomGameCreate::set_game_mode(::std::string&& value) {
  set_has_game_mode();
  game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgCustomGameCreate.game_mode)
}
#endif
void CMsgCustomGameCreate::set_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgCustomGameCreate.game_mode)
}
void CMsgCustomGameCreate::set_game_mode(const char* value, size_t size) {
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgCustomGameCreate.game_mode)
}
::std::string* CMsgCustomGameCreate::mutable_game_mode() {
  set_has_game_mode();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCustomGameCreate.game_mode)
  return game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgCustomGameCreate::release_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgCustomGameCreate.game_mode)
  clear_has_game_mode();
  return game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgCustomGameCreate::set_allocated_game_mode(::std::string* game_mode) {
  if (game_mode != NULL) {
    set_has_game_mode();
  } else {
    clear_has_game_mode();
  }
  game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgCustomGameCreate.game_mode)
}

// optional string map = 5;
bool CMsgCustomGameCreate::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgCustomGameCreate::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgCustomGameCreate::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgCustomGameCreate::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map();
}
const ::std::string& CMsgCustomGameCreate::map() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.map)
  return map_.GetNoArena();
}
void CMsgCustomGameCreate::set_map(const ::std::string& value) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.map)
}
#if LANG_CXX11
void CMsgCustomGameCreate::set_map(::std::string&& value) {
  set_has_map();
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgCustomGameCreate.map)
}
#endif
void CMsgCustomGameCreate::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgCustomGameCreate.map)
}
void CMsgCustomGameCreate::set_map(const char* value, size_t size) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgCustomGameCreate.map)
}
::std::string* CMsgCustomGameCreate::mutable_map() {
  set_has_map();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCustomGameCreate.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgCustomGameCreate::release_map() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgCustomGameCreate.map)
  clear_has_map();
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgCustomGameCreate::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    set_has_map();
  } else {
    clear_has_map();
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgCustomGameCreate.map)
}

// optional uint64 custom_game_id = 7;
bool CMsgCustomGameCreate::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgCustomGameCreate::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgCustomGameCreate::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgCustomGameCreate::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgCustomGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCustomGameCreate.custom_game_id)
  return custom_game_id_;
}
void CMsgCustomGameCreate::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCustomGameCreate.custom_game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgEventGameCreate::kSearchKeyFieldNumber;
const int CMsgEventGameCreate::kClientVersionFieldNumber;
const int CMsgEventGameCreate::kDifficultyFieldNumber;
const int CMsgEventGameCreate::kGameModeFieldNumber;
const int CMsgEventGameCreate::kMapFieldNumber;
const int CMsgEventGameCreate::kCustomGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgEventGameCreate::CMsgEventGameCreate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgEventGameCreate)
}
CMsgEventGameCreate::CMsgEventGameCreate(const CMsgEventGameCreate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_mode()) {
    game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
  }
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map()) {
    map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgEventGameCreate)
}

void CMsgEventGameCreate::SharedCtor() {
  _cached_size_ = 0;
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, reinterpret_cast<char*>(&custom_game_id_) -
    reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
}

CMsgEventGameCreate::~CMsgEventGameCreate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgEventGameCreate)
  SharedDtor();
}

void CMsgEventGameCreate::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgEventGameCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgEventGameCreate::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgEventGameCreate& CMsgEventGameCreate::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgEventGameCreate* CMsgEventGameCreate::New(::google::protobuf::Arena* arena) const {
  CMsgEventGameCreate* n = new CMsgEventGameCreate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgEventGameCreate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgEventGameCreate)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_search_key()) {
      GOOGLE_DCHECK(!search_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*search_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_mode()) {
      GOOGLE_DCHECK(!game_mode_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_mode_.UnsafeRawStringPointer())->clear();
    }
    if (has_map()) {
      GOOGLE_DCHECK(!map_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 56u) {
    ::memset(&client_version_, 0, reinterpret_cast<char*>(&custom_game_id_) -
      reinterpret_cast<char*>(&client_version_) + sizeof(custom_game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgEventGameCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgEventGameCreate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), this->search_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 difficulty = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_difficulty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_mode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_mode().data(), this->game_mode().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.game_mode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map().data(), this->map().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgEventGameCreate.map");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 custom_game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_custom_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgEventGameCreate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgEventGameCreate)
  return false;
#undef DO_
}

void CMsgEventGameCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgEventGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->difficulty(), output);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.game_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->game_mode(), output);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.map");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->map(), output);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->custom_game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgEventGameCreate)
}

::google::protobuf::uint8* CMsgEventGameCreate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgEventGameCreate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), this->search_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 difficulty = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->difficulty(), target);
  }

  // optional string game_mode = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_mode().data(), this->game_mode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.game_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->game_mode(), target);
  }

  // optional string map = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map().data(), this->map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgEventGameCreate.map");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map(), target);
  }

  // optional uint64 custom_game_id = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->custom_game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgEventGameCreate)
  return target;
}

size_t CMsgEventGameCreate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgEventGameCreate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string search_key = 1;
    if (has_search_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional string game_mode = 4;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_mode());
    }

    // optional string map = 5;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map());
    }

    // optional uint32 client_version = 2;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->difficulty());
    }

    // optional uint64 custom_game_id = 7;
    if (has_custom_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->custom_game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgEventGameCreate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgEventGameCreate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgEventGameCreate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgEventGameCreate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgEventGameCreate)
    MergeFrom(*source);
  }
}

void CMsgEventGameCreate::MergeFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgEventGameCreate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_search_key();
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_game_mode();
      game_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_mode_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_map();
      map_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_);
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      difficulty_ = from.difficulty_;
    }
    if (cached_has_bits & 0x00000020u) {
      custom_game_id_ = from.custom_game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgEventGameCreate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgEventGameCreate::CopyFrom(const CMsgEventGameCreate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgEventGameCreate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgEventGameCreate::IsInitialized() const {
  return true;
}

void CMsgEventGameCreate::Swap(CMsgEventGameCreate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgEventGameCreate::InternalSwap(CMsgEventGameCreate* other) {
  search_key_.Swap(&other->search_key_);
  game_mode_.Swap(&other->game_mode_);
  map_.Swap(&other->map_);
  std::swap(client_version_, other->client_version_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(custom_game_id_, other->custom_game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgEventGameCreate::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgEventGameCreate

// optional string search_key = 1;
bool CMsgEventGameCreate::has_search_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgEventGameCreate::set_has_search_key() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgEventGameCreate::clear_has_search_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgEventGameCreate::clear_search_key() {
  search_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_search_key();
}
const ::std::string& CMsgEventGameCreate::search_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.search_key)
  return search_key_.GetNoArena();
}
void CMsgEventGameCreate::set_search_key(const ::std::string& value) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.search_key)
}
#if LANG_CXX11
void CMsgEventGameCreate::set_search_key(::std::string&& value) {
  set_has_search_key();
  search_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgEventGameCreate.search_key)
}
#endif
void CMsgEventGameCreate::set_search_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgEventGameCreate.search_key)
}
void CMsgEventGameCreate::set_search_key(const char* value, size_t size) {
  set_has_search_key();
  search_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgEventGameCreate.search_key)
}
::std::string* CMsgEventGameCreate::mutable_search_key() {
  set_has_search_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEventGameCreate.search_key)
  return search_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgEventGameCreate::release_search_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEventGameCreate.search_key)
  clear_has_search_key();
  return search_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgEventGameCreate::set_allocated_search_key(::std::string* search_key) {
  if (search_key != NULL) {
    set_has_search_key();
  } else {
    clear_has_search_key();
  }
  search_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), search_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEventGameCreate.search_key)
}

// optional uint32 client_version = 2;
bool CMsgEventGameCreate::has_client_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgEventGameCreate::set_has_client_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgEventGameCreate::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgEventGameCreate::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgEventGameCreate::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.client_version)
  return client_version_;
}
void CMsgEventGameCreate::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.client_version)
}

// optional uint32 difficulty = 3;
bool CMsgEventGameCreate::has_difficulty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgEventGameCreate::set_has_difficulty() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgEventGameCreate::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgEventGameCreate::clear_difficulty() {
  difficulty_ = 0u;
  clear_has_difficulty();
}
::google::protobuf::uint32 CMsgEventGameCreate::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.difficulty)
  return difficulty_;
}
void CMsgEventGameCreate::set_difficulty(::google::protobuf::uint32 value) {
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.difficulty)
}

// optional string game_mode = 4;
bool CMsgEventGameCreate::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgEventGameCreate::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgEventGameCreate::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgEventGameCreate::clear_game_mode() {
  game_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_mode();
}
const ::std::string& CMsgEventGameCreate::game_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.game_mode)
  return game_mode_.GetNoArena();
}
void CMsgEventGameCreate::set_game_mode(const ::std::string& value) {
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.game_mode)
}
#if LANG_CXX11
void CMsgEventGameCreate::set_game_mode(::std::string&& value) {
  set_has_game_mode();
  game_mode_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgEventGameCreate.game_mode)
}
#endif
void CMsgEventGameCreate::set_game_mode(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgEventGameCreate.game_mode)
}
void CMsgEventGameCreate::set_game_mode(const char* value, size_t size) {
  set_has_game_mode();
  game_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgEventGameCreate.game_mode)
}
::std::string* CMsgEventGameCreate::mutable_game_mode() {
  set_has_game_mode();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEventGameCreate.game_mode)
  return game_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgEventGameCreate::release_game_mode() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEventGameCreate.game_mode)
  clear_has_game_mode();
  return game_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgEventGameCreate::set_allocated_game_mode(::std::string* game_mode) {
  if (game_mode != NULL) {
    set_has_game_mode();
  } else {
    clear_has_game_mode();
  }
  game_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_mode);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEventGameCreate.game_mode)
}

// optional string map = 5;
bool CMsgEventGameCreate::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgEventGameCreate::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgEventGameCreate::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgEventGameCreate::clear_map() {
  map_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map();
}
const ::std::string& CMsgEventGameCreate::map() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.map)
  return map_.GetNoArena();
}
void CMsgEventGameCreate::set_map(const ::std::string& value) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.map)
}
#if LANG_CXX11
void CMsgEventGameCreate::set_map(::std::string&& value) {
  set_has_map();
  map_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgEventGameCreate.map)
}
#endif
void CMsgEventGameCreate::set_map(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgEventGameCreate.map)
}
void CMsgEventGameCreate::set_map(const char* value, size_t size) {
  set_has_map();
  map_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgEventGameCreate.map)
}
::std::string* CMsgEventGameCreate::mutable_map() {
  set_has_map();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgEventGameCreate.map)
  return map_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgEventGameCreate::release_map() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgEventGameCreate.map)
  clear_has_map();
  return map_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgEventGameCreate::set_allocated_map(::std::string* map) {
  if (map != NULL) {
    set_has_map();
  } else {
    clear_has_map();
  }
  map_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgEventGameCreate.map)
}

// optional uint64 custom_game_id = 7;
bool CMsgEventGameCreate::has_custom_game_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgEventGameCreate::set_has_custom_game_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgEventGameCreate::clear_has_custom_game_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgEventGameCreate::clear_custom_game_id() {
  custom_game_id_ = GOOGLE_ULONGLONG(0);
  clear_has_custom_game_id();
}
::google::protobuf::uint64 CMsgEventGameCreate::custom_game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgEventGameCreate.custom_game_id)
  return custom_game_id_;
}
void CMsgEventGameCreate::set_custom_game_id(::google::protobuf::uint64 value) {
  set_has_custom_game_id();
  custom_game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgEventGameCreate.custom_game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAPartyMemberSetCoach::kWantsCoachFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
}
CMsgDOTAPartyMemberSetCoach::CMsgDOTAPartyMemberSetCoach(const CMsgDOTAPartyMemberSetCoach& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  wants_coach_ = from.wants_coach_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
}

void CMsgDOTAPartyMemberSetCoach::SharedCtor() {
  _cached_size_ = 0;
  wants_coach_ = false;
}

CMsgDOTAPartyMemberSetCoach::~CMsgDOTAPartyMemberSetCoach() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAPartyMemberSetCoach)
  SharedDtor();
}

void CMsgDOTAPartyMemberSetCoach::SharedDtor() {
}

void CMsgDOTAPartyMemberSetCoach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAPartyMemberSetCoach::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAPartyMemberSetCoach& CMsgDOTAPartyMemberSetCoach::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAPartyMemberSetCoach* CMsgDOTAPartyMemberSetCoach::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAPartyMemberSetCoach* n = new CMsgDOTAPartyMemberSetCoach;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAPartyMemberSetCoach::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  wants_coach_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAPartyMemberSetCoach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool wants_coach = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_wants_coach();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wants_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return false;
#undef DO_
}

void CMsgDOTAPartyMemberSetCoach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->wants_coach(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAPartyMemberSetCoach)
}

::google::protobuf::uint8* CMsgDOTAPartyMemberSetCoach::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool wants_coach = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->wants_coach(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAPartyMemberSetCoach)
  return target;
}

size_t CMsgDOTAPartyMemberSetCoach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool wants_coach = 1;
  if (has_wants_coach()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAPartyMemberSetCoach* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAPartyMemberSetCoach>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAPartyMemberSetCoach)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAPartyMemberSetCoach)
    MergeFrom(*source);
  }
}

void CMsgDOTAPartyMemberSetCoach::MergeFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_wants_coach()) {
    set_wants_coach(from.wants_coach());
  }
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAPartyMemberSetCoach::CopyFrom(const CMsgDOTAPartyMemberSetCoach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAPartyMemberSetCoach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAPartyMemberSetCoach::IsInitialized() const {
  return true;
}

void CMsgDOTAPartyMemberSetCoach::Swap(CMsgDOTAPartyMemberSetCoach* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAPartyMemberSetCoach::InternalSwap(CMsgDOTAPartyMemberSetCoach* other) {
  std::swap(wants_coach_, other->wants_coach_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAPartyMemberSetCoach::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAPartyMemberSetCoach

// optional bool wants_coach = 1;
bool CMsgDOTAPartyMemberSetCoach::has_wants_coach() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAPartyMemberSetCoach::set_has_wants_coach() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAPartyMemberSetCoach::clear_has_wants_coach() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAPartyMemberSetCoach::clear_wants_coach() {
  wants_coach_ = false;
  clear_has_wants_coach();
}
bool CMsgDOTAPartyMemberSetCoach::wants_coach() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAPartyMemberSetCoach.wants_coach)
  return wants_coach_;
}
void CMsgDOTAPartyMemberSetCoach::set_wants_coach(bool value) {
  set_has_wants_coach();
  wants_coach_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAPartyMemberSetCoach.wants_coach)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASetGroupLeader::kNewLeaderSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASetGroupLeader)
}
CMsgDOTASetGroupLeader::CMsgDOTASetGroupLeader(const CMsgDOTASetGroupLeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  new_leader_steamid_ = from.new_leader_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASetGroupLeader)
}

void CMsgDOTASetGroupLeader::SharedCtor() {
  _cached_size_ = 0;
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTASetGroupLeader::~CMsgDOTASetGroupLeader() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASetGroupLeader)
  SharedDtor();
}

void CMsgDOTASetGroupLeader::SharedDtor() {
}

void CMsgDOTASetGroupLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASetGroupLeader::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASetGroupLeader& CMsgDOTASetGroupLeader::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASetGroupLeader* CMsgDOTASetGroupLeader::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASetGroupLeader* n = new CMsgDOTASetGroupLeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASetGroupLeader::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASetGroupLeader)
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASetGroupLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASetGroupLeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 new_leader_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_new_leader_steamid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &new_leader_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASetGroupLeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASetGroupLeader)
  return false;
#undef DO_
}

void CMsgDOTASetGroupLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASetGroupLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->new_leader_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASetGroupLeader)
}

::google::protobuf::uint8* CMsgDOTASetGroupLeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASetGroupLeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 new_leader_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->new_leader_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASetGroupLeader)
  return target;
}

size_t CMsgDOTASetGroupLeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASetGroupLeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 new_leader_steamid = 1;
  if (has_new_leader_steamid()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASetGroupLeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupLeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASetGroupLeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASetGroupLeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASetGroupLeader)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupLeader::MergeFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASetGroupLeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_new_leader_steamid()) {
    set_new_leader_steamid(from.new_leader_steamid());
  }
}

void CMsgDOTASetGroupLeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupLeader::CopyFrom(const CMsgDOTASetGroupLeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASetGroupLeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupLeader::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupLeader::Swap(CMsgDOTASetGroupLeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASetGroupLeader::InternalSwap(CMsgDOTASetGroupLeader* other) {
  std::swap(new_leader_steamid_, other->new_leader_steamid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASetGroupLeader::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASetGroupLeader

// optional fixed64 new_leader_steamid = 1;
bool CMsgDOTASetGroupLeader::has_new_leader_steamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASetGroupLeader::set_has_new_leader_steamid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASetGroupLeader::clear_has_new_leader_steamid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASetGroupLeader::clear_new_leader_steamid() {
  new_leader_steamid_ = GOOGLE_ULONGLONG(0);
  clear_has_new_leader_steamid();
}
::google::protobuf::uint64 CMsgDOTASetGroupLeader::new_leader_steamid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASetGroupLeader.new_leader_steamid)
  return new_leader_steamid_;
}
void CMsgDOTASetGroupLeader::set_new_leader_steamid(::google::protobuf::uint64 value) {
  set_has_new_leader_steamid();
  new_leader_steamid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASetGroupLeader.new_leader_steamid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTACancelGroupInvites::kInvitedSteamidsFieldNumber;
const int CMsgDOTACancelGroupInvites::kInvitedGroupidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTACancelGroupInvites)
}
CMsgDOTACancelGroupInvites::CMsgDOTACancelGroupInvites(const CMsgDOTACancelGroupInvites& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      invited_steamids_(from.invited_steamids_),
      invited_groupids_(from.invited_groupids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTACancelGroupInvites)
}

void CMsgDOTACancelGroupInvites::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTACancelGroupInvites::~CMsgDOTACancelGroupInvites() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTACancelGroupInvites)
  SharedDtor();
}

void CMsgDOTACancelGroupInvites::SharedDtor() {
}

void CMsgDOTACancelGroupInvites::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTACancelGroupInvites::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTACancelGroupInvites& CMsgDOTACancelGroupInvites::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTACancelGroupInvites* CMsgDOTACancelGroupInvites::New(::google::protobuf::Arena* arena) const {
  CMsgDOTACancelGroupInvites* n = new CMsgDOTACancelGroupInvites;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTACancelGroupInvites::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTACancelGroupInvites)
  invited_steamids_.Clear();
  invited_groupids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTACancelGroupInvites::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTACancelGroupInvites)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 invited_steamids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 9u, input, this->mutable_invited_steamids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_steamids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 invited_groupids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_invited_groupids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_invited_groupids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTACancelGroupInvites)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTACancelGroupInvites)
  return false;
#undef DO_
}

void CMsgDOTACancelGroupInvites::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTACancelGroupInvites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  for (int i = 0, n = this->invited_steamids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      1, this->invited_steamids(i), output);
  }

  // repeated fixed64 invited_groupids = 2;
  for (int i = 0, n = this->invited_groupids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->invited_groupids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTACancelGroupInvites)
}

::google::protobuf::uint8* CMsgDOTACancelGroupInvites::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTACancelGroupInvites)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 invited_steamids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(1, this->invited_steamids_, target);

  // repeated fixed64 invited_groupids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->invited_groupids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTACancelGroupInvites)
  return target;
}

size_t CMsgDOTACancelGroupInvites::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTACancelGroupInvites)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated fixed64 invited_steamids = 1;
  {
    unsigned int count = this->invited_steamids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->invited_steamids_size());
    total_size += data_size;
  }

  // repeated fixed64 invited_groupids = 2;
  {
    unsigned int count = this->invited_groupids_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->invited_groupids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTACancelGroupInvites::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTACancelGroupInvites* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTACancelGroupInvites>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTACancelGroupInvites)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTACancelGroupInvites)
    MergeFrom(*source);
  }
}

void CMsgDOTACancelGroupInvites::MergeFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invited_steamids_.MergeFrom(from.invited_steamids_);
  invited_groupids_.MergeFrom(from.invited_groupids_);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTACancelGroupInvites::CopyFrom(const CMsgDOTACancelGroupInvites& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTACancelGroupInvites)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTACancelGroupInvites::IsInitialized() const {
  return true;
}

void CMsgDOTACancelGroupInvites::Swap(CMsgDOTACancelGroupInvites* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTACancelGroupInvites::InternalSwap(CMsgDOTACancelGroupInvites* other) {
  invited_steamids_.InternalSwap(&other->invited_steamids_);
  invited_groupids_.InternalSwap(&other->invited_groupids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTACancelGroupInvites::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTACancelGroupInvites

// repeated fixed64 invited_steamids = 1;
int CMsgDOTACancelGroupInvites::invited_steamids_size() const {
  return invited_steamids_.size();
}
void CMsgDOTACancelGroupInvites::clear_invited_steamids() {
  invited_steamids_.Clear();
}
::google::protobuf::uint64 CMsgDOTACancelGroupInvites::invited_steamids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACancelGroupInvites.invited_steamids)
  return invited_steamids_.Get(index);
}
void CMsgDOTACancelGroupInvites::set_invited_steamids(int index, ::google::protobuf::uint64 value) {
  invited_steamids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACancelGroupInvites.invited_steamids)
}
void CMsgDOTACancelGroupInvites::add_invited_steamids(::google::protobuf::uint64 value) {
  invited_steamids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTACancelGroupInvites.invited_steamids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTACancelGroupInvites::invited_steamids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTACancelGroupInvites.invited_steamids)
  return invited_steamids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_steamids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTACancelGroupInvites.invited_steamids)
  return &invited_steamids_;
}

// repeated fixed64 invited_groupids = 2;
int CMsgDOTACancelGroupInvites::invited_groupids_size() const {
  return invited_groupids_.size();
}
void CMsgDOTACancelGroupInvites::clear_invited_groupids() {
  invited_groupids_.Clear();
}
::google::protobuf::uint64 CMsgDOTACancelGroupInvites::invited_groupids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACancelGroupInvites.invited_groupids)
  return invited_groupids_.Get(index);
}
void CMsgDOTACancelGroupInvites::set_invited_groupids(int index, ::google::protobuf::uint64 value) {
  invited_groupids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACancelGroupInvites.invited_groupids)
}
void CMsgDOTACancelGroupInvites::add_invited_groupids(::google::protobuf::uint64 value) {
  invited_groupids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTACancelGroupInvites.invited_groupids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CMsgDOTACancelGroupInvites::invited_groupids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTACancelGroupInvites.invited_groupids)
  return invited_groupids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CMsgDOTACancelGroupInvites::mutable_invited_groupids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTACancelGroupInvites.invited_groupids)
  return &invited_groupids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASetGroupOpenStatus::kOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASetGroupOpenStatus)
}
CMsgDOTASetGroupOpenStatus::CMsgDOTASetGroupOpenStatus(const CMsgDOTASetGroupOpenStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  open_ = from.open_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASetGroupOpenStatus)
}

void CMsgDOTASetGroupOpenStatus::SharedCtor() {
  _cached_size_ = 0;
  open_ = false;
}

CMsgDOTASetGroupOpenStatus::~CMsgDOTASetGroupOpenStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASetGroupOpenStatus)
  SharedDtor();
}

void CMsgDOTASetGroupOpenStatus::SharedDtor() {
}

void CMsgDOTASetGroupOpenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTASetGroupOpenStatus::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTASetGroupOpenStatus& CMsgDOTASetGroupOpenStatus::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTASetGroupOpenStatus* CMsgDOTASetGroupOpenStatus::New(::google::protobuf::Arena* arena) const {
  CMsgDOTASetGroupOpenStatus* n = new CMsgDOTASetGroupOpenStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTASetGroupOpenStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  open_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTASetGroupOpenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool open = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASetGroupOpenStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASetGroupOpenStatus)
  return false;
#undef DO_
}

void CMsgDOTASetGroupOpenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASetGroupOpenStatus)
}

::google::protobuf::uint8* CMsgDOTASetGroupOpenStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool open = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASetGroupOpenStatus)
  return target;
}

size_t CMsgDOTASetGroupOpenStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bool open = 1;
  if (has_open()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASetGroupOpenStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTASetGroupOpenStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASetGroupOpenStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASetGroupOpenStatus)
    MergeFrom(*source);
  }
}

void CMsgDOTASetGroupOpenStatus::MergeFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open()) {
    set_open(from.open());
  }
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASetGroupOpenStatus::CopyFrom(const CMsgDOTASetGroupOpenStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASetGroupOpenStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASetGroupOpenStatus::IsInitialized() const {
  return true;
}

void CMsgDOTASetGroupOpenStatus::Swap(CMsgDOTASetGroupOpenStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASetGroupOpenStatus::InternalSwap(CMsgDOTASetGroupOpenStatus* other) {
  std::swap(open_, other->open_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTASetGroupOpenStatus::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTASetGroupOpenStatus

// optional bool open = 1;
bool CMsgDOTASetGroupOpenStatus::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTASetGroupOpenStatus::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTASetGroupOpenStatus::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTASetGroupOpenStatus::clear_open() {
  open_ = false;
  clear_has_open();
}
bool CMsgDOTASetGroupOpenStatus::open() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTASetGroupOpenStatus.open)
  return open_;
}
void CMsgDOTASetGroupOpenStatus::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTASetGroupOpenStatus.open)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeInvite::kOtherGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeInvite)
}
CMsgDOTAGroupMergeInvite::CMsgDOTAGroupMergeInvite(const CMsgDOTAGroupMergeInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  other_group_id_ = from.other_group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeInvite)
}

void CMsgDOTAGroupMergeInvite::SharedCtor() {
  _cached_size_ = 0;
  other_group_id_ = GOOGLE_ULONGLONG(0);
}

CMsgDOTAGroupMergeInvite::~CMsgDOTAGroupMergeInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeInvite)
  SharedDtor();
}

void CMsgDOTAGroupMergeInvite::SharedDtor() {
}

void CMsgDOTAGroupMergeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeInvite::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGroupMergeInvite& CMsgDOTAGroupMergeInvite::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGroupMergeInvite* CMsgDOTAGroupMergeInvite::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGroupMergeInvite* n = new CMsgDOTAGroupMergeInvite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGroupMergeInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeInvite)
  other_group_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGroupMergeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 other_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_other_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &other_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeInvite)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->other_group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeInvite)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeInvite::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 other_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->other_group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeInvite)
  return target;
}

size_t CMsgDOTAGroupMergeInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 other_group_id = 1;
  if (has_other_group_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeInvite* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGroupMergeInvite>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeInvite)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeInvite::MergeFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_other_group_id()) {
    set_other_group_id(from.other_group_id());
  }
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeInvite::CopyFrom(const CMsgDOTAGroupMergeInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeInvite::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeInvite::Swap(CMsgDOTAGroupMergeInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeInvite::InternalSwap(CMsgDOTAGroupMergeInvite* other) {
  std::swap(other_group_id_, other->other_group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeInvite::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGroupMergeInvite

// optional fixed64 other_group_id = 1;
bool CMsgDOTAGroupMergeInvite::has_other_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGroupMergeInvite::set_has_other_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGroupMergeInvite::clear_has_other_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGroupMergeInvite::clear_other_group_id() {
  other_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_other_group_id();
}
::google::protobuf::uint64 CMsgDOTAGroupMergeInvite::other_group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGroupMergeInvite.other_group_id)
  return other_group_id_;
}
void CMsgDOTAGroupMergeInvite::set_other_group_id(::google::protobuf::uint64 value) {
  set_has_other_group_id();
  other_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGroupMergeInvite.other_group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeResponse::kInitiatorGroupIdFieldNumber;
const int CMsgDOTAGroupMergeResponse::kAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeResponse)
}
CMsgDOTAGroupMergeResponse::CMsgDOTAGroupMergeResponse(const CMsgDOTAGroupMergeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&initiator_group_id_, &from.initiator_group_id_,
    reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&initiator_group_id_) + sizeof(accept_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeResponse)
}

void CMsgDOTAGroupMergeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&initiator_group_id_, 0, reinterpret_cast<char*>(&accept_) -
    reinterpret_cast<char*>(&initiator_group_id_) + sizeof(accept_));
}

CMsgDOTAGroupMergeResponse::~CMsgDOTAGroupMergeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeResponse)
  SharedDtor();
}

void CMsgDOTAGroupMergeResponse::SharedDtor() {
}

void CMsgDOTAGroupMergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGroupMergeResponse& CMsgDOTAGroupMergeResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGroupMergeResponse* CMsgDOTAGroupMergeResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGroupMergeResponse* n = new CMsgDOTAGroupMergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGroupMergeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeResponse)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&initiator_group_id_, 0, reinterpret_cast<char*>(&accept_) -
      reinterpret_cast<char*>(&initiator_group_id_) + sizeof(accept_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGroupMergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 initiator_group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_initiator_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &initiator_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_accept();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeResponse)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->initiator_group_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeResponse)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 initiator_group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->initiator_group_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeResponse)
  return target;
}

size_t CMsgDOTAGroupMergeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional fixed64 initiator_group_id = 1;
    if (has_initiator_group_id()) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (has_accept()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGroupMergeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeResponse::MergeFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      initiator_group_id_ = from.initiator_group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeResponse::CopyFrom(const CMsgDOTAGroupMergeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeResponse::Swap(CMsgDOTAGroupMergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeResponse::InternalSwap(CMsgDOTAGroupMergeResponse* other) {
  std::swap(initiator_group_id_, other->initiator_group_id_);
  std::swap(accept_, other->accept_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGroupMergeResponse

// optional fixed64 initiator_group_id = 1;
bool CMsgDOTAGroupMergeResponse::has_initiator_group_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGroupMergeResponse::set_has_initiator_group_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGroupMergeResponse::clear_has_initiator_group_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGroupMergeResponse::clear_initiator_group_id() {
  initiator_group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_initiator_group_id();
}
::google::protobuf::uint64 CMsgDOTAGroupMergeResponse::initiator_group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGroupMergeResponse.initiator_group_id)
  return initiator_group_id_;
}
void CMsgDOTAGroupMergeResponse::set_initiator_group_id(::google::protobuf::uint64 value) {
  set_has_initiator_group_id();
  initiator_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGroupMergeResponse.initiator_group_id)
}

// optional bool accept = 2;
bool CMsgDOTAGroupMergeResponse::has_accept() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAGroupMergeResponse::set_has_accept() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAGroupMergeResponse::clear_has_accept() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAGroupMergeResponse::clear_accept() {
  accept_ = false;
  clear_has_accept();
}
bool CMsgDOTAGroupMergeResponse::accept() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGroupMergeResponse.accept)
  return accept_;
}
void CMsgDOTAGroupMergeResponse::set_accept(bool value) {
  set_has_accept();
  accept_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGroupMergeResponse.accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAGroupMergeReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAGroupMergeReply)
}
CMsgDOTAGroupMergeReply::CMsgDOTAGroupMergeReply(const CMsgDOTAGroupMergeReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAGroupMergeReply)
}

void CMsgDOTAGroupMergeReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
}

CMsgDOTAGroupMergeReply::~CMsgDOTAGroupMergeReply() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAGroupMergeReply)
  SharedDtor();
}

void CMsgDOTAGroupMergeReply::SharedDtor() {
}

void CMsgDOTAGroupMergeReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAGroupMergeReply::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAGroupMergeReply& CMsgDOTAGroupMergeReply::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAGroupMergeReply* CMsgDOTAGroupMergeReply::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAGroupMergeReply* n = new CMsgDOTAGroupMergeReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAGroupMergeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAGroupMergeReply)
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAGroupMergeReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAGroupMergeReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EDOTAGroupMergeResult_IsValid(value)) {
            set_result(static_cast< ::proto::dota::EDOTAGroupMergeResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAGroupMergeReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAGroupMergeReply)
  return false;
#undef DO_
}

void CMsgDOTAGroupMergeReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAGroupMergeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAGroupMergeReply)
}

::google::protobuf::uint8* CMsgDOTAGroupMergeReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAGroupMergeReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAGroupMergeReply)
  return target;
}

size_t CMsgDOTAGroupMergeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAGroupMergeReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAGroupMergeReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAGroupMergeReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAGroupMergeReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAGroupMergeReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAGroupMergeReply)
    MergeFrom(*source);
  }
}

void CMsgDOTAGroupMergeReply::MergeFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgDOTAGroupMergeReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAGroupMergeReply::CopyFrom(const CMsgDOTAGroupMergeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAGroupMergeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAGroupMergeReply::IsInitialized() const {
  return true;
}

void CMsgDOTAGroupMergeReply::Swap(CMsgDOTAGroupMergeReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAGroupMergeReply::InternalSwap(CMsgDOTAGroupMergeReply* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAGroupMergeReply::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAGroupMergeReply

// optional .proto.dota.EDOTAGroupMergeResult result = 1 [default = k_EDOTAGroupMergeResult_OK];
bool CMsgDOTAGroupMergeReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAGroupMergeReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAGroupMergeReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAGroupMergeReply::clear_result() {
  result_ = 0;
  clear_has_result();
}
::proto::dota::EDOTAGroupMergeResult CMsgDOTAGroupMergeReply::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAGroupMergeReply.result)
  return static_cast< ::proto::dota::EDOTAGroupMergeResult >(result_);
}
void CMsgDOTAGroupMergeReply::set_result(::proto::dota::EDOTAGroupMergeResult value) {
  assert(::proto::dota::EDOTAGroupMergeResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAGroupMergeReply.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyGameDetails_Team::kTeamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails_Team::kTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}
CMsgSpectatorLobbyGameDetails_Team::CMsgSpectatorLobbyGameDetails_Team(const CMsgSpectatorLobbyGameDetails_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_logo_, &from.team_logo_,
    reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&team_logo_) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}

void CMsgSpectatorLobbyGameDetails_Team::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_logo_, 0, reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&team_logo_) + sizeof(team_id_));
}

CMsgSpectatorLobbyGameDetails_Team::~CMsgSpectatorLobbyGameDetails_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails_Team::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSpectatorLobbyGameDetails_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails_Team::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails_Team::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails_Team::New(::google::protobuf::Arena* arena) const {
  CMsgSpectatorLobbyGameDetails_Team* n = new CMsgSpectatorLobbyGameDetails_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectatorLobbyGameDetails_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&team_logo_, 0, reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&team_logo_) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectatorLobbyGameDetails_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyGameDetails_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional fixed64 team_logo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string team_name = 2;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_logo = 3;
    if (has_team_logo()) {
      total_size += 1 + 8;
    }

    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectatorLobbyGameDetails_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails_Team::MergeFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails_Team::CopyFrom(const CMsgSpectatorLobbyGameDetails_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails_Team::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails_Team::Swap(CMsgSpectatorLobbyGameDetails_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyGameDetails_Team::InternalSwap(CMsgSpectatorLobbyGameDetails_Team* other) {
  team_name_.Swap(&other->team_name_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(team_id_, other->team_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails_Team::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectatorLobbyGameDetails_Team

// optional uint32 team_id = 1;
bool CMsgSpectatorLobbyGameDetails_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSpectatorLobbyGameDetails_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails_Team::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_id)
  return team_id_;
}
void CMsgSpectatorLobbyGameDetails_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_id)
}

// optional string team_name = 2;
bool CMsgSpectatorLobbyGameDetails_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpectatorLobbyGameDetails_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgSpectatorLobbyGameDetails_Team::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
  return team_name_.GetNoArena();
}
void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
}
#if LANG_CXX11
void CMsgSpectatorLobbyGameDetails_Team::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
}
#endif
void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
}
void CMsgSpectatorLobbyGameDetails_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
}
::std::string* CMsgSpectatorLobbyGameDetails_Team::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSpectatorLobbyGameDetails_Team::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSpectatorLobbyGameDetails_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_name)
}

// optional fixed64 team_logo = 3;
bool CMsgSpectatorLobbyGameDetails_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSpectatorLobbyGameDetails_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSpectatorLobbyGameDetails_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_logo)
  return team_logo_;
}
void CMsgSpectatorLobbyGameDetails_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.Team.team_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyGameDetails::kLanguageFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kMatchIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kServerSteamIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamUrlFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kStreamNameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kLeagueIdFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesTypeFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kSeriesGameFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kRadiantTeamFieldNumber;
const int CMsgSpectatorLobbyGameDetails::kDireTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyGameDetails)
}
CMsgSpectatorLobbyGameDetails::CMsgSpectatorLobbyGameDetails(const CMsgSpectatorLobbyGameDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_url()) {
    stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
  }
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_name()) {
    stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
  }
  if (from.has_radiant_team()) {
    radiant_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team(*from.radiant_team_);
  } else {
    radiant_team_ = NULL;
  }
  if (from.has_dire_team()) {
    dire_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team(*from.dire_team_);
  } else {
    dire_team_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&series_game_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(series_game_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyGameDetails)
}

void CMsgSpectatorLobbyGameDetails::SharedCtor() {
  _cached_size_ = 0;
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&radiant_team_, 0, reinterpret_cast<char*>(&series_game_) -
    reinterpret_cast<char*>(&radiant_team_) + sizeof(series_game_));
}

CMsgSpectatorLobbyGameDetails::~CMsgSpectatorLobbyGameDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyGameDetails)
  SharedDtor();
}

void CMsgSpectatorLobbyGameDetails::SharedDtor() {
  stream_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete radiant_team_;
  }
  if (this != internal_default_instance()) {
    delete dire_team_;
  }
}

void CMsgSpectatorLobbyGameDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyGameDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyGameDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyGameDetails::New(::google::protobuf::Arena* arena) const {
  CMsgSpectatorLobbyGameDetails* n = new CMsgSpectatorLobbyGameDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectatorLobbyGameDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_stream_url()) {
      GOOGLE_DCHECK(!stream_url_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_url_.UnsafeRawStringPointer())->clear();
    }
    if (has_stream_name()) {
      GOOGLE_DCHECK(!stream_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stream_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_radiant_team()) {
      GOOGLE_DCHECK(radiant_team_ != NULL);
      radiant_team_->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::Clear();
    }
    if (has_dire_team()) {
      GOOGLE_DCHECK(dire_team_ != NULL);
      dire_team_->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&league_id_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(league_id_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&series_type_, 0, reinterpret_cast<char*>(&series_game_) -
      reinterpret_cast<char*>(&series_type_) + sizeof(series_game_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectatorLobbyGameDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_language();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_url = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_url().data(), this->stream_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_name().data(), this->stream_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_series_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_series_game();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_radiant_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dire_team()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyGameDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyGameDetails)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyGameDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->server_steam_id(), output);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->stream_url(), output);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stream_name(), output);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->league_id(), output);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_type(), output);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->series_game(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->radiant_team_, output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->dire_team_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyGameDetails)
}

::google::protobuf::uint8* CMsgSpectatorLobbyGameDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional uint64 match_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional fixed64 server_steam_id = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->server_steam_id(), target);
  }

  // optional string stream_url = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), this->stream_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->stream_url(), target);
  }

  // optional string stream_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_name().data(), this->stream_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyGameDetails.stream_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stream_name(), target);
  }

  // optional uint32 league_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->league_id(), target);
  }

  // optional uint32 series_type = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_type(), target);
  }

  // optional uint32 series_game = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->series_game(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->radiant_team_, deterministic, target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->dire_team_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyGameDetails)
  return target;
}

size_t CMsgSpectatorLobbyGameDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string stream_url = 4;
    if (has_stream_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_url());
    }

    // optional string stream_name = 5;
    if (has_stream_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_name());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
    if (has_radiant_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->radiant_team_);
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
    if (has_dire_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->dire_team_);
    }

    // optional uint64 match_id = 2;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional fixed64 server_steam_id = 3;
    if (has_server_steam_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 language = 1;
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional uint32 league_id = 6;
    if (has_league_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 series_type = 7;
    if (has_series_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 series_game = 8;
    if (has_series_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyGameDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectatorLobbyGameDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyGameDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyGameDetails)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyGameDetails::MergeFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stream_url();
      stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_stream_name();
      stream_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_radiant_team()->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.radiant_team());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_dire_team()->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::MergeFrom(from.dire_team());
    }
    if (cached_has_bits & 0x00000010u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000080u) {
      league_id_ = from.league_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000200u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyGameDetails::CopyFrom(const CMsgSpectatorLobbyGameDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyGameDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyGameDetails::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyGameDetails::Swap(CMsgSpectatorLobbyGameDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyGameDetails::InternalSwap(CMsgSpectatorLobbyGameDetails* other) {
  stream_url_.Swap(&other->stream_url_);
  stream_name_.Swap(&other->stream_name_);
  std::swap(radiant_team_, other->radiant_team_);
  std::swap(dire_team_, other->dire_team_);
  std::swap(match_id_, other->match_id_);
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(language_, other->language_);
  std::swap(league_id_, other->league_id_);
  std::swap(series_type_, other->series_type_);
  std::swap(series_game_, other->series_game_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyGameDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectatorLobbyGameDetails

// optional uint32 language = 1;
bool CMsgSpectatorLobbyGameDetails::has_language() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_language() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_language() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgSpectatorLobbyGameDetails::clear_language() {
  language_ = 0u;
  clear_has_language();
}
::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::language() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.language)
  return language_;
}
void CMsgSpectatorLobbyGameDetails::set_language(::google::protobuf::uint32 value) {
  set_has_language();
  language_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.language)
}

// optional uint64 match_id = 2;
bool CMsgSpectatorLobbyGameDetails::has_match_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_match_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSpectatorLobbyGameDetails::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.match_id)
  return match_id_;
}
void CMsgSpectatorLobbyGameDetails::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.match_id)
}

// optional fixed64 server_steam_id = 3;
bool CMsgSpectatorLobbyGameDetails::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSpectatorLobbyGameDetails::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgSpectatorLobbyGameDetails::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.server_steam_id)
  return server_steam_id_;
}
void CMsgSpectatorLobbyGameDetails::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.server_steam_id)
}

// optional string stream_url = 4;
bool CMsgSpectatorLobbyGameDetails::has_stream_url() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_stream_url() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_stream_url() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpectatorLobbyGameDetails::clear_stream_url() {
  stream_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_url();
}
const ::std::string& CMsgSpectatorLobbyGameDetails::stream_url() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
  return stream_url_.GetNoArena();
}
void CMsgSpectatorLobbyGameDetails::set_stream_url(const ::std::string& value) {
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
}
#if LANG_CXX11
void CMsgSpectatorLobbyGameDetails::set_stream_url(::std::string&& value) {
  set_has_stream_url();
  stream_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
}
#endif
void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
}
void CMsgSpectatorLobbyGameDetails::set_stream_url(const char* value, size_t size) {
  set_has_stream_url();
  stream_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
}
::std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_url() {
  set_has_stream_url();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
  return stream_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSpectatorLobbyGameDetails::release_stream_url() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
  clear_has_stream_url();
  return stream_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSpectatorLobbyGameDetails::set_allocated_stream_url(::std::string* stream_url) {
  if (stream_url != NULL) {
    set_has_stream_url();
  } else {
    clear_has_stream_url();
  }
  stream_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_url);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyGameDetails.stream_url)
}

// optional string stream_name = 5;
bool CMsgSpectatorLobbyGameDetails::has_stream_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_stream_name() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_stream_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSpectatorLobbyGameDetails::clear_stream_name() {
  stream_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stream_name();
}
const ::std::string& CMsgSpectatorLobbyGameDetails::stream_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
  return stream_name_.GetNoArena();
}
void CMsgSpectatorLobbyGameDetails::set_stream_name(const ::std::string& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
}
#if LANG_CXX11
void CMsgSpectatorLobbyGameDetails::set_stream_name(::std::string&& value) {
  set_has_stream_name();
  stream_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
}
#endif
void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
}
void CMsgSpectatorLobbyGameDetails::set_stream_name(const char* value, size_t size) {
  set_has_stream_name();
  stream_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
}
::std::string* CMsgSpectatorLobbyGameDetails::mutable_stream_name() {
  set_has_stream_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
  return stream_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSpectatorLobbyGameDetails::release_stream_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
  clear_has_stream_name();
  return stream_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSpectatorLobbyGameDetails::set_allocated_stream_name(::std::string* stream_name) {
  if (stream_name != NULL) {
    set_has_stream_name();
  } else {
    clear_has_stream_name();
  }
  stream_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyGameDetails.stream_name)
}

// optional uint32 league_id = 6;
bool CMsgSpectatorLobbyGameDetails::has_league_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_league_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgSpectatorLobbyGameDetails::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.league_id)
  return league_id_;
}
void CMsgSpectatorLobbyGameDetails::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.league_id)
}

// optional uint32 series_type = 7;
bool CMsgSpectatorLobbyGameDetails::has_series_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_series_type() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_series_type() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgSpectatorLobbyGameDetails::clear_series_type() {
  series_type_ = 0u;
  clear_has_series_type();
}
::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::series_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.series_type)
  return series_type_;
}
void CMsgSpectatorLobbyGameDetails::set_series_type(::google::protobuf::uint32 value) {
  set_has_series_type();
  series_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.series_type)
}

// optional uint32 series_game = 8;
bool CMsgSpectatorLobbyGameDetails::has_series_game() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_series_game() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_series_game() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgSpectatorLobbyGameDetails::clear_series_game() {
  series_game_ = 0u;
  clear_has_series_game();
}
::google::protobuf::uint32 CMsgSpectatorLobbyGameDetails::series_game() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.series_game)
  return series_game_;
}
void CMsgSpectatorLobbyGameDetails::set_series_game(::google::protobuf::uint32 value) {
  set_has_series_game();
  series_game_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyGameDetails.series_game)
}

// optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team radiant_team = 9;
bool CMsgSpectatorLobbyGameDetails::has_radiant_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_radiant_team() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_radiant_team() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSpectatorLobbyGameDetails::clear_radiant_team() {
  if (radiant_team_ != NULL) radiant_team_->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::Clear();
  clear_has_radiant_team();
}
const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::radiant_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.radiant_team)
  return radiant_team_ != NULL ? *radiant_team_
                         : *::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance();
}
::proto::dota::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_radiant_team() {
  set_has_radiant_team();
  if (radiant_team_ == NULL) {
    radiant_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyGameDetails.radiant_team)
  return radiant_team_;
}
::proto::dota::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_radiant_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyGameDetails.radiant_team)
  clear_has_radiant_team();
  ::proto::dota::CMsgSpectatorLobbyGameDetails_Team* temp = radiant_team_;
  radiant_team_ = NULL;
  return temp;
}
void CMsgSpectatorLobbyGameDetails::set_allocated_radiant_team(::proto::dota::CMsgSpectatorLobbyGameDetails_Team* radiant_team) {
  delete radiant_team_;
  radiant_team_ = radiant_team;
  if (radiant_team) {
    set_has_radiant_team();
  } else {
    clear_has_radiant_team();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyGameDetails.radiant_team)
}

// optional .proto.dota.CMsgSpectatorLobbyGameDetails.Team dire_team = 10;
bool CMsgSpectatorLobbyGameDetails::has_dire_team() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSpectatorLobbyGameDetails::set_has_dire_team() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSpectatorLobbyGameDetails::clear_has_dire_team() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSpectatorLobbyGameDetails::clear_dire_team() {
  if (dire_team_ != NULL) dire_team_->::proto::dota::CMsgSpectatorLobbyGameDetails_Team::Clear();
  clear_has_dire_team();
}
const ::proto::dota::CMsgSpectatorLobbyGameDetails_Team& CMsgSpectatorLobbyGameDetails::dire_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyGameDetails.dire_team)
  return dire_team_ != NULL ? *dire_team_
                         : *::proto::dota::CMsgSpectatorLobbyGameDetails_Team::internal_default_instance();
}
::proto::dota::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::mutable_dire_team() {
  set_has_dire_team();
  if (dire_team_ == NULL) {
    dire_team_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails_Team;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyGameDetails.dire_team)
  return dire_team_;
}
::proto::dota::CMsgSpectatorLobbyGameDetails_Team* CMsgSpectatorLobbyGameDetails::release_dire_team() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyGameDetails.dire_team)
  clear_has_dire_team();
  ::proto::dota::CMsgSpectatorLobbyGameDetails_Team* temp = dire_team_;
  dire_team_ = NULL;
  return temp;
}
void CMsgSpectatorLobbyGameDetails::set_allocated_dire_team(::proto::dota::CMsgSpectatorLobbyGameDetails_Team* dire_team) {
  delete dire_team_;
  dire_team_ = dire_team;
  if (dire_team) {
    set_has_dire_team();
  } else {
    clear_has_dire_team();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyGameDetails.dire_team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetSpectatorLobbyDetails::kLobbyIdFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kLobbyNameFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kPassKeyFieldNumber;
const int CMsgSetSpectatorLobbyDetails::kGameDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetSpectatorLobbyDetails)
}
CMsgSetSpectatorLobbyDetails::CMsgSetSpectatorLobbyDetails(const CMsgSetSpectatorLobbyDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lobby_name()) {
    lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
  }
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pass_key()) {
    pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
  }
  if (from.has_game_details()) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = NULL;
  }
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetSpectatorLobbyDetails)
}

void CMsgSetSpectatorLobbyDetails::SharedCtor() {
  _cached_size_ = 0;
  lobby_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_details_, 0, reinterpret_cast<char*>(&lobby_id_) -
    reinterpret_cast<char*>(&game_details_) + sizeof(lobby_id_));
}

CMsgSetSpectatorLobbyDetails::~CMsgSetSpectatorLobbyDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetSpectatorLobbyDetails)
  SharedDtor();
}

void CMsgSetSpectatorLobbyDetails::SharedDtor() {
  lobby_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pass_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete game_details_;
  }
}

void CMsgSetSpectatorLobbyDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSetSpectatorLobbyDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSetSpectatorLobbyDetails& CMsgSetSpectatorLobbyDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSetSpectatorLobbyDetails* CMsgSetSpectatorLobbyDetails::New(::google::protobuf::Arena* arena) const {
  CMsgSetSpectatorLobbyDetails* n = new CMsgSetSpectatorLobbyDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSetSpectatorLobbyDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_lobby_name()) {
      GOOGLE_DCHECK(!lobby_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lobby_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_pass_key()) {
      GOOGLE_DCHECK(!pass_key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pass_key_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_details()) {
      GOOGLE_DCHECK(game_details_ != NULL);
      game_details_->::proto::dota::CMsgSpectatorLobbyGameDetails::Clear();
    }
  }
  lobby_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSetSpectatorLobbyDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lobby_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lobby_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lobby_name().data(), this->lobby_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pass_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pass_key().data(), this->pass_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetSpectatorLobbyDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetSpectatorLobbyDetails)
  return false;
#undef DO_
}

void CMsgSetSpectatorLobbyDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lobby_name(), output);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pass_key(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->game_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetSpectatorLobbyDetails)
}

::google::protobuf::uint8* CMsgSetSpectatorLobbyDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string lobby_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lobby_name().data(), this->lobby_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lobby_name(), target);
  }

  // optional string pass_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pass_key().data(), this->pass_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSetSpectatorLobbyDetails.pass_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pass_key(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->game_details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetSpectatorLobbyDetails)
  return target;
}

size_t CMsgSetSpectatorLobbyDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string lobby_name = 2;
    if (has_lobby_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lobby_name());
    }

    // optional string pass_key = 3;
    if (has_pass_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pass_key());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
    if (has_game_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetSpectatorLobbyDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSetSpectatorLobbyDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetSpectatorLobbyDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetSpectatorLobbyDetails)
    MergeFrom(*source);
  }
}

void CMsgSetSpectatorLobbyDetails::MergeFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_lobby_name();
      lobby_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lobby_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pass_key();
      pass_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pass_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_game_details()->::proto::dota::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
    if (cached_has_bits & 0x00000008u) {
      lobby_id_ = from.lobby_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetSpectatorLobbyDetails::CopyFrom(const CMsgSetSpectatorLobbyDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetSpectatorLobbyDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetSpectatorLobbyDetails::IsInitialized() const {
  return true;
}

void CMsgSetSpectatorLobbyDetails::Swap(CMsgSetSpectatorLobbyDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetSpectatorLobbyDetails::InternalSwap(CMsgSetSpectatorLobbyDetails* other) {
  lobby_name_.Swap(&other->lobby_name_);
  pass_key_.Swap(&other->pass_key_);
  std::swap(game_details_, other->game_details_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSetSpectatorLobbyDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSetSpectatorLobbyDetails

// optional uint64 lobby_id = 1;
bool CMsgSetSpectatorLobbyDetails::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSetSpectatorLobbyDetails::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSetSpectatorLobbyDetails::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSetSpectatorLobbyDetails::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgSetSpectatorLobbyDetails::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_id)
  return lobby_id_;
}
void CMsgSetSpectatorLobbyDetails::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_id)
}

// optional string lobby_name = 2;
bool CMsgSetSpectatorLobbyDetails::has_lobby_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSetSpectatorLobbyDetails::set_has_lobby_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSetSpectatorLobbyDetails::clear_has_lobby_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSetSpectatorLobbyDetails::clear_lobby_name() {
  lobby_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lobby_name();
}
const ::std::string& CMsgSetSpectatorLobbyDetails::lobby_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
  return lobby_name_.GetNoArena();
}
void CMsgSetSpectatorLobbyDetails::set_lobby_name(const ::std::string& value) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
}
#if LANG_CXX11
void CMsgSetSpectatorLobbyDetails::set_lobby_name(::std::string&& value) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
}
#endif
void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
}
void CMsgSetSpectatorLobbyDetails::set_lobby_name(const char* value, size_t size) {
  set_has_lobby_name();
  lobby_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
}
::std::string* CMsgSetSpectatorLobbyDetails::mutable_lobby_name() {
  set_has_lobby_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
  return lobby_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetSpectatorLobbyDetails::release_lobby_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
  clear_has_lobby_name();
  return lobby_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetSpectatorLobbyDetails::set_allocated_lobby_name(::std::string* lobby_name) {
  if (lobby_name != NULL) {
    set_has_lobby_name();
  } else {
    clear_has_lobby_name();
  }
  lobby_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lobby_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSetSpectatorLobbyDetails.lobby_name)
}

// optional string pass_key = 3;
bool CMsgSetSpectatorLobbyDetails::has_pass_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSetSpectatorLobbyDetails::set_has_pass_key() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSetSpectatorLobbyDetails::clear_has_pass_key() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSetSpectatorLobbyDetails::clear_pass_key() {
  pass_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pass_key();
}
const ::std::string& CMsgSetSpectatorLobbyDetails::pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
  return pass_key_.GetNoArena();
}
void CMsgSetSpectatorLobbyDetails::set_pass_key(const ::std::string& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
}
#if LANG_CXX11
void CMsgSetSpectatorLobbyDetails::set_pass_key(::std::string&& value) {
  set_has_pass_key();
  pass_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
}
#endif
void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
}
void CMsgSetSpectatorLobbyDetails::set_pass_key(const char* value, size_t size) {
  set_has_pass_key();
  pass_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
}
::std::string* CMsgSetSpectatorLobbyDetails::mutable_pass_key() {
  set_has_pass_key();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
  return pass_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSetSpectatorLobbyDetails::release_pass_key() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
  clear_has_pass_key();
  return pass_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSetSpectatorLobbyDetails::set_allocated_pass_key(::std::string* pass_key) {
  if (pass_key != NULL) {
    set_has_pass_key();
  } else {
    clear_has_pass_key();
  }
  pass_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pass_key);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSetSpectatorLobbyDetails.pass_key)
}

// optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 4;
bool CMsgSetSpectatorLobbyDetails::has_game_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSetSpectatorLobbyDetails::set_has_game_details() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSetSpectatorLobbyDetails::clear_has_game_details() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSetSpectatorLobbyDetails::clear_game_details() {
  if (game_details_ != NULL) game_details_->::proto::dota::CMsgSpectatorLobbyGameDetails::Clear();
  clear_has_game_details();
}
const ::proto::dota::CMsgSpectatorLobbyGameDetails& CMsgSetSpectatorLobbyDetails::game_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSetSpectatorLobbyDetails.game_details)
  return game_details_ != NULL ? *game_details_
                         : *::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance();
}
::proto::dota::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::mutable_game_details() {
  set_has_game_details();
  if (game_details_ == NULL) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSetSpectatorLobbyDetails.game_details)
  return game_details_;
}
::proto::dota::CMsgSpectatorLobbyGameDetails* CMsgSetSpectatorLobbyDetails::release_game_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSetSpectatorLobbyDetails.game_details)
  clear_has_game_details();
  ::proto::dota::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = NULL;
  return temp;
}
void CMsgSetSpectatorLobbyDetails::set_allocated_game_details(::proto::dota::CMsgSpectatorLobbyGameDetails* game_details) {
  delete game_details_;
  game_details_ = game_details;
  if (game_details) {
    set_has_game_details();
  } else {
    clear_has_game_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSetSpectatorLobbyDetails.game_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCreateSpectatorLobby::kClientVersionFieldNumber;
const int CMsgCreateSpectatorLobby::kDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCreateSpectatorLobby)
}
CMsgCreateSpectatorLobby::CMsgCreateSpectatorLobby(const CMsgCreateSpectatorLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_details()) {
    details_ = new ::proto::dota::CMsgSetSpectatorLobbyDetails(*from.details_);
  } else {
    details_ = NULL;
  }
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCreateSpectatorLobby)
}

void CMsgCreateSpectatorLobby::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&details_, 0, reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&details_) + sizeof(client_version_));
}

CMsgCreateSpectatorLobby::~CMsgCreateSpectatorLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCreateSpectatorLobby)
  SharedDtor();
}

void CMsgCreateSpectatorLobby::SharedDtor() {
  if (this != internal_default_instance()) {
    delete details_;
  }
}

void CMsgCreateSpectatorLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgCreateSpectatorLobby::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgCreateSpectatorLobby& CMsgCreateSpectatorLobby::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgCreateSpectatorLobby* CMsgCreateSpectatorLobby::New(::google::protobuf::Arena* arena) const {
  CMsgCreateSpectatorLobby* n = new CMsgCreateSpectatorLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgCreateSpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCreateSpectatorLobby)
  if (has_details()) {
    GOOGLE_DCHECK(details_ != NULL);
    details_->::proto::dota::CMsgSetSpectatorLobbyDetails::Clear();
  }
  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgCreateSpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCreateSpectatorLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_client_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCreateSpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCreateSpectatorLobby)
  return false;
#undef DO_
}

void CMsgCreateSpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCreateSpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCreateSpectatorLobby)
}

::google::protobuf::uint8* CMsgCreateSpectatorLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCreateSpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCreateSpectatorLobby)
  return target;
}

size_t CMsgCreateSpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCreateSpectatorLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
    if (has_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->details_);
    }

    // optional uint32 client_version = 1;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgCreateSpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCreateSpectatorLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgCreateSpectatorLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCreateSpectatorLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCreateSpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgCreateSpectatorLobby::MergeFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCreateSpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_details()->::proto::dota::CMsgSetSpectatorLobbyDetails::MergeFrom(from.details());
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCreateSpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCreateSpectatorLobby::CopyFrom(const CMsgCreateSpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCreateSpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCreateSpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgCreateSpectatorLobby::Swap(CMsgCreateSpectatorLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCreateSpectatorLobby::InternalSwap(CMsgCreateSpectatorLobby* other) {
  std::swap(details_, other->details_);
  std::swap(client_version_, other->client_version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgCreateSpectatorLobby::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgCreateSpectatorLobby

// optional uint32 client_version = 1;
bool CMsgCreateSpectatorLobby::has_client_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgCreateSpectatorLobby::set_has_client_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgCreateSpectatorLobby::clear_has_client_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgCreateSpectatorLobby::clear_client_version() {
  client_version_ = 0u;
  clear_has_client_version();
}
::google::protobuf::uint32 CMsgCreateSpectatorLobby::client_version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCreateSpectatorLobby.client_version)
  return client_version_;
}
void CMsgCreateSpectatorLobby::set_client_version(::google::protobuf::uint32 value) {
  set_has_client_version();
  client_version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgCreateSpectatorLobby.client_version)
}

// optional .proto.dota.CMsgSetSpectatorLobbyDetails details = 2;
bool CMsgCreateSpectatorLobby::has_details() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgCreateSpectatorLobby::set_has_details() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgCreateSpectatorLobby::clear_has_details() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgCreateSpectatorLobby::clear_details() {
  if (details_ != NULL) details_->::proto::dota::CMsgSetSpectatorLobbyDetails::Clear();
  clear_has_details();
}
const ::proto::dota::CMsgSetSpectatorLobbyDetails& CMsgCreateSpectatorLobby::details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgCreateSpectatorLobby.details)
  return details_ != NULL ? *details_
                         : *::proto::dota::CMsgSetSpectatorLobbyDetails::internal_default_instance();
}
::proto::dota::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::mutable_details() {
  set_has_details();
  if (details_ == NULL) {
    details_ = new ::proto::dota::CMsgSetSpectatorLobbyDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgCreateSpectatorLobby.details)
  return details_;
}
::proto::dota::CMsgSetSpectatorLobbyDetails* CMsgCreateSpectatorLobby::release_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgCreateSpectatorLobby.details)
  clear_has_details();
  ::proto::dota::CMsgSetSpectatorLobbyDetails* temp = details_;
  details_ = NULL;
  return temp;
}
void CMsgCreateSpectatorLobby::set_allocated_details(::proto::dota::CMsgSetSpectatorLobbyDetails* details) {
  delete details_;
  details_ = details;
  if (details) {
    set_has_details();
  } else {
    clear_has_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgCreateSpectatorLobby.details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyList::CMsgSpectatorLobbyList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyList)
}
CMsgSpectatorLobbyList::CMsgSpectatorLobbyList(const CMsgSpectatorLobbyList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyList)
}

void CMsgSpectatorLobbyList::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSpectatorLobbyList::~CMsgSpectatorLobbyList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyList)
  SharedDtor();
}

void CMsgSpectatorLobbyList::SharedDtor() {
}

void CMsgSpectatorLobbyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyList::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectatorLobbyList& CMsgSpectatorLobbyList::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectatorLobbyList* CMsgSpectatorLobbyList::New(::google::protobuf::Arena* arena) const {
  CMsgSpectatorLobbyList* n = new CMsgSpectatorLobbyList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectatorLobbyList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyList)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectatorLobbyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyList)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyList)
}

::google::protobuf::uint8* CMsgSpectatorLobbyList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyList)
  return target;
}

size_t CMsgSpectatorLobbyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectatorLobbyList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyList)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyList::MergeFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSpectatorLobbyList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyList::CopyFrom(const CMsgSpectatorLobbyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyList::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyList::Swap(CMsgSpectatorLobbyList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyList::InternalSwap(CMsgSpectatorLobbyList* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyList::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectatorLobbyList

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLobbyIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameNameFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kRequiresPassKeyFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kLeaderAccountIdFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kMemberCountFieldNumber;
const int CMsgSpectatorLobbyListResponse_SpectatorLobby::kGameDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}
CMsgSpectatorLobbyListResponse_SpectatorLobby::CMsgSpectatorLobbyListResponse_SpectatorLobby(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_game_name()) {
    game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
  }
  if (from.has_game_details()) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails(*from.game_details_);
  } else {
    game_details_ = NULL;
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedCtor() {
  _cached_size_ = 0;
  game_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&game_details_, 0, reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&game_details_) + sizeof(member_count_));
}

CMsgSpectatorLobbyListResponse_SpectatorLobby::~CMsgSpectatorLobbyListResponse_SpectatorLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SharedDtor() {
  game_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete game_details_;
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse_SpectatorLobby::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse_SpectatorLobby::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse_SpectatorLobby::New(::google::protobuf::Arena* arena) const {
  CMsgSpectatorLobbyListResponse_SpectatorLobby* n = new CMsgSpectatorLobbyListResponse_SpectatorLobby;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_game_name()) {
      GOOGLE_DCHECK(!game_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*game_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_game_details()) {
      GOOGLE_DCHECK(game_details_ != NULL);
      game_details_->::proto::dota::CMsgSpectatorLobbyGameDetails::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string game_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_name().data(), this->game_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_pass_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_requires_pass_key();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_pass_key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 leader_account_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_leader_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_member_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_details()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lobby_id(), output);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->game_name(), output);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->requires_pass_key(), output);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leader_account_id(), output);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->member_count(), output);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->game_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 lobby_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lobby_id(), target);
  }

  // optional string game_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_name().data(), this->game_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->game_name(), target);
  }

  // optional bool requires_pass_key = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->requires_pass_key(), target);
  }

  // optional uint32 leader_account_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leader_account_id(), target);
  }

  // optional uint32 member_count = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->member_count(), target);
  }

  // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->game_details_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  return target;
}

size_t CMsgSpectatorLobbyListResponse_SpectatorLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string game_name = 2;
    if (has_game_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_name());
    }

    // optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
    if (has_game_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->game_details_);
    }

    // optional uint64 lobby_id = 1;
    if (has_lobby_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional bool requires_pass_key = 3;
    if (has_requires_pass_key()) {
      total_size += 1 + 1;
    }

    // optional uint32 leader_account_id = 4;
    if (has_leader_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_account_id());
    }

    // optional uint32 member_count = 5;
    if (has_member_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse_SpectatorLobby* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectatorLobbyListResponse_SpectatorLobby>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::MergeFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_game_name();
      game_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_game_details()->::proto::dota::CMsgSpectatorLobbyGameDetails::MergeFrom(from.game_details());
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      requires_pass_key_ = from.requires_pass_key_;
    }
    if (cached_has_bits & 0x00000010u) {
      leader_account_id_ = from.leader_account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::CopyFrom(const CMsgSpectatorLobbyListResponse_SpectatorLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse_SpectatorLobby::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse_SpectatorLobby::Swap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::InternalSwap(CMsgSpectatorLobbyListResponse_SpectatorLobby* other) {
  game_name_.Swap(&other->game_name_);
  std::swap(game_details_, other->game_details_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(requires_pass_key_, other->requires_pass_key_);
  std::swap(leader_account_id_, other->leader_account_id_);
  std::swap(member_count_, other->member_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse_SpectatorLobby::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectatorLobbyListResponse_SpectatorLobby

// optional uint64 lobby_id = 1;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgSpectatorLobbyListResponse_SpectatorLobby::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
  return lobby_id_;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.lobby_id)
}

// optional string game_name = 2;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_game_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_game_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_name() {
  game_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_name();
}
const ::std::string& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return game_name_.GetNoArena();
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const ::std::string& value) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
#if LANG_CXX11
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(::std::string&& value) {
  set_has_game_name();
  game_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
#endif
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_game_name(const char* value, size_t size) {
  set_has_game_name();
  game_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}
::std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_name() {
  set_has_game_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  return game_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
  clear_has_game_name();
  return game_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_name(::std::string* game_name) {
  if (game_name != NULL) {
    set_has_game_name();
  } else {
    clear_has_game_name();
  }
  game_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_name)
}

// optional bool requires_pass_key = 3;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_requires_pass_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_requires_pass_key() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_requires_pass_key() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_requires_pass_key() {
  requires_pass_key_ = false;
  clear_has_requires_pass_key();
}
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::requires_pass_key() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
  return requires_pass_key_;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_requires_pass_key(bool value) {
  set_has_requires_pass_key();
  requires_pass_key_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.requires_pass_key)
}

// optional uint32 leader_account_id = 4;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_leader_account_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_leader_account_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_leader_account_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_leader_account_id() {
  leader_account_id_ = 0u;
  clear_has_leader_account_id();
}
::google::protobuf::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::leader_account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
  return leader_account_id_;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_leader_account_id(::google::protobuf::uint32 value) {
  set_has_leader_account_id();
  leader_account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.leader_account_id)
}

// optional uint32 member_count = 5;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_member_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_member_count() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_member_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_member_count() {
  member_count_ = 0u;
  clear_has_member_count();
}
::google::protobuf::uint32 CMsgSpectatorLobbyListResponse_SpectatorLobby::member_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
  return member_count_;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_member_count(::google::protobuf::uint32 value) {
  set_has_member_count();
  member_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.member_count)
}

// optional .proto.dota.CMsgSpectatorLobbyGameDetails game_details = 7;
bool CMsgSpectatorLobbyListResponse_SpectatorLobby::has_game_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_has_game_details() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_has_game_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::clear_game_details() {
  if (game_details_ != NULL) game_details_->::proto::dota::CMsgSpectatorLobbyGameDetails::Clear();
  clear_has_game_details();
}
const ::proto::dota::CMsgSpectatorLobbyGameDetails& CMsgSpectatorLobbyListResponse_SpectatorLobby::game_details() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return game_details_ != NULL ? *game_details_
                         : *::proto::dota::CMsgSpectatorLobbyGameDetails::internal_default_instance();
}
::proto::dota::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::mutable_game_details() {
  set_has_game_details();
  if (game_details_ == NULL) {
    game_details_ = new ::proto::dota::CMsgSpectatorLobbyGameDetails;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  return game_details_;
}
::proto::dota::CMsgSpectatorLobbyGameDetails* CMsgSpectatorLobbyListResponse_SpectatorLobby::release_game_details() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
  clear_has_game_details();
  ::proto::dota::CMsgSpectatorLobbyGameDetails* temp = game_details_;
  game_details_ = NULL;
  return temp;
}
void CMsgSpectatorLobbyListResponse_SpectatorLobby::set_allocated_game_details(::proto::dota::CMsgSpectatorLobbyGameDetails* game_details) {
  delete game_details_;
  game_details_ = game_details;
  if (game_details) {
    set_has_game_details();
  } else {
    clear_has_game_details();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby.game_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectatorLobbyListResponse::kLobbiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectatorLobbyListResponse)
}
CMsgSpectatorLobbyListResponse::CMsgSpectatorLobbyListResponse(const CMsgSpectatorLobbyListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      lobbies_(from.lobbies_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectatorLobbyListResponse)
}

void CMsgSpectatorLobbyListResponse::SharedCtor() {
  _cached_size_ = 0;
}

CMsgSpectatorLobbyListResponse::~CMsgSpectatorLobbyListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectatorLobbyListResponse)
  SharedDtor();
}

void CMsgSpectatorLobbyListResponse::SharedDtor() {
}

void CMsgSpectatorLobbyListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgSpectatorLobbyListResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgSpectatorLobbyListResponse& CMsgSpectatorLobbyListResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgSpectatorLobbyListResponse* CMsgSpectatorLobbyListResponse::New(::google::protobuf::Arena* arena) const {
  CMsgSpectatorLobbyListResponse* n = new CMsgSpectatorLobbyListResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgSpectatorLobbyListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectatorLobbyListResponse)
  lobbies_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgSpectatorLobbyListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectatorLobbyListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lobbies()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectatorLobbyListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectatorLobbyListResponse)
  return false;
#undef DO_
}

void CMsgSpectatorLobbyListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectatorLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lobbies(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectatorLobbyListResponse)
}

::google::protobuf::uint8* CMsgSpectatorLobbyListResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectatorLobbyListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  for (unsigned int i = 0, n = this->lobbies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->lobbies(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectatorLobbyListResponse)
  return target;
}

size_t CMsgSpectatorLobbyListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectatorLobbyListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
  {
    unsigned int count = this->lobbies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lobbies(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectatorLobbyListResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgSpectatorLobbyListResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectatorLobbyListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectatorLobbyListResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectatorLobbyListResponse::MergeFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobbies_.MergeFrom(from.lobbies_);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectatorLobbyListResponse::CopyFrom(const CMsgSpectatorLobbyListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectatorLobbyListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectatorLobbyListResponse::IsInitialized() const {
  return true;
}

void CMsgSpectatorLobbyListResponse::Swap(CMsgSpectatorLobbyListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectatorLobbyListResponse::InternalSwap(CMsgSpectatorLobbyListResponse* other) {
  lobbies_.InternalSwap(&other->lobbies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgSpectatorLobbyListResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgSpectatorLobbyListResponse

// repeated .proto.dota.CMsgSpectatorLobbyListResponse.SpectatorLobby lobbies = 1;
int CMsgSpectatorLobbyListResponse::lobbies_size() const {
  return lobbies_.size();
}
void CMsgSpectatorLobbyListResponse::clear_lobbies() {
  lobbies_.Clear();
}
const ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby& CMsgSpectatorLobbyListResponse::lobbies(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Get(index);
}
::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::mutable_lobbies(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Mutable(index);
}
::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby* CMsgSpectatorLobbyListResponse::add_lobbies() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby >*
CMsgSpectatorLobbyListResponse::mutable_lobbies() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgSpectatorLobbyListResponse.lobbies)
  return &lobbies_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgSpectatorLobbyListResponse_SpectatorLobby >&
CMsgSpectatorLobbyListResponse::lobbies() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgSpectatorLobbyListResponse.lobbies)
  return lobbies_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRequestSteamDatagramTicket::kServerSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}
CMsgClientToGCRequestSteamDatagramTicket::CMsgClientToGCRequestSteamDatagramTicket(const CMsgClientToGCRequestSteamDatagramTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_steam_id_ = from.server_steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedCtor() {
  _cached_size_ = 0;
  server_steam_id_ = GOOGLE_ULONGLONG(0);
}

CMsgClientToGCRequestSteamDatagramTicket::~CMsgClientToGCRequestSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicket::SharedDtor() {
}

void CMsgClientToGCRequestSteamDatagramTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicket::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCRequestSteamDatagramTicket& CMsgClientToGCRequestSteamDatagramTicket::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCRequestSteamDatagramTicket* CMsgClientToGCRequestSteamDatagramTicket::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCRequestSteamDatagramTicket* n = new CMsgClientToGCRequestSteamDatagramTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCRequestSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCRequestSteamDatagramTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_server_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return false;
#undef DO_
}

void CMsgClientToGCRequestSteamDatagramTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional fixed64 server_steam_id = 1;
  if (has_server_steam_id()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCRequestSteamDatagramTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_steam_id()) {
    set_server_steam_id(from.server_steam_id());
  }
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicket::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicket::Swap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRequestSteamDatagramTicket::InternalSwap(CMsgClientToGCRequestSteamDatagramTicket* other) {
  std::swap(server_steam_id_, other->server_steam_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicket::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCRequestSteamDatagramTicket

// optional fixed64 server_steam_id = 1;
bool CMsgClientToGCRequestSteamDatagramTicket::has_server_steam_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCRequestSteamDatagramTicket::set_has_server_steam_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCRequestSteamDatagramTicket::clear_has_server_steam_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCRequestSteamDatagramTicket::clear_server_steam_id() {
  server_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_server_steam_id();
}
::google::protobuf::uint64 CMsgClientToGCRequestSteamDatagramTicket::server_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
  return server_steam_id_;
}
void CMsgClientToGCRequestSteamDatagramTicket::set_server_steam_id(::google::protobuf::uint64 value) {
  set_has_server_steam_id();
  server_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRequestSteamDatagramTicket.server_steam_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kSerializedTicketFieldNumber;
const int CMsgClientToGCRequestSteamDatagramTicketResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}
CMsgClientToGCRequestSteamDatagramTicketResponse::CMsgClientToGCRequestSteamDatagramTicketResponse(const CMsgClientToGCRequestSteamDatagramTicketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedCtor() {
  _cached_size_ = 0;
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCRequestSteamDatagramTicketResponse::~CMsgClientToGCRequestSteamDatagramTicketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  SharedDtor();
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SharedDtor() {
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgClientToGCRequestSteamDatagramTicketResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgClientToGCRequestSteamDatagramTicketResponse& CMsgClientToGCRequestSteamDatagramTicketResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgClientToGCRequestSteamDatagramTicketResponse* CMsgClientToGCRequestSteamDatagramTicketResponse::New(::google::protobuf::Arena* arena) const {
  CMsgClientToGCRequestSteamDatagramTicketResponse* n = new CMsgClientToGCRequestSteamDatagramTicketResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_serialized_ticket()) {
      GOOGLE_DCHECK(!serialized_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serialized_ticket_.UnsafeRawStringPointer())->clear();
    }
    if (has_message()) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes serialized_ticket = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return false;
#undef DO_
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->serialized_ticket(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
}

::google::protobuf::uint8* CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes serialized_ticket = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_ticket(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  return target;
}

size_t CMsgClientToGCRequestSteamDatagramTicketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes serialized_ticket = 1;
    if (has_serialized_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCRequestSteamDatagramTicketResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgClientToGCRequestSteamDatagramTicketResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::MergeFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_serialized_ticket();
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::CopyFrom(const CMsgClientToGCRequestSteamDatagramTicketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCRequestSteamDatagramTicketResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCRequestSteamDatagramTicketResponse::Swap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::InternalSwap(CMsgClientToGCRequestSteamDatagramTicketResponse* other) {
  serialized_ticket_.Swap(&other->serialized_ticket_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgClientToGCRequestSteamDatagramTicketResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgClientToGCRequestSteamDatagramTicketResponse

// optional bytes serialized_ticket = 1;
bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_serialized_ticket() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_has_serialized_ticket() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_has_serialized_ticket() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_ticket();
}
const ::std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return serialized_ticket_.GetNoArena();
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const ::std::string& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
#if LANG_CXX11
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(::std::string&& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
#endif
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_serialized_ticket(const void* value, size_t size) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}
::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_serialized_ticket() {
  set_has_serialized_ticket();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  return serialized_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
  clear_has_serialized_ticket();
  return serialized_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_serialized_ticket(::std::string* serialized_ticket) {
  if (serialized_ticket != NULL) {
    set_has_serialized_ticket();
  } else {
    clear_has_serialized_ticket();
  }
  serialized_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.serialized_ticket)
}

// optional string message = 2;
bool CMsgClientToGCRequestSteamDatagramTicketResponse::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& CMsgClientToGCRequestSteamDatagramTicketResponse::message() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return message_.GetNoArena();
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
#if LANG_CXX11
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
#endif
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}
::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgClientToGCRequestSteamDatagramTicketResponse::release_message() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgClientToGCRequestSteamDatagramTicketResponse::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgClientToGCRequestSteamDatagramTicketResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientSteamDatagramTicket::kLegacyTimeExpiryFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAuthorizedSteamIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAuthorizedPublicIpFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyGameserverSteamIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyGameserverNetIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacySignatureFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyAppIdFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kLegacyExtraFieldsFieldNumber;
const int CMsgGCToClientSteamDatagramTicket::kSerializedTicketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
}
CMsgGCToClientSteamDatagramTicket::CMsgGCToClientSteamDatagramTicket(const CMsgGCToClientSteamDatagramTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      legacy_extra_fields_(from.legacy_extra_fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_legacy_signature()) {
    legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
  }
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_serialized_ticket()) {
    serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
  }
  ::memcpy(&legacy_authorized_steam_id_, &from.legacy_authorized_steam_id_,
    reinterpret_cast<char*>(&legacy_app_id_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_) + sizeof(legacy_app_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
}

void CMsgGCToClientSteamDatagramTicket::SharedCtor() {
  _cached_size_ = 0;
  legacy_signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_ticket_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&legacy_authorized_steam_id_, 0, reinterpret_cast<char*>(&legacy_app_id_) -
    reinterpret_cast<char*>(&legacy_authorized_steam_id_) + sizeof(legacy_app_id_));
}

CMsgGCToClientSteamDatagramTicket::~CMsgGCToClientSteamDatagramTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientSteamDatagramTicket)
  SharedDtor();
}

void CMsgGCToClientSteamDatagramTicket::SharedDtor() {
  legacy_signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serialized_ticket_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientSteamDatagramTicket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgGCToClientSteamDatagramTicket::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgGCToClientSteamDatagramTicket& CMsgGCToClientSteamDatagramTicket::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgGCToClientSteamDatagramTicket* CMsgGCToClientSteamDatagramTicket::New(::google::protobuf::Arena* arena) const {
  CMsgGCToClientSteamDatagramTicket* n = new CMsgGCToClientSteamDatagramTicket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgGCToClientSteamDatagramTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  legacy_extra_fields_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_legacy_signature()) {
      GOOGLE_DCHECK(!legacy_signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*legacy_signature_.UnsafeRawStringPointer())->clear();
    }
    if (has_serialized_ticket()) {
      GOOGLE_DCHECK(!serialized_ticket_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*serialized_ticket_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&legacy_authorized_steam_id_, 0, reinterpret_cast<char*>(&legacy_app_id_) -
      reinterpret_cast<char*>(&legacy_authorized_steam_id_) + sizeof(legacy_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgGCToClientSteamDatagramTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 legacy_time_expiry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_legacy_time_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_authorized_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_legacy_authorized_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_authorized_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 legacy_authorized_public_ip = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_legacy_authorized_public_ip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &legacy_authorized_public_ip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_steam_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_legacy_gameserver_steam_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_gameserver_net_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_legacy_gameserver_net_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_gameserver_net_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes legacy_signature = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 legacy_app_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_legacy_app_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &legacy_app_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes legacy_extra_fields = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_legacy_extra_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes serialized_ticket = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_ticket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return false;
#undef DO_
}

void CMsgGCToClientSteamDatagramTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->legacy_time_expiry(), output);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->legacy_authorized_steam_id(), output);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->legacy_authorized_public_ip(), output);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->legacy_gameserver_steam_id(), output);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->legacy_gameserver_net_id(), output);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->legacy_signature(), output);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->legacy_app_id(), output);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->legacy_extra_fields(i), output);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      16, this->serialized_ticket(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientSteamDatagramTicket)
}

::google::protobuf::uint8* CMsgGCToClientSteamDatagramTicket::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 legacy_time_expiry = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->legacy_time_expiry(), target);
  }

  // optional fixed64 legacy_authorized_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->legacy_authorized_steam_id(), target);
  }

  // optional fixed32 legacy_authorized_public_ip = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->legacy_authorized_public_ip(), target);
  }

  // optional fixed64 legacy_gameserver_steam_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_gameserver_steam_id(), target);
  }

  // optional fixed64 legacy_gameserver_net_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->legacy_gameserver_net_id(), target);
  }

  // optional bytes legacy_signature = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->legacy_signature(), target);
  }

  // optional uint32 legacy_app_id = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->legacy_app_id(), target);
  }

  // repeated bytes legacy_extra_fields = 8;
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->legacy_extra_fields(i), target);
  }

  // optional bytes serialized_ticket = 16;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->serialized_ticket(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientSteamDatagramTicket)
  return target;
}

size_t CMsgGCToClientSteamDatagramTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated bytes legacy_extra_fields = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->legacy_extra_fields_size());
  for (int i = 0, n = this->legacy_extra_fields_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->legacy_extra_fields(i));
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes legacy_signature = 6;
    if (has_legacy_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_signature());
    }

    // optional bytes serialized_ticket = 16;
    if (has_serialized_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_ticket());
    }

    // optional fixed64 legacy_authorized_steam_id = 2;
    if (has_legacy_authorized_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed32 legacy_time_expiry = 1;
    if (has_legacy_time_expiry()) {
      total_size += 1 + 4;
    }

    // optional fixed32 legacy_authorized_public_ip = 3;
    if (has_legacy_authorized_public_ip()) {
      total_size += 1 + 4;
    }

    // optional fixed64 legacy_gameserver_steam_id = 4;
    if (has_legacy_gameserver_steam_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 legacy_gameserver_net_id = 5;
    if (has_legacy_gameserver_net_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 legacy_app_id = 7;
    if (has_legacy_app_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->legacy_app_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientSteamDatagramTicket* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgGCToClientSteamDatagramTicket>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientSteamDatagramTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientSteamDatagramTicket)
    MergeFrom(*source);
  }
}

void CMsgGCToClientSteamDatagramTicket::MergeFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  legacy_extra_fields_.MergeFrom(from.legacy_extra_fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_legacy_signature();
      legacy_signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.legacy_signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_serialized_ticket();
      serialized_ticket_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.serialized_ticket_);
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_authorized_steam_id_ = from.legacy_authorized_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      legacy_time_expiry_ = from.legacy_time_expiry_;
    }
    if (cached_has_bits & 0x00000010u) {
      legacy_authorized_public_ip_ = from.legacy_authorized_public_ip_;
    }
    if (cached_has_bits & 0x00000020u) {
      legacy_gameserver_steam_id_ = from.legacy_gameserver_steam_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      legacy_gameserver_net_id_ = from.legacy_gameserver_net_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      legacy_app_id_ = from.legacy_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientSteamDatagramTicket::CopyFrom(const CMsgGCToClientSteamDatagramTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientSteamDatagramTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientSteamDatagramTicket::IsInitialized() const {
  return true;
}

void CMsgGCToClientSteamDatagramTicket::Swap(CMsgGCToClientSteamDatagramTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientSteamDatagramTicket::InternalSwap(CMsgGCToClientSteamDatagramTicket* other) {
  legacy_extra_fields_.InternalSwap(&other->legacy_extra_fields_);
  legacy_signature_.Swap(&other->legacy_signature_);
  serialized_ticket_.Swap(&other->serialized_ticket_);
  std::swap(legacy_authorized_steam_id_, other->legacy_authorized_steam_id_);
  std::swap(legacy_time_expiry_, other->legacy_time_expiry_);
  std::swap(legacy_authorized_public_ip_, other->legacy_authorized_public_ip_);
  std::swap(legacy_gameserver_steam_id_, other->legacy_gameserver_steam_id_);
  std::swap(legacy_gameserver_net_id_, other->legacy_gameserver_net_id_);
  std::swap(legacy_app_id_, other->legacy_app_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgGCToClientSteamDatagramTicket::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5fmatch_5fmanagement_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgGCToClientSteamDatagramTicket

// optional fixed32 legacy_time_expiry = 1;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_time_expiry() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_time_expiry() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_time_expiry() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_time_expiry() {
  legacy_time_expiry_ = 0u;
  clear_has_legacy_time_expiry();
}
::google::protobuf::uint32 CMsgGCToClientSteamDatagramTicket::legacy_time_expiry() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_time_expiry)
  return legacy_time_expiry_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_time_expiry(::google::protobuf::uint32 value) {
  set_has_legacy_time_expiry();
  legacy_time_expiry_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_time_expiry)
}

// optional fixed64 legacy_authorized_steam_id = 2;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_authorized_steam_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_authorized_steam_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_authorized_steam_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_authorized_steam_id() {
  legacy_authorized_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_authorized_steam_id();
}
::google::protobuf::uint64 CMsgGCToClientSteamDatagramTicket::legacy_authorized_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_authorized_steam_id)
  return legacy_authorized_steam_id_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_authorized_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_authorized_steam_id();
  legacy_authorized_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_authorized_steam_id)
}

// optional fixed32 legacy_authorized_public_ip = 3;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_authorized_public_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_authorized_public_ip() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_authorized_public_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_authorized_public_ip() {
  legacy_authorized_public_ip_ = 0u;
  clear_has_legacy_authorized_public_ip();
}
::google::protobuf::uint32 CMsgGCToClientSteamDatagramTicket::legacy_authorized_public_ip() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_authorized_public_ip)
  return legacy_authorized_public_ip_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_authorized_public_ip(::google::protobuf::uint32 value) {
  set_has_legacy_authorized_public_ip();
  legacy_authorized_public_ip_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_authorized_public_ip)
}

// optional fixed64 legacy_gameserver_steam_id = 4;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_gameserver_steam_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_gameserver_steam_id() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_gameserver_steam_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_gameserver_steam_id() {
  legacy_gameserver_steam_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_gameserver_steam_id();
}
::google::protobuf::uint64 CMsgGCToClientSteamDatagramTicket::legacy_gameserver_steam_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_gameserver_steam_id)
  return legacy_gameserver_steam_id_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_gameserver_steam_id(::google::protobuf::uint64 value) {
  set_has_legacy_gameserver_steam_id();
  legacy_gameserver_steam_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_gameserver_steam_id)
}

// optional fixed64 legacy_gameserver_net_id = 5;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_gameserver_net_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_gameserver_net_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_gameserver_net_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_gameserver_net_id() {
  legacy_gameserver_net_id_ = GOOGLE_ULONGLONG(0);
  clear_has_legacy_gameserver_net_id();
}
::google::protobuf::uint64 CMsgGCToClientSteamDatagramTicket::legacy_gameserver_net_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_gameserver_net_id)
  return legacy_gameserver_net_id_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_gameserver_net_id(::google::protobuf::uint64 value) {
  set_has_legacy_gameserver_net_id();
  legacy_gameserver_net_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_gameserver_net_id)
}

// optional bytes legacy_signature = 6;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_signature() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_signature() {
  legacy_signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_legacy_signature();
}
const ::std::string& CMsgGCToClientSteamDatagramTicket::legacy_signature() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
  return legacy_signature_.GetNoArena();
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const ::std::string& value) {
  set_has_legacy_signature();
  legacy_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
#if LANG_CXX11
void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(::std::string&& value) {
  set_has_legacy_signature();
  legacy_signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
#endif
void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_legacy_signature();
  legacy_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_signature(const void* value, size_t size) {
  set_has_legacy_signature();
  legacy_signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
}
::std::string* CMsgGCToClientSteamDatagramTicket::mutable_legacy_signature() {
  set_has_legacy_signature();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
  return legacy_signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientSteamDatagramTicket::release_legacy_signature() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
  clear_has_legacy_signature();
  return legacy_signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientSteamDatagramTicket::set_allocated_legacy_signature(::std::string* legacy_signature) {
  if (legacy_signature != NULL) {
    set_has_legacy_signature();
  } else {
    clear_has_legacy_signature();
  }
  legacy_signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), legacy_signature);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_signature)
}

// optional uint32 legacy_app_id = 7;
bool CMsgGCToClientSteamDatagramTicket::has_legacy_app_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_legacy_app_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_legacy_app_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_app_id() {
  legacy_app_id_ = 0u;
  clear_has_legacy_app_id();
}
::google::protobuf::uint32 CMsgGCToClientSteamDatagramTicket::legacy_app_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_app_id)
  return legacy_app_id_;
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_app_id(::google::protobuf::uint32 value) {
  set_has_legacy_app_id();
  legacy_app_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_app_id)
}

// repeated bytes legacy_extra_fields = 8;
int CMsgGCToClientSteamDatagramTicket::legacy_extra_fields_size() const {
  return legacy_extra_fields_.size();
}
void CMsgGCToClientSteamDatagramTicket::clear_legacy_extra_fields() {
  legacy_extra_fields_.Clear();
}
const ::std::string& CMsgGCToClientSteamDatagramTicket::legacy_extra_fields(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_.Get(index);
}
::std::string* CMsgGCToClientSteamDatagramTicket::mutable_legacy_extra_fields(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_.Mutable(index);
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  legacy_extra_fields_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  legacy_extra_fields_.Mutable(index)->assign(std::move(value));
}
#endif
void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  legacy_extra_fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
void CMsgGCToClientSteamDatagramTicket::set_legacy_extra_fields(int index, const void* value, size_t size) {
  legacy_extra_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
::std::string* CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields() {
  // @@protoc_insertion_point(field_add_mutable:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_.Add();
}
void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const ::std::string& value) {
  legacy_extra_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
#if LANG_CXX11
void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(::std::string&& value) {
  legacy_extra_fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
#endif
void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  legacy_extra_fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
void CMsgGCToClientSteamDatagramTicket::add_legacy_extra_fields(const void* value, size_t size) {
  legacy_extra_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
CMsgGCToClientSteamDatagramTicket::legacy_extra_fields() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return legacy_extra_fields_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
CMsgGCToClientSteamDatagramTicket::mutable_legacy_extra_fields() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgGCToClientSteamDatagramTicket.legacy_extra_fields)
  return &legacy_extra_fields_;
}

// optional bytes serialized_ticket = 16;
bool CMsgGCToClientSteamDatagramTicket::has_serialized_ticket() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgGCToClientSteamDatagramTicket::set_has_serialized_ticket() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgGCToClientSteamDatagramTicket::clear_has_serialized_ticket() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgGCToClientSteamDatagramTicket::clear_serialized_ticket() {
  serialized_ticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_serialized_ticket();
}
const ::std::string& CMsgGCToClientSteamDatagramTicket::serialized_ticket() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  return serialized_ticket_.GetNoArena();
}
void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const ::std::string& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
#if LANG_CXX11
void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(::std::string&& value) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
#endif
void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
void CMsgGCToClientSteamDatagramTicket::set_serialized_ticket(const void* value, size_t size) {
  set_has_serialized_ticket();
  serialized_ticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}
::std::string* CMsgGCToClientSteamDatagramTicket::mutable_serialized_ticket() {
  set_has_serialized_ticket();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  return serialized_ticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgGCToClientSteamDatagramTicket::release_serialized_ticket() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
  clear_has_serialized_ticket();
  return serialized_ticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgGCToClientSteamDatagramTicket::set_allocated_serialized_ticket(::std::string* serialized_ticket) {
  if (serialized_ticket != NULL) {
    set_has_serialized_ticket();
  } else {
    clear_has_serialized_ticket();
  }
  serialized_ticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), serialized_ticket);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgGCToClientSteamDatagramTicket.serialized_ticket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
