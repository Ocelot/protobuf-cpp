// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_client_enums.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_client_enums.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {

namespace protobuf_dota_5fclient_5fenums_2eproto {


namespace {

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = { ~0u };
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;
namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_client_enums.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void TableStruct::Shutdown() {
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027dota_client_enums.proto\022\nproto.dota*^\n"
      "\023ETournamentTemplate\022\036\n\032k_ETournamentTem"
      "plate_None\020\000\022\'\n#k_ETournamentTemplate_Au"
      "tomatedWin3\020\001*\250\003\n\024ETournamentGameState\022\""
      "\n\036k_ETournamentGameState_Unknown\020\000\022#\n\037k_"
      "ETournamentGameState_Canceled\020\001\022$\n k_ETo"
      "urnamentGameState_Scheduled\020\002\022!\n\035k_ETour"
      "namentGameState_Active\020\003\022%\n!k_ETournamen"
      "tGameState_RadVictory\020\024\022&\n\"k_ETournament"
      "GameState_DireVictory\020\025\022.\n*k_ETournament"
      "GameState_RadVictoryByForfeit\020\026\022/\n+k_ETo"
      "urnamentGameState_DireVictoryByForfeit\020\027"
      "\022(\n$k_ETournamentGameState_ServerFailure"
      "\020(\022$\n k_ETournamentGameState_NotNeeded\020)"
      "*\347\006\n\024ETournamentTeamState\022\"\n\036k_ETourname"
      "ntTeamState_Unknown\020\000\022 \n\034k_ETournamentTe"
      "amState_Node1\020\001\022#\n\036k_ETournamentTeamStat"
      "e_NodeMax\020\200\010\022&\n!k_ETournamentTeamState_E"
      "liminated\020\263m\022%\n k_ETournamentTeamState_F"
      "orfeited\020\264m\022\'\n\"k_ETournamentTeamState_Fi"
      "nished1st\020\231u\022\'\n\"k_ETournamentTeamState_F"
      "inished2nd\020\232u\022\'\n\"k_ETournamentTeamState_"
      "Finished3rd\020\233u\022\'\n\"k_ETournamentTeamState"
      "_Finished4th\020\234u\022\'\n\"k_ETournamentTeamStat"
      "e_Finished5th\020\235u\022\'\n\"k_ETournamentTeamSta"
      "te_Finished6th\020\236u\022\'\n\"k_ETournamentTeamSt"
      "ate_Finished7th\020\237u\022\'\n\"k_ETournamentTeamS"
      "tate_Finished8th\020\240u\022\'\n\"k_ETournamentTeam"
      "State_Finished9th\020\241u\022(\n#k_ETournamentTea"
      "mState_Finished10th\020\242u\022(\n#k_ETournamentT"
      "eamState_Finished11th\020\243u\022(\n#k_ETournamen"
      "tTeamState_Finished12th\020\244u\022(\n#k_ETournam"
      "entTeamState_Finished13th\020\245u\022(\n#k_ETourn"
      "amentTeamState_Finished14th\020\246u\022(\n#k_ETou"
      "rnamentTeamState_Finished15th\020\247u\022(\n#k_ET"
      "ournamentTeamState_Finished16th\020\250u*\354\003\n\020E"
      "TournamentState\022\036\n\032k_ETournamentState_Un"
      "known\020\000\022&\n\"k_ETournamentState_CanceledBy"
      "Admin\020\001\022 \n\034k_ETournamentState_Completed\020"
      "\002\022\035\n\031k_ETournamentState_Merged\020\003\022$\n k_ET"
      "ournamentState_ServerFailure\020\004\022$\n k_ETou"
      "rnamentState_TeamAbandoned\020\005\022)\n%k_ETourn"
      "amentState_TeamTimeoutForfeit\020\006\022(\n$k_ETo"
      "urnamentState_TeamTimeoutRefund\020\007\0222\n.k_E"
      "TournamentState_ServerFailureGrantedVict"
      "ory\020\010\0220\n,k_ETournamentState_TeamTimeoutG"
      "rantedVictory\020\t\022!\n\035k_ETournamentState_In"
      "Progress\020d\022%\n!k_ETournamentState_Waiting"
      "ToMerge\020e*\314\004\n\024ETournamentNodeState\022\"\n\036k_"
      "ETournamentNodeState_Unknown\020\000\022#\n\037k_ETou"
      "rnamentNodeState_Canceled\020\001\022.\n*k_ETourna"
      "mentNodeState_TeamsNotYetAssigned\020\002\022)\n%k"
      "_ETournamentNodeState_InBetweenGames\020\003\022)"
      "\n%k_ETournamentNodeState_GameInProgress\020"
      "\004\022 \n\034k_ETournamentNodeState_A_Won\020\005\022 \n\034k"
      "_ETournamentNodeState_B_Won\020\006\022)\n%k_ETour"
      "namentNodeState_A_WonByForfeit\020\007\022)\n%k_ET"
      "ournamentNodeState_B_WonByForfeit\020\010\022 \n\034k"
      "_ETournamentNodeState_A_Bye\020\t\022&\n\"k_ETour"
      "namentNodeState_A_Abandoned\020\n\022(\n$k_ETour"
      "namentNodeState_ServerFailure\020\013\022+\n\'k_ETo"
      "urnamentNodeState_A_TimeoutForfeit\020\014\022*\n&"
      "k_ETournamentNodeState_A_TimeoutRefund\020\r"
      "*\307\003\n\025EDOTAGroupMergeResult\022\036\n\032k_EDOTAGro"
      "upMergeResult_OK\020\000\022*\n&k_EDOTAGroupMergeR"
      "esult_FAILED_GENERIC\020\001\022&\n\"k_EDOTAGroupMe"
      "rgeResult_NOT_LEADER\020\002\022,\n(k_EDOTAGroupMe"
      "rgeResult_TOO_MANY_PLAYERS\020\003\022,\n(k_EDOTAG"
      "roupMergeResult_TOO_MANY_COACHES\020\004\022+\n\'k_"
      "EDOTAGroupMergeResult_ENGINE_MISMATCH\020\005\022"
      ")\n%k_EDOTAGroupMergeResult_NO_SUCH_GROUP"
      "\020\006\0220\n,k_EDOTAGroupMergeResult_OTHER_GROU"
      "P_NOT_OPEN\020\007\022+\n\'k_EDOTAGroupMergeResult_"
      "ALREADY_INVITED\020\010\022\'\n#k_EDOTAGroupMergeRe"
      "sult_NOT_INVITED\020\tB\005H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_client_enums.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fclient_5fenums_2eproto

const ::google::protobuf::EnumDescriptor* ETournamentTemplate_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[0];
}
bool ETournamentTemplate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentGameState_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[1];
}
bool ETournamentGameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 20:
    case 21:
    case 22:
    case 23:
    case 40:
    case 41:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentTeamState_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[2];
}
bool ETournamentTeamState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 1024:
    case 14003:
    case 14004:
    case 15001:
    case 15002:
    case 15003:
    case 15004:
    case 15005:
    case 15006:
    case 15007:
    case 15008:
    case 15009:
    case 15010:
    case 15011:
    case 15012:
    case 15013:
    case 15014:
    case 15015:
    case 15016:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentState_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[3];
}
bool ETournamentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETournamentNodeState_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[4];
}
bool ETournamentNodeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOTAGroupMergeResult_descriptor() {
  protobuf_dota_5fclient_5fenums_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fclient_5fenums_2eproto::file_level_enum_descriptors[5];
}
bool EDOTAGroupMergeResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
