// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_gcmessages_client_tournament.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_PhaseGroup> {
} _CMsgDOTATournamentInfo_PhaseGroup_default_instance_;
class CMsgDOTATournamentInfo_PhaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_Phase> {
} _CMsgDOTATournamentInfo_Phase_default_instance_;
class CMsgDOTATournamentInfo_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_Team> {
} _CMsgDOTATournamentInfo_Team_default_instance_;
class CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_UpcomingMatch> {
} _CMsgDOTATournamentInfo_UpcomingMatch_default_instance_;
class CMsgDOTATournamentInfo_NewsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_News> {
} _CMsgDOTATournamentInfo_News_default_instance_;
class CMsgDOTATournamentInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo> {
} _CMsgDOTATournamentInfo_default_instance_;
class CMsgRequestWeekendTourneyScheduleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestWeekendTourneySchedule> {
} _CMsgRequestWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneySchedule_Division> {
} _CMsgWeekendTourneySchedule_Division_default_instance_;
class CMsgWeekendTourneyScheduleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneySchedule> {
} _CMsgWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneyOptsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneyOpts> {
} _CMsgWeekendTourneyOpts_default_instance_;
class CMsgWeekendTourneyLeaveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneyLeave> {
} _CMsgWeekendTourneyLeave_default_instance_;
class CMsgDOTATournament_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Team> {
} _CMsgDOTATournament_Team_default_instance_;
class CMsgDOTATournament_GameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Game> {
} _CMsgDOTATournament_Game_default_instance_;
class CMsgDOTATournament_NodeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Node> {
} _CMsgDOTATournament_Node_default_instance_;
class CMsgDOTATournamentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament> {
} _CMsgDOTATournament_default_instance_;
class CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange_GameChange> {
} _CMsgDOTATournamentStateChange_GameChange_default_instance_;
class CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange_TeamChange> {
} _CMsgDOTATournamentStateChange_TeamChange_default_instance_;
class CMsgDOTATournamentStateChangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange> {
} _CMsgDOTATournamentStateChange_default_instance_;
class CMsgDOTATournamentRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentRequest> {
} _CMsgDOTATournamentRequest_default_instance_;
class CMsgDOTATournamentResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentResponse> {
} _CMsgDOTATournamentResponse_default_instance_;
class CMsgDOTAClearTournamentGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAClearTournamentGame> {
} _CMsgDOTAClearTournamentGame_default_instance_;
class CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerSkillLevelStats> {
} _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerStats> {
} _CMsgDOTAWeekendTourneyPlayerStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerStatsRequest> {
} _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistoryRequest> {
} _CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistory_Tournament> {
} _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistory> {
} _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails_Tier> {
} _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails_Division> {
} _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails> {
} _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_;

namespace protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_PhaseGroup, group_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, phase_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, phase_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, type_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, min_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, max_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Phase, group_list_),
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, team_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_Team, eliminated_),
  2,
  0,
  1,
  4,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, series_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, bo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, stage_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, winner_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, loser_stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_opponent_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_opponent_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, phase_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team1_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, team2_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_UpcomingMatch, phase_id_),
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  14,
  15,
  16,
  12,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, link_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo_News, timestamp_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, league_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, phase_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, teams_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, upcoming_matches_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentInfo, news_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestWeekendTourneySchedule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgRequestWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, division_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_close_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, time_window_open_next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, trophy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule_Division, free_weekend_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneySchedule, divisions_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, participating_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, buyin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, match_groups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, pickup_team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyOpts, pickup_team_logo_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyLeave, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgWeekendTourneyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, node_or_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, player_buyin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, player_skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, match_group_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_base_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_ui_logo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Team, team_date_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  7,
  3,
  0,
  4,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, node_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, team_a_good_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Game, start_time_),
  1,
  0,
  3,
  2,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_idx_a_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, team_idx_b_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament_Node, node_state_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, tournament_template_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, state_seq_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, season_trophy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, games_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournament, nodes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_GameChange, new_state_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, team_gid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, new_node_or_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange_TeamChange, old_node_or_state_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, new_tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, event_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, new_tournament_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, game_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, team_changes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, merged_tournament_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentStateChange, state_seq_num_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentRequest, client_tournament_gid_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTATournamentResponse, tournament_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAClearTournamentGame, game_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, skill_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_lost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_won_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_unusual_champ_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, total_games_won_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerSkillLevelStats, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, season_trophy_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, skill_levels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStats, current_tier_),
  0,
  1,
  ~0u,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerStatsRequest, season_trophy_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistoryRequest, season_trophy_id_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory_Tournament, season_trophy_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyPlayerHistory, tournaments_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, winning_teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, division_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, schedule_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails_Division, tiers_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMsgDOTAWeekendTourneyParticipationDetails, divisions_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(CMsgDOTATournamentInfo_PhaseGroup)},
  { 9, 21, sizeof(CMsgDOTATournamentInfo_Phase)},
  { 28, 38, sizeof(CMsgDOTATournamentInfo_Team)},
  { 43, 74, sizeof(CMsgDOTATournamentInfo_UpcomingMatch)},
  { 100, 109, sizeof(CMsgDOTATournamentInfo_News)},
  { 113, 123, sizeof(CMsgDOTATournamentInfo)},
  { 128, 133, sizeof(CMsgRequestWeekendTourneySchedule)},
  { 133, 144, sizeof(CMsgWeekendTourneySchedule_Division)},
  { 150, 156, sizeof(CMsgWeekendTourneySchedule)},
  { 157, 170, sizeof(CMsgWeekendTourneyOpts)},
  { 178, 183, sizeof(CMsgWeekendTourneyLeave)},
  { 183, 199, sizeof(CMsgDOTATournament_Team)},
  { 210, 221, sizeof(CMsgDOTATournament_Game)},
  { 227, 236, sizeof(CMsgDOTATournament_Node)},
  { 240, 256, sizeof(CMsgDOTATournament)},
  { 267, 274, sizeof(CMsgDOTATournamentStateChange_GameChange)},
  { 276, 284, sizeof(CMsgDOTATournamentStateChange_TeamChange)},
  { 287, 299, sizeof(CMsgDOTATournamentStateChange)},
  { 306, 313, sizeof(CMsgDOTATournamentRequest)},
  { 315, 322, sizeof(CMsgDOTATournamentResponse)},
  { 324, 331, sizeof(CMsgDOTAClearTournamentGame)},
  { 333, 348, sizeof(CMsgDOTAWeekendTourneyPlayerSkillLevelStats)},
  { 358, 367, sizeof(CMsgDOTAWeekendTourneyPlayerStats)},
  { 371, 378, sizeof(CMsgDOTAWeekendTourneyPlayerStatsRequest)},
  { 380, 387, sizeof(CMsgDOTAWeekendTourneyPlayerHistoryRequest)},
  { 389, 403, sizeof(CMsgDOTAWeekendTourneyPlayerHistory_Tournament)},
  { 412, 419, sizeof(CMsgDOTAWeekendTourneyPlayerHistory)},
  { 421, 434, sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Tier)},
  { 442, 450, sizeof(CMsgDOTAWeekendTourneyParticipationDetails_Division)},
  { 453, 459, sizeof(CMsgDOTAWeekendTourneyParticipationDetails)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_PhaseGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_Phase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_UpcomingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_News_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgRequestWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWeekendTourneySchedule_Division_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWeekendTourneyOpts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgWeekendTourneyLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournament_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournament_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournament_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournament_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentStateChange_GameChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentStateChange_TeamChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentStateChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTATournamentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAClearTournamentGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyPlayerHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CMsgDOTAWeekendTourneyParticipationDetails_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_gcmessages_client_tournament.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 30);
}

}  // namespace

void TableStruct::Shutdown() {
  _CMsgDOTATournamentInfo_PhaseGroup_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CMsgDOTATournamentInfo_Phase_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CMsgDOTATournamentInfo_Team_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CMsgDOTATournamentInfo_UpcomingMatch_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CMsgDOTATournamentInfo_News_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CMsgDOTATournamentInfo_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CMsgRequestWeekendTourneySchedule_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CMsgWeekendTourneySchedule_Division_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CMsgWeekendTourneySchedule_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CMsgWeekendTourneyOpts_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CMsgWeekendTourneyLeave_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CMsgDOTATournament_Team_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _CMsgDOTATournament_Game_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _CMsgDOTATournament_Node_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _CMsgDOTATournament_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _CMsgDOTATournamentStateChange_GameChange_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _CMsgDOTATournamentStateChange_TeamChange_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _CMsgDOTATournamentStateChange_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _CMsgDOTATournamentRequest_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _CMsgDOTATournamentResponse_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
  _CMsgDOTAClearTournamentGame_default_instance_.Shutdown();
  delete file_level_metadata[20].reflection;
  _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_.Shutdown();
  delete file_level_metadata[21].reflection;
  _CMsgDOTAWeekendTourneyPlayerStats_default_instance_.Shutdown();
  delete file_level_metadata[22].reflection;
  _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_.Shutdown();
  delete file_level_metadata[23].reflection;
  _CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_.Shutdown();
  delete file_level_metadata[24].reflection;
  _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_.Shutdown();
  delete file_level_metadata[25].reflection;
  _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_.Shutdown();
  delete file_level_metadata[26].reflection;
  _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_.Shutdown();
  delete file_level_metadata[27].reflection;
  _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_.Shutdown();
  delete file_level_metadata[28].reflection;
  _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_.Shutdown();
  delete file_level_metadata[29].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_dota_5fclient_5fenums_2eproto::InitDefaults();
  _CMsgDOTATournamentInfo_PhaseGroup_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentInfo_Phase_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentInfo_Team_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentInfo_UpcomingMatch_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentInfo_News_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentInfo_default_instance_.DefaultConstruct();
  _CMsgRequestWeekendTourneySchedule_default_instance_.DefaultConstruct();
  _CMsgWeekendTourneySchedule_Division_default_instance_.DefaultConstruct();
  _CMsgWeekendTourneySchedule_default_instance_.DefaultConstruct();
  _CMsgWeekendTourneyOpts_default_instance_.DefaultConstruct();
  _CMsgWeekendTourneyLeave_default_instance_.DefaultConstruct();
  _CMsgDOTATournament_Team_default_instance_.DefaultConstruct();
  _CMsgDOTATournament_Game_default_instance_.DefaultConstruct();
  _CMsgDOTATournament_Node_default_instance_.DefaultConstruct();
  _CMsgDOTATournament_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentStateChange_GameChange_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentStateChange_TeamChange_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentStateChange_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentRequest_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentResponse_default_instance_.DefaultConstruct();
  _CMsgDOTAClearTournamentGame_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerStats_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_.DefaultConstruct();
  _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_.DefaultConstruct();
  _CMsgDOTATournamentResponse_default_instance_.get_mutable()->tournament_ = const_cast< ::proto::dota::CMsgDOTATournament*>(
      ::proto::dota::CMsgDOTATournament::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\'dota_gcmessages_client_tournament.prot"
      "o\022\nproto.dota\032\027dota_client_enums.proto\"\357"
      "\n\n\026CMsgDOTATournamentInfo\022\021\n\tleague_id\030\001"
      " \001(\r\022<\n\nphase_list\030\002 \003(\0132(.proto.dota.CM"
      "sgDOTATournamentInfo.Phase\022;\n\nteams_list"
      "\030\003 \003(\0132\'.proto.dota.CMsgDOTATournamentIn"
      "fo.Team\022O\n\025upcoming_matches_list\030\004 \003(\01320"
      ".proto.dota.CMsgDOTATournamentInfo.Upcom"
      "ingMatch\022:\n\tnews_list\030\005 \003(\0132\'.proto.dota"
      ".CMsgDOTATournamentInfo.News\0322\n\nPhaseGro"
      "up\022\020\n\010group_id\030\001 \001(\r\022\022\n\ngroup_name\030\002 \001(\t"
      "\032\305\001\n\005Phase\022\020\n\010phase_id\030\001 \001(\r\022\022\n\nphase_na"
      "me\030\002 \001(\t\022\017\n\007type_id\030\003 \001(\r\022\022\n\niterations\030"
      "\004 \001(\r\022\026\n\016min_start_time\030\005 \001(\r\022\026\n\016max_sta"
      "rt_time\030\006 \001(\r\022A\n\ngroup_list\030\007 \003(\0132-.prot"
      "o.dota.CMsgDOTATournamentInfo.PhaseGroup"
      "\032Y\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
      "\013\n\003tag\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\004\022\022\n\nelimi"
      "nated\030\005 \001(\010\032\233\005\n\rUpcomingMatch\022\021\n\tseries_"
      "id\030\001 \001(\r\022\020\n\010team1_id\030\002 \001(\r\022\020\n\010team2_id\030\003"
      " \001(\r\022\n\n\002bo\030\004 \001(\r\022\022\n\nstage_name\030\005 \001(\t\022\022\n\n"
      "start_time\030\006 \001(\r\022\024\n\014winner_stage\030\007 \001(\t\022\023"
      "\n\013loser_stage\030\010 \001(\t\022\021\n\tteam1_tag\030\t \001(\t\022\021"
      "\n\tteam2_tag\030\n \001(\t\022\037\n\027team1_prev_opponent"
      "_tag\030\013 \001(\t\022\037\n\027team2_prev_opponent_tag\030\014 "
      "\001(\t\022\022\n\nteam1_logo\030\r \001(\004\022\022\n\nteam2_logo\030\016 "
      "\001(\004\022 \n\030team1_prev_opponent_logo\030\017 \001(\004\022 \n"
      "\030team2_prev_opponent_logo\030\020 \001(\004\022\036\n\026team1"
      "_prev_opponent_id\030\021 \001(\r\022\036\n\026team2_prev_op"
      "ponent_id\030\022 \001(\r\022\036\n\026team1_prev_match_scor"
      "e\030\023 \001(\r\022\'\n\037team1_prev_match_opponent_sco"
      "re\030\024 \001(\r\022\036\n\026team2_prev_match_score\030\025 \001(\r"
      "\022\'\n\037team2_prev_match_opponent_score\030\026 \001("
      "\r\022\022\n\nphase_type\030\027 \001(\r\022\023\n\013team1_score\030\030 \001"
      "(\r\022\023\n\013team2_score\030\031 \001(\r\022\020\n\010phase_id\030\032 \001("
      "\r\032E\n\004News\022\014\n\004link\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\r"
      "\n\005image\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\r\"#\n!CMsg"
      "RequestWeekendTourneySchedule\"\201\002\n\032CMsgWe"
      "ekendTourneySchedule\022B\n\tdivisions\030\001 \003(\0132"
      "/.proto.dota.CMsgWeekendTourneySchedule."
      "Division\032\236\001\n\010Division\022\025\n\rdivision_code\030\001"
      " \001(\r\022\030\n\020time_window_open\030\002 \001(\r\022\031\n\021time_w"
      "indow_close\030\003 \001(\r\022\035\n\025time_window_open_ne"
      "xt\030\004 \001(\r\022\021\n\ttrophy_id\030\005 \001(\r\022\024\n\014free_week"
      "end\030\006 \001(\010\"\303\001\n\026CMsgWeekendTourneyOpts\022\025\n\r"
      "participating\030\001 \001(\010\022\023\n\013division_id\030\002 \001(\r"
      "\022\r\n\005buyin\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\024\n\014"
      "match_groups\030\005 \001(\r\022\017\n\007team_id\030\006 \001(\r\022\030\n\020p"
      "ickup_team_name\030\007 \001(\t\022\030\n\020pickup_team_log"
      "o\030\010 \001(\004\"\031\n\027CMsgWeekendTourneyLeave\"\255\010\n\022C"
      "MsgDOTATournament\022\025\n\rtournament_id\030\001 \001(\r"
      "\022\023\n\013division_id\030\002 \001(\r\022\025\n\rschedule_time\030\003"
      " \001(\r\022\023\n\013skill_level\030\004 \001(\r\022X\n\023tournament_"
      "template\030\005 \001(\0162\037.proto.dota.ETournamentT"
      "emplate:\032k_ETournamentTemplate_None\022G\n\005s"
      "tate\030\006 \001(\0162\034.proto.dota.ETournamentState"
      ":\032k_ETournamentState_Unknown\022\025\n\rstate_se"
      "q_num\030\n \001(\r\022\030\n\020season_trophy_id\030\013 \001(\r\0222\n"
      "\005teams\030\007 \003(\0132#.proto.dota.CMsgDOTATourna"
      "ment.Team\0222\n\005games\030\010 \003(\0132#.proto.dota.CM"
      "sgDOTATournament.Game\0222\n\005nodes\030\t \003(\0132#.p"
      "roto.dota.CMsgDOTATournament.Node\032\375\001\n\004Te"
      "am\022\020\n\010team_gid\030\001 \001(\006\022\025\n\rnode_or_state\030\002 "
      "\001(\r\022\023\n\007players\030\003 \003(\rB\002\020\001\022\030\n\014player_buyin"
      "\030\t \003(\rB\002\020\001\022\036\n\022player_skill_level\030\n \003(\rB\002"
      "\020\001\022\030\n\020match_group_mask\030\014 \001(\r\022\017\n\007team_id\030"
      "\004 \001(\r\022\021\n\tteam_name\030\005 \001(\t\022\026\n\016team_base_lo"
      "go\030\007 \001(\004\022\024\n\014team_ui_logo\030\010 \001(\004\022\021\n\tteam_d"
      "ate\030\013 \001(\r\032\266\001\n\004Game\022\020\n\010node_idx\030\001 \001(\r\022\020\n\010"
      "lobby_id\030\002 \001(\006\022\020\n\010match_id\030\003 \001(\004\022\023\n\013team"
      "_a_good\030\004 \001(\010\022O\n\005state\030\005 \001(\0162 .proto.dot"
      "a.ETournamentGameState:\036k_ETournamentGam"
      "eState_Unknown\022\022\n\nstart_time\030\006 \001(\r\032\225\001\n\004N"
      "ode\022\017\n\007node_id\030\001 \001(\r\022\022\n\nteam_idx_a\030\002 \001(\r"
      "\022\022\n\nteam_idx_b\030\003 \001(\r\022T\n\nnode_state\030\004 \001(\016"
      "2 .proto.dota.ETournamentNodeState:\036k_ET"
      "ournamentNodeState_Unknown\"\365\004\n\035CMsgDOTAT"
      "ournamentStateChange\022\031\n\021new_tournament_i"
      "d\030\001 \001(\r\022D\n\005event\030\002 \001(\0162\034.proto.dota.ETou"
      "rnamentEvent:\027k_ETournamentEvent_None\022V\n"
      "\024new_tournament_state\030\003 \001(\0162\034.proto.dota"
      ".ETournamentState:\032k_ETournamentState_Un"
      "known\022J\n\014game_changes\030\004 \003(\01324.proto.dota"
      ".CMsgDOTATournamentStateChange.GameChang"
      "e\022J\n\014team_changes\030\005 \003(\01324.proto.dota.CMs"
      "gDOTATournamentStateChange.TeamChange\022!\n"
      "\025merged_tournament_ids\030\006 \003(\rB\002\020\001\022\025\n\rstat"
      "e_seq_num\030\007 \001(\r\032s\n\nGameChange\022\020\n\010match_i"
      "d\030\001 \001(\004\022S\n\tnew_state\030\002 \001(\0162 .proto.dota."
      "ETournamentGameState:\036k_ETournamentGameS"
      "tate_Unknown\032T\n\nTeamChange\022\020\n\010team_gid\030\001"
      " \001(\004\022\031\n\021new_node_or_state\030\002 \001(\r\022\031\n\021old_n"
      "ode_or_state\030\003 \001(\r\"Q\n\031CMsgDOTATournament"
      "Request\022\025\n\rtournament_id\030\001 \001(\r\022\035\n\025client"
      "_tournament_gid\030\002 \001(\004\"c\n\032CMsgDOTATournam"
      "entResponse\022\021\n\006result\030\001 \001(\r:\0012\0222\n\ntourna"
      "ment\030\002 \001(\0132\036.proto.dota.CMsgDOTATourname"
      "nt\"E\n\033CMsgDOTAClearTournamentGame\022\025\n\rtou"
      "rnament_id\030\001 \001(\r\022\017\n\007game_id\030\002 \001(\r\"\222\002\n+CM"
      "sgDOTAWeekendTourneyPlayerSkillLevelStat"
      "s\022\023\n\013skill_level\030\001 \001(\r\022\023\n\013times_won_0\030\002 "
      "\001(\r\022\023\n\013times_won_1\030\003 \001(\r\022\023\n\013times_won_2\030"
      "\004 \001(\r\022\023\n\013times_won_3\030\005 \001(\r\022\032\n\022times_bye_"
      "and_lost\030\006 \001(\r\022\031\n\021times_bye_and_won\030\007 \001("
      "\r\022\033\n\023times_unusual_champ\030\n \001(\r\022\027\n\017total_"
      "games_won\030\010 \001(\r\022\r\n\005score\030\t \001(\r\"\266\001\n!CMsgD"
      "OTAWeekendTourneyPlayerStats\022\022\n\naccount_"
      "id\030\001 \001(\r\022\030\n\020season_trophy_id\030\002 \001(\r\022M\n\014sk"
      "ill_levels\030\003 \003(\01327.proto.dota.CMsgDOTAWe"
      "ekendTourneyPlayerSkillLevelStats\022\024\n\014cur"
      "rent_tier\030\004 \001(\r\"X\n(CMsgDOTAWeekendTourne"
      "yPlayerStatsRequest\022\022\n\naccount_id\030\001 \001(\r\022"
      "\030\n\020season_trophy_id\030\002 \001(\r\"Z\n*CMsgDOTAWee"
      "kendTourneyPlayerHistoryRequest\022\022\n\naccou"
      "nt_id\030\001 \001(\r\022\030\n\020season_trophy_id\030\002 \001(\r\"\327\002"
      "\n#CMsgDOTAWeekendTourneyPlayerHistory\022\022\n"
      "\naccount_id\030\001 \001(\r\022O\n\013tournaments\030\003 \003(\0132:"
      ".proto.dota.CMsgDOTAWeekendTourneyPlayer"
      "History.Tournament\032\312\001\n\nTournament\022\025\n\rtou"
      "rnament_id\030\001 \001(\r\022\022\n\nstart_time\030\002 \001(\r\022\027\n\017"
      "tournament_tier\030\003 \001(\r\022\017\n\007team_id\030\004 \001(\r\022\021"
      "\n\tteam_date\030\005 \001(\r\022\023\n\013team_result\030\006 \001(\r\022\022"
      "\n\naccount_id\030\007 \003(\r\022\021\n\tteam_name\030\010 \001(\t\022\030\n"
      "\020season_trophy_id\030\t \001(\r\"\273\003\n*CMsgDOTAWeek"
      "endTourneyParticipationDetails\022R\n\tdivisi"
      "ons\030\001 \003(\0132\?.proto.dota.CMsgDOTAWeekendTo"
      "urneyParticipationDetails.Division\032\263\001\n\004T"
      "ier\022\014\n\004tier\030\001 \001(\r\022\017\n\007players\030\002 \001(\r\022\r\n\005te"
      "ams\030\003 \001(\r\022\025\n\rwinning_teams\030\004 \001(\r\022\030\n\020play"
      "ers_streak_2\030\005 \001(\r\022\030\n\020players_streak_3\030\006"
      " \001(\r\022\030\n\020players_streak_4\030\007 \001(\r\022\030\n\020player"
      "s_streak_5\030\010 \001(\r\032\202\001\n\010Division\022\023\n\013divisio"
      "n_id\030\001 \001(\r\022\025\n\rschedule_time\030\002 \001(\r\022J\n\005tie"
      "rs\030\003 \003(\0132;.proto.dota.CMsgDOTAWeekendTou"
      "rneyParticipationDetails.Tier*\266\004\n\020ETourn"
      "amentEvent\022\033\n\027k_ETournamentEvent_None\020\000\022"
      "(\n$k_ETournamentEvent_TournamentCreated\020"
      "\001\022(\n$k_ETournamentEvent_TournamentsMerge"
      "d\020\002\022\"\n\036k_ETournamentEvent_GameOutcome\020\003\022"
      "#\n\037k_ETournamentEvent_TeamGivenBye\020\004\0220\n,"
      "k_ETournamentEvent_TournamentCanceledByA"
      "dmin\020\005\022$\n k_ETournamentEvent_TeamAbandon"
      "ed\020\006\022+\n\'k_ETournamentEvent_ScheduledGame"
      "Started\020\007\022\037\n\033k_ETournamentEvent_Canceled"
      "\020\010\022\?\n;k_ETournamentEvent_TeamParticipati"
      "onTimedOut_EntryFeeRefund\020\t\022@\n<k_ETourna"
      "mentEvent_TeamParticipationTimedOut_Entr"
      "yFeeForfeit\020\n\022\?\n;k_ETournamentEvent_Team"
      "ParticipationTimedOut_GrantedVictory\020\013B\005"
      "H\001\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5965);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_gcmessages_client_tournament.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_dota_5fclient_5fenums_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto

const ::google::protobuf::EnumDescriptor* ETournamentEvent_descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_enum_descriptors[0];
}
bool ETournamentEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupIdFieldNumber;
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}
CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(const CMsgDOTATournamentInfo_PhaseGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_name()) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedCtor() {
  _cached_size_ = 0;
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
}

CMsgDOTATournamentInfo_PhaseGroup::~CMsgDOTATournamentInfo_PhaseGroup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  SharedDtor();
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_PhaseGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_PhaseGroup::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo_PhaseGroup& CMsgDOTATournamentInfo_PhaseGroup::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_PhaseGroup::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo_PhaseGroup* n = new CMsgDOTATournamentInfo_PhaseGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo_PhaseGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  if (has_group_name()) {
    GOOGLE_DCHECK(!group_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*group_name_.UnsafeRawStringPointer())->clear();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo_PhaseGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_group_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_PhaseGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_PhaseGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return target;
}

size_t CMsgDOTATournamentInfo_PhaseGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string group_name = 2;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_PhaseGroup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo_PhaseGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_name();
      group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_PhaseGroup::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_PhaseGroup::Swap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_PhaseGroup::InternalSwap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  group_name_.Swap(&other->group_name_);
  std::swap(group_id_, other->group_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_PhaseGroup::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo_PhaseGroup

// optional uint32 group_id = 1;
bool CMsgDOTATournamentInfo_PhaseGroup::has_group_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentInfo_PhaseGroup::set_has_group_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentInfo_PhaseGroup::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentInfo_PhaseGroup::clear_group_id() {
  group_id_ = 0u;
  clear_has_group_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_PhaseGroup::group_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_id)
  return group_id_;
}
void CMsgDOTATournamentInfo_PhaseGroup::set_group_id(::google::protobuf::uint32 value) {
  set_has_group_id();
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_id)
}

// optional string group_name = 2;
bool CMsgDOTATournamentInfo_PhaseGroup::has_group_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo_PhaseGroup::set_has_group_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo_PhaseGroup::clear_has_group_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo_PhaseGroup::clear_group_name() {
  group_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_group_name();
}
const ::std::string& CMsgDOTATournamentInfo_PhaseGroup::group_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
  return group_name_.GetNoArena();
}
void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const ::std::string& value) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(::std::string&& value) {
  set_has_group_name();
  group_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
#endif
void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
void CMsgDOTATournamentInfo_PhaseGroup::set_group_name(const char* value, size_t size) {
  set_has_group_name();
  group_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
}
::std::string* CMsgDOTATournamentInfo_PhaseGroup::mutable_group_name() {
  set_has_group_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
  return group_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_PhaseGroup::release_group_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
  clear_has_group_name();
  return group_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_PhaseGroup::set_allocated_group_name(::std::string* group_name) {
  if (group_name != NULL) {
    set_has_group_name();
  } else {
    clear_has_group_name();
  }
  group_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_Phase::kPhaseIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kPhaseNameFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kTypeIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kIterationsFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMinStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMaxStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kGroupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.Phase)
}
CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(const CMsgDOTATournamentInfo_Phase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      group_list_(from.group_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phase_name()) {
    phase_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_name_);
  }
  ::memcpy(&phase_id_, &from.phase_id_,
    reinterpret_cast<char*>(&max_start_time_) -
    reinterpret_cast<char*>(&phase_id_) + sizeof(max_start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.Phase)
}

void CMsgDOTATournamentInfo_Phase::SharedCtor() {
  _cached_size_ = 0;
  phase_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&phase_id_, 0, reinterpret_cast<char*>(&max_start_time_) -
    reinterpret_cast<char*>(&phase_id_) + sizeof(max_start_time_));
}

CMsgDOTATournamentInfo_Phase::~CMsgDOTATournamentInfo_Phase() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.Phase)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Phase::SharedDtor() {
  phase_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Phase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Phase::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo_Phase& CMsgDOTATournamentInfo_Phase::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo_Phase::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo_Phase* n = new CMsgDOTATournamentInfo_Phase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  group_list_.Clear();
  if (has_phase_name()) {
    GOOGLE_DCHECK(!phase_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*phase_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 62u) {
    ::memset(&phase_id_, 0, reinterpret_cast<char*>(&max_start_time_) -
      reinterpret_cast<char*>(&phase_id_) + sizeof(max_start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo_Phase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_phase_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phase_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phase_name().data(), this->phase_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_type_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 iterations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_min_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_max_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.Phase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.Phase)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_Phase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_id(), output);
  }

  // optional string phase_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), this->phase_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phase_name(), output);
  }

  // optional uint32 type_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type_id(), output);
  }

  // optional uint32 iterations = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iterations(), output);
  }

  // optional uint32 min_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_start_time(), output);
  }

  // optional uint32 max_start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_start_time(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (unsigned int i = 0, n = this->group_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->group_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.Phase)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Phase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_id(), target);
  }

  // optional string phase_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), this->phase_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phase_name(), target);
  }

  // optional uint32 type_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type_id(), target);
  }

  // optional uint32 iterations = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iterations(), target);
  }

  // optional uint32 min_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_start_time(), target);
  }

  // optional uint32 max_start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_start_time(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (unsigned int i = 0, n = this->group_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->group_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.Phase)
  return target;
}

size_t CMsgDOTATournamentInfo_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  {
    unsigned int count = this->group_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group_list(i));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional string phase_name = 2;
    if (has_phase_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phase_name());
    }

    // optional uint32 phase_id = 1;
    if (has_phase_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

    // optional uint32 type_id = 3;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // optional uint32 iterations = 4;
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iterations());
    }

    // optional uint32 min_start_time = 5;
    if (has_min_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_start_time());
    }

    // optional uint32 max_start_time = 6;
    if (has_max_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Phase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo_Phase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.Phase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.Phase)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_list_.MergeFrom(from.group_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_phase_name();
      phase_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      phase_id_ = from.phase_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      iterations_ = from.iterations_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_start_time_ = from.min_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_start_time_ = from.max_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Phase::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Phase::Swap(CMsgDOTATournamentInfo_Phase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_Phase::InternalSwap(CMsgDOTATournamentInfo_Phase* other) {
  group_list_.InternalSwap(&other->group_list_);
  phase_name_.Swap(&other->phase_name_);
  std::swap(phase_id_, other->phase_id_);
  std::swap(type_id_, other->type_id_);
  std::swap(iterations_, other->iterations_);
  std::swap(min_start_time_, other->min_start_time_);
  std::swap(max_start_time_, other->max_start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Phase::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo_Phase

// optional uint32 phase_id = 1;
bool CMsgDOTATournamentInfo_Phase::has_phase_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_phase_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_phase_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentInfo_Phase::clear_phase_id() {
  phase_id_ = 0u;
  clear_has_phase_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.phase_id)
  return phase_id_;
}
void CMsgDOTATournamentInfo_Phase::set_phase_id(::google::protobuf::uint32 value) {
  set_has_phase_id();
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.phase_id)
}

// optional string phase_name = 2;
bool CMsgDOTATournamentInfo_Phase::has_phase_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_phase_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_phase_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo_Phase::clear_phase_name() {
  phase_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_phase_name();
}
const ::std::string& CMsgDOTATournamentInfo_Phase::phase_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
  return phase_name_.GetNoArena();
}
void CMsgDOTATournamentInfo_Phase::set_phase_name(const ::std::string& value) {
  set_has_phase_name();
  phase_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_Phase::set_phase_name(::std::string&& value) {
  set_has_phase_name();
  phase_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
}
#endif
void CMsgDOTATournamentInfo_Phase::set_phase_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_phase_name();
  phase_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
}
void CMsgDOTATournamentInfo_Phase::set_phase_name(const char* value, size_t size) {
  set_has_phase_name();
  phase_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
}
::std::string* CMsgDOTATournamentInfo_Phase::mutable_phase_name() {
  set_has_phase_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
  return phase_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_Phase::release_phase_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
  clear_has_phase_name();
  return phase_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_Phase::set_allocated_phase_name(::std::string* phase_name) {
  if (phase_name != NULL) {
    set_has_phase_name();
  } else {
    clear_has_phase_name();
  }
  phase_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phase_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.Phase.phase_name)
}

// optional uint32 type_id = 3;
bool CMsgDOTATournamentInfo_Phase::has_type_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_type_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_type_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentInfo_Phase::clear_type_id() {
  type_id_ = 0u;
  clear_has_type_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::type_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.type_id)
  return type_id_;
}
void CMsgDOTATournamentInfo_Phase::set_type_id(::google::protobuf::uint32 value) {
  set_has_type_id();
  type_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.type_id)
}

// optional uint32 iterations = 4;
bool CMsgDOTATournamentInfo_Phase::has_iterations() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_iterations() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_iterations() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournamentInfo_Phase::clear_iterations() {
  iterations_ = 0u;
  clear_has_iterations();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::iterations() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.iterations)
  return iterations_;
}
void CMsgDOTATournamentInfo_Phase::set_iterations(::google::protobuf::uint32 value) {
  set_has_iterations();
  iterations_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.iterations)
}

// optional uint32 min_start_time = 5;
bool CMsgDOTATournamentInfo_Phase::has_min_start_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_min_start_time() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_min_start_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournamentInfo_Phase::clear_min_start_time() {
  min_start_time_ = 0u;
  clear_has_min_start_time();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::min_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.min_start_time)
  return min_start_time_;
}
void CMsgDOTATournamentInfo_Phase::set_min_start_time(::google::protobuf::uint32 value) {
  set_has_min_start_time();
  min_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.min_start_time)
}

// optional uint32 max_start_time = 6;
bool CMsgDOTATournamentInfo_Phase::has_max_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournamentInfo_Phase::set_has_max_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournamentInfo_Phase::clear_has_max_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournamentInfo_Phase::clear_max_start_time() {
  max_start_time_ = 0u;
  clear_has_max_start_time();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Phase::max_start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.max_start_time)
  return max_start_time_;
}
void CMsgDOTATournamentInfo_Phase::set_max_start_time(::google::protobuf::uint32 value) {
  set_has_max_start_time();
  max_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Phase.max_start_time)
}

// repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
int CMsgDOTATournamentInfo_Phase::group_list_size() const {
  return group_list_.size();
}
void CMsgDOTATournamentInfo_Phase::clear_group_list() {
  group_list_.Clear();
}
const ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup& CMsgDOTATournamentInfo_Phase::group_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Get(index);
}
::proto::dota::CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_Phase::mutable_group_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentInfo_PhaseGroup* CMsgDOTATournamentInfo_Phase::add_group_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup >*
CMsgDOTATournamentInfo_Phase::mutable_group_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentInfo.Phase.group_list)
  return &group_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup >&
CMsgDOTATournamentInfo_Phase::group_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentInfo.Phase.group_list)
  return group_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_Team::kTeamIdFieldNumber;
const int CMsgDOTATournamentInfo_Team::kNameFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTagFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTeamLogoFieldNumber;
const int CMsgDOTATournamentInfo_Team::kEliminatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.Team)
}
CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(const CMsgDOTATournamentInfo_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.Team)
}

void CMsgDOTATournamentInfo_Team::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&team_id_) + sizeof(team_logo_));
}

CMsgDOTATournamentInfo_Team::~CMsgDOTATournamentInfo_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.Team)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Team::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_Team::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo_Team& CMsgDOTATournamentInfo_Team::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo_Team::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo_Team* n = new CMsgDOTATournamentInfo_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.Team)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_tag()) {
      GOOGLE_DCHECK(!tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tag_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&team_id_, 0, reinterpret_cast<char*>(&team_logo_) -
      reinterpret_cast<char*>(&team_id_) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Team.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Team.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eliminated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_eliminated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eliminated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.Team)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  // optional bool eliminated = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->eliminated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.Team)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  // optional bool eliminated = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->eliminated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.Team)
  return target;
}

size_t CMsgDOTATournamentInfo_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 team_id = 1;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool eliminated = 5;
    if (has_eliminated()) {
      total_size += 1 + 1;
    }

    // optional uint64 team_logo = 4;
    if (has_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_tag();
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      eliminated_ = from.eliminated_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Team::Swap(CMsgDOTATournamentInfo_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_Team::InternalSwap(CMsgDOTATournamentInfo_Team* other) {
  name_.Swap(&other->name_);
  tag_.Swap(&other->tag_);
  std::swap(team_id_, other->team_id_);
  std::swap(eliminated_, other->eliminated_);
  std::swap(team_logo_, other->team_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Team::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo_Team

// optional uint32 team_id = 1;
bool CMsgDOTATournamentInfo_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentInfo_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentInfo_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentInfo_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_Team::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Team.team_id)
  return team_id_;
}
void CMsgDOTATournamentInfo_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Team.team_id)
}

// optional string name = 2;
bool CMsgDOTATournamentInfo_Team::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo_Team::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo_Team::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo_Team::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& CMsgDOTATournamentInfo_Team::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Team.name)
  return name_.GetNoArena();
}
void CMsgDOTATournamentInfo_Team::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Team.name)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_Team::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.Team.name)
}
#endif
void CMsgDOTATournamentInfo_Team::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.Team.name)
}
void CMsgDOTATournamentInfo_Team::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.Team.name)
}
::std::string* CMsgDOTATournamentInfo_Team::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.Team.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_Team::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.Team.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_Team::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.Team.name)
}

// optional string tag = 3;
bool CMsgDOTATournamentInfo_Team::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentInfo_Team::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentInfo_Team::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentInfo_Team::clear_tag() {
  tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tag();
}
const ::std::string& CMsgDOTATournamentInfo_Team::tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Team.tag)
  return tag_.GetNoArena();
}
void CMsgDOTATournamentInfo_Team::set_tag(const ::std::string& value) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Team.tag)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_Team::set_tag(::std::string&& value) {
  set_has_tag();
  tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.Team.tag)
}
#endif
void CMsgDOTATournamentInfo_Team::set_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.Team.tag)
}
void CMsgDOTATournamentInfo_Team::set_tag(const char* value, size_t size) {
  set_has_tag();
  tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.Team.tag)
}
::std::string* CMsgDOTATournamentInfo_Team::mutable_tag() {
  set_has_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.Team.tag)
  return tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_Team::release_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.Team.tag)
  clear_has_tag();
  return tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_Team::set_allocated_tag(::std::string* tag) {
  if (tag != NULL) {
    set_has_tag();
  } else {
    clear_has_tag();
  }
  tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.Team.tag)
}

// optional uint64 team_logo = 4;
bool CMsgDOTATournamentInfo_Team::has_team_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournamentInfo_Team::set_has_team_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournamentInfo_Team::clear_has_team_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournamentInfo_Team::clear_team_logo() {
  team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_logo();
}
::google::protobuf::uint64 CMsgDOTATournamentInfo_Team::team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Team.team_logo)
  return team_logo_;
}
void CMsgDOTATournamentInfo_Team::set_team_logo(::google::protobuf::uint64 value) {
  set_has_team_logo();
  team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Team.team_logo)
}

// optional bool eliminated = 5;
bool CMsgDOTATournamentInfo_Team::has_eliminated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournamentInfo_Team::set_has_eliminated() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournamentInfo_Team::clear_has_eliminated() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournamentInfo_Team::clear_eliminated() {
  eliminated_ = false;
  clear_has_eliminated();
}
bool CMsgDOTATournamentInfo_Team::eliminated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.Team.eliminated)
  return eliminated_;
}
void CMsgDOTATournamentInfo_Team::set_eliminated(bool value) {
  set_has_eliminated();
  eliminated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.Team.eliminated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_UpcomingMatch::kSeriesIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kBoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStageNameFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kWinnerStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kLoserStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseTypeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}
CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(const CMsgDOTATournamentInfo_UpcomingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stage_name()) {
    stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
  }
  winner_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_winner_stage()) {
    winner_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_stage_);
  }
  loser_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loser_stage()) {
    loser_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loser_stage_);
  }
  team1_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team1_tag()) {
    team1_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_tag_);
  }
  team2_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team2_tag()) {
    team2_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_tag_);
  }
  team1_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team1_prev_opponent_tag()) {
    team1_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_prev_opponent_tag_);
  }
  team2_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team2_prev_opponent_tag()) {
    team2_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_prev_opponent_tag_);
  }
  ::memcpy(&series_id_, &from.series_id_,
    reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&series_id_) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedCtor() {
  _cached_size_ = 0;
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winner_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loser_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&series_id_, 0, reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&series_id_) + sizeof(phase_id_));
}

CMsgDOTATournamentInfo_UpcomingMatch::~CMsgDOTATournamentInfo_UpcomingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  SharedDtor();
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedDtor() {
  stage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winner_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loser_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_UpcomingMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_UpcomingMatch::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo_UpcomingMatch& CMsgDOTATournamentInfo_UpcomingMatch::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo_UpcomingMatch::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo_UpcomingMatch* n = new CMsgDOTATournamentInfo_UpcomingMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo_UpcomingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_stage_name()) {
      GOOGLE_DCHECK(!stage_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*stage_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_winner_stage()) {
      GOOGLE_DCHECK(!winner_stage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*winner_stage_.UnsafeRawStringPointer())->clear();
    }
    if (has_loser_stage()) {
      GOOGLE_DCHECK(!loser_stage_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*loser_stage_.UnsafeRawStringPointer())->clear();
    }
    if (has_team1_tag()) {
      GOOGLE_DCHECK(!team1_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team1_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_team2_tag()) {
      GOOGLE_DCHECK(!team2_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team2_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_team1_prev_opponent_tag()) {
      GOOGLE_DCHECK(!team1_prev_opponent_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team1_prev_opponent_tag_.UnsafeRawStringPointer())->clear();
    }
    if (has_team2_prev_opponent_tag()) {
      GOOGLE_DCHECK(!team2_prev_opponent_tag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*team2_prev_opponent_tag_.UnsafeRawStringPointer())->clear();
    }
  }
  series_id_ = 0u;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&team1_id_, 0, reinterpret_cast<char*>(&team1_prev_opponent_logo_) -
      reinterpret_cast<char*>(&team1_id_) + sizeof(team1_prev_opponent_logo_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&team2_prev_opponent_logo_, 0, reinterpret_cast<char*>(&team1_score_) -
      reinterpret_cast<char*>(&team2_prev_opponent_logo_) + sizeof(team1_score_));
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    ::memset(&team2_score_, 0, reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&team2_score_) + sizeof(phase_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo_UpcomingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_series_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team1_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team2_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stage_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage_name().data(), this->stage_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string winner_stage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winner_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winner_stage().data(), this->winner_stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loser_stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loser_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loser_stage().data(), this->loser_stage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team1_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_tag().data(), this->team1_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team2_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_tag().data(), this->team2_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team1_prev_opponent_tag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team2_prev_opponent_tag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team1_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_team1_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team2_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_team2_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team1_prev_opponent_logo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_team1_prev_opponent_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_prev_opponent_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team2_prev_opponent_logo = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_team2_prev_opponent_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_prev_opponent_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_opponent_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_team1_prev_opponent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_opponent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_opponent_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_team2_prev_opponent_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_opponent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_match_score = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_team1_prev_match_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_match_opponent_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_team1_prev_match_opponent_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_opponent_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_match_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_team2_prev_match_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_match_opponent_score = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_team2_prev_match_opponent_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_opponent_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phase_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_phase_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_score = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_team1_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_score = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_team2_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phase_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_phase_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_UpcomingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series_id(), output);
  }

  // optional uint32 team1_id = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team1_id(), output);
  }

  // optional uint32 team2_id = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team2_id(), output);
  }

  // optional uint32 bo = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bo(), output);
  }

  // optional string stage_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stage_name(), output);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  // optional string winner_stage = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), this->winner_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->winner_stage(), output);
  }

  // optional string loser_stage = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), this->loser_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->loser_stage(), output);
  }

  // optional string team1_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), this->team1_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team1_tag(), output);
  }

  // optional string team2_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), this->team2_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->team2_tag(), output);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->team1_prev_opponent_tag(), output);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->team2_prev_opponent_tag(), output);
  }

  // optional uint64 team1_logo = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->team1_logo(), output);
  }

  // optional uint64 team2_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->team2_logo(), output);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->team1_prev_opponent_logo(), output);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->team2_prev_opponent_logo(), output);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->team1_prev_opponent_id(), output);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->team2_prev_opponent_id(), output);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->team1_prev_match_score(), output);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->team1_prev_match_opponent_score(), output);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->team2_prev_match_score(), output);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->team2_prev_match_opponent_score(), output);
  }

  // optional uint32 phase_type = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->phase_type(), output);
  }

  // optional uint32 team1_score = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->team1_score(), output);
  }

  // optional uint32 team2_score = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->team2_score(), output);
  }

  // optional uint32 phase_id = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->phase_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_UpcomingMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series_id(), target);
  }

  // optional uint32 team1_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team1_id(), target);
  }

  // optional uint32 team2_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team2_id(), target);
  }

  // optional uint32 bo = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bo(), target);
  }

  // optional string stage_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), this->stage_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stage_name(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  // optional string winner_stage = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), this->winner_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->winner_stage(), target);
  }

  // optional string loser_stage = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), this->loser_stage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->loser_stage(), target);
  }

  // optional string team1_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), this->team1_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team1_tag(), target);
  }

  // optional string team2_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), this->team2_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->team2_tag(), target);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), this->team1_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->team1_prev_opponent_tag(), target);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), this->team2_prev_opponent_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->team2_prev_opponent_tag(), target);
  }

  // optional uint64 team1_logo = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->team1_logo(), target);
  }

  // optional uint64 team2_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->team2_logo(), target);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->team1_prev_opponent_logo(), target);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->team2_prev_opponent_logo(), target);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->team1_prev_opponent_id(), target);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->team2_prev_opponent_id(), target);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->team1_prev_match_score(), target);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->team1_prev_match_opponent_score(), target);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->team2_prev_match_score(), target);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->team2_prev_match_opponent_score(), target);
  }

  // optional uint32 phase_type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->phase_type(), target);
  }

  // optional uint32 team1_score = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->team1_score(), target);
  }

  // optional uint32 team2_score = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->team2_score(), target);
  }

  // optional uint32 phase_id = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->phase_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return target;
}

size_t CMsgDOTATournamentInfo_UpcomingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string stage_name = 5;
    if (has_stage_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional string winner_stage = 7;
    if (has_winner_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winner_stage());
    }

    // optional string loser_stage = 8;
    if (has_loser_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loser_stage());
    }

    // optional string team1_tag = 9;
    if (has_team1_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_tag());
    }

    // optional string team2_tag = 10;
    if (has_team2_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_tag());
    }

    // optional string team1_prev_opponent_tag = 11;
    if (has_team1_prev_opponent_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_prev_opponent_tag());
    }

    // optional string team2_prev_opponent_tag = 12;
    if (has_team2_prev_opponent_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_prev_opponent_tag());
    }

    // optional uint32 series_id = 1;
    if (has_series_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 team1_id = 2;
    if (has_team1_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_id());
    }

    // optional uint32 team2_id = 3;
    if (has_team2_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_id());
    }

    // optional uint32 bo = 4;
    if (has_bo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bo());
    }

    // optional uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 team1_prev_opponent_id = 17;
    if (has_team1_prev_opponent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_opponent_id());
    }

    // optional uint64 team1_logo = 13;
    if (has_team1_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_logo());
    }

    // optional uint64 team2_logo = 14;
    if (has_team2_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_logo());
    }

    // optional uint64 team1_prev_opponent_logo = 15;
    if (has_team1_prev_opponent_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_prev_opponent_logo());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional uint64 team2_prev_opponent_logo = 16;
    if (has_team2_prev_opponent_logo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_prev_opponent_logo());
    }

    // optional uint32 team2_prev_opponent_id = 18;
    if (has_team2_prev_opponent_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_opponent_id());
    }

    // optional uint32 team1_prev_match_score = 19;
    if (has_team1_prev_match_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_score());
    }

    // optional uint32 team1_prev_match_opponent_score = 20;
    if (has_team1_prev_match_opponent_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_opponent_score());
    }

    // optional uint32 team2_prev_match_score = 21;
    if (has_team2_prev_match_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_score());
    }

    // optional uint32 team2_prev_match_opponent_score = 22;
    if (has_team2_prev_match_opponent_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_opponent_score());
    }

    // optional uint32 phase_type = 23;
    if (has_phase_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_type());
    }

    // optional uint32 team1_score = 24;
    if (has_team1_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional uint32 team2_score = 25;
    if (has_team2_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 phase_id = 26;
    if (has_phase_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_UpcomingMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo_UpcomingMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_stage_name();
      stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_winner_stage();
      winner_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_stage_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_loser_stage();
      loser_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loser_stage_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_team1_tag();
      team1_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_team2_tag();
      team2_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_team1_prev_opponent_tag();
      team1_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_prev_opponent_tag_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_team2_prev_opponent_tag();
      team2_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_prev_opponent_tag_);
    }
    if (cached_has_bits & 0x00000080u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      team1_id_ = from.team1_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      team2_id_ = from.team2_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      bo_ = from.bo_;
    }
    if (cached_has_bits & 0x00000800u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      team1_prev_opponent_id_ = from.team1_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      team1_logo_ = from.team1_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      team2_logo_ = from.team2_logo_;
    }
    if (cached_has_bits & 0x00008000u) {
      team1_prev_opponent_logo_ = from.team1_prev_opponent_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      team2_prev_opponent_logo_ = from.team2_prev_opponent_logo_;
    }
    if (cached_has_bits & 0x00020000u) {
      team2_prev_opponent_id_ = from.team2_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      team1_prev_match_score_ = from.team1_prev_match_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      team1_prev_match_opponent_score_ = from.team1_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      team2_prev_match_score_ = from.team2_prev_match_score_;
    }
    if (cached_has_bits & 0x00200000u) {
      team2_prev_match_opponent_score_ = from.team2_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00400000u) {
      phase_type_ = from.phase_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      team1_score_ = from.team1_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      team2_score_ = from.team2_score_;
    }
    if (cached_has_bits & 0x02000000u) {
      phase_id_ = from.phase_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_UpcomingMatch::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_UpcomingMatch::Swap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_UpcomingMatch::InternalSwap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  stage_name_.Swap(&other->stage_name_);
  winner_stage_.Swap(&other->winner_stage_);
  loser_stage_.Swap(&other->loser_stage_);
  team1_tag_.Swap(&other->team1_tag_);
  team2_tag_.Swap(&other->team2_tag_);
  team1_prev_opponent_tag_.Swap(&other->team1_prev_opponent_tag_);
  team2_prev_opponent_tag_.Swap(&other->team2_prev_opponent_tag_);
  std::swap(series_id_, other->series_id_);
  std::swap(team1_id_, other->team1_id_);
  std::swap(team2_id_, other->team2_id_);
  std::swap(bo_, other->bo_);
  std::swap(start_time_, other->start_time_);
  std::swap(team1_prev_opponent_id_, other->team1_prev_opponent_id_);
  std::swap(team1_logo_, other->team1_logo_);
  std::swap(team2_logo_, other->team2_logo_);
  std::swap(team1_prev_opponent_logo_, other->team1_prev_opponent_logo_);
  std::swap(team2_prev_opponent_logo_, other->team2_prev_opponent_logo_);
  std::swap(team2_prev_opponent_id_, other->team2_prev_opponent_id_);
  std::swap(team1_prev_match_score_, other->team1_prev_match_score_);
  std::swap(team1_prev_match_opponent_score_, other->team1_prev_match_opponent_score_);
  std::swap(team2_prev_match_score_, other->team2_prev_match_score_);
  std::swap(team2_prev_match_opponent_score_, other->team2_prev_match_opponent_score_);
  std::swap(phase_type_, other->phase_type_);
  std::swap(team1_score_, other->team1_score_);
  std::swap(team2_score_, other->team2_score_);
  std::swap(phase_id_, other->phase_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_UpcomingMatch::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo_UpcomingMatch

// optional uint32 series_id = 1;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_series_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_series_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_series_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_series_id() {
  series_id_ = 0u;
  clear_has_series_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::series_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.series_id)
  return series_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_series_id(::google::protobuf::uint32 value) {
  set_has_series_id();
  series_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.series_id)
}

// optional uint32 team1_id = 2;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_id() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_id() {
  team1_id_ = 0u;
  clear_has_team1_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_id)
  return team1_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_id(::google::protobuf::uint32 value) {
  set_has_team1_id();
  team1_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_id)
}

// optional uint32 team2_id = 3;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_id() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_id() {
  team2_id_ = 0u;
  clear_has_team2_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_id)
  return team2_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_id(::google::protobuf::uint32 value) {
  set_has_team2_id();
  team2_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_id)
}

// optional uint32 bo = 4;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_bo() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_bo() {
  _has_bits_[0] |= 0x00000400u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_bo() {
  _has_bits_[0] &= ~0x00000400u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_bo() {
  bo_ = 0u;
  clear_has_bo();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::bo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.bo)
  return bo_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_bo(::google::protobuf::uint32 value) {
  set_has_bo();
  bo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.bo)
}

// optional string stage_name = 5;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_stage_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_stage_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_stage_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_stage_name() {
  stage_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stage_name();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::stage_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
  return stage_name_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const ::std::string& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(::std::string&& value) {
  set_has_stage_name();
  stage_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_stage_name(const char* value, size_t size) {
  set_has_stage_name();
  stage_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_stage_name() {
  set_has_stage_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
  return stage_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_stage_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
  clear_has_stage_name();
  return stage_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_stage_name(::std::string* stage_name) {
  if (stage_name != NULL) {
    set_has_stage_name();
  } else {
    clear_has_stage_name();
  }
  stage_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stage_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name)
}

// optional uint32 start_time = 6;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_start_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_start_time() {
  _has_bits_[0] |= 0x00000800u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.start_time)
  return start_time_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.start_time)
}

// optional string winner_stage = 7;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_winner_stage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_winner_stage() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_winner_stage() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_winner_stage() {
  winner_stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_winner_stage();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::winner_stage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
  return winner_stage_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const ::std::string& value) {
  set_has_winner_stage();
  winner_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(::std::string&& value) {
  set_has_winner_stage();
  winner_stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_winner_stage();
  winner_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_winner_stage(const char* value, size_t size) {
  set_has_winner_stage();
  winner_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_winner_stage() {
  set_has_winner_stage();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
  return winner_stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_winner_stage() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
  clear_has_winner_stage();
  return winner_stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_winner_stage(::std::string* winner_stage) {
  if (winner_stage != NULL) {
    set_has_winner_stage();
  } else {
    clear_has_winner_stage();
  }
  winner_stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), winner_stage);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage)
}

// optional string loser_stage = 8;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_loser_stage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_loser_stage() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_loser_stage() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_loser_stage() {
  loser_stage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_loser_stage();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::loser_stage() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
  return loser_stage_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const ::std::string& value) {
  set_has_loser_stage();
  loser_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(::std::string&& value) {
  set_has_loser_stage();
  loser_stage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_loser_stage();
  loser_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_loser_stage(const char* value, size_t size) {
  set_has_loser_stage();
  loser_stage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_loser_stage() {
  set_has_loser_stage();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
  return loser_stage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_loser_stage() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
  clear_has_loser_stage();
  return loser_stage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_loser_stage(::std::string* loser_stage) {
  if (loser_stage != NULL) {
    set_has_loser_stage();
  } else {
    clear_has_loser_stage();
  }
  loser_stage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loser_stage);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage)
}

// optional string team1_tag = 9;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_tag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_tag() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_tag() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_tag() {
  team1_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team1_tag();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team1_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
  return team1_tag_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const ::std::string& value) {
  set_has_team1_tag();
  team1_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(::std::string&& value) {
  set_has_team1_tag();
  team1_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team1_tag();
  team1_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_tag(const char* value, size_t size) {
  set_has_team1_tag();
  team1_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team1_tag() {
  set_has_team1_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
  return team1_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team1_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
  clear_has_team1_tag();
  return team1_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team1_tag(::std::string* team1_tag) {
  if (team1_tag != NULL) {
    set_has_team1_tag();
  } else {
    clear_has_team1_tag();
  }
  team1_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team1_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag)
}

// optional string team2_tag = 10;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_tag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_tag() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_tag() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_tag() {
  team2_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team2_tag();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team2_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
  return team2_tag_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const ::std::string& value) {
  set_has_team2_tag();
  team2_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(::std::string&& value) {
  set_has_team2_tag();
  team2_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team2_tag();
  team2_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_tag(const char* value, size_t size) {
  set_has_team2_tag();
  team2_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team2_tag() {
  set_has_team2_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
  return team2_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team2_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
  clear_has_team2_tag();
  return team2_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team2_tag(::std::string* team2_tag) {
  if (team2_tag != NULL) {
    set_has_team2_tag();
  } else {
    clear_has_team2_tag();
  }
  team2_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team2_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag)
}

// optional string team1_prev_opponent_tag = 11;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_tag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_tag() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_tag() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_tag() {
  team1_prev_opponent_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team1_prev_opponent_tag();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
  return team1_prev_opponent_tag_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const ::std::string& value) {
  set_has_team1_prev_opponent_tag();
  team1_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(::std::string&& value) {
  set_has_team1_prev_opponent_tag();
  team1_prev_opponent_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team1_prev_opponent_tag();
  team1_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_tag(const char* value, size_t size) {
  set_has_team1_prev_opponent_tag();
  team1_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team1_prev_opponent_tag() {
  set_has_team1_prev_opponent_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
  return team1_prev_opponent_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team1_prev_opponent_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
  clear_has_team1_prev_opponent_tag();
  return team1_prev_opponent_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team1_prev_opponent_tag(::std::string* team1_prev_opponent_tag) {
  if (team1_prev_opponent_tag != NULL) {
    set_has_team1_prev_opponent_tag();
  } else {
    clear_has_team1_prev_opponent_tag();
  }
  team1_prev_opponent_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team1_prev_opponent_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag)
}

// optional string team2_prev_opponent_tag = 12;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_tag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_tag() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_tag() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_tag() {
  team2_prev_opponent_tag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team2_prev_opponent_tag();
}
const ::std::string& CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_tag() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
  return team2_prev_opponent_tag_.GetNoArena();
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const ::std::string& value) {
  set_has_team2_prev_opponent_tag();
  team2_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(::std::string&& value) {
  set_has_team2_prev_opponent_tag();
  team2_prev_opponent_tag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
#endif
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team2_prev_opponent_tag();
  team2_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_tag(const char* value, size_t size) {
  set_has_team2_prev_opponent_tag();
  team2_prev_opponent_tag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::mutable_team2_prev_opponent_tag() {
  set_has_team2_prev_opponent_tag();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
  return team2_prev_opponent_tag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_UpcomingMatch::release_team2_prev_opponent_tag() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
  clear_has_team2_prev_opponent_tag();
  return team2_prev_opponent_tag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_allocated_team2_prev_opponent_tag(::std::string* team2_prev_opponent_tag) {
  if (team2_prev_opponent_tag != NULL) {
    set_has_team2_prev_opponent_tag();
  } else {
    clear_has_team2_prev_opponent_tag();
  }
  team2_prev_opponent_tag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team2_prev_opponent_tag);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag)
}

// optional uint64 team1_logo = 13;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_logo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_logo() {
  _has_bits_[0] |= 0x00002000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_logo() {
  _has_bits_[0] &= ~0x00002000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_logo() {
  team1_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team1_logo();
}
::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team1_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_logo)
  return team1_logo_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_logo(::google::protobuf::uint64 value) {
  set_has_team1_logo();
  team1_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_logo)
}

// optional uint64 team2_logo = 14;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_logo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_logo() {
  _has_bits_[0] |= 0x00004000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_logo() {
  _has_bits_[0] &= ~0x00004000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_logo() {
  team2_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team2_logo();
}
::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team2_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_logo)
  return team2_logo_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_logo(::google::protobuf::uint64 value) {
  set_has_team2_logo();
  team2_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_logo)
}

// optional uint64 team1_prev_opponent_logo = 15;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_logo() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_logo() {
  _has_bits_[0] |= 0x00008000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_logo() {
  _has_bits_[0] &= ~0x00008000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_logo() {
  team1_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team1_prev_opponent_logo();
}
::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_logo)
  return team1_prev_opponent_logo_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_logo(::google::protobuf::uint64 value) {
  set_has_team1_prev_opponent_logo();
  team1_prev_opponent_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_logo)
}

// optional uint64 team2_prev_opponent_logo = 16;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_logo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_logo() {
  _has_bits_[0] |= 0x00010000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_logo() {
  _has_bits_[0] &= ~0x00010000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_logo() {
  team2_prev_opponent_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team2_prev_opponent_logo();
}
::google::protobuf::uint64 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_logo)
  return team2_prev_opponent_logo_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_logo(::google::protobuf::uint64 value) {
  set_has_team2_prev_opponent_logo();
  team2_prev_opponent_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_logo)
}

// optional uint32 team1_prev_opponent_id = 17;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_opponent_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_opponent_id() {
  _has_bits_[0] |= 0x00001000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_opponent_id() {
  _has_bits_[0] &= ~0x00001000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_opponent_id() {
  team1_prev_opponent_id_ = 0u;
  clear_has_team1_prev_opponent_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_opponent_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_id)
  return team1_prev_opponent_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_opponent_id(::google::protobuf::uint32 value) {
  set_has_team1_prev_opponent_id();
  team1_prev_opponent_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_id)
}

// optional uint32 team2_prev_opponent_id = 18;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_opponent_id() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_opponent_id() {
  _has_bits_[0] |= 0x00020000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_opponent_id() {
  _has_bits_[0] &= ~0x00020000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_opponent_id() {
  team2_prev_opponent_id_ = 0u;
  clear_has_team2_prev_opponent_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_opponent_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_id)
  return team2_prev_opponent_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_opponent_id(::google::protobuf::uint32 value) {
  set_has_team2_prev_opponent_id();
  team2_prev_opponent_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_id)
}

// optional uint32 team1_prev_match_score = 19;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_match_score() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_match_score() {
  _has_bits_[0] |= 0x00040000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_match_score() {
  _has_bits_[0] &= ~0x00040000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_match_score() {
  team1_prev_match_score_ = 0u;
  clear_has_team1_prev_match_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_match_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_score)
  return team1_prev_match_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_match_score(::google::protobuf::uint32 value) {
  set_has_team1_prev_match_score();
  team1_prev_match_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_score)
}

// optional uint32 team1_prev_match_opponent_score = 20;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_prev_match_opponent_score() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_prev_match_opponent_score() {
  _has_bits_[0] |= 0x00080000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_prev_match_opponent_score() {
  _has_bits_[0] &= ~0x00080000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_prev_match_opponent_score() {
  team1_prev_match_opponent_score_ = 0u;
  clear_has_team1_prev_match_opponent_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_prev_match_opponent_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_opponent_score)
  return team1_prev_match_opponent_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_prev_match_opponent_score(::google::protobuf::uint32 value) {
  set_has_team1_prev_match_opponent_score();
  team1_prev_match_opponent_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_match_opponent_score)
}

// optional uint32 team2_prev_match_score = 21;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_match_score() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_match_score() {
  _has_bits_[0] |= 0x00100000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_match_score() {
  _has_bits_[0] &= ~0x00100000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_match_score() {
  team2_prev_match_score_ = 0u;
  clear_has_team2_prev_match_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_match_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_score)
  return team2_prev_match_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_match_score(::google::protobuf::uint32 value) {
  set_has_team2_prev_match_score();
  team2_prev_match_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_score)
}

// optional uint32 team2_prev_match_opponent_score = 22;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_prev_match_opponent_score() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_prev_match_opponent_score() {
  _has_bits_[0] |= 0x00200000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_prev_match_opponent_score() {
  _has_bits_[0] &= ~0x00200000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_prev_match_opponent_score() {
  team2_prev_match_opponent_score_ = 0u;
  clear_has_team2_prev_match_opponent_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_prev_match_opponent_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_opponent_score)
  return team2_prev_match_opponent_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_prev_match_opponent_score(::google::protobuf::uint32 value) {
  set_has_team2_prev_match_opponent_score();
  team2_prev_match_opponent_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_match_opponent_score)
}

// optional uint32 phase_type = 23;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_phase_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_phase_type() {
  _has_bits_[0] |= 0x00400000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_phase_type() {
  _has_bits_[0] &= ~0x00400000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_phase_type() {
  phase_type_ = 0u;
  clear_has_phase_type();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::phase_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.phase_type)
  return phase_type_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_phase_type(::google::protobuf::uint32 value) {
  set_has_phase_type();
  phase_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.phase_type)
}

// optional uint32 team1_score = 24;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team1_score() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team1_score() {
  _has_bits_[0] |= 0x00800000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team1_score() {
  _has_bits_[0] &= ~0x00800000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team1_score() {
  team1_score_ = 0u;
  clear_has_team1_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team1_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_score)
  return team1_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team1_score(::google::protobuf::uint32 value) {
  set_has_team1_score();
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_score)
}

// optional uint32 team2_score = 25;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_team2_score() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_team2_score() {
  _has_bits_[0] |= 0x01000000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_team2_score() {
  _has_bits_[0] &= ~0x01000000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_team2_score() {
  team2_score_ = 0u;
  clear_has_team2_score();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::team2_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_score)
  return team2_score_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_team2_score(::google::protobuf::uint32 value) {
  set_has_team2_score();
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_score)
}

// optional uint32 phase_id = 26;
bool CMsgDOTATournamentInfo_UpcomingMatch::has_phase_id() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_has_phase_id() {
  _has_bits_[0] |= 0x02000000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_has_phase_id() {
  _has_bits_[0] &= ~0x02000000u;
}
void CMsgDOTATournamentInfo_UpcomingMatch::clear_phase_id() {
  phase_id_ = 0u;
  clear_has_phase_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_UpcomingMatch::phase_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.phase_id)
  return phase_id_;
}
void CMsgDOTATournamentInfo_UpcomingMatch::set_phase_id(::google::protobuf::uint32 value) {
  set_has_phase_id();
  phase_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.phase_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_News::kLinkFieldNumber;
const int CMsgDOTATournamentInfo_News::kTitleFieldNumber;
const int CMsgDOTATournamentInfo_News::kImageFieldNumber;
const int CMsgDOTATournamentInfo_News::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.News)
}
CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(const CMsgDOTATournamentInfo_News& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link()) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.News)
}

void CMsgDOTATournamentInfo_News::SharedCtor() {
  _cached_size_ = 0;
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

CMsgDOTATournamentInfo_News::~CMsgDOTATournamentInfo_News() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.News)
  SharedDtor();
}

void CMsgDOTATournamentInfo_News::SharedDtor() {
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_News::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo_News::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo_News& CMsgDOTATournamentInfo_News::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo_News::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo_News* n = new CMsgDOTATournamentInfo_News;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo_News::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.News)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_link()) {
      GOOGLE_DCHECK(!link_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*link_.UnsafeRawStringPointer())->clear();
    }
    if (has_title()) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (has_image()) {
      GOOGLE_DCHECK(!image_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*image_.UnsafeRawStringPointer())->clear();
    }
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo_News::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.News)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), this->link().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), this->image().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.News)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.News)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo_News::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.News)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.News)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_News::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.News)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), this->link().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), this->image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.News)
  return target;
}

size_t CMsgDOTATournamentInfo_News::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.News)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string link = 1;
    if (has_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string image = 3;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo_News::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_News* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo_News>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.News)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.News)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_News::MergeFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_link();
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_image();
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_News::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_News::CopyFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_News::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_News::Swap(CMsgDOTATournamentInfo_News* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_News::InternalSwap(CMsgDOTATournamentInfo_News* other) {
  link_.Swap(&other->link_);
  title_.Swap(&other->title_);
  image_.Swap(&other->image_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_News::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo_News

// optional string link = 1;
bool CMsgDOTATournamentInfo_News::has_link() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo_News::set_has_link() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo_News::clear_has_link() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo_News::clear_link() {
  link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link();
}
const ::std::string& CMsgDOTATournamentInfo_News::link() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.News.link)
  return link_.GetNoArena();
}
void CMsgDOTATournamentInfo_News::set_link(const ::std::string& value) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.News.link)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_News::set_link(::std::string&& value) {
  set_has_link();
  link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.News.link)
}
#endif
void CMsgDOTATournamentInfo_News::set_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.News.link)
}
void CMsgDOTATournamentInfo_News::set_link(const char* value, size_t size) {
  set_has_link();
  link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.News.link)
}
::std::string* CMsgDOTATournamentInfo_News::mutable_link() {
  set_has_link();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.News.link)
  return link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_News::release_link() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.News.link)
  clear_has_link();
  return link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_News::set_allocated_link(::std::string* link) {
  if (link != NULL) {
    set_has_link();
  } else {
    clear_has_link();
  }
  link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.News.link)
}

// optional string title = 2;
bool CMsgDOTATournamentInfo_News::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentInfo_News::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentInfo_News::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentInfo_News::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& CMsgDOTATournamentInfo_News::title() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.News.title)
  return title_.GetNoArena();
}
void CMsgDOTATournamentInfo_News::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.News.title)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_News::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.News.title)
}
#endif
void CMsgDOTATournamentInfo_News::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.News.title)
}
void CMsgDOTATournamentInfo_News::set_title(const char* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.News.title)
}
::std::string* CMsgDOTATournamentInfo_News::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.News.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_News::release_title() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.News.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_News::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.News.title)
}

// optional string image = 3;
bool CMsgDOTATournamentInfo_News::has_image() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentInfo_News::set_has_image() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentInfo_News::clear_has_image() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentInfo_News::clear_image() {
  image_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_image();
}
const ::std::string& CMsgDOTATournamentInfo_News::image() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.News.image)
  return image_.GetNoArena();
}
void CMsgDOTATournamentInfo_News::set_image(const ::std::string& value) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.News.image)
}
#if LANG_CXX11
void CMsgDOTATournamentInfo_News::set_image(::std::string&& value) {
  set_has_image();
  image_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournamentInfo.News.image)
}
#endif
void CMsgDOTATournamentInfo_News::set_image(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournamentInfo.News.image)
}
void CMsgDOTATournamentInfo_News::set_image(const char* value, size_t size) {
  set_has_image();
  image_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournamentInfo.News.image)
}
::std::string* CMsgDOTATournamentInfo_News::mutable_image() {
  set_has_image();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.News.image)
  return image_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournamentInfo_News::release_image() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentInfo.News.image)
  clear_has_image();
  return image_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournamentInfo_News::set_allocated_image(::std::string* image) {
  if (image != NULL) {
    set_has_image();
  } else {
    clear_has_image();
  }
  image_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentInfo.News.image)
}

// optional uint32 timestamp = 4;
bool CMsgDOTATournamentInfo_News::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournamentInfo_News::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournamentInfo_News::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournamentInfo_News::clear_timestamp() {
  timestamp_ = 0u;
  clear_has_timestamp();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo_News::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.News.timestamp)
  return timestamp_;
}
void CMsgDOTATournamentInfo_News::set_timestamp(::google::protobuf::uint32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.News.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo::kLeagueIdFieldNumber;
const int CMsgDOTATournamentInfo::kPhaseListFieldNumber;
const int CMsgDOTATournamentInfo::kTeamsListFieldNumber;
const int CMsgDOTATournamentInfo::kUpcomingMatchesListFieldNumber;
const int CMsgDOTATournamentInfo::kNewsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo::CMsgDOTATournamentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo)
}
CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(const CMsgDOTATournamentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      phase_list_(from.phase_list_),
      teams_list_(from.teams_list_),
      upcoming_matches_list_(from.upcoming_matches_list_),
      news_list_(from.news_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo)
}

void CMsgDOTATournamentInfo::SharedCtor() {
  _cached_size_ = 0;
  league_id_ = 0u;
}

CMsgDOTATournamentInfo::~CMsgDOTATournamentInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo)
  SharedDtor();
}

void CMsgDOTATournamentInfo::SharedDtor() {
}

void CMsgDOTATournamentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentInfo::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentInfo& CMsgDOTATournamentInfo::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentInfo* CMsgDOTATournamentInfo::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentInfo* n = new CMsgDOTATournamentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo)
  phase_list_.Clear();
  teams_list_.Clear();
  upcoming_matches_list_.Clear();
  news_list_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_league_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_phase_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upcoming_matches_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_news_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo)
  return false;
#undef DO_
}

void CMsgDOTATournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (unsigned int i = 0, n = this->phase_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->phase_list(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  for (unsigned int i = 0, n = this->teams_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teams_list(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (unsigned int i = 0, n = this->upcoming_matches_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->upcoming_matches_list(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  for (unsigned int i = 0, n = this->news_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->news_list(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (unsigned int i = 0, n = this->phase_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->phase_list(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  for (unsigned int i = 0, n = this->teams_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->teams_list(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (unsigned int i = 0, n = this->upcoming_matches_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->upcoming_matches_list(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  for (unsigned int i = 0, n = this->news_list_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->news_list(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo)
  return target;
}

size_t CMsgDOTATournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  {
    unsigned int count = this->phase_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->phase_list(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  {
    unsigned int count = this->teams_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams_list(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  {
    unsigned int count = this->upcoming_matches_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upcoming_matches_list(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  {
    unsigned int count = this->news_list_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news_list(i));
    }
  }

  // optional uint32 league_id = 1;
  if (has_league_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo::MergeFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phase_list_.MergeFrom(from.phase_list_);
  teams_list_.MergeFrom(from.teams_list_);
  upcoming_matches_list_.MergeFrom(from.upcoming_matches_list_);
  news_list_.MergeFrom(from.news_list_);
  if (from.has_league_id()) {
    set_league_id(from.league_id());
  }
}

void CMsgDOTATournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo::CopyFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo::Swap(CMsgDOTATournamentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo::InternalSwap(CMsgDOTATournamentInfo* other) {
  phase_list_.InternalSwap(&other->phase_list_);
  teams_list_.InternalSwap(&other->teams_list_);
  upcoming_matches_list_.InternalSwap(&other->upcoming_matches_list_);
  news_list_.InternalSwap(&other->news_list_);
  std::swap(league_id_, other->league_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentInfo

// optional uint32 league_id = 1;
bool CMsgDOTATournamentInfo::has_league_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentInfo::set_has_league_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentInfo::clear_has_league_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentInfo::clear_league_id() {
  league_id_ = 0u;
  clear_has_league_id();
}
::google::protobuf::uint32 CMsgDOTATournamentInfo::league_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.league_id)
  return league_id_;
}
void CMsgDOTATournamentInfo::set_league_id(::google::protobuf::uint32 value) {
  set_has_league_id();
  league_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentInfo.league_id)
}

// repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
int CMsgDOTATournamentInfo::phase_list_size() const {
  return phase_list_.size();
}
void CMsgDOTATournamentInfo::clear_phase_list() {
  phase_list_.Clear();
}
const ::proto::dota::CMsgDOTATournamentInfo_Phase& CMsgDOTATournamentInfo::phase_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Get(index);
}
::proto::dota::CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo::mutable_phase_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentInfo_Phase* CMsgDOTATournamentInfo::add_phase_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentInfo.phase_list)
  return phase_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_Phase >*
CMsgDOTATournamentInfo::mutable_phase_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentInfo.phase_list)
  return &phase_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_Phase >&
CMsgDOTATournamentInfo::phase_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentInfo.phase_list)
  return phase_list_;
}

// repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
int CMsgDOTATournamentInfo::teams_list_size() const {
  return teams_list_.size();
}
void CMsgDOTATournamentInfo::clear_teams_list() {
  teams_list_.Clear();
}
const ::proto::dota::CMsgDOTATournamentInfo_Team& CMsgDOTATournamentInfo::teams_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Get(index);
}
::proto::dota::CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo::mutable_teams_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentInfo_Team* CMsgDOTATournamentInfo::add_teams_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentInfo.teams_list)
  return teams_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_Team >*
CMsgDOTATournamentInfo::mutable_teams_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentInfo.teams_list)
  return &teams_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_Team >&
CMsgDOTATournamentInfo::teams_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentInfo.teams_list)
  return teams_list_;
}

// repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
int CMsgDOTATournamentInfo::upcoming_matches_list_size() const {
  return upcoming_matches_list_.size();
}
void CMsgDOTATournamentInfo::clear_upcoming_matches_list() {
  upcoming_matches_list_.Clear();
}
const ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch& CMsgDOTATournamentInfo::upcoming_matches_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Get(index);
}
::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo::mutable_upcoming_matches_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch* CMsgDOTATournamentInfo::add_upcoming_matches_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch >*
CMsgDOTATournamentInfo::mutable_upcoming_matches_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentInfo.upcoming_matches_list)
  return &upcoming_matches_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch >&
CMsgDOTATournamentInfo::upcoming_matches_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentInfo.upcoming_matches_list)
  return upcoming_matches_list_;
}

// repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
int CMsgDOTATournamentInfo::news_list_size() const {
  return news_list_.size();
}
void CMsgDOTATournamentInfo::clear_news_list() {
  news_list_.Clear();
}
const ::proto::dota::CMsgDOTATournamentInfo_News& CMsgDOTATournamentInfo::news_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentInfo.news_list)
  return news_list_.Get(index);
}
::proto::dota::CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo::mutable_news_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentInfo.news_list)
  return news_list_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentInfo_News* CMsgDOTATournamentInfo::add_news_list() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentInfo.news_list)
  return news_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_News >*
CMsgDOTATournamentInfo::mutable_news_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentInfo.news_list)
  return &news_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentInfo_News >&
CMsgDOTATournamentInfo::news_list() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentInfo.news_list)
  return news_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRequestWeekendTourneySchedule)
}
CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRequestWeekendTourneySchedule)
}

void CMsgRequestWeekendTourneySchedule::SharedCtor() {
  _cached_size_ = 0;
}

CMsgRequestWeekendTourneySchedule::~CMsgRequestWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRequestWeekendTourneySchedule)
  SharedDtor();
}

void CMsgRequestWeekendTourneySchedule::SharedDtor() {
}

void CMsgRequestWeekendTourneySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgRequestWeekendTourneySchedule::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgRequestWeekendTourneySchedule& CMsgRequestWeekendTourneySchedule::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgRequestWeekendTourneySchedule* CMsgRequestWeekendTourneySchedule::New(::google::protobuf::Arena* arena) const {
  CMsgRequestWeekendTourneySchedule* n = new CMsgRequestWeekendTourneySchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgRequestWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgRequestWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRequestWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRequestWeekendTourneySchedule)
  return false;
#undef DO_
}

void CMsgRequestWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRequestWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgRequestWeekendTourneySchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRequestWeekendTourneySchedule)
  return target;
}

size_t CMsgRequestWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestWeekendTourneySchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgRequestWeekendTourneySchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRequestWeekendTourneySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRequestWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgRequestWeekendTourneySchedule::Swap(CMsgRequestWeekendTourneySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestWeekendTourneySchedule::InternalSwap(CMsgRequestWeekendTourneySchedule* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgRequestWeekendTourneySchedule::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgRequestWeekendTourneySchedule

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneySchedule_Division::kDivisionCodeFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowCloseFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenNextFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTrophyIdFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kFreeWeekendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneySchedule.Division)
}
CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&division_code_, &from.division_code_,
    reinterpret_cast<char*>(&free_weekend_) -
    reinterpret_cast<char*>(&division_code_) + sizeof(free_weekend_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneySchedule.Division)
}

void CMsgWeekendTourneySchedule_Division::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&division_code_, 0, reinterpret_cast<char*>(&free_weekend_) -
    reinterpret_cast<char*>(&division_code_) + sizeof(free_weekend_));
}

CMsgWeekendTourneySchedule_Division::~CMsgWeekendTourneySchedule_Division() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneySchedule.Division)
  SharedDtor();
}

void CMsgWeekendTourneySchedule_Division::SharedDtor() {
}

void CMsgWeekendTourneySchedule_Division::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule_Division::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule_Division::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule_Division::New(::google::protobuf::Arena* arena) const {
  CMsgWeekendTourneySchedule_Division* n = new CMsgWeekendTourneySchedule_Division;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWeekendTourneySchedule_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&division_code_, 0, reinterpret_cast<char*>(&free_weekend_) -
      reinterpret_cast<char*>(&division_code_) + sizeof(free_weekend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWeekendTourneySchedule_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_division_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_time_window_open();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_window_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_open_next = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_time_window_open_next();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_next_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool free_weekend = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_free_weekend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_weekend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneySchedule.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneySchedule.Division)
  return false;
#undef DO_
}

void CMsgWeekendTourneySchedule_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_code(), output);
  }

  // optional uint32 time_window_open = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_window_open(), output);
  }

  // optional uint32 time_window_close = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_window_close(), output);
  }

  // optional uint32 time_window_open_next = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_window_open_next(), output);
  }

  // optional uint32 trophy_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trophy_id(), output);
  }

  // optional bool free_weekend = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->free_weekend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneySchedule.Division)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule_Division::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_code(), target);
  }

  // optional uint32 time_window_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_window_open(), target);
  }

  // optional uint32 time_window_close = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_window_close(), target);
  }

  // optional uint32 time_window_open_next = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_window_open_next(), target);
  }

  // optional uint32 trophy_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trophy_id(), target);
  }

  // optional bool free_weekend = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->free_weekend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneySchedule.Division)
  return target;
}

size_t CMsgWeekendTourneySchedule_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 division_code = 1;
    if (has_division_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_code());
    }

    // optional uint32 time_window_open = 2;
    if (has_time_window_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open());
    }

    // optional uint32 time_window_close = 3;
    if (has_time_window_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_close());
    }

    // optional uint32 time_window_open_next = 4;
    if (has_time_window_open_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open_next());
    }

    // optional uint32 trophy_id = 5;
    if (has_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional bool free_weekend = 6;
    if (has_free_weekend()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule_Division* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWeekendTourneySchedule_Division>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneySchedule.Division)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneySchedule.Division)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      division_code_ = from.division_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_window_open_ = from.time_window_open_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_window_close_ = from.time_window_close_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_window_open_next_ = from.time_window_open_next_;
    }
    if (cached_has_bits & 0x00000010u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_weekend_ = from.free_weekend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule_Division::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule_Division::Swap(CMsgWeekendTourneySchedule_Division* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneySchedule_Division::InternalSwap(CMsgWeekendTourneySchedule_Division* other) {
  std::swap(division_code_, other->division_code_);
  std::swap(time_window_open_, other->time_window_open_);
  std::swap(time_window_close_, other->time_window_close_);
  std::swap(time_window_open_next_, other->time_window_open_next_);
  std::swap(trophy_id_, other->trophy_id_);
  std::swap(free_weekend_, other->free_weekend_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule_Division::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWeekendTourneySchedule_Division

// optional uint32 division_code = 1;
bool CMsgWeekendTourneySchedule_Division::has_division_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_division_code() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_division_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWeekendTourneySchedule_Division::clear_division_code() {
  division_code_ = 0u;
  clear_has_division_code();
}
::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::division_code() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.division_code)
  return division_code_;
}
void CMsgWeekendTourneySchedule_Division::set_division_code(::google::protobuf::uint32 value) {
  set_has_division_code();
  division_code_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.division_code)
}

// optional uint32 time_window_open = 2;
bool CMsgWeekendTourneySchedule_Division::has_time_window_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_time_window_open() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_time_window_open() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWeekendTourneySchedule_Division::clear_time_window_open() {
  time_window_open_ = 0u;
  clear_has_time_window_open();
}
::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_open() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_open)
  return time_window_open_;
}
void CMsgWeekendTourneySchedule_Division::set_time_window_open(::google::protobuf::uint32 value) {
  set_has_time_window_open();
  time_window_open_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_open)
}

// optional uint32 time_window_close = 3;
bool CMsgWeekendTourneySchedule_Division::has_time_window_close() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_time_window_close() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_time_window_close() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWeekendTourneySchedule_Division::clear_time_window_close() {
  time_window_close_ = 0u;
  clear_has_time_window_close();
}
::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_close() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_close)
  return time_window_close_;
}
void CMsgWeekendTourneySchedule_Division::set_time_window_close(::google::protobuf::uint32 value) {
  set_has_time_window_close();
  time_window_close_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_close)
}

// optional uint32 time_window_open_next = 4;
bool CMsgWeekendTourneySchedule_Division::has_time_window_open_next() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_time_window_open_next() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_time_window_open_next() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWeekendTourneySchedule_Division::clear_time_window_open_next() {
  time_window_open_next_ = 0u;
  clear_has_time_window_open_next();
}
::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::time_window_open_next() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_open_next)
  return time_window_open_next_;
}
void CMsgWeekendTourneySchedule_Division::set_time_window_open_next(::google::protobuf::uint32 value) {
  set_has_time_window_open_next();
  time_window_open_next_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.time_window_open_next)
}

// optional uint32 trophy_id = 5;
bool CMsgWeekendTourneySchedule_Division::has_trophy_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_trophy_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_trophy_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgWeekendTourneySchedule_Division::clear_trophy_id() {
  trophy_id_ = 0u;
  clear_has_trophy_id();
}
::google::protobuf::uint32 CMsgWeekendTourneySchedule_Division::trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.trophy_id)
  return trophy_id_;
}
void CMsgWeekendTourneySchedule_Division::set_trophy_id(::google::protobuf::uint32 value) {
  set_has_trophy_id();
  trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.trophy_id)
}

// optional bool free_weekend = 6;
bool CMsgWeekendTourneySchedule_Division::has_free_weekend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgWeekendTourneySchedule_Division::set_has_free_weekend() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgWeekendTourneySchedule_Division::clear_has_free_weekend() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgWeekendTourneySchedule_Division::clear_free_weekend() {
  free_weekend_ = false;
  clear_has_free_weekend();
}
bool CMsgWeekendTourneySchedule_Division::free_weekend() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.Division.free_weekend)
  return free_weekend_;
}
void CMsgWeekendTourneySchedule_Division::set_free_weekend(bool value) {
  set_has_free_weekend();
  free_weekend_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneySchedule.Division.free_weekend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneySchedule::kDivisionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneySchedule)
}
CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneySchedule)
}

void CMsgWeekendTourneySchedule::SharedCtor() {
  _cached_size_ = 0;
}

CMsgWeekendTourneySchedule::~CMsgWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneySchedule)
  SharedDtor();
}

void CMsgWeekendTourneySchedule::SharedDtor() {
}

void CMsgWeekendTourneySchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneySchedule::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWeekendTourneySchedule& CMsgWeekendTourneySchedule::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWeekendTourneySchedule* CMsgWeekendTourneySchedule::New(::google::protobuf::Arena* arena) const {
  CMsgWeekendTourneySchedule* n = new CMsgWeekendTourneySchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneySchedule)
  divisions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneySchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneySchedule)
  return false;
#undef DO_
}

void CMsgWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  for (unsigned int i = 0, n = this->divisions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->divisions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  for (unsigned int i = 0, n = this->divisions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->divisions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneySchedule)
  return target;
}

size_t CMsgWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  {
    unsigned int count = this->divisions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->divisions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWeekendTourneySchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule::MergeFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule::CopyFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule::Swap(CMsgWeekendTourneySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneySchedule::InternalSwap(CMsgWeekendTourneySchedule* other) {
  divisions_.InternalSwap(&other->divisions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWeekendTourneySchedule

// repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
int CMsgWeekendTourneySchedule::divisions_size() const {
  return divisions_.size();
}
void CMsgWeekendTourneySchedule::clear_divisions() {
  divisions_.Clear();
}
const ::proto::dota::CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule::divisions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneySchedule.divisions)
  return divisions_.Get(index);
}
::proto::dota::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWeekendTourneySchedule.divisions)
  return divisions_.Mutable(index);
}
::proto::dota::CMsgWeekendTourneySchedule_Division* CMsgWeekendTourneySchedule::add_divisions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgWeekendTourneySchedule.divisions)
  return divisions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgWeekendTourneySchedule_Division >*
CMsgWeekendTourneySchedule::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgWeekendTourneySchedule.divisions)
  return &divisions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgWeekendTourneySchedule_Division >&
CMsgWeekendTourneySchedule::divisions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgWeekendTourneySchedule.divisions)
  return divisions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneyOpts::kParticipatingFieldNumber;
const int CMsgWeekendTourneyOpts::kDivisionIdFieldNumber;
const int CMsgWeekendTourneyOpts::kBuyinFieldNumber;
const int CMsgWeekendTourneyOpts::kSkillLevelFieldNumber;
const int CMsgWeekendTourneyOpts::kMatchGroupsFieldNumber;
const int CMsgWeekendTourneyOpts::kTeamIdFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamNameFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneyOpts)
}
CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pickup_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pickup_team_name()) {
    pickup_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_team_name_);
  }
  ::memcpy(&participating_, &from.participating_,
    reinterpret_cast<char*>(&pickup_team_logo_) -
    reinterpret_cast<char*>(&participating_) + sizeof(pickup_team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneyOpts)
}

void CMsgWeekendTourneyOpts::SharedCtor() {
  _cached_size_ = 0;
  pickup_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&participating_, 0, reinterpret_cast<char*>(&pickup_team_logo_) -
    reinterpret_cast<char*>(&participating_) + sizeof(pickup_team_logo_));
}

CMsgWeekendTourneyOpts::~CMsgWeekendTourneyOpts() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneyOpts)
  SharedDtor();
}

void CMsgWeekendTourneyOpts::SharedDtor() {
  pickup_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgWeekendTourneyOpts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneyOpts::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWeekendTourneyOpts& CMsgWeekendTourneyOpts::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWeekendTourneyOpts* CMsgWeekendTourneyOpts::New(::google::protobuf::Arena* arena) const {
  CMsgWeekendTourneyOpts* n = new CMsgWeekendTourneyOpts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWeekendTourneyOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneyOpts)
  if (has_pickup_team_name()) {
    GOOGLE_DCHECK(!pickup_team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*pickup_team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&participating_, 0, reinterpret_cast<char*>(&pickup_team_logo_) -
      reinterpret_cast<char*>(&participating_) + sizeof(pickup_team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWeekendTourneyOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneyOpts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool participating = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_participating();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buyin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_buyin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_groups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_match_groups();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pickup_team_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pickup_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pickup_team_name().data(), this->pickup_team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pickup_team_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_pickup_team_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pickup_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneyOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneyOpts)
  return false;
#undef DO_
}

void CMsgWeekendTourneyOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneyOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool participating = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->participating(), output);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 buyin = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buyin(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 match_groups = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_groups(), output);
  }

  // optional uint32 team_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id(), output);
  }

  // optional string pickup_team_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), this->pickup_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pickup_team_name(), output);
  }

  // optional uint64 pickup_team_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pickup_team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneyOpts)
}

::google::protobuf::uint8* CMsgWeekendTourneyOpts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneyOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool participating = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->participating(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 buyin = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buyin(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 match_groups = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_groups(), target);
  }

  // optional uint32 team_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id(), target);
  }

  // optional string pickup_team_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), this->pickup_team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pickup_team_name(), target);
  }

  // optional uint64 pickup_team_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pickup_team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneyOpts)
  return target;
}

size_t CMsgWeekendTourneyOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneyOpts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string pickup_team_name = 7;
    if (has_pickup_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pickup_team_name());
    }

    // optional bool participating = 1;
    if (has_participating()) {
      total_size += 1 + 1;
    }

    // optional uint32 division_id = 2;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 buyin = 3;
    if (has_buyin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyin());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 match_groups = 5;
    if (has_match_groups()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_groups());
    }

    // optional uint32 team_id = 6;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 pickup_team_logo = 8;
    if (has_pickup_team_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pickup_team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneyOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyOpts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWeekendTourneyOpts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneyOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneyOpts)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyOpts::MergeFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_pickup_team_name();
      pickup_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      participating_ = from.participating_;
    }
    if (cached_has_bits & 0x00000004u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      buyin_ = from.buyin_;
    }
    if (cached_has_bits & 0x00000010u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_groups_ = from.match_groups_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      pickup_team_logo_ = from.pickup_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneyOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyOpts::CopyFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyOpts::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyOpts::Swap(CMsgWeekendTourneyOpts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneyOpts::InternalSwap(CMsgWeekendTourneyOpts* other) {
  pickup_team_name_.Swap(&other->pickup_team_name_);
  std::swap(participating_, other->participating_);
  std::swap(division_id_, other->division_id_);
  std::swap(buyin_, other->buyin_);
  std::swap(skill_level_, other->skill_level_);
  std::swap(match_groups_, other->match_groups_);
  std::swap(team_id_, other->team_id_);
  std::swap(pickup_team_logo_, other->pickup_team_logo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWeekendTourneyOpts::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWeekendTourneyOpts

// optional bool participating = 1;
bool CMsgWeekendTourneyOpts::has_participating() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_participating() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgWeekendTourneyOpts::clear_has_participating() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgWeekendTourneyOpts::clear_participating() {
  participating_ = false;
  clear_has_participating();
}
bool CMsgWeekendTourneyOpts::participating() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.participating)
  return participating_;
}
void CMsgWeekendTourneyOpts::set_participating(bool value) {
  set_has_participating();
  participating_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.participating)
}

// optional uint32 division_id = 2;
bool CMsgWeekendTourneyOpts::has_division_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_division_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgWeekendTourneyOpts::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgWeekendTourneyOpts::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
::google::protobuf::uint32 CMsgWeekendTourneyOpts::division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.division_id)
  return division_id_;
}
void CMsgWeekendTourneyOpts::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.division_id)
}

// optional uint32 buyin = 3;
bool CMsgWeekendTourneyOpts::has_buyin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_buyin() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgWeekendTourneyOpts::clear_has_buyin() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgWeekendTourneyOpts::clear_buyin() {
  buyin_ = 0u;
  clear_has_buyin();
}
::google::protobuf::uint32 CMsgWeekendTourneyOpts::buyin() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.buyin)
  return buyin_;
}
void CMsgWeekendTourneyOpts::set_buyin(::google::protobuf::uint32 value) {
  set_has_buyin();
  buyin_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.buyin)
}

// optional uint32 skill_level = 4;
bool CMsgWeekendTourneyOpts::has_skill_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_skill_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgWeekendTourneyOpts::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgWeekendTourneyOpts::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
::google::protobuf::uint32 CMsgWeekendTourneyOpts::skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.skill_level)
  return skill_level_;
}
void CMsgWeekendTourneyOpts::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.skill_level)
}

// optional uint32 match_groups = 5;
bool CMsgWeekendTourneyOpts::has_match_groups() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_match_groups() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgWeekendTourneyOpts::clear_has_match_groups() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgWeekendTourneyOpts::clear_match_groups() {
  match_groups_ = 0u;
  clear_has_match_groups();
}
::google::protobuf::uint32 CMsgWeekendTourneyOpts::match_groups() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.match_groups)
  return match_groups_;
}
void CMsgWeekendTourneyOpts::set_match_groups(::google::protobuf::uint32 value) {
  set_has_match_groups();
  match_groups_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.match_groups)
}

// optional uint32 team_id = 6;
bool CMsgWeekendTourneyOpts::has_team_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_team_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgWeekendTourneyOpts::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgWeekendTourneyOpts::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgWeekendTourneyOpts::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.team_id)
  return team_id_;
}
void CMsgWeekendTourneyOpts::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.team_id)
}

// optional string pickup_team_name = 7;
bool CMsgWeekendTourneyOpts::has_pickup_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_pickup_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgWeekendTourneyOpts::clear_has_pickup_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgWeekendTourneyOpts::clear_pickup_team_name() {
  pickup_team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pickup_team_name();
}
const ::std::string& CMsgWeekendTourneyOpts::pickup_team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
  return pickup_team_name_.GetNoArena();
}
void CMsgWeekendTourneyOpts::set_pickup_team_name(const ::std::string& value) {
  set_has_pickup_team_name();
  pickup_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
}
#if LANG_CXX11
void CMsgWeekendTourneyOpts::set_pickup_team_name(::std::string&& value) {
  set_has_pickup_team_name();
  pickup_team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
}
#endif
void CMsgWeekendTourneyOpts::set_pickup_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pickup_team_name();
  pickup_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
}
void CMsgWeekendTourneyOpts::set_pickup_team_name(const char* value, size_t size) {
  set_has_pickup_team_name();
  pickup_team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
}
::std::string* CMsgWeekendTourneyOpts::mutable_pickup_team_name() {
  set_has_pickup_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
  return pickup_team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgWeekendTourneyOpts::release_pickup_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
  clear_has_pickup_team_name();
  return pickup_team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgWeekendTourneyOpts::set_allocated_pickup_team_name(::std::string* pickup_team_name) {
  if (pickup_team_name != NULL) {
    set_has_pickup_team_name();
  } else {
    clear_has_pickup_team_name();
  }
  pickup_team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pickup_team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgWeekendTourneyOpts.pickup_team_name)
}

// optional uint64 pickup_team_logo = 8;
bool CMsgWeekendTourneyOpts::has_pickup_team_logo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgWeekendTourneyOpts::set_has_pickup_team_logo() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgWeekendTourneyOpts::clear_has_pickup_team_logo() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgWeekendTourneyOpts::clear_pickup_team_logo() {
  pickup_team_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_pickup_team_logo();
}
::google::protobuf::uint64 CMsgWeekendTourneyOpts::pickup_team_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgWeekendTourneyOpts.pickup_team_logo)
  return pickup_team_logo_;
}
void CMsgWeekendTourneyOpts::set_pickup_team_logo(::google::protobuf::uint64 value) {
  set_has_pickup_team_logo();
  pickup_team_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgWeekendTourneyOpts.pickup_team_logo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneyLeave)
}
CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneyLeave)
}

void CMsgWeekendTourneyLeave::SharedCtor() {
  _cached_size_ = 0;
}

CMsgWeekendTourneyLeave::~CMsgWeekendTourneyLeave() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneyLeave)
  SharedDtor();
}

void CMsgWeekendTourneyLeave::SharedDtor() {
}

void CMsgWeekendTourneyLeave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgWeekendTourneyLeave::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgWeekendTourneyLeave& CMsgWeekendTourneyLeave::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgWeekendTourneyLeave* CMsgWeekendTourneyLeave::New(::google::protobuf::Arena* arena) const {
  CMsgWeekendTourneyLeave* n = new CMsgWeekendTourneyLeave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgWeekendTourneyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneyLeave)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgWeekendTourneyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneyLeave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneyLeave)
  return false;
#undef DO_
}

void CMsgWeekendTourneyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneyLeave)
}

::google::protobuf::uint8* CMsgWeekendTourneyLeave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneyLeave)
  return target;
}

size_t CMsgWeekendTourneyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneyLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgWeekendTourneyLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyLeave* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgWeekendTourneyLeave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneyLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneyLeave)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyLeave::MergeFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgWeekendTourneyLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyLeave::CopyFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyLeave::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyLeave::Swap(CMsgWeekendTourneyLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneyLeave::InternalSwap(CMsgWeekendTourneyLeave* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgWeekendTourneyLeave::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgWeekendTourneyLeave

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Team::kTeamGidFieldNumber;
const int CMsgDOTATournament_Team::kNodeOrStateFieldNumber;
const int CMsgDOTATournament_Team::kPlayersFieldNumber;
const int CMsgDOTATournament_Team::kPlayerBuyinFieldNumber;
const int CMsgDOTATournament_Team::kPlayerSkillLevelFieldNumber;
const int CMsgDOTATournament_Team::kMatchGroupMaskFieldNumber;
const int CMsgDOTATournament_Team::kTeamIdFieldNumber;
const int CMsgDOTATournament_Team::kTeamNameFieldNumber;
const int CMsgDOTATournament_Team::kTeamBaseLogoFieldNumber;
const int CMsgDOTATournament_Team::kTeamUiLogoFieldNumber;
const int CMsgDOTATournament_Team::kTeamDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Team::CMsgDOTATournament_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Team)
}
CMsgDOTATournament_Team::CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      player_buyin_(from.player_buyin_),
      player_skill_level_(from.player_skill_level_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_gid_, &from.team_gid_,
    reinterpret_cast<char*>(&match_group_mask_) -
    reinterpret_cast<char*>(&team_gid_) + sizeof(match_group_mask_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_gid_, 0, reinterpret_cast<char*>(&match_group_mask_) -
    reinterpret_cast<char*>(&team_gid_) + sizeof(match_group_mask_));
}

CMsgDOTATournament_Team::~CMsgDOTATournament_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Team)
  SharedDtor();
}

void CMsgDOTATournament_Team::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournament_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Team::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournament_Team& CMsgDOTATournament_Team::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournament_Team* CMsgDOTATournament_Team::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Team* n = new CMsgDOTATournament_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Team)
  players_.Clear();
  player_buyin_.Clear();
  player_skill_level_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&team_gid_, 0, reinterpret_cast<char*>(&match_group_mask_) -
      reinterpret_cast<char*>(&team_gid_) + sizeof(match_group_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournament_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 team_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_team_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_or_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_node_or_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 players = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournament.Team.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_team_base_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_ui_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_team_ui_logo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_buyin = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_buyin())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_player_buyin())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_skill_level = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_skill_level())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(80u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_player_skill_level())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_date = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_team_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_group_mask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_match_group_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_group_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Team)
  return false;
#undef DO_
}

void CMsgDOTATournament_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 team_gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->team_gid(), output);
  }

  // optional uint32 node_or_state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_or_state(), output);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_players_cached_byte_size_);
  }
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->players(i), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournament.Team.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name(), output);
  }

  // optional uint64 team_base_logo = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_base_logo(), output);
  }

  // optional uint64 team_ui_logo = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->team_ui_logo(), output);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_buyin_cached_byte_size_);
  }
  for (int i = 0, n = this->player_buyin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_buyin(i), output);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_skill_level_cached_byte_size_);
  }
  for (int i = 0, n = this->player_skill_level_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_skill_level(i), output);
  }

  // optional uint32 team_date = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->team_date(), output);
  }

  // optional uint32 match_group_mask = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->match_group_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Team)
}

::google::protobuf::uint8* CMsgDOTATournament_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 team_gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 node_or_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_or_state(), target);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _players_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->players_, target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournament.Team.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // optional uint64 team_base_logo = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_base_logo(), target);
  }

  // optional uint64 team_ui_logo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->team_ui_logo(), target);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _player_buyin_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_buyin_, target);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _player_skill_level_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_skill_level_, target);
  }

  // optional uint32 team_date = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->team_date(), target);
  }

  // optional uint32 match_group_mask = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->match_group_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Team)
  return target;
}

size_t CMsgDOTATournament_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 players = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _players_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_buyin_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_buyin_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_skill_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_skill_level_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 5;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_gid = 1;
    if (has_team_gid()) {
      total_size += 1 + 8;
    }

    // optional uint32 node_or_state = 2;
    if (has_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_or_state());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 team_base_logo = 7;
    if (has_team_base_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_ui_logo = 8;
    if (has_team_ui_logo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

    // optional uint32 team_date = 11;
    if (has_team_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_date());
    }

    // optional uint32 match_group_mask = 12;
    if (has_match_group_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_group_mask());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Team::MergeFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  player_buyin_.MergeFrom(from.player_buyin_);
  player_skill_level_.MergeFrom(from.player_skill_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_or_state_ = from.node_or_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_date_ = from.team_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      match_group_mask_ = from.match_group_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Team::CopyFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Team::Swap(CMsgDOTATournament_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Team::InternalSwap(CMsgDOTATournament_Team* other) {
  players_.InternalSwap(&other->players_);
  player_buyin_.InternalSwap(&other->player_buyin_);
  player_skill_level_.InternalSwap(&other->player_skill_level_);
  team_name_.Swap(&other->team_name_);
  std::swap(team_gid_, other->team_gid_);
  std::swap(node_or_state_, other->node_or_state_);
  std::swap(team_id_, other->team_id_);
  std::swap(team_base_logo_, other->team_base_logo_);
  std::swap(team_ui_logo_, other->team_ui_logo_);
  std::swap(team_date_, other->team_date_);
  std::swap(match_group_mask_, other->match_group_mask_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Team::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournament_Team

// optional fixed64 team_gid = 1;
bool CMsgDOTATournament_Team::has_team_gid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_gid() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Team::clear_has_team_gid() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Team::clear_team_gid() {
  team_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_team_gid();
}
::google::protobuf::uint64 CMsgDOTATournament_Team::team_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_gid)
  return team_gid_;
}
void CMsgDOTATournament_Team::set_team_gid(::google::protobuf::uint64 value) {
  set_has_team_gid();
  team_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_gid)
}

// optional uint32 node_or_state = 2;
bool CMsgDOTATournament_Team::has_node_or_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Team::set_has_node_or_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Team::clear_has_node_or_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Team::clear_node_or_state() {
  node_or_state_ = 0u;
  clear_has_node_or_state();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::node_or_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.node_or_state)
  return node_or_state_;
}
void CMsgDOTATournament_Team::set_node_or_state(::google::protobuf::uint32 value) {
  set_has_node_or_state();
  node_or_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.node_or_state)
}

// repeated uint32 players = 3 [packed = true];
int CMsgDOTATournament_Team::players_size() const {
  return players_.size();
}
void CMsgDOTATournament_Team::clear_players() {
  players_.Clear();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.players)
  return players_.Get(index);
}
void CMsgDOTATournament_Team::set_players(int index, ::google::protobuf::uint32 value) {
  players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.players)
}
void CMsgDOTATournament_Team::add_players(::google::protobuf::uint32 value) {
  players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.Team.players)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.Team.players)
  return players_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.Team.players)
  return &players_;
}

// repeated uint32 player_buyin = 9 [packed = true];
int CMsgDOTATournament_Team::player_buyin_size() const {
  return player_buyin_.size();
}
void CMsgDOTATournament_Team::clear_player_buyin() {
  player_buyin_.Clear();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::player_buyin(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.player_buyin)
  return player_buyin_.Get(index);
}
void CMsgDOTATournament_Team::set_player_buyin(int index, ::google::protobuf::uint32 value) {
  player_buyin_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.player_buyin)
}
void CMsgDOTATournament_Team::add_player_buyin(::google::protobuf::uint32 value) {
  player_buyin_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.Team.player_buyin)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::player_buyin() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.Team.player_buyin)
  return player_buyin_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_player_buyin() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.Team.player_buyin)
  return &player_buyin_;
}

// repeated uint32 player_skill_level = 10 [packed = true];
int CMsgDOTATournament_Team::player_skill_level_size() const {
  return player_skill_level_.size();
}
void CMsgDOTATournament_Team::clear_player_skill_level() {
  player_skill_level_.Clear();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::player_skill_level(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.player_skill_level)
  return player_skill_level_.Get(index);
}
void CMsgDOTATournament_Team::set_player_skill_level(int index, ::google::protobuf::uint32 value) {
  player_skill_level_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.player_skill_level)
}
void CMsgDOTATournament_Team::add_player_skill_level(::google::protobuf::uint32 value) {
  player_skill_level_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.Team.player_skill_level)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournament_Team::player_skill_level() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.Team.player_skill_level)
  return player_skill_level_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournament_Team::mutable_player_skill_level() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.Team.player_skill_level)
  return &player_skill_level_;
}

// optional uint32 match_group_mask = 12;
bool CMsgDOTATournament_Team::has_match_group_mask() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament_Team::set_has_match_group_mask() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament_Team::clear_has_match_group_mask() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament_Team::clear_match_group_mask() {
  match_group_mask_ = 0u;
  clear_has_match_group_mask();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::match_group_mask() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.match_group_mask)
  return match_group_mask_;
}
void CMsgDOTATournament_Team::set_match_group_mask(::google::protobuf::uint32 value) {
  set_has_match_group_mask();
  match_group_mask_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.match_group_mask)
}

// optional uint32 team_id = 4;
bool CMsgDOTATournament_Team::has_team_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament_Team::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament_Team::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_id)
  return team_id_;
}
void CMsgDOTATournament_Team::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_id)
}

// optional string team_name = 5;
bool CMsgDOTATournament_Team::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Team::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Team::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTATournament_Team::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTATournament_Team::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_name)
}
#if LANG_CXX11
void CMsgDOTATournament_Team::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTATournament.Team.team_name)
}
#endif
void CMsgDOTATournament_Team::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTATournament.Team.team_name)
}
void CMsgDOTATournament_Team::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTATournament.Team.team_name)
}
::std::string* CMsgDOTATournament_Team::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournament.Team.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTATournament_Team::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournament.Team.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTATournament_Team::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournament.Team.team_name)
}

// optional uint64 team_base_logo = 7;
bool CMsgDOTATournament_Team::has_team_base_logo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_base_logo() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament_Team::clear_has_team_base_logo() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament_Team::clear_team_base_logo() {
  team_base_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_base_logo();
}
::google::protobuf::uint64 CMsgDOTATournament_Team::team_base_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_base_logo)
  return team_base_logo_;
}
void CMsgDOTATournament_Team::set_team_base_logo(::google::protobuf::uint64 value) {
  set_has_team_base_logo();
  team_base_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_base_logo)
}

// optional uint64 team_ui_logo = 8;
bool CMsgDOTATournament_Team::has_team_ui_logo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_ui_logo() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament_Team::clear_has_team_ui_logo() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament_Team::clear_team_ui_logo() {
  team_ui_logo_ = GOOGLE_ULONGLONG(0);
  clear_has_team_ui_logo();
}
::google::protobuf::uint64 CMsgDOTATournament_Team::team_ui_logo() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_ui_logo)
  return team_ui_logo_;
}
void CMsgDOTATournament_Team::set_team_ui_logo(::google::protobuf::uint64 value) {
  set_has_team_ui_logo();
  team_ui_logo_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_ui_logo)
}

// optional uint32 team_date = 11;
bool CMsgDOTATournament_Team::has_team_date() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament_Team::set_has_team_date() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament_Team::clear_has_team_date() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament_Team::clear_team_date() {
  team_date_ = 0u;
  clear_has_team_date();
}
::google::protobuf::uint32 CMsgDOTATournament_Team::team_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Team.team_date)
  return team_date_;
}
void CMsgDOTATournament_Team::set_team_date(::google::protobuf::uint32 value) {
  set_has_team_date();
  team_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Team.team_date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Game::kNodeIdxFieldNumber;
const int CMsgDOTATournament_Game::kLobbyIdFieldNumber;
const int CMsgDOTATournament_Game::kMatchIdFieldNumber;
const int CMsgDOTATournament_Game::kTeamAGoodFieldNumber;
const int CMsgDOTATournament_Game::kStateFieldNumber;
const int CMsgDOTATournament_Game::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Game::CMsgDOTATournament_Game()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Game)
}
CMsgDOTATournament_Game::CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(start_time_));
}

CMsgDOTATournament_Game::~CMsgDOTATournament_Game() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Game)
  SharedDtor();
}

void CMsgDOTATournament_Game::SharedDtor() {
}

void CMsgDOTATournament_Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Game::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournament_Game& CMsgDOTATournament_Game::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournament_Game* CMsgDOTATournament_Game::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Game* n = new CMsgDOTATournament_Game;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Game)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournament_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Game)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool team_a_good = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_a_good();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_a_good_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentGameState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Game)
  return false;
#undef DO_
}

void CMsgDOTATournament_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_idx(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional bool team_a_good = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->team_a_good(), output);
  }

  // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Game)
}

::google::protobuf::uint8* CMsgDOTATournament_Game::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_idx(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional bool team_a_good = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->team_a_good(), target);
  }

  // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Game)
  return target;
}

size_t CMsgDOTATournament_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional fixed64 lobby_id = 2;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional uint32 node_idx = 1;
    if (has_node_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_idx());
    }

    // optional bool team_a_good = 4;
    if (has_team_a_good()) {
      total_size += 1 + 1;
    }

    // optional uint64 match_id = 3;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 start_time = 6;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Game* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Game>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Game)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Game::MergeFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_idx_ = from.node_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_a_good_ = from.team_a_good_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Game::CopyFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Game::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Game::Swap(CMsgDOTATournament_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Game::InternalSwap(CMsgDOTATournament_Game* other) {
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(node_idx_, other->node_idx_);
  std::swap(team_a_good_, other->team_a_good_);
  std::swap(match_id_, other->match_id_);
  std::swap(state_, other->state_);
  std::swap(start_time_, other->start_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Game::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournament_Game

// optional uint32 node_idx = 1;
bool CMsgDOTATournament_Game::has_node_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Game::set_has_node_idx() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Game::clear_has_node_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Game::clear_node_idx() {
  node_idx_ = 0u;
  clear_has_node_idx();
}
::google::protobuf::uint32 CMsgDOTATournament_Game::node_idx() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.node_idx)
  return node_idx_;
}
void CMsgDOTATournament_Game::set_node_idx(::google::protobuf::uint32 value) {
  set_has_node_idx();
  node_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.node_idx)
}

// optional fixed64 lobby_id = 2;
bool CMsgDOTATournament_Game::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Game::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Game::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Game::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CMsgDOTATournament_Game::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.lobby_id)
  return lobby_id_;
}
void CMsgDOTATournament_Game::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.lobby_id)
}

// optional uint64 match_id = 3;
bool CMsgDOTATournament_Game::has_match_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament_Game::set_has_match_id() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament_Game::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament_Game::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTATournament_Game::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.match_id)
  return match_id_;
}
void CMsgDOTATournament_Game::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.match_id)
}

// optional bool team_a_good = 4;
bool CMsgDOTATournament_Game::has_team_a_good() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Game::set_has_team_a_good() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Game::clear_has_team_a_good() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Game::clear_team_a_good() {
  team_a_good_ = false;
  clear_has_team_a_good();
}
bool CMsgDOTATournament_Game::team_a_good() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.team_a_good)
  return team_a_good_;
}
void CMsgDOTATournament_Game::set_team_a_good(bool value) {
  set_has_team_a_good();
  team_a_good_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.team_a_good)
}

// optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
bool CMsgDOTATournament_Game::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament_Game::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament_Game::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament_Game::clear_state() {
  state_ = 0;
  clear_has_state();
}
::proto::dota::ETournamentGameState CMsgDOTATournament_Game::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.state)
  return static_cast< ::proto::dota::ETournamentGameState >(state_);
}
void CMsgDOTATournament_Game::set_state(::proto::dota::ETournamentGameState value) {
  assert(::proto::dota::ETournamentGameState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.state)
}

// optional uint32 start_time = 6;
bool CMsgDOTATournament_Game::has_start_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament_Game::set_has_start_time() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament_Game::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament_Game::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTATournament_Game::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Game.start_time)
  return start_time_;
}
void CMsgDOTATournament_Game::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Game.start_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Node::kNodeIdFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxAFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxBFieldNumber;
const int CMsgDOTATournament_Node::kNodeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Node::CMsgDOTATournament_Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Node)
}
CMsgDOTATournament_Node::CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    reinterpret_cast<char*>(&node_state_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(node_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&node_id_, 0, reinterpret_cast<char*>(&node_state_) -
    reinterpret_cast<char*>(&node_id_) + sizeof(node_state_));
}

CMsgDOTATournament_Node::~CMsgDOTATournament_Node() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Node)
  SharedDtor();
}

void CMsgDOTATournament_Node::SharedDtor() {
}

void CMsgDOTATournament_Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament_Node::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournament_Node& CMsgDOTATournament_Node::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournament_Node* CMsgDOTATournament_Node::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament_Node* n = new CMsgDOTATournament_Node;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Node)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&node_id_, 0, reinterpret_cast<char*>(&node_state_) -
      reinterpret_cast<char*>(&node_id_) + sizeof(node_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournament_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_node_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_idx_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_team_idx_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_idx_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_team_idx_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentNodeState_IsValid(value)) {
            set_node_state(static_cast< ::proto::dota::ETournamentNodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Node)
  return false;
#undef DO_
}

void CMsgDOTATournament_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional uint32 team_idx_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_idx_a(), output);
  }

  // optional uint32 team_idx_b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_idx_b(), output);
  }

  // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->node_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Node)
}

::google::protobuf::uint8* CMsgDOTATournament_Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional uint32 team_idx_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_idx_a(), target);
  }

  // optional uint32 team_idx_b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_idx_b(), target);
  }

  // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->node_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Node)
  return target;
}

size_t CMsgDOTATournament_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 team_idx_a = 2;
    if (has_team_idx_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_a());
    }

    // optional uint32 team_idx_b = 3;
    if (has_team_idx_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_b());
    }

    // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
    if (has_node_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament_Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Node)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Node::MergeFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_idx_a_ = from.team_idx_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_idx_b_ = from.team_idx_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      node_state_ = from.node_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Node::CopyFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Node::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Node::Swap(CMsgDOTATournament_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Node::InternalSwap(CMsgDOTATournament_Node* other) {
  std::swap(node_id_, other->node_id_);
  std::swap(team_idx_a_, other->team_idx_a_);
  std::swap(team_idx_b_, other->team_idx_b_);
  std::swap(node_state_, other->node_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament_Node::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournament_Node

// optional uint32 node_id = 1;
bool CMsgDOTATournament_Node::has_node_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament_Node::set_has_node_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament_Node::clear_has_node_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament_Node::clear_node_id() {
  node_id_ = 0u;
  clear_has_node_id();
}
::google::protobuf::uint32 CMsgDOTATournament_Node::node_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Node.node_id)
  return node_id_;
}
void CMsgDOTATournament_Node::set_node_id(::google::protobuf::uint32 value) {
  set_has_node_id();
  node_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Node.node_id)
}

// optional uint32 team_idx_a = 2;
bool CMsgDOTATournament_Node::has_team_idx_a() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament_Node::set_has_team_idx_a() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament_Node::clear_has_team_idx_a() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament_Node::clear_team_idx_a() {
  team_idx_a_ = 0u;
  clear_has_team_idx_a();
}
::google::protobuf::uint32 CMsgDOTATournament_Node::team_idx_a() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Node.team_idx_a)
  return team_idx_a_;
}
void CMsgDOTATournament_Node::set_team_idx_a(::google::protobuf::uint32 value) {
  set_has_team_idx_a();
  team_idx_a_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Node.team_idx_a)
}

// optional uint32 team_idx_b = 3;
bool CMsgDOTATournament_Node::has_team_idx_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament_Node::set_has_team_idx_b() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament_Node::clear_has_team_idx_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament_Node::clear_team_idx_b() {
  team_idx_b_ = 0u;
  clear_has_team_idx_b();
}
::google::protobuf::uint32 CMsgDOTATournament_Node::team_idx_b() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Node.team_idx_b)
  return team_idx_b_;
}
void CMsgDOTATournament_Node::set_team_idx_b(::google::protobuf::uint32 value) {
  set_has_team_idx_b();
  team_idx_b_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Node.team_idx_b)
}

// optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
bool CMsgDOTATournament_Node::has_node_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament_Node::set_has_node_state() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament_Node::clear_has_node_state() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament_Node::clear_node_state() {
  node_state_ = 0;
  clear_has_node_state();
}
::proto::dota::ETournamentNodeState CMsgDOTATournament_Node::node_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.Node.node_state)
  return static_cast< ::proto::dota::ETournamentNodeState >(node_state_);
}
void CMsgDOTATournament_Node::set_node_state(::proto::dota::ETournamentNodeState value) {
  assert(::proto::dota::ETournamentNodeState_IsValid(value));
  set_has_node_state();
  node_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.Node.node_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament::kTournamentIdFieldNumber;
const int CMsgDOTATournament::kDivisionIdFieldNumber;
const int CMsgDOTATournament::kScheduleTimeFieldNumber;
const int CMsgDOTATournament::kSkillLevelFieldNumber;
const int CMsgDOTATournament::kTournamentTemplateFieldNumber;
const int CMsgDOTATournament::kStateFieldNumber;
const int CMsgDOTATournament::kStateSeqNumFieldNumber;
const int CMsgDOTATournament::kSeasonTrophyIdFieldNumber;
const int CMsgDOTATournament::kTeamsFieldNumber;
const int CMsgDOTATournament::kGamesFieldNumber;
const int CMsgDOTATournament::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament::CMsgDOTATournament()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament)
}
CMsgDOTATournament::CMsgDOTATournament(const CMsgDOTATournament& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_),
      games_(from.games_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament)
}

void CMsgDOTATournament::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
}

CMsgDOTATournament::~CMsgDOTATournament() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament)
  SharedDtor();
}

void CMsgDOTATournament::SharedDtor() {
}

void CMsgDOTATournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournament::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournament& CMsgDOTATournament::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournament* CMsgDOTATournament::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournament* n = new CMsgDOTATournament;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournament::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament)
  teams_.Clear();
  games_.Clear();
  nodes_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 schedule_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_schedule_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentTemplate_IsValid(value)) {
            set_tournament_template(static_cast< ::proto::dota::ETournamentTemplate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state_seq_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_state_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament)
  return false;
#undef DO_
}

void CMsgDOTATournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 schedule_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_time(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tournament_template(), output);
  }

  // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->teams(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->games(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nodes(i), output);
  }

  // optional uint32 state_seq_num = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state_seq_num(), output);
  }

  // optional uint32 season_trophy_id = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament)
}

::google::protobuf::uint8* CMsgDOTATournament::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 schedule_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_time(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tournament_template(), target);
  }

  // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->teams(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  for (unsigned int i = 0, n = this->games_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->games(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  for (unsigned int i = 0, n = this->nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->nodes(i), deterministic, target);
  }

  // optional uint32 state_seq_num = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state_seq_num(), target);
  }

  // optional uint32 season_trophy_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament)
  return target;
}

size_t CMsgDOTATournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  {
    unsigned int count = this->games_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->games(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  {
    unsigned int count = this->nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodes(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 2;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 3;
    if (has_schedule_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

    // optional uint32 skill_level = 4;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
    if (has_tournament_template()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tournament_template());
    }

    // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 state_seq_num = 10;
    if (has_state_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

    // optional uint32 season_trophy_id = 11;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournament::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournament>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament::MergeFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  games_.MergeFrom(from.games_);
  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      schedule_time_ = from.schedule_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_template_ = from.tournament_template_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_seq_num_ = from.state_seq_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament::CopyFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament::IsInitialized() const {
  return true;
}

void CMsgDOTATournament::Swap(CMsgDOTATournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament::InternalSwap(CMsgDOTATournament* other) {
  teams_.InternalSwap(&other->teams_);
  games_.InternalSwap(&other->games_);
  nodes_.InternalSwap(&other->nodes_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(division_id_, other->division_id_);
  std::swap(schedule_time_, other->schedule_time_);
  std::swap(skill_level_, other->skill_level_);
  std::swap(tournament_template_, other->tournament_template_);
  std::swap(state_, other->state_);
  std::swap(state_seq_num_, other->state_seq_num_);
  std::swap(season_trophy_id_, other->season_trophy_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournament::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournament

// optional uint32 tournament_id = 1;
bool CMsgDOTATournament::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournament::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournament::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournament::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTATournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.tournament_id)
  return tournament_id_;
}
void CMsgDOTATournament::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.tournament_id)
}

// optional uint32 division_id = 2;
bool CMsgDOTATournament::has_division_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournament::set_has_division_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournament::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournament::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
::google::protobuf::uint32 CMsgDOTATournament::division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.division_id)
  return division_id_;
}
void CMsgDOTATournament::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.division_id)
}

// optional uint32 schedule_time = 3;
bool CMsgDOTATournament::has_schedule_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournament::set_has_schedule_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournament::clear_has_schedule_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournament::clear_schedule_time() {
  schedule_time_ = 0u;
  clear_has_schedule_time();
}
::google::protobuf::uint32 CMsgDOTATournament::schedule_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.schedule_time)
  return schedule_time_;
}
void CMsgDOTATournament::set_schedule_time(::google::protobuf::uint32 value) {
  set_has_schedule_time();
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.schedule_time)
}

// optional uint32 skill_level = 4;
bool CMsgDOTATournament::has_skill_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournament::set_has_skill_level() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournament::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournament::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
::google::protobuf::uint32 CMsgDOTATournament::skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.skill_level)
  return skill_level_;
}
void CMsgDOTATournament::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.skill_level)
}

// optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
bool CMsgDOTATournament::has_tournament_template() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTATournament::set_has_tournament_template() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTATournament::clear_has_tournament_template() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTATournament::clear_tournament_template() {
  tournament_template_ = 0;
  clear_has_tournament_template();
}
::proto::dota::ETournamentTemplate CMsgDOTATournament::tournament_template() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.tournament_template)
  return static_cast< ::proto::dota::ETournamentTemplate >(tournament_template_);
}
void CMsgDOTATournament::set_tournament_template(::proto::dota::ETournamentTemplate value) {
  assert(::proto::dota::ETournamentTemplate_IsValid(value));
  set_has_tournament_template();
  tournament_template_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.tournament_template)
}

// optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
bool CMsgDOTATournament::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTATournament::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTATournament::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTATournament::clear_state() {
  state_ = 0;
  clear_has_state();
}
::proto::dota::ETournamentState CMsgDOTATournament::state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.state)
  return static_cast< ::proto::dota::ETournamentState >(state_);
}
void CMsgDOTATournament::set_state(::proto::dota::ETournamentState value) {
  assert(::proto::dota::ETournamentState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.state)
}

// optional uint32 state_seq_num = 10;
bool CMsgDOTATournament::has_state_seq_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTATournament::set_has_state_seq_num() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTATournament::clear_has_state_seq_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTATournament::clear_state_seq_num() {
  state_seq_num_ = 0u;
  clear_has_state_seq_num();
}
::google::protobuf::uint32 CMsgDOTATournament::state_seq_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.state_seq_num)
  return state_seq_num_;
}
void CMsgDOTATournament::set_state_seq_num(::google::protobuf::uint32 value) {
  set_has_state_seq_num();
  state_seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.state_seq_num)
}

// optional uint32 season_trophy_id = 11;
bool CMsgDOTATournament::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTATournament::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTATournament::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTATournament::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTATournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.season_trophy_id)
  return season_trophy_id_;
}
void CMsgDOTATournament::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournament.season_trophy_id)
}

// repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
int CMsgDOTATournament::teams_size() const {
  return teams_.size();
}
void CMsgDOTATournament::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CMsgDOTATournament_Team& CMsgDOTATournament::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.teams)
  return teams_.Get(index);
}
::proto::dota::CMsgDOTATournament_Team* CMsgDOTATournament::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournament.teams)
  return teams_.Mutable(index);
}
::proto::dota::CMsgDOTATournament_Team* CMsgDOTATournament::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Team >*
CMsgDOTATournament::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Team >&
CMsgDOTATournament::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.teams)
  return teams_;
}

// repeated .proto.dota.CMsgDOTATournament.Game games = 8;
int CMsgDOTATournament::games_size() const {
  return games_.size();
}
void CMsgDOTATournament::clear_games() {
  games_.Clear();
}
const ::proto::dota::CMsgDOTATournament_Game& CMsgDOTATournament::games(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.games)
  return games_.Get(index);
}
::proto::dota::CMsgDOTATournament_Game* CMsgDOTATournament::mutable_games(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournament.games)
  return games_.Mutable(index);
}
::proto::dota::CMsgDOTATournament_Game* CMsgDOTATournament::add_games() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.games)
  return games_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Game >*
CMsgDOTATournament::mutable_games() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.games)
  return &games_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Game >&
CMsgDOTATournament::games() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.games)
  return games_;
}

// repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
int CMsgDOTATournament::nodes_size() const {
  return nodes_.size();
}
void CMsgDOTATournament::clear_nodes() {
  nodes_.Clear();
}
const ::proto::dota::CMsgDOTATournament_Node& CMsgDOTATournament::nodes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournament.nodes)
  return nodes_.Get(index);
}
::proto::dota::CMsgDOTATournament_Node* CMsgDOTATournament::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournament.nodes)
  return nodes_.Mutable(index);
}
::proto::dota::CMsgDOTATournament_Node* CMsgDOTATournament::add_nodes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournament.nodes)
  return nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Node >*
CMsgDOTATournament::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournament.nodes)
  return &nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournament_Node >&
CMsgDOTATournament::nodes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournament.nodes)
  return nodes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange_GameChange::kMatchIdFieldNumber;
const int CMsgDOTATournamentStateChange_GameChange::kNewStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}
CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(new_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}

void CMsgDOTATournamentStateChange_GameChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&match_id_, 0, reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(new_state_));
}

CMsgDOTATournamentStateChange_GameChange::~CMsgDOTATournamentStateChange_GameChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_GameChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange_GameChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_GameChange::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange_GameChange::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange_GameChange::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentStateChange_GameChange* n = new CMsgDOTATournamentStateChange_GameChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentStateChange_GameChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&new_state_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(new_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentStateChange_GameChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentGameState_IsValid(value)) {
            set_new_state(static_cast< ::proto::dota::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange_GameChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_GameChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_GameChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
    if (has_new_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_GameChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentStateChange_GameChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange.GameChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange.GameChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_state_ = from.new_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_GameChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_GameChange::Swap(CMsgDOTATournamentStateChange_GameChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange_GameChange::InternalSwap(CMsgDOTATournamentStateChange_GameChange* other) {
  std::swap(match_id_, other->match_id_);
  std::swap(new_state_, other->new_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_GameChange::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentStateChange_GameChange

// optional uint64 match_id = 1;
bool CMsgDOTATournamentStateChange_GameChange::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentStateChange_GameChange::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentStateChange_GameChange::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentStateChange_GameChange::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CMsgDOTATournamentStateChange_GameChange::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.GameChange.match_id)
  return match_id_;
}
void CMsgDOTATournamentStateChange_GameChange::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.GameChange.match_id)
}

// optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
bool CMsgDOTATournamentStateChange_GameChange::has_new_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentStateChange_GameChange::set_has_new_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentStateChange_GameChange::clear_has_new_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentStateChange_GameChange::clear_new_state() {
  new_state_ = 0;
  clear_has_new_state();
}
::proto::dota::ETournamentGameState CMsgDOTATournamentStateChange_GameChange::new_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.GameChange.new_state)
  return static_cast< ::proto::dota::ETournamentGameState >(new_state_);
}
void CMsgDOTATournamentStateChange_GameChange::set_new_state(::proto::dota::ETournamentGameState value) {
  assert(::proto::dota::ETournamentGameState_IsValid(value));
  set_has_new_state();
  new_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.GameChange.new_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange_TeamChange::kTeamGidFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kNewNodeOrStateFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kOldNodeOrStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}
CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_gid_, &from.team_gid_,
    reinterpret_cast<char*>(&old_node_or_state_) -
    reinterpret_cast<char*>(&team_gid_) + sizeof(old_node_or_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}

void CMsgDOTATournamentStateChange_TeamChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&team_gid_, 0, reinterpret_cast<char*>(&old_node_or_state_) -
    reinterpret_cast<char*>(&team_gid_) + sizeof(old_node_or_state_));
}

CMsgDOTATournamentStateChange_TeamChange::~CMsgDOTATournamentStateChange_TeamChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_TeamChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange_TeamChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange_TeamChange::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange_TeamChange::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange_TeamChange::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentStateChange_TeamChange* n = new CMsgDOTATournamentStateChange_TeamChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentStateChange_TeamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&team_gid_, 0, reinterpret_cast<char*>(&old_node_or_state_) -
      reinterpret_cast<char*>(&team_gid_) + sizeof(old_node_or_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentStateChange_TeamChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_team_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_node_or_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_new_node_or_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 old_node_or_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_old_node_or_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange_TeamChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 team_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_gid(), output);
  }

  // optional uint32 new_node_or_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_node_or_state(), output);
  }

  // optional uint32 old_node_or_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_node_or_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_TeamChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 team_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 new_node_or_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_node_or_state(), target);
  }

  // optional uint32 old_node_or_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_node_or_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_TeamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 team_gid = 1;
    if (has_team_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_gid());
    }

    // optional uint32 new_node_or_state = 2;
    if (has_new_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_node_or_state());
    }

    // optional uint32 old_node_or_state = 3;
    if (has_old_node_or_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_node_or_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_TeamChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentStateChange_TeamChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_node_or_state_ = from.new_node_or_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_node_or_state_ = from.old_node_or_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_TeamChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_TeamChange::Swap(CMsgDOTATournamentStateChange_TeamChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange_TeamChange::InternalSwap(CMsgDOTATournamentStateChange_TeamChange* other) {
  std::swap(team_gid_, other->team_gid_);
  std::swap(new_node_or_state_, other->new_node_or_state_);
  std::swap(old_node_or_state_, other->old_node_or_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_TeamChange::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentStateChange_TeamChange

// optional uint64 team_gid = 1;
bool CMsgDOTATournamentStateChange_TeamChange::has_team_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentStateChange_TeamChange::set_has_team_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_has_team_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_team_gid() {
  team_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_team_gid();
}
::google::protobuf::uint64 CMsgDOTATournamentStateChange_TeamChange::team_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.TeamChange.team_gid)
  return team_gid_;
}
void CMsgDOTATournamentStateChange_TeamChange::set_team_gid(::google::protobuf::uint64 value) {
  set_has_team_gid();
  team_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.TeamChange.team_gid)
}

// optional uint32 new_node_or_state = 2;
bool CMsgDOTATournamentStateChange_TeamChange::has_new_node_or_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentStateChange_TeamChange::set_has_new_node_or_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_has_new_node_or_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_new_node_or_state() {
  new_node_or_state_ = 0u;
  clear_has_new_node_or_state();
}
::google::protobuf::uint32 CMsgDOTATournamentStateChange_TeamChange::new_node_or_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
  return new_node_or_state_;
}
void CMsgDOTATournamentStateChange_TeamChange::set_new_node_or_state(::google::protobuf::uint32 value) {
  set_has_new_node_or_state();
  new_node_or_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.TeamChange.new_node_or_state)
}

// optional uint32 old_node_or_state = 3;
bool CMsgDOTATournamentStateChange_TeamChange::has_old_node_or_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentStateChange_TeamChange::set_has_old_node_or_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_has_old_node_or_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentStateChange_TeamChange::clear_old_node_or_state() {
  old_node_or_state_ = 0u;
  clear_has_old_node_or_state();
}
::google::protobuf::uint32 CMsgDOTATournamentStateChange_TeamChange::old_node_or_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
  return old_node_or_state_;
}
void CMsgDOTATournamentStateChange_TeamChange::set_old_node_or_state(::google::protobuf::uint32 value) {
  set_has_old_node_or_state();
  old_node_or_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.TeamChange.old_node_or_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange::kNewTournamentIdFieldNumber;
const int CMsgDOTATournamentStateChange::kEventFieldNumber;
const int CMsgDOTATournamentStateChange::kNewTournamentStateFieldNumber;
const int CMsgDOTATournamentStateChange::kGameChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kTeamChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kMergedTournamentIdsFieldNumber;
const int CMsgDOTATournamentStateChange::kStateSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange)
}
CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      game_changes_(from.game_changes_),
      team_changes_(from.team_changes_),
      merged_tournament_ids_(from.merged_tournament_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_tournament_id_, &from.new_tournament_id_,
    reinterpret_cast<char*>(&state_seq_num_) -
    reinterpret_cast<char*>(&new_tournament_id_) + sizeof(state_seq_num_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange)
}

void CMsgDOTATournamentStateChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&new_tournament_id_, 0, reinterpret_cast<char*>(&state_seq_num_) -
    reinterpret_cast<char*>(&new_tournament_id_) + sizeof(state_seq_num_));
}

CMsgDOTATournamentStateChange::~CMsgDOTATournamentStateChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentStateChange::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentStateChange& CMsgDOTATournamentStateChange::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentStateChange* CMsgDOTATournamentStateChange::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentStateChange* n = new CMsgDOTATournamentStateChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange)
  game_changes_.Clear();
  team_changes_.Clear();
  merged_tournament_ids_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&new_tournament_id_, 0, reinterpret_cast<char*>(&state_seq_num_) -
      reinterpret_cast<char*>(&new_tournament_id_) + sizeof(state_seq_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_new_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::ETournamentEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentState_IsValid(value)) {
            set_new_tournament_state(static_cast< ::proto::dota::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_game_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 merged_tournament_ids = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_merged_tournament_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(48u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_merged_tournament_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state_seq_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_state_seq_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange)
  return false;
#undef DO_
}

void CMsgDOTATournamentStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_tournament_id(), output);
  }

  // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event(), output);
  }

  // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_tournament_state(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (unsigned int i = 0, n = this->game_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_changes(i), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (unsigned int i = 0, n = this->team_changes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->team_changes(i), output);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_merged_tournament_ids_cached_byte_size_);
  }
  for (int i = 0, n = this->merged_tournament_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->merged_tournament_ids(i), output);
  }

  // optional uint32 state_seq_num = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state_seq_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_tournament_id(), target);
  }

  // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event(), target);
  }

  // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_tournament_state(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (unsigned int i = 0, n = this->game_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->game_changes(i), deterministic, target);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (unsigned int i = 0, n = this->team_changes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->team_changes(i), deterministic, target);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _merged_tournament_ids_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->merged_tournament_ids_, target);
  }

  // optional uint32 state_seq_num = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state_seq_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange)
  return target;
}

size_t CMsgDOTATournamentStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  {
    unsigned int count = this->game_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_changes(i));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  {
    unsigned int count = this->team_changes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_changes(i));
    }
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->merged_tournament_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _merged_tournament_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 new_tournament_id = 1;
    if (has_new_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_tournament_id());
    }

    // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
    if (has_new_tournament_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_tournament_state());
    }

    // optional uint32 state_seq_num = 7;
    if (has_state_seq_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentStateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentStateChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange::MergeFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_changes_.MergeFrom(from.game_changes_);
  team_changes_.MergeFrom(from.team_changes_);
  merged_tournament_ids_.MergeFrom(from.merged_tournament_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      new_tournament_id_ = from.new_tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_tournament_state_ = from.new_tournament_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_seq_num_ = from.state_seq_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange::CopyFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange::Swap(CMsgDOTATournamentStateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange::InternalSwap(CMsgDOTATournamentStateChange* other) {
  game_changes_.InternalSwap(&other->game_changes_);
  team_changes_.InternalSwap(&other->team_changes_);
  merged_tournament_ids_.InternalSwap(&other->merged_tournament_ids_);
  std::swap(new_tournament_id_, other->new_tournament_id_);
  std::swap(event_, other->event_);
  std::swap(new_tournament_state_, other->new_tournament_state_);
  std::swap(state_seq_num_, other->state_seq_num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentStateChange

// optional uint32 new_tournament_id = 1;
bool CMsgDOTATournamentStateChange::has_new_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentStateChange::set_has_new_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentStateChange::clear_has_new_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentStateChange::clear_new_tournament_id() {
  new_tournament_id_ = 0u;
  clear_has_new_tournament_id();
}
::google::protobuf::uint32 CMsgDOTATournamentStateChange::new_tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.new_tournament_id)
  return new_tournament_id_;
}
void CMsgDOTATournamentStateChange::set_new_tournament_id(::google::protobuf::uint32 value) {
  set_has_new_tournament_id();
  new_tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.new_tournament_id)
}

// optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
bool CMsgDOTATournamentStateChange::has_event() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentStateChange::set_has_event() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentStateChange::clear_has_event() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentStateChange::clear_event() {
  event_ = 0;
  clear_has_event();
}
::proto::dota::ETournamentEvent CMsgDOTATournamentStateChange::event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.event)
  return static_cast< ::proto::dota::ETournamentEvent >(event_);
}
void CMsgDOTATournamentStateChange::set_event(::proto::dota::ETournamentEvent value) {
  assert(::proto::dota::ETournamentEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.event)
}

// optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
bool CMsgDOTATournamentStateChange::has_new_tournament_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTATournamentStateChange::set_has_new_tournament_state() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTATournamentStateChange::clear_has_new_tournament_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTATournamentStateChange::clear_new_tournament_state() {
  new_tournament_state_ = 0;
  clear_has_new_tournament_state();
}
::proto::dota::ETournamentState CMsgDOTATournamentStateChange::new_tournament_state() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.new_tournament_state)
  return static_cast< ::proto::dota::ETournamentState >(new_tournament_state_);
}
void CMsgDOTATournamentStateChange::set_new_tournament_state(::proto::dota::ETournamentState value) {
  assert(::proto::dota::ETournamentState_IsValid(value));
  set_has_new_tournament_state();
  new_tournament_state_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.new_tournament_state)
}

// repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
int CMsgDOTATournamentStateChange::game_changes_size() const {
  return game_changes_.size();
}
void CMsgDOTATournamentStateChange::clear_game_changes() {
  game_changes_.Clear();
}
const ::proto::dota::CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange::game_changes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Get(index);
}
::proto::dota::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::mutable_game_changes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentStateChange_GameChange* CMsgDOTATournamentStateChange::add_game_changes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentStateChange.game_changes)
  return game_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentStateChange_GameChange >*
CMsgDOTATournamentStateChange::mutable_game_changes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentStateChange.game_changes)
  return &game_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentStateChange_GameChange >&
CMsgDOTATournamentStateChange::game_changes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentStateChange.game_changes)
  return game_changes_;
}

// repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
int CMsgDOTATournamentStateChange::team_changes_size() const {
  return team_changes_.size();
}
void CMsgDOTATournamentStateChange::clear_team_changes() {
  team_changes_.Clear();
}
const ::proto::dota::CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange::team_changes(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Get(index);
}
::proto::dota::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::mutable_team_changes(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Mutable(index);
}
::proto::dota::CMsgDOTATournamentStateChange_TeamChange* CMsgDOTATournamentStateChange::add_team_changes() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentStateChange.team_changes)
  return team_changes_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentStateChange_TeamChange >*
CMsgDOTATournamentStateChange::mutable_team_changes() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentStateChange.team_changes)
  return &team_changes_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTATournamentStateChange_TeamChange >&
CMsgDOTATournamentStateChange::team_changes() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentStateChange.team_changes)
  return team_changes_;
}

// repeated uint32 merged_tournament_ids = 6 [packed = true];
int CMsgDOTATournamentStateChange::merged_tournament_ids_size() const {
  return merged_tournament_ids_.size();
}
void CMsgDOTATournamentStateChange::clear_merged_tournament_ids() {
  merged_tournament_ids_.Clear();
}
::google::protobuf::uint32 CMsgDOTATournamentStateChange::merged_tournament_ids(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
  return merged_tournament_ids_.Get(index);
}
void CMsgDOTATournamentStateChange::set_merged_tournament_ids(int index, ::google::protobuf::uint32 value) {
  merged_tournament_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
}
void CMsgDOTATournamentStateChange::add_merged_tournament_ids(::google::protobuf::uint32 value) {
  merged_tournament_ids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTATournamentStateChange::merged_tournament_ids() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
  return merged_tournament_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTATournamentStateChange::mutable_merged_tournament_ids() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTATournamentStateChange.merged_tournament_ids)
  return &merged_tournament_ids_;
}

// optional uint32 state_seq_num = 7;
bool CMsgDOTATournamentStateChange::has_state_seq_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTATournamentStateChange::set_has_state_seq_num() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTATournamentStateChange::clear_has_state_seq_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTATournamentStateChange::clear_state_seq_num() {
  state_seq_num_ = 0u;
  clear_has_state_seq_num();
}
::google::protobuf::uint32 CMsgDOTATournamentStateChange::state_seq_num() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentStateChange.state_seq_num)
  return state_seq_num_;
}
void CMsgDOTATournamentStateChange::set_state_seq_num(::google::protobuf::uint32 value) {
  set_has_state_seq_num();
  state_seq_num_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentStateChange.state_seq_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentRequest::kTournamentIdFieldNumber;
const int CMsgDOTATournamentRequest::kClientTournamentGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentRequest)
}
CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_tournament_gid_, &from.client_tournament_gid_,
    reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&client_tournament_gid_) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&client_tournament_gid_, 0, reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&client_tournament_gid_) + sizeof(tournament_id_));
}

CMsgDOTATournamentRequest::~CMsgDOTATournamentRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentRequest)
  SharedDtor();
}

void CMsgDOTATournamentRequest::SharedDtor() {
}

void CMsgDOTATournamentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentRequest& CMsgDOTATournamentRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentRequest* CMsgDOTATournamentRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentRequest* n = new CMsgDOTATournamentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&client_tournament_gid_, 0, reinterpret_cast<char*>(&tournament_id_) -
      reinterpret_cast<char*>(&client_tournament_gid_) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_tournament_gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_client_tournament_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_tournament_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentRequest)
  return false;
#undef DO_
}

void CMsgDOTATournamentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint64 client_tournament_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_tournament_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentRequest)
}

::google::protobuf::uint8* CMsgDOTATournamentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint64 client_tournament_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->client_tournament_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentRequest)
  return target;
}

size_t CMsgDOTATournamentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint64 client_tournament_gid = 2;
    if (has_client_tournament_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_tournament_gid());
    }

    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentRequest::MergeFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      client_tournament_gid_ = from.client_tournament_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentRequest::CopyFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentRequest::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentRequest::Swap(CMsgDOTATournamentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentRequest::InternalSwap(CMsgDOTATournamentRequest* other) {
  std::swap(client_tournament_gid_, other->client_tournament_gid_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentRequest

// optional uint32 tournament_id = 1;
bool CMsgDOTATournamentRequest::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentRequest::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentRequest::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentRequest::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTATournamentRequest::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentRequest.tournament_id)
  return tournament_id_;
}
void CMsgDOTATournamentRequest::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentRequest.tournament_id)
}

// optional uint64 client_tournament_gid = 2;
bool CMsgDOTATournamentRequest::has_client_tournament_gid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentRequest::set_has_client_tournament_gid() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentRequest::clear_has_client_tournament_gid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentRequest::clear_client_tournament_gid() {
  client_tournament_gid_ = GOOGLE_ULONGLONG(0);
  clear_has_client_tournament_gid();
}
::google::protobuf::uint64 CMsgDOTATournamentRequest::client_tournament_gid() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentRequest.client_tournament_gid)
  return client_tournament_gid_;
}
void CMsgDOTATournamentRequest::set_client_tournament_gid(::google::protobuf::uint64 value) {
  set_has_client_tournament_gid();
  client_tournament_gid_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentRequest.client_tournament_gid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentResponse::kResultFieldNumber;
const int CMsgDOTATournamentResponse::kTournamentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentResponse)
}
CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tournament()) {
    tournament_ = new ::proto::dota::CMsgDOTATournament(*from.tournament_);
  } else {
    tournament_ = NULL;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::SharedCtor() {
  _cached_size_ = 0;
  tournament_ = NULL;
  result_ = 2u;
}

CMsgDOTATournamentResponse::~CMsgDOTATournamentResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentResponse)
  SharedDtor();
}

void CMsgDOTATournamentResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete tournament_;
  }
}

void CMsgDOTATournamentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTATournamentResponse::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTATournamentResponse& CMsgDOTATournamentResponse::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTATournamentResponse* CMsgDOTATournamentResponse::New(::google::protobuf::Arena* arena) const {
  CMsgDOTATournamentResponse* n = new CMsgDOTATournamentResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTATournamentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentResponse)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_tournament()) {
      GOOGLE_DCHECK(tournament_ != NULL);
      tournament_->::proto::dota::CMsgDOTATournament::Clear();
    }
    result_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTATournamentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTATournament tournament = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tournament()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentResponse)
  return false;
#undef DO_
}

void CMsgDOTATournamentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.dota.CMsgDOTATournament tournament = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->tournament_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentResponse)
}

::google::protobuf::uint8* CMsgDOTATournamentResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.dota.CMsgDOTATournament tournament = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->tournament_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentResponse)
  return target;
}

size_t CMsgDOTATournamentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgDOTATournament tournament = 2;
    if (has_tournament()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tournament_);
    }

    // optional uint32 result = 1 [default = 2];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTATournamentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTATournamentResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentResponse::MergeFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tournament()->::proto::dota::CMsgDOTATournament::MergeFrom(from.tournament());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentResponse::CopyFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentResponse::Swap(CMsgDOTATournamentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentResponse::InternalSwap(CMsgDOTATournamentResponse* other) {
  std::swap(tournament_, other->tournament_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTATournamentResponse::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTATournamentResponse

// optional uint32 result = 1 [default = 2];
bool CMsgDOTATournamentResponse::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTATournamentResponse::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTATournamentResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTATournamentResponse::clear_result() {
  result_ = 2u;
  clear_has_result();
}
::google::protobuf::uint32 CMsgDOTATournamentResponse::result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentResponse.result)
  return result_;
}
void CMsgDOTATournamentResponse::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTATournamentResponse.result)
}

// optional .proto.dota.CMsgDOTATournament tournament = 2;
bool CMsgDOTATournamentResponse::has_tournament() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTATournamentResponse::set_has_tournament() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTATournamentResponse::clear_has_tournament() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTATournamentResponse::clear_tournament() {
  if (tournament_ != NULL) tournament_->::proto::dota::CMsgDOTATournament::Clear();
  clear_has_tournament();
}
const ::proto::dota::CMsgDOTATournament& CMsgDOTATournamentResponse::tournament() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTATournamentResponse.tournament)
  return tournament_ != NULL ? *tournament_
                         : *::proto::dota::CMsgDOTATournament::internal_default_instance();
}
::proto::dota::CMsgDOTATournament* CMsgDOTATournamentResponse::mutable_tournament() {
  set_has_tournament();
  if (tournament_ == NULL) {
    tournament_ = new ::proto::dota::CMsgDOTATournament;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTATournamentResponse.tournament)
  return tournament_;
}
::proto::dota::CMsgDOTATournament* CMsgDOTATournamentResponse::release_tournament() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTATournamentResponse.tournament)
  clear_has_tournament();
  ::proto::dota::CMsgDOTATournament* temp = tournament_;
  tournament_ = NULL;
  return temp;
}
void CMsgDOTATournamentResponse::set_allocated_tournament(::proto::dota::CMsgDOTATournament* tournament) {
  delete tournament_;
  tournament_ = tournament;
  if (tournament) {
    set_has_tournament();
  } else {
    clear_has_tournament();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTATournamentResponse.tournament)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAClearTournamentGame::kTournamentIdFieldNumber;
const int CMsgDOTAClearTournamentGame::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAClearTournamentGame)
}
CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(game_id_));
}

CMsgDOTAClearTournamentGame::~CMsgDOTAClearTournamentGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAClearTournamentGame)
  SharedDtor();
}

void CMsgDOTAClearTournamentGame::SharedDtor() {
}

void CMsgDOTAClearTournamentGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAClearTournamentGame::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAClearTournamentGame& CMsgDOTAClearTournamentGame::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAClearTournamentGame* CMsgDOTAClearTournamentGame::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAClearTournamentGame* n = new CMsgDOTAClearTournamentGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAClearTournamentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAClearTournamentGame)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&tournament_id_) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAClearTournamentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAClearTournamentGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAClearTournamentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAClearTournamentGame)
  return false;
#undef DO_
}

void CMsgDOTAClearTournamentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAClearTournamentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAClearTournamentGame)
}

::google::protobuf::uint8* CMsgDOTAClearTournamentGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAClearTournamentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAClearTournamentGame)
  return target;
}

size_t CMsgDOTAClearTournamentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAClearTournamentGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 game_id = 2;
    if (has_game_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAClearTournamentGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClearTournamentGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAClearTournamentGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAClearTournamentGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAClearTournamentGame)
    MergeFrom(*source);
  }
}

void CMsgDOTAClearTournamentGame::MergeFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAClearTournamentGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClearTournamentGame::CopyFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClearTournamentGame::IsInitialized() const {
  return true;
}

void CMsgDOTAClearTournamentGame::Swap(CMsgDOTAClearTournamentGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAClearTournamentGame::InternalSwap(CMsgDOTAClearTournamentGame* other) {
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(game_id_, other->game_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAClearTournamentGame::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAClearTournamentGame

// optional uint32 tournament_id = 1;
bool CMsgDOTAClearTournamentGame::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAClearTournamentGame::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAClearTournamentGame::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAClearTournamentGame::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTAClearTournamentGame::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAClearTournamentGame.tournament_id)
  return tournament_id_;
}
void CMsgDOTAClearTournamentGame::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAClearTournamentGame.tournament_id)
}

// optional uint32 game_id = 2;
bool CMsgDOTAClearTournamentGame::has_game_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAClearTournamentGame::set_has_game_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAClearTournamentGame::clear_has_game_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAClearTournamentGame::clear_game_id() {
  game_id_ = 0u;
  clear_has_game_id();
}
::google::protobuf::uint32 CMsgDOTAClearTournamentGame::game_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAClearTournamentGame.game_id)
  return game_id_;
}
void CMsgDOTAClearTournamentGame::set_game_id(::google::protobuf::uint32 value) {
  set_has_game_id();
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAClearTournamentGame.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kSkillLevelFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon0FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon1FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon2FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon3FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndLostFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesUnusualChampFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTotalGamesWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}
CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_level_, &from.skill_level_,
    reinterpret_cast<char*>(&times_unusual_champ_) -
    reinterpret_cast<char*>(&skill_level_) + sizeof(times_unusual_champ_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&skill_level_, 0, reinterpret_cast<char*>(&times_unusual_champ_) -
    reinterpret_cast<char*>(&skill_level_) + sizeof(times_unusual_champ_));
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::~CMsgDOTAWeekendTourneyPlayerSkillLevelStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerSkillLevelStats* n = new CMsgDOTAWeekendTourneyPlayerSkillLevelStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&skill_level_, 0, reinterpret_cast<char*>(&total_games_won_) -
      reinterpret_cast<char*>(&skill_level_) + sizeof(total_games_won_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&times_unusual_champ_) -
      reinterpret_cast<char*>(&score_) + sizeof(times_unusual_champ_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_skill_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_times_won_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_times_won_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_times_won_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_times_won_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_bye_and_lost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_times_bye_and_lost();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_bye_and_won = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_times_bye_and_won();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_games_won = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_total_games_won();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_unusual_champ = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_times_unusual_champ();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_unusual_champ_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skill_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_level(), output);
  }

  // optional uint32 times_won_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times_won_0(), output);
  }

  // optional uint32 times_won_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times_won_1(), output);
  }

  // optional uint32 times_won_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->times_won_2(), output);
  }

  // optional uint32 times_won_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times_won_3(), output);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->times_bye_and_lost(), output);
  }

  // optional uint32 times_bye_and_won = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->times_bye_and_won(), output);
  }

  // optional uint32 total_games_won = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_games_won(), output);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // optional uint32 times_unusual_champ = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->times_unusual_champ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skill_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_level(), target);
  }

  // optional uint32 times_won_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times_won_0(), target);
  }

  // optional uint32 times_won_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times_won_1(), target);
  }

  // optional uint32 times_won_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->times_won_2(), target);
  }

  // optional uint32 times_won_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times_won_3(), target);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->times_bye_and_lost(), target);
  }

  // optional uint32 times_bye_and_won = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->times_bye_and_won(), target);
  }

  // optional uint32 total_games_won = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_games_won(), target);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  // optional uint32 times_unusual_champ = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->times_unusual_champ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 skill_level = 1;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 times_won_0 = 2;
    if (has_times_won_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_0());
    }

    // optional uint32 times_won_1 = 3;
    if (has_times_won_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_1());
    }

    // optional uint32 times_won_2 = 4;
    if (has_times_won_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_2());
    }

    // optional uint32 times_won_3 = 5;
    if (has_times_won_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_3());
    }

    // optional uint32 times_bye_and_lost = 6;
    if (has_times_bye_and_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_lost());
    }

    // optional uint32 times_bye_and_won = 7;
    if (has_times_bye_and_won()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_won());
    }

    // optional uint32 total_games_won = 8;
    if (has_total_games_won()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games_won());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional uint32 score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 times_unusual_champ = 10;
    if (has_times_unusual_champ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_unusual_champ());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerSkillLevelStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_won_0_ = from.times_won_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_won_1_ = from.times_won_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      times_won_2_ = from.times_won_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      times_won_3_ = from.times_won_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      times_bye_and_lost_ = from.times_bye_and_lost_;
    }
    if (cached_has_bits & 0x00000040u) {
      times_bye_and_won_ = from.times_bye_and_won_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_games_won_ = from.total_games_won_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000200u) {
      times_unusual_champ_ = from.times_unusual_champ_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  std::swap(skill_level_, other->skill_level_);
  std::swap(times_won_0_, other->times_won_0_);
  std::swap(times_won_1_, other->times_won_1_);
  std::swap(times_won_2_, other->times_won_2_);
  std::swap(times_won_3_, other->times_won_3_);
  std::swap(times_bye_and_lost_, other->times_bye_and_lost_);
  std::swap(times_bye_and_won_, other->times_bye_and_won_);
  std::swap(total_games_won_, other->total_games_won_);
  std::swap(score_, other->score_);
  std::swap(times_unusual_champ_, other->times_unusual_champ_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerSkillLevelStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerSkillLevelStats

// optional uint32 skill_level = 1;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_skill_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_skill_level() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::skill_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
  return skill_level_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.skill_level)
}

// optional uint32 times_won_0 = 2;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_0() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_0() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_0() {
  times_won_0_ = 0u;
  clear_has_times_won_0();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
  return times_won_0_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_0(::google::protobuf::uint32 value) {
  set_has_times_won_0();
  times_won_0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_0)
}

// optional uint32 times_won_1 = 3;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_1() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_1() {
  times_won_1_ = 0u;
  clear_has_times_won_1();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
  return times_won_1_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_1(::google::protobuf::uint32 value) {
  set_has_times_won_1();
  times_won_1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_1)
}

// optional uint32 times_won_2 = 4;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_2() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_2() {
  times_won_2_ = 0u;
  clear_has_times_won_2();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
  return times_won_2_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_2(::google::protobuf::uint32 value) {
  set_has_times_won_2();
  times_won_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_2)
}

// optional uint32 times_won_3 = 5;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_won_3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_won_3() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_won_3() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_won_3() {
  times_won_3_ = 0u;
  clear_has_times_won_3();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_won_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
  return times_won_3_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_won_3(::google::protobuf::uint32 value) {
  set_has_times_won_3();
  times_won_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_won_3)
}

// optional uint32 times_bye_and_lost = 6;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_lost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_bye_and_lost() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_bye_and_lost() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_lost() {
  times_bye_and_lost_ = 0u;
  clear_has_times_bye_and_lost();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_lost() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
  return times_bye_and_lost_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_lost(::google::protobuf::uint32 value) {
  set_has_times_bye_and_lost();
  times_bye_and_lost_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_lost)
}

// optional uint32 times_bye_and_won = 7;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_bye_and_won() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_bye_and_won() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_bye_and_won() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_bye_and_won() {
  times_bye_and_won_ = 0u;
  clear_has_times_bye_and_won();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_bye_and_won() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
  return times_bye_and_won_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_bye_and_won(::google::protobuf::uint32 value) {
  set_has_times_bye_and_won();
  times_bye_and_won_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_bye_and_won)
}

// optional uint32 times_unusual_champ = 10;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_times_unusual_champ() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_times_unusual_champ() {
  _has_bits_[0] |= 0x00000200u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_times_unusual_champ() {
  _has_bits_[0] &= ~0x00000200u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_times_unusual_champ() {
  times_unusual_champ_ = 0u;
  clear_has_times_unusual_champ();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::times_unusual_champ() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
  return times_unusual_champ_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_times_unusual_champ(::google::protobuf::uint32 value) {
  set_has_times_unusual_champ();
  times_unusual_champ_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.times_unusual_champ)
}

// optional uint32 total_games_won = 8;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_total_games_won() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_total_games_won() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_total_games_won() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_total_games_won() {
  total_games_won_ = 0u;
  clear_has_total_games_won();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::total_games_won() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
  return total_games_won_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_total_games_won(::google::protobuf::uint32 value) {
  set_has_total_games_won();
  total_games_won_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.total_games_won)
}

// optional uint32 score = 9;
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::clear_score() {
  score_ = 0u;
  clear_has_score();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerSkillLevelStats::score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
  return score_;
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSeasonTrophyIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSkillLevelsFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kCurrentTierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}
CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      skill_levels_(from.skill_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&current_tier_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(current_tier_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&current_tier_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(current_tier_));
}

CMsgDOTAWeekendTourneyPlayerStats::~CMsgDOTAWeekendTourneyPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStats::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerStats& CMsgDOTAWeekendTourneyPlayerStats::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerStats* CMsgDOTAWeekendTourneyPlayerStats::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerStats* n = new CMsgDOTAWeekendTourneyPlayerStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  skill_levels_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&current_tier_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(current_tier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_levels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_tier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_current_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (unsigned int i = 0, n = this->skill_levels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skill_levels(i), output);
  }

  // optional uint32 current_tier = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_tier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (unsigned int i = 0, n = this->skill_levels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->skill_levels(i), deterministic, target);
  }

  // optional uint32 current_tier = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_tier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  {
    unsigned int count = this->skill_levels_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_levels(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

    // optional uint32 current_tier = 4;
    if (has_current_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_tier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_levels_.MergeFrom(from.skill_levels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_tier_ = from.current_tier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStats::Swap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  skill_levels_.InternalSwap(&other->skill_levels_);
  std::swap(account_id_, other->account_id_);
  std::swap(season_trophy_id_, other->season_trophy_id_);
  std::swap(current_tier_, other->current_tier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStats::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerStats

// optional uint32 account_id = 1;
bool CMsgDOTAWeekendTourneyPlayerStats::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.account_id)
  return account_id_;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.account_id)
}

// optional uint32 season_trophy_id = 2;
bool CMsgDOTAWeekendTourneyPlayerStats::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
  return season_trophy_id_;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.season_trophy_id)
}

// repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
int CMsgDOTAWeekendTourneyPlayerStats::skill_levels_size() const {
  return skill_levels_.size();
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_skill_levels() {
  skill_levels_.Clear();
}
const ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerStats::skill_levels(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Get(index);
}
::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Mutable(index);
}
::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* CMsgDOTAWeekendTourneyPlayerStats::add_skill_levels() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >*
CMsgDOTAWeekendTourneyPlayerStats::mutable_skill_levels() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return &skill_levels_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >&
CMsgDOTAWeekendTourneyPlayerStats::skill_levels() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.skill_levels)
  return skill_levels_;
}

// optional uint32 current_tier = 4;
bool CMsgDOTAWeekendTourneyPlayerStats::has_current_tier() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_has_current_tier() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_has_current_tier() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerStats::clear_current_tier() {
  current_tier_ = 0u;
  clear_has_current_tier();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStats::current_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.current_tier)
  return current_tier_;
}
void CMsgDOTAWeekendTourneyPlayerStats::set_current_tier(::google::protobuf::uint32 value) {
  set_has_current_tier();
  current_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerStats.current_tier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}
CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerStatsRequest::~CMsgDOTAWeekendTourneyPlayerStatsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerStatsRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerStatsRequest& CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerStatsRequest* CMsgDOTAWeekendTourneyPlayerStatsRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerStatsRequest* n = new CMsgDOTAWeekendTourneyPlayerStatsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStatsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStatsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerStatsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Swap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(season_trophy_id_, other->season_trophy_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStatsRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerStatsRequest

// optional uint32 account_id = 1;
bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStatsRequest::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
  return account_id_;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.account_id)
}

// optional uint32 season_trophy_id = 2;
bool CMsgDOTAWeekendTourneyPlayerStatsRequest::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerStatsRequest::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
  return season_trophy_id_;
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest.season_trophy_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}
CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest::~CMsgDOTAWeekendTourneyPlayerHistoryRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistoryRequest::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerHistoryRequest& CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest* CMsgDOTAWeekendTourneyPlayerHistoryRequest::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerHistoryRequest* n = new CMsgDOTAWeekendTourneyPlayerHistoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistoryRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistoryRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerHistoryRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Swap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  std::swap(account_id_, other->account_id_);
  std::swap(season_trophy_id_, other->season_trophy_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistoryRequest::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerHistoryRequest

// optional uint32 account_id = 1;
bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistoryRequest::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest.account_id)
  return account_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest.account_id)
}

// optional uint32 season_trophy_id = 2;
bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistoryRequest::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest.season_trophy_id)
  return season_trophy_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest.season_trophy_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kStartTimeFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentTierFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamDateFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamResultFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamNameFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedCtor() {
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::~CMsgDOTAWeekendTourneyPlayerHistory_Tournament() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerHistory_Tournament* n = new CMsgDOTAWeekendTourneyPlayerHistory_Tournament;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  account_id_.Clear();
  if (has_team_name()) {
    GOOGLE_DCHECK(!team_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*team_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&tournament_id_, 0, reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&tournament_id_) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tournament_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_tier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tournament_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_team_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_team_date();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_team_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(58u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_season_trophy_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 tournament_tier = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_tier(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 team_date = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_date(), output);
  }

  // optional uint32 team_result = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_result(), output);
  }

  // repeated uint32 account_id = 7;
  for (int i = 0, n = this->account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->account_id(i), output);
  }

  // optional string team_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team_name(), output);
  }

  // optional uint32 season_trophy_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 tournament_tier = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_tier(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 team_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_date(), target);
  }

  // optional uint32 team_result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_result(), target);
  }

  // repeated uint32 account_id = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->account_id_, target);

  // optional string team_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team_name(), target);
  }

  // optional uint32 season_trophy_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 account_id = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string team_name = 8;
    if (has_team_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 tournament_id = 1;
    if (has_tournament_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 start_time = 2;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 tournament_tier = 3;
    if (has_tournament_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_tier());
    }

    // optional uint32 team_id = 4;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 team_date = 5;
    if (has_team_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_date());
    }

    // optional uint32 team_result = 6;
    if (has_team_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_result());
    }

    // optional uint32 season_trophy_id = 9;
    if (has_season_trophy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory_Tournament* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerHistory_Tournament>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_tier_ = from.tournament_tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_date_ = from.team_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_result_ = from.team_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  account_id_.InternalSwap(&other->account_id_);
  team_name_.Swap(&other->team_name_);
  std::swap(tournament_id_, other->tournament_id_);
  std::swap(start_time_, other->start_time_);
  std::swap(tournament_tier_, other->tournament_tier_);
  std::swap(team_id_, other->team_id_);
  std::swap(team_date_, other->team_date_);
  std::swap(team_result_, other->team_result_);
  std::swap(season_trophy_id_, other->season_trophy_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory_Tournament::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerHistory_Tournament

// optional uint32 tournament_id = 1;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_tournament_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_tournament_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_id() {
  tournament_id_ = 0u;
  clear_has_tournament_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
  return tournament_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_id(::google::protobuf::uint32 value) {
  set_has_tournament_id();
  tournament_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_id)
}

// optional uint32 start_time = 2;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_start_time() {
  start_time_ = 0u;
  clear_has_start_time();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::start_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
  return start_time_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_start_time(::google::protobuf::uint32 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.start_time)
}

// optional uint32 tournament_tier = 3;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_tournament_tier() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_tournament_tier() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_tournament_tier() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_tournament_tier() {
  tournament_tier_ = 0u;
  clear_has_tournament_tier();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::tournament_tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
  return tournament_tier_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_tournament_tier(::google::protobuf::uint32 value) {
  set_has_tournament_tier();
  tournament_tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.tournament_tier)
}

// optional uint32 team_id = 4;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_id() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
  return team_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_id)
}

// optional uint32 team_date = 5;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_date() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_date() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_date() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_date() {
  team_date_ = 0u;
  clear_has_team_date();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_date() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
  return team_date_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_date(::google::protobuf::uint32 value) {
  set_has_team_date();
  team_date_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_date)
}

// optional uint32 team_result = 6;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_result() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_result() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_result() {
  team_result_ = 0u;
  clear_has_team_result();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_result() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
  return team_result_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_result(::google::protobuf::uint32 value) {
  set_has_team_result();
  team_result_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_result)
}

// repeated uint32 account_id = 7;
int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id_size() const {
  return account_id_.size();
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_account_id() {
  account_id_.Clear();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return account_id_.Get(index);
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_account_id(int index, ::google::protobuf::uint32 value) {
  account_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::add_account_id(::google::protobuf::uint32 value) {
  account_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::account_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return account_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.account_id)
  return &account_id_;
}

// optional string team_name = 8;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
const ::std::string& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::team_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return team_name_.GetNoArena();
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
#if LANG_CXX11
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(::std::string&& value) {
  set_has_team_name();
  team_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
#endif
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}
::std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::release_team_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name)
}

// optional uint32 season_trophy_id = 9;
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::has_season_trophy_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_has_season_trophy_id() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_has_season_trophy_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::clear_season_trophy_id() {
  season_trophy_id_ = 0u;
  clear_has_season_trophy_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory_Tournament::season_trophy_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
  return season_trophy_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::set_season_trophy_id(::google::protobuf::uint32 value) {
  set_has_season_trophy_id();
  season_trophy_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.season_trophy_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistory::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory::kTournamentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}
CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tournaments_(from.tournaments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedCtor() {
  _cached_size_ = 0;
  account_id_ = 0u;
}

CMsgDOTAWeekendTourneyPlayerHistory::~CMsgDOTAWeekendTourneyPlayerHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyPlayerHistory::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyPlayerHistory& CMsgDOTAWeekendTourneyPlayerHistory::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyPlayerHistory* CMsgDOTAWeekendTourneyPlayerHistory::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyPlayerHistory* n = new CMsgDOTAWeekendTourneyPlayerHistory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyPlayerHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  tournaments_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyPlayerHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tournaments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyPlayerHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (unsigned int i = 0, n = this->tournaments_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tournaments(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (unsigned int i = 0, n = this->tournaments_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tournaments(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  {
    unsigned int count = this->tournaments_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tournaments(i));
    }
  }

  // optional uint32 account_id = 1;
  if (has_account_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyPlayerHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tournaments_.MergeFrom(from.tournaments_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory::Swap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistory::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  tournaments_.InternalSwap(&other->tournaments_);
  std::swap(account_id_, other->account_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyPlayerHistory

// optional uint32 account_id = 1;
bool CMsgDOTAWeekendTourneyPlayerHistory::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyPlayerHistory::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistory::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyPlayerHistory::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyPlayerHistory::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.account_id)
  return account_id_;
}
void CMsgDOTAWeekendTourneyPlayerHistory::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.account_id)
}

// repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
int CMsgDOTAWeekendTourneyPlayerHistory::tournaments_size() const {
  return tournaments_.size();
}
void CMsgDOTAWeekendTourneyPlayerHistory::clear_tournaments() {
  tournaments_.Clear();
}
const ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory::tournaments(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Get(index);
}
::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Mutable(index);
}
::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* CMsgDOTAWeekendTourneyPlayerHistory::add_tournaments() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >*
CMsgDOTAWeekendTourneyPlayerHistory::mutable_tournaments() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return &tournaments_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >&
CMsgDOTAWeekendTourneyPlayerHistory::tournaments() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.tournaments)
  return tournaments_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTierFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kWinningTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak2FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak3FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak4FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}
CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tier_, &from.tier_,
    reinterpret_cast<char*>(&players_streak_5_) -
    reinterpret_cast<char*>(&tier_) + sizeof(players_streak_5_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tier_, 0, reinterpret_cast<char*>(&players_streak_5_) -
    reinterpret_cast<char*>(&tier_) + sizeof(players_streak_5_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier::~CMsgDOTAWeekendTourneyParticipationDetails_Tier() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Tier::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Tier::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyParticipationDetails_Tier* n = new CMsgDOTAWeekendTourneyParticipationDetails_Tier;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tier_, 0, reinterpret_cast<char*>(&players_streak_5_) -
      reinterpret_cast<char*>(&tier_) + sizeof(players_streak_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_players();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_teams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_teams = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_winning_teams();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_teams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_players_streak_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_players_streak_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_players_streak_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_5 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_players_streak_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tier(), output);
  }

  // optional uint32 players = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->players(), output);
  }

  // optional uint32 teams = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teams(), output);
  }

  // optional uint32 winning_teams = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winning_teams(), output);
  }

  // optional uint32 players_streak_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->players_streak_2(), output);
  }

  // optional uint32 players_streak_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_streak_3(), output);
  }

  // optional uint32 players_streak_4 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->players_streak_4(), output);
  }

  // optional uint32 players_streak_5 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->players_streak_5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Tier::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tier(), target);
  }

  // optional uint32 players = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->players(), target);
  }

  // optional uint32 teams = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teams(), target);
  }

  // optional uint32 winning_teams = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winning_teams(), target);
  }

  // optional uint32 players_streak_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->players_streak_2(), target);
  }

  // optional uint32 players_streak_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_streak_3(), target);
  }

  // optional uint32 players_streak_4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->players_streak_4(), target);
  }

  // optional uint32 players_streak_5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->players_streak_5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 tier = 1;
    if (has_tier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 players = 2;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 teams = 3;
    if (has_teams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teams());
    }

    // optional uint32 winning_teams = 4;
    if (has_winning_teams()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_teams());
    }

    // optional uint32 players_streak_2 = 5;
    if (has_players_streak_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_2());
    }

    // optional uint32 players_streak_3 = 6;
    if (has_players_streak_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_3());
    }

    // optional uint32 players_streak_4 = 7;
    if (has_players_streak_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_4());
    }

    // optional uint32 players_streak_5 = 8;
    if (has_players_streak_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Tier* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyParticipationDetails_Tier>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000004u) {
      teams_ = from.teams_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_teams_ = from.winning_teams_;
    }
    if (cached_has_bits & 0x00000010u) {
      players_streak_2_ = from.players_streak_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      players_streak_3_ = from.players_streak_3_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_streak_4_ = from.players_streak_4_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_streak_5_ = from.players_streak_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  std::swap(tier_, other->tier_);
  std::swap(players_, other->players_);
  std::swap(teams_, other->teams_);
  std::swap(winning_teams_, other->winning_teams_);
  std::swap(players_streak_2_, other->players_streak_2_);
  std::swap(players_streak_3_, other->players_streak_3_);
  std::swap(players_streak_4_, other->players_streak_4_);
  std::swap(players_streak_5_, other->players_streak_5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Tier::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyParticipationDetails_Tier

// optional uint32 tier = 1;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_tier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_tier() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_tier() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_tier() {
  tier_ = 0u;
  clear_has_tier();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::tier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
  return tier_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_tier(::google::protobuf::uint32 value) {
  set_has_tier();
  tier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.tier)
}

// optional uint32 players = 2;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players() {
  players_ = 0u;
  clear_has_players();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
  return players_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players(::google::protobuf::uint32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players)
}

// optional uint32 teams = 3;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_teams() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_teams() {
  _has_bits_[0] |= 0x00000004u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_teams() {
  _has_bits_[0] &= ~0x00000004u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_teams() {
  teams_ = 0u;
  clear_has_teams();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::teams() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
  return teams_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_teams(::google::protobuf::uint32 value) {
  set_has_teams();
  teams_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.teams)
}

// optional uint32 winning_teams = 4;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_winning_teams() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_winning_teams() {
  _has_bits_[0] |= 0x00000008u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_winning_teams() {
  _has_bits_[0] &= ~0x00000008u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_winning_teams() {
  winning_teams_ = 0u;
  clear_has_winning_teams();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::winning_teams() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
  return winning_teams_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_winning_teams(::google::protobuf::uint32 value) {
  set_has_winning_teams();
  winning_teams_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.winning_teams)
}

// optional uint32 players_streak_2 = 5;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_2() {
  _has_bits_[0] |= 0x00000010u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_2() {
  players_streak_2_ = 0u;
  clear_has_players_streak_2();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
  return players_streak_2_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_2(::google::protobuf::uint32 value) {
  set_has_players_streak_2();
  players_streak_2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_2)
}

// optional uint32 players_streak_3 = 6;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_3() {
  _has_bits_[0] |= 0x00000020u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_3() {
  _has_bits_[0] &= ~0x00000020u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_3() {
  players_streak_3_ = 0u;
  clear_has_players_streak_3();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
  return players_streak_3_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_3(::google::protobuf::uint32 value) {
  set_has_players_streak_3();
  players_streak_3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_3)
}

// optional uint32 players_streak_4 = 7;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_4() {
  _has_bits_[0] |= 0x00000040u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_4() {
  _has_bits_[0] &= ~0x00000040u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_4() {
  players_streak_4_ = 0u;
  clear_has_players_streak_4();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_4() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
  return players_streak_4_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_4(::google::protobuf::uint32 value) {
  set_has_players_streak_4();
  players_streak_4_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_4)
}

// optional uint32 players_streak_5 = 8;
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::has_players_streak_5() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_has_players_streak_5() {
  _has_bits_[0] |= 0x00000080u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_has_players_streak_5() {
  _has_bits_[0] &= ~0x00000080u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::clear_players_streak_5() {
  players_streak_5_ = 0u;
  clear_has_players_streak_5();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Tier::players_streak_5() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
  return players_streak_5_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::set_players_streak_5(::google::protobuf::uint32 value) {
  set_has_players_streak_5();
  players_streak_5_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier.players_streak_5)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kDivisionIdFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kScheduleTimeFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kTiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}
CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&division_id_, &from.division_id_,
    reinterpret_cast<char*>(&schedule_time_) -
    reinterpret_cast<char*>(&division_id_) + sizeof(schedule_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&division_id_, 0, reinterpret_cast<char*>(&schedule_time_) -
    reinterpret_cast<char*>(&division_id_) + sizeof(schedule_time_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Division::~CMsgDOTAWeekendTourneyParticipationDetails_Division() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails_Division::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails_Division::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyParticipationDetails_Division* n = new CMsgDOTAWeekendTourneyParticipationDetails_Division;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  tiers_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&division_id_, 0, reinterpret_cast<char*>(&schedule_time_) -
      reinterpret_cast<char*>(&division_id_) + sizeof(schedule_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_division_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 schedule_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_schedule_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_id(), output);
  }

  // optional uint32 schedule_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_time(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (unsigned int i = 0, n = this->tiers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tiers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Division::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_id(), target);
  }

  // optional uint32 schedule_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_time(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (unsigned int i = 0, n = this->tiers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->tiers(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  {
    unsigned int count = this->tiers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tiers(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 division_id = 1;
    if (has_division_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 2;
    if (has_schedule_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Division* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyParticipationDetails_Division>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      schedule_time_ = from.schedule_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  tiers_.InternalSwap(&other->tiers_);
  std::swap(division_id_, other->division_id_);
  std::swap(schedule_time_, other->schedule_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Division::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyParticipationDetails_Division

// optional uint32 division_id = 1;
bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_division_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_has_division_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_has_division_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_division_id() {
  division_id_ = 0u;
  clear_has_division_id();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Division::division_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
  return division_id_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_division_id(::google::protobuf::uint32 value) {
  set_has_division_id();
  division_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.division_id)
}

// optional uint32 schedule_time = 2;
bool CMsgDOTAWeekendTourneyParticipationDetails_Division::has_schedule_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_has_schedule_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_has_schedule_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_schedule_time() {
  schedule_time_ = 0u;
  clear_has_schedule_time();
}
::google::protobuf::uint32 CMsgDOTAWeekendTourneyParticipationDetails_Division::schedule_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
  return schedule_time_;
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::set_schedule_time(::google::protobuf::uint32 value) {
  set_has_schedule_time();
  schedule_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.schedule_time)
}

// repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
int CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers_size() const {
  return tiers_.size();
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::clear_tiers() {
  tiers_.Clear();
}
const ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Get(index);
}
::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Mutable(index);
}
::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier* CMsgDOTAWeekendTourneyParticipationDetails_Division::add_tiers() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier >*
CMsgDOTAWeekendTourneyParticipationDetails_Division::mutable_tiers() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return &tiers_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier >&
CMsgDOTAWeekendTourneyParticipationDetails_Division::tiers() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division.tiers)
  return tiers_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails::kDivisionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}
CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedCtor() {
  _cached_size_ = 0;
}

CMsgDOTAWeekendTourneyParticipationDetails::~CMsgDOTAWeekendTourneyParticipationDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMsgDOTAWeekendTourneyParticipationDetails::descriptor() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CMsgDOTAWeekendTourneyParticipationDetails& CMsgDOTAWeekendTourneyParticipationDetails::default_instance() {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::InitDefaults();
  return *internal_default_instance();
}

CMsgDOTAWeekendTourneyParticipationDetails* CMsgDOTAWeekendTourneyParticipationDetails::New(::google::protobuf::Arena* arena) const {
  CMsgDOTAWeekendTourneyParticipationDetails* n = new CMsgDOTAWeekendTourneyParticipationDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CMsgDOTAWeekendTourneyParticipationDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  divisions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CMsgDOTAWeekendTourneyParticipationDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return false;
#undef DO_
}

void CMsgDOTAWeekendTourneyParticipationDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (unsigned int i = 0, n = this->divisions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->divisions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (unsigned int i = 0, n = this->divisions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->divisions(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  {
    unsigned int count = this->divisions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->divisions(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CMsgDOTAWeekendTourneyParticipationDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails::Swap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  divisions_.InternalSwap(&other->divisions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails::GetMetadata() const {
  protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fgcmessages_5fclient_5ftournament_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CMsgDOTAWeekendTourneyParticipationDetails

// repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
int CMsgDOTAWeekendTourneyParticipationDetails::divisions_size() const {
  return divisions_.size();
}
void CMsgDOTAWeekendTourneyParticipationDetails::clear_divisions() {
  divisions_.Clear();
}
const ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails::divisions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Get(index);
}
::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Mutable(index);
}
::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division* CMsgDOTAWeekendTourneyParticipationDetails::add_divisions() {
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division >*
CMsgDOTAWeekendTourneyParticipationDetails::mutable_divisions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return &divisions_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division >&
CMsgDOTAWeekendTourneyParticipationDetails::divisions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.divisions)
  return divisions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
