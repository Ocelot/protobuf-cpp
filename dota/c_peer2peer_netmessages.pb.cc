// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "c_peer2peer_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CP2P_TextMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_TextMessage> {
} _CP2P_TextMessage_default_instance_;
class CSteam_Voice_EncodingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSteam_Voice_Encoding> {
} _CSteam_Voice_Encoding_default_instance_;
class CP2P_VoiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_Voice> {
} _CP2P_Voice_default_instance_;
class CP2P_PingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_Ping> {
} _CP2P_Ping_default_instance_;
class CP2P_VRAvatarPosition_COrientationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_VRAvatarPosition_COrientation> {
} _CP2P_VRAvatarPosition_COrientation_default_instance_;
class CP2P_VRAvatarPositionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_VRAvatarPosition> {
} _CP2P_VRAvatarPosition_default_instance_;
class CP2P_WatchSynchronizationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CP2P_WatchSynchronization> {
} _CP2P_WatchSynchronization_default_instance_;

namespace protobuf_c_5fpeer2peer_5fnetmessages_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_TextMessage, text_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSteam_Voice_Encoding, voice_data_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Voice, broadcast_group_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, send_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_Ping, is_reply_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition_COrientation, ang_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, body_parts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, hat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_VRAvatarPosition, world_scale_),
  ~0u,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, demo_tick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, paused_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, tv_listen_voice_indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, dota_spectator_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, dota_spectator_watching_broadcaster_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, dota_spectator_hero_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, dota_spectator_autospeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CP2P_WatchSynchronization, dota_replay_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 6, sizeof(CP2P_TextMessage)},
  { 7, 13, sizeof(CSteam_Voice_Encoding)},
  { 14, 21, sizeof(CP2P_Voice)},
  { 23, 30, sizeof(CP2P_Ping)},
  { 32, 39, sizeof(CP2P_VRAvatarPosition_COrientation)},
  { 41, 50, sizeof(CP2P_VRAvatarPosition)},
  { 54, 67, sizeof(CP2P_WatchSynchronization)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_TextMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSteam_Voice_Encoding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_Voice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_VRAvatarPosition_COrientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_VRAvatarPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CP2P_WatchSynchronization_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "c_peer2peer_netmessages.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _CP2P_TextMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CSteam_Voice_Encoding_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CP2P_Voice_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CP2P_Ping_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CP2P_VRAvatarPosition_COrientation_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CP2P_VRAvatarPosition_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CP2P_WatchSynchronization_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_netmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_networkbasetypes_2eproto::InitDefaults();
  _CP2P_TextMessage_default_instance_.DefaultConstruct();
  _CSteam_Voice_Encoding_default_instance_.DefaultConstruct();
  _CP2P_Voice_default_instance_.DefaultConstruct();
  _CP2P_Ping_default_instance_.DefaultConstruct();
  _CP2P_VRAvatarPosition_COrientation_default_instance_.DefaultConstruct();
  _CP2P_VRAvatarPosition_default_instance_.DefaultConstruct();
  _CP2P_WatchSynchronization_default_instance_.DefaultConstruct();
  _CP2P_Voice_default_instance_.get_mutable()->audio_ = const_cast< ::proto::dota::CMsgVoiceAudio*>(
      ::proto::dota::CMsgVoiceAudio::internal_default_instance());
  _CP2P_VRAvatarPosition_COrientation_default_instance_.get_mutable()->pos_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  _CP2P_VRAvatarPosition_COrientation_default_instance_.get_mutable()->ang_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\035c_peer2peer_netmessages.proto\022\nproto.d"
      "ota\032\021netmessages.proto\032\026networkbasetypes"
      ".proto\" \n\020CP2P_TextMessage\022\014\n\004text\030\001 \001(\014"
      "\"+\n\025CSteam_Voice_Encoding\022\022\n\nvoice_data\030"
      "\001 \001(\014\"s\n\nCP2P_Voice\022)\n\005audio\030\001 \001(\0132\032.pro"
      "to.dota.CMsgVoiceAudio\022\027\n\017broadcast_grou"
      "p\030\002 \001(\r\"!\n\rHandler_Flags\022\020\n\014Played_Audio"
      "\020\001\"0\n\tCP2P_Ping\022\021\n\tsend_time\030\001 \002(\004\022\020\n\010is"
      "_reply\030\002 \002(\010\"\354\001\n\025CP2P_VRAvatarPosition\022B"
      "\n\nbody_parts\030\001 \003(\0132..proto.dota.CP2P_VRA"
      "vatarPosition.COrientation\022\016\n\006hat_id\030\002 \001"
      "(\005\022\020\n\010scene_id\030\003 \001(\005\022\023\n\013world_scale\030\004 \001("
      "\005\032X\n\014COrientation\022#\n\003pos\030\001 \001(\0132\026.proto.d"
      "ota.CMsgVector\022#\n\003ang\030\002 \001(\0132\026.proto.dota"
      ".CMsgQAngle\"\211\002\n\031CP2P_WatchSynchronizatio"
      "n\022\021\n\tdemo_tick\030\001 \001(\005\022\016\n\006paused\030\002 \001(\010\022\037\n\027"
      "tv_listen_voice_indices\030\003 \001(\005\022\033\n\023dota_sp"
      "ectator_mode\030\004 \001(\005\022+\n#dota_spectator_wat"
      "ching_broadcaster\030\005 \001(\005\022!\n\031dota_spectato"
      "r_hero_index\030\006 \001(\005\022 \n\030dota_spectator_aut"
      "ospeed\030\007 \001(\005\022\031\n\021dota_replay_speed\030\010 \001(\005*"
      "}\n\014P2P_Messages\022\024\n\017p2p_TextMessage\020\200\002\022\016\n"
      "\tp2p_Voice\020\201\002\022\r\n\010p2p_Ping\020\202\002\022\031\n\024p2p_VRAv"
      "atarPosition\020\203\002\022\035\n\030p2p_WatchSynchronizat"
      "ion\020\204\002B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 971);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "c_peer2peer_netmessages.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_netmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_networkbasetypes_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_c_5fpeer2peer_5fnetmessages_2eproto

const ::google::protobuf::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_enum_descriptors[0];
}
bool CP2P_Voice_Handler_Flags_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CP2P_Voice_Handler_Flags CP2P_Voice::Played_Audio;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MIN;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MAX;
const int CP2P_Voice::Handler_Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* P2P_Messages_descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_enum_descriptors[1];
}
bool P2P_Messages_IsValid(int value) {
  switch (value) {
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_TextMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_TextMessage::CP2P_TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_TextMessage)
}
CP2P_TextMessage::CP2P_TextMessage(const CP2P_TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_TextMessage)
}

void CP2P_TextMessage::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CP2P_TextMessage::~CP2P_TextMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_TextMessage)
  SharedDtor();
}

void CP2P_TextMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CP2P_TextMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_TextMessage::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_TextMessage& CP2P_TextMessage::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_TextMessage* CP2P_TextMessage::New(::google::protobuf::Arena* arena) const {
  CP2P_TextMessage* n = new CP2P_TextMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_TextMessage)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_TextMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_TextMessage)
  return false;
#undef DO_
}

void CP2P_TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_TextMessage)
}

::google::protobuf::uint8* CP2P_TextMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_TextMessage)
  return target;
}

size_t CP2P_TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_TextMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes text = 1;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_TextMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_TextMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_TextMessage)
    MergeFrom(*source);
  }
}

void CP2P_TextMessage::MergeFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    set_has_text();
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CP2P_TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_TextMessage::CopyFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_TextMessage::IsInitialized() const {
  return true;
}

void CP2P_TextMessage::Swap(CP2P_TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_TextMessage::InternalSwap(CP2P_TextMessage* other) {
  text_.Swap(&other->text_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_TextMessage::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_TextMessage

// optional bytes text = 1;
bool CP2P_TextMessage::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_TextMessage::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_TextMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_TextMessage::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& CP2P_TextMessage::text() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_TextMessage.text)
  return text_.GetNoArena();
}
void CP2P_TextMessage::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_TextMessage.text)
}
#if LANG_CXX11
void CP2P_TextMessage::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CP2P_TextMessage.text)
}
#endif
void CP2P_TextMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CP2P_TextMessage.text)
}
void CP2P_TextMessage::set_text(const void* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CP2P_TextMessage.text)
}
::std::string* CP2P_TextMessage::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:proto.dota.CP2P_TextMessage.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CP2P_TextMessage::release_text() {
  // @@protoc_insertion_point(field_release:proto.dota.CP2P_TextMessage.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CP2P_TextMessage::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CP2P_TextMessage.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSteam_Voice_Encoding::kVoiceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSteam_Voice_Encoding::CSteam_Voice_Encoding()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSteam_Voice_Encoding)
}
CSteam_Voice_Encoding::CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_data()) {
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSteam_Voice_Encoding)
}

void CSteam_Voice_Encoding::SharedCtor() {
  _cached_size_ = 0;
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSteam_Voice_Encoding::~CSteam_Voice_Encoding() {
  // @@protoc_insertion_point(destructor:proto.dota.CSteam_Voice_Encoding)
  SharedDtor();
}

void CSteam_Voice_Encoding::SharedDtor() {
  voice_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSteam_Voice_Encoding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSteam_Voice_Encoding::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CSteam_Voice_Encoding& CSteam_Voice_Encoding::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSteam_Voice_Encoding* CSteam_Voice_Encoding::New(::google::protobuf::Arena* arena) const {
  CSteam_Voice_Encoding* n = new CSteam_Voice_Encoding;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSteam_Voice_Encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSteam_Voice_Encoding)
  if (has_voice_data()) {
    GOOGLE_DCHECK(!voice_data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*voice_data_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSteam_Voice_Encoding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSteam_Voice_Encoding)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes voice_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSteam_Voice_Encoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSteam_Voice_Encoding)
  return false;
#undef DO_
}

void CSteam_Voice_Encoding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSteam_Voice_Encoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->voice_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSteam_Voice_Encoding)
}

::google::protobuf::uint8* CSteam_Voice_Encoding::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSteam_Voice_Encoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->voice_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSteam_Voice_Encoding)
  return target;
}

size_t CSteam_Voice_Encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSteam_Voice_Encoding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional bytes voice_data = 1;
  if (has_voice_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->voice_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSteam_Voice_Encoding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteam_Voice_Encoding* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSteam_Voice_Encoding>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSteam_Voice_Encoding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSteam_Voice_Encoding)
    MergeFrom(*source);
  }
}

void CSteam_Voice_Encoding::MergeFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_data()) {
    set_has_voice_data();
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
}

void CSteam_Voice_Encoding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteam_Voice_Encoding::CopyFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteam_Voice_Encoding::IsInitialized() const {
  return true;
}

void CSteam_Voice_Encoding::Swap(CSteam_Voice_Encoding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSteam_Voice_Encoding::InternalSwap(CSteam_Voice_Encoding* other) {
  voice_data_.Swap(&other->voice_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSteam_Voice_Encoding::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSteam_Voice_Encoding

// optional bytes voice_data = 1;
bool CSteam_Voice_Encoding::has_voice_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSteam_Voice_Encoding::set_has_voice_data() {
  _has_bits_[0] |= 0x00000001u;
}
void CSteam_Voice_Encoding::clear_has_voice_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSteam_Voice_Encoding::clear_voice_data() {
  voice_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_voice_data();
}
const ::std::string& CSteam_Voice_Encoding::voice_data() const {
  // @@protoc_insertion_point(field_get:proto.dota.CSteam_Voice_Encoding.voice_data)
  return voice_data_.GetNoArena();
}
void CSteam_Voice_Encoding::set_voice_data(const ::std::string& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CSteam_Voice_Encoding.voice_data)
}
#if LANG_CXX11
void CSteam_Voice_Encoding::set_voice_data(::std::string&& value) {
  set_has_voice_data();
  voice_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CSteam_Voice_Encoding.voice_data)
}
#endif
void CSteam_Voice_Encoding::set_voice_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CSteam_Voice_Encoding.voice_data)
}
void CSteam_Voice_Encoding::set_voice_data(const void* value, size_t size) {
  set_has_voice_data();
  voice_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CSteam_Voice_Encoding.voice_data)
}
::std::string* CSteam_Voice_Encoding::mutable_voice_data() {
  set_has_voice_data();
  // @@protoc_insertion_point(field_mutable:proto.dota.CSteam_Voice_Encoding.voice_data)
  return voice_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CSteam_Voice_Encoding::release_voice_data() {
  // @@protoc_insertion_point(field_release:proto.dota.CSteam_Voice_Encoding.voice_data)
  clear_has_voice_data();
  return voice_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CSteam_Voice_Encoding::set_allocated_voice_data(::std::string* voice_data) {
  if (voice_data != NULL) {
    set_has_voice_data();
  } else {
    clear_has_voice_data();
  }
  voice_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), voice_data);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CSteam_Voice_Encoding.voice_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_Voice::kAudioFieldNumber;
const int CP2P_Voice::kBroadcastGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_Voice::CP2P_Voice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_Voice)
}
CP2P_Voice::CP2P_Voice(const CP2P_Voice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio()) {
    audio_ = new ::proto::dota::CMsgVoiceAudio(*from.audio_);
  } else {
    audio_ = NULL;
  }
  broadcast_group_ = from.broadcast_group_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_Voice)
}

void CP2P_Voice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&audio_, 0, reinterpret_cast<char*>(&broadcast_group_) -
    reinterpret_cast<char*>(&audio_) + sizeof(broadcast_group_));
}

CP2P_Voice::~CP2P_Voice() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_Voice)
  SharedDtor();
}

void CP2P_Voice::SharedDtor() {
  if (this != internal_default_instance()) {
    delete audio_;
  }
}

void CP2P_Voice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_Voice::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_Voice& CP2P_Voice::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_Voice* CP2P_Voice::New(::google::protobuf::Arena* arena) const {
  CP2P_Voice* n = new CP2P_Voice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_Voice)
  if (has_audio()) {
    GOOGLE_DCHECK(audio_ != NULL);
    audio_->::proto::dota::CMsgVoiceAudio::Clear();
  }
  broadcast_group_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_Voice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVoiceAudio audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 broadcast_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_broadcast_group();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_Voice)
  return false;
#undef DO_
}

void CP2P_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->audio_, output);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->broadcast_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_Voice)
}

::google::protobuf::uint8* CP2P_Voice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->audio_, deterministic, target);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->broadcast_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_Voice)
  return target;
}

size_t CP2P_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_Voice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVoiceAudio audio = 1;
    if (has_audio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->audio_);
    }

    // optional uint32 broadcast_group = 2;
    if (has_broadcast_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcast_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_Voice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Voice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_Voice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_Voice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_Voice)
    MergeFrom(*source);
  }
}

void CP2P_Voice::MergeFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_audio()->::proto::dota::CMsgVoiceAudio::MergeFrom(from.audio());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_group_ = from.broadcast_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Voice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Voice::CopyFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Voice::IsInitialized() const {
  return true;
}

void CP2P_Voice::Swap(CP2P_Voice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Voice::InternalSwap(CP2P_Voice* other) {
  std::swap(audio_, other->audio_);
  std::swap(broadcast_group_, other->broadcast_group_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_Voice::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_Voice

// optional .proto.dota.CMsgVoiceAudio audio = 1;
bool CP2P_Voice::has_audio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_Voice::set_has_audio() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_Voice::clear_has_audio() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_Voice::clear_audio() {
  if (audio_ != NULL) audio_->::proto::dota::CMsgVoiceAudio::Clear();
  clear_has_audio();
}
const ::proto::dota::CMsgVoiceAudio& CP2P_Voice::audio() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_Voice.audio)
  return audio_ != NULL ? *audio_
                         : *::proto::dota::CMsgVoiceAudio::internal_default_instance();
}
::proto::dota::CMsgVoiceAudio* CP2P_Voice::mutable_audio() {
  set_has_audio();
  if (audio_ == NULL) {
    audio_ = new ::proto::dota::CMsgVoiceAudio;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CP2P_Voice.audio)
  return audio_;
}
::proto::dota::CMsgVoiceAudio* CP2P_Voice::release_audio() {
  // @@protoc_insertion_point(field_release:proto.dota.CP2P_Voice.audio)
  clear_has_audio();
  ::proto::dota::CMsgVoiceAudio* temp = audio_;
  audio_ = NULL;
  return temp;
}
void CP2P_Voice::set_allocated_audio(::proto::dota::CMsgVoiceAudio* audio) {
  delete audio_;
  audio_ = audio;
  if (audio) {
    set_has_audio();
  } else {
    clear_has_audio();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CP2P_Voice.audio)
}

// optional uint32 broadcast_group = 2;
bool CP2P_Voice::has_broadcast_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_Voice::set_has_broadcast_group() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_Voice::clear_has_broadcast_group() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_Voice::clear_broadcast_group() {
  broadcast_group_ = 0u;
  clear_has_broadcast_group();
}
::google::protobuf::uint32 CP2P_Voice::broadcast_group() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_Voice.broadcast_group)
  return broadcast_group_;
}
void CP2P_Voice::set_broadcast_group(::google::protobuf::uint32 value) {
  set_has_broadcast_group();
  broadcast_group_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_Voice.broadcast_group)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_Ping::kSendTimeFieldNumber;
const int CP2P_Ping::kIsReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_Ping::CP2P_Ping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_Ping)
}
CP2P_Ping::CP2P_Ping(const CP2P_Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&send_time_, &from.send_time_,
    reinterpret_cast<char*>(&is_reply_) -
    reinterpret_cast<char*>(&send_time_) + sizeof(is_reply_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_Ping)
}

void CP2P_Ping::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&send_time_, 0, reinterpret_cast<char*>(&is_reply_) -
    reinterpret_cast<char*>(&send_time_) + sizeof(is_reply_));
}

CP2P_Ping::~CP2P_Ping() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_Ping)
  SharedDtor();
}

void CP2P_Ping::SharedDtor() {
}

void CP2P_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_Ping::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_Ping& CP2P_Ping::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_Ping* CP2P_Ping::New(::google::protobuf::Arena* arena) const {
  CP2P_Ping* n = new CP2P_Ping;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_Ping)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&send_time_, 0, reinterpret_cast<char*>(&is_reply_) -
      reinterpret_cast<char*>(&send_time_) + sizeof(is_reply_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_Ping)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 send_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_reply();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_Ping)
  return false;
#undef DO_
}

void CP2P_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->send_time(), output);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_Ping)
}

::google::protobuf::uint8* CP2P_Ping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->send_time(), target);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_Ping)
  return target;
}

size_t CP2P_Ping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CP2P_Ping)
  size_t total_size = 0;

  if (has_send_time()) {
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());
  }

  if (has_is_reply()) {
    // required bool is_reply = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CP2P_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());

    // required bool is_reply = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Ping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_Ping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_Ping)
    MergeFrom(*source);
  }
}

void CP2P_Ping::MergeFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      send_time_ = from.send_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_reply_ = from.is_reply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Ping::CopyFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CP2P_Ping::Swap(CP2P_Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Ping::InternalSwap(CP2P_Ping* other) {
  std::swap(send_time_, other->send_time_);
  std::swap(is_reply_, other->is_reply_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_Ping::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_Ping

// required uint64 send_time = 1;
bool CP2P_Ping::has_send_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_Ping::set_has_send_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_Ping::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_Ping::clear_send_time() {
  send_time_ = GOOGLE_ULONGLONG(0);
  clear_has_send_time();
}
::google::protobuf::uint64 CP2P_Ping::send_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_Ping.send_time)
  return send_time_;
}
void CP2P_Ping::set_send_time(::google::protobuf::uint64 value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_Ping.send_time)
}

// required bool is_reply = 2;
bool CP2P_Ping::has_is_reply() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_Ping::set_has_is_reply() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_Ping::clear_has_is_reply() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_Ping::clear_is_reply() {
  is_reply_ = false;
  clear_has_is_reply();
}
bool CP2P_Ping::is_reply() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_Ping.is_reply)
  return is_reply_;
}
void CP2P_Ping::set_is_reply(bool value) {
  set_has_is_reply();
  is_reply_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_Ping.is_reply)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_VRAvatarPosition_COrientation::kPosFieldNumber;
const int CP2P_VRAvatarPosition_COrientation::kAngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(const CP2P_VRAvatarPosition_COrientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::dota::CMsgVector(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_ang()) {
    ang_ = new ::proto::dota::CMsgQAngle(*from.ang_);
  } else {
    ang_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
}

void CP2P_VRAvatarPosition_COrientation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, reinterpret_cast<char*>(&ang_) -
    reinterpret_cast<char*>(&pos_) + sizeof(ang_));
}

CP2P_VRAvatarPosition_COrientation::~CP2P_VRAvatarPosition_COrientation() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
  SharedDtor();
}

void CP2P_VRAvatarPosition_COrientation::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pos_;
  }
  if (this != internal_default_instance()) {
    delete ang_;
  }
}

void CP2P_VRAvatarPosition_COrientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_VRAvatarPosition_COrientation::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_VRAvatarPosition_COrientation& CP2P_VRAvatarPosition_COrientation::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition_COrientation::New(::google::protobuf::Arena* arena) const {
  CP2P_VRAvatarPosition_COrientation* n = new CP2P_VRAvatarPosition_COrientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_VRAvatarPosition_COrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->::proto::dota::CMsgVector::Clear();
    }
    if (has_ang()) {
      GOOGLE_DCHECK(ang_ != NULL);
      ang_->::proto::dota::CMsgQAngle::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_VRAvatarPosition_COrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle ang = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ang()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return false;
#undef DO_
}

void CP2P_VRAvatarPosition_COrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional .proto.dota.CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ang_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_VRAvatarPosition.COrientation)
}

::google::protobuf::uint8* CP2P_VRAvatarPosition_COrientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, deterministic, target);
  }

  // optional .proto.dota.CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->ang_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return target;
}

size_t CP2P_VRAvatarPosition_COrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .proto.dota.CMsgVector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional .proto.dota.CMsgQAngle ang = 2;
    if (has_ang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ang_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition_COrientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_VRAvatarPosition_COrientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_VRAvatarPosition.COrientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_VRAvatarPosition.COrientation)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::proto::dota::CMsgVector::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ang()->::proto::dota::CMsgQAngle::MergeFrom(from.ang());
    }
  }
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition_COrientation::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition_COrientation::Swap(CP2P_VRAvatarPosition_COrientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_VRAvatarPosition_COrientation::InternalSwap(CP2P_VRAvatarPosition_COrientation* other) {
  std::swap(pos_, other->pos_);
  std::swap(ang_, other->ang_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_VRAvatarPosition_COrientation::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_VRAvatarPosition_COrientation

// optional .proto.dota.CMsgVector pos = 1;
bool CP2P_VRAvatarPosition_COrientation::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_VRAvatarPosition_COrientation::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_VRAvatarPosition_COrientation::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_VRAvatarPosition_COrientation::clear_pos() {
  if (pos_ != NULL) pos_->::proto::dota::CMsgVector::Clear();
  clear_has_pos();
}
const ::proto::dota::CMsgVector& CP2P_VRAvatarPosition_COrientation::pos() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.COrientation.pos)
  return pos_ != NULL ? *pos_
                         : *::proto::dota::CMsgVector::internal_default_instance();
}
::proto::dota::CMsgVector* CP2P_VRAvatarPosition_COrientation::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::proto::dota::CMsgVector;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CP2P_VRAvatarPosition.COrientation.pos)
  return pos_;
}
::proto::dota::CMsgVector* CP2P_VRAvatarPosition_COrientation::release_pos() {
  // @@protoc_insertion_point(field_release:proto.dota.CP2P_VRAvatarPosition.COrientation.pos)
  clear_has_pos();
  ::proto::dota::CMsgVector* temp = pos_;
  pos_ = NULL;
  return temp;
}
void CP2P_VRAvatarPosition_COrientation::set_allocated_pos(::proto::dota::CMsgVector* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CP2P_VRAvatarPosition.COrientation.pos)
}

// optional .proto.dota.CMsgQAngle ang = 2;
bool CP2P_VRAvatarPosition_COrientation::has_ang() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_VRAvatarPosition_COrientation::set_has_ang() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_VRAvatarPosition_COrientation::clear_has_ang() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_VRAvatarPosition_COrientation::clear_ang() {
  if (ang_ != NULL) ang_->::proto::dota::CMsgQAngle::Clear();
  clear_has_ang();
}
const ::proto::dota::CMsgQAngle& CP2P_VRAvatarPosition_COrientation::ang() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.COrientation.ang)
  return ang_ != NULL ? *ang_
                         : *::proto::dota::CMsgQAngle::internal_default_instance();
}
::proto::dota::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::mutable_ang() {
  set_has_ang();
  if (ang_ == NULL) {
    ang_ = new ::proto::dota::CMsgQAngle;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CP2P_VRAvatarPosition.COrientation.ang)
  return ang_;
}
::proto::dota::CMsgQAngle* CP2P_VRAvatarPosition_COrientation::release_ang() {
  // @@protoc_insertion_point(field_release:proto.dota.CP2P_VRAvatarPosition.COrientation.ang)
  clear_has_ang();
  ::proto::dota::CMsgQAngle* temp = ang_;
  ang_ = NULL;
  return temp;
}
void CP2P_VRAvatarPosition_COrientation::set_allocated_ang(::proto::dota::CMsgQAngle* ang) {
  delete ang_;
  ang_ = ang;
  if (ang) {
    set_has_ang();
  } else {
    clear_has_ang();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CP2P_VRAvatarPosition.COrientation.ang)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_VRAvatarPosition::kBodyPartsFieldNumber;
const int CP2P_VRAvatarPosition::kHatIdFieldNumber;
const int CP2P_VRAvatarPosition::kSceneIdFieldNumber;
const int CP2P_VRAvatarPosition::kWorldScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_VRAvatarPosition::CP2P_VRAvatarPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_VRAvatarPosition)
}
CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(const CP2P_VRAvatarPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      body_parts_(from.body_parts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hat_id_, &from.hat_id_,
    reinterpret_cast<char*>(&world_scale_) -
    reinterpret_cast<char*>(&hat_id_) + sizeof(world_scale_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_VRAvatarPosition)
}

void CP2P_VRAvatarPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&hat_id_, 0, reinterpret_cast<char*>(&world_scale_) -
    reinterpret_cast<char*>(&hat_id_) + sizeof(world_scale_));
}

CP2P_VRAvatarPosition::~CP2P_VRAvatarPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_VRAvatarPosition)
  SharedDtor();
}

void CP2P_VRAvatarPosition::SharedDtor() {
}

void CP2P_VRAvatarPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_VRAvatarPosition::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_VRAvatarPosition& CP2P_VRAvatarPosition::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_VRAvatarPosition* CP2P_VRAvatarPosition::New(::google::protobuf::Arena* arena) const {
  CP2P_VRAvatarPosition* n = new CP2P_VRAvatarPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_VRAvatarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_VRAvatarPosition)
  body_parts_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&hat_id_, 0, reinterpret_cast<char*>(&world_scale_) -
      reinterpret_cast<char*>(&hat_id_) + sizeof(world_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_VRAvatarPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_VRAvatarPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_body_parts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hat_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scene_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_scene_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 world_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_world_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_VRAvatarPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_VRAvatarPosition)
  return false;
#undef DO_
}

void CP2P_VRAvatarPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_VRAvatarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned int i = 0, n = this->body_parts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->body_parts(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hat_id(), output);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->world_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_VRAvatarPosition)
}

::google::protobuf::uint8* CP2P_VRAvatarPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_VRAvatarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned int i = 0, n = this->body_parts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->body_parts(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hat_id(), target);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->world_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_VRAvatarPosition)
  return target;
}

size_t CP2P_VRAvatarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_VRAvatarPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  {
    unsigned int count = this->body_parts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->body_parts(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 hat_id = 2;
    if (has_hat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hat_id());
    }

    // optional int32 scene_id = 3;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 world_scale = 4;
    if (has_world_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_scale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_VRAvatarPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_VRAvatarPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_VRAvatarPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_VRAvatarPosition)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition::MergeFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_parts_.MergeFrom(from.body_parts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      hat_id_ = from.hat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      scene_id_ = from.scene_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      world_scale_ = from.world_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_VRAvatarPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition::CopyFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition::Swap(CP2P_VRAvatarPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_VRAvatarPosition::InternalSwap(CP2P_VRAvatarPosition* other) {
  body_parts_.InternalSwap(&other->body_parts_);
  std::swap(hat_id_, other->hat_id_);
  std::swap(scene_id_, other->scene_id_);
  std::swap(world_scale_, other->world_scale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_VRAvatarPosition::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_VRAvatarPosition

// repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
int CP2P_VRAvatarPosition::body_parts_size() const {
  return body_parts_.size();
}
void CP2P_VRAvatarPosition::clear_body_parts() {
  body_parts_.Clear();
}
const ::proto::dota::CP2P_VRAvatarPosition_COrientation& CP2P_VRAvatarPosition::body_parts(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.body_parts)
  return body_parts_.Get(index);
}
::proto::dota::CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition::mutable_body_parts(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CP2P_VRAvatarPosition.body_parts)
  return body_parts_.Mutable(index);
}
::proto::dota::CP2P_VRAvatarPosition_COrientation* CP2P_VRAvatarPosition::add_body_parts() {
  // @@protoc_insertion_point(field_add:proto.dota.CP2P_VRAvatarPosition.body_parts)
  return body_parts_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CP2P_VRAvatarPosition_COrientation >*
CP2P_VRAvatarPosition::mutable_body_parts() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CP2P_VRAvatarPosition.body_parts)
  return &body_parts_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CP2P_VRAvatarPosition_COrientation >&
CP2P_VRAvatarPosition::body_parts() const {
  // @@protoc_insertion_point(field_list:proto.dota.CP2P_VRAvatarPosition.body_parts)
  return body_parts_;
}

// optional int32 hat_id = 2;
bool CP2P_VRAvatarPosition::has_hat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_VRAvatarPosition::set_has_hat_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_VRAvatarPosition::clear_has_hat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_VRAvatarPosition::clear_hat_id() {
  hat_id_ = 0;
  clear_has_hat_id();
}
::google::protobuf::int32 CP2P_VRAvatarPosition::hat_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.hat_id)
  return hat_id_;
}
void CP2P_VRAvatarPosition::set_hat_id(::google::protobuf::int32 value) {
  set_has_hat_id();
  hat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_VRAvatarPosition.hat_id)
}

// optional int32 scene_id = 3;
bool CP2P_VRAvatarPosition::has_scene_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_VRAvatarPosition::set_has_scene_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_VRAvatarPosition::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_VRAvatarPosition::clear_scene_id() {
  scene_id_ = 0;
  clear_has_scene_id();
}
::google::protobuf::int32 CP2P_VRAvatarPosition::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.scene_id)
  return scene_id_;
}
void CP2P_VRAvatarPosition::set_scene_id(::google::protobuf::int32 value) {
  set_has_scene_id();
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_VRAvatarPosition.scene_id)
}

// optional int32 world_scale = 4;
bool CP2P_VRAvatarPosition::has_world_scale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CP2P_VRAvatarPosition::set_has_world_scale() {
  _has_bits_[0] |= 0x00000004u;
}
void CP2P_VRAvatarPosition::clear_has_world_scale() {
  _has_bits_[0] &= ~0x00000004u;
}
void CP2P_VRAvatarPosition::clear_world_scale() {
  world_scale_ = 0;
  clear_has_world_scale();
}
::google::protobuf::int32 CP2P_VRAvatarPosition::world_scale() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_VRAvatarPosition.world_scale)
  return world_scale_;
}
void CP2P_VRAvatarPosition::set_world_scale(::google::protobuf::int32 value) {
  set_has_world_scale();
  world_scale_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_VRAvatarPosition.world_scale)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_WatchSynchronization::kDemoTickFieldNumber;
const int CP2P_WatchSynchronization::kPausedFieldNumber;
const int CP2P_WatchSynchronization::kTvListenVoiceIndicesFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorModeFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorWatchingBroadcasterFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorHeroIndexFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorAutospeedFieldNumber;
const int CP2P_WatchSynchronization::kDotaReplaySpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_WatchSynchronization::CP2P_WatchSynchronization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_WatchSynchronization)
}
CP2P_WatchSynchronization::CP2P_WatchSynchronization(const CP2P_WatchSynchronization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&demo_tick_, &from.demo_tick_,
    reinterpret_cast<char*>(&dota_replay_speed_) -
    reinterpret_cast<char*>(&demo_tick_) + sizeof(dota_replay_speed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_WatchSynchronization)
}

void CP2P_WatchSynchronization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&demo_tick_, 0, reinterpret_cast<char*>(&dota_replay_speed_) -
    reinterpret_cast<char*>(&demo_tick_) + sizeof(dota_replay_speed_));
}

CP2P_WatchSynchronization::~CP2P_WatchSynchronization() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_WatchSynchronization)
  SharedDtor();
}

void CP2P_WatchSynchronization::SharedDtor() {
}

void CP2P_WatchSynchronization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CP2P_WatchSynchronization::descriptor() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CP2P_WatchSynchronization& CP2P_WatchSynchronization::default_instance() {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::InitDefaults();
  return *internal_default_instance();
}

CP2P_WatchSynchronization* CP2P_WatchSynchronization::New(::google::protobuf::Arena* arena) const {
  CP2P_WatchSynchronization* n = new CP2P_WatchSynchronization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CP2P_WatchSynchronization::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_WatchSynchronization)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&demo_tick_, 0, reinterpret_cast<char*>(&dota_replay_speed_) -
      reinterpret_cast<char*>(&demo_tick_) + sizeof(dota_replay_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CP2P_WatchSynchronization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_WatchSynchronization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 demo_tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_demo_tick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demo_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paused = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_paused();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tv_listen_voice_indices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tv_listen_voice_indices();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_listen_voice_indices_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_dota_spectator_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_watching_broadcaster = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_dota_spectator_watching_broadcaster();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_watching_broadcaster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_hero_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_dota_spectator_hero_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_hero_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_autospeed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_dota_spectator_autospeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_autospeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_replay_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_dota_replay_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_replay_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_WatchSynchronization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_WatchSynchronization)
  return false;
#undef DO_
}

void CP2P_WatchSynchronization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_WatchSynchronization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->demo_tick(), output);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->paused(), output);
  }

  // optional int32 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tv_listen_voice_indices(), output);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dota_spectator_mode(), output);
  }

  // optional int32 dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_spectator_watching_broadcaster(), output);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dota_spectator_hero_index(), output);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dota_spectator_autospeed(), output);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dota_replay_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_WatchSynchronization)
}

::google::protobuf::uint8* CP2P_WatchSynchronization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_WatchSynchronization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->demo_tick(), target);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->paused(), target);
  }

  // optional int32 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tv_listen_voice_indices(), target);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dota_spectator_mode(), target);
  }

  // optional int32 dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_spectator_watching_broadcaster(), target);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dota_spectator_hero_index(), target);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dota_spectator_autospeed(), target);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dota_replay_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_WatchSynchronization)
  return target;
}

size_t CP2P_WatchSynchronization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_WatchSynchronization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 demo_tick = 1;
    if (has_demo_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demo_tick());
    }

    // optional bool paused = 2;
    if (has_paused()) {
      total_size += 1 + 1;
    }

    // optional int32 tv_listen_voice_indices = 3;
    if (has_tv_listen_voice_indices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_listen_voice_indices());
    }

    // optional int32 dota_spectator_mode = 4;
    if (has_dota_spectator_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_mode());
    }

    // optional int32 dota_spectator_watching_broadcaster = 5;
    if (has_dota_spectator_watching_broadcaster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_watching_broadcaster());
    }

    // optional int32 dota_spectator_hero_index = 6;
    if (has_dota_spectator_hero_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_hero_index());
    }

    // optional int32 dota_spectator_autospeed = 7;
    if (has_dota_spectator_autospeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_autospeed());
    }

    // optional int32 dota_replay_speed = 8;
    if (has_dota_replay_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_replay_speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CP2P_WatchSynchronization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_WatchSynchronization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CP2P_WatchSynchronization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_WatchSynchronization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_WatchSynchronization)
    MergeFrom(*source);
  }
}

void CP2P_WatchSynchronization::MergeFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      demo_tick_ = from.demo_tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000004u) {
      tv_listen_voice_indices_ = from.tv_listen_voice_indices_;
    }
    if (cached_has_bits & 0x00000008u) {
      dota_spectator_mode_ = from.dota_spectator_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      dota_spectator_watching_broadcaster_ = from.dota_spectator_watching_broadcaster_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_spectator_hero_index_ = from.dota_spectator_hero_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      dota_spectator_autospeed_ = from.dota_spectator_autospeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      dota_replay_speed_ = from.dota_replay_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_WatchSynchronization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_WatchSynchronization::CopyFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_WatchSynchronization::IsInitialized() const {
  return true;
}

void CP2P_WatchSynchronization::Swap(CP2P_WatchSynchronization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_WatchSynchronization::InternalSwap(CP2P_WatchSynchronization* other) {
  std::swap(demo_tick_, other->demo_tick_);
  std::swap(paused_, other->paused_);
  std::swap(tv_listen_voice_indices_, other->tv_listen_voice_indices_);
  std::swap(dota_spectator_mode_, other->dota_spectator_mode_);
  std::swap(dota_spectator_watching_broadcaster_, other->dota_spectator_watching_broadcaster_);
  std::swap(dota_spectator_hero_index_, other->dota_spectator_hero_index_);
  std::swap(dota_spectator_autospeed_, other->dota_spectator_autospeed_);
  std::swap(dota_replay_speed_, other->dota_replay_speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CP2P_WatchSynchronization::GetMetadata() const {
  protobuf_c_5fpeer2peer_5fnetmessages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_c_5fpeer2peer_5fnetmessages_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CP2P_WatchSynchronization

// optional int32 demo_tick = 1;
bool CP2P_WatchSynchronization::has_demo_tick() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CP2P_WatchSynchronization::set_has_demo_tick() {
  _has_bits_[0] |= 0x00000001u;
}
void CP2P_WatchSynchronization::clear_has_demo_tick() {
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_WatchSynchronization::clear_demo_tick() {
  demo_tick_ = 0;
  clear_has_demo_tick();
}
::google::protobuf::int32 CP2P_WatchSynchronization::demo_tick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.demo_tick)
  return demo_tick_;
}
void CP2P_WatchSynchronization::set_demo_tick(::google::protobuf::int32 value) {
  set_has_demo_tick();
  demo_tick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.demo_tick)
}

// optional bool paused = 2;
bool CP2P_WatchSynchronization::has_paused() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CP2P_WatchSynchronization::set_has_paused() {
  _has_bits_[0] |= 0x00000002u;
}
void CP2P_WatchSynchronization::clear_has_paused() {
  _has_bits_[0] &= ~0x00000002u;
}
void CP2P_WatchSynchronization::clear_paused() {
  paused_ = false;
  clear_has_paused();
}
bool CP2P_WatchSynchronization::paused() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.paused)
  return paused_;
}
void CP2P_WatchSynchronization::set_paused(bool value) {
  set_has_paused();
  paused_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.paused)
}

// optional int32 tv_listen_voice_indices = 3;
bool CP2P_WatchSynchronization::has_tv_listen_voice_indices() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CP2P_WatchSynchronization::set_has_tv_listen_voice_indices() {
  _has_bits_[0] |= 0x00000004u;
}
void CP2P_WatchSynchronization::clear_has_tv_listen_voice_indices() {
  _has_bits_[0] &= ~0x00000004u;
}
void CP2P_WatchSynchronization::clear_tv_listen_voice_indices() {
  tv_listen_voice_indices_ = 0;
  clear_has_tv_listen_voice_indices();
}
::google::protobuf::int32 CP2P_WatchSynchronization::tv_listen_voice_indices() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.tv_listen_voice_indices)
  return tv_listen_voice_indices_;
}
void CP2P_WatchSynchronization::set_tv_listen_voice_indices(::google::protobuf::int32 value) {
  set_has_tv_listen_voice_indices();
  tv_listen_voice_indices_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.tv_listen_voice_indices)
}

// optional int32 dota_spectator_mode = 4;
bool CP2P_WatchSynchronization::has_dota_spectator_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CP2P_WatchSynchronization::set_has_dota_spectator_mode() {
  _has_bits_[0] |= 0x00000008u;
}
void CP2P_WatchSynchronization::clear_has_dota_spectator_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
void CP2P_WatchSynchronization::clear_dota_spectator_mode() {
  dota_spectator_mode_ = 0;
  clear_has_dota_spectator_mode();
}
::google::protobuf::int32 CP2P_WatchSynchronization::dota_spectator_mode() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.dota_spectator_mode)
  return dota_spectator_mode_;
}
void CP2P_WatchSynchronization::set_dota_spectator_mode(::google::protobuf::int32 value) {
  set_has_dota_spectator_mode();
  dota_spectator_mode_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.dota_spectator_mode)
}

// optional int32 dota_spectator_watching_broadcaster = 5;
bool CP2P_WatchSynchronization::has_dota_spectator_watching_broadcaster() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CP2P_WatchSynchronization::set_has_dota_spectator_watching_broadcaster() {
  _has_bits_[0] |= 0x00000010u;
}
void CP2P_WatchSynchronization::clear_has_dota_spectator_watching_broadcaster() {
  _has_bits_[0] &= ~0x00000010u;
}
void CP2P_WatchSynchronization::clear_dota_spectator_watching_broadcaster() {
  dota_spectator_watching_broadcaster_ = 0;
  clear_has_dota_spectator_watching_broadcaster();
}
::google::protobuf::int32 CP2P_WatchSynchronization::dota_spectator_watching_broadcaster() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.dota_spectator_watching_broadcaster)
  return dota_spectator_watching_broadcaster_;
}
void CP2P_WatchSynchronization::set_dota_spectator_watching_broadcaster(::google::protobuf::int32 value) {
  set_has_dota_spectator_watching_broadcaster();
  dota_spectator_watching_broadcaster_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.dota_spectator_watching_broadcaster)
}

// optional int32 dota_spectator_hero_index = 6;
bool CP2P_WatchSynchronization::has_dota_spectator_hero_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CP2P_WatchSynchronization::set_has_dota_spectator_hero_index() {
  _has_bits_[0] |= 0x00000020u;
}
void CP2P_WatchSynchronization::clear_has_dota_spectator_hero_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void CP2P_WatchSynchronization::clear_dota_spectator_hero_index() {
  dota_spectator_hero_index_ = 0;
  clear_has_dota_spectator_hero_index();
}
::google::protobuf::int32 CP2P_WatchSynchronization::dota_spectator_hero_index() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.dota_spectator_hero_index)
  return dota_spectator_hero_index_;
}
void CP2P_WatchSynchronization::set_dota_spectator_hero_index(::google::protobuf::int32 value) {
  set_has_dota_spectator_hero_index();
  dota_spectator_hero_index_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.dota_spectator_hero_index)
}

// optional int32 dota_spectator_autospeed = 7;
bool CP2P_WatchSynchronization::has_dota_spectator_autospeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CP2P_WatchSynchronization::set_has_dota_spectator_autospeed() {
  _has_bits_[0] |= 0x00000040u;
}
void CP2P_WatchSynchronization::clear_has_dota_spectator_autospeed() {
  _has_bits_[0] &= ~0x00000040u;
}
void CP2P_WatchSynchronization::clear_dota_spectator_autospeed() {
  dota_spectator_autospeed_ = 0;
  clear_has_dota_spectator_autospeed();
}
::google::protobuf::int32 CP2P_WatchSynchronization::dota_spectator_autospeed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.dota_spectator_autospeed)
  return dota_spectator_autospeed_;
}
void CP2P_WatchSynchronization::set_dota_spectator_autospeed(::google::protobuf::int32 value) {
  set_has_dota_spectator_autospeed();
  dota_spectator_autospeed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.dota_spectator_autospeed)
}

// optional int32 dota_replay_speed = 8;
bool CP2P_WatchSynchronization::has_dota_replay_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CP2P_WatchSynchronization::set_has_dota_replay_speed() {
  _has_bits_[0] |= 0x00000080u;
}
void CP2P_WatchSynchronization::clear_has_dota_replay_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
void CP2P_WatchSynchronization::clear_dota_replay_speed() {
  dota_replay_speed_ = 0;
  clear_has_dota_replay_speed();
}
::google::protobuf::int32 CP2P_WatchSynchronization::dota_replay_speed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CP2P_WatchSynchronization.dota_replay_speed)
  return dota_replay_speed_;
}
void CP2P_WatchSynchronization::set_dota_replay_speed(::google::protobuf::int32 value) {
  set_has_dota_replay_speed();
  dota_replay_speed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CP2P_WatchSynchronization.dota_replay_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
