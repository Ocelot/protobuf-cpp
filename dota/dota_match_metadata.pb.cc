// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_match_metadata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_match_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace dota {
class CDOTAMatchMetadataFileDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadataFile> {
} _CDOTAMatchMetadataFile_default_instance_;
class CDOTAMatchMetadata_Team_PlayerKillDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_PlayerKill> {
} _CDOTAMatchMetadata_Team_PlayerKill_default_instance_;
class CDOTAMatchMetadata_Team_ItemPurchaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_ItemPurchase> {
} _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_;
class CDOTAMatchMetadata_Team_InventorySnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_InventorySnapshot> {
} _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_;
class CDOTAMatchMetadata_Team_AutoStyleCriteriaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_AutoStyleCriteria> {
} _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_;
class CDOTAMatchMetadata_Team_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team_Player> {
} _CDOTAMatchMetadata_Team_Player_default_instance_;
class CDOTAMatchMetadata_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata_Team> {
} _CDOTAMatchMetadata_Team_default_instance_;
class CDOTAMatchMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchMetadata> {
} _CDOTAMatchMetadata_default_instance_;
class CDOTAMatchPrivateMetadata_Team_PlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Player> {
} _CDOTAMatchPrivateMetadata_Team_Player_default_instance_;
class CDOTAMatchPrivateMetadata_Team_BuildingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team_Building> {
} _CDOTAMatchPrivateMetadata_Team_Building_default_instance_;
class CDOTAMatchPrivateMetadata_TeamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata_Team> {
} _CDOTAMatchPrivateMetadata_Team_default_instance_;
class CDOTAMatchPrivateMetadataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CDOTAMatchPrivateMetadata> {
} _CDOTAMatchPrivateMetadata_default_instance_;

namespace protobuf_dota_5fmatch_5fmetadata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, match_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadataFile, private_metadata_),
  3,
  2,
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, victim_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_PlayerKill, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_ItemPurchase, purchase_time_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, item_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, game_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, deaths_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, assists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_InventorySnapshot, level_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, name_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_AutoStyleCriteria, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, ability_upgrades_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, equipped_econ_items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, kills_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, items_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_kills_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_deaths_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_assists_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_gpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_xpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_kills_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_assists_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_gpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_xpm_x16_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, win_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, best_win_streak_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, fight_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, farm_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, support_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, push_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, level_up_times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, graph_net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, inventory_snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, avg_stats_calibrated_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, auto_style_criteria_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, event_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team_Player, event_points_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  ~0u,
  18,
  19,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, dota_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_experience_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_gold_earned_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, graph_net_worth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_first_pick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_captain_player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_bans_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_picks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata_Team, cm_penalty_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, teams_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, item_rewards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, lobby_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, report_until_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchMetadata, event_game_custom_table_),
  ~0u,
  ~0u,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, player_slot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Player, position_stream_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, unit_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, position_quant_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, position_quant_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team_Building, death_time_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, dota_team_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata_Team, buildings_),
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAMatchPrivateMetadata, teams_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(CDOTAMatchMetadataFile)},
  { 13, 20, sizeof(CDOTAMatchMetadata_Team_PlayerKill)},
  { 22, 29, sizeof(CDOTAMatchMetadata_Team_ItemPurchase)},
  { 31, 42, sizeof(CDOTAMatchMetadata_Team_InventorySnapshot)},
  { 48, 55, sizeof(CDOTAMatchMetadata_Team_AutoStyleCriteria)},
  { 57, 90, sizeof(CDOTAMatchMetadata_Team_Player)},
  { 118, 133, sizeof(CDOTAMatchMetadata_Team)},
  { 143, 153, sizeof(CDOTAMatchMetadata)},
  { 158, 166, sizeof(CDOTAMatchPrivateMetadata_Team_Player)},
  { 169, 178, sizeof(CDOTAMatchPrivateMetadata_Team_Building)},
  { 182, 190, sizeof(CDOTAMatchPrivateMetadata_Team)},
  { 193, 199, sizeof(CDOTAMatchPrivateMetadata)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadataFile_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_PlayerKill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_ItemPurchase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchPrivateMetadata_Team_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchPrivateMetadata_Team_Building_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchPrivateMetadata_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CDOTAMatchPrivateMetadata_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dota_match_metadata.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _CDOTAMatchMetadataFile_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _CDOTAMatchMetadata_Team_PlayerKill_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CDOTAMatchMetadata_Team_Player_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _CDOTAMatchMetadata_Team_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _CDOTAMatchMetadata_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _CDOTAMatchPrivateMetadata_Team_Player_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _CDOTAMatchPrivateMetadata_Team_Building_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _CDOTAMatchPrivateMetadata_Team_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _CDOTAMatchPrivateMetadata_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::dota::protobuf_base_5fgcmessages_2eproto::InitDefaults();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::InitDefaults();
  _CDOTAMatchMetadataFile_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_PlayerKill_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_ItemPurchase_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_InventorySnapshot_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_AutoStyleCriteria_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_Player_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_Team_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadata_default_instance_.DefaultConstruct();
  _CDOTAMatchPrivateMetadata_Team_Player_default_instance_.DefaultConstruct();
  _CDOTAMatchPrivateMetadata_Team_Building_default_instance_.DefaultConstruct();
  _CDOTAMatchPrivateMetadata_Team_default_instance_.DefaultConstruct();
  _CDOTAMatchPrivateMetadata_default_instance_.DefaultConstruct();
  _CDOTAMatchMetadataFile_default_instance_.get_mutable()->metadata_ = const_cast< ::proto::dota::CDOTAMatchMetadata*>(
      ::proto::dota::CDOTAMatchMetadata::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\031dota_match_metadata.proto\022\nproto.dota\032"
      "\025base_gcmessages.proto\032-dota_gcmessages_"
      "common_match_management.proto\"\207\001\n\026CDOTAM"
      "atchMetadataFile\022\017\n\007version\030\001 \002(\005\022\020\n\010mat"
      "ch_id\030\002 \002(\004\0220\n\010metadata\030\003 \001(\0132\036.proto.do"
      "ta.CDOTAMatchMetadata\022\030\n\020private_metadat"
      "a\030\005 \001(\014\"\362\014\n\022CDOTAMatchMetadata\0222\n\005teams\030"
      "\001 \003(\0132#.proto.dota.CDOTAMatchMetadata.Te"
      "am\022:\n\014item_rewards\030\002 \003(\0132$.proto.dota.CL"
      "obbyTimedRewardDetails\022\020\n\010lobby_id\030\003 \001(\006"
      "\022\031\n\021report_until_time\030\004 \001(\006\022\037\n\027event_gam"
      "e_custom_table\030\005 \001(\014\032\235\013\n\004Team\022\021\n\tdota_te"
      "am\030\001 \001(\r\022;\n\007players\030\002 \003(\0132*.proto.dota.C"
      "DOTAMatchMetadata.Team.Player\022\030\n\020graph_e"
      "xperience\030\003 \003(\002\022\031\n\021graph_gold_earned\030\004 \003"
      "(\002\022\027\n\017graph_net_worth\030\005 \003(\002\022\025\n\rcm_first_"
      "pick\030\006 \001(\010\022\034\n\024cm_captain_player_id\030\007 \001(\r"
      "\022\017\n\007cm_bans\030\010 \003(\r\022\020\n\010cm_picks\030\t \003(\r\022\022\n\nc"
      "m_penalty\030\n \001(\r\0320\n\nPlayerKill\022\023\n\013victim_"
      "slot\030\001 \001(\r\022\r\n\005count\030\002 \001(\r\0326\n\014ItemPurchas"
      "e\022\017\n\007item_id\030\001 \001(\r\022\025\n\rpurchase_time\030\002 \001("
      "\005\032v\n\021InventorySnapshot\022\017\n\007item_id\030\001 \003(\r\022"
      "\021\n\tgame_time\030\002 \001(\005\022\r\n\005kills\030\003 \001(\r\022\016\n\006dea"
      "ths\030\004 \001(\r\022\017\n\007assists\030\005 \001(\r\022\r\n\005level\030\006 \001("
      "\r\0326\n\021AutoStyleCriteria\022\022\n\nname_token\030\001 \001"
      "(\r\022\r\n\005value\030\002 \001(\002\032\360\006\n\006Player\022\022\n\naccount_"
      "id\030\001 \001(\r\022\030\n\020ability_upgrades\030\002 \003(\r\022\023\n\013pl"
      "ayer_slot\030\003 \001(\r\0224\n\023equipped_econ_items\030\004"
      " \003(\0132\027.proto.dota.CSOEconItem\022=\n\005kills\030\005"
      " \003(\0132..proto.dota.CDOTAMatchMetadata.Tea"
      "m.PlayerKill\022\?\n\005items\030\006 \003(\01320.proto.dota"
      ".CDOTAMatchMetadata.Team.ItemPurchase\022\025\n"
      "\ravg_kills_x16\030\007 \001(\r\022\026\n\016avg_deaths_x16\030\010"
      " \001(\r\022\027\n\017avg_assists_x16\030\t \001(\r\022\023\n\013avg_gpm"
      "_x16\030\n \001(\r\022\023\n\013avg_xpm_x16\030\013 \001(\r\022\026\n\016best_"
      "kills_x16\030\014 \001(\r\022\030\n\020best_assists_x16\030\r \001("
      "\r\022\024\n\014best_gpm_x16\030\016 \001(\r\022\024\n\014best_xpm_x16\030"
      "\017 \001(\r\022\022\n\nwin_streak\030\020 \001(\r\022\027\n\017best_win_st"
      "reak\030\021 \001(\r\022\023\n\013fight_score\030\022 \001(\002\022\022\n\nfarm_"
      "score\030\023 \001(\002\022\025\n\rsupport_score\030\024 \001(\002\022\022\n\npu"
      "sh_score\030\025 \001(\002\022\026\n\016level_up_times\030\026 \003(\r\022\027"
      "\n\017graph_net_worth\030\027 \003(\002\022Q\n\022inventory_sna"
      "pshot\030\030 \003(\01325.proto.dota.CDOTAMatchMetad"
      "ata.Team.InventorySnapshot\022\034\n\024avg_stats_"
      "calibrated\030\031 \001(\010\022R\n\023auto_style_criteria\030"
      "\032 \003(\01325.proto.dota.CDOTAMatchMetadata.Te"
      "am.AutoStyleCriteria\022\020\n\010event_id\030\033 \001(\r\022\024"
      "\n\014event_points\030\034 \001(\r\"\261\003\n\031CDOTAMatchPriva"
      "teMetadata\0229\n\005teams\030\001 \003(\0132*.proto.dota.C"
      "DOTAMatchPrivateMetadata.Team\032\330\002\n\004Team\022\021"
      "\n\tdota_team\030\001 \001(\r\022B\n\007players\030\002 \003(\01321.pro"
      "to.dota.CDOTAMatchPrivateMetadata.Team.P"
      "layer\022F\n\tbuildings\030\003 \003(\01323.proto.dota.CD"
      "OTAMatchPrivateMetadata.Team.Building\032J\n"
      "\006Player\022\022\n\naccount_id\030\001 \001(\r\022\023\n\013player_sl"
      "ot\030\002 \001(\r\022\027\n\017position_stream\030\003 \001(\014\032e\n\010Bui"
      "lding\022\021\n\tunit_name\030\001 \001(\t\022\030\n\020position_qua"
      "nt_x\030\002 \001(\r\022\030\n\020position_quant_y\030\003 \001(\r\022\022\n\n"
      "death_time\030\004 \001(\002B\003\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_match_metadata.proto", &protobuf_RegisterTypes);
  ::proto::dota::protobuf_base_5fgcmessages_2eproto::AddDescriptors();
  ::proto::dota::protobuf_dota_5fgcmessages_5fcommon_5fmatch_5fmanagement_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dota_5fmatch_5fmetadata_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadataFile::kVersionFieldNumber;
const int CDOTAMatchMetadataFile::kMatchIdFieldNumber;
const int CDOTAMatchMetadataFile::kMetadataFieldNumber;
const int CDOTAMatchMetadataFile::kPrivateMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadataFile::CDOTAMatchMetadataFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadataFile)
}
CDOTAMatchMetadataFile::CDOTAMatchMetadataFile(const CDOTAMatchMetadataFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_metadata()) {
    private_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_metadata_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::proto::dota::CDOTAMatchMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  ::memcpy(&match_id_, &from.match_id_,
    reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&match_id_) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadataFile)
}

void CDOTAMatchMetadataFile::SharedCtor() {
  _cached_size_ = 0;
  private_metadata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&metadata_) + sizeof(version_));
}

CDOTAMatchMetadataFile::~CDOTAMatchMetadataFile() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadataFile)
  SharedDtor();
}

void CDOTAMatchMetadataFile::SharedDtor() {
  private_metadata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete metadata_;
  }
}

void CDOTAMatchMetadataFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadataFile::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadataFile& CDOTAMatchMetadataFile::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadataFile* CDOTAMatchMetadataFile::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadataFile* n = new CDOTAMatchMetadataFile;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadataFile::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadataFile)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_private_metadata()) {
      GOOGLE_DCHECK(!private_metadata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*private_metadata_.UnsafeRawStringPointer())->clear();
    }
    if (has_metadata()) {
      GOOGLE_DCHECK(metadata_ != NULL);
      metadata_->::proto::dota::CDOTAMatchMetadata::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&match_id_, 0, reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&match_id_) + sizeof(version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadataFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadataFile)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 match_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_match_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes private_metadata = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadataFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadataFile)
  return false;
#undef DO_
}

void CDOTAMatchMetadataFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->match_id(), output);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->metadata_, output);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->private_metadata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadataFile)
}

::google::protobuf::uint8* CDOTAMatchMetadataFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadataFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // required uint64 match_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->match_id(), target);
  }

  // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->metadata_, deterministic, target);
  }

  // optional bytes private_metadata = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->private_metadata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadataFile)
  return target;
}

size_t CDOTAMatchMetadataFile::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (has_match_id()) {
    // required uint64 match_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());
  }

  if (has_version()) {
    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  return total_size;
}
size_t CDOTAMatchMetadataFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadataFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint64 match_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->match_id());

    // required int32 version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes private_metadata = 5;
    if (has_private_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->private_metadata());
    }

    // optional .proto.dota.CDOTAMatchMetadata metadata = 3;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metadata_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadataFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadataFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadataFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadataFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadataFile)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadataFile::MergeFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadataFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_private_metadata();
      private_metadata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_metadata_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_metadata()->::proto::dota::CDOTAMatchMetadata::MergeFrom(from.metadata());
    }
    if (cached_has_bits & 0x00000004u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadataFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadataFile::CopyFrom(const CDOTAMatchMetadataFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadataFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadataFile::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  return true;
}

void CDOTAMatchMetadataFile::Swap(CDOTAMatchMetadataFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadataFile::InternalSwap(CDOTAMatchMetadataFile* other) {
  private_metadata_.Swap(&other->private_metadata_);
  std::swap(metadata_, other->metadata_);
  std::swap(match_id_, other->match_id_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadataFile::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadataFile

// required int32 version = 1;
bool CDOTAMatchMetadataFile::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMatchMetadataFile::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMatchMetadataFile::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMatchMetadataFile::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 CDOTAMatchMetadataFile::version() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.version)
  return version_;
}
void CDOTAMatchMetadataFile::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.version)
}

// required uint64 match_id = 2;
bool CDOTAMatchMetadataFile::has_match_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchMetadataFile::set_has_match_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchMetadataFile::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadataFile::clear_match_id() {
  match_id_ = GOOGLE_ULONGLONG(0);
  clear_has_match_id();
}
::google::protobuf::uint64 CDOTAMatchMetadataFile::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.match_id)
  return match_id_;
}
void CDOTAMatchMetadataFile::set_match_id(::google::protobuf::uint64 value) {
  set_has_match_id();
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.match_id)
}

// optional .proto.dota.CDOTAMatchMetadata metadata = 3;
bool CDOTAMatchMetadataFile::has_metadata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadataFile::set_has_metadata() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadataFile::clear_has_metadata() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadataFile::clear_metadata() {
  if (metadata_ != NULL) metadata_->::proto::dota::CDOTAMatchMetadata::Clear();
  clear_has_metadata();
}
const ::proto::dota::CDOTAMatchMetadata& CDOTAMatchMetadataFile::metadata() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::proto::dota::CDOTAMatchMetadata::internal_default_instance();
}
::proto::dota::CDOTAMatchMetadata* CDOTAMatchMetadataFile::mutable_metadata() {
  set_has_metadata();
  if (metadata_ == NULL) {
    metadata_ = new ::proto::dota::CDOTAMatchMetadata;
  }
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadataFile.metadata)
  return metadata_;
}
::proto::dota::CDOTAMatchMetadata* CDOTAMatchMetadataFile::release_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadataFile.metadata)
  clear_has_metadata();
  ::proto::dota::CDOTAMatchMetadata* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void CDOTAMatchMetadataFile::set_allocated_metadata(::proto::dota::CDOTAMatchMetadata* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    set_has_metadata();
  } else {
    clear_has_metadata();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadataFile.metadata)
}

// optional bytes private_metadata = 5;
bool CDOTAMatchMetadataFile::has_private_metadata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadataFile::set_has_private_metadata() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadataFile::clear_has_private_metadata() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadataFile::clear_private_metadata() {
  private_metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_private_metadata();
}
const ::std::string& CDOTAMatchMetadataFile::private_metadata() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  return private_metadata_.GetNoArena();
}
void CDOTAMatchMetadataFile::set_private_metadata(const ::std::string& value) {
  set_has_private_metadata();
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
#if LANG_CXX11
void CDOTAMatchMetadataFile::set_private_metadata(::std::string&& value) {
  set_has_private_metadata();
  private_metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
#endif
void CDOTAMatchMetadataFile::set_private_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_private_metadata();
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
void CDOTAMatchMetadataFile::set_private_metadata(const void* value, size_t size) {
  set_has_private_metadata();
  private_metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}
::std::string* CDOTAMatchMetadataFile::mutable_private_metadata() {
  set_has_private_metadata();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  return private_metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAMatchMetadataFile::release_private_metadata() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadataFile.private_metadata)
  clear_has_private_metadata();
  return private_metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAMatchMetadataFile::set_allocated_private_metadata(::std::string* private_metadata) {
  if (private_metadata != NULL) {
    set_has_private_metadata();
  } else {
    clear_has_private_metadata();
  }
  private_metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_metadata);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadataFile.private_metadata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_PlayerKill::kVictimSlotFieldNumber;
const int CDOTAMatchMetadata_Team_PlayerKill::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}
CDOTAMatchMetadata_Team_PlayerKill::CDOTAMatchMetadata_Team_PlayerKill(const CDOTAMatchMetadata_Team_PlayerKill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&victim_slot_, &from.victim_slot_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&victim_slot_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&victim_slot_) + sizeof(count_));
}

CDOTAMatchMetadata_Team_PlayerKill::~CDOTAMatchMetadata_Team_PlayerKill() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_PlayerKill::SharedDtor() {
}

void CDOTAMatchMetadata_Team_PlayerKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_PlayerKill::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_PlayerKill::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_PlayerKill::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team_PlayerKill* n = new CDOTAMatchMetadata_Team_PlayerKill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team_PlayerKill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&victim_slot_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&victim_slot_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team_PlayerKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 victim_slot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_victim_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &victim_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_PlayerKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->victim_slot(), output);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_PlayerKill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 victim_slot = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->victim_slot(), target);
  }

  // optional uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  return target;
}

size_t CDOTAMatchMetadata_Team_PlayerKill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 victim_slot = 1;
    if (has_victim_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->victim_slot());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_PlayerKill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team_PlayerKill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::MergeFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      victim_slot_ = from.victim_slot_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_PlayerKill::CopyFrom(const CDOTAMatchMetadata_Team_PlayerKill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.PlayerKill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_PlayerKill::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_PlayerKill::Swap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_PlayerKill::InternalSwap(CDOTAMatchMetadata_Team_PlayerKill* other) {
  std::swap(victim_slot_, other->victim_slot_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_PlayerKill::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team_PlayerKill

// optional uint32 victim_slot = 1;
bool CDOTAMatchMetadata_Team_PlayerKill::has_victim_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team_PlayerKill::set_has_victim_slot() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team_PlayerKill::clear_has_victim_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team_PlayerKill::clear_victim_slot() {
  victim_slot_ = 0u;
  clear_has_victim_slot();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::victim_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
  return victim_slot_;
}
void CDOTAMatchMetadata_Team_PlayerKill::set_victim_slot(::google::protobuf::uint32 value) {
  set_has_victim_slot();
  victim_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.victim_slot)
}

// optional uint32 count = 2;
bool CDOTAMatchMetadata_Team_PlayerKill::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team_PlayerKill::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team_PlayerKill::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team_PlayerKill::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_PlayerKill::count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.count)
  return count_;
}
void CDOTAMatchMetadata_Team_PlayerKill::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.PlayerKill.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_ItemPurchase::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_ItemPurchase::kPurchaseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}
CDOTAMatchMetadata_Team_ItemPurchase::CDOTAMatchMetadata_Team_ItemPurchase(const CDOTAMatchMetadata_Team_ItemPurchase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(purchase_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&item_id_, 0, reinterpret_cast<char*>(&purchase_time_) -
    reinterpret_cast<char*>(&item_id_) + sizeof(purchase_time_));
}

CDOTAMatchMetadata_Team_ItemPurchase::~CDOTAMatchMetadata_Team_ItemPurchase() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_ItemPurchase::SharedDtor() {
}

void CDOTAMatchMetadata_Team_ItemPurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_ItemPurchase::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_ItemPurchase::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_ItemPurchase::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team_ItemPurchase* n = new CDOTAMatchMetadata_Team_ItemPurchase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team_ItemPurchase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&item_id_, 0, reinterpret_cast<char*>(&purchase_time_) -
      reinterpret_cast<char*>(&item_id_) + sizeof(purchase_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team_ItemPurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_item_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 purchase_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_purchase_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &purchase_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_ItemPurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->purchase_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_ItemPurchase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // optional int32 purchase_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->purchase_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  return target;
}

size_t CDOTAMatchMetadata_Team_ItemPurchase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional int32 purchase_time = 2;
    if (has_purchase_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->purchase_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_ItemPurchase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team_ItemPurchase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::MergeFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_time_ = from.purchase_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_ItemPurchase::CopyFrom(const CDOTAMatchMetadata_Team_ItemPurchase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_ItemPurchase::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_ItemPurchase::Swap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_ItemPurchase::InternalSwap(CDOTAMatchMetadata_Team_ItemPurchase* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(purchase_time_, other->purchase_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_ItemPurchase::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team_ItemPurchase

// optional uint32 item_id = 1;
bool CDOTAMatchMetadata_Team_ItemPurchase::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team_ItemPurchase::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team_ItemPurchase::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team_ItemPurchase::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_ItemPurchase::item_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.item_id)
  return item_id_;
}
void CDOTAMatchMetadata_Team_ItemPurchase::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.item_id)
}

// optional int32 purchase_time = 2;
bool CDOTAMatchMetadata_Team_ItemPurchase::has_purchase_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team_ItemPurchase::set_has_purchase_time() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team_ItemPurchase::clear_has_purchase_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team_ItemPurchase::clear_purchase_time() {
  purchase_time_ = 0;
  clear_has_purchase_time();
}
::google::protobuf::int32 CDOTAMatchMetadata_Team_ItemPurchase::purchase_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
  return purchase_time_;
}
void CDOTAMatchMetadata_Team_ItemPurchase::set_purchase_time(::google::protobuf::int32 value) {
  set_has_purchase_time();
  purchase_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.ItemPurchase.purchase_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_InventorySnapshot::kItemIdFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kGameTimeFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kDeathsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kAssistsFieldNumber;
const int CDOTAMatchMetadata_Team_InventorySnapshot::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}
CDOTAMatchMetadata_Team_InventorySnapshot::CDOTAMatchMetadata_Team_InventorySnapshot(const CDOTAMatchMetadata_Team_InventorySnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_id_(from.item_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_time_, &from.game_time_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&game_time_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&game_time_) + sizeof(level_));
}

CDOTAMatchMetadata_Team_InventorySnapshot::~CDOTAMatchMetadata_Team_InventorySnapshot() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SharedDtor() {
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_InventorySnapshot::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_InventorySnapshot::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_InventorySnapshot::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team_InventorySnapshot* n = new CDOTAMatchMetadata_Team_InventorySnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  item_id_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&game_time_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&game_time_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_item_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_game_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kills = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_kills();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deaths = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_deaths();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deaths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 assists = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_assists();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assists_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_InventorySnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  for (int i = 0, n = this->item_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->item_id(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_time(), output);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kills(), output);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->deaths(), output);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->assists(), output);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_InventorySnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 item_id = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->item_id_, target);

  cached_has_bits = _has_bits_[0];
  // optional int32 game_time = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_time(), target);
  }

  // optional uint32 kills = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kills(), target);
  }

  // optional uint32 deaths = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->deaths(), target);
  }

  // optional uint32 assists = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->assists(), target);
  }

  // optional uint32 level = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  return target;
}

size_t CDOTAMatchMetadata_Team_InventorySnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 item_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->item_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_id_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 game_time = 2;
    if (has_game_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 kills = 3;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kills());
    }

    // optional uint32 deaths = 4;
    if (has_deaths()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deaths());
    }

    // optional uint32 assists = 5;
    if (has_assists()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assists());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_InventorySnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team_InventorySnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::MergeFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_id_.MergeFrom(from.item_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      kills_ = from.kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      deaths_ = from.deaths_;
    }
    if (cached_has_bits & 0x00000008u) {
      assists_ = from.assists_;
    }
    if (cached_has_bits & 0x00000010u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_InventorySnapshot::CopyFrom(const CDOTAMatchMetadata_Team_InventorySnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_InventorySnapshot::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_InventorySnapshot::Swap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_InventorySnapshot::InternalSwap(CDOTAMatchMetadata_Team_InventorySnapshot* other) {
  item_id_.InternalSwap(&other->item_id_);
  std::swap(game_time_, other->game_time_);
  std::swap(kills_, other->kills_);
  std::swap(deaths_, other->deaths_);
  std::swap(assists_, other->assists_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_InventorySnapshot::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team_InventorySnapshot

// repeated uint32 item_id = 1;
int CDOTAMatchMetadata_Team_InventorySnapshot::item_id_size() const {
  return item_id_.size();
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_item_id() {
  item_id_.Clear();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::item_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_.Get(index);
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_item_id(int index, ::google::protobuf::uint32 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
void CDOTAMatchMetadata_Team_InventorySnapshot::add_item_id(::google::protobuf::uint32 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_InventorySnapshot::item_id() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return item_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_InventorySnapshot::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.item_id)
  return &item_id_;
}

// optional int32 game_time = 2;
bool CDOTAMatchMetadata_Team_InventorySnapshot::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_game_time() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_game_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_game_time() {
  game_time_ = 0;
  clear_has_game_time();
}
::google::protobuf::int32 CDOTAMatchMetadata_Team_InventorySnapshot::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
  return game_time_;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_game_time(::google::protobuf::int32 value) {
  set_has_game_time();
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.game_time)
}

// optional uint32 kills = 3;
bool CDOTAMatchMetadata_Team_InventorySnapshot::has_kills() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_kills() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_kills() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_kills() {
  kills_ = 0u;
  clear_has_kills();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::kills() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.kills)
  return kills_;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_kills(::google::protobuf::uint32 value) {
  set_has_kills();
  kills_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.kills)
}

// optional uint32 deaths = 4;
bool CDOTAMatchMetadata_Team_InventorySnapshot::has_deaths() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_deaths() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_deaths() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_deaths() {
  deaths_ = 0u;
  clear_has_deaths();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::deaths() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
  return deaths_;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_deaths(::google::protobuf::uint32 value) {
  set_has_deaths();
  deaths_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.deaths)
}

// optional uint32 assists = 5;
bool CDOTAMatchMetadata_Team_InventorySnapshot::has_assists() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_assists() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_assists() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_assists() {
  assists_ = 0u;
  clear_has_assists();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::assists() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.assists)
  return assists_;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_assists(::google::protobuf::uint32 value) {
  set_has_assists();
  assists_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.assists)
}

// optional uint32 level = 6;
bool CDOTAMatchMetadata_Team_InventorySnapshot::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::clear_level() {
  level_ = 0u;
  clear_has_level();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_InventorySnapshot::level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.level)
  return level_;
}
void CDOTAMatchMetadata_Team_InventorySnapshot::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kNameTokenFieldNumber;
const int CDOTAMatchMetadata_Team_AutoStyleCriteria::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}
CDOTAMatchMetadata_Team_AutoStyleCriteria::CDOTAMatchMetadata_Team_AutoStyleCriteria(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&name_token_, &from.name_token_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&name_token_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&name_token_) + sizeof(value_));
}

CDOTAMatchMetadata_Team_AutoStyleCriteria::~CDOTAMatchMetadata_Team_AutoStyleCriteria() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SharedDtor() {
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_AutoStyleCriteria::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_AutoStyleCriteria::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_AutoStyleCriteria::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team_AutoStyleCriteria* n = new CDOTAMatchMetadata_Team_AutoStyleCriteria;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&name_token_, 0, reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&name_token_) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 name_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_name_token();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_token_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->name_token(), output);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 name_token = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->name_token(), target);
  }

  // optional float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  return target;
}

size_t CDOTAMatchMetadata_Team_AutoStyleCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 name_token = 1;
    if (has_name_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_token());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_AutoStyleCriteria* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team_AutoStyleCriteria>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::MergeFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_token_ = from.name_token_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::CopyFrom(const CDOTAMatchMetadata_Team_AutoStyleCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_AutoStyleCriteria::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_AutoStyleCriteria::Swap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::InternalSwap(CDOTAMatchMetadata_Team_AutoStyleCriteria* other) {
  std::swap(name_token_, other->name_token_);
  std::swap(value_, other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_AutoStyleCriteria::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team_AutoStyleCriteria

// optional uint32 name_token = 1;
bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_name_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_has_name_token() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_has_name_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_name_token() {
  name_token_ = 0u;
  clear_has_name_token();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_AutoStyleCriteria::name_token() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
  return name_token_;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_name_token(::google::protobuf::uint32 value) {
  set_has_name_token();
  name_token_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.name_token)
}

// optional float value = 2;
bool CDOTAMatchMetadata_Team_AutoStyleCriteria::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::clear_value() {
  value_ = 0;
  clear_has_value();
}
float CDOTAMatchMetadata_Team_AutoStyleCriteria::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
  return value_;
}
void CDOTAMatchMetadata_Team_AutoStyleCriteria::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAbilityUpgradesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEquippedEconItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kKillsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kItemsFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgDeathsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestKillsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestAssistsX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestGpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestXpmX16FieldNumber;
const int CDOTAMatchMetadata_Team_Player::kWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kBestWinStreakFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFightScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kFarmScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kSupportScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kPushScoreFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kLevelUpTimesFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kInventorySnapshotFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAvgStatsCalibratedFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kAutoStyleCriteriaFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEventIdFieldNumber;
const int CDOTAMatchMetadata_Team_Player::kEventPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team.Player)
}
CDOTAMatchMetadata_Team_Player::CDOTAMatchMetadata_Team_Player(const CDOTAMatchMetadata_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      ability_upgrades_(from.ability_upgrades_),
      equipped_econ_items_(from.equipped_econ_items_),
      kills_(from.kills_),
      items_(from.items_),
      level_up_times_(from.level_up_times_),
      graph_net_worth_(from.graph_net_worth_),
      inventory_snapshot_(from.inventory_snapshot_),
      auto_style_criteria_(from.auto_style_criteria_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&event_points_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(event_points_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team.Player)
}

void CDOTAMatchMetadata_Team_Player::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&event_points_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(event_points_));
}

CDOTAMatchMetadata_Team_Player::~CDOTAMatchMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchMetadata_Team_Player::SharedDtor() {
}

void CDOTAMatchMetadata_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team_Player::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team_Player::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team_Player::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team_Player* n = new CDOTAMatchMetadata_Team_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ability_upgrades_.Clear();
  equipped_econ_items_.Clear();
  kills_.Clear();
  items_.Clear();
  level_up_times_.Clear();
  graph_net_worth_.Clear();
  inventory_snapshot_.Clear();
  auto_style_criteria_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&best_kills_x16_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(best_kills_x16_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&best_assists_x16_, 0, reinterpret_cast<char*>(&support_score_) -
      reinterpret_cast<char*>(&best_assists_x16_) + sizeof(support_score_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&push_score_, 0, reinterpret_cast<char*>(&event_points_) -
      reinterpret_cast<char*>(&push_score_) + sizeof(event_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ability_upgrades = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ability_upgrades())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ability_upgrades())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipped_econ_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kills()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_kills_x16 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_avg_kills_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_deaths_x16 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_avg_deaths_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_deaths_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_assists_x16 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_avg_assists_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_gpm_x16 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_avg_gpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 avg_xpm_x16 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_avg_xpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avg_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_kills_x16 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_best_kills_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_kills_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_assists_x16 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_best_assists_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_assists_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_gpm_x16 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_best_gpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_gpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_xpm_x16 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_best_xpm_x16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_xpm_x16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 win_streak = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_win_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 best_win_streak = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_best_win_streak();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_win_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fight_score = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_fight_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fight_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float farm_score = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_farm_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &farm_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float support_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_support_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &support_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float push_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_push_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &push_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 level_up_times = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_level_up_times())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(178u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_up_times())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_net_worth = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189u, input, this->mutable_graph_net_worth())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(186u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inventory_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool avg_stats_calibrated = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_avg_stats_calibrated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avg_stats_calibrated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auto_style_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_event_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_event_points();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team.Player)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated uint32 ability_upgrades = 2;
  for (int i = 0, n = this->ability_upgrades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ability_upgrades(i), output);
  }

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_slot(), output);
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0, n = this->equipped_econ_items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->equipped_econ_items(i), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->kills(i), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->avg_kills_x16(), output);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->avg_deaths_x16(), output);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->avg_assists_x16(), output);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->avg_gpm_x16(), output);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->avg_xpm_x16(), output);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->best_kills_x16(), output);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->best_assists_x16(), output);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->best_gpm_x16(), output);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->best_xpm_x16(), output);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->win_streak(), output);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->best_win_streak(), output);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fight_score(), output);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->farm_score(), output);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->support_score(), output);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->push_score(), output);
  }

  // repeated uint32 level_up_times = 22;
  for (int i = 0, n = this->level_up_times_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->level_up_times(i), output);
  }

  // repeated float graph_net_worth = 23;
  for (int i = 0, n = this->graph_net_worth_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->graph_net_worth(i), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0, n = this->inventory_snapshot_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->inventory_snapshot(i), output);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->avg_stats_calibrated(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0, n = this->auto_style_criteria_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->auto_style_criteria(i), output);
  }

  // optional uint32 event_id = 27;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->event_id(), output);
  }

  // optional uint32 event_points = 28;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->event_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated uint32 ability_upgrades = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ability_upgrades_, target);

  // optional uint32 player_slot = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_slot(), target);
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  for (unsigned int i = 0, n = this->equipped_econ_items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->equipped_econ_items(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  for (unsigned int i = 0, n = this->kills_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->kills(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  for (unsigned int i = 0, n = this->items_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->items(i), deterministic, target);
  }

  // optional uint32 avg_kills_x16 = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->avg_kills_x16(), target);
  }

  // optional uint32 avg_deaths_x16 = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->avg_deaths_x16(), target);
  }

  // optional uint32 avg_assists_x16 = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->avg_assists_x16(), target);
  }

  // optional uint32 avg_gpm_x16 = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->avg_gpm_x16(), target);
  }

  // optional uint32 avg_xpm_x16 = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->avg_xpm_x16(), target);
  }

  // optional uint32 best_kills_x16 = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->best_kills_x16(), target);
  }

  // optional uint32 best_assists_x16 = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->best_assists_x16(), target);
  }

  // optional uint32 best_gpm_x16 = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->best_gpm_x16(), target);
  }

  // optional uint32 best_xpm_x16 = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->best_xpm_x16(), target);
  }

  // optional uint32 win_streak = 16;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->win_streak(), target);
  }

  // optional uint32 best_win_streak = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->best_win_streak(), target);
  }

  // optional float fight_score = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fight_score(), target);
  }

  // optional float farm_score = 19;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->farm_score(), target);
  }

  // optional float support_score = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->support_score(), target);
  }

  // optional float push_score = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->push_score(), target);
  }

  // repeated uint32 level_up_times = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->level_up_times_, target);

  // repeated float graph_net_worth = 23;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(23, this->graph_net_worth_, target);

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  for (unsigned int i = 0, n = this->inventory_snapshot_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->inventory_snapshot(i), deterministic, target);
  }

  // optional bool avg_stats_calibrated = 25;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->avg_stats_calibrated(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  for (unsigned int i = 0, n = this->auto_style_criteria_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->auto_style_criteria(i), deterministic, target);
  }

  // optional uint32 event_id = 27;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->event_id(), target);
  }

  // optional uint32 event_points = 28;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->event_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated uint32 ability_upgrades = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ability_upgrades_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ability_upgrades_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
  {
    unsigned int count = this->equipped_econ_items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipped_econ_items(i));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
  {
    unsigned int count = this->kills_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kills(i));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
  {
    unsigned int count = this->items_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->items(i));
    }
  }

  // repeated uint32 level_up_times = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->level_up_times_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->level_up_times_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 23;
  {
    unsigned int count = this->graph_net_worth_size();
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->graph_net_worth_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
  {
    unsigned int count = this->inventory_snapshot_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->inventory_snapshot(i));
    }
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
  {
    unsigned int count = this->auto_style_criteria_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->auto_style_criteria(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 3;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

    // optional uint32 avg_kills_x16 = 7;
    if (has_avg_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_kills_x16());
    }

    // optional uint32 avg_deaths_x16 = 8;
    if (has_avg_deaths_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_deaths_x16());
    }

    // optional uint32 avg_assists_x16 = 9;
    if (has_avg_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_assists_x16());
    }

    // optional uint32 avg_gpm_x16 = 10;
    if (has_avg_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_gpm_x16());
    }

    // optional uint32 avg_xpm_x16 = 11;
    if (has_avg_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->avg_xpm_x16());
    }

    // optional uint32 best_kills_x16 = 12;
    if (has_best_kills_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_kills_x16());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional uint32 best_assists_x16 = 13;
    if (has_best_assists_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_assists_x16());
    }

    // optional uint32 best_gpm_x16 = 14;
    if (has_best_gpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_gpm_x16());
    }

    // optional uint32 best_xpm_x16 = 15;
    if (has_best_xpm_x16()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_xpm_x16());
    }

    // optional uint32 win_streak = 16;
    if (has_win_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_streak());
    }

    // optional uint32 best_win_streak = 17;
    if (has_best_win_streak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->best_win_streak());
    }

    // optional float fight_score = 18;
    if (has_fight_score()) {
      total_size += 2 + 4;
    }

    // optional float farm_score = 19;
    if (has_farm_score()) {
      total_size += 2 + 4;
    }

    // optional float support_score = 20;
    if (has_support_score()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional float push_score = 21;
    if (has_push_score()) {
      total_size += 2 + 4;
    }

    // optional bool avg_stats_calibrated = 25;
    if (has_avg_stats_calibrated()) {
      total_size += 2 + 1;
    }

    // optional uint32 event_id = 27;
    if (has_event_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 event_points = 28;
    if (has_event_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team_Player::MergeFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ability_upgrades_.MergeFrom(from.ability_upgrades_);
  equipped_econ_items_.MergeFrom(from.equipped_econ_items_);
  kills_.MergeFrom(from.kills_);
  items_.MergeFrom(from.items_);
  level_up_times_.MergeFrom(from.level_up_times_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  inventory_snapshot_.MergeFrom(from.inventory_snapshot_);
  auto_style_criteria_.MergeFrom(from.auto_style_criteria_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_slot_ = from.player_slot_;
    }
    if (cached_has_bits & 0x00000004u) {
      avg_kills_x16_ = from.avg_kills_x16_;
    }
    if (cached_has_bits & 0x00000008u) {
      avg_deaths_x16_ = from.avg_deaths_x16_;
    }
    if (cached_has_bits & 0x00000010u) {
      avg_assists_x16_ = from.avg_assists_x16_;
    }
    if (cached_has_bits & 0x00000020u) {
      avg_gpm_x16_ = from.avg_gpm_x16_;
    }
    if (cached_has_bits & 0x00000040u) {
      avg_xpm_x16_ = from.avg_xpm_x16_;
    }
    if (cached_has_bits & 0x00000080u) {
      best_kills_x16_ = from.best_kills_x16_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      best_assists_x16_ = from.best_assists_x16_;
    }
    if (cached_has_bits & 0x00000200u) {
      best_gpm_x16_ = from.best_gpm_x16_;
    }
    if (cached_has_bits & 0x00000400u) {
      best_xpm_x16_ = from.best_xpm_x16_;
    }
    if (cached_has_bits & 0x00000800u) {
      win_streak_ = from.win_streak_;
    }
    if (cached_has_bits & 0x00001000u) {
      best_win_streak_ = from.best_win_streak_;
    }
    if (cached_has_bits & 0x00002000u) {
      fight_score_ = from.fight_score_;
    }
    if (cached_has_bits & 0x00004000u) {
      farm_score_ = from.farm_score_;
    }
    if (cached_has_bits & 0x00008000u) {
      support_score_ = from.support_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      push_score_ = from.push_score_;
    }
    if (cached_has_bits & 0x00020000u) {
      avg_stats_calibrated_ = from.avg_stats_calibrated_;
    }
    if (cached_has_bits & 0x00040000u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00080000u) {
      event_points_ = from.event_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team_Player::CopyFrom(const CDOTAMatchMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team_Player::Swap(CDOTAMatchMetadata_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team_Player::InternalSwap(CDOTAMatchMetadata_Team_Player* other) {
  ability_upgrades_.InternalSwap(&other->ability_upgrades_);
  equipped_econ_items_.InternalSwap(&other->equipped_econ_items_);
  kills_.InternalSwap(&other->kills_);
  items_.InternalSwap(&other->items_);
  level_up_times_.InternalSwap(&other->level_up_times_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  inventory_snapshot_.InternalSwap(&other->inventory_snapshot_);
  auto_style_criteria_.InternalSwap(&other->auto_style_criteria_);
  std::swap(account_id_, other->account_id_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(avg_kills_x16_, other->avg_kills_x16_);
  std::swap(avg_deaths_x16_, other->avg_deaths_x16_);
  std::swap(avg_assists_x16_, other->avg_assists_x16_);
  std::swap(avg_gpm_x16_, other->avg_gpm_x16_);
  std::swap(avg_xpm_x16_, other->avg_xpm_x16_);
  std::swap(best_kills_x16_, other->best_kills_x16_);
  std::swap(best_assists_x16_, other->best_assists_x16_);
  std::swap(best_gpm_x16_, other->best_gpm_x16_);
  std::swap(best_xpm_x16_, other->best_xpm_x16_);
  std::swap(win_streak_, other->win_streak_);
  std::swap(best_win_streak_, other->best_win_streak_);
  std::swap(fight_score_, other->fight_score_);
  std::swap(farm_score_, other->farm_score_);
  std::swap(support_score_, other->support_score_);
  std::swap(push_score_, other->push_score_);
  std::swap(avg_stats_calibrated_, other->avg_stats_calibrated_);
  std::swap(event_id_, other->event_id_);
  std::swap(event_points_, other->event_points_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team_Player::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team_Player

// optional uint32 account_id = 1;
bool CDOTAMatchMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.account_id)
  return account_id_;
}
void CDOTAMatchMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.account_id)
}

// repeated uint32 ability_upgrades = 2;
int CDOTAMatchMetadata_Team_Player::ability_upgrades_size() const {
  return ability_upgrades_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_ability_upgrades() {
  ability_upgrades_.Clear();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::ability_upgrades(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_.Get(index);
}
void CDOTAMatchMetadata_Team_Player::set_ability_upgrades(int index, ::google::protobuf::uint32 value) {
  ability_upgrades_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
void CDOTAMatchMetadata_Team_Player::add_ability_upgrades(::google::protobuf::uint32 value) {
  ability_upgrades_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::ability_upgrades() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return ability_upgrades_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_ability_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.ability_upgrades)
  return &ability_upgrades_;
}

// optional uint32 player_slot = 3;
bool CDOTAMatchMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.player_slot)
  return player_slot_;
}
void CDOTAMatchMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.player_slot)
}

// repeated .proto.dota.CSOEconItem equipped_econ_items = 4;
int CDOTAMatchMetadata_Team_Player::equipped_econ_items_size() const {
  return equipped_econ_items_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_equipped_econ_items() {
  equipped_econ_items_.Clear();
}
const ::proto::dota::CSOEconItem& CDOTAMatchMetadata_Team_Player::equipped_econ_items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Get(index);
}
::proto::dota::CSOEconItem* CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Mutable(index);
}
::proto::dota::CSOEconItem* CDOTAMatchMetadata_Team_Player::add_equipped_econ_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >*
CDOTAMatchMetadata_Team_Player::mutable_equipped_econ_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return &equipped_econ_items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CSOEconItem >&
CDOTAMatchMetadata_Team_Player::equipped_econ_items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.equipped_econ_items)
  return equipped_econ_items_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.PlayerKill kills = 5;
int CDOTAMatchMetadata_Team_Player::kills_size() const {
  return kills_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_kills() {
  kills_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill& CDOTAMatchMetadata_Team_Player::kills(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::mutable_kills(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team_PlayerKill* CDOTAMatchMetadata_Team_Player::add_kills() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >*
CDOTAMatchMetadata_Team_Player::mutable_kills() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return &kills_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_PlayerKill >&
CDOTAMatchMetadata_Team_Player::kills() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.kills)
  return kills_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.ItemPurchase items = 6;
int CDOTAMatchMetadata_Team_Player::items_size() const {
  return items_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_items() {
  items_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase& CDOTAMatchMetadata_Team_Player::items(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase* CDOTAMatchMetadata_Team_Player::add_items() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >*
CDOTAMatchMetadata_Team_Player::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return &items_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_ItemPurchase >&
CDOTAMatchMetadata_Team_Player::items() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.items)
  return items_;
}

// optional uint32 avg_kills_x16 = 7;
bool CDOTAMatchMetadata_Team_Player::has_avg_kills_x16() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_kills_x16() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_kills_x16() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_kills_x16() {
  avg_kills_x16_ = 0u;
  clear_has_avg_kills_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_kills_x16)
  return avg_kills_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_kills_x16(::google::protobuf::uint32 value) {
  set_has_avg_kills_x16();
  avg_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_kills_x16)
}

// optional uint32 avg_deaths_x16 = 8;
bool CDOTAMatchMetadata_Team_Player::has_avg_deaths_x16() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_deaths_x16() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_deaths_x16() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_deaths_x16() {
  avg_deaths_x16_ = 0u;
  clear_has_avg_deaths_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_deaths_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
  return avg_deaths_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_deaths_x16(::google::protobuf::uint32 value) {
  set_has_avg_deaths_x16();
  avg_deaths_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_deaths_x16)
}

// optional uint32 avg_assists_x16 = 9;
bool CDOTAMatchMetadata_Team_Player::has_avg_assists_x16() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_assists_x16() {
  _has_bits_[0] |= 0x00000010u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_assists_x16() {
  _has_bits_[0] &= ~0x00000010u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_assists_x16() {
  avg_assists_x16_ = 0u;
  clear_has_avg_assists_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_assists_x16)
  return avg_assists_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_assists_x16(::google::protobuf::uint32 value) {
  set_has_avg_assists_x16();
  avg_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_assists_x16)
}

// optional uint32 avg_gpm_x16 = 10;
bool CDOTAMatchMetadata_Team_Player::has_avg_gpm_x16() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_gpm_x16() {
  _has_bits_[0] |= 0x00000020u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_gpm_x16() {
  _has_bits_[0] &= ~0x00000020u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_gpm_x16() {
  avg_gpm_x16_ = 0u;
  clear_has_avg_gpm_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
  return avg_gpm_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_gpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_gpm_x16();
  avg_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_gpm_x16)
}

// optional uint32 avg_xpm_x16 = 11;
bool CDOTAMatchMetadata_Team_Player::has_avg_xpm_x16() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_xpm_x16() {
  _has_bits_[0] |= 0x00000040u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_xpm_x16() {
  _has_bits_[0] &= ~0x00000040u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_xpm_x16() {
  avg_xpm_x16_ = 0u;
  clear_has_avg_xpm_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::avg_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
  return avg_xpm_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_xpm_x16(::google::protobuf::uint32 value) {
  set_has_avg_xpm_x16();
  avg_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_xpm_x16)
}

// optional uint32 best_kills_x16 = 12;
bool CDOTAMatchMetadata_Team_Player::has_best_kills_x16() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_best_kills_x16() {
  _has_bits_[0] |= 0x00000080u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_best_kills_x16() {
  _has_bits_[0] &= ~0x00000080u;
}
void CDOTAMatchMetadata_Team_Player::clear_best_kills_x16() {
  best_kills_x16_ = 0u;
  clear_has_best_kills_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_kills_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_kills_x16)
  return best_kills_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_best_kills_x16(::google::protobuf::uint32 value) {
  set_has_best_kills_x16();
  best_kills_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_kills_x16)
}

// optional uint32 best_assists_x16 = 13;
bool CDOTAMatchMetadata_Team_Player::has_best_assists_x16() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_best_assists_x16() {
  _has_bits_[0] |= 0x00000100u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_best_assists_x16() {
  _has_bits_[0] &= ~0x00000100u;
}
void CDOTAMatchMetadata_Team_Player::clear_best_assists_x16() {
  best_assists_x16_ = 0u;
  clear_has_best_assists_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_assists_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_assists_x16)
  return best_assists_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_best_assists_x16(::google::protobuf::uint32 value) {
  set_has_best_assists_x16();
  best_assists_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_assists_x16)
}

// optional uint32 best_gpm_x16 = 14;
bool CDOTAMatchMetadata_Team_Player::has_best_gpm_x16() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_best_gpm_x16() {
  _has_bits_[0] |= 0x00000200u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_best_gpm_x16() {
  _has_bits_[0] &= ~0x00000200u;
}
void CDOTAMatchMetadata_Team_Player::clear_best_gpm_x16() {
  best_gpm_x16_ = 0u;
  clear_has_best_gpm_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_gpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_gpm_x16)
  return best_gpm_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_best_gpm_x16(::google::protobuf::uint32 value) {
  set_has_best_gpm_x16();
  best_gpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_gpm_x16)
}

// optional uint32 best_xpm_x16 = 15;
bool CDOTAMatchMetadata_Team_Player::has_best_xpm_x16() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_best_xpm_x16() {
  _has_bits_[0] |= 0x00000400u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_best_xpm_x16() {
  _has_bits_[0] &= ~0x00000400u;
}
void CDOTAMatchMetadata_Team_Player::clear_best_xpm_x16() {
  best_xpm_x16_ = 0u;
  clear_has_best_xpm_x16();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_xpm_x16() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_xpm_x16)
  return best_xpm_x16_;
}
void CDOTAMatchMetadata_Team_Player::set_best_xpm_x16(::google::protobuf::uint32 value) {
  set_has_best_xpm_x16();
  best_xpm_x16_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_xpm_x16)
}

// optional uint32 win_streak = 16;
bool CDOTAMatchMetadata_Team_Player::has_win_streak() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_win_streak() {
  _has_bits_[0] |= 0x00000800u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_win_streak() {
  _has_bits_[0] &= ~0x00000800u;
}
void CDOTAMatchMetadata_Team_Player::clear_win_streak() {
  win_streak_ = 0u;
  clear_has_win_streak();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.win_streak)
  return win_streak_;
}
void CDOTAMatchMetadata_Team_Player::set_win_streak(::google::protobuf::uint32 value) {
  set_has_win_streak();
  win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.win_streak)
}

// optional uint32 best_win_streak = 17;
bool CDOTAMatchMetadata_Team_Player::has_best_win_streak() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_best_win_streak() {
  _has_bits_[0] |= 0x00001000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_best_win_streak() {
  _has_bits_[0] &= ~0x00001000u;
}
void CDOTAMatchMetadata_Team_Player::clear_best_win_streak() {
  best_win_streak_ = 0u;
  clear_has_best_win_streak();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::best_win_streak() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.best_win_streak)
  return best_win_streak_;
}
void CDOTAMatchMetadata_Team_Player::set_best_win_streak(::google::protobuf::uint32 value) {
  set_has_best_win_streak();
  best_win_streak_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.best_win_streak)
}

// optional float fight_score = 18;
bool CDOTAMatchMetadata_Team_Player::has_fight_score() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_fight_score() {
  _has_bits_[0] |= 0x00002000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_fight_score() {
  _has_bits_[0] &= ~0x00002000u;
}
void CDOTAMatchMetadata_Team_Player::clear_fight_score() {
  fight_score_ = 0;
  clear_has_fight_score();
}
float CDOTAMatchMetadata_Team_Player::fight_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.fight_score)
  return fight_score_;
}
void CDOTAMatchMetadata_Team_Player::set_fight_score(float value) {
  set_has_fight_score();
  fight_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.fight_score)
}

// optional float farm_score = 19;
bool CDOTAMatchMetadata_Team_Player::has_farm_score() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_farm_score() {
  _has_bits_[0] |= 0x00004000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_farm_score() {
  _has_bits_[0] &= ~0x00004000u;
}
void CDOTAMatchMetadata_Team_Player::clear_farm_score() {
  farm_score_ = 0;
  clear_has_farm_score();
}
float CDOTAMatchMetadata_Team_Player::farm_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.farm_score)
  return farm_score_;
}
void CDOTAMatchMetadata_Team_Player::set_farm_score(float value) {
  set_has_farm_score();
  farm_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.farm_score)
}

// optional float support_score = 20;
bool CDOTAMatchMetadata_Team_Player::has_support_score() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_support_score() {
  _has_bits_[0] |= 0x00008000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_support_score() {
  _has_bits_[0] &= ~0x00008000u;
}
void CDOTAMatchMetadata_Team_Player::clear_support_score() {
  support_score_ = 0;
  clear_has_support_score();
}
float CDOTAMatchMetadata_Team_Player::support_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.support_score)
  return support_score_;
}
void CDOTAMatchMetadata_Team_Player::set_support_score(float value) {
  set_has_support_score();
  support_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.support_score)
}

// optional float push_score = 21;
bool CDOTAMatchMetadata_Team_Player::has_push_score() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_push_score() {
  _has_bits_[0] |= 0x00010000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_push_score() {
  _has_bits_[0] &= ~0x00010000u;
}
void CDOTAMatchMetadata_Team_Player::clear_push_score() {
  push_score_ = 0;
  clear_has_push_score();
}
float CDOTAMatchMetadata_Team_Player::push_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.push_score)
  return push_score_;
}
void CDOTAMatchMetadata_Team_Player::set_push_score(float value) {
  set_has_push_score();
  push_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.push_score)
}

// repeated uint32 level_up_times = 22;
int CDOTAMatchMetadata_Team_Player::level_up_times_size() const {
  return level_up_times_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_level_up_times() {
  level_up_times_.Clear();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::level_up_times(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_.Get(index);
}
void CDOTAMatchMetadata_Team_Player::set_level_up_times(int index, ::google::protobuf::uint32 value) {
  level_up_times_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
}
void CDOTAMatchMetadata_Team_Player::add_level_up_times(::google::protobuf::uint32 value) {
  level_up_times_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team_Player::level_up_times() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return level_up_times_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team_Player::mutable_level_up_times() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.level_up_times)
  return &level_up_times_;
}

// repeated float graph_net_worth = 23;
int CDOTAMatchMetadata_Team_Player::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
float CDOTAMatchMetadata_Team_Player::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_.Get(index);
}
void CDOTAMatchMetadata_Team_Player::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
void CDOTAMatchMetadata_Team_Player::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
}
const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team_Player::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return graph_net_worth_;
}
::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team_Player::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.graph_net_worth)
  return &graph_net_worth_;
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.InventorySnapshot inventory_snapshot = 24;
int CDOTAMatchMetadata_Team_Player::inventory_snapshot_size() const {
  return inventory_snapshot_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_inventory_snapshot() {
  inventory_snapshot_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot& CDOTAMatchMetadata_Team_Player::inventory_snapshot(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot* CDOTAMatchMetadata_Team_Player::add_inventory_snapshot() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >*
CDOTAMatchMetadata_Team_Player::mutable_inventory_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return &inventory_snapshot_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_InventorySnapshot >&
CDOTAMatchMetadata_Team_Player::inventory_snapshot() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.inventory_snapshot)
  return inventory_snapshot_;
}

// optional bool avg_stats_calibrated = 25;
bool CDOTAMatchMetadata_Team_Player::has_avg_stats_calibrated() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_avg_stats_calibrated() {
  _has_bits_[0] |= 0x00020000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_avg_stats_calibrated() {
  _has_bits_[0] &= ~0x00020000u;
}
void CDOTAMatchMetadata_Team_Player::clear_avg_stats_calibrated() {
  avg_stats_calibrated_ = false;
  clear_has_avg_stats_calibrated();
}
bool CDOTAMatchMetadata_Team_Player::avg_stats_calibrated() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
  return avg_stats_calibrated_;
}
void CDOTAMatchMetadata_Team_Player::set_avg_stats_calibrated(bool value) {
  set_has_avg_stats_calibrated();
  avg_stats_calibrated_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.avg_stats_calibrated)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.AutoStyleCriteria auto_style_criteria = 26;
int CDOTAMatchMetadata_Team_Player::auto_style_criteria_size() const {
  return auto_style_criteria_.size();
}
void CDOTAMatchMetadata_Team_Player::clear_auto_style_criteria() {
  auto_style_criteria_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria& CDOTAMatchMetadata_Team_Player::auto_style_criteria(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria* CDOTAMatchMetadata_Team_Player::add_auto_style_criteria() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >*
CDOTAMatchMetadata_Team_Player::mutable_auto_style_criteria() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return &auto_style_criteria_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_AutoStyleCriteria >&
CDOTAMatchMetadata_Team_Player::auto_style_criteria() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.Player.auto_style_criteria)
  return auto_style_criteria_;
}

// optional uint32 event_id = 27;
bool CDOTAMatchMetadata_Team_Player::has_event_id() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_event_id() {
  _has_bits_[0] |= 0x00040000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_event_id() {
  _has_bits_[0] &= ~0x00040000u;
}
void CDOTAMatchMetadata_Team_Player::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::event_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.event_id)
  return event_id_;
}
void CDOTAMatchMetadata_Team_Player::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.event_id)
}

// optional uint32 event_points = 28;
bool CDOTAMatchMetadata_Team_Player::has_event_points() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void CDOTAMatchMetadata_Team_Player::set_has_event_points() {
  _has_bits_[0] |= 0x00080000u;
}
void CDOTAMatchMetadata_Team_Player::clear_has_event_points() {
  _has_bits_[0] &= ~0x00080000u;
}
void CDOTAMatchMetadata_Team_Player::clear_event_points() {
  event_points_ = 0u;
  clear_has_event_points();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team_Player::event_points() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.Player.event_points)
  return event_points_;
}
void CDOTAMatchMetadata_Team_Player::set_event_points(::google::protobuf::uint32 value) {
  set_has_event_points();
  event_points_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.Player.event_points)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphExperienceFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphGoldEarnedFieldNumber;
const int CDOTAMatchMetadata_Team::kGraphNetWorthFieldNumber;
const int CDOTAMatchMetadata_Team::kCmFirstPickFieldNumber;
const int CDOTAMatchMetadata_Team::kCmCaptainPlayerIdFieldNumber;
const int CDOTAMatchMetadata_Team::kCmBansFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPicksFieldNumber;
const int CDOTAMatchMetadata_Team::kCmPenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata.Team)
}
CDOTAMatchMetadata_Team::CDOTAMatchMetadata_Team(const CDOTAMatchMetadata_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      graph_experience_(from.graph_experience_),
      graph_gold_earned_(from.graph_gold_earned_),
      graph_net_worth_(from.graph_net_worth_),
      cm_bans_(from.cm_bans_),
      cm_picks_(from.cm_picks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dota_team_, &from.dota_team_,
    reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(cm_penalty_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata.Team)
}

void CDOTAMatchMetadata_Team::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dota_team_, 0, reinterpret_cast<char*>(&cm_penalty_) -
    reinterpret_cast<char*>(&dota_team_) + sizeof(cm_penalty_));
}

CDOTAMatchMetadata_Team::~CDOTAMatchMetadata_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata.Team)
  SharedDtor();
}

void CDOTAMatchMetadata_Team::SharedDtor() {
}

void CDOTAMatchMetadata_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata_Team::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata_Team& CDOTAMatchMetadata_Team::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata_Team* CDOTAMatchMetadata_Team::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata_Team* n = new CDOTAMatchMetadata_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata.Team)
  players_.Clear();
  graph_experience_.Clear();
  graph_gold_earned_.Clear();
  graph_net_worth_.Clear();
  cm_bans_.Clear();
  cm_picks_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&dota_team_, 0, reinterpret_cast<char*>(&cm_penalty_) -
      reinterpret_cast<char*>(&dota_team_) + sizeof(cm_penalty_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dota_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_experience = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29u, input, this->mutable_graph_experience())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_experience())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_gold_earned = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37u, input, this->mutable_graph_gold_earned())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_gold_earned())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float graph_net_worth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45u, input, this->mutable_graph_net_worth())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_graph_net_worth())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cm_first_pick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_cm_first_pick();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cm_first_pick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cm_captain_player_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_cm_captain_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_captain_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_bans = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64u, input, this->mutable_cm_bans())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(66u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_bans())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cm_picks = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72u, input, this->mutable_cm_picks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(74u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cm_picks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cm_penalty = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_cm_penalty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cm_penalty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata.Team)
  return false;
#undef DO_
}

void CDOTAMatchMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated float graph_experience = 3;
  for (int i = 0, n = this->graph_experience_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->graph_experience(i), output);
  }

  // repeated float graph_gold_earned = 4;
  for (int i = 0, n = this->graph_gold_earned_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->graph_gold_earned(i), output);
  }

  // repeated float graph_net_worth = 5;
  for (int i = 0, n = this->graph_net_worth_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->graph_net_worth(i), output);
  }

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->cm_first_pick(), output);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cm_captain_player_id(), output);
  }

  // repeated uint32 cm_bans = 8;
  for (int i = 0, n = this->cm_bans_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->cm_bans(i), output);
  }

  // repeated uint32 cm_picks = 9;
  for (int i = 0, n = this->cm_picks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->cm_picks(i), output);
  }

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cm_penalty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchMetadata_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->players(i), deterministic, target);
  }

  // repeated float graph_experience = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(3, this->graph_experience_, target);

  // repeated float graph_gold_earned = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(4, this->graph_gold_earned_, target);

  // repeated float graph_net_worth = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFloatToArray(5, this->graph_net_worth_, target);

  // optional bool cm_first_pick = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->cm_first_pick(), target);
  }

  // optional uint32 cm_captain_player_id = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cm_captain_player_id(), target);
  }

  // repeated uint32 cm_bans = 8;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(8, this->cm_bans_, target);

  // repeated uint32 cm_picks = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(9, this->cm_picks_, target);

  // optional uint32 cm_penalty = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cm_penalty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata.Team)
  return target;
}

size_t CDOTAMatchMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated float graph_experience = 3;
  {
    unsigned int count = this->graph_experience_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_experience_size());
    total_size += data_size;
  }

  // repeated float graph_gold_earned = 4;
  {
    unsigned int count = this->graph_gold_earned_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_gold_earned_size());
    total_size += data_size;
  }

  // repeated float graph_net_worth = 5;
  {
    unsigned int count = this->graph_net_worth_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->graph_net_worth_size());
    total_size += data_size;
  }

  // repeated uint32 cm_bans = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_bans_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_bans_size());
    total_size += data_size;
  }

  // repeated uint32 cm_picks = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cm_picks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->cm_picks_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 dota_team = 1;
    if (has_dota_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dota_team());
    }

    // optional bool cm_first_pick = 6;
    if (has_cm_first_pick()) {
      total_size += 1 + 1;
    }

    // optional uint32 cm_captain_player_id = 7;
    if (has_cm_captain_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_captain_player_id());
    }

    // optional uint32 cm_penalty = 10;
    if (has_cm_penalty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cm_penalty());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata_Team::MergeFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  graph_experience_.MergeFrom(from.graph_experience_);
  graph_gold_earned_.MergeFrom(from.graph_gold_earned_);
  graph_net_worth_.MergeFrom(from.graph_net_worth_);
  cm_bans_.MergeFrom(from.cm_bans_);
  cm_picks_.MergeFrom(from.cm_picks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      dota_team_ = from.dota_team_;
    }
    if (cached_has_bits & 0x00000002u) {
      cm_first_pick_ = from.cm_first_pick_;
    }
    if (cached_has_bits & 0x00000004u) {
      cm_captain_player_id_ = from.cm_captain_player_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      cm_penalty_ = from.cm_penalty_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata_Team::CopyFrom(const CDOTAMatchMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata_Team::Swap(CDOTAMatchMetadata_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata_Team::InternalSwap(CDOTAMatchMetadata_Team* other) {
  players_.InternalSwap(&other->players_);
  graph_experience_.InternalSwap(&other->graph_experience_);
  graph_gold_earned_.InternalSwap(&other->graph_gold_earned_);
  graph_net_worth_.InternalSwap(&other->graph_net_worth_);
  cm_bans_.InternalSwap(&other->cm_bans_);
  cm_picks_.InternalSwap(&other->cm_picks_);
  std::swap(dota_team_, other->dota_team_);
  std::swap(cm_first_pick_, other->cm_first_pick_);
  std::swap(cm_captain_player_id_, other->cm_captain_player_id_);
  std::swap(cm_penalty_, other->cm_penalty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata_Team::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata_Team

// optional uint32 dota_team = 1;
bool CDOTAMatchMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata_Team::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata_Team::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.dota_team)
  return dota_team_;
}
void CDOTAMatchMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.dota_team)
}

// repeated .proto.dota.CDOTAMatchMetadata.Team.Player players = 2;
int CDOTAMatchMetadata_Team::players_size() const {
  return players_.size();
}
void CDOTAMatchMetadata_Team::clear_players() {
  players_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team_Player& CDOTAMatchMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team_Player* CDOTAMatchMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >*
CDOTAMatchMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team_Player >&
CDOTAMatchMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.players)
  return players_;
}

// repeated float graph_experience = 3;
int CDOTAMatchMetadata_Team::graph_experience_size() const {
  return graph_experience_.size();
}
void CDOTAMatchMetadata_Team::clear_graph_experience() {
  graph_experience_.Clear();
}
float CDOTAMatchMetadata_Team::graph_experience(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_.Get(index);
}
void CDOTAMatchMetadata_Team::set_graph_experience(int index, float value) {
  graph_experience_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
}
void CDOTAMatchMetadata_Team::add_graph_experience(float value) {
  graph_experience_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
}
const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_experience() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return graph_experience_;
}
::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_experience() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_experience)
  return &graph_experience_;
}

// repeated float graph_gold_earned = 4;
int CDOTAMatchMetadata_Team::graph_gold_earned_size() const {
  return graph_gold_earned_.size();
}
void CDOTAMatchMetadata_Team::clear_graph_gold_earned() {
  graph_gold_earned_.Clear();
}
float CDOTAMatchMetadata_Team::graph_gold_earned(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_.Get(index);
}
void CDOTAMatchMetadata_Team::set_graph_gold_earned(int index, float value) {
  graph_gold_earned_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
}
void CDOTAMatchMetadata_Team::add_graph_gold_earned(float value) {
  graph_gold_earned_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
}
const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_gold_earned() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return graph_gold_earned_;
}
::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_gold_earned() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_gold_earned)
  return &graph_gold_earned_;
}

// repeated float graph_net_worth = 5;
int CDOTAMatchMetadata_Team::graph_net_worth_size() const {
  return graph_net_worth_.size();
}
void CDOTAMatchMetadata_Team::clear_graph_net_worth() {
  graph_net_worth_.Clear();
}
float CDOTAMatchMetadata_Team::graph_net_worth(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_.Get(index);
}
void CDOTAMatchMetadata_Team::set_graph_net_worth(int index, float value) {
  graph_net_worth_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
}
void CDOTAMatchMetadata_Team::add_graph_net_worth(float value) {
  graph_net_worth_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
}
const ::google::protobuf::RepeatedField< float >&
CDOTAMatchMetadata_Team::graph_net_worth() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return graph_net_worth_;
}
::google::protobuf::RepeatedField< float >*
CDOTAMatchMetadata_Team::mutable_graph_net_worth() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.graph_net_worth)
  return &graph_net_worth_;
}

// optional bool cm_first_pick = 6;
bool CDOTAMatchMetadata_Team::has_cm_first_pick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata_Team::set_has_cm_first_pick() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata_Team::clear_has_cm_first_pick() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata_Team::clear_cm_first_pick() {
  cm_first_pick_ = false;
  clear_has_cm_first_pick();
}
bool CDOTAMatchMetadata_Team::cm_first_pick() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_first_pick)
  return cm_first_pick_;
}
void CDOTAMatchMetadata_Team::set_cm_first_pick(bool value) {
  set_has_cm_first_pick();
  cm_first_pick_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_first_pick)
}

// optional uint32 cm_captain_player_id = 7;
bool CDOTAMatchMetadata_Team::has_cm_captain_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchMetadata_Team::set_has_cm_captain_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchMetadata_Team::clear_has_cm_captain_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadata_Team::clear_cm_captain_player_id() {
  cm_captain_player_id_ = 0u;
  clear_has_cm_captain_player_id();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_captain_player_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_captain_player_id)
  return cm_captain_player_id_;
}
void CDOTAMatchMetadata_Team::set_cm_captain_player_id(::google::protobuf::uint32 value) {
  set_has_cm_captain_player_id();
  cm_captain_player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_captain_player_id)
}

// repeated uint32 cm_bans = 8;
int CDOTAMatchMetadata_Team::cm_bans_size() const {
  return cm_bans_.size();
}
void CDOTAMatchMetadata_Team::clear_cm_bans() {
  cm_bans_.Clear();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_bans(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_.Get(index);
}
void CDOTAMatchMetadata_Team::set_cm_bans(int index, ::google::protobuf::uint32 value) {
  cm_bans_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
}
void CDOTAMatchMetadata_Team::add_cm_bans(::google::protobuf::uint32 value) {
  cm_bans_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_bans() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return cm_bans_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_bans() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.cm_bans)
  return &cm_bans_;
}

// repeated uint32 cm_picks = 9;
int CDOTAMatchMetadata_Team::cm_picks_size() const {
  return cm_picks_.size();
}
void CDOTAMatchMetadata_Team::clear_cm_picks() {
  cm_picks_.Clear();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_picks(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_.Get(index);
}
void CDOTAMatchMetadata_Team::set_cm_picks(int index, ::google::protobuf::uint32 value) {
  cm_picks_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
}
void CDOTAMatchMetadata_Team::add_cm_picks(::google::protobuf::uint32 value) {
  cm_picks_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CDOTAMatchMetadata_Team::cm_picks() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return cm_picks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CDOTAMatchMetadata_Team::mutable_cm_picks() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.Team.cm_picks)
  return &cm_picks_;
}

// optional uint32 cm_penalty = 10;
bool CDOTAMatchMetadata_Team::has_cm_penalty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMatchMetadata_Team::set_has_cm_penalty() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMatchMetadata_Team::clear_has_cm_penalty() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMatchMetadata_Team::clear_cm_penalty() {
  cm_penalty_ = 0u;
  clear_has_cm_penalty();
}
::google::protobuf::uint32 CDOTAMatchMetadata_Team::cm_penalty() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.Team.cm_penalty)
  return cm_penalty_;
}
void CDOTAMatchMetadata_Team::set_cm_penalty(::google::protobuf::uint32 value) {
  set_has_cm_penalty();
  cm_penalty_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.Team.cm_penalty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchMetadata::kTeamsFieldNumber;
const int CDOTAMatchMetadata::kItemRewardsFieldNumber;
const int CDOTAMatchMetadata::kLobbyIdFieldNumber;
const int CDOTAMatchMetadata::kReportUntilTimeFieldNumber;
const int CDOTAMatchMetadata::kEventGameCustomTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchMetadata::CDOTAMatchMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchMetadata)
}
CDOTAMatchMetadata::CDOTAMatchMetadata(const CDOTAMatchMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_),
      item_rewards_(from.item_rewards_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_game_custom_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_game_custom_table()) {
    event_game_custom_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_custom_table_);
  }
  ::memcpy(&lobby_id_, &from.lobby_id_,
    reinterpret_cast<char*>(&report_until_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(report_until_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchMetadata)
}

void CDOTAMatchMetadata::SharedCtor() {
  _cached_size_ = 0;
  event_game_custom_table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&report_until_time_) -
    reinterpret_cast<char*>(&lobby_id_) + sizeof(report_until_time_));
}

CDOTAMatchMetadata::~CDOTAMatchMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchMetadata)
  SharedDtor();
}

void CDOTAMatchMetadata::SharedDtor() {
  event_game_custom_table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchMetadata::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchMetadata& CDOTAMatchMetadata::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchMetadata* CDOTAMatchMetadata::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchMetadata* n = new CDOTAMatchMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchMetadata)
  teams_.Clear();
  item_rewards_.Clear();
  if (has_event_game_custom_table()) {
    GOOGLE_DCHECK(!event_game_custom_table_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*event_game_custom_table_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&lobby_id_, 0, reinterpret_cast<char*>(&report_until_time_) -
      reinterpret_cast<char*>(&lobby_id_) + sizeof(report_until_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_rewards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_lobby_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 report_until_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_report_until_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &report_until_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes event_game_custom_table = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_event_game_custom_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchMetadata)
  return false;
#undef DO_
}

void CDOTAMatchMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0, n = this->item_rewards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_rewards(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->lobby_id(), output);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->report_until_time(), output);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->event_game_custom_table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchMetadata)
}

::google::protobuf::uint8* CDOTAMatchMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->teams(i), deterministic, target);
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  for (unsigned int i = 0, n = this->item_rewards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->item_rewards(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->lobby_id(), target);
  }

  // optional fixed64 report_until_time = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->report_until_time(), target);
  }

  // optional bytes event_game_custom_table = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->event_game_custom_table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchMetadata)
  return target;
}

size_t CDOTAMatchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  // repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
  {
    unsigned int count = this->item_rewards_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_rewards(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes event_game_custom_table = 5;
    if (has_event_game_custom_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->event_game_custom_table());
    }

    // optional fixed64 lobby_id = 3;
    if (has_lobby_id()) {
      total_size += 1 + 8;
    }

    // optional fixed64 report_until_time = 4;
    if (has_report_until_time()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchMetadata::MergeFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  item_rewards_.MergeFrom(from.item_rewards_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_event_game_custom_table();
      event_game_custom_table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_game_custom_table_);
    }
    if (cached_has_bits & 0x00000002u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      report_until_time_ = from.report_until_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchMetadata::CopyFrom(const CDOTAMatchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchMetadata::Swap(CDOTAMatchMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchMetadata::InternalSwap(CDOTAMatchMetadata* other) {
  teams_.InternalSwap(&other->teams_);
  item_rewards_.InternalSwap(&other->item_rewards_);
  event_game_custom_table_.Swap(&other->event_game_custom_table_);
  std::swap(lobby_id_, other->lobby_id_);
  std::swap(report_until_time_, other->report_until_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchMetadata::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchMetadata

// repeated .proto.dota.CDOTAMatchMetadata.Team teams = 1;
int CDOTAMatchMetadata::teams_size() const {
  return teams_.size();
}
void CDOTAMatchMetadata::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CDOTAMatchMetadata_Team& CDOTAMatchMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Get(index);
}
::proto::dota::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Mutable(index);
}
::proto::dota::CDOTAMatchMetadata_Team* CDOTAMatchMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >*
CDOTAMatchMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchMetadata_Team >&
CDOTAMatchMetadata::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.teams)
  return teams_;
}

// repeated .proto.dota.CLobbyTimedRewardDetails item_rewards = 2;
int CDOTAMatchMetadata::item_rewards_size() const {
  return item_rewards_.size();
}
void CDOTAMatchMetadata::clear_item_rewards() {
  item_rewards_.Clear();
}
const ::proto::dota::CLobbyTimedRewardDetails& CDOTAMatchMetadata::item_rewards(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Get(index);
}
::proto::dota::CLobbyTimedRewardDetails* CDOTAMatchMetadata::mutable_item_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Mutable(index);
}
::proto::dota::CLobbyTimedRewardDetails* CDOTAMatchMetadata::add_item_rewards() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >*
CDOTAMatchMetadata::mutable_item_rewards() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchMetadata.item_rewards)
  return &item_rewards_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CLobbyTimedRewardDetails >&
CDOTAMatchMetadata::item_rewards() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchMetadata.item_rewards)
  return item_rewards_;
}

// optional fixed64 lobby_id = 3;
bool CDOTAMatchMetadata::has_lobby_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchMetadata::set_has_lobby_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchMetadata::clear_has_lobby_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchMetadata::clear_lobby_id() {
  lobby_id_ = GOOGLE_ULONGLONG(0);
  clear_has_lobby_id();
}
::google::protobuf::uint64 CDOTAMatchMetadata::lobby_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.lobby_id)
  return lobby_id_;
}
void CDOTAMatchMetadata::set_lobby_id(::google::protobuf::uint64 value) {
  set_has_lobby_id();
  lobby_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.lobby_id)
}

// optional fixed64 report_until_time = 4;
bool CDOTAMatchMetadata::has_report_until_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchMetadata::set_has_report_until_time() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchMetadata::clear_has_report_until_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchMetadata::clear_report_until_time() {
  report_until_time_ = GOOGLE_ULONGLONG(0);
  clear_has_report_until_time();
}
::google::protobuf::uint64 CDOTAMatchMetadata::report_until_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.report_until_time)
  return report_until_time_;
}
void CDOTAMatchMetadata::set_report_until_time(::google::protobuf::uint64 value) {
  set_has_report_until_time();
  report_until_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.report_until_time)
}

// optional bytes event_game_custom_table = 5;
bool CDOTAMatchMetadata::has_event_game_custom_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchMetadata::set_has_event_game_custom_table() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchMetadata::clear_has_event_game_custom_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchMetadata::clear_event_game_custom_table() {
  event_game_custom_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event_game_custom_table();
}
const ::std::string& CDOTAMatchMetadata::event_game_custom_table() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  return event_game_custom_table_.GetNoArena();
}
void CDOTAMatchMetadata::set_event_game_custom_table(const ::std::string& value) {
  set_has_event_game_custom_table();
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
#if LANG_CXX11
void CDOTAMatchMetadata::set_event_game_custom_table(::std::string&& value) {
  set_has_event_game_custom_table();
  event_game_custom_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
#endif
void CDOTAMatchMetadata::set_event_game_custom_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event_game_custom_table();
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
void CDOTAMatchMetadata::set_event_game_custom_table(const void* value, size_t size) {
  set_has_event_game_custom_table();
  event_game_custom_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}
::std::string* CDOTAMatchMetadata::mutable_event_game_custom_table() {
  set_has_event_game_custom_table();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  return event_game_custom_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAMatchMetadata::release_event_game_custom_table() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
  clear_has_event_game_custom_table();
  return event_game_custom_table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAMatchMetadata::set_allocated_event_game_custom_table(::std::string* event_game_custom_table) {
  if (event_game_custom_table != NULL) {
    set_has_event_game_custom_table();
  } else {
    clear_has_event_game_custom_table();
  }
  event_game_custom_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event_game_custom_table);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchMetadata.event_game_custom_table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Player::kAccountIdFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPlayerSlotFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Player::kPositionStreamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}
CDOTAMatchPrivateMetadata_Team_Player::CDOTAMatchPrivateMetadata_Team_Player(const CDOTAMatchPrivateMetadata_Team_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_position_stream()) {
    position_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_stream_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedCtor() {
  _cached_size_ = 0;
  position_stream_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, reinterpret_cast<char*>(&player_slot_) -
    reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
}

CDOTAMatchPrivateMetadata_Team_Player::~CDOTAMatchPrivateMetadata_Team_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Player::SharedDtor() {
  position_stream_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Player::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team_Player::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team_Player::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchPrivateMetadata_Team_Player* n = new CDOTAMatchPrivateMetadata_Team_Player;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchPrivateMetadata_Team_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  if (has_position_stream()) {
    GOOGLE_DCHECK(!position_stream_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*position_stream_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&account_id_, 0, reinterpret_cast<char*>(&player_slot_) -
      reinterpret_cast<char*>(&account_id_) + sizeof(player_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchPrivateMetadata_Team_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_player_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes position_stream = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_position_stream()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_slot(), output);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->position_stream(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Player::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 player_slot = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_slot(), target);
  }

  // optional bytes position_stream = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->position_stream(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes position_stream = 3;
    if (has_position_stream()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->position_stream());
    }

    // optional uint32 account_id = 1;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 player_slot = 2;
    if (has_player_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Player* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchPrivateMetadata_Team_Player>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_position_stream();
      position_stream_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.position_stream_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      player_slot_ = from.player_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Player::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Player::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Player::Swap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Player::InternalSwap(CDOTAMatchPrivateMetadata_Team_Player* other) {
  position_stream_.Swap(&other->position_stream_);
  std::swap(account_id_, other->account_id_);
  std::swap(player_slot_, other->player_slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Player::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchPrivateMetadata_Team_Player

// optional uint32 account_id = 1;
bool CDOTAMatchPrivateMetadata_Team_Player::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Player::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_account_id() {
  account_id_ = 0u;
  clear_has_account_id();
}
::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::account_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.account_id)
  return account_id_;
}
void CDOTAMatchPrivateMetadata_Team_Player::set_account_id(::google::protobuf::uint32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.account_id)
}

// optional uint32 player_slot = 2;
bool CDOTAMatchPrivateMetadata_Team_Player::has_player_slot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Player::set_has_player_slot() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_has_player_slot() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_player_slot() {
  player_slot_ = 0u;
  clear_has_player_slot();
}
::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Player::player_slot() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.player_slot)
  return player_slot_;
}
void CDOTAMatchPrivateMetadata_Team_Player::set_player_slot(::google::protobuf::uint32 value) {
  set_has_player_slot();
  player_slot_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.player_slot)
}

// optional bytes position_stream = 3;
bool CDOTAMatchPrivateMetadata_Team_Player::has_position_stream() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Player::set_has_position_stream() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_has_position_stream() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team_Player::clear_position_stream() {
  position_stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_position_stream();
}
const ::std::string& CDOTAMatchPrivateMetadata_Team_Player::position_stream() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return position_stream_.GetNoArena();
}
void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const ::std::string& value) {
  set_has_position_stream();
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
#if LANG_CXX11
void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(::std::string&& value) {
  set_has_position_stream();
  position_stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
#endif
void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_position_stream();
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
void CDOTAMatchPrivateMetadata_Team_Player::set_position_stream(const void* value, size_t size) {
  set_has_position_stream();
  position_stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}
::std::string* CDOTAMatchPrivateMetadata_Team_Player::mutable_position_stream() {
  set_has_position_stream();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  return position_stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAMatchPrivateMetadata_Team_Player::release_position_stream() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
  clear_has_position_stream();
  return position_stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAMatchPrivateMetadata_Team_Player::set_allocated_position_stream(::std::string* position_stream) {
  if (position_stream != NULL) {
    set_has_position_stream();
  } else {
    clear_has_position_stream();
  }
  position_stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), position_stream);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchPrivateMetadata.Team.Player.position_stream)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team_Building::kUnitNameFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantXFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kPositionQuantYFieldNumber;
const int CDOTAMatchPrivateMetadata_Team_Building::kDeathTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}
CDOTAMatchPrivateMetadata_Team_Building::CDOTAMatchPrivateMetadata_Team_Building(const CDOTAMatchPrivateMetadata_Team_Building& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_unit_name()) {
    unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
  }
  ::memcpy(&position_quant_x_, &from.position_quant_x_,
    reinterpret_cast<char*>(&death_time_) -
    reinterpret_cast<char*>(&position_quant_x_) + sizeof(death_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedCtor() {
  _cached_size_ = 0;
  unit_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_quant_x_, 0, reinterpret_cast<char*>(&death_time_) -
    reinterpret_cast<char*>(&position_quant_x_) + sizeof(death_time_));
}

CDOTAMatchPrivateMetadata_Team_Building::~CDOTAMatchPrivateMetadata_Team_Building() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team_Building::SharedDtor() {
  unit_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAMatchPrivateMetadata_Team_Building::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team_Building::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team_Building::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team_Building::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchPrivateMetadata_Team_Building* n = new CDOTAMatchPrivateMetadata_Team_Building;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchPrivateMetadata_Team_Building::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  if (has_unit_name()) {
    GOOGLE_DCHECK(!unit_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*unit_name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&position_quant_x_, 0, reinterpret_cast<char*>(&death_time_) -
      reinterpret_cast<char*>(&position_quant_x_) + sizeof(death_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchPrivateMetadata_Team_Building::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unit_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unit_name().data(), this->unit_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_quant_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_position_quant_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position_quant_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_position_quant_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_quant_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float death_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_death_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &death_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team_Building::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->unit_name(), output);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position_quant_x(), output);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position_quant_y(), output);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->death_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team_Building::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unit_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unit_name().data(), this->unit_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unit_name(), target);
  }

  // optional uint32 position_quant_x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position_quant_x(), target);
  }

  // optional uint32 position_quant_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position_quant_y(), target);
  }

  // optional float death_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->death_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team_Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string unit_name = 1;
    if (has_unit_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_name());
    }

    // optional uint32 position_quant_x = 2;
    if (has_position_quant_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_x());
    }

    // optional uint32 position_quant_y = 3;
    if (has_position_quant_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position_quant_y());
    }

    // optional float death_time = 4;
    if (has_death_time()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team_Building* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchPrivateMetadata_Team_Building>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::MergeFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_unit_name();
      unit_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unit_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      position_quant_x_ = from.position_quant_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      position_quant_y_ = from.position_quant_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      death_time_ = from.death_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team_Building::CopyFrom(const CDOTAMatchPrivateMetadata_Team_Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team_Building::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team_Building::Swap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team_Building::InternalSwap(CDOTAMatchPrivateMetadata_Team_Building* other) {
  unit_name_.Swap(&other->unit_name_);
  std::swap(position_quant_x_, other->position_quant_x_);
  std::swap(position_quant_y_, other->position_quant_y_);
  std::swap(death_time_, other->death_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team_Building::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchPrivateMetadata_Team_Building

// optional string unit_name = 1;
bool CDOTAMatchPrivateMetadata_Team_Building::has_unit_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_has_unit_name() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_has_unit_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_unit_name() {
  unit_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_unit_name();
}
const ::std::string& CDOTAMatchPrivateMetadata_Team_Building::unit_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return unit_name_.GetNoArena();
}
void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const ::std::string& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
#if LANG_CXX11
void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(::std::string&& value) {
  set_has_unit_name();
  unit_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
#endif
void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
void CDOTAMatchPrivateMetadata_Team_Building::set_unit_name(const char* value, size_t size) {
  set_has_unit_name();
  unit_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}
::std::string* CDOTAMatchPrivateMetadata_Team_Building::mutable_unit_name() {
  set_has_unit_name();
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  return unit_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CDOTAMatchPrivateMetadata_Team_Building::release_unit_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
  clear_has_unit_name();
  return unit_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CDOTAMatchPrivateMetadata_Team_Building::set_allocated_unit_name(::std::string* unit_name) {
  if (unit_name != NULL) {
    set_has_unit_name();
  } else {
    clear_has_unit_name();
  }
  unit_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), unit_name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.unit_name)
}

// optional uint32 position_quant_x = 2;
bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_has_position_quant_x() {
  _has_bits_[0] |= 0x00000002u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_has_position_quant_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_x() {
  position_quant_x_ = 0u;
  clear_has_position_quant_x();
}
::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
  return position_quant_x_;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_x(::google::protobuf::uint32 value) {
  set_has_position_quant_x();
  position_quant_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_x)
}

// optional uint32 position_quant_y = 3;
bool CDOTAMatchPrivateMetadata_Team_Building::has_position_quant_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_has_position_quant_y() {
  _has_bits_[0] |= 0x00000004u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_has_position_quant_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_position_quant_y() {
  position_quant_y_ = 0u;
  clear_has_position_quant_y();
}
::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team_Building::position_quant_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
  return position_quant_y_;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_position_quant_y(::google::protobuf::uint32 value) {
  set_has_position_quant_y();
  position_quant_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.position_quant_y)
}

// optional float death_time = 4;
bool CDOTAMatchPrivateMetadata_Team_Building::has_death_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_has_death_time() {
  _has_bits_[0] |= 0x00000008u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_has_death_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDOTAMatchPrivateMetadata_Team_Building::clear_death_time() {
  death_time_ = 0;
  clear_has_death_time();
}
float CDOTAMatchPrivateMetadata_Team_Building::death_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.death_time)
  return death_time_;
}
void CDOTAMatchPrivateMetadata_Team_Building::set_death_time(float value) {
  set_has_death_time();
  death_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.Building.death_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata_Team::kDotaTeamFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kPlayersFieldNumber;
const int CDOTAMatchPrivateMetadata_Team::kBuildingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
}
CDOTAMatchPrivateMetadata_Team::CDOTAMatchPrivateMetadata_Team(const CDOTAMatchPrivateMetadata_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      players_(from.players_),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dota_team_ = from.dota_team_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
}

void CDOTAMatchPrivateMetadata_Team::SharedCtor() {
  _cached_size_ = 0;
  dota_team_ = 0u;
}

CDOTAMatchPrivateMetadata_Team::~CDOTAMatchPrivateMetadata_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata.Team)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata_Team::SharedDtor() {
}

void CDOTAMatchPrivateMetadata_Team::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata_Team::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata_Team::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata_Team::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchPrivateMetadata_Team* n = new CDOTAMatchPrivateMetadata_Team;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchPrivateMetadata_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  players_.Clear();
  buildings_.Clear();
  dota_team_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchPrivateMetadata_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dota_team = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_dota_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dota_team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buildings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dota_team(), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->players(i), output);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buildings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata.Team)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata_Team::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dota_team = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dota_team(), target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->players(i), deterministic, target);
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  for (unsigned int i = 0, n = this->buildings_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buildings(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata.Team)
  return target;
}

size_t CDOTAMatchPrivateMetadata_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
  {
    unsigned int count = this->buildings_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buildings(i));
    }
  }

  // optional uint32 dota_team = 1;
  if (has_dota_team()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dota_team());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata_Team* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchPrivateMetadata_Team>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata.Team)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata_Team::MergeFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  buildings_.MergeFrom(from.buildings_);
  if (from.has_dota_team()) {
    set_dota_team(from.dota_team());
  }
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata_Team::CopyFrom(const CDOTAMatchPrivateMetadata_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata_Team::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata_Team::Swap(CDOTAMatchPrivateMetadata_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata_Team::InternalSwap(CDOTAMatchPrivateMetadata_Team* other) {
  players_.InternalSwap(&other->players_);
  buildings_.InternalSwap(&other->buildings_);
  std::swap(dota_team_, other->dota_team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata_Team::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchPrivateMetadata_Team

// optional uint32 dota_team = 1;
bool CDOTAMatchPrivateMetadata_Team::has_dota_team() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDOTAMatchPrivateMetadata_Team::set_has_dota_team() {
  _has_bits_[0] |= 0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team::clear_has_dota_team() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDOTAMatchPrivateMetadata_Team::clear_dota_team() {
  dota_team_ = 0u;
  clear_has_dota_team();
}
::google::protobuf::uint32 CDOTAMatchPrivateMetadata_Team::dota_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.dota_team)
  return dota_team_;
}
void CDOTAMatchPrivateMetadata_Team::set_dota_team(::google::protobuf::uint32 value) {
  set_has_dota_team();
  dota_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAMatchPrivateMetadata.Team.dota_team)
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Player players = 2;
int CDOTAMatchPrivateMetadata_Team::players_size() const {
  return players_.size();
}
void CDOTAMatchPrivateMetadata_Team::clear_players() {
  players_.Clear();
}
const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player& CDOTAMatchPrivateMetadata_Team::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Get(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Mutable(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team_Player* CDOTAMatchPrivateMetadata_Team::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >*
CDOTAMatchPrivateMetadata_Team::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Player >&
CDOTAMatchPrivateMetadata_Team::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.players)
  return players_;
}

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team.Building buildings = 3;
int CDOTAMatchPrivateMetadata_Team::buildings_size() const {
  return buildings_.size();
}
void CDOTAMatchPrivateMetadata_Team::clear_buildings() {
  buildings_.Clear();
}
const ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building& CDOTAMatchPrivateMetadata_Team::buildings(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Get(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Mutable(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team_Building* CDOTAMatchPrivateMetadata_Team::add_buildings() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >*
CDOTAMatchPrivateMetadata_Team::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return &buildings_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team_Building >&
CDOTAMatchPrivateMetadata_Team::buildings() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.Team.buildings)
  return buildings_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAMatchPrivateMetadata::kTeamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAMatchPrivateMetadata)
}
CDOTAMatchPrivateMetadata::CDOTAMatchPrivateMetadata(const CDOTAMatchPrivateMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      teams_(from.teams_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAMatchPrivateMetadata)
}

void CDOTAMatchPrivateMetadata::SharedCtor() {
  _cached_size_ = 0;
}

CDOTAMatchPrivateMetadata::~CDOTAMatchPrivateMetadata() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAMatchPrivateMetadata)
  SharedDtor();
}

void CDOTAMatchPrivateMetadata::SharedDtor() {
}

void CDOTAMatchPrivateMetadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAMatchPrivateMetadata::descriptor() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CDOTAMatchPrivateMetadata& CDOTAMatchPrivateMetadata::default_instance() {
  protobuf_dota_5fmatch_5fmetadata_2eproto::InitDefaults();
  return *internal_default_instance();
}

CDOTAMatchPrivateMetadata* CDOTAMatchPrivateMetadata::New(::google::protobuf::Arena* arena) const {
  CDOTAMatchPrivateMetadata* n = new CDOTAMatchPrivateMetadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDOTAMatchPrivateMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAMatchPrivateMetadata)
  teams_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CDOTAMatchPrivateMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAMatchPrivateMetadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAMatchPrivateMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAMatchPrivateMetadata)
  return false;
#undef DO_
}

void CDOTAMatchPrivateMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAMatchPrivateMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teams(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAMatchPrivateMetadata)
}

::google::protobuf::uint8* CDOTAMatchPrivateMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAMatchPrivateMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  for (unsigned int i = 0, n = this->teams_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->teams(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAMatchPrivateMetadata)
  return target;
}

size_t CDOTAMatchPrivateMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAMatchPrivateMetadata)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
  {
    unsigned int count = this->teams_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teams(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAMatchPrivateMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAMatchPrivateMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CDOTAMatchPrivateMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAMatchPrivateMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAMatchPrivateMetadata)
    MergeFrom(*source);
  }
}

void CDOTAMatchPrivateMetadata::MergeFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAMatchPrivateMetadata::CopyFrom(const CDOTAMatchPrivateMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAMatchPrivateMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAMatchPrivateMetadata::IsInitialized() const {
  return true;
}

void CDOTAMatchPrivateMetadata::Swap(CDOTAMatchPrivateMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAMatchPrivateMetadata::InternalSwap(CDOTAMatchPrivateMetadata* other) {
  teams_.InternalSwap(&other->teams_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDOTAMatchPrivateMetadata::GetMetadata() const {
  protobuf_dota_5fmatch_5fmetadata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dota_5fmatch_5fmetadata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDOTAMatchPrivateMetadata

// repeated .proto.dota.CDOTAMatchPrivateMetadata.Team teams = 1;
int CDOTAMatchPrivateMetadata::teams_size() const {
  return teams_.size();
}
void CDOTAMatchPrivateMetadata::clear_teams() {
  teams_.Clear();
}
const ::proto::dota::CDOTAMatchPrivateMetadata_Team& CDOTAMatchPrivateMetadata::teams(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Get(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::mutable_teams(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Mutable(index);
}
::proto::dota::CDOTAMatchPrivateMetadata_Team* CDOTAMatchPrivateMetadata::add_teams() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >*
CDOTAMatchPrivateMetadata::mutable_teams() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return &teams_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTAMatchPrivateMetadata_Team >&
CDOTAMatchPrivateMetadata::teams() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTAMatchPrivateMetadata.teams)
  return teams_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

// @@protoc_insertion_point(global_scope)
